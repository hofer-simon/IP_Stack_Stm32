
IP_Stack_Stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016468  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003178  08016618  08016618  00026618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019790  08019790  00030098  2**0
                  CONTENTS
  4 .ARM          00000008  08019790  08019790  00029790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019798  08019798  00030098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019798  08019798  00029798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801979c  0801979c  0002979c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  080197a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030098  2**0
                  CONTENTS
 10 .bss          0000d484  20000098  20000098  00030098  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000d51c  2000d51c  00030098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002f7cf  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007400  00000000  00000000  0005f897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022a8  00000000  00000000  00066c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002168  00000000  00000000  00068f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001153d  00000000  00000000  0006b0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000337e0  00000000  00000000  0007c5e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fd1c2  00000000  00000000  000afdc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001acf87  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000098cc  00000000  00000000  001acfd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000098 	.word	0x20000098
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08016600 	.word	0x08016600

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	08016600 	.word	0x08016600

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fd74 	bl	8001084 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f81c 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f908 	bl	80007b4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005a4:	f000 f8ae 	bl	8000704 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005a8:	f000 f8d6 	bl	8000758 <MX_USB_OTG_FS_PCD_Init>
  MX_USART1_SMARTCARD_Init();
 80005ac:	f000 f87e 	bl	80006ac <MX_USART1_SMARTCARD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005b0:	f004 ff8a 	bl	80054c8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005b4:	4a05      	ldr	r2, [pc, #20]	; (80005cc <main+0x38>)
 80005b6:	2100      	movs	r1, #0
 80005b8:	4805      	ldr	r0, [pc, #20]	; (80005d0 <main+0x3c>)
 80005ba:	f004 ffe4 	bl	8005586 <osThreadNew>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a04      	ldr	r2, [pc, #16]	; (80005d4 <main+0x40>)
 80005c2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005c4:	f004 ffa4 	bl	8005510 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <main+0x34>
 80005ca:	bf00      	nop
 80005cc:	080194c8 	.word	0x080194c8
 80005d0:	08000911 	.word	0x08000911
 80005d4:	20000654 	.word	0x20000654

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	; 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0320 	add.w	r3, r7, #32
 80005e2:	2230      	movs	r2, #48	; 0x30
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f014 ffb2 	bl	8015550 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	4b28      	ldr	r3, [pc, #160]	; (80006a4 <SystemClock_Config+0xcc>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	4a27      	ldr	r2, [pc, #156]	; (80006a4 <SystemClock_Config+0xcc>)
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	; 0x40
 800060c:	4b25      	ldr	r3, [pc, #148]	; (80006a4 <SystemClock_Config+0xcc>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000618:	2300      	movs	r3, #0
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	4b22      	ldr	r3, [pc, #136]	; (80006a8 <SystemClock_Config+0xd0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a21      	ldr	r2, [pc, #132]	; (80006a8 <SystemClock_Config+0xd0>)
 8000622:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4b1f      	ldr	r3, [pc, #124]	; (80006a8 <SystemClock_Config+0xd0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000634:	2301      	movs	r3, #1
 8000636:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000638:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800063c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063e:	2302      	movs	r3, #2
 8000640:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000642:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000646:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000648:	2304      	movs	r3, #4
 800064a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800064c:	23a8      	movs	r3, #168	; 0xa8
 800064e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000650:	2302      	movs	r3, #2
 8000652:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000654:	2307      	movs	r3, #7
 8000656:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000658:	f107 0320 	add.w	r3, r7, #32
 800065c:	4618      	mov	r0, r3
 800065e:	f002 fc4b 	bl	8002ef8 <HAL_RCC_OscConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000668:	f000 f95c 	bl	8000924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066c:	230f      	movs	r3, #15
 800066e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000670:	2302      	movs	r3, #2
 8000672:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000678:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800067c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800067e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000682:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	2105      	movs	r1, #5
 800068a:	4618      	mov	r0, r3
 800068c:	f002 feac 	bl	80033e8 <HAL_RCC_ClockConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000696:	f000 f945 	bl	8000924 <Error_Handler>
  }
}
 800069a:	bf00      	nop
 800069c:	3750      	adds	r7, #80	; 0x50
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40007000 	.word	0x40007000

080006ac <MX_USART1_SMARTCARD_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_SMARTCARD_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  hsc1.Instance = USART1;
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <MX_USART1_SMARTCARD_Init+0x50>)
 80006b2:	4a13      	ldr	r2, [pc, #76]	; (8000700 <MX_USART1_SMARTCARD_Init+0x54>)
 80006b4:	601a      	str	r2, [r3, #0]
  hsc1.Init.BaudRate = 115200;
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_USART1_SMARTCARD_Init+0x50>)
 80006b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006bc:	605a      	str	r2, [r3, #4]
  hsc1.Init.WordLength = SMARTCARD_WORDLENGTH_9B;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_USART1_SMARTCARD_Init+0x50>)
 80006c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006c4:	609a      	str	r2, [r3, #8]
  hsc1.Init.StopBits = SMARTCARD_STOPBITS_1_5;
 80006c6:	4b0d      	ldr	r3, [pc, #52]	; (80006fc <MX_USART1_SMARTCARD_Init+0x50>)
 80006c8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80006cc:	60da      	str	r2, [r3, #12]
  hsc1.Init.Parity = SMARTCARD_PARITY_EVEN;
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <MX_USART1_SMARTCARD_Init+0x50>)
 80006d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006d4:	611a      	str	r2, [r3, #16]
  hsc1.Init.Mode = SMARTCARD_MODE_TX_RX;
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_USART1_SMARTCARD_Init+0x50>)
 80006d8:	220c      	movs	r2, #12
 80006da:	615a      	str	r2, [r3, #20]
  hsc1.Init.GuardTime = 0;
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <MX_USART1_SMARTCARD_Init+0x50>)
 80006de:	2200      	movs	r2, #0
 80006e0:	629a      	str	r2, [r3, #40]	; 0x28
  hsc1.Init.NACKState = SMARTCARD_NACK_DISABLE;
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_USART1_SMARTCARD_Init+0x50>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SMARTCARD_Init(&hsc1) != HAL_OK)
 80006e8:	4804      	ldr	r0, [pc, #16]	; (80006fc <MX_USART1_SMARTCARD_Init+0x50>)
 80006ea:	f003 f89d 	bl	8003828 <HAL_SMARTCARD_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_USART1_SMARTCARD_Init+0x4c>
  {
    Error_Handler();
 80006f4:	f000 f916 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	200000b4 	.word	0x200000b4
 8000700:	40011000 	.word	0x40011000

08000704 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000708:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_USART3_UART_Init+0x4c>)
 800070a:	4a12      	ldr	r2, [pc, #72]	; (8000754 <MX_USART3_UART_Init+0x50>)
 800070c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800070e:	4b10      	ldr	r3, [pc, #64]	; (8000750 <MX_USART3_UART_Init+0x4c>)
 8000710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000714:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_USART3_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_USART3_UART_Init+0x4c>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_USART3_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_USART3_UART_Init+0x4c>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_USART3_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_USART3_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_USART3_UART_Init+0x4c>)
 800073c:	f003 fb9c 	bl	8003e78 <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000746:	f000 f8ed 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000104 	.word	0x20000104
 8000754:	40004800 	.word	0x40004800

08000758 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800075e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000762:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000764:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000766:	2204      	movs	r2, #4
 8000768:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800076c:	2202      	movs	r2, #2
 800076e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000778:	2202      	movs	r2, #2
 800077a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077e:	2201      	movs	r2, #1
 8000780:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000790:	2201      	movs	r2, #1
 8000792:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000796:	2200      	movs	r2, #0
 8000798:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079c:	f002 fa8f 	bl	8002cbe <HAL_PCD_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007a6:	f000 f8bd 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000148 	.word	0x20000148

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08c      	sub	sp, #48	; 0x30
 80007b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	61bb      	str	r3, [r7, #24]
 80007ce:	4b4c      	ldr	r3, [pc, #304]	; (8000900 <MX_GPIO_Init+0x14c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a4b      	ldr	r2, [pc, #300]	; (8000900 <MX_GPIO_Init+0x14c>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b49      	ldr	r3, [pc, #292]	; (8000900 <MX_GPIO_Init+0x14c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	61bb      	str	r3, [r7, #24]
 80007e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
 80007ea:	4b45      	ldr	r3, [pc, #276]	; (8000900 <MX_GPIO_Init+0x14c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a44      	ldr	r2, [pc, #272]	; (8000900 <MX_GPIO_Init+0x14c>)
 80007f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b42      	ldr	r3, [pc, #264]	; (8000900 <MX_GPIO_Init+0x14c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fe:	617b      	str	r3, [r7, #20]
 8000800:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	4b3e      	ldr	r3, [pc, #248]	; (8000900 <MX_GPIO_Init+0x14c>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a3d      	ldr	r2, [pc, #244]	; (8000900 <MX_GPIO_Init+0x14c>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b3b      	ldr	r3, [pc, #236]	; (8000900 <MX_GPIO_Init+0x14c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	4b37      	ldr	r3, [pc, #220]	; (8000900 <MX_GPIO_Init+0x14c>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a36      	ldr	r2, [pc, #216]	; (8000900 <MX_GPIO_Init+0x14c>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b34      	ldr	r3, [pc, #208]	; (8000900 <MX_GPIO_Init+0x14c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	4b30      	ldr	r3, [pc, #192]	; (8000900 <MX_GPIO_Init+0x14c>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a2f      	ldr	r2, [pc, #188]	; (8000900 <MX_GPIO_Init+0x14c>)
 8000844:	f043 0308 	orr.w	r3, r3, #8
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b2d      	ldr	r3, [pc, #180]	; (8000900 <MX_GPIO_Init+0x14c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0308 	and.w	r3, r3, #8
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b29      	ldr	r3, [pc, #164]	; (8000900 <MX_GPIO_Init+0x14c>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a28      	ldr	r2, [pc, #160]	; (8000900 <MX_GPIO_Init+0x14c>)
 8000860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b26      	ldr	r3, [pc, #152]	; (8000900 <MX_GPIO_Init+0x14c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	f244 0181 	movw	r1, #16513	; 0x4081
 8000878:	4822      	ldr	r0, [pc, #136]	; (8000904 <MX_GPIO_Init+0x150>)
 800087a:	f002 fa07 	bl	8002c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2140      	movs	r1, #64	; 0x40
 8000882:	4821      	ldr	r0, [pc, #132]	; (8000908 <MX_GPIO_Init+0x154>)
 8000884:	f002 fa02 	bl	8002c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000888:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	481b      	ldr	r0, [pc, #108]	; (800090c <MX_GPIO_Init+0x158>)
 80008a0:	f002 f848 	bl	8002934 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|LD2_Pin;
 80008a4:	f244 0381 	movw	r3, #16513	; 0x4081
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	4811      	ldr	r0, [pc, #68]	; (8000904 <MX_GPIO_Init+0x150>)
 80008be:	f002 f839 	bl	8002934 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008c2:	2340      	movs	r3, #64	; 0x40
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	480b      	ldr	r0, [pc, #44]	; (8000908 <MX_GPIO_Init+0x154>)
 80008da:	f002 f82b 	bl	8002934 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008de:	2380      	movs	r3, #128	; 0x80
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e2:	2300      	movs	r3, #0
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_GPIO_Init+0x154>)
 80008f2:	f002 f81f 	bl	8002934 <HAL_GPIO_Init>

}
 80008f6:	bf00      	nop
 80008f8:	3730      	adds	r7, #48	; 0x30
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800
 8000904:	40020400 	.word	0x40020400
 8000908:	40021800 	.word	0x40021800
 800090c:	40020800 	.word	0x40020800

08000910 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000918:	f004 f872 	bl	8004a00 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800091c:	2001      	movs	r0, #1
 800091e:	f004 fec4 	bl	80056aa <osDelay>
 8000922:	e7fb      	b.n	800091c <StartDefaultTask+0xc>

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092c:	e7fe      	b.n	800092c <Error_Handler+0x8>
	...

08000930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b12      	ldr	r3, [pc, #72]	; (8000984 <HAL_MspInit+0x54>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	4a11      	ldr	r2, [pc, #68]	; (8000984 <HAL_MspInit+0x54>)
 8000940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000944:	6453      	str	r3, [r2, #68]	; 0x44
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <HAL_MspInit+0x54>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <HAL_MspInit+0x54>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	4a0a      	ldr	r2, [pc, #40]	; (8000984 <HAL_MspInit+0x54>)
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000960:	6413      	str	r3, [r2, #64]	; 0x40
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <HAL_MspInit+0x54>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	210f      	movs	r1, #15
 8000972:	f06f 0001 	mvn.w	r0, #1
 8000976:	f000 fcf6 	bl	8001366 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800

08000988 <HAL_SMARTCARD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmartcard: SMARTCARD handle pointer
* @retval None
*/
void HAL_SMARTCARD_MspInit(SMARTCARD_HandleTypeDef* hsmartcard)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	; 0x28
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  if(hsmartcard->Instance==USART1)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a19      	ldr	r2, [pc, #100]	; (8000a0c <HAL_SMARTCARD_MspInit+0x84>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d12b      	bne.n	8000a02 <HAL_SMARTCARD_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
 80009ae:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <HAL_SMARTCARD_MspInit+0x88>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	4a17      	ldr	r2, [pc, #92]	; (8000a10 <HAL_SMARTCARD_MspInit+0x88>)
 80009b4:	f043 0310 	orr.w	r3, r3, #16
 80009b8:	6453      	str	r3, [r2, #68]	; 0x44
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <HAL_SMARTCARD_MspInit+0x88>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009be:	f003 0310 	and.w	r3, r3, #16
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <HAL_SMARTCARD_MspInit+0x88>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a10      	ldr	r2, [pc, #64]	; (8000a10 <HAL_SMARTCARD_MspInit+0x88>)
 80009d0:	f043 0302 	orr.w	r3, r3, #2
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <HAL_SMARTCARD_MspInit+0x88>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0302 	and.w	r3, r3, #2
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009e2:	2340      	movs	r3, #64	; 0x40
 80009e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009e6:	2312      	movs	r3, #18
 80009e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ee:	2303      	movs	r3, #3
 80009f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009f2:	2307      	movs	r3, #7
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	4619      	mov	r1, r3
 80009fc:	4805      	ldr	r0, [pc, #20]	; (8000a14 <HAL_SMARTCARD_MspInit+0x8c>)
 80009fe:	f001 ff99 	bl	8002934 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a02:	bf00      	nop
 8000a04:	3728      	adds	r7, #40	; 0x28
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40011000 	.word	0x40011000
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020400 	.word	0x40020400

08000a18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	; 0x28
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a19      	ldr	r2, [pc, #100]	; (8000a9c <HAL_UART_MspInit+0x84>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d12c      	bne.n	8000a94 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <HAL_UART_MspInit+0x88>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	4a17      	ldr	r2, [pc, #92]	; (8000aa0 <HAL_UART_MspInit+0x88>)
 8000a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a48:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <HAL_UART_MspInit+0x88>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <HAL_UART_MspInit+0x88>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a10      	ldr	r2, [pc, #64]	; (8000aa0 <HAL_UART_MspInit+0x88>)
 8000a60:	f043 0308 	orr.w	r3, r3, #8
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <HAL_UART_MspInit+0x88>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0308 	and.w	r3, r3, #8
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a80:	2303      	movs	r3, #3
 8000a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a84:	2307      	movs	r3, #7
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <HAL_UART_MspInit+0x8c>)
 8000a90:	f001 ff50 	bl	8002934 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a94:	bf00      	nop
 8000a96:	3728      	adds	r7, #40	; 0x28
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40004800 	.word	0x40004800
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40020c00 	.word	0x40020c00

08000aa8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	; 0x28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ac8:	d13f      	bne.n	8000b4a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <HAL_PCD_MspInit+0xac>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a20      	ldr	r2, [pc, #128]	; (8000b54 <HAL_PCD_MspInit+0xac>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <HAL_PCD_MspInit+0xac>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ae6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af4:	2303      	movs	r3, #3
 8000af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000af8:	230a      	movs	r3, #10
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	4619      	mov	r1, r3
 8000b02:	4815      	ldr	r0, [pc, #84]	; (8000b58 <HAL_PCD_MspInit+0xb0>)
 8000b04:	f001 ff16 	bl	8002934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	480e      	ldr	r0, [pc, #56]	; (8000b58 <HAL_PCD_MspInit+0xb0>)
 8000b1e:	f001 ff09 	bl	8002934 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <HAL_PCD_MspInit+0xac>)
 8000b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b26:	4a0b      	ldr	r2, [pc, #44]	; (8000b54 <HAL_PCD_MspInit+0xac>)
 8000b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b2c:	6353      	str	r3, [r2, #52]	; 0x34
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <HAL_PCD_MspInit+0xac>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	4a07      	ldr	r2, [pc, #28]	; (8000b54 <HAL_PCD_MspInit+0xac>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b3e:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <HAL_PCD_MspInit+0xac>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000b4a:	bf00      	nop
 8000b4c:	3728      	adds	r7, #40	; 0x28
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40020000 	.word	0x40020000

08000b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <NMI_Handler+0x4>

08000b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <HardFault_Handler+0x4>

08000b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <MemManage_Handler+0x4>

08000b6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <BusFault_Handler+0x4>

08000b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <UsageFault_Handler+0x4>

08000b7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8c:	f000 facc 	bl	8001128 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b90:	f007 f8f2 	bl	8007d78 <xTaskGetSchedulerState>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d001      	beq.n	8000b9e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b9a:	f007 ffd5 	bl	8008b48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000ba8:	4802      	ldr	r0, [pc, #8]	; (8000bb4 <ETH_IRQHandler+0x10>)
 8000baa:	f000 ffed 	bl	8001b88 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	2000519c 	.word	0x2000519c

08000bb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
	return 1;
 8000bbc:	2301      	movs	r3, #1
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <_kill>:

int _kill(int pid, int sig)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000bd2:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <_kill+0x20>)
 8000bd4:	2216      	movs	r2, #22
 8000bd6:	601a      	str	r2, [r3, #0]
	return -1;
 8000bd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	2000d508 	.word	0x2000d508

08000bec <_exit>:

void _exit (int status)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff ffe5 	bl	8000bc8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000bfe:	e7fe      	b.n	8000bfe <_exit+0x12>

08000c00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
 8000c10:	e00a      	b.n	8000c28 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c12:	f3af 8000 	nop.w
 8000c16:	4601      	mov	r1, r0
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	1c5a      	adds	r2, r3, #1
 8000c1c:	60ba      	str	r2, [r7, #8]
 8000c1e:	b2ca      	uxtb	r2, r1
 8000c20:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	3301      	adds	r3, #1
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	697a      	ldr	r2, [r7, #20]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	dbf0      	blt.n	8000c12 <_read+0x12>
	}

return len;
 8000c30:	687b      	ldr	r3, [r7, #4]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b086      	sub	sp, #24
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	60f8      	str	r0, [r7, #12]
 8000c42:	60b9      	str	r1, [r7, #8]
 8000c44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
 8000c4a:	e009      	b.n	8000c60 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	1c5a      	adds	r2, r3, #1
 8000c50:	60ba      	str	r2, [r7, #8]
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	617b      	str	r3, [r7, #20]
 8000c60:	697a      	ldr	r2, [r7, #20]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	dbf1      	blt.n	8000c4c <_write+0x12>
	}
	return len;
 8000c68:	687b      	ldr	r3, [r7, #4]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <_close>:

int _close(int file)
{
 8000c72:	b480      	push	{r7}
 8000c74:	b083      	sub	sp, #12
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
	return -1;
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
 8000c92:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c9a:	605a      	str	r2, [r3, #4]
	return 0;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <_isatty>:

int _isatty(int file)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b083      	sub	sp, #12
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
	return 1;
 8000cb2:	2301      	movs	r3, #1
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
	return 0;
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3714      	adds	r7, #20
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
	...

08000cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b087      	sub	sp, #28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce4:	4a14      	ldr	r2, [pc, #80]	; (8000d38 <_sbrk+0x5c>)
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <_sbrk+0x60>)
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf0:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <_sbrk+0x64>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d102      	bne.n	8000cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <_sbrk+0x64>)
 8000cfa:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <_sbrk+0x68>)
 8000cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <_sbrk+0x64>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d205      	bcs.n	8000d18 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <_sbrk+0x6c>)
 8000d0e:	220c      	movs	r2, #12
 8000d10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d12:	f04f 33ff 	mov.w	r3, #4294967295
 8000d16:	e009      	b.n	8000d2c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d18:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <_sbrk+0x64>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d1e:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <_sbrk+0x64>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	4a06      	ldr	r2, [pc, #24]	; (8000d40 <_sbrk+0x64>)
 8000d28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	371c      	adds	r7, #28
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	20030000 	.word	0x20030000
 8000d3c:	00000400 	.word	0x00000400
 8000d40:	20000658 	.word	0x20000658
 8000d44:	2000d520 	.word	0x2000d520
 8000d48:	2000d508 	.word	0x2000d508

08000d4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <SystemInit+0x20>)
 8000d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d56:	4a05      	ldr	r2, [pc, #20]	; (8000d6c <SystemInit+0x20>)
 8000d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d74:	480d      	ldr	r0, [pc, #52]	; (8000dac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d76:	490e      	ldr	r1, [pc, #56]	; (8000db0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d78:	4a0e      	ldr	r2, [pc, #56]	; (8000db4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d7c:	e002      	b.n	8000d84 <LoopCopyDataInit>

08000d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d82:	3304      	adds	r3, #4

08000d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d88:	d3f9      	bcc.n	8000d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8a:	4a0b      	ldr	r2, [pc, #44]	; (8000db8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d8c:	4c0b      	ldr	r4, [pc, #44]	; (8000dbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d90:	e001      	b.n	8000d96 <LoopFillZerobss>

08000d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d94:	3204      	adds	r2, #4

08000d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d98:	d3fb      	bcc.n	8000d92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d9a:	f7ff ffd7 	bl	8000d4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d9e:	f014 fb95 	bl	80154cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000da2:	f7ff fbf7 	bl	8000594 <main>
  bx  lr    
 8000da6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000da8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db0:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8000db4:	080197a0 	.word	0x080197a0
  ldr r2, =_sbss
 8000db8:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8000dbc:	2000d51c 	.word	0x2000d51c

08000dc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dc0:	e7fe      	b.n	8000dc0 <ADC_IRQHandler>

08000dc2 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b083      	sub	sp, #12
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 8000dca:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d00b      	beq.n	8000dea <LAN8742_RegisterBusIO+0x28>
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d007      	beq.n	8000dea <LAN8742_RegisterBusIO+0x28>
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d003      	beq.n	8000dea <LAN8742_RegisterBusIO+0x28>
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	691b      	ldr	r3, [r3, #16]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d102      	bne.n	8000df0 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295
 8000dee:	e014      	b.n	8000e1a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685a      	ldr	r2, [r3, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	68da      	ldr	r2, [r3, #12]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	689a      	ldr	r2, [r3, #8]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	691a      	ldr	r2, [r3, #16]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b086      	sub	sp, #24
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	2300      	movs	r3, #0
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d17c      	bne.n	8000f40 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d002      	beq.n	8000e54 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2220      	movs	r2, #32
 8000e58:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
 8000e5e:	e01c      	b.n	8000e9a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	695b      	ldr	r3, [r3, #20]
 8000e64:	f107 0208 	add.w	r2, r7, #8
 8000e68:	2112      	movs	r1, #18
 8000e6a:	6978      	ldr	r0, [r7, #20]
 8000e6c:	4798      	blx	r3
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	da03      	bge.n	8000e7c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000e74:	f06f 0304 	mvn.w	r3, #4
 8000e78:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000e7a:	e00b      	b.n	8000e94 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	f003 031f 	and.w	r3, r3, #31
 8000e82:	697a      	ldr	r2, [r7, #20]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d105      	bne.n	8000e94 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	697a      	ldr	r2, [r7, #20]
 8000e8c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
         break;
 8000e92:	e005      	b.n	8000ea0 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	3301      	adds	r3, #1
 8000e98:	617b      	str	r3, [r7, #20]
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	2b1f      	cmp	r3, #31
 8000e9e:	d9df      	bls.n	8000e60 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b1f      	cmp	r3, #31
 8000ea6:	d902      	bls.n	8000eae <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000ea8:	f06f 0302 	mvn.w	r3, #2
 8000eac:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d145      	bne.n	8000f40 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	691b      	ldr	r3, [r3, #16]
 8000eb8:	687a      	ldr	r2, [r7, #4]
 8000eba:	6810      	ldr	r0, [r2, #0]
 8000ebc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4798      	blx	r3
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	db37      	blt.n	8000f3a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	6810      	ldr	r0, [r2, #0]
 8000ed2:	f107 0208 	add.w	r2, r7, #8
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4798      	blx	r3
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	db28      	blt.n	8000f32 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	4798      	blx	r3
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000eea:	e01c      	b.n	8000f26 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	4798      	blx	r3
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000efe:	d80e      	bhi.n	8000f1e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	695b      	ldr	r3, [r3, #20]
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	6810      	ldr	r0, [r2, #0]
 8000f08:	f107 0208 	add.w	r2, r7, #8
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4798      	blx	r3
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	da07      	bge.n	8000f26 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000f16:	f06f 0304 	mvn.w	r3, #4
 8000f1a:	613b      	str	r3, [r7, #16]
                 break;
 8000f1c:	e010      	b.n	8000f40 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000f1e:	f06f 0301 	mvn.w	r3, #1
 8000f22:	613b      	str	r3, [r7, #16]
               break;
 8000f24:	e00c      	b.n	8000f40 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d1dd      	bne.n	8000eec <LAN8742_Init+0xc6>
 8000f30:	e006      	b.n	8000f40 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000f32:	f06f 0304 	mvn.w	r3, #4
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	e002      	b.n	8000f40 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000f3a:	f06f 0303 	mvn.w	r3, #3
 8000f3e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d112      	bne.n	8000f6c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	699b      	ldr	r3, [r3, #24]
 8000f4a:	4798      	blx	r3
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000f50:	bf00      	nop
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	4798      	blx	r3
 8000f58:	4603      	mov	r3, r0
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000f64:	d9f5      	bls.n	8000f52 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000f6c:	693b      	ldr	r3, [r7, #16]
 }
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b084      	sub	sp, #16
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	6810      	ldr	r0, [r2, #0]
 8000f8a:	f107 020c 	add.w	r2, r7, #12
 8000f8e:	2101      	movs	r1, #1
 8000f90:	4798      	blx	r3
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	da02      	bge.n	8000f9e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f98:	f06f 0304 	mvn.w	r3, #4
 8000f9c:	e06e      	b.n	800107c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	695b      	ldr	r3, [r3, #20]
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	6810      	ldr	r0, [r2, #0]
 8000fa6:	f107 020c 	add.w	r2, r7, #12
 8000faa:	2101      	movs	r1, #1
 8000fac:	4798      	blx	r3
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	da02      	bge.n	8000fba <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000fb4:	f06f 0304 	mvn.w	r3, #4
 8000fb8:	e060      	b.n	800107c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f003 0304 	and.w	r3, r3, #4
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d101      	bne.n	8000fc8 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e059      	b.n	800107c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	695b      	ldr	r3, [r3, #20]
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	6810      	ldr	r0, [r2, #0]
 8000fd0:	f107 020c 	add.w	r2, r7, #12
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4798      	blx	r3
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	da02      	bge.n	8000fe4 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000fde:	f06f 0304 	mvn.w	r3, #4
 8000fe2:	e04b      	b.n	800107c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d11b      	bne.n	8001026 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d006      	beq.n	8001006 <LAN8742_GetLinkState+0x90>
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001002:	2302      	movs	r3, #2
 8001004:	e03a      	b.n	800107c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001010:	2303      	movs	r3, #3
 8001012:	e033      	b.n	800107c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800101e:	2304      	movs	r3, #4
 8001020:	e02c      	b.n	800107c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001022:	2305      	movs	r3, #5
 8001024:	e02a      	b.n	800107c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	6810      	ldr	r0, [r2, #0]
 800102e:	f107 020c 	add.w	r2, r7, #12
 8001032:	211f      	movs	r1, #31
 8001034:	4798      	blx	r3
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	da02      	bge.n	8001042 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800103c:	f06f 0304 	mvn.w	r3, #4
 8001040:	e01c      	b.n	800107c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d101      	bne.n	8001050 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800104c:	2306      	movs	r3, #6
 800104e:	e015      	b.n	800107c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f003 031c 	and.w	r3, r3, #28
 8001056:	2b18      	cmp	r3, #24
 8001058:	d101      	bne.n	800105e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800105a:	2302      	movs	r3, #2
 800105c:	e00e      	b.n	800107c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f003 031c 	and.w	r3, r3, #28
 8001064:	2b08      	cmp	r3, #8
 8001066:	d101      	bne.n	800106c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001068:	2303      	movs	r3, #3
 800106a:	e007      	b.n	800107c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f003 031c 	and.w	r3, r3, #28
 8001072:	2b14      	cmp	r3, #20
 8001074:	d101      	bne.n	800107a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001076:	2304      	movs	r3, #4
 8001078:	e000      	b.n	800107c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800107a:	2305      	movs	r3, #5
    }				
  }
}
 800107c:	4618      	mov	r0, r3
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001088:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <HAL_Init+0x40>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a0d      	ldr	r2, [pc, #52]	; (80010c4 <HAL_Init+0x40>)
 800108e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001092:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001094:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <HAL_Init+0x40>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <HAL_Init+0x40>)
 800109a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800109e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <HAL_Init+0x40>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a07      	ldr	r2, [pc, #28]	; (80010c4 <HAL_Init+0x40>)
 80010a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010ac:	2003      	movs	r0, #3
 80010ae:	f000 f94f 	bl	8001350 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010b2:	200f      	movs	r0, #15
 80010b4:	f000 f808 	bl	80010c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b8:	f7ff fc3a 	bl	8000930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40023c00 	.word	0x40023c00

080010c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <HAL_InitTick+0x54>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4b12      	ldr	r3, [pc, #72]	; (8001120 <HAL_InitTick+0x58>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	4619      	mov	r1, r3
 80010da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010de:	fbb3 f3f1 	udiv	r3, r3, r1
 80010e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 f967 	bl	80013ba <HAL_SYSTICK_Config>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e00e      	b.n	8001114 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2b0f      	cmp	r3, #15
 80010fa:	d80a      	bhi.n	8001112 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010fc:	2200      	movs	r2, #0
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	f04f 30ff 	mov.w	r0, #4294967295
 8001104:	f000 f92f 	bl	8001366 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001108:	4a06      	ldr	r2, [pc, #24]	; (8001124 <HAL_InitTick+0x5c>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800110e:	2300      	movs	r3, #0
 8001110:	e000      	b.n	8001114 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
}
 8001114:	4618      	mov	r0, r3
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000000 	.word	0x20000000
 8001120:	20000008 	.word	0x20000008
 8001124:	20000004 	.word	0x20000004

08001128 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <HAL_IncTick+0x20>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	461a      	mov	r2, r3
 8001132:	4b06      	ldr	r3, [pc, #24]	; (800114c <HAL_IncTick+0x24>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4413      	add	r3, r2
 8001138:	4a04      	ldr	r2, [pc, #16]	; (800114c <HAL_IncTick+0x24>)
 800113a:	6013      	str	r3, [r2, #0]
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	20000008 	.word	0x20000008
 800114c:	2000065c 	.word	0x2000065c

08001150 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  return uwTick;
 8001154:	4b03      	ldr	r3, [pc, #12]	; (8001164 <HAL_GetTick+0x14>)
 8001156:	681b      	ldr	r3, [r3, #0]
}
 8001158:	4618      	mov	r0, r3
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	2000065c 	.word	0x2000065c

08001168 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001170:	f7ff ffee 	bl	8001150 <HAL_GetTick>
 8001174:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001180:	d005      	beq.n	800118e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001182:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <HAL_Delay+0x44>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	461a      	mov	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4413      	add	r3, r2
 800118c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800118e:	bf00      	nop
 8001190:	f7ff ffde 	bl	8001150 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	429a      	cmp	r2, r3
 800119e:	d8f7      	bhi.n	8001190 <HAL_Delay+0x28>
  {
  }
}
 80011a0:	bf00      	nop
 80011a2:	bf00      	nop
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000008 	.word	0x20000008

080011b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <__NVIC_SetPriorityGrouping+0x44>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011cc:	4013      	ands	r3, r2
 80011ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e2:	4a04      	ldr	r2, [pc, #16]	; (80011f4 <__NVIC_SetPriorityGrouping+0x44>)
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	60d3      	str	r3, [r2, #12]
}
 80011e8:	bf00      	nop
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <__NVIC_GetPriorityGrouping+0x18>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	0a1b      	lsrs	r3, r3, #8
 8001202:	f003 0307 	and.w	r3, r3, #7
}
 8001206:	4618      	mov	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	2b00      	cmp	r3, #0
 8001224:	db0b      	blt.n	800123e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	f003 021f 	and.w	r2, r3, #31
 800122c:	4907      	ldr	r1, [pc, #28]	; (800124c <__NVIC_EnableIRQ+0x38>)
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	095b      	lsrs	r3, r3, #5
 8001234:	2001      	movs	r0, #1
 8001236:	fa00 f202 	lsl.w	r2, r0, r2
 800123a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e000e100 	.word	0xe000e100

08001250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	6039      	str	r1, [r7, #0]
 800125a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001260:	2b00      	cmp	r3, #0
 8001262:	db0a      	blt.n	800127a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	490c      	ldr	r1, [pc, #48]	; (800129c <__NVIC_SetPriority+0x4c>)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	0112      	lsls	r2, r2, #4
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	440b      	add	r3, r1
 8001274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001278:	e00a      	b.n	8001290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4908      	ldr	r1, [pc, #32]	; (80012a0 <__NVIC_SetPriority+0x50>)
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	3b04      	subs	r3, #4
 8001288:	0112      	lsls	r2, r2, #4
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	440b      	add	r3, r1
 800128e:	761a      	strb	r2, [r3, #24]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000e100 	.word	0xe000e100
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b089      	sub	sp, #36	; 0x24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f1c3 0307 	rsb	r3, r3, #7
 80012be:	2b04      	cmp	r3, #4
 80012c0:	bf28      	it	cs
 80012c2:	2304      	movcs	r3, #4
 80012c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3304      	adds	r3, #4
 80012ca:	2b06      	cmp	r3, #6
 80012cc:	d902      	bls.n	80012d4 <NVIC_EncodePriority+0x30>
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3b03      	subs	r3, #3
 80012d2:	e000      	b.n	80012d6 <NVIC_EncodePriority+0x32>
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	f04f 32ff 	mov.w	r2, #4294967295
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43da      	mvns	r2, r3
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	401a      	ands	r2, r3
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ec:	f04f 31ff 	mov.w	r1, #4294967295
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	fa01 f303 	lsl.w	r3, r1, r3
 80012f6:	43d9      	mvns	r1, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	4313      	orrs	r3, r2
         );
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3724      	adds	r7, #36	; 0x24
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
	...

0800130c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3b01      	subs	r3, #1
 8001318:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800131c:	d301      	bcc.n	8001322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800131e:	2301      	movs	r3, #1
 8001320:	e00f      	b.n	8001342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001322:	4a0a      	ldr	r2, [pc, #40]	; (800134c <SysTick_Config+0x40>)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3b01      	subs	r3, #1
 8001328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800132a:	210f      	movs	r1, #15
 800132c:	f04f 30ff 	mov.w	r0, #4294967295
 8001330:	f7ff ff8e 	bl	8001250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <SysTick_Config+0x40>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800133a:	4b04      	ldr	r3, [pc, #16]	; (800134c <SysTick_Config+0x40>)
 800133c:	2207      	movs	r2, #7
 800133e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	e000e010 	.word	0xe000e010

08001350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ff29 	bl	80011b0 <__NVIC_SetPriorityGrouping>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001366:	b580      	push	{r7, lr}
 8001368:	b086      	sub	sp, #24
 800136a:	af00      	add	r7, sp, #0
 800136c:	4603      	mov	r3, r0
 800136e:	60b9      	str	r1, [r7, #8]
 8001370:	607a      	str	r2, [r7, #4]
 8001372:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001378:	f7ff ff3e 	bl	80011f8 <__NVIC_GetPriorityGrouping>
 800137c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	68b9      	ldr	r1, [r7, #8]
 8001382:	6978      	ldr	r0, [r7, #20]
 8001384:	f7ff ff8e 	bl	80012a4 <NVIC_EncodePriority>
 8001388:	4602      	mov	r2, r0
 800138a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138e:	4611      	mov	r1, r2
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff5d 	bl	8001250 <__NVIC_SetPriority>
}
 8001396:	bf00      	nop
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	4603      	mov	r3, r0
 80013a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff ff31 	bl	8001214 <__NVIC_EnableIRQ>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff ffa2 	bl	800130c <SysTick_Config>
 80013c8:	4603      	mov	r3, r0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d101      	bne.n	80013e6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e06c      	b.n	80014c0 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d106      	bne.n	80013fe <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2223      	movs	r2, #35	; 0x23
 80013f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f003 fe0b 	bl	8005014 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	4b31      	ldr	r3, [pc, #196]	; (80014c8 <HAL_ETH_Init+0xf4>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	4a30      	ldr	r2, [pc, #192]	; (80014c8 <HAL_ETH_Init+0xf4>)
 8001408:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800140c:	6453      	str	r3, [r2, #68]	; 0x44
 800140e:	4b2e      	ldr	r3, [pc, #184]	; (80014c8 <HAL_ETH_Init+0xf4>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800141a:	4b2c      	ldr	r3, [pc, #176]	; (80014cc <HAL_ETH_Init+0xf8>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	4a2b      	ldr	r2, [pc, #172]	; (80014cc <HAL_ETH_Init+0xf8>)
 8001420:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001424:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001426:	4b29      	ldr	r3, [pc, #164]	; (80014cc <HAL_ETH_Init+0xf8>)
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	4927      	ldr	r1, [pc, #156]	; (80014cc <HAL_ETH_Init+0xf8>)
 8001430:	4313      	orrs	r3, r2
 8001432:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001434:	4b25      	ldr	r3, [pc, #148]	; (80014cc <HAL_ETH_Init+0xf8>)
 8001436:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	6812      	ldr	r2, [r2, #0]
 8001446:	f043 0301 	orr.w	r3, r3, #1
 800144a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800144e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001450:	f7ff fe7e 	bl	8001150 <HAL_GetTick>
 8001454:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001456:	e011      	b.n	800147c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001458:	f7ff fe7a 	bl	8001150 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001466:	d909      	bls.n	800147c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2204      	movs	r2, #4
 800146c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	22e0      	movs	r2, #224	; 0xe0
 8001474:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e021      	b.n	80014c0 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1e4      	bne.n	8001458 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f000 ffaa 	bl	80023e8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f001 f851 	bl	800253c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f001 f8a7 	bl	80025ee <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	461a      	mov	r2, r3
 80014a6:	2100      	movs	r1, #0
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f001 f80f 	bl	80024cc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2210      	movs	r2, #16
 80014ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40013800 	.word	0x40013800

080014d0 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014de:	2b10      	cmp	r3, #16
 80014e0:	d150      	bne.n	8001584 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2223      	movs	r2, #35	; 0x23
 80014e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2204      	movs	r2, #4
 80014ee:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f000 fa79 	bl	80019e8 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f042 0208 	orr.w	r2, r2, #8
 8001504:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800150e:	2001      	movs	r0, #1
 8001510:	f7ff fe2a 	bl	8001168 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	68fa      	ldr	r2, [r7, #12]
 800151a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f042 0204 	orr.w	r2, r2, #4
 800152a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001534:	2001      	movs	r0, #1
 8001536:	f7ff fe17 	bl	8001168 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 fdf1 	bl	800212a <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	6812      	ldr	r2, [r2, #0]
 8001556:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800155a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800155e:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	6812      	ldr	r2, [r2, #0]
 800156e:	f043 0302 	orr.w	r3, r3, #2
 8001572:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001576:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2223      	movs	r2, #35	; 0x23
 800157c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001580:	2300      	movs	r3, #0
 8001582:	e000      	b.n	8001586 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
  }
}
 8001586:	4618      	mov	r0, r3
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b084      	sub	sp, #16
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800159c:	2b10      	cmp	r3, #16
 800159e:	d17f      	bne.n	80016a0 <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2223      	movs	r2, #35	; 0x23
 80015a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2201      	movs	r2, #1
 80015ac:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 80015bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	6812      	ldr	r2, [r2, #0]
 80015ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015d2:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 80015e6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2204      	movs	r2, #4
 80015ee:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f000 f9f9 	bl	80019e8 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f042 0208 	orr.w	r2, r2, #8
 8001604:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800160e:	2001      	movs	r0, #1
 8001610:	f7ff fdaa 	bl	8001168 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f042 0204 	orr.w	r2, r2, #4
 800162a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001634:	2001      	movs	r0, #1
 8001636:	f7ff fd97 	bl	8001168 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 fd71 	bl	800212a <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	6812      	ldr	r2, [r2, #0]
 8001656:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800165a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800165e:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	6812      	ldr	r2, [r2, #0]
 800166e:	f043 0302 	orr.w	r3, r3, #2
 8001672:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001676:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	6812      	ldr	r2, [r2, #0]
 8001686:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 800168a:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 800168e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001692:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2223      	movs	r2, #35	; 0x23
 8001698:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 800169c:	2300      	movs	r3, #0
 800169e:	e000      	b.n	80016a2 <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
  }
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b086      	sub	sp, #24
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016b8:	2b23      	cmp	r3, #35	; 0x23
 80016ba:	d170      	bne.n	800179e <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2223      	movs	r2, #35	; 0x23
 80016c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	6812      	ldr	r2, [r2, #0]
 80016d2:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 80016d6:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 80016da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016de:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	6812      	ldr	r2, [r2, #0]
 80016ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80016f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016f6:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	6812      	ldr	r2, [r2, #0]
 8001706:	f023 0302 	bic.w	r3, r3, #2
 800170a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800170e:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 0204 	bic.w	r2, r2, #4
 800171e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001728:	2001      	movs	r0, #1
 800172a:	f7ff fd1d 	bl	8001168 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 fcf7 	bl	800212a <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 0208 	bic.w	r2, r2, #8
 800174a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001754:	2001      	movs	r0, #1
 8001756:	f7ff fd07 	bl	8001168 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	e00e      	b.n	8001786 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	3212      	adds	r2, #18
 800176e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001772:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	3301      	adds	r3, #1
 8001784:	617b      	str	r3, [r7, #20]
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	2b03      	cmp	r3, #3
 800178a:	d9ed      	bls.n	8001768 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2210      	movs	r2, #16
 8001796:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800179a:	2300      	movs	r3, #0
 800179c:	e000      	b.n	80017a0 <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
  }
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d109      	bne.n	80017cc <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017be:	f043 0201 	orr.w	r2, r3, #1
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e045      	b.n	8001858 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017d2:	2b23      	cmp	r3, #35	; 0x23
 80017d4:	d13f      	bne.n	8001856 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80017de:	2201      	movs	r2, #1
 80017e0:	6839      	ldr	r1, [r7, #0]
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 ff70 	bl	80026c8 <ETH_Prepare_Tx_Descriptors>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d009      	beq.n	8001802 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017f4:	f043 0202 	orr.w	r2, r3, #2
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e02a      	b.n	8001858 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001802:	f3bf 8f4f 	dsb	sy
}
 8001806:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180c:	1c5a      	adds	r2, r3, #1
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	629a      	str	r2, [r3, #40]	; 0x28
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001816:	2b03      	cmp	r3, #3
 8001818:	d904      	bls.n	8001824 <HAL_ETH_Transmit_IT+0x7c>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181e:	1f1a      	subs	r2, r3, #4
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	f003 0304 	and.w	r3, r3, #4
 8001832:	2b00      	cmp	r3, #0
 8001834:	d00d      	beq.n	8001852 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800183e:	461a      	mov	r2, r3
 8001840:	2304      	movs	r3, #4
 8001842:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800184c:	461a      	mov	r2, r3
 800184e:	2300      	movs	r3, #0
 8001850:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	e000      	b.n	8001858 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
  }
}
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800186e:	2300      	movs	r3, #0
 8001870:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d109      	bne.n	800188c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800187e:	f043 0201 	orr.w	r2, r3, #1
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e0a8      	b.n	80019de <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001892:	2b23      	cmp	r3, #35	; 0x23
 8001894:	d001      	beq.n	800189a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e0a1      	b.n	80019de <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800189e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	69fa      	ldr	r2, [r7, #28]
 80018a4:	3212      	adds	r2, #18
 80018a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018aa:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018b0:	f1c3 0304 	rsb	r3, r3, #4
 80018b4:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80018b6:	e06a      	b.n	800198e <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d007      	beq.n	80018d4 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	699a      	ldr	r2, [r3, #24]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	69da      	ldr	r2, [r3, #28]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d103      	bne.n	80018e8 <HAL_ETH_ReadData+0x88>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d040      	beq.n	800196a <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d005      	beq.n	8001900 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	695b      	ldr	r3, [r3, #20]
 8001904:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00c      	beq.n	800192c <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	0c1b      	lsrs	r3, r3, #16
 8001918:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800191c:	3b04      	subs	r3, #4
 800191e:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001928:	2301      	movs	r3, #1
 800192a:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001944:	461a      	mov	r2, r3
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	b29b      	uxth	r3, r3
 800194a:	f003 fd3d 	bl	80053c8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001952:	1c5a      	adds	r2, r3, #1
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	441a      	add	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	2200      	movs	r2, #0
 8001968:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3301      	adds	r3, #1
 800196e:	61fb      	str	r3, [r7, #28]
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	2b03      	cmp	r3, #3
 8001974:	d902      	bls.n	800197c <HAL_ETH_ReadData+0x11c>
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3b04      	subs	r3, #4
 800197a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	69fa      	ldr	r2, [r7, #28]
 8001980:	3212      	adds	r2, #18
 8001982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001986:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	3301      	adds	r3, #1
 800198c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	db06      	blt.n	80019a4 <HAL_ETH_ReadData+0x144>
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	429a      	cmp	r2, r3
 800199c:	d202      	bcs.n	80019a4 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d089      	beq.n	80018b8 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	441a      	add	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d002      	beq.n	80019be <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f000 f815 	bl	80019e8 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69fa      	ldr	r2, [r7, #28]
 80019c2:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80019c4:	7bfb      	ldrb	r3, [r7, #15]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d108      	bne.n	80019dc <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80019d8:	2300      	movs	r3, #0
 80019da:	e000      	b.n	80019de <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3720      	adds	r7, #32
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b088      	sub	sp, #32
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80019f4:	2301      	movs	r3, #1
 80019f6:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80019fc:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69fa      	ldr	r2, [r7, #28]
 8001a02:	3212      	adds	r2, #18
 8001a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a08:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a0e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001a10:	e040      	b.n	8001a94 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d112      	bne.n	8001a40 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001a1a:	f107 030c 	add.w	r3, r7, #12
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f003 fca2 	bl	8005368 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d102      	bne.n	8001a30 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	74fb      	strb	r3, [r7, #19]
 8001a2e:	e007      	b.n	8001a40 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	461a      	mov	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001a40:	7cfb      	ldrb	r3, [r7, #19]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d026      	beq.n	8001a94 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d103      	bne.n	8001a56 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	4a1e      	ldr	r2, [pc, #120]	; (8001acc <ETH_UpdateDescriptor+0xe4>)
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	e003      	b.n	8001a5e <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001a5c:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001a5e:	f3bf 8f5f 	dmb	sy
}
 8001a62:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	3301      	adds	r3, #1
 8001a74:	61fb      	str	r3, [r7, #28]
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	2b03      	cmp	r3, #3
 8001a7a:	d902      	bls.n	8001a82 <ETH_UpdateDescriptor+0x9a>
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	3b04      	subs	r3, #4
 8001a80:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69fa      	ldr	r2, [r7, #28]
 8001a86:	3212      	adds	r2, #18
 8001a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a8c:	617b      	str	r3, [r7, #20]
      desccount--;
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	3b01      	subs	r3, #1
 8001a92:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d002      	beq.n	8001aa0 <ETH_UpdateDescriptor+0xb8>
 8001a9a:	7cfb      	ldrb	r3, [r7, #19]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1b8      	bne.n	8001a12 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d00c      	beq.n	8001ac4 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69fa      	ldr	r2, [r7, #28]
 8001abc:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001ac4:	bf00      	nop
 8001ac6:	3720      	adds	r7, #32
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	800045f8 	.word	0x800045f8

08001ad0 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3318      	adds	r3, #24
 8001adc:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae2:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae8:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001aea:	2301      	movs	r3, #1
 8001aec:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001aee:	e03f      	b.n	8001b70 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001af0:	2301      	movs	r3, #1
 8001af2:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	3b01      	subs	r3, #1
 8001af8:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	3304      	adds	r3, #4
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d106      	bne.n	8001b18 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001b18:	7bbb      	ldrb	r3, [r7, #14]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d028      	beq.n	8001b70 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	68d9      	ldr	r1, [r3, #12]
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	4613      	mov	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	440b      	add	r3, r1
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	db1b      	blt.n	8001b6c <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001b34:	68ba      	ldr	r2, [r7, #8]
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	3304      	adds	r3, #4
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4413      	add	r3, r2
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f003 fc81 	bl	8005448 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	3304      	adds	r3, #4
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	2200      	movs	r2, #0
 8001b52:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	3301      	adds	r3, #1
 8001b58:	f003 0303 	and.w	r3, r3, #3
 8001b5c:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b6a:	e001      	b.n	8001b70 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d002      	beq.n	8001b7c <HAL_ETH_ReleaseTxPacket+0xac>
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1b9      	bne.n	8001af0 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b9e:	2b40      	cmp	r3, #64	; 0x40
 8001ba0:	d112      	bne.n	8001bc8 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001baa:	69db      	ldr	r3, [r3, #28]
 8001bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bb0:	2b40      	cmp	r3, #64	; 0x40
 8001bb2:	d109      	bne.n	8001bc8 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4b50      	ldr	r3, [pc, #320]	; (8001d00 <HAL_ETH_IRQHandler+0x178>)
 8001bc0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f002 ff88 	bl	8004ad8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d113      	bne.n	8001c02 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001be2:	69db      	ldr	r3, [r3, #28]
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d10a      	bne.n	8001c02 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001bfa:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f002 ff7b 	bl	8004af8 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c14:	d14c      	bne.n	8001cb0 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c28:	d142      	bne.n	8001cb0 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c30:	f043 0208 	orr.w	r2, r3, #8
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c4c:	d11a      	bne.n	8001c84 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c56:	695a      	ldr	r2, [r3, #20]
 8001c58:	4b2a      	ldr	r3, [pc, #168]	; (8001d04 <HAL_ETH_IRQHandler+0x17c>)
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6812      	ldr	r2, [r2, #0]
 8001c70:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001c74:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c78:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	22e0      	movs	r2, #224	; 0xe0
 8001c7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001c82:	e012      	b.n	8001caa <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c8c:	695a      	ldr	r2, [r3, #20]
 8001c8e:	f248 6380 	movw	r3, #34432	; 0x8680
 8001c92:	4013      	ands	r3, r2
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	f248 6380 	movw	r3, #34432	; 0x8680
 8001ca8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f002 ff34 	bl	8004b18 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	2b08      	cmp	r3, #8
 8001cbc:	d10e      	bne.n	8001cdc <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f81c 	bl	8001d0c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001cdc:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <HAL_ETH_IRQHandler+0x180>)
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d006      	beq.n	8001cf6 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001ce8:	4b07      	ldr	r3, [pc, #28]	; (8001d08 <HAL_ETH_IRQHandler+0x180>)
 8001cea:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001cee:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 f815 	bl	8001d20 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	00010040 	.word	0x00010040
 8001d04:	007e2000 	.word	0x007e2000
 8001d08:	40013c00 	.word	0x40013c00

08001d0c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
 8001d40:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	f003 031c 	and.w	r3, r3, #28
 8001d50:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	02db      	lsls	r3, r3, #11
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	019b      	lsls	r3, r3, #6
 8001d62:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	f023 0302 	bic.w	r3, r3, #2
 8001d72:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001d84:	f7ff f9e4 	bl	8001150 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d8a:	e00d      	b.n	8001da8 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001d8c:	f7ff f9e0 	bl	8001150 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d9a:	d301      	bcc.n	8001da0 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e010      	b.n	8001dc2 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1ec      	bne.n	8001d8c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	461a      	mov	r2, r3
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b086      	sub	sp, #24
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	60f8      	str	r0, [r7, #12]
 8001dd2:	60b9      	str	r1, [r7, #8]
 8001dd4:	607a      	str	r2, [r7, #4]
 8001dd6:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	f003 031c 	and.w	r3, r3, #28
 8001de6:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	02db      	lsls	r3, r3, #11
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	019b      	lsls	r3, r3, #6
 8001df8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	f043 0302 	orr.w	r3, r3, #2
 8001e08:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e24:	f7ff f994 	bl	8001150 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e2a:	e00d      	b.n	8001e48 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001e2c:	f7ff f990 	bl	8001150 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e3a:	d301      	bcc.n	8001e40 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e009      	b.n	8001e54 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1ec      	bne.n	8001e2c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e0d9      	b.n	8002024 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0310 	and.w	r3, r3, #16
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	bf14      	ite	ne
 8001e7e:	2301      	movne	r3, #1
 8001e80:	2300      	moveq	r3, #0
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	461a      	mov	r2, r3
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	bf0c      	ite	eq
 8001ea8:	2301      	moveq	r3, #1
 8001eaa:	2300      	movne	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	461a      	mov	r2, r3
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	bf14      	ite	ne
 8001ec4:	2301      	movne	r3, #1
 8001ec6:	2300      	moveq	r3, #0
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	bf0c      	ite	eq
 8001ede:	2301      	moveq	r3, #1
 8001ee0:	2300      	movne	r3, #0
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	bf14      	ite	ne
 8001ef8:	2301      	movne	r3, #1
 8001efa:	2300      	moveq	r3, #0
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	461a      	mov	r2, r3
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	bf0c      	ite	eq
 8001f2e:	2301      	moveq	r3, #1
 8001f30:	2300      	movne	r3, #0
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	461a      	mov	r2, r3
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	bf0c      	ite	eq
 8001f48:	2301      	moveq	r3, #1
 8001f4a:	2300      	movne	r3, #0
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	461a      	mov	r2, r3
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	bf14      	ite	ne
 8001f62:	2301      	movne	r3, #1
 8001f64:	2300      	moveq	r3, #0
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	461a      	mov	r2, r3
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	bf14      	ite	ne
 8001f8a:	2301      	movne	r3, #1
 8001f8c:	2300      	moveq	r3, #0
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	461a      	mov	r2, r3
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	bf14      	ite	ne
 8001fa4:	2301      	movne	r3, #1
 8001fa6:	2300      	moveq	r3, #0
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	461a      	mov	r2, r3
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	bf0c      	ite	eq
 8001fc0:	2301      	moveq	r3, #1
 8001fc2:	2300      	movne	r3, #0
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	0c1b      	lsrs	r3, r3, #16
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	bf14      	ite	ne
 8001ff8:	2301      	movne	r3, #1
 8001ffa:	2300      	moveq	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	461a      	mov	r2, r3
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002010:	2b00      	cmp	r3, #0
 8002012:	bf14      	ite	ne
 8002014:	2301      	movne	r3, #1
 8002016:	2300      	moveq	r3, #0
 8002018:	b2db      	uxtb	r3, r3
 800201a:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e00b      	b.n	800205c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800204a:	2b10      	cmp	r3, #16
 800204c:	d105      	bne.n	800205a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800204e:	6839      	ldr	r1, [r7, #0]
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 f88f 	bl	8002174 <ETH_SetMACConfig>

    return HAL_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	e000      	b.n	800205c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
  }
}
 800205c:	4618      	mov	r0, r3
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f023 031c 	bic.w	r3, r3, #28
 800207a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800207c:	f001 fba0 	bl	80037c0 <HAL_RCC_GetHCLKFreq>
 8002080:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	4a1d      	ldr	r2, [pc, #116]	; (80020fc <HAL_ETH_SetMDIOClockRange+0x98>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d908      	bls.n	800209c <HAL_ETH_SetMDIOClockRange+0x38>
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	4a1c      	ldr	r2, [pc, #112]	; (8002100 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d804      	bhi.n	800209c <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f043 0308 	orr.w	r3, r3, #8
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	e027      	b.n	80020ec <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	4a18      	ldr	r2, [pc, #96]	; (8002100 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d908      	bls.n	80020b6 <HAL_ETH_SetMDIOClockRange+0x52>
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	4a17      	ldr	r2, [pc, #92]	; (8002104 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d204      	bcs.n	80020b6 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f043 030c 	orr.w	r3, r3, #12
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	e01a      	b.n	80020ec <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	4a12      	ldr	r2, [pc, #72]	; (8002104 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d303      	bcc.n	80020c6 <HAL_ETH_SetMDIOClockRange+0x62>
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	4a11      	ldr	r2, [pc, #68]	; (8002108 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d911      	bls.n	80020ea <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	4a0f      	ldr	r2, [pc, #60]	; (8002108 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d908      	bls.n	80020e0 <HAL_ETH_SetMDIOClockRange+0x7c>
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	4a0e      	ldr	r2, [pc, #56]	; (800210c <HAL_ETH_SetMDIOClockRange+0xa8>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d804      	bhi.n	80020e0 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f043 0304 	orr.w	r3, r3, #4
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	e005      	b.n	80020ec <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f043 0310 	orr.w	r3, r3, #16
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	e000      	b.n	80020ec <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80020ea:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	611a      	str	r2, [r3, #16]
}
 80020f4:	bf00      	nop
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	01312cff 	.word	0x01312cff
 8002100:	02160ebf 	.word	0x02160ebf
 8002104:	03938700 	.word	0x03938700
 8002108:	05f5e0ff 	.word	0x05f5e0ff
 800210c:	08f0d17f 	.word	0x08f0d17f

08002110 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800211e:	4618      	mov	r0, r3
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b084      	sub	sp, #16
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6812      	ldr	r2, [r2, #0]
 8002144:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002148:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800214c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800215a:	2001      	movs	r0, #1
 800215c:	f7ff f804 	bl	8001168 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800216a:	6193      	str	r3, [r2, #24]
}
 800216c:	bf00      	nop
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	4b51      	ldr	r3, [pc, #324]	; (80022d0 <ETH_SetMACConfig+0x15c>)
 800218a:	4013      	ands	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	7c1b      	ldrb	r3, [r3, #16]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d102      	bne.n	800219c <ETH_SetMACConfig+0x28>
 8002196:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800219a:	e000      	b.n	800219e <ETH_SetMACConfig+0x2a>
 800219c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	7c5b      	ldrb	r3, [r3, #17]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d102      	bne.n	80021ac <ETH_SetMACConfig+0x38>
 80021a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021aa:	e000      	b.n	80021ae <ETH_SetMACConfig+0x3a>
 80021ac:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80021ae:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80021b4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	7fdb      	ldrb	r3, [r3, #31]
 80021ba:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80021bc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80021c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	7f92      	ldrb	r2, [r2, #30]
 80021c8:	2a00      	cmp	r2, #0
 80021ca:	d102      	bne.n	80021d2 <ETH_SetMACConfig+0x5e>
 80021cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021d0:	e000      	b.n	80021d4 <ETH_SetMACConfig+0x60>
 80021d2:	2200      	movs	r2, #0
                        macconf->Speed |
 80021d4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	7f1b      	ldrb	r3, [r3, #28]
 80021da:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80021dc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80021e2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	791b      	ldrb	r3, [r3, #4]
 80021e8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80021ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	f892 2020 	ldrb.w	r2, [r2, #32]
 80021f2:	2a00      	cmp	r2, #0
 80021f4:	d102      	bne.n	80021fc <ETH_SetMACConfig+0x88>
 80021f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021fa:	e000      	b.n	80021fe <ETH_SetMACConfig+0x8a>
 80021fc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80021fe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	7bdb      	ldrb	r3, [r3, #15]
 8002204:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002206:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800220c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002214:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002216:	4313      	orrs	r3, r2
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	4313      	orrs	r3, r2
 800221c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800222e:	2001      	movs	r0, #1
 8002230:	f7fe ff9a 	bl	8001168 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	f64f 7341 	movw	r3, #65345	; 0xff41
 800224a:	4013      	ands	r3, r2
 800224c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002252:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800225a:	2a00      	cmp	r2, #0
 800225c:	d101      	bne.n	8002262 <ETH_SetMACConfig+0xee>
 800225e:	2280      	movs	r2, #128	; 0x80
 8002260:	e000      	b.n	8002264 <ETH_SetMACConfig+0xf0>
 8002262:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002264:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800226a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002272:	2a01      	cmp	r2, #1
 8002274:	d101      	bne.n	800227a <ETH_SetMACConfig+0x106>
 8002276:	2208      	movs	r2, #8
 8002278:	e000      	b.n	800227c <ETH_SetMACConfig+0x108>
 800227a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800227c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002284:	2a01      	cmp	r2, #1
 8002286:	d101      	bne.n	800228c <ETH_SetMACConfig+0x118>
 8002288:	2204      	movs	r2, #4
 800228a:	e000      	b.n	800228e <ETH_SetMACConfig+0x11a>
 800228c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800228e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002296:	2a01      	cmp	r2, #1
 8002298:	d101      	bne.n	800229e <ETH_SetMACConfig+0x12a>
 800229a:	2202      	movs	r2, #2
 800229c:	e000      	b.n	80022a0 <ETH_SetMACConfig+0x12c>
 800229e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80022a0:	4313      	orrs	r3, r2
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022b8:	2001      	movs	r0, #1
 80022ba:	f7fe ff55 	bl	8001168 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	619a      	str	r2, [r3, #24]
}
 80022c6:	bf00      	nop
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	ff20810f 	.word	0xff20810f

080022d4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	4b3d      	ldr	r3, [pc, #244]	; (80023e4 <ETH_SetDMAConfig+0x110>)
 80022ee:	4013      	ands	r3, r2
 80022f0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	7b1b      	ldrb	r3, [r3, #12]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d102      	bne.n	8002300 <ETH_SetDMAConfig+0x2c>
 80022fa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80022fe:	e000      	b.n	8002302 <ETH_SetDMAConfig+0x2e>
 8002300:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	7b5b      	ldrb	r3, [r3, #13]
 8002306:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002308:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	7f52      	ldrb	r2, [r2, #29]
 800230e:	2a00      	cmp	r2, #0
 8002310:	d102      	bne.n	8002318 <ETH_SetDMAConfig+0x44>
 8002312:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002316:	e000      	b.n	800231a <ETH_SetDMAConfig+0x46>
 8002318:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800231a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	7b9b      	ldrb	r3, [r3, #14]
 8002320:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002322:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002328:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	7f1b      	ldrb	r3, [r3, #28]
 800232e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002330:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	7f9b      	ldrb	r3, [r3, #30]
 8002336:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002338:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800233e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002346:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002348:	4313      	orrs	r3, r2
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	4313      	orrs	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002358:	461a      	mov	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800236a:	2001      	movs	r0, #1
 800236c:	f7fe fefc 	bl	8001168 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002378:	461a      	mov	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	791b      	ldrb	r3, [r3, #4]
 8002382:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002388:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800238e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002394:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800239c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800239e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80023a6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80023ac:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6812      	ldr	r2, [r2, #0]
 80023b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023ba:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023c8:	2001      	movs	r0, #1
 80023ca:	f7fe fecd 	bl	8001168 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023d6:	461a      	mov	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6013      	str	r3, [r2, #0]
}
 80023dc:	bf00      	nop
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	f8de3f23 	.word	0xf8de3f23

080023e8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b0a6      	sub	sp, #152	; 0x98
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80023f0:	2301      	movs	r3, #1
 80023f2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80023f6:	2301      	movs	r3, #1
 80023f8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80023fc:	2300      	movs	r3, #0
 80023fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002400:	2300      	movs	r3, #0
 8002402:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002406:	2301      	movs	r3, #1
 8002408:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800240c:	2300      	movs	r3, #0
 800240e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002412:	2301      	movs	r3, #1
 8002414:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002418:	2300      	movs	r3, #0
 800241a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800241e:	2300      	movs	r3, #0
 8002420:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002424:	2300      	movs	r3, #0
 8002426:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002428:	2300      	movs	r3, #0
 800242a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800242e:	2300      	movs	r3, #0
 8002430:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002432:	2300      	movs	r3, #0
 8002434:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002438:	2300      	movs	r3, #0
 800243a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800243e:	2300      	movs	r3, #0
 8002440:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002444:	2300      	movs	r3, #0
 8002446:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800244a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800244e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002450:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002454:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002456:	2300      	movs	r3, #0
 8002458:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800245c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002460:	4619      	mov	r1, r3
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7ff fe86 	bl	8002174 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002468:	2301      	movs	r3, #1
 800246a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800246c:	2301      	movs	r3, #1
 800246e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002470:	2301      	movs	r3, #1
 8002472:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002476:	2301      	movs	r3, #1
 8002478:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800247a:	2300      	movs	r3, #0
 800247c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800247e:	2300      	movs	r3, #0
 8002480:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002484:	2300      	movs	r3, #0
 8002486:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800248a:	2300      	movs	r3, #0
 800248c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800248e:	2301      	movs	r3, #1
 8002490:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002494:	2301      	movs	r3, #1
 8002496:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002498:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800249c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800249e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024a2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80024a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024a8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80024aa:	2301      	movs	r3, #1
 80024ac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80024b8:	f107 0308 	add.w	r3, r7, #8
 80024bc:	4619      	mov	r1, r3
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7ff ff08 	bl	80022d4 <ETH_SetDMAConfig>
}
 80024c4:	bf00      	nop
 80024c6:	3798      	adds	r7, #152	; 0x98
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b087      	sub	sp, #28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3305      	adds	r3, #5
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	021b      	lsls	r3, r3, #8
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	3204      	adds	r2, #4
 80024e4:	7812      	ldrb	r2, [r2, #0]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	4b11      	ldr	r3, [pc, #68]	; (8002534 <ETH_MACAddressConfig+0x68>)
 80024ee:	4413      	add	r3, r2
 80024f0:	461a      	mov	r2, r3
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	3303      	adds	r3, #3
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	061a      	lsls	r2, r3, #24
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3302      	adds	r3, #2
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	041b      	lsls	r3, r3, #16
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3301      	adds	r3, #1
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	021b      	lsls	r3, r3, #8
 8002510:	4313      	orrs	r3, r2
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	7812      	ldrb	r2, [r2, #0]
 8002516:	4313      	orrs	r3, r2
 8002518:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	4b06      	ldr	r3, [pc, #24]	; (8002538 <ETH_MACAddressConfig+0x6c>)
 800251e:	4413      	add	r3, r2
 8002520:	461a      	mov	r2, r3
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	6013      	str	r3, [r2, #0]
}
 8002526:	bf00      	nop
 8002528:	371c      	adds	r7, #28
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40028040 	.word	0x40028040
 8002538:	40028044 	.word	0x40028044

0800253c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002544:	2300      	movs	r3, #0
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	e03e      	b.n	80025c8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68d9      	ldr	r1, [r3, #12]
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	440b      	add	r3, r1
 800255a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2200      	movs	r2, #0
 8002566:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	2200      	movs	r2, #0
 800256c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	2200      	movs	r2, #0
 8002572:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002574:	68b9      	ldr	r1, [r7, #8]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	3206      	adds	r2, #6
 800257c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2b02      	cmp	r3, #2
 8002590:	d80c      	bhi.n	80025ac <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68d9      	ldr	r1, [r3, #12]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	1c5a      	adds	r2, r3, #1
 800259a:	4613      	mov	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	440b      	add	r3, r1
 80025a4:	461a      	mov	r2, r3
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	60da      	str	r2, [r3, #12]
 80025aa:	e004      	b.n	80025b6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	461a      	mov	r2, r3
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	3301      	adds	r3, #1
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2b03      	cmp	r3, #3
 80025cc:	d9bd      	bls.n	800254a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68da      	ldr	r2, [r3, #12]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025e0:	611a      	str	r2, [r3, #16]
}
 80025e2:	bf00      	nop
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b085      	sub	sp, #20
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80025f6:	2300      	movs	r3, #0
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	e046      	b.n	800268a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6919      	ldr	r1, [r3, #16]
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	4613      	mov	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4413      	add	r3, r2
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	440b      	add	r3, r1
 800260c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	2200      	movs	r2, #0
 8002618:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2200      	movs	r2, #0
 800261e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2200      	movs	r2, #0
 8002624:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	2200      	movs	r2, #0
 800262a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2200      	movs	r2, #0
 8002630:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002638:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002640:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800264e:	68b9      	ldr	r1, [r7, #8]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	3212      	adds	r2, #18
 8002656:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2b02      	cmp	r3, #2
 800265e:	d80c      	bhi.n	800267a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6919      	ldr	r1, [r3, #16]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	1c5a      	adds	r2, r3, #1
 8002668:	4613      	mov	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	4413      	add	r3, r2
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	440b      	add	r3, r1
 8002672:	461a      	mov	r2, r3
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	60da      	str	r2, [r3, #12]
 8002678:	e004      	b.n	8002684 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	461a      	mov	r2, r3
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	3301      	adds	r3, #1
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2b03      	cmp	r3, #3
 800268e:	d9b5      	bls.n	80025fc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691a      	ldr	r2, [r3, #16]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026ba:	60da      	str	r2, [r3, #12]
}
 80026bc:	bf00      	nop
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b08d      	sub	sp, #52	; 0x34
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	3318      	adds	r3, #24
 80026d8:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026f2:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80026fa:	2300      	movs	r3, #0
 80026fc:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002706:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800270a:	d007      	beq.n	800271c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002710:	3304      	adds	r3, #4
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800271c:	2302      	movs	r3, #2
 800271e:	e103      	b.n	8002928 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	3301      	adds	r3, #1
 8002724:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	461a      	mov	r2, r3
 800272c:	6a3b      	ldr	r3, [r7, #32]
 800272e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002738:	f023 031f 	bic.w	r3, r3, #31
 800273c:	69fa      	ldr	r2, [r7, #28]
 800273e:	6852      	ldr	r2, [r2, #4]
 8002740:	431a      	orrs	r2, r3
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d008      	beq.n	8002764 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	431a      	orrs	r2, r3
 8002760:	6a3b      	ldr	r3, [r7, #32]
 8002762:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0320 	and.w	r3, r3, #32
 800276c:	2b00      	cmp	r3, #0
 800276e:	d008      	beq.n	8002782 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002770:	6a3b      	ldr	r3, [r7, #32]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	431a      	orrs	r2, r3
 800277e:	6a3b      	ldr	r3, [r7, #32]
 8002780:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0304 	and.w	r3, r3, #4
 800278a:	2b00      	cmp	r3, #0
 800278c:	d005      	beq.n	800279a <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002796:	6a3b      	ldr	r3, [r7, #32]
 8002798:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800279a:	6a3b      	ldr	r3, [r7, #32]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80027a2:	6a3b      	ldr	r3, [r7, #32]
 80027a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80027a6:	f3bf 8f5f 	dmb	sy
}
 80027aa:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80027ac:	6a3b      	ldr	r3, [r7, #32]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80027b4:	6a3b      	ldr	r3, [r7, #32]
 80027b6:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80027b8:	e084      	b.n	80028c4 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80027ba:	6a3b      	ldr	r3, [r7, #32]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d006      	beq.n	80027da <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	e005      	b.n	80027e6 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80027e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e8:	3301      	adds	r3, #1
 80027ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ee:	2b03      	cmp	r3, #3
 80027f0:	d902      	bls.n	80027f8 <ETH_Prepare_Tx_Descriptors+0x130>
 80027f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f4:	3b04      	subs	r3, #4
 80027f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002800:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002802:	6a3b      	ldr	r3, [r7, #32]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800280a:	6a3b      	ldr	r3, [r7, #32]
 800280c:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800280e:	6a3b      	ldr	r3, [r7, #32]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002816:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800281a:	d007      	beq.n	800282c <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002820:	3304      	adds	r3, #4
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d029      	beq.n	8002880 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002838:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800283a:	2300      	movs	r3, #0
 800283c:	62bb      	str	r3, [r7, #40]	; 0x28
 800283e:	e019      	b.n	8002874 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002840:	f3bf 8f5f 	dmb	sy
}
 8002844:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800284e:	6a3b      	ldr	r3, [r7, #32]
 8002850:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002854:	3301      	adds	r3, #1
 8002856:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285a:	2b03      	cmp	r3, #3
 800285c:	d902      	bls.n	8002864 <ETH_Prepare_Tx_Descriptors+0x19c>
 800285e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002860:	3b04      	subs	r3, #4
 8002862:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800286c:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800286e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002870:	3301      	adds	r3, #1
 8002872:	62bb      	str	r3, [r7, #40]	; 0x28
 8002874:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	429a      	cmp	r2, r3
 800287a:	d3e1      	bcc.n	8002840 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 800287c:	2302      	movs	r3, #2
 800287e:	e053      	b.n	8002928 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	3301      	adds	r3, #1
 8002884:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	461a      	mov	r2, r3
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800289e:	f023 031f 	bic.w	r3, r3, #31
 80028a2:	69fa      	ldr	r2, [r7, #28]
 80028a4:	6852      	ldr	r2, [r2, #4]
 80028a6:	431a      	orrs	r2, r3
 80028a8:	6a3b      	ldr	r3, [r7, #32]
 80028aa:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	3301      	adds	r3, #1
 80028b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80028b2:	f3bf 8f5f 	dmb	sy
}
 80028b6:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80028b8:	6a3b      	ldr	r3, [r7, #32]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80028c0:	6a3b      	ldr	r3, [r7, #32]
 80028c2:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f47f af76 	bne.w	80027ba <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d006      	beq.n	80028e2 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80028d4:	6a3b      	ldr	r3, [r7, #32]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80028dc:	6a3b      	ldr	r3, [r7, #32]
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	e005      	b.n	80028ee <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80028e2:	6a3b      	ldr	r3, [r7, #32]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80028ea:	6a3b      	ldr	r3, [r7, #32]
 80028ec:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80028f6:	6a3b      	ldr	r3, [r7, #32]
 80028f8:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028fe:	6979      	ldr	r1, [r7, #20]
 8002900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002902:	3304      	adds	r3, #4
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	440b      	add	r3, r1
 8002908:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800290e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002910:	b672      	cpsid	i
}
 8002912:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	4413      	add	r3, r2
 800291c:	1c5a      	adds	r2, r3, #1
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002922:	b662      	cpsie	i
}
 8002924:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3734      	adds	r7, #52	; 0x34
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002934:	b480      	push	{r7}
 8002936:	b089      	sub	sp, #36	; 0x24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800293e:	2300      	movs	r3, #0
 8002940:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002942:	2300      	movs	r3, #0
 8002944:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002946:	2300      	movs	r3, #0
 8002948:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800294a:	2300      	movs	r3, #0
 800294c:	61fb      	str	r3, [r7, #28]
 800294e:	e177      	b.n	8002c40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002950:	2201      	movs	r2, #1
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	4013      	ands	r3, r2
 8002962:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	429a      	cmp	r2, r3
 800296a:	f040 8166 	bne.w	8002c3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	2b01      	cmp	r3, #1
 8002978:	d005      	beq.n	8002986 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002982:	2b02      	cmp	r3, #2
 8002984:	d130      	bne.n	80029e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	2203      	movs	r2, #3
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	43db      	mvns	r3, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4013      	ands	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	68da      	ldr	r2, [r3, #12]
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029bc:	2201      	movs	r2, #1
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4013      	ands	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	091b      	lsrs	r3, r3, #4
 80029d2:	f003 0201 	and.w	r2, r3, #1
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4313      	orrs	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 0303 	and.w	r3, r3, #3
 80029f0:	2b03      	cmp	r3, #3
 80029f2:	d017      	beq.n	8002a24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	2203      	movs	r2, #3
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f003 0303 	and.w	r3, r3, #3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d123      	bne.n	8002a78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	08da      	lsrs	r2, r3, #3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3208      	adds	r2, #8
 8002a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	220f      	movs	r2, #15
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4013      	ands	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	691a      	ldr	r2, [r3, #16]
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	08da      	lsrs	r2, r3, #3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3208      	adds	r2, #8
 8002a72:	69b9      	ldr	r1, [r7, #24]
 8002a74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	2203      	movs	r2, #3
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f003 0203 	and.w	r2, r3, #3
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 80c0 	beq.w	8002c3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	4b66      	ldr	r3, [pc, #408]	; (8002c58 <HAL_GPIO_Init+0x324>)
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	4a65      	ldr	r2, [pc, #404]	; (8002c58 <HAL_GPIO_Init+0x324>)
 8002ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aca:	4b63      	ldr	r3, [pc, #396]	; (8002c58 <HAL_GPIO_Init+0x324>)
 8002acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ad6:	4a61      	ldr	r2, [pc, #388]	; (8002c5c <HAL_GPIO_Init+0x328>)
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	089b      	lsrs	r3, r3, #2
 8002adc:	3302      	adds	r3, #2
 8002ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	220f      	movs	r2, #15
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	43db      	mvns	r3, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4013      	ands	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a58      	ldr	r2, [pc, #352]	; (8002c60 <HAL_GPIO_Init+0x32c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d037      	beq.n	8002b72 <HAL_GPIO_Init+0x23e>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a57      	ldr	r2, [pc, #348]	; (8002c64 <HAL_GPIO_Init+0x330>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d031      	beq.n	8002b6e <HAL_GPIO_Init+0x23a>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a56      	ldr	r2, [pc, #344]	; (8002c68 <HAL_GPIO_Init+0x334>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d02b      	beq.n	8002b6a <HAL_GPIO_Init+0x236>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a55      	ldr	r2, [pc, #340]	; (8002c6c <HAL_GPIO_Init+0x338>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d025      	beq.n	8002b66 <HAL_GPIO_Init+0x232>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a54      	ldr	r2, [pc, #336]	; (8002c70 <HAL_GPIO_Init+0x33c>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d01f      	beq.n	8002b62 <HAL_GPIO_Init+0x22e>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a53      	ldr	r2, [pc, #332]	; (8002c74 <HAL_GPIO_Init+0x340>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d019      	beq.n	8002b5e <HAL_GPIO_Init+0x22a>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a52      	ldr	r2, [pc, #328]	; (8002c78 <HAL_GPIO_Init+0x344>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d013      	beq.n	8002b5a <HAL_GPIO_Init+0x226>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a51      	ldr	r2, [pc, #324]	; (8002c7c <HAL_GPIO_Init+0x348>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d00d      	beq.n	8002b56 <HAL_GPIO_Init+0x222>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a50      	ldr	r2, [pc, #320]	; (8002c80 <HAL_GPIO_Init+0x34c>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d007      	beq.n	8002b52 <HAL_GPIO_Init+0x21e>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a4f      	ldr	r2, [pc, #316]	; (8002c84 <HAL_GPIO_Init+0x350>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d101      	bne.n	8002b4e <HAL_GPIO_Init+0x21a>
 8002b4a:	2309      	movs	r3, #9
 8002b4c:	e012      	b.n	8002b74 <HAL_GPIO_Init+0x240>
 8002b4e:	230a      	movs	r3, #10
 8002b50:	e010      	b.n	8002b74 <HAL_GPIO_Init+0x240>
 8002b52:	2308      	movs	r3, #8
 8002b54:	e00e      	b.n	8002b74 <HAL_GPIO_Init+0x240>
 8002b56:	2307      	movs	r3, #7
 8002b58:	e00c      	b.n	8002b74 <HAL_GPIO_Init+0x240>
 8002b5a:	2306      	movs	r3, #6
 8002b5c:	e00a      	b.n	8002b74 <HAL_GPIO_Init+0x240>
 8002b5e:	2305      	movs	r3, #5
 8002b60:	e008      	b.n	8002b74 <HAL_GPIO_Init+0x240>
 8002b62:	2304      	movs	r3, #4
 8002b64:	e006      	b.n	8002b74 <HAL_GPIO_Init+0x240>
 8002b66:	2303      	movs	r3, #3
 8002b68:	e004      	b.n	8002b74 <HAL_GPIO_Init+0x240>
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	e002      	b.n	8002b74 <HAL_GPIO_Init+0x240>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e000      	b.n	8002b74 <HAL_GPIO_Init+0x240>
 8002b72:	2300      	movs	r3, #0
 8002b74:	69fa      	ldr	r2, [r7, #28]
 8002b76:	f002 0203 	and.w	r2, r2, #3
 8002b7a:	0092      	lsls	r2, r2, #2
 8002b7c:	4093      	lsls	r3, r2
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b84:	4935      	ldr	r1, [pc, #212]	; (8002c5c <HAL_GPIO_Init+0x328>)
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	089b      	lsrs	r3, r3, #2
 8002b8a:	3302      	adds	r3, #2
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b92:	4b3d      	ldr	r3, [pc, #244]	; (8002c88 <HAL_GPIO_Init+0x354>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bb6:	4a34      	ldr	r2, [pc, #208]	; (8002c88 <HAL_GPIO_Init+0x354>)
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bbc:	4b32      	ldr	r3, [pc, #200]	; (8002c88 <HAL_GPIO_Init+0x354>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d003      	beq.n	8002be0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002be0:	4a29      	ldr	r2, [pc, #164]	; (8002c88 <HAL_GPIO_Init+0x354>)
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002be6:	4b28      	ldr	r3, [pc, #160]	; (8002c88 <HAL_GPIO_Init+0x354>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c0a:	4a1f      	ldr	r2, [pc, #124]	; (8002c88 <HAL_GPIO_Init+0x354>)
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c10:	4b1d      	ldr	r3, [pc, #116]	; (8002c88 <HAL_GPIO_Init+0x354>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d003      	beq.n	8002c34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c34:	4a14      	ldr	r2, [pc, #80]	; (8002c88 <HAL_GPIO_Init+0x354>)
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	61fb      	str	r3, [r7, #28]
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	2b0f      	cmp	r3, #15
 8002c44:	f67f ae84 	bls.w	8002950 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c48:	bf00      	nop
 8002c4a:	bf00      	nop
 8002c4c:	3724      	adds	r7, #36	; 0x24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	40013800 	.word	0x40013800
 8002c60:	40020000 	.word	0x40020000
 8002c64:	40020400 	.word	0x40020400
 8002c68:	40020800 	.word	0x40020800
 8002c6c:	40020c00 	.word	0x40020c00
 8002c70:	40021000 	.word	0x40021000
 8002c74:	40021400 	.word	0x40021400
 8002c78:	40021800 	.word	0x40021800
 8002c7c:	40021c00 	.word	0x40021c00
 8002c80:	40022000 	.word	0x40022000
 8002c84:	40022400 	.word	0x40022400
 8002c88:	40013c00 	.word	0x40013c00

08002c8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	460b      	mov	r3, r1
 8002c96:	807b      	strh	r3, [r7, #2]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c9c:	787b      	ldrb	r3, [r7, #1]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ca2:	887a      	ldrh	r2, [r7, #2]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ca8:	e003      	b.n	8002cb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002caa:	887b      	ldrh	r3, [r7, #2]
 8002cac:	041a      	lsls	r2, r3, #16
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	619a      	str	r2, [r3, #24]
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002cbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cc0:	b08f      	sub	sp, #60	; 0x3c
 8002cc2:	af0a      	add	r7, sp, #40	; 0x28
 8002cc4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e10f      	b.n	8002ef0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d106      	bne.n	8002cf0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7fd fedc 	bl	8000aa8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2203      	movs	r2, #3
 8002cf4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d102      	bne.n	8002d0a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f001 fbd5 	bl	80044be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	603b      	str	r3, [r7, #0]
 8002d1a:	687e      	ldr	r6, [r7, #4]
 8002d1c:	466d      	mov	r5, sp
 8002d1e:	f106 0410 	add.w	r4, r6, #16
 8002d22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d32:	1d33      	adds	r3, r6, #4
 8002d34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d36:	6838      	ldr	r0, [r7, #0]
 8002d38:	f001 fb60 	bl	80043fc <USB_CoreInit>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d005      	beq.n	8002d4e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2202      	movs	r2, #2
 8002d46:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e0d0      	b.n	8002ef0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2100      	movs	r1, #0
 8002d54:	4618      	mov	r0, r3
 8002d56:	f001 fbc3 	bl	80044e0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	73fb      	strb	r3, [r7, #15]
 8002d5e:	e04a      	b.n	8002df6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d60:	7bfa      	ldrb	r2, [r7, #15]
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	4613      	mov	r3, r2
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	4413      	add	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	333d      	adds	r3, #61	; 0x3d
 8002d70:	2201      	movs	r2, #1
 8002d72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d74:	7bfa      	ldrb	r2, [r7, #15]
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	4413      	add	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	333c      	adds	r3, #60	; 0x3c
 8002d84:	7bfa      	ldrb	r2, [r7, #15]
 8002d86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d88:	7bfa      	ldrb	r2, [r7, #15]
 8002d8a:	7bfb      	ldrb	r3, [r7, #15]
 8002d8c:	b298      	uxth	r0, r3
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	4413      	add	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	3344      	adds	r3, #68	; 0x44
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002da0:	7bfa      	ldrb	r2, [r7, #15]
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	4413      	add	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	3340      	adds	r3, #64	; 0x40
 8002db0:	2200      	movs	r2, #0
 8002db2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002db4:	7bfa      	ldrb	r2, [r7, #15]
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	4613      	mov	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	3348      	adds	r3, #72	; 0x48
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002dc8:	7bfa      	ldrb	r2, [r7, #15]
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	334c      	adds	r3, #76	; 0x4c
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ddc:	7bfa      	ldrb	r2, [r7, #15]
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	4613      	mov	r3, r2
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	4413      	add	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	440b      	add	r3, r1
 8002dea:	3354      	adds	r3, #84	; 0x54
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
 8002df2:	3301      	adds	r3, #1
 8002df4:	73fb      	strb	r3, [r7, #15]
 8002df6:	7bfa      	ldrb	r2, [r7, #15]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d3af      	bcc.n	8002d60 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e00:	2300      	movs	r3, #0
 8002e02:	73fb      	strb	r3, [r7, #15]
 8002e04:	e044      	b.n	8002e90 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e06:	7bfa      	ldrb	r2, [r7, #15]
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	4413      	add	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	440b      	add	r3, r1
 8002e14:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002e18:	2200      	movs	r2, #0
 8002e1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e1c:	7bfa      	ldrb	r2, [r7, #15]
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	4613      	mov	r3, r2
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	4413      	add	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	440b      	add	r3, r1
 8002e2a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002e2e:	7bfa      	ldrb	r2, [r7, #15]
 8002e30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e32:	7bfa      	ldrb	r2, [r7, #15]
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	4613      	mov	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	440b      	add	r3, r1
 8002e40:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002e44:	2200      	movs	r2, #0
 8002e46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e48:	7bfa      	ldrb	r2, [r7, #15]
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4413      	add	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	440b      	add	r3, r1
 8002e56:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e5e:	7bfa      	ldrb	r2, [r7, #15]
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	4613      	mov	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	4413      	add	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e74:	7bfa      	ldrb	r2, [r7, #15]
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	440b      	add	r3, r1
 8002e82:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002e86:	2200      	movs	r2, #0
 8002e88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e8a:	7bfb      	ldrb	r3, [r7, #15]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	73fb      	strb	r3, [r7, #15]
 8002e90:	7bfa      	ldrb	r2, [r7, #15]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d3b5      	bcc.n	8002e06 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	603b      	str	r3, [r7, #0]
 8002ea0:	687e      	ldr	r6, [r7, #4]
 8002ea2:	466d      	mov	r5, sp
 8002ea4:	f106 0410 	add.w	r4, r6, #16
 8002ea8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eaa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eb0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002eb4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002eb8:	1d33      	adds	r3, r6, #4
 8002eba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ebc:	6838      	ldr	r0, [r7, #0]
 8002ebe:	f001 fb5b 	bl	8004578 <USB_DevInit>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d005      	beq.n	8002ed4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2202      	movs	r2, #2
 8002ecc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e00d      	b.n	8002ef0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f001 fd26 	bl	800493a <USB_DevDisconnect>

  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3714      	adds	r7, #20
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ef8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e267      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d075      	beq.n	8003002 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f16:	4b88      	ldr	r3, [pc, #544]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 030c 	and.w	r3, r3, #12
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d00c      	beq.n	8002f3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f22:	4b85      	ldr	r3, [pc, #532]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f2a:	2b08      	cmp	r3, #8
 8002f2c:	d112      	bne.n	8002f54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f2e:	4b82      	ldr	r3, [pc, #520]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f3a:	d10b      	bne.n	8002f54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f3c:	4b7e      	ldr	r3, [pc, #504]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d05b      	beq.n	8003000 <HAL_RCC_OscConfig+0x108>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d157      	bne.n	8003000 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e242      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f5c:	d106      	bne.n	8002f6c <HAL_RCC_OscConfig+0x74>
 8002f5e:	4b76      	ldr	r3, [pc, #472]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a75      	ldr	r2, [pc, #468]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 8002f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	e01d      	b.n	8002fa8 <HAL_RCC_OscConfig+0xb0>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f74:	d10c      	bne.n	8002f90 <HAL_RCC_OscConfig+0x98>
 8002f76:	4b70      	ldr	r3, [pc, #448]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a6f      	ldr	r2, [pc, #444]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 8002f7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f80:	6013      	str	r3, [r2, #0]
 8002f82:	4b6d      	ldr	r3, [pc, #436]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a6c      	ldr	r2, [pc, #432]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 8002f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	e00b      	b.n	8002fa8 <HAL_RCC_OscConfig+0xb0>
 8002f90:	4b69      	ldr	r3, [pc, #420]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a68      	ldr	r2, [pc, #416]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 8002f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f9a:	6013      	str	r3, [r2, #0]
 8002f9c:	4b66      	ldr	r3, [pc, #408]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a65      	ldr	r2, [pc, #404]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 8002fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d013      	beq.n	8002fd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb0:	f7fe f8ce 	bl	8001150 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fb8:	f7fe f8ca 	bl	8001150 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b64      	cmp	r3, #100	; 0x64
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e207      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fca:	4b5b      	ldr	r3, [pc, #364]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0f0      	beq.n	8002fb8 <HAL_RCC_OscConfig+0xc0>
 8002fd6:	e014      	b.n	8003002 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd8:	f7fe f8ba 	bl	8001150 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fe0:	f7fe f8b6 	bl	8001150 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b64      	cmp	r3, #100	; 0x64
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e1f3      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ff2:	4b51      	ldr	r3, [pc, #324]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f0      	bne.n	8002fe0 <HAL_RCC_OscConfig+0xe8>
 8002ffe:	e000      	b.n	8003002 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d063      	beq.n	80030d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800300e:	4b4a      	ldr	r3, [pc, #296]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 030c 	and.w	r3, r3, #12
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00b      	beq.n	8003032 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800301a:	4b47      	ldr	r3, [pc, #284]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003022:	2b08      	cmp	r3, #8
 8003024:	d11c      	bne.n	8003060 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003026:	4b44      	ldr	r3, [pc, #272]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d116      	bne.n	8003060 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003032:	4b41      	ldr	r3, [pc, #260]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d005      	beq.n	800304a <HAL_RCC_OscConfig+0x152>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d001      	beq.n	800304a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e1c7      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800304a:	4b3b      	ldr	r3, [pc, #236]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	4937      	ldr	r1, [pc, #220]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 800305a:	4313      	orrs	r3, r2
 800305c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800305e:	e03a      	b.n	80030d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d020      	beq.n	80030aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003068:	4b34      	ldr	r3, [pc, #208]	; (800313c <HAL_RCC_OscConfig+0x244>)
 800306a:	2201      	movs	r2, #1
 800306c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306e:	f7fe f86f 	bl	8001150 <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003076:	f7fe f86b 	bl	8001150 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e1a8      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003088:	4b2b      	ldr	r3, [pc, #172]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0f0      	beq.n	8003076 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003094:	4b28      	ldr	r3, [pc, #160]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	4925      	ldr	r1, [pc, #148]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	600b      	str	r3, [r1, #0]
 80030a8:	e015      	b.n	80030d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030aa:	4b24      	ldr	r3, [pc, #144]	; (800313c <HAL_RCC_OscConfig+0x244>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b0:	f7fe f84e 	bl	8001150 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030b8:	f7fe f84a 	bl	8001150 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e187      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ca:	4b1b      	ldr	r3, [pc, #108]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f0      	bne.n	80030b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d036      	beq.n	8003150 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d016      	beq.n	8003118 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ea:	4b15      	ldr	r3, [pc, #84]	; (8003140 <HAL_RCC_OscConfig+0x248>)
 80030ec:	2201      	movs	r2, #1
 80030ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f0:	f7fe f82e 	bl	8001150 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030f8:	f7fe f82a 	bl	8001150 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e167      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800310a:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 800310c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d0f0      	beq.n	80030f8 <HAL_RCC_OscConfig+0x200>
 8003116:	e01b      	b.n	8003150 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003118:	4b09      	ldr	r3, [pc, #36]	; (8003140 <HAL_RCC_OscConfig+0x248>)
 800311a:	2200      	movs	r2, #0
 800311c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800311e:	f7fe f817 	bl	8001150 <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003124:	e00e      	b.n	8003144 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003126:	f7fe f813 	bl	8001150 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d907      	bls.n	8003144 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e150      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
 8003138:	40023800 	.word	0x40023800
 800313c:	42470000 	.word	0x42470000
 8003140:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003144:	4b88      	ldr	r3, [pc, #544]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 8003146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1ea      	bne.n	8003126 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 8097 	beq.w	800328c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800315e:	2300      	movs	r3, #0
 8003160:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003162:	4b81      	ldr	r3, [pc, #516]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10f      	bne.n	800318e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800316e:	2300      	movs	r3, #0
 8003170:	60bb      	str	r3, [r7, #8]
 8003172:	4b7d      	ldr	r3, [pc, #500]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	4a7c      	ldr	r2, [pc, #496]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 8003178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800317c:	6413      	str	r3, [r2, #64]	; 0x40
 800317e:	4b7a      	ldr	r3, [pc, #488]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003186:	60bb      	str	r3, [r7, #8]
 8003188:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800318a:	2301      	movs	r3, #1
 800318c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318e:	4b77      	ldr	r3, [pc, #476]	; (800336c <HAL_RCC_OscConfig+0x474>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003196:	2b00      	cmp	r3, #0
 8003198:	d118      	bne.n	80031cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800319a:	4b74      	ldr	r3, [pc, #464]	; (800336c <HAL_RCC_OscConfig+0x474>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a73      	ldr	r2, [pc, #460]	; (800336c <HAL_RCC_OscConfig+0x474>)
 80031a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031a6:	f7fd ffd3 	bl	8001150 <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ae:	f7fd ffcf 	bl	8001150 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e10c      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c0:	4b6a      	ldr	r3, [pc, #424]	; (800336c <HAL_RCC_OscConfig+0x474>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0f0      	beq.n	80031ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d106      	bne.n	80031e2 <HAL_RCC_OscConfig+0x2ea>
 80031d4:	4b64      	ldr	r3, [pc, #400]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 80031d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d8:	4a63      	ldr	r2, [pc, #396]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 80031da:	f043 0301 	orr.w	r3, r3, #1
 80031de:	6713      	str	r3, [r2, #112]	; 0x70
 80031e0:	e01c      	b.n	800321c <HAL_RCC_OscConfig+0x324>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	2b05      	cmp	r3, #5
 80031e8:	d10c      	bne.n	8003204 <HAL_RCC_OscConfig+0x30c>
 80031ea:	4b5f      	ldr	r3, [pc, #380]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 80031ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ee:	4a5e      	ldr	r2, [pc, #376]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 80031f0:	f043 0304 	orr.w	r3, r3, #4
 80031f4:	6713      	str	r3, [r2, #112]	; 0x70
 80031f6:	4b5c      	ldr	r3, [pc, #368]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 80031f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fa:	4a5b      	ldr	r2, [pc, #364]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 80031fc:	f043 0301 	orr.w	r3, r3, #1
 8003200:	6713      	str	r3, [r2, #112]	; 0x70
 8003202:	e00b      	b.n	800321c <HAL_RCC_OscConfig+0x324>
 8003204:	4b58      	ldr	r3, [pc, #352]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 8003206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003208:	4a57      	ldr	r2, [pc, #348]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 800320a:	f023 0301 	bic.w	r3, r3, #1
 800320e:	6713      	str	r3, [r2, #112]	; 0x70
 8003210:	4b55      	ldr	r3, [pc, #340]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 8003212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003214:	4a54      	ldr	r2, [pc, #336]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 8003216:	f023 0304 	bic.w	r3, r3, #4
 800321a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d015      	beq.n	8003250 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003224:	f7fd ff94 	bl	8001150 <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800322a:	e00a      	b.n	8003242 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800322c:	f7fd ff90 	bl	8001150 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	f241 3288 	movw	r2, #5000	; 0x1388
 800323a:	4293      	cmp	r3, r2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e0cb      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003242:	4b49      	ldr	r3, [pc, #292]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 8003244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0ee      	beq.n	800322c <HAL_RCC_OscConfig+0x334>
 800324e:	e014      	b.n	800327a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003250:	f7fd ff7e 	bl	8001150 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003256:	e00a      	b.n	800326e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003258:	f7fd ff7a 	bl	8001150 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	f241 3288 	movw	r2, #5000	; 0x1388
 8003266:	4293      	cmp	r3, r2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e0b5      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800326e:	4b3e      	ldr	r3, [pc, #248]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 8003270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1ee      	bne.n	8003258 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800327a:	7dfb      	ldrb	r3, [r7, #23]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d105      	bne.n	800328c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003280:	4b39      	ldr	r3, [pc, #228]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	4a38      	ldr	r2, [pc, #224]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 8003286:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800328a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 80a1 	beq.w	80033d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003296:	4b34      	ldr	r3, [pc, #208]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 030c 	and.w	r3, r3, #12
 800329e:	2b08      	cmp	r3, #8
 80032a0:	d05c      	beq.n	800335c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d141      	bne.n	800332e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032aa:	4b31      	ldr	r3, [pc, #196]	; (8003370 <HAL_RCC_OscConfig+0x478>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b0:	f7fd ff4e 	bl	8001150 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032b8:	f7fd ff4a 	bl	8001150 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e087      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ca:	4b27      	ldr	r3, [pc, #156]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1f0      	bne.n	80032b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69da      	ldr	r2, [r3, #28]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	019b      	lsls	r3, r3, #6
 80032e6:	431a      	orrs	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ec:	085b      	lsrs	r3, r3, #1
 80032ee:	3b01      	subs	r3, #1
 80032f0:	041b      	lsls	r3, r3, #16
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f8:	061b      	lsls	r3, r3, #24
 80032fa:	491b      	ldr	r1, [pc, #108]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003300:	4b1b      	ldr	r3, [pc, #108]	; (8003370 <HAL_RCC_OscConfig+0x478>)
 8003302:	2201      	movs	r2, #1
 8003304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003306:	f7fd ff23 	bl	8001150 <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800330c:	e008      	b.n	8003320 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800330e:	f7fd ff1f 	bl	8001150 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e05c      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003320:	4b11      	ldr	r3, [pc, #68]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0f0      	beq.n	800330e <HAL_RCC_OscConfig+0x416>
 800332c:	e054      	b.n	80033d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800332e:	4b10      	ldr	r3, [pc, #64]	; (8003370 <HAL_RCC_OscConfig+0x478>)
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003334:	f7fd ff0c 	bl	8001150 <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800333c:	f7fd ff08 	bl	8001150 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e045      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800334e:	4b06      	ldr	r3, [pc, #24]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f0      	bne.n	800333c <HAL_RCC_OscConfig+0x444>
 800335a:	e03d      	b.n	80033d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d107      	bne.n	8003374 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e038      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
 8003368:	40023800 	.word	0x40023800
 800336c:	40007000 	.word	0x40007000
 8003370:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003374:	4b1b      	ldr	r3, [pc, #108]	; (80033e4 <HAL_RCC_OscConfig+0x4ec>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d028      	beq.n	80033d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800338c:	429a      	cmp	r2, r3
 800338e:	d121      	bne.n	80033d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800339a:	429a      	cmp	r2, r3
 800339c:	d11a      	bne.n	80033d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033a4:	4013      	ands	r3, r2
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d111      	bne.n	80033d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ba:	085b      	lsrs	r3, r3, #1
 80033bc:	3b01      	subs	r3, #1
 80033be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d107      	bne.n	80033d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d001      	beq.n	80033d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e000      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3718      	adds	r7, #24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40023800 	.word	0x40023800

080033e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e0cc      	b.n	8003596 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033fc:	4b68      	ldr	r3, [pc, #416]	; (80035a0 <HAL_RCC_ClockConfig+0x1b8>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 030f 	and.w	r3, r3, #15
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	429a      	cmp	r2, r3
 8003408:	d90c      	bls.n	8003424 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800340a:	4b65      	ldr	r3, [pc, #404]	; (80035a0 <HAL_RCC_ClockConfig+0x1b8>)
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	b2d2      	uxtb	r2, r2
 8003410:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003412:	4b63      	ldr	r3, [pc, #396]	; (80035a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	429a      	cmp	r2, r3
 800341e:	d001      	beq.n	8003424 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e0b8      	b.n	8003596 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d020      	beq.n	8003472 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b00      	cmp	r3, #0
 800343a:	d005      	beq.n	8003448 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800343c:	4b59      	ldr	r3, [pc, #356]	; (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	4a58      	ldr	r2, [pc, #352]	; (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003442:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003446:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0308 	and.w	r3, r3, #8
 8003450:	2b00      	cmp	r3, #0
 8003452:	d005      	beq.n	8003460 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003454:	4b53      	ldr	r3, [pc, #332]	; (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	4a52      	ldr	r2, [pc, #328]	; (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 800345a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800345e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003460:	4b50      	ldr	r3, [pc, #320]	; (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	494d      	ldr	r1, [pc, #308]	; (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 800346e:	4313      	orrs	r3, r2
 8003470:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d044      	beq.n	8003508 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d107      	bne.n	8003496 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003486:	4b47      	ldr	r3, [pc, #284]	; (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d119      	bne.n	80034c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e07f      	b.n	8003596 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	2b02      	cmp	r3, #2
 800349c:	d003      	beq.n	80034a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034a2:	2b03      	cmp	r3, #3
 80034a4:	d107      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034a6:	4b3f      	ldr	r3, [pc, #252]	; (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d109      	bne.n	80034c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e06f      	b.n	8003596 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b6:	4b3b      	ldr	r3, [pc, #236]	; (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e067      	b.n	8003596 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034c6:	4b37      	ldr	r3, [pc, #220]	; (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f023 0203 	bic.w	r2, r3, #3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	4934      	ldr	r1, [pc, #208]	; (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034d8:	f7fd fe3a 	bl	8001150 <HAL_GetTick>
 80034dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034de:	e00a      	b.n	80034f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034e0:	f7fd fe36 	bl	8001150 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e04f      	b.n	8003596 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034f6:	4b2b      	ldr	r3, [pc, #172]	; (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 020c 	and.w	r2, r3, #12
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	429a      	cmp	r2, r3
 8003506:	d1eb      	bne.n	80034e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003508:	4b25      	ldr	r3, [pc, #148]	; (80035a0 <HAL_RCC_ClockConfig+0x1b8>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 030f 	and.w	r3, r3, #15
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	429a      	cmp	r2, r3
 8003514:	d20c      	bcs.n	8003530 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003516:	4b22      	ldr	r3, [pc, #136]	; (80035a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800351e:	4b20      	ldr	r3, [pc, #128]	; (80035a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	429a      	cmp	r2, r3
 800352a:	d001      	beq.n	8003530 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e032      	b.n	8003596 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b00      	cmp	r3, #0
 800353a:	d008      	beq.n	800354e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800353c:	4b19      	ldr	r3, [pc, #100]	; (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	4916      	ldr	r1, [pc, #88]	; (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 800354a:	4313      	orrs	r3, r2
 800354c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	2b00      	cmp	r3, #0
 8003558:	d009      	beq.n	800356e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800355a:	4b12      	ldr	r3, [pc, #72]	; (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	490e      	ldr	r1, [pc, #56]	; (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	4313      	orrs	r3, r2
 800356c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800356e:	f000 f821 	bl	80035b4 <HAL_RCC_GetSysClockFreq>
 8003572:	4602      	mov	r2, r0
 8003574:	4b0b      	ldr	r3, [pc, #44]	; (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	091b      	lsrs	r3, r3, #4
 800357a:	f003 030f 	and.w	r3, r3, #15
 800357e:	490a      	ldr	r1, [pc, #40]	; (80035a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003580:	5ccb      	ldrb	r3, [r1, r3]
 8003582:	fa22 f303 	lsr.w	r3, r2, r3
 8003586:	4a09      	ldr	r2, [pc, #36]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 8003588:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800358a:	4b09      	ldr	r3, [pc, #36]	; (80035b0 <HAL_RCC_ClockConfig+0x1c8>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f7fd fd9a 	bl	80010c8 <HAL_InitTick>

  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	40023c00 	.word	0x40023c00
 80035a4:	40023800 	.word	0x40023800
 80035a8:	080194ec 	.word	0x080194ec
 80035ac:	20000000 	.word	0x20000000
 80035b0:	20000004 	.word	0x20000004

080035b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035b8:	b094      	sub	sp, #80	; 0x50
 80035ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035bc:	2300      	movs	r3, #0
 80035be:	647b      	str	r3, [r7, #68]	; 0x44
 80035c0:	2300      	movs	r3, #0
 80035c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035c4:	2300      	movs	r3, #0
 80035c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035cc:	4b79      	ldr	r3, [pc, #484]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f003 030c 	and.w	r3, r3, #12
 80035d4:	2b08      	cmp	r3, #8
 80035d6:	d00d      	beq.n	80035f4 <HAL_RCC_GetSysClockFreq+0x40>
 80035d8:	2b08      	cmp	r3, #8
 80035da:	f200 80e1 	bhi.w	80037a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d002      	beq.n	80035e8 <HAL_RCC_GetSysClockFreq+0x34>
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	d003      	beq.n	80035ee <HAL_RCC_GetSysClockFreq+0x3a>
 80035e6:	e0db      	b.n	80037a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035e8:	4b73      	ldr	r3, [pc, #460]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80035ea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80035ec:	e0db      	b.n	80037a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035ee:	4b73      	ldr	r3, [pc, #460]	; (80037bc <HAL_RCC_GetSysClockFreq+0x208>)
 80035f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035f2:	e0d8      	b.n	80037a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035f4:	4b6f      	ldr	r3, [pc, #444]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035fc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035fe:	4b6d      	ldr	r3, [pc, #436]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d063      	beq.n	80036d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800360a:	4b6a      	ldr	r3, [pc, #424]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	099b      	lsrs	r3, r3, #6
 8003610:	2200      	movs	r2, #0
 8003612:	63bb      	str	r3, [r7, #56]	; 0x38
 8003614:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800361c:	633b      	str	r3, [r7, #48]	; 0x30
 800361e:	2300      	movs	r3, #0
 8003620:	637b      	str	r3, [r7, #52]	; 0x34
 8003622:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003626:	4622      	mov	r2, r4
 8003628:	462b      	mov	r3, r5
 800362a:	f04f 0000 	mov.w	r0, #0
 800362e:	f04f 0100 	mov.w	r1, #0
 8003632:	0159      	lsls	r1, r3, #5
 8003634:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003638:	0150      	lsls	r0, r2, #5
 800363a:	4602      	mov	r2, r0
 800363c:	460b      	mov	r3, r1
 800363e:	4621      	mov	r1, r4
 8003640:	1a51      	subs	r1, r2, r1
 8003642:	6139      	str	r1, [r7, #16]
 8003644:	4629      	mov	r1, r5
 8003646:	eb63 0301 	sbc.w	r3, r3, r1
 800364a:	617b      	str	r3, [r7, #20]
 800364c:	f04f 0200 	mov.w	r2, #0
 8003650:	f04f 0300 	mov.w	r3, #0
 8003654:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003658:	4659      	mov	r1, fp
 800365a:	018b      	lsls	r3, r1, #6
 800365c:	4651      	mov	r1, sl
 800365e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003662:	4651      	mov	r1, sl
 8003664:	018a      	lsls	r2, r1, #6
 8003666:	4651      	mov	r1, sl
 8003668:	ebb2 0801 	subs.w	r8, r2, r1
 800366c:	4659      	mov	r1, fp
 800366e:	eb63 0901 	sbc.w	r9, r3, r1
 8003672:	f04f 0200 	mov.w	r2, #0
 8003676:	f04f 0300 	mov.w	r3, #0
 800367a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800367e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003682:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003686:	4690      	mov	r8, r2
 8003688:	4699      	mov	r9, r3
 800368a:	4623      	mov	r3, r4
 800368c:	eb18 0303 	adds.w	r3, r8, r3
 8003690:	60bb      	str	r3, [r7, #8]
 8003692:	462b      	mov	r3, r5
 8003694:	eb49 0303 	adc.w	r3, r9, r3
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	f04f 0200 	mov.w	r2, #0
 800369e:	f04f 0300 	mov.w	r3, #0
 80036a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036a6:	4629      	mov	r1, r5
 80036a8:	024b      	lsls	r3, r1, #9
 80036aa:	4621      	mov	r1, r4
 80036ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036b0:	4621      	mov	r1, r4
 80036b2:	024a      	lsls	r2, r1, #9
 80036b4:	4610      	mov	r0, r2
 80036b6:	4619      	mov	r1, r3
 80036b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036ba:	2200      	movs	r2, #0
 80036bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80036be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036c4:	f7fc fde4 	bl	8000290 <__aeabi_uldivmod>
 80036c8:	4602      	mov	r2, r0
 80036ca:	460b      	mov	r3, r1
 80036cc:	4613      	mov	r3, r2
 80036ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036d0:	e058      	b.n	8003784 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036d2:	4b38      	ldr	r3, [pc, #224]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	099b      	lsrs	r3, r3, #6
 80036d8:	2200      	movs	r2, #0
 80036da:	4618      	mov	r0, r3
 80036dc:	4611      	mov	r1, r2
 80036de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036e2:	623b      	str	r3, [r7, #32]
 80036e4:	2300      	movs	r3, #0
 80036e6:	627b      	str	r3, [r7, #36]	; 0x24
 80036e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036ec:	4642      	mov	r2, r8
 80036ee:	464b      	mov	r3, r9
 80036f0:	f04f 0000 	mov.w	r0, #0
 80036f4:	f04f 0100 	mov.w	r1, #0
 80036f8:	0159      	lsls	r1, r3, #5
 80036fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036fe:	0150      	lsls	r0, r2, #5
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	4641      	mov	r1, r8
 8003706:	ebb2 0a01 	subs.w	sl, r2, r1
 800370a:	4649      	mov	r1, r9
 800370c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	f04f 0300 	mov.w	r3, #0
 8003718:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800371c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003720:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003724:	ebb2 040a 	subs.w	r4, r2, sl
 8003728:	eb63 050b 	sbc.w	r5, r3, fp
 800372c:	f04f 0200 	mov.w	r2, #0
 8003730:	f04f 0300 	mov.w	r3, #0
 8003734:	00eb      	lsls	r3, r5, #3
 8003736:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800373a:	00e2      	lsls	r2, r4, #3
 800373c:	4614      	mov	r4, r2
 800373e:	461d      	mov	r5, r3
 8003740:	4643      	mov	r3, r8
 8003742:	18e3      	adds	r3, r4, r3
 8003744:	603b      	str	r3, [r7, #0]
 8003746:	464b      	mov	r3, r9
 8003748:	eb45 0303 	adc.w	r3, r5, r3
 800374c:	607b      	str	r3, [r7, #4]
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	f04f 0300 	mov.w	r3, #0
 8003756:	e9d7 4500 	ldrd	r4, r5, [r7]
 800375a:	4629      	mov	r1, r5
 800375c:	028b      	lsls	r3, r1, #10
 800375e:	4621      	mov	r1, r4
 8003760:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003764:	4621      	mov	r1, r4
 8003766:	028a      	lsls	r2, r1, #10
 8003768:	4610      	mov	r0, r2
 800376a:	4619      	mov	r1, r3
 800376c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800376e:	2200      	movs	r2, #0
 8003770:	61bb      	str	r3, [r7, #24]
 8003772:	61fa      	str	r2, [r7, #28]
 8003774:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003778:	f7fc fd8a 	bl	8000290 <__aeabi_uldivmod>
 800377c:	4602      	mov	r2, r0
 800377e:	460b      	mov	r3, r1
 8003780:	4613      	mov	r3, r2
 8003782:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003784:	4b0b      	ldr	r3, [pc, #44]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	0c1b      	lsrs	r3, r3, #16
 800378a:	f003 0303 	and.w	r3, r3, #3
 800378e:	3301      	adds	r3, #1
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003794:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003796:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003798:	fbb2 f3f3 	udiv	r3, r2, r3
 800379c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800379e:	e002      	b.n	80037a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037a0:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80037a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3750      	adds	r7, #80	; 0x50
 80037ac:	46bd      	mov	sp, r7
 80037ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037b2:	bf00      	nop
 80037b4:	40023800 	.word	0x40023800
 80037b8:	00f42400 	.word	0x00f42400
 80037bc:	007a1200 	.word	0x007a1200

080037c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037c4:	4b03      	ldr	r3, [pc, #12]	; (80037d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80037c6:	681b      	ldr	r3, [r3, #0]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	20000000 	.word	0x20000000

080037d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037dc:	f7ff fff0 	bl	80037c0 <HAL_RCC_GetHCLKFreq>
 80037e0:	4602      	mov	r2, r0
 80037e2:	4b05      	ldr	r3, [pc, #20]	; (80037f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	0a9b      	lsrs	r3, r3, #10
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	4903      	ldr	r1, [pc, #12]	; (80037fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ee:	5ccb      	ldrb	r3, [r1, r3]
 80037f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	40023800 	.word	0x40023800
 80037fc:	080194fc 	.word	0x080194fc

08003800 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003804:	f7ff ffdc 	bl	80037c0 <HAL_RCC_GetHCLKFreq>
 8003808:	4602      	mov	r2, r0
 800380a:	4b05      	ldr	r3, [pc, #20]	; (8003820 <HAL_RCC_GetPCLK2Freq+0x20>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	0b5b      	lsrs	r3, r3, #13
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	4903      	ldr	r1, [pc, #12]	; (8003824 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003816:	5ccb      	ldrb	r3, [r1, r3]
 8003818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800381c:	4618      	mov	r0, r3
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40023800 	.word	0x40023800
 8003824:	080194fc 	.word	0x080194fc

08003828 <HAL_SMARTCARD_Init>:
  * @param  hsc    Pointer to a SMARTCARD_HandleTypeDef structure that contains
  *                the configuration information for SMARTCARD module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMARTCARD_Init(SMARTCARD_HandleTypeDef *hsc)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Check the SMARTCARD handle allocation */
  if(hsc == NULL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <HAL_SMARTCARD_Init+0x12>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e071      	b.n	800391e <HAL_SMARTCARD_Init+0xf6>

  /* Check the parameters */
  assert_param(IS_SMARTCARD_INSTANCE(hsc->Instance));
  assert_param(IS_SMARTCARD_NACK_STATE(hsc->Init.NACKState));

  if(hsc->gState == HAL_SMARTCARD_STATE_RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d106      	bne.n	8003854 <HAL_SMARTCARD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsc->Lock = HAL_UNLOCKED;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsc->MspInitCallback(hsc);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_SMARTCARD_MspInit(hsc);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7fd f89a 	bl	8000988 <HAL_SMARTCARD_MspInit>
#endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACKS */
  }

  hsc->gState = HAL_SMARTCARD_STATE_BUSY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2224      	movs	r2, #36	; 0x24
 8003858:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Set the Prescaler */
  MODIFY_REG(hsc->Instance->GTPR, USART_GTPR_PSC, hsc->Init.Prescaler);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	619a      	str	r2, [r3, #24]

  /* Set the Guard Time */
  MODIFY_REG(hsc->Instance->GTPR, USART_GTPR_GT, ((hsc->Init.GuardTime)<<8U));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003880:	021a      	lsls	r2, r3, #8
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	619a      	str	r2, [r3, #24]

  /* Set the Smartcard Communication parameters */
  SMARTCARD_SetConfig(hsc);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f84c 	bl	8003928 <SMARTCARD_SetConfig>

  /* In SmartCard mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(hsc->Instance->CR2, USART_CR2_LINEN);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	691a      	ldr	r2, [r3, #16]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800389e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(hsc->Instance->CR3, (USART_CR3_IREN | USART_CR3_HDSEL));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695a      	ldr	r2, [r3, #20]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 020a 	bic.w	r2, r2, #10
 80038ae:	615a      	str	r2, [r3, #20]

  /* Enable the SMARTCARD Parity Error Interrupt */
  SET_BIT(hsc->Instance->CR1, USART_CR1_PEIE);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68da      	ldr	r2, [r3, #12]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038be:	60da      	str	r2, [r3, #12]

  /* Enable the SMARTCARD Framing Error Interrupt */
  SET_BIT(hsc->Instance->CR3, USART_CR3_EIE);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	695a      	ldr	r2, [r3, #20]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f042 0201 	orr.w	r2, r2, #1
 80038ce:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_SMARTCARD_ENABLE(hsc);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038de:	60da      	str	r2, [r3, #12]

  /* Configure the Smartcard NACK state */
  MODIFY_REG(hsc->Instance->CR3, USART_CR3_NACK, hsc->Init.NACKState);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	f023 0110 	bic.w	r1, r3, #16
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	615a      	str	r2, [r3, #20]

  /* Enable the SC mode by setting the SCEN bit in the CR3 register */
  hsc->Instance->CR3 |= (USART_CR3_SCEN);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	695a      	ldr	r2, [r3, #20]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f042 0220 	orr.w	r2, r2, #32
 8003904:	615a      	str	r2, [r3, #20]

  /* Initialize the SMARTCARD state*/
  hsc->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	64da      	str	r2, [r3, #76]	; 0x4c
  hsc->gState= HAL_SMARTCARD_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2220      	movs	r2, #32
 8003910:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  hsc->RxState= HAL_SMARTCARD_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2220      	movs	r2, #32
 8003918:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
	...

08003928 <SMARTCARD_SetConfig>:
  * @param  hsc    Pointer to a SMARTCARD_HandleTypeDef structure that contains
  *                the configuration information for SMARTCARD module.
  * @retval None
  */
static void SMARTCARD_SetConfig(SMARTCARD_HandleTypeDef *hsc)
{
 8003928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800392c:	b0ba      	sub	sp, #232	; 0xe8
 800392e:	af00      	add	r7, sp, #0
 8003930:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
  uint32_t tmpreg = 0x00U;
 8003934:	2300      	movs	r3, #0
 8003936:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  assert_param(IS_SMARTCARD_MODE(hsc->Init.Mode));
  assert_param(IS_SMARTCARD_NACK_STATE(hsc->Init.NACKState));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(hsc->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800393a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68d9      	ldr	r1, [r3, #12]
 8003942:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	f021 030c 	bic.w	r3, r1, #12
 800394c:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = hsc->Instance->CR2;
 800394e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL));
 800395a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800395e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003962:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  /* Configure the SMARTCARD Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to hsc->Init.CLKPolarity value */
  /* Set CPHA bit according to hsc->Init.CLKPhase value */
  /* Set LBCL bit according to hsc->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to hsc->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CR2_CLKEN | hsc->Init.CLKPolarity |
 8003966:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800396a:	699a      	ldr	r2, [r3, #24]
                      hsc->Init.CLKPhase| hsc->Init.CLKLastBit | hsc->Init.StopBits);
 800396c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003970:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CR2_CLKEN | hsc->Init.CLKPolarity |
 8003972:	431a      	orrs	r2, r3
                      hsc->Init.CLKPhase| hsc->Init.CLKLastBit | hsc->Init.StopBits);
 8003974:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	431a      	orrs	r2, r3
 800397c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003980:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CR2_CLKEN | hsc->Init.CLKPolarity |
 8003982:	431a      	orrs	r2, r3
 8003984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003988:	4313      	orrs	r3, r2
 800398a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800398e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  /* Write to USART CR2 */
  WRITE_REG(hsc->Instance->CR2, (uint32_t)tmpreg);
 8003992:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800399c:	6113      	str	r3, [r2, #16]

  tmpreg = hsc->Instance->CR2;
 800399e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80039aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80039b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

  /* Set Stop Bits: Set STOP[13:12] bits according to hsc->Init.StopBits value */
  tmpreg |= (uint32_t)(hsc->Init.StopBits);
 80039b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039ba:	68da      	ldr	r2, [r3, #12]
 80039bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039c0:	4313      	orrs	r3, r2
 80039c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

  /* Write to USART CR2 */
  WRITE_REG(hsc->Instance->CR2, (uint32_t)tmpreg);
 80039c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039d0:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = hsc->Instance->CR1;
 80039d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80039de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039e2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80039e6:	f023 030c 	bic.w	r3, r3, #12
 80039ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

  /* Configure the SMARTCARD Word Length, Parity and mode:
     Set the M bits according to hsc->Init.WordLength value
     Set PCE and PS bits according to hsc->Init.Parity value
     Set TE and RE bits according to hsc->Init.Mode value */
  tmpreg |= (uint32_t)hsc->Init.WordLength | hsc->Init.Parity | hsc->Init.Mode;
 80039ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039f2:	689a      	ldr	r2, [r3, #8]
 80039f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	431a      	orrs	r2, r3
 80039fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	431a      	orrs	r2, r3
 8003a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

  /* Write to USART CR1 */
  WRITE_REG(hsc->Instance->CR1, (uint32_t)tmpreg);
 8003a0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a18:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(hsc->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8003a1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6959      	ldr	r1, [r3, #20]
 8003a22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 8003a2c:	6153      	str	r3, [r2, #20]

  /*-------------------------- USART BRR Configuration -----------------------*/
#if defined(USART6)
  if((hsc->Instance == USART1) || (hsc->Instance == USART6))
 8003a2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	4b8c      	ldr	r3, [pc, #560]	; (8003c68 <SMARTCARD_SetConfig+0x340>)
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d006      	beq.n	8003a48 <SMARTCARD_SetConfig+0x120>
 8003a3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	4b8a      	ldr	r3, [pc, #552]	; (8003c6c <SMARTCARD_SetConfig+0x344>)
 8003a42:	429a      	cmp	r2, r3
 8003a44:	f040 8116 	bne.w	8003c74 <SMARTCARD_SetConfig+0x34c>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a48:	f7ff feda 	bl	8003800 <HAL_RCC_GetPCLK2Freq>
 8003a4c:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
    hsc->Instance->BRR = SMARTCARD_BRR(pclk, hsc->Init.BaudRate);
 8003a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a54:	2200      	movs	r2, #0
 8003a56:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a5a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a5e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003a62:	4622      	mov	r2, r4
 8003a64:	462b      	mov	r3, r5
 8003a66:	1891      	adds	r1, r2, r2
 8003a68:	6439      	str	r1, [r7, #64]	; 0x40
 8003a6a:	415b      	adcs	r3, r3
 8003a6c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a72:	4621      	mov	r1, r4
 8003a74:	eb12 0801 	adds.w	r8, r2, r1
 8003a78:	4629      	mov	r1, r5
 8003a7a:	eb43 0901 	adc.w	r9, r3, r1
 8003a7e:	f04f 0200 	mov.w	r2, #0
 8003a82:	f04f 0300 	mov.w	r3, #0
 8003a86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a92:	4690      	mov	r8, r2
 8003a94:	4699      	mov	r9, r3
 8003a96:	4623      	mov	r3, r4
 8003a98:	eb18 0303 	adds.w	r3, r8, r3
 8003a9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003aa0:	462b      	mov	r3, r5
 8003aa2:	eb49 0303 	adc.w	r3, r9, r3
 8003aa6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003aaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ab6:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	f04f 0300 	mov.w	r3, #0
 8003ac2:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8003ac6:	4629      	mov	r1, r5
 8003ac8:	008b      	lsls	r3, r1, #2
 8003aca:	4621      	mov	r1, r4
 8003acc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ad0:	4621      	mov	r1, r4
 8003ad2:	008a      	lsls	r2, r1, #2
 8003ad4:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003ad8:	f7fc fbda 	bl	8000290 <__aeabi_uldivmod>
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4b63      	ldr	r3, [pc, #396]	; (8003c70 <SMARTCARD_SetConfig+0x348>)
 8003ae2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ae6:	095b      	lsrs	r3, r3, #5
 8003ae8:	011c      	lsls	r4, r3, #4
 8003aea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aee:	2200      	movs	r2, #0
 8003af0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003af4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003af8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003afc:	4642      	mov	r2, r8
 8003afe:	464b      	mov	r3, r9
 8003b00:	1891      	adds	r1, r2, r2
 8003b02:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b04:	415b      	adcs	r3, r3
 8003b06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b0c:	4641      	mov	r1, r8
 8003b0e:	1851      	adds	r1, r2, r1
 8003b10:	6339      	str	r1, [r7, #48]	; 0x30
 8003b12:	4649      	mov	r1, r9
 8003b14:	414b      	adcs	r3, r1
 8003b16:	637b      	str	r3, [r7, #52]	; 0x34
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	f04f 0300 	mov.w	r3, #0
 8003b20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b24:	4659      	mov	r1, fp
 8003b26:	00cb      	lsls	r3, r1, #3
 8003b28:	4651      	mov	r1, sl
 8003b2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b2e:	4651      	mov	r1, sl
 8003b30:	00ca      	lsls	r2, r1, #3
 8003b32:	4610      	mov	r0, r2
 8003b34:	4619      	mov	r1, r3
 8003b36:	4603      	mov	r3, r0
 8003b38:	4642      	mov	r2, r8
 8003b3a:	189b      	adds	r3, r3, r2
 8003b3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b40:	464b      	mov	r3, r9
 8003b42:	460a      	mov	r2, r1
 8003b44:	eb42 0303 	adc.w	r3, r2, r3
 8003b48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b58:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b5c:	f04f 0200 	mov.w	r2, #0
 8003b60:	f04f 0300 	mov.w	r3, #0
 8003b64:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8003b68:	4649      	mov	r1, r9
 8003b6a:	008b      	lsls	r3, r1, #2
 8003b6c:	4641      	mov	r1, r8
 8003b6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b72:	4641      	mov	r1, r8
 8003b74:	008a      	lsls	r2, r1, #2
 8003b76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b7a:	f7fc fb89 	bl	8000290 <__aeabi_uldivmod>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	460b      	mov	r3, r1
 8003b82:	4b3b      	ldr	r3, [pc, #236]	; (8003c70 <SMARTCARD_SetConfig+0x348>)
 8003b84:	fba3 1302 	umull	r1, r3, r3, r2
 8003b88:	095b      	lsrs	r3, r3, #5
 8003b8a:	2164      	movs	r1, #100	; 0x64
 8003b8c:	fb01 f303 	mul.w	r3, r1, r3
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	011b      	lsls	r3, r3, #4
 8003b94:	3332      	adds	r3, #50	; 0x32
 8003b96:	4a36      	ldr	r2, [pc, #216]	; (8003c70 <SMARTCARD_SetConfig+0x348>)
 8003b98:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9c:	095b      	lsrs	r3, r3, #5
 8003b9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ba2:	441c      	add	r4, r3
 8003ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003bae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003bb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003bb6:	4642      	mov	r2, r8
 8003bb8:	464b      	mov	r3, r9
 8003bba:	1891      	adds	r1, r2, r2
 8003bbc:	62b9      	str	r1, [r7, #40]	; 0x28
 8003bbe:	415b      	adcs	r3, r3
 8003bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bc6:	4641      	mov	r1, r8
 8003bc8:	1851      	adds	r1, r2, r1
 8003bca:	6239      	str	r1, [r7, #32]
 8003bcc:	4649      	mov	r1, r9
 8003bce:	414b      	adcs	r3, r1
 8003bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8003bd2:	f04f 0200 	mov.w	r2, #0
 8003bd6:	f04f 0300 	mov.w	r3, #0
 8003bda:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 8003bde:	4659      	mov	r1, fp
 8003be0:	00cb      	lsls	r3, r1, #3
 8003be2:	4651      	mov	r1, sl
 8003be4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003be8:	4651      	mov	r1, sl
 8003bea:	00ca      	lsls	r2, r1, #3
 8003bec:	4610      	mov	r0, r2
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	4642      	mov	r2, r8
 8003bf4:	189b      	adds	r3, r3, r2
 8003bf6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003bfa:	464b      	mov	r3, r9
 8003bfc:	460a      	mov	r2, r1
 8003bfe:	eb42 0303 	adc.w	r3, r2, r3
 8003c02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c16:	f04f 0200 	mov.w	r2, #0
 8003c1a:	f04f 0300 	mov.w	r3, #0
 8003c1e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8003c22:	4649      	mov	r1, r9
 8003c24:	008b      	lsls	r3, r1, #2
 8003c26:	4641      	mov	r1, r8
 8003c28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c2c:	4641      	mov	r1, r8
 8003c2e:	008a      	lsls	r2, r1, #2
 8003c30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c34:	f7fc fb2c 	bl	8000290 <__aeabi_uldivmod>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4b0c      	ldr	r3, [pc, #48]	; (8003c70 <SMARTCARD_SetConfig+0x348>)
 8003c3e:	fba3 1302 	umull	r1, r3, r3, r2
 8003c42:	095b      	lsrs	r3, r3, #5
 8003c44:	2164      	movs	r1, #100	; 0x64
 8003c46:	fb01 f303 	mul.w	r3, r1, r3
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	011b      	lsls	r3, r3, #4
 8003c4e:	3332      	adds	r3, #50	; 0x32
 8003c50:	4a07      	ldr	r2, [pc, #28]	; (8003c70 <SMARTCARD_SetConfig+0x348>)
 8003c52:	fba2 2303 	umull	r2, r3, r2, r3
 8003c56:	095b      	lsrs	r3, r3, #5
 8003c58:	f003 020f 	and.w	r2, r3, #15
 8003c5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4422      	add	r2, r4
 8003c64:	609a      	str	r2, [r3, #8]
 8003c66:	e0ff      	b.n	8003e68 <SMARTCARD_SetConfig+0x540>
 8003c68:	40011000 	.word	0x40011000
 8003c6c:	40011400 	.word	0x40011400
 8003c70:	51eb851f 	.word	0x51eb851f
    hsc->Instance->BRR = SMARTCARD_BRR(pclk, hsc->Init.BaudRate);
  }
#endif /* USART6 */
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c74:	f7ff fdb0 	bl	80037d8 <HAL_RCC_GetPCLK1Freq>
 8003c78:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
    hsc->Instance->BRR = SMARTCARD_BRR(pclk, hsc->Init.BaudRate);
 8003c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c80:	2200      	movs	r2, #0
 8003c82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c86:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c8a:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c8e:	4642      	mov	r2, r8
 8003c90:	464b      	mov	r3, r9
 8003c92:	1891      	adds	r1, r2, r2
 8003c94:	61b9      	str	r1, [r7, #24]
 8003c96:	415b      	adcs	r3, r3
 8003c98:	61fb      	str	r3, [r7, #28]
 8003c9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c9e:	4641      	mov	r1, r8
 8003ca0:	1854      	adds	r4, r2, r1
 8003ca2:	4649      	mov	r1, r9
 8003ca4:	eb43 0501 	adc.w	r5, r3, r1
 8003ca8:	f04f 0200 	mov.w	r2, #0
 8003cac:	f04f 0300 	mov.w	r3, #0
 8003cb0:	00eb      	lsls	r3, r5, #3
 8003cb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cb6:	00e2      	lsls	r2, r4, #3
 8003cb8:	4614      	mov	r4, r2
 8003cba:	461d      	mov	r5, r3
 8003cbc:	4643      	mov	r3, r8
 8003cbe:	18e3      	adds	r3, r4, r3
 8003cc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003cc4:	464b      	mov	r3, r9
 8003cc6:	eb45 0303 	adc.w	r3, r5, r3
 8003cca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003cce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	67bb      	str	r3, [r7, #120]	; 0x78
 8003cd8:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003cda:	f04f 0200 	mov.w	r2, #0
 8003cde:	f04f 0300 	mov.w	r3, #0
 8003ce2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003ce6:	4629      	mov	r1, r5
 8003ce8:	008b      	lsls	r3, r1, #2
 8003cea:	4621      	mov	r1, r4
 8003cec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cf0:	4621      	mov	r1, r4
 8003cf2:	008a      	lsls	r2, r1, #2
 8003cf4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003cf8:	f7fc faca 	bl	8000290 <__aeabi_uldivmod>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	460b      	mov	r3, r1
 8003d00:	4b5c      	ldr	r3, [pc, #368]	; (8003e74 <SMARTCARD_SetConfig+0x54c>)
 8003d02:	fba3 2302 	umull	r2, r3, r3, r2
 8003d06:	095b      	lsrs	r3, r3, #5
 8003d08:	011c      	lsls	r4, r3, #4
 8003d0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d0e:	2200      	movs	r2, #0
 8003d10:	673b      	str	r3, [r7, #112]	; 0x70
 8003d12:	677a      	str	r2, [r7, #116]	; 0x74
 8003d14:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d18:	4642      	mov	r2, r8
 8003d1a:	464b      	mov	r3, r9
 8003d1c:	1891      	adds	r1, r2, r2
 8003d1e:	6139      	str	r1, [r7, #16]
 8003d20:	415b      	adcs	r3, r3
 8003d22:	617b      	str	r3, [r7, #20]
 8003d24:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003d28:	4641      	mov	r1, r8
 8003d2a:	eb12 0a01 	adds.w	sl, r2, r1
 8003d2e:	4649      	mov	r1, r9
 8003d30:	eb43 0b01 	adc.w	fp, r3, r1
 8003d34:	f04f 0200 	mov.w	r2, #0
 8003d38:	f04f 0300 	mov.w	r3, #0
 8003d3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d48:	4692      	mov	sl, r2
 8003d4a:	469b      	mov	fp, r3
 8003d4c:	4643      	mov	r3, r8
 8003d4e:	eb1a 0303 	adds.w	r3, sl, r3
 8003d52:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d54:	464b      	mov	r3, r9
 8003d56:	eb4b 0303 	adc.w	r3, fp, r3
 8003d5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	663b      	str	r3, [r7, #96]	; 0x60
 8003d66:	667a      	str	r2, [r7, #100]	; 0x64
 8003d68:	f04f 0200 	mov.w	r2, #0
 8003d6c:	f04f 0300 	mov.w	r3, #0
 8003d70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d74:	4649      	mov	r1, r9
 8003d76:	008b      	lsls	r3, r1, #2
 8003d78:	4641      	mov	r1, r8
 8003d7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d7e:	4641      	mov	r1, r8
 8003d80:	008a      	lsls	r2, r1, #2
 8003d82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d86:	f7fc fa83 	bl	8000290 <__aeabi_uldivmod>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	4b39      	ldr	r3, [pc, #228]	; (8003e74 <SMARTCARD_SetConfig+0x54c>)
 8003d90:	fba3 1302 	umull	r1, r3, r3, r2
 8003d94:	095b      	lsrs	r3, r3, #5
 8003d96:	2164      	movs	r1, #100	; 0x64
 8003d98:	fb01 f303 	mul.w	r3, r1, r3
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	011b      	lsls	r3, r3, #4
 8003da0:	3332      	adds	r3, #50	; 0x32
 8003da2:	4a34      	ldr	r2, [pc, #208]	; (8003e74 <SMARTCARD_SetConfig+0x54c>)
 8003da4:	fba2 2303 	umull	r2, r3, r2, r3
 8003da8:	095b      	lsrs	r3, r3, #5
 8003daa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dae:	441c      	add	r4, r3
 8003db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003db4:	2200      	movs	r2, #0
 8003db6:	65bb      	str	r3, [r7, #88]	; 0x58
 8003db8:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003dba:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 8003dbe:	4642      	mov	r2, r8
 8003dc0:	464b      	mov	r3, r9
 8003dc2:	1891      	adds	r1, r2, r2
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	415b      	adcs	r3, r3
 8003dc8:	60fb      	str	r3, [r7, #12]
 8003dca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003dce:	4641      	mov	r1, r8
 8003dd0:	1851      	adds	r1, r2, r1
 8003dd2:	6039      	str	r1, [r7, #0]
 8003dd4:	4649      	mov	r1, r9
 8003dd6:	414b      	adcs	r3, r1
 8003dd8:	607b      	str	r3, [r7, #4]
 8003dda:	f04f 0200 	mov.w	r2, #0
 8003dde:	f04f 0300 	mov.w	r3, #0
 8003de2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003de6:	4659      	mov	r1, fp
 8003de8:	00cb      	lsls	r3, r1, #3
 8003dea:	4651      	mov	r1, sl
 8003dec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003df0:	4651      	mov	r1, sl
 8003df2:	00ca      	lsls	r2, r1, #3
 8003df4:	4610      	mov	r0, r2
 8003df6:	4619      	mov	r1, r3
 8003df8:	4603      	mov	r3, r0
 8003dfa:	4642      	mov	r2, r8
 8003dfc:	189b      	adds	r3, r3, r2
 8003dfe:	653b      	str	r3, [r7, #80]	; 0x50
 8003e00:	464b      	mov	r3, r9
 8003e02:	460a      	mov	r2, r1
 8003e04:	eb42 0303 	adc.w	r3, r2, r3
 8003e08:	657b      	str	r3, [r7, #84]	; 0x54
 8003e0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e14:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003e16:	f04f 0200 	mov.w	r2, #0
 8003e1a:	f04f 0300 	mov.w	r3, #0
 8003e1e:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8003e22:	4649      	mov	r1, r9
 8003e24:	008b      	lsls	r3, r1, #2
 8003e26:	4641      	mov	r1, r8
 8003e28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e2c:	4641      	mov	r1, r8
 8003e2e:	008a      	lsls	r2, r1, #2
 8003e30:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003e34:	f7fc fa2c 	bl	8000290 <__aeabi_uldivmod>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	4b0d      	ldr	r3, [pc, #52]	; (8003e74 <SMARTCARD_SetConfig+0x54c>)
 8003e3e:	fba3 1302 	umull	r1, r3, r3, r2
 8003e42:	095b      	lsrs	r3, r3, #5
 8003e44:	2164      	movs	r1, #100	; 0x64
 8003e46:	fb01 f303 	mul.w	r3, r1, r3
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	011b      	lsls	r3, r3, #4
 8003e4e:	3332      	adds	r3, #50	; 0x32
 8003e50:	4a08      	ldr	r2, [pc, #32]	; (8003e74 <SMARTCARD_SetConfig+0x54c>)
 8003e52:	fba2 2303 	umull	r2, r3, r2, r3
 8003e56:	095b      	lsrs	r3, r3, #5
 8003e58:	f003 020f 	and.w	r2, r3, #15
 8003e5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4422      	add	r2, r4
 8003e64:	609a      	str	r2, [r3, #8]
  }
}
 8003e66:	bf00      	nop
 8003e68:	bf00      	nop
 8003e6a:	37e8      	adds	r7, #232	; 0xe8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e72:	bf00      	nop
 8003e74:	51eb851f 	.word	0x51eb851f

08003e78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e03f      	b.n	8003f0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d106      	bne.n	8003ea4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7fc fdba 	bl	8000a18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2224      	movs	r2, #36	; 0x24
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68da      	ldr	r2, [r3, #12]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003eba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f829 	bl	8003f14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	691a      	ldr	r2, [r3, #16]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ed0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	695a      	ldr	r2, [r3, #20]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ee0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68da      	ldr	r2, [r3, #12]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ef0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2220      	movs	r2, #32
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2220      	movs	r2, #32
 8003f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
	...

08003f14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f18:	b0c0      	sub	sp, #256	; 0x100
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f30:	68d9      	ldr	r1, [r3, #12]
 8003f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	ea40 0301 	orr.w	r3, r0, r1
 8003f3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	431a      	orrs	r2, r3
 8003f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f6c:	f021 010c 	bic.w	r1, r1, #12
 8003f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f7a:	430b      	orrs	r3, r1
 8003f7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f8e:	6999      	ldr	r1, [r3, #24]
 8003f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	ea40 0301 	orr.w	r3, r0, r1
 8003f9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	4b8f      	ldr	r3, [pc, #572]	; (80041e0 <UART_SetConfig+0x2cc>)
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d005      	beq.n	8003fb4 <UART_SetConfig+0xa0>
 8003fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	4b8d      	ldr	r3, [pc, #564]	; (80041e4 <UART_SetConfig+0x2d0>)
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d104      	bne.n	8003fbe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003fb4:	f7ff fc24 	bl	8003800 <HAL_RCC_GetPCLK2Freq>
 8003fb8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003fbc:	e003      	b.n	8003fc6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fbe:	f7ff fc0b 	bl	80037d8 <HAL_RCC_GetPCLK1Freq>
 8003fc2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fca:	69db      	ldr	r3, [r3, #28]
 8003fcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fd0:	f040 810c 	bne.w	80041ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003fde:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003fe2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003fe6:	4622      	mov	r2, r4
 8003fe8:	462b      	mov	r3, r5
 8003fea:	1891      	adds	r1, r2, r2
 8003fec:	65b9      	str	r1, [r7, #88]	; 0x58
 8003fee:	415b      	adcs	r3, r3
 8003ff0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ff2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003ff6:	4621      	mov	r1, r4
 8003ff8:	eb12 0801 	adds.w	r8, r2, r1
 8003ffc:	4629      	mov	r1, r5
 8003ffe:	eb43 0901 	adc.w	r9, r3, r1
 8004002:	f04f 0200 	mov.w	r2, #0
 8004006:	f04f 0300 	mov.w	r3, #0
 800400a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800400e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004012:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004016:	4690      	mov	r8, r2
 8004018:	4699      	mov	r9, r3
 800401a:	4623      	mov	r3, r4
 800401c:	eb18 0303 	adds.w	r3, r8, r3
 8004020:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004024:	462b      	mov	r3, r5
 8004026:	eb49 0303 	adc.w	r3, r9, r3
 800402a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800402e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800403a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800403e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004042:	460b      	mov	r3, r1
 8004044:	18db      	adds	r3, r3, r3
 8004046:	653b      	str	r3, [r7, #80]	; 0x50
 8004048:	4613      	mov	r3, r2
 800404a:	eb42 0303 	adc.w	r3, r2, r3
 800404e:	657b      	str	r3, [r7, #84]	; 0x54
 8004050:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004054:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004058:	f7fc f91a 	bl	8000290 <__aeabi_uldivmod>
 800405c:	4602      	mov	r2, r0
 800405e:	460b      	mov	r3, r1
 8004060:	4b61      	ldr	r3, [pc, #388]	; (80041e8 <UART_SetConfig+0x2d4>)
 8004062:	fba3 2302 	umull	r2, r3, r3, r2
 8004066:	095b      	lsrs	r3, r3, #5
 8004068:	011c      	lsls	r4, r3, #4
 800406a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800406e:	2200      	movs	r2, #0
 8004070:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004074:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004078:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800407c:	4642      	mov	r2, r8
 800407e:	464b      	mov	r3, r9
 8004080:	1891      	adds	r1, r2, r2
 8004082:	64b9      	str	r1, [r7, #72]	; 0x48
 8004084:	415b      	adcs	r3, r3
 8004086:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004088:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800408c:	4641      	mov	r1, r8
 800408e:	eb12 0a01 	adds.w	sl, r2, r1
 8004092:	4649      	mov	r1, r9
 8004094:	eb43 0b01 	adc.w	fp, r3, r1
 8004098:	f04f 0200 	mov.w	r2, #0
 800409c:	f04f 0300 	mov.w	r3, #0
 80040a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040ac:	4692      	mov	sl, r2
 80040ae:	469b      	mov	fp, r3
 80040b0:	4643      	mov	r3, r8
 80040b2:	eb1a 0303 	adds.w	r3, sl, r3
 80040b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040ba:	464b      	mov	r3, r9
 80040bc:	eb4b 0303 	adc.w	r3, fp, r3
 80040c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80040c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80040d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80040d8:	460b      	mov	r3, r1
 80040da:	18db      	adds	r3, r3, r3
 80040dc:	643b      	str	r3, [r7, #64]	; 0x40
 80040de:	4613      	mov	r3, r2
 80040e0:	eb42 0303 	adc.w	r3, r2, r3
 80040e4:	647b      	str	r3, [r7, #68]	; 0x44
 80040e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80040ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80040ee:	f7fc f8cf 	bl	8000290 <__aeabi_uldivmod>
 80040f2:	4602      	mov	r2, r0
 80040f4:	460b      	mov	r3, r1
 80040f6:	4611      	mov	r1, r2
 80040f8:	4b3b      	ldr	r3, [pc, #236]	; (80041e8 <UART_SetConfig+0x2d4>)
 80040fa:	fba3 2301 	umull	r2, r3, r3, r1
 80040fe:	095b      	lsrs	r3, r3, #5
 8004100:	2264      	movs	r2, #100	; 0x64
 8004102:	fb02 f303 	mul.w	r3, r2, r3
 8004106:	1acb      	subs	r3, r1, r3
 8004108:	00db      	lsls	r3, r3, #3
 800410a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800410e:	4b36      	ldr	r3, [pc, #216]	; (80041e8 <UART_SetConfig+0x2d4>)
 8004110:	fba3 2302 	umull	r2, r3, r3, r2
 8004114:	095b      	lsrs	r3, r3, #5
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800411c:	441c      	add	r4, r3
 800411e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004122:	2200      	movs	r2, #0
 8004124:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004128:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800412c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004130:	4642      	mov	r2, r8
 8004132:	464b      	mov	r3, r9
 8004134:	1891      	adds	r1, r2, r2
 8004136:	63b9      	str	r1, [r7, #56]	; 0x38
 8004138:	415b      	adcs	r3, r3
 800413a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800413c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004140:	4641      	mov	r1, r8
 8004142:	1851      	adds	r1, r2, r1
 8004144:	6339      	str	r1, [r7, #48]	; 0x30
 8004146:	4649      	mov	r1, r9
 8004148:	414b      	adcs	r3, r1
 800414a:	637b      	str	r3, [r7, #52]	; 0x34
 800414c:	f04f 0200 	mov.w	r2, #0
 8004150:	f04f 0300 	mov.w	r3, #0
 8004154:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004158:	4659      	mov	r1, fp
 800415a:	00cb      	lsls	r3, r1, #3
 800415c:	4651      	mov	r1, sl
 800415e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004162:	4651      	mov	r1, sl
 8004164:	00ca      	lsls	r2, r1, #3
 8004166:	4610      	mov	r0, r2
 8004168:	4619      	mov	r1, r3
 800416a:	4603      	mov	r3, r0
 800416c:	4642      	mov	r2, r8
 800416e:	189b      	adds	r3, r3, r2
 8004170:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004174:	464b      	mov	r3, r9
 8004176:	460a      	mov	r2, r1
 8004178:	eb42 0303 	adc.w	r3, r2, r3
 800417c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800418c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004190:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004194:	460b      	mov	r3, r1
 8004196:	18db      	adds	r3, r3, r3
 8004198:	62bb      	str	r3, [r7, #40]	; 0x28
 800419a:	4613      	mov	r3, r2
 800419c:	eb42 0303 	adc.w	r3, r2, r3
 80041a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80041aa:	f7fc f871 	bl	8000290 <__aeabi_uldivmod>
 80041ae:	4602      	mov	r2, r0
 80041b0:	460b      	mov	r3, r1
 80041b2:	4b0d      	ldr	r3, [pc, #52]	; (80041e8 <UART_SetConfig+0x2d4>)
 80041b4:	fba3 1302 	umull	r1, r3, r3, r2
 80041b8:	095b      	lsrs	r3, r3, #5
 80041ba:	2164      	movs	r1, #100	; 0x64
 80041bc:	fb01 f303 	mul.w	r3, r1, r3
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	3332      	adds	r3, #50	; 0x32
 80041c6:	4a08      	ldr	r2, [pc, #32]	; (80041e8 <UART_SetConfig+0x2d4>)
 80041c8:	fba2 2303 	umull	r2, r3, r2, r3
 80041cc:	095b      	lsrs	r3, r3, #5
 80041ce:	f003 0207 	and.w	r2, r3, #7
 80041d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4422      	add	r2, r4
 80041da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041dc:	e105      	b.n	80043ea <UART_SetConfig+0x4d6>
 80041de:	bf00      	nop
 80041e0:	40011000 	.word	0x40011000
 80041e4:	40011400 	.word	0x40011400
 80041e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041f0:	2200      	movs	r2, #0
 80041f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80041f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80041fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80041fe:	4642      	mov	r2, r8
 8004200:	464b      	mov	r3, r9
 8004202:	1891      	adds	r1, r2, r2
 8004204:	6239      	str	r1, [r7, #32]
 8004206:	415b      	adcs	r3, r3
 8004208:	627b      	str	r3, [r7, #36]	; 0x24
 800420a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800420e:	4641      	mov	r1, r8
 8004210:	1854      	adds	r4, r2, r1
 8004212:	4649      	mov	r1, r9
 8004214:	eb43 0501 	adc.w	r5, r3, r1
 8004218:	f04f 0200 	mov.w	r2, #0
 800421c:	f04f 0300 	mov.w	r3, #0
 8004220:	00eb      	lsls	r3, r5, #3
 8004222:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004226:	00e2      	lsls	r2, r4, #3
 8004228:	4614      	mov	r4, r2
 800422a:	461d      	mov	r5, r3
 800422c:	4643      	mov	r3, r8
 800422e:	18e3      	adds	r3, r4, r3
 8004230:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004234:	464b      	mov	r3, r9
 8004236:	eb45 0303 	adc.w	r3, r5, r3
 800423a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800423e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800424a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800424e:	f04f 0200 	mov.w	r2, #0
 8004252:	f04f 0300 	mov.w	r3, #0
 8004256:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800425a:	4629      	mov	r1, r5
 800425c:	008b      	lsls	r3, r1, #2
 800425e:	4621      	mov	r1, r4
 8004260:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004264:	4621      	mov	r1, r4
 8004266:	008a      	lsls	r2, r1, #2
 8004268:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800426c:	f7fc f810 	bl	8000290 <__aeabi_uldivmod>
 8004270:	4602      	mov	r2, r0
 8004272:	460b      	mov	r3, r1
 8004274:	4b60      	ldr	r3, [pc, #384]	; (80043f8 <UART_SetConfig+0x4e4>)
 8004276:	fba3 2302 	umull	r2, r3, r3, r2
 800427a:	095b      	lsrs	r3, r3, #5
 800427c:	011c      	lsls	r4, r3, #4
 800427e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004282:	2200      	movs	r2, #0
 8004284:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004288:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800428c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004290:	4642      	mov	r2, r8
 8004292:	464b      	mov	r3, r9
 8004294:	1891      	adds	r1, r2, r2
 8004296:	61b9      	str	r1, [r7, #24]
 8004298:	415b      	adcs	r3, r3
 800429a:	61fb      	str	r3, [r7, #28]
 800429c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042a0:	4641      	mov	r1, r8
 80042a2:	1851      	adds	r1, r2, r1
 80042a4:	6139      	str	r1, [r7, #16]
 80042a6:	4649      	mov	r1, r9
 80042a8:	414b      	adcs	r3, r1
 80042aa:	617b      	str	r3, [r7, #20]
 80042ac:	f04f 0200 	mov.w	r2, #0
 80042b0:	f04f 0300 	mov.w	r3, #0
 80042b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042b8:	4659      	mov	r1, fp
 80042ba:	00cb      	lsls	r3, r1, #3
 80042bc:	4651      	mov	r1, sl
 80042be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042c2:	4651      	mov	r1, sl
 80042c4:	00ca      	lsls	r2, r1, #3
 80042c6:	4610      	mov	r0, r2
 80042c8:	4619      	mov	r1, r3
 80042ca:	4603      	mov	r3, r0
 80042cc:	4642      	mov	r2, r8
 80042ce:	189b      	adds	r3, r3, r2
 80042d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042d4:	464b      	mov	r3, r9
 80042d6:	460a      	mov	r2, r1
 80042d8:	eb42 0303 	adc.w	r3, r2, r3
 80042dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80042e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80042ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80042ec:	f04f 0200 	mov.w	r2, #0
 80042f0:	f04f 0300 	mov.w	r3, #0
 80042f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80042f8:	4649      	mov	r1, r9
 80042fa:	008b      	lsls	r3, r1, #2
 80042fc:	4641      	mov	r1, r8
 80042fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004302:	4641      	mov	r1, r8
 8004304:	008a      	lsls	r2, r1, #2
 8004306:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800430a:	f7fb ffc1 	bl	8000290 <__aeabi_uldivmod>
 800430e:	4602      	mov	r2, r0
 8004310:	460b      	mov	r3, r1
 8004312:	4b39      	ldr	r3, [pc, #228]	; (80043f8 <UART_SetConfig+0x4e4>)
 8004314:	fba3 1302 	umull	r1, r3, r3, r2
 8004318:	095b      	lsrs	r3, r3, #5
 800431a:	2164      	movs	r1, #100	; 0x64
 800431c:	fb01 f303 	mul.w	r3, r1, r3
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	011b      	lsls	r3, r3, #4
 8004324:	3332      	adds	r3, #50	; 0x32
 8004326:	4a34      	ldr	r2, [pc, #208]	; (80043f8 <UART_SetConfig+0x4e4>)
 8004328:	fba2 2303 	umull	r2, r3, r2, r3
 800432c:	095b      	lsrs	r3, r3, #5
 800432e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004332:	441c      	add	r4, r3
 8004334:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004338:	2200      	movs	r2, #0
 800433a:	673b      	str	r3, [r7, #112]	; 0x70
 800433c:	677a      	str	r2, [r7, #116]	; 0x74
 800433e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004342:	4642      	mov	r2, r8
 8004344:	464b      	mov	r3, r9
 8004346:	1891      	adds	r1, r2, r2
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	415b      	adcs	r3, r3
 800434c:	60fb      	str	r3, [r7, #12]
 800434e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004352:	4641      	mov	r1, r8
 8004354:	1851      	adds	r1, r2, r1
 8004356:	6039      	str	r1, [r7, #0]
 8004358:	4649      	mov	r1, r9
 800435a:	414b      	adcs	r3, r1
 800435c:	607b      	str	r3, [r7, #4]
 800435e:	f04f 0200 	mov.w	r2, #0
 8004362:	f04f 0300 	mov.w	r3, #0
 8004366:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800436a:	4659      	mov	r1, fp
 800436c:	00cb      	lsls	r3, r1, #3
 800436e:	4651      	mov	r1, sl
 8004370:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004374:	4651      	mov	r1, sl
 8004376:	00ca      	lsls	r2, r1, #3
 8004378:	4610      	mov	r0, r2
 800437a:	4619      	mov	r1, r3
 800437c:	4603      	mov	r3, r0
 800437e:	4642      	mov	r2, r8
 8004380:	189b      	adds	r3, r3, r2
 8004382:	66bb      	str	r3, [r7, #104]	; 0x68
 8004384:	464b      	mov	r3, r9
 8004386:	460a      	mov	r2, r1
 8004388:	eb42 0303 	adc.w	r3, r2, r3
 800438c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800438e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	663b      	str	r3, [r7, #96]	; 0x60
 8004398:	667a      	str	r2, [r7, #100]	; 0x64
 800439a:	f04f 0200 	mov.w	r2, #0
 800439e:	f04f 0300 	mov.w	r3, #0
 80043a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80043a6:	4649      	mov	r1, r9
 80043a8:	008b      	lsls	r3, r1, #2
 80043aa:	4641      	mov	r1, r8
 80043ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043b0:	4641      	mov	r1, r8
 80043b2:	008a      	lsls	r2, r1, #2
 80043b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80043b8:	f7fb ff6a 	bl	8000290 <__aeabi_uldivmod>
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	4b0d      	ldr	r3, [pc, #52]	; (80043f8 <UART_SetConfig+0x4e4>)
 80043c2:	fba3 1302 	umull	r1, r3, r3, r2
 80043c6:	095b      	lsrs	r3, r3, #5
 80043c8:	2164      	movs	r1, #100	; 0x64
 80043ca:	fb01 f303 	mul.w	r3, r1, r3
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	3332      	adds	r3, #50	; 0x32
 80043d4:	4a08      	ldr	r2, [pc, #32]	; (80043f8 <UART_SetConfig+0x4e4>)
 80043d6:	fba2 2303 	umull	r2, r3, r2, r3
 80043da:	095b      	lsrs	r3, r3, #5
 80043dc:	f003 020f 	and.w	r2, r3, #15
 80043e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4422      	add	r2, r4
 80043e8:	609a      	str	r2, [r3, #8]
}
 80043ea:	bf00      	nop
 80043ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80043f0:	46bd      	mov	sp, r7
 80043f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043f6:	bf00      	nop
 80043f8:	51eb851f 	.word	0x51eb851f

080043fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043fc:	b084      	sub	sp, #16
 80043fe:	b580      	push	{r7, lr}
 8004400:	b084      	sub	sp, #16
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
 8004406:	f107 001c 	add.w	r0, r7, #28
 800440a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800440e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004410:	2b01      	cmp	r3, #1
 8004412:	d122      	bne.n	800445a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004418:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004428:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800443c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800443e:	2b01      	cmp	r3, #1
 8004440:	d105      	bne.n	800444e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 faa2 	bl	8004998 <USB_CoreReset>
 8004454:	4603      	mov	r3, r0
 8004456:	73fb      	strb	r3, [r7, #15]
 8004458:	e01a      	b.n	8004490 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 fa96 	bl	8004998 <USB_CoreReset>
 800446c:	4603      	mov	r3, r0
 800446e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004472:	2b00      	cmp	r3, #0
 8004474:	d106      	bne.n	8004484 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	639a      	str	r2, [r3, #56]	; 0x38
 8004482:	e005      	b.n	8004490 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004488:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004492:	2b01      	cmp	r3, #1
 8004494:	d10b      	bne.n	80044ae <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f043 0206 	orr.w	r2, r3, #6
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f043 0220 	orr.w	r2, r3, #32
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80044ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044ba:	b004      	add	sp, #16
 80044bc:	4770      	bx	lr

080044be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044be:	b480      	push	{r7}
 80044c0:	b083      	sub	sp, #12
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f023 0201 	bic.w	r2, r3, #1
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	460b      	mov	r3, r1
 80044ea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80044fc:	78fb      	ldrb	r3, [r7, #3]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d115      	bne.n	800452e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800450e:	2001      	movs	r0, #1
 8004510:	f7fc fe2a 	bl	8001168 <HAL_Delay>
      ms++;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	3301      	adds	r3, #1
 8004518:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 fa2e 	bl	800497c <USB_GetMode>
 8004520:	4603      	mov	r3, r0
 8004522:	2b01      	cmp	r3, #1
 8004524:	d01e      	beq.n	8004564 <USB_SetCurrentMode+0x84>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2b31      	cmp	r3, #49	; 0x31
 800452a:	d9f0      	bls.n	800450e <USB_SetCurrentMode+0x2e>
 800452c:	e01a      	b.n	8004564 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800452e:	78fb      	ldrb	r3, [r7, #3]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d115      	bne.n	8004560 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004540:	2001      	movs	r0, #1
 8004542:	f7fc fe11 	bl	8001168 <HAL_Delay>
      ms++;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	3301      	adds	r3, #1
 800454a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 fa15 	bl	800497c <USB_GetMode>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d005      	beq.n	8004564 <USB_SetCurrentMode+0x84>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2b31      	cmp	r3, #49	; 0x31
 800455c:	d9f0      	bls.n	8004540 <USB_SetCurrentMode+0x60>
 800455e:	e001      	b.n	8004564 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e005      	b.n	8004570 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2b32      	cmp	r3, #50	; 0x32
 8004568:	d101      	bne.n	800456e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e000      	b.n	8004570 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004578:	b084      	sub	sp, #16
 800457a:	b580      	push	{r7, lr}
 800457c:	b086      	sub	sp, #24
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
 8004582:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004586:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004592:	2300      	movs	r3, #0
 8004594:	613b      	str	r3, [r7, #16]
 8004596:	e009      	b.n	80045ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	3340      	adds	r3, #64	; 0x40
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4413      	add	r3, r2
 80045a2:	2200      	movs	r2, #0
 80045a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	3301      	adds	r3, #1
 80045aa:	613b      	str	r3, [r7, #16]
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	2b0e      	cmp	r3, #14
 80045b0:	d9f2      	bls.n	8004598 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80045b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d11c      	bne.n	80045f2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045c6:	f043 0302 	orr.w	r3, r3, #2
 80045ca:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045dc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	639a      	str	r2, [r3, #56]	; 0x38
 80045f0:	e00b      	b.n	800460a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004602:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004610:	461a      	mov	r2, r3
 8004612:	2300      	movs	r3, #0
 8004614:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800461c:	4619      	mov	r1, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004624:	461a      	mov	r2, r3
 8004626:	680b      	ldr	r3, [r1, #0]
 8004628:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800462a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462c:	2b01      	cmp	r3, #1
 800462e:	d10c      	bne.n	800464a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004632:	2b00      	cmp	r3, #0
 8004634:	d104      	bne.n	8004640 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004636:	2100      	movs	r1, #0
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 f965 	bl	8004908 <USB_SetDevSpeed>
 800463e:	e008      	b.n	8004652 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004640:	2101      	movs	r1, #1
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f960 	bl	8004908 <USB_SetDevSpeed>
 8004648:	e003      	b.n	8004652 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800464a:	2103      	movs	r1, #3
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 f95b 	bl	8004908 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004652:	2110      	movs	r1, #16
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f8f3 	bl	8004840 <USB_FlushTxFifo>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d001      	beq.n	8004664 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 f91f 	bl	80048a8 <USB_FlushRxFifo>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800467a:	461a      	mov	r2, r3
 800467c:	2300      	movs	r3, #0
 800467e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004686:	461a      	mov	r2, r3
 8004688:	2300      	movs	r3, #0
 800468a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004692:	461a      	mov	r2, r3
 8004694:	2300      	movs	r3, #0
 8004696:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004698:	2300      	movs	r3, #0
 800469a:	613b      	str	r3, [r7, #16]
 800469c:	e043      	b.n	8004726 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	015a      	lsls	r2, r3, #5
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046b4:	d118      	bne.n	80046e8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10a      	bne.n	80046d2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	015a      	lsls	r2, r3, #5
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4413      	add	r3, r2
 80046c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c8:	461a      	mov	r2, r3
 80046ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80046ce:	6013      	str	r3, [r2, #0]
 80046d0:	e013      	b.n	80046fa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	015a      	lsls	r2, r3, #5
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	4413      	add	r3, r2
 80046da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046de:	461a      	mov	r2, r3
 80046e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80046e4:	6013      	str	r3, [r2, #0]
 80046e6:	e008      	b.n	80046fa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f4:	461a      	mov	r2, r3
 80046f6:	2300      	movs	r3, #0
 80046f8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	015a      	lsls	r2, r3, #5
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	4413      	add	r3, r2
 8004702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004706:	461a      	mov	r2, r3
 8004708:	2300      	movs	r3, #0
 800470a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	015a      	lsls	r2, r3, #5
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4413      	add	r3, r2
 8004714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004718:	461a      	mov	r2, r3
 800471a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800471e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	3301      	adds	r3, #1
 8004724:	613b      	str	r3, [r7, #16]
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	429a      	cmp	r2, r3
 800472c:	d3b7      	bcc.n	800469e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800472e:	2300      	movs	r3, #0
 8004730:	613b      	str	r3, [r7, #16]
 8004732:	e043      	b.n	80047bc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4413      	add	r3, r2
 800473c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004746:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800474a:	d118      	bne.n	800477e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10a      	bne.n	8004768 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	015a      	lsls	r2, r3, #5
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	4413      	add	r3, r2
 800475a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800475e:	461a      	mov	r2, r3
 8004760:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	e013      	b.n	8004790 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4413      	add	r3, r2
 8004770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004774:	461a      	mov	r2, r3
 8004776:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800477a:	6013      	str	r3, [r2, #0]
 800477c:	e008      	b.n	8004790 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4413      	add	r3, r2
 8004786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800478a:	461a      	mov	r2, r3
 800478c:	2300      	movs	r3, #0
 800478e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4413      	add	r3, r2
 8004798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800479c:	461a      	mov	r2, r3
 800479e:	2300      	movs	r3, #0
 80047a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	015a      	lsls	r2, r3, #5
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	4413      	add	r3, r2
 80047aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ae:	461a      	mov	r2, r3
 80047b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	3301      	adds	r3, #1
 80047ba:	613b      	str	r3, [r7, #16]
 80047bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047be:	693a      	ldr	r2, [r7, #16]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d3b7      	bcc.n	8004734 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047d6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80047e4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80047e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d105      	bne.n	80047f8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	f043 0210 	orr.w	r2, r3, #16
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	699a      	ldr	r2, [r3, #24]
 80047fc:	4b0f      	ldr	r3, [pc, #60]	; (800483c <USB_DevInit+0x2c4>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004806:	2b00      	cmp	r3, #0
 8004808:	d005      	beq.n	8004816 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	f043 0208 	orr.w	r2, r3, #8
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004818:	2b01      	cmp	r3, #1
 800481a:	d107      	bne.n	800482c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004824:	f043 0304 	orr.w	r3, r3, #4
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800482c:	7dfb      	ldrb	r3, [r7, #23]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3718      	adds	r7, #24
 8004832:	46bd      	mov	sp, r7
 8004834:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004838:	b004      	add	sp, #16
 800483a:	4770      	bx	lr
 800483c:	803c3800 	.word	0x803c3800

08004840 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800484a:	2300      	movs	r3, #0
 800484c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	3301      	adds	r3, #1
 8004852:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	4a13      	ldr	r2, [pc, #76]	; (80048a4 <USB_FlushTxFifo+0x64>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d901      	bls.n	8004860 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e01b      	b.n	8004898 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	2b00      	cmp	r3, #0
 8004866:	daf2      	bge.n	800484e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004868:	2300      	movs	r3, #0
 800486a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	019b      	lsls	r3, r3, #6
 8004870:	f043 0220 	orr.w	r2, r3, #32
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	3301      	adds	r3, #1
 800487c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	4a08      	ldr	r2, [pc, #32]	; (80048a4 <USB_FlushTxFifo+0x64>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d901      	bls.n	800488a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e006      	b.n	8004898 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	f003 0320 	and.w	r3, r3, #32
 8004892:	2b20      	cmp	r3, #32
 8004894:	d0f0      	beq.n	8004878 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3714      	adds	r7, #20
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr
 80048a4:	00030d40 	.word	0x00030d40

080048a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	3301      	adds	r3, #1
 80048b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	4a11      	ldr	r2, [pc, #68]	; (8004904 <USB_FlushRxFifo+0x5c>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d901      	bls.n	80048c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e018      	b.n	80048f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	daf2      	bge.n	80048b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80048ce:	2300      	movs	r3, #0
 80048d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2210      	movs	r2, #16
 80048d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	3301      	adds	r3, #1
 80048dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	4a08      	ldr	r2, [pc, #32]	; (8004904 <USB_FlushRxFifo+0x5c>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d901      	bls.n	80048ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e006      	b.n	80048f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	f003 0310 	and.w	r3, r3, #16
 80048f2:	2b10      	cmp	r3, #16
 80048f4:	d0f0      	beq.n	80048d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3714      	adds	r7, #20
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr
 8004904:	00030d40 	.word	0x00030d40

08004908 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	460b      	mov	r3, r1
 8004912:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	78fb      	ldrb	r3, [r7, #3]
 8004922:	68f9      	ldr	r1, [r7, #12]
 8004924:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004928:	4313      	orrs	r3, r2
 800492a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800493a:	b480      	push	{r7}
 800493c:	b085      	sub	sp, #20
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004954:	f023 0303 	bic.w	r3, r3, #3
 8004958:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004968:	f043 0302 	orr.w	r3, r3, #2
 800496c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	695b      	ldr	r3, [r3, #20]
 8004988:	f003 0301 	and.w	r3, r3, #1
}
 800498c:	4618      	mov	r0, r3
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049a0:	2300      	movs	r3, #0
 80049a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	3301      	adds	r3, #1
 80049a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	4a13      	ldr	r2, [pc, #76]	; (80049fc <USB_CoreReset+0x64>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d901      	bls.n	80049b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e01b      	b.n	80049ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	daf2      	bge.n	80049a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80049be:	2300      	movs	r3, #0
 80049c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	f043 0201 	orr.w	r2, r3, #1
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	3301      	adds	r3, #1
 80049d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	4a09      	ldr	r2, [pc, #36]	; (80049fc <USB_CoreReset+0x64>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d901      	bls.n	80049e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e006      	b.n	80049ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d0f0      	beq.n	80049ce <USB_CoreReset+0x36>

  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3714      	adds	r7, #20
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	00030d40 	.word	0x00030d40

08004a00 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004a06:	2100      	movs	r1, #0
 8004a08:	2000      	movs	r0, #0
 8004a0a:	f004 fc6f 	bl	80092ec <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8004a0e:	4b23      	ldr	r3, [pc, #140]	; (8004a9c <MX_LWIP_Init+0x9c>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8004a14:	4b22      	ldr	r3, [pc, #136]	; (8004aa0 <MX_LWIP_Init+0xa0>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8004a1a:	4b22      	ldr	r3, [pc, #136]	; (8004aa4 <MX_LWIP_Init+0xa4>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004a20:	4b21      	ldr	r3, [pc, #132]	; (8004aa8 <MX_LWIP_Init+0xa8>)
 8004a22:	9302      	str	r3, [sp, #8]
 8004a24:	4b21      	ldr	r3, [pc, #132]	; (8004aac <MX_LWIP_Init+0xac>)
 8004a26:	9301      	str	r3, [sp, #4]
 8004a28:	2300      	movs	r3, #0
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	4b1d      	ldr	r3, [pc, #116]	; (8004aa4 <MX_LWIP_Init+0xa4>)
 8004a2e:	4a1c      	ldr	r2, [pc, #112]	; (8004aa0 <MX_LWIP_Init+0xa0>)
 8004a30:	491a      	ldr	r1, [pc, #104]	; (8004a9c <MX_LWIP_Init+0x9c>)
 8004a32:	481f      	ldr	r0, [pc, #124]	; (8004ab0 <MX_LWIP_Init+0xb0>)
 8004a34:	f005 fa24 	bl	8009e80 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004a38:	481d      	ldr	r0, [pc, #116]	; (8004ab0 <MX_LWIP_Init+0xb0>)
 8004a3a:	f005 fbdb 	bl	800a1f4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004a3e:	4b1c      	ldr	r3, [pc, #112]	; (8004ab0 <MX_LWIP_Init+0xb0>)
 8004a40:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004a44:	089b      	lsrs	r3, r3, #2
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d003      	beq.n	8004a58 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004a50:	4817      	ldr	r0, [pc, #92]	; (8004ab0 <MX_LWIP_Init+0xb0>)
 8004a52:	f005 fbdf 	bl	800a214 <netif_set_up>
 8004a56:	e002      	b.n	8004a5e <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004a58:	4815      	ldr	r0, [pc, #84]	; (8004ab0 <MX_LWIP_Init+0xb0>)
 8004a5a:	f005 fc47 	bl	800a2ec <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004a5e:	4915      	ldr	r1, [pc, #84]	; (8004ab4 <MX_LWIP_Init+0xb4>)
 8004a60:	4813      	ldr	r0, [pc, #76]	; (8004ab0 <MX_LWIP_Init+0xb0>)
 8004a62:	f005 fcdd 	bl	800a420 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004a66:	2224      	movs	r2, #36	; 0x24
 8004a68:	2100      	movs	r1, #0
 8004a6a:	4813      	ldr	r0, [pc, #76]	; (8004ab8 <MX_LWIP_Init+0xb8>)
 8004a6c:	f010 fd70 	bl	8015550 <memset>
  attributes.name = "EthLink";
 8004a70:	4b11      	ldr	r3, [pc, #68]	; (8004ab8 <MX_LWIP_Init+0xb8>)
 8004a72:	4a12      	ldr	r2, [pc, #72]	; (8004abc <MX_LWIP_Init+0xbc>)
 8004a74:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004a76:	4b10      	ldr	r3, [pc, #64]	; (8004ab8 <MX_LWIP_Init+0xb8>)
 8004a78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a7c:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8004a7e:	4b0e      	ldr	r3, [pc, #56]	; (8004ab8 <MX_LWIP_Init+0xb8>)
 8004a80:	2210      	movs	r2, #16
 8004a82:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8004a84:	4a0c      	ldr	r2, [pc, #48]	; (8004ab8 <MX_LWIP_Init+0xb8>)
 8004a86:	490a      	ldr	r1, [pc, #40]	; (8004ab0 <MX_LWIP_Init+0xb0>)
 8004a88:	480d      	ldr	r0, [pc, #52]	; (8004ac0 <MX_LWIP_Init+0xc0>)
 8004a8a:	f000 fd7c 	bl	8005586 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8004a8e:	4808      	ldr	r0, [pc, #32]	; (8004ab0 <MX_LWIP_Init+0xb0>)
 8004a90:	f00c fe2c 	bl	80116ec <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004a94:	bf00      	nop
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	20000698 	.word	0x20000698
 8004aa0:	2000069c 	.word	0x2000069c
 8004aa4:	200006a0 	.word	0x200006a0
 8004aa8:	08009229 	.word	0x08009229
 8004aac:	08004f69 	.word	0x08004f69
 8004ab0:	20000660 	.word	0x20000660
 8004ab4:	08004ac5 	.word	0x08004ac5
 8004ab8:	200006a4 	.word	0x200006a4
 8004abc:	08016624 	.word	0x08016624
 8004ac0:	0800524d 	.word	0x0800524d

08004ac4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8004ae0:	4b04      	ldr	r3, [pc, #16]	; (8004af4 <HAL_ETH_RxCpltCallback+0x1c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f000 ffe5 	bl	8005ab4 <osSemaphoreRelease>
}
 8004aea:	bf00      	nop
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	20005194 	.word	0x20005194

08004af8 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8004b00:	4b04      	ldr	r3, [pc, #16]	; (8004b14 <HAL_ETH_TxCpltCallback+0x1c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4618      	mov	r0, r3
 8004b06:	f000 ffd5 	bl	8005ab4 <osSemaphoreRelease>
}
 8004b0a:	bf00      	nop
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	20005198 	.word	0x20005198

08004b18 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f7fd faf5 	bl	8002110 <HAL_ETH_GetDMAError>
 8004b26:	4603      	mov	r3, r0
 8004b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b2c:	2b80      	cmp	r3, #128	; 0x80
 8004b2e:	d104      	bne.n	8004b3a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8004b30:	4b04      	ldr	r3, [pc, #16]	; (8004b44 <HAL_ETH_ErrorCallback+0x2c>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4618      	mov	r0, r3
 8004b36:	f000 ffbd 	bl	8005ab4 <osSemaphoreRelease>
  }
}
 8004b3a:	bf00      	nop
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	20005194 	.word	0x20005194

08004b48 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b0aa      	sub	sp, #168	; 0xa8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004b50:	2300      	movs	r3, #0
 8004b52:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8004b56:	2300      	movs	r3, #0
 8004b58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8004b62:	f107 0310 	add.w	r3, r7, #16
 8004b66:	2264      	movs	r2, #100	; 0x64
 8004b68:	2100      	movs	r1, #0
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f010 fcf0 	bl	8015550 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004b70:	4b85      	ldr	r3, [pc, #532]	; (8004d88 <low_level_init+0x240>)
 8004b72:	4a86      	ldr	r2, [pc, #536]	; (8004d8c <low_level_init+0x244>)
 8004b74:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004b76:	2300      	movs	r3, #0
 8004b78:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004b7a:	2380      	movs	r3, #128	; 0x80
 8004b7c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004b7e:	23e1      	movs	r3, #225	; 0xe1
 8004b80:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004b82:	2300      	movs	r3, #0
 8004b84:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004b86:	2300      	movs	r3, #0
 8004b88:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004b8e:	4a7e      	ldr	r2, [pc, #504]	; (8004d88 <low_level_init+0x240>)
 8004b90:	f107 0308 	add.w	r3, r7, #8
 8004b94:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004b96:	4b7c      	ldr	r3, [pc, #496]	; (8004d88 <low_level_init+0x240>)
 8004b98:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004b9c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004b9e:	4b7a      	ldr	r3, [pc, #488]	; (8004d88 <low_level_init+0x240>)
 8004ba0:	4a7b      	ldr	r2, [pc, #492]	; (8004d90 <low_level_init+0x248>)
 8004ba2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004ba4:	4b78      	ldr	r3, [pc, #480]	; (8004d88 <low_level_init+0x240>)
 8004ba6:	4a7b      	ldr	r2, [pc, #492]	; (8004d94 <low_level_init+0x24c>)
 8004ba8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004baa:	4b77      	ldr	r3, [pc, #476]	; (8004d88 <low_level_init+0x240>)
 8004bac:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004bb0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004bb2:	4875      	ldr	r0, [pc, #468]	; (8004d88 <low_level_init+0x240>)
 8004bb4:	f7fc fc0e 	bl	80013d4 <HAL_ETH_Init>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004bbe:	2238      	movs	r2, #56	; 0x38
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	4875      	ldr	r0, [pc, #468]	; (8004d98 <low_level_init+0x250>)
 8004bc4:	f010 fcc4 	bl	8015550 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004bc8:	4b73      	ldr	r3, [pc, #460]	; (8004d98 <low_level_init+0x250>)
 8004bca:	2221      	movs	r2, #33	; 0x21
 8004bcc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004bce:	4b72      	ldr	r3, [pc, #456]	; (8004d98 <low_level_init+0x250>)
 8004bd0:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8004bd4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004bd6:	4b70      	ldr	r3, [pc, #448]	; (8004d98 <low_level_init+0x250>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004bdc:	486f      	ldr	r0, [pc, #444]	; (8004d9c <low_level_init+0x254>)
 8004bde:	f005 f809 	bl	8009bf4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2206      	movs	r2, #6
 8004be6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004bea:	4b67      	ldr	r3, [pc, #412]	; (8004d88 <low_level_init+0x240>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	781a      	ldrb	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004bf6:	4b64      	ldr	r3, [pc, #400]	; (8004d88 <low_level_init+0x240>)
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	785a      	ldrb	r2, [r3, #1]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004c02:	4b61      	ldr	r3, [pc, #388]	; (8004d88 <low_level_init+0x240>)
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	789a      	ldrb	r2, [r3, #2]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004c0e:	4b5e      	ldr	r3, [pc, #376]	; (8004d88 <low_level_init+0x240>)
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	78da      	ldrb	r2, [r3, #3]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004c1a:	4b5b      	ldr	r3, [pc, #364]	; (8004d88 <low_level_init+0x240>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	791a      	ldrb	r2, [r3, #4]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004c26:	4b58      	ldr	r3, [pc, #352]	; (8004d88 <low_level_init+0x240>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	795a      	ldrb	r2, [r3, #5]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004c38:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004c40:	f043 030a 	orr.w	r3, r3, #10
 8004c44:	b2da      	uxtb	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	2101      	movs	r1, #1
 8004c50:	2001      	movs	r0, #1
 8004c52:	f000 fe53 	bl	80058fc <osSemaphoreNew>
 8004c56:	4603      	mov	r3, r0
 8004c58:	4a51      	ldr	r2, [pc, #324]	; (8004da0 <low_level_init+0x258>)
 8004c5a:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	2101      	movs	r1, #1
 8004c60:	2001      	movs	r0, #1
 8004c62:	f000 fe4b 	bl	80058fc <osSemaphoreNew>
 8004c66:	4603      	mov	r3, r0
 8004c68:	4a4e      	ldr	r2, [pc, #312]	; (8004da4 <low_level_init+0x25c>)
 8004c6a:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004c6c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004c70:	2224      	movs	r2, #36	; 0x24
 8004c72:	2100      	movs	r1, #0
 8004c74:	4618      	mov	r0, r3
 8004c76:	f010 fc6b 	bl	8015550 <memset>
  attributes.name = "EthIf";
 8004c7a:	4b4b      	ldr	r3, [pc, #300]	; (8004da8 <low_level_init+0x260>)
 8004c7c:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004c7e:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8004c82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 8004c86:	2330      	movs	r3, #48	; 0x30
 8004c88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8004c8c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004c90:	461a      	mov	r2, r3
 8004c92:	6879      	ldr	r1, [r7, #4]
 8004c94:	4845      	ldr	r0, [pc, #276]	; (8004dac <low_level_init+0x264>)
 8004c96:	f000 fc76 	bl	8005586 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004c9a:	4945      	ldr	r1, [pc, #276]	; (8004db0 <low_level_init+0x268>)
 8004c9c:	4845      	ldr	r0, [pc, #276]	; (8004db4 <low_level_init+0x26c>)
 8004c9e:	f7fc f890 	bl	8000dc2 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8004ca2:	4844      	ldr	r0, [pc, #272]	; (8004db4 <low_level_init+0x26c>)
 8004ca4:	f7fc f8bf 	bl	8000e26 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8004ca8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d164      	bne.n	8004d7a <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004cb0:	4840      	ldr	r0, [pc, #256]	; (8004db4 <low_level_init+0x26c>)
 8004cb2:	f7fc f960 	bl	8000f76 <LAN8742_GetLinkState>
 8004cb6:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8004cba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	dc06      	bgt.n	8004cd0 <low_level_init+0x188>
    {
      netif_set_link_down(netif);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f005 fb7c 	bl	800a3c0 <netif_set_link_down>
      netif_set_down(netif);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f005 fb0f 	bl	800a2ec <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004cce:	e056      	b.n	8004d7e <low_level_init+0x236>
      switch (PHYLinkState)
 8004cd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004cd4:	3b02      	subs	r3, #2
 8004cd6:	2b03      	cmp	r3, #3
 8004cd8:	d82a      	bhi.n	8004d30 <low_level_init+0x1e8>
 8004cda:	a201      	add	r2, pc, #4	; (adr r2, 8004ce0 <low_level_init+0x198>)
 8004cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce0:	08004cf1 	.word	0x08004cf1
 8004ce4:	08004d03 	.word	0x08004d03
 8004ce8:	08004d13 	.word	0x08004d13
 8004cec:	08004d23 	.word	0x08004d23
        duplex = ETH_FULLDUPLEX_MODE;
 8004cf0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004cf4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8004cf8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004cfc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8004d00:	e01f      	b.n	8004d42 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8004d02:	2300      	movs	r3, #0
 8004d04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8004d08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8004d10:	e017      	b.n	8004d42 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8004d12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004d16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8004d20:	e00f      	b.n	8004d42 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8004d22:	2300      	movs	r3, #0
 8004d24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8004d2e:	e008      	b.n	8004d42 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8004d30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004d34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8004d38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d3c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8004d40:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004d42:	f107 0310 	add.w	r3, r7, #16
 8004d46:	4619      	mov	r1, r3
 8004d48:	480f      	ldr	r0, [pc, #60]	; (8004d88 <low_level_init+0x240>)
 8004d4a:	f7fd f887 	bl	8001e5c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8004d4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004d52:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 8004d54:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004d5a:	f107 0310 	add.w	r3, r7, #16
 8004d5e:	4619      	mov	r1, r3
 8004d60:	4809      	ldr	r0, [pc, #36]	; (8004d88 <low_level_init+0x240>)
 8004d62:	f7fd f965 	bl	8002030 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8004d66:	4808      	ldr	r0, [pc, #32]	; (8004d88 <low_level_init+0x240>)
 8004d68:	f7fc fc11 	bl	800158e <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f005 fa51 	bl	800a214 <netif_set_up>
    netif_set_link_up(netif);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f005 faec 	bl	800a350 <netif_set_link_up>
}
 8004d78:	e001      	b.n	8004d7e <low_level_init+0x236>
    Error_Handler();
 8004d7a:	f7fb fdd3 	bl	8000924 <Error_Handler>
}
 8004d7e:	bf00      	nop
 8004d80:	37a8      	adds	r7, #168	; 0xa8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	2000519c 	.word	0x2000519c
 8004d8c:	40028000 	.word	0x40028000
 8004d90:	200050f4 	.word	0x200050f4
 8004d94:	20005054 	.word	0x20005054
 8004d98:	2000524c 	.word	0x2000524c
 8004d9c:	08019504 	.word	0x08019504
 8004da0:	20005194 	.word	0x20005194
 8004da4:	20005198 	.word	0x20005198
 8004da8:	0801662c 	.word	0x0801662c
 8004dac:	08004f15 	.word	0x08004f15
 8004db0:	2000000c 	.word	0x2000000c
 8004db4:	20005284 	.word	0x20005284

08004db8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b092      	sub	sp, #72	; 0x48
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004dd0:	f107 030c 	add.w	r3, r7, #12
 8004dd4:	2230      	movs	r2, #48	; 0x30
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f010 fbb9 	bl	8015550 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004dde:	f107 030c 	add.w	r3, r7, #12
 8004de2:	2230      	movs	r2, #48	; 0x30
 8004de4:	2100      	movs	r1, #0
 8004de6:	4618      	mov	r0, r3
 8004de8:	f010 fbb2 	bl	8015550 <memset>

  for(q = p; q != NULL; q = q->next)
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	643b      	str	r3, [r7, #64]	; 0x40
 8004df0:	e045      	b.n	8004e7e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004df2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004df4:	2b03      	cmp	r3, #3
 8004df6:	d902      	bls.n	8004dfe <low_level_output+0x46>
      return ERR_IF;
 8004df8:	f06f 030b 	mvn.w	r3, #11
 8004dfc:	e065      	b.n	8004eca <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8004dfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e00:	6859      	ldr	r1, [r3, #4]
 8004e02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e04:	4613      	mov	r3, r2
 8004e06:	005b      	lsls	r3, r3, #1
 8004e08:	4413      	add	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	3348      	adds	r3, #72	; 0x48
 8004e0e:	443b      	add	r3, r7
 8004e10:	3b3c      	subs	r3, #60	; 0x3c
 8004e12:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004e14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e16:	895b      	ldrh	r3, [r3, #10]
 8004e18:	4619      	mov	r1, r3
 8004e1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	005b      	lsls	r3, r3, #1
 8004e20:	4413      	add	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	3348      	adds	r3, #72	; 0x48
 8004e26:	443b      	add	r3, r7
 8004e28:	3b38      	subs	r3, #56	; 0x38
 8004e2a:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004e2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d011      	beq.n	8004e56 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e34:	1e5a      	subs	r2, r3, #1
 8004e36:	f107 000c 	add.w	r0, r7, #12
 8004e3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	005b      	lsls	r3, r3, #1
 8004e40:	440b      	add	r3, r1
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	18c1      	adds	r1, r0, r3
 8004e46:	4613      	mov	r3, r2
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	4413      	add	r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	3348      	adds	r3, #72	; 0x48
 8004e50:	443b      	add	r3, r7
 8004e52:	3b34      	subs	r3, #52	; 0x34
 8004e54:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d109      	bne.n	8004e72 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004e5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e60:	4613      	mov	r3, r2
 8004e62:	005b      	lsls	r3, r3, #1
 8004e64:	4413      	add	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	3348      	adds	r3, #72	; 0x48
 8004e6a:	443b      	add	r3, r7
 8004e6c:	3b34      	subs	r3, #52	; 0x34
 8004e6e:	2200      	movs	r2, #0
 8004e70:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004e72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e74:	3301      	adds	r3, #1
 8004e76:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	643b      	str	r3, [r7, #64]	; 0x40
 8004e7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1b6      	bne.n	8004df2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	891b      	ldrh	r3, [r3, #8]
 8004e88:	461a      	mov	r2, r3
 8004e8a:	4b12      	ldr	r3, [pc, #72]	; (8004ed4 <low_level_output+0x11c>)
 8004e8c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004e8e:	4a11      	ldr	r2, [pc, #68]	; (8004ed4 <low_level_output+0x11c>)
 8004e90:	f107 030c 	add.w	r3, r7, #12
 8004e94:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004e96:	4a0f      	ldr	r2, [pc, #60]	; (8004ed4 <low_level_output+0x11c>)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8004e9c:	6838      	ldr	r0, [r7, #0]
 8004e9e:	f005 ff13 	bl	800acc8 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8004ea2:	490c      	ldr	r1, [pc, #48]	; (8004ed4 <low_level_output+0x11c>)
 8004ea4:	480c      	ldr	r0, [pc, #48]	; (8004ed8 <low_level_output+0x120>)
 8004ea6:	f7fc fc7f 	bl	80017a8 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8004eaa:	bf00      	nop
 8004eac:	4b0b      	ldr	r3, [pc, #44]	; (8004edc <low_level_output+0x124>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f000 fdab 	bl	8005a10 <osSemaphoreAcquire>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1f5      	bne.n	8004eac <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8004ec0:	4805      	ldr	r0, [pc, #20]	; (8004ed8 <low_level_output+0x120>)
 8004ec2:	f7fc fe05 	bl	8001ad0 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8004ec6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3748      	adds	r7, #72	; 0x48
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	2000524c 	.word	0x2000524c
 8004ed8:	2000519c 	.word	0x2000519c
 8004edc:	20005198 	.word	0x20005198

08004ee0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004eec:	4b07      	ldr	r3, [pc, #28]	; (8004f0c <low_level_input+0x2c>)
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d105      	bne.n	8004f00 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004ef4:	f107 030c 	add.w	r3, r7, #12
 8004ef8:	4619      	mov	r1, r3
 8004efa:	4805      	ldr	r0, [pc, #20]	; (8004f10 <low_level_input+0x30>)
 8004efc:	f7fc fcb0 	bl	8001860 <HAL_ETH_ReadData>
  }

  return p;
 8004f00:	68fb      	ldr	r3, [r7, #12]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	20005050 	.word	0x20005050
 8004f10:	2000519c 	.word	0x2000519c

08004f14 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004f24:	4b0f      	ldr	r3, [pc, #60]	; (8004f64 <ethernetif_input+0x50>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f04f 31ff 	mov.w	r1, #4294967295
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f000 fd6f 	bl	8005a10 <osSemaphoreAcquire>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1f5      	bne.n	8004f24 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8004f38:	68b8      	ldr	r0, [r7, #8]
 8004f3a:	f7ff ffd1 	bl	8004ee0 <low_level_input>
 8004f3e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00a      	beq.n	8004f5c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	68b9      	ldr	r1, [r7, #8]
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	4798      	blx	r3
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d002      	beq.n	8004f5c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f005 fe10 	bl	800ab7c <pbuf_free>
          }
        }
      } while(p!=NULL);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1ea      	bne.n	8004f38 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004f62:	e7df      	b.n	8004f24 <ethernetif_input+0x10>
 8004f64:	20005194 	.word	0x20005194

08004f68 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d106      	bne.n	8004f84 <ethernetif_init+0x1c>
 8004f76:	4b0e      	ldr	r3, [pc, #56]	; (8004fb0 <ethernetif_init+0x48>)
 8004f78:	f240 12e5 	movw	r2, #485	; 0x1e5
 8004f7c:	490d      	ldr	r1, [pc, #52]	; (8004fb4 <ethernetif_init+0x4c>)
 8004f7e:	480e      	ldr	r0, [pc, #56]	; (8004fb8 <ethernetif_init+0x50>)
 8004f80:	f010 faee 	bl	8015560 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2273      	movs	r2, #115	; 0x73
 8004f88:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2274      	movs	r2, #116	; 0x74
 8004f90:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a09      	ldr	r2, [pc, #36]	; (8004fbc <ethernetif_init+0x54>)
 8004f98:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a08      	ldr	r2, [pc, #32]	; (8004fc0 <ethernetif_init+0x58>)
 8004f9e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f7ff fdd1 	bl	8004b48 <low_level_init>

  return ERR_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3708      	adds	r7, #8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	08016634 	.word	0x08016634
 8004fb4:	08016650 	.word	0x08016650
 8004fb8:	08016660 	.word	0x08016660
 8004fbc:	080135b9 	.word	0x080135b9
 8004fc0:	08004db9 	.word	0x08004db9

08004fc4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004fd0:	68f9      	ldr	r1, [r7, #12]
 8004fd2:	4809      	ldr	r0, [pc, #36]	; (8004ff8 <pbuf_free_custom+0x34>)
 8004fd4:	f004 fefe 	bl	8009dd4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004fd8:	4b08      	ldr	r3, [pc, #32]	; (8004ffc <pbuf_free_custom+0x38>)
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d107      	bne.n	8004ff0 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004fe0:	4b06      	ldr	r3, [pc, #24]	; (8004ffc <pbuf_free_custom+0x38>)
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8004fe6:	4b06      	ldr	r3, [pc, #24]	; (8005000 <pbuf_free_custom+0x3c>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 fd62 	bl	8005ab4 <osSemaphoreRelease>
  }
}
 8004ff0:	bf00      	nop
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	08019504 	.word	0x08019504
 8004ffc:	20005050 	.word	0x20005050
 8005000:	20005194 	.word	0x20005194

08005004 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005008:	f7fc f8a2 	bl	8001150 <HAL_GetTick>
 800500c:	4603      	mov	r3, r0
}
 800500e:	4618      	mov	r0, r3
 8005010:	bd80      	pop	{r7, pc}
	...

08005014 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b08e      	sub	sp, #56	; 0x38
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800501c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005020:	2200      	movs	r2, #0
 8005022:	601a      	str	r2, [r3, #0]
 8005024:	605a      	str	r2, [r3, #4]
 8005026:	609a      	str	r2, [r3, #8]
 8005028:	60da      	str	r2, [r3, #12]
 800502a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a59      	ldr	r2, [pc, #356]	; (8005198 <HAL_ETH_MspInit+0x184>)
 8005032:	4293      	cmp	r3, r2
 8005034:	f040 80ac 	bne.w	8005190 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005038:	2300      	movs	r3, #0
 800503a:	623b      	str	r3, [r7, #32]
 800503c:	4b57      	ldr	r3, [pc, #348]	; (800519c <HAL_ETH_MspInit+0x188>)
 800503e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005040:	4a56      	ldr	r2, [pc, #344]	; (800519c <HAL_ETH_MspInit+0x188>)
 8005042:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005046:	6313      	str	r3, [r2, #48]	; 0x30
 8005048:	4b54      	ldr	r3, [pc, #336]	; (800519c <HAL_ETH_MspInit+0x188>)
 800504a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005050:	623b      	str	r3, [r7, #32]
 8005052:	6a3b      	ldr	r3, [r7, #32]
 8005054:	2300      	movs	r3, #0
 8005056:	61fb      	str	r3, [r7, #28]
 8005058:	4b50      	ldr	r3, [pc, #320]	; (800519c <HAL_ETH_MspInit+0x188>)
 800505a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505c:	4a4f      	ldr	r2, [pc, #316]	; (800519c <HAL_ETH_MspInit+0x188>)
 800505e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005062:	6313      	str	r3, [r2, #48]	; 0x30
 8005064:	4b4d      	ldr	r3, [pc, #308]	; (800519c <HAL_ETH_MspInit+0x188>)
 8005066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005068:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800506c:	61fb      	str	r3, [r7, #28]
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	2300      	movs	r3, #0
 8005072:	61bb      	str	r3, [r7, #24]
 8005074:	4b49      	ldr	r3, [pc, #292]	; (800519c <HAL_ETH_MspInit+0x188>)
 8005076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005078:	4a48      	ldr	r2, [pc, #288]	; (800519c <HAL_ETH_MspInit+0x188>)
 800507a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800507e:	6313      	str	r3, [r2, #48]	; 0x30
 8005080:	4b46      	ldr	r3, [pc, #280]	; (800519c <HAL_ETH_MspInit+0x188>)
 8005082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005084:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005088:	61bb      	str	r3, [r7, #24]
 800508a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800508c:	2300      	movs	r3, #0
 800508e:	617b      	str	r3, [r7, #20]
 8005090:	4b42      	ldr	r3, [pc, #264]	; (800519c <HAL_ETH_MspInit+0x188>)
 8005092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005094:	4a41      	ldr	r2, [pc, #260]	; (800519c <HAL_ETH_MspInit+0x188>)
 8005096:	f043 0304 	orr.w	r3, r3, #4
 800509a:	6313      	str	r3, [r2, #48]	; 0x30
 800509c:	4b3f      	ldr	r3, [pc, #252]	; (800519c <HAL_ETH_MspInit+0x188>)
 800509e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a0:	f003 0304 	and.w	r3, r3, #4
 80050a4:	617b      	str	r3, [r7, #20]
 80050a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050a8:	2300      	movs	r3, #0
 80050aa:	613b      	str	r3, [r7, #16]
 80050ac:	4b3b      	ldr	r3, [pc, #236]	; (800519c <HAL_ETH_MspInit+0x188>)
 80050ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b0:	4a3a      	ldr	r2, [pc, #232]	; (800519c <HAL_ETH_MspInit+0x188>)
 80050b2:	f043 0301 	orr.w	r3, r3, #1
 80050b6:	6313      	str	r3, [r2, #48]	; 0x30
 80050b8:	4b38      	ldr	r3, [pc, #224]	; (800519c <HAL_ETH_MspInit+0x188>)
 80050ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	613b      	str	r3, [r7, #16]
 80050c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050c4:	2300      	movs	r3, #0
 80050c6:	60fb      	str	r3, [r7, #12]
 80050c8:	4b34      	ldr	r3, [pc, #208]	; (800519c <HAL_ETH_MspInit+0x188>)
 80050ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050cc:	4a33      	ldr	r2, [pc, #204]	; (800519c <HAL_ETH_MspInit+0x188>)
 80050ce:	f043 0302 	orr.w	r3, r3, #2
 80050d2:	6313      	str	r3, [r2, #48]	; 0x30
 80050d4:	4b31      	ldr	r3, [pc, #196]	; (800519c <HAL_ETH_MspInit+0x188>)
 80050d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	60fb      	str	r3, [r7, #12]
 80050de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80050e0:	2300      	movs	r3, #0
 80050e2:	60bb      	str	r3, [r7, #8]
 80050e4:	4b2d      	ldr	r3, [pc, #180]	; (800519c <HAL_ETH_MspInit+0x188>)
 80050e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e8:	4a2c      	ldr	r2, [pc, #176]	; (800519c <HAL_ETH_MspInit+0x188>)
 80050ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050ee:	6313      	str	r3, [r2, #48]	; 0x30
 80050f0:	4b2a      	ldr	r3, [pc, #168]	; (800519c <HAL_ETH_MspInit+0x188>)
 80050f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f8:	60bb      	str	r3, [r7, #8]
 80050fa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80050fc:	2332      	movs	r3, #50	; 0x32
 80050fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005100:	2302      	movs	r3, #2
 8005102:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005104:	2300      	movs	r3, #0
 8005106:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005108:	2303      	movs	r3, #3
 800510a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800510c:	230b      	movs	r3, #11
 800510e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005114:	4619      	mov	r1, r3
 8005116:	4822      	ldr	r0, [pc, #136]	; (80051a0 <HAL_ETH_MspInit+0x18c>)
 8005118:	f7fd fc0c 	bl	8002934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800511c:	2386      	movs	r3, #134	; 0x86
 800511e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005120:	2302      	movs	r3, #2
 8005122:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005124:	2300      	movs	r3, #0
 8005126:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005128:	2303      	movs	r3, #3
 800512a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800512c:	230b      	movs	r3, #11
 800512e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005134:	4619      	mov	r1, r3
 8005136:	481b      	ldr	r0, [pc, #108]	; (80051a4 <HAL_ETH_MspInit+0x190>)
 8005138:	f7fd fbfc 	bl	8002934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800513c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005140:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005142:	2302      	movs	r3, #2
 8005144:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005146:	2300      	movs	r3, #0
 8005148:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800514a:	2303      	movs	r3, #3
 800514c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800514e:	230b      	movs	r3, #11
 8005150:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005156:	4619      	mov	r1, r3
 8005158:	4813      	ldr	r0, [pc, #76]	; (80051a8 <HAL_ETH_MspInit+0x194>)
 800515a:	f7fd fbeb 	bl	8002934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800515e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005162:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005164:	2302      	movs	r3, #2
 8005166:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005168:	2300      	movs	r3, #0
 800516a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800516c:	2303      	movs	r3, #3
 800516e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005170:	230b      	movs	r3, #11
 8005172:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005178:	4619      	mov	r1, r3
 800517a:	480c      	ldr	r0, [pc, #48]	; (80051ac <HAL_ETH_MspInit+0x198>)
 800517c:	f7fd fbda 	bl	8002934 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005180:	2200      	movs	r2, #0
 8005182:	2105      	movs	r1, #5
 8005184:	203d      	movs	r0, #61	; 0x3d
 8005186:	f7fc f8ee 	bl	8001366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800518a:	203d      	movs	r0, #61	; 0x3d
 800518c:	f7fc f907 	bl	800139e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005190:	bf00      	nop
 8005192:	3738      	adds	r7, #56	; 0x38
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	40028000 	.word	0x40028000
 800519c:	40023800 	.word	0x40023800
 80051a0:	40020800 	.word	0x40020800
 80051a4:	40020000 	.word	0x40020000
 80051a8:	40020400 	.word	0x40020400
 80051ac:	40021800 	.word	0x40021800

080051b0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80051b4:	4802      	ldr	r0, [pc, #8]	; (80051c0 <ETH_PHY_IO_Init+0x10>)
 80051b6:	f7fc ff55 	bl	8002064 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	2000519c 	.word	0x2000519c

080051c4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80051c4:	b480      	push	{r7}
 80051c6:	af00      	add	r7, sp, #0
  return 0;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	68f9      	ldr	r1, [r7, #12]
 80051e6:	4807      	ldr	r0, [pc, #28]	; (8005204 <ETH_PHY_IO_ReadReg+0x30>)
 80051e8:	f7fc fda4 	bl	8001d34 <HAL_ETH_ReadPHYRegister>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d002      	beq.n	80051f8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80051f2:	f04f 33ff 	mov.w	r3, #4294967295
 80051f6:	e000      	b.n	80051fa <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	2000519c 	.word	0x2000519c

08005208 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	68f9      	ldr	r1, [r7, #12]
 800521a:	4807      	ldr	r0, [pc, #28]	; (8005238 <ETH_PHY_IO_WriteReg+0x30>)
 800521c:	f7fc fdd5 	bl	8001dca <HAL_ETH_WritePHYRegister>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d002      	beq.n	800522c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8005226:	f04f 33ff 	mov.w	r3, #4294967295
 800522a:	e000      	b.n	800522e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	2000519c 	.word	0x2000519c

0800523c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005240:	f7fb ff86 	bl	8001150 <HAL_GetTick>
 8005244:	4603      	mov	r3, r0
}
 8005246:	4618      	mov	r0, r3
 8005248:	bd80      	pop	{r7, pc}
	...

0800524c <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b0a0      	sub	sp, #128	; 0x80
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005254:	f107 0308 	add.w	r3, r7, #8
 8005258:	2264      	movs	r2, #100	; 0x64
 800525a:	2100      	movs	r1, #0
 800525c:	4618      	mov	r0, r3
 800525e:	f010 f977 	bl	8015550 <memset>
  int32_t PHYLinkState = 0;
 8005262:	2300      	movs	r3, #0
 8005264:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8005266:	2300      	movs	r3, #0
 8005268:	67fb      	str	r3, [r7, #124]	; 0x7c
 800526a:	2300      	movs	r3, #0
 800526c:	67bb      	str	r3, [r7, #120]	; 0x78
 800526e:	2300      	movs	r3, #0
 8005270:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005276:	483a      	ldr	r0, [pc, #232]	; (8005360 <ethernet_link_thread+0x114>)
 8005278:	f7fb fe7d 	bl	8000f76 <LAN8742_GetLinkState>
 800527c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800527e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005280:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005284:	089b      	lsrs	r3, r3, #2
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00c      	beq.n	80052aa <ethernet_link_thread+0x5e>
 8005290:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005292:	2b01      	cmp	r3, #1
 8005294:	dc09      	bgt.n	80052aa <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8005296:	4833      	ldr	r0, [pc, #204]	; (8005364 <ethernet_link_thread+0x118>)
 8005298:	f7fc fa07 	bl	80016aa <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800529c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800529e:	f005 f825 	bl	800a2ec <netif_set_down>
    netif_set_link_down(netif);
 80052a2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80052a4:	f005 f88c 	bl	800a3c0 <netif_set_link_down>
 80052a8:	e055      	b.n	8005356 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80052aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d14e      	bne.n	8005356 <ethernet_link_thread+0x10a>
 80052b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	dd4b      	ble.n	8005356 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 80052be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052c0:	3b02      	subs	r3, #2
 80052c2:	2b03      	cmp	r3, #3
 80052c4:	d82a      	bhi.n	800531c <ethernet_link_thread+0xd0>
 80052c6:	a201      	add	r2, pc, #4	; (adr r2, 80052cc <ethernet_link_thread+0x80>)
 80052c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052cc:	080052dd 	.word	0x080052dd
 80052d0:	080052ef 	.word	0x080052ef
 80052d4:	080052ff 	.word	0x080052ff
 80052d8:	0800530f 	.word	0x0800530f
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80052dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80052e0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80052e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80052e6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80052e8:	2301      	movs	r3, #1
 80052ea:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80052ec:	e017      	b.n	800531e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80052ee:	2300      	movs	r3, #0
 80052f0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80052f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80052f6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80052f8:	2301      	movs	r3, #1
 80052fa:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80052fc:	e00f      	b.n	800531e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80052fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005302:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005304:	2300      	movs	r3, #0
 8005306:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005308:	2301      	movs	r3, #1
 800530a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800530c:	e007      	b.n	800531e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800530e:	2300      	movs	r3, #0
 8005310:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005312:	2300      	movs	r3, #0
 8005314:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005316:	2301      	movs	r3, #1
 8005318:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800531a:	e000      	b.n	800531e <ethernet_link_thread+0xd2>
    default:
      break;
 800531c:	bf00      	nop
    }

    if(linkchanged)
 800531e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005320:	2b00      	cmp	r3, #0
 8005322:	d018      	beq.n	8005356 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005324:	f107 0308 	add.w	r3, r7, #8
 8005328:	4619      	mov	r1, r3
 800532a:	480e      	ldr	r0, [pc, #56]	; (8005364 <ethernet_link_thread+0x118>)
 800532c:	f7fc fd96 	bl	8001e5c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005330:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005332:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8005334:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005336:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005338:	f107 0308 	add.w	r3, r7, #8
 800533c:	4619      	mov	r1, r3
 800533e:	4809      	ldr	r0, [pc, #36]	; (8005364 <ethernet_link_thread+0x118>)
 8005340:	f7fc fe76 	bl	8002030 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8005344:	4807      	ldr	r0, [pc, #28]	; (8005364 <ethernet_link_thread+0x118>)
 8005346:	f7fc f8c3 	bl	80014d0 <HAL_ETH_Start>
      netif_set_up(netif);
 800534a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800534c:	f004 ff62 	bl	800a214 <netif_set_up>
      netif_set_link_up(netif);
 8005350:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005352:	f004 fffd 	bl	800a350 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8005356:	2064      	movs	r0, #100	; 0x64
 8005358:	f000 f9a7 	bl	80056aa <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800535c:	e78b      	b.n	8005276 <ethernet_link_thread+0x2a>
 800535e:	bf00      	nop
 8005360:	20005284 	.word	0x20005284
 8005364:	2000519c 	.word	0x2000519c

08005368 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af02      	add	r7, sp, #8
 800536e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005370:	4812      	ldr	r0, [pc, #72]	; (80053bc <HAL_ETH_RxAllocateCallback+0x54>)
 8005372:	f004 fcbb 	bl	8009cec <memp_malloc_pool>
 8005376:	60f8      	str	r0, [r7, #12]
  if (p)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d014      	beq.n	80053a8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f103 0220 	add.w	r2, r3, #32
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4a0d      	ldr	r2, [pc, #52]	; (80053c0 <HAL_ETH_RxAllocateCallback+0x58>)
 800538c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005396:	9201      	str	r2, [sp, #4]
 8005398:	9300      	str	r3, [sp, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2241      	movs	r2, #65	; 0x41
 800539e:	2100      	movs	r1, #0
 80053a0:	2000      	movs	r0, #0
 80053a2:	f005 fa31 	bl	800a808 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80053a6:	e005      	b.n	80053b4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80053a8:	4b06      	ldr	r3, [pc, #24]	; (80053c4 <HAL_ETH_RxAllocateCallback+0x5c>)
 80053aa:	2201      	movs	r2, #1
 80053ac:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	601a      	str	r2, [r3, #0]
}
 80053b4:	bf00      	nop
 80053b6:	3710      	adds	r7, #16
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	08019504 	.word	0x08019504
 80053c0:	08004fc5 	.word	0x08004fc5
 80053c4:	20005050 	.word	0x20005050

080053c8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b089      	sub	sp, #36	; 0x24
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
 80053d4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80053de:	2300      	movs	r3, #0
 80053e0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	3b20      	subs	r3, #32
 80053e6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	2200      	movs	r2, #0
 80053ec:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	2200      	movs	r2, #0
 80053f2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	887a      	ldrh	r2, [r7, #2]
 80053f8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d103      	bne.n	800540a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	69fa      	ldr	r2, [r7, #28]
 8005406:	601a      	str	r2, [r3, #0]
 8005408:	e003      	b.n	8005412 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	69fa      	ldr	r2, [r7, #28]
 8005410:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	69fa      	ldr	r2, [r7, #28]
 8005416:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	61fb      	str	r3, [r7, #28]
 800541e:	e009      	b.n	8005434 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	891a      	ldrh	r2, [r3, #8]
 8005424:	887b      	ldrh	r3, [r7, #2]
 8005426:	4413      	add	r3, r2
 8005428:	b29a      	uxth	r2, r3
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	61fb      	str	r3, [r7, #28]
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1f2      	bne.n	8005420 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800543a:	bf00      	nop
 800543c:	bf00      	nop
 800543e:	3724      	adds	r7, #36	; 0x24
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f005 fb93 	bl	800ab7c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8005456:	bf00      	nop
 8005458:	3708      	adds	r7, #8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
	...

08005460 <__NVIC_SetPriority>:
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	4603      	mov	r3, r0
 8005468:	6039      	str	r1, [r7, #0]
 800546a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800546c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005470:	2b00      	cmp	r3, #0
 8005472:	db0a      	blt.n	800548a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	b2da      	uxtb	r2, r3
 8005478:	490c      	ldr	r1, [pc, #48]	; (80054ac <__NVIC_SetPriority+0x4c>)
 800547a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800547e:	0112      	lsls	r2, r2, #4
 8005480:	b2d2      	uxtb	r2, r2
 8005482:	440b      	add	r3, r1
 8005484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005488:	e00a      	b.n	80054a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	b2da      	uxtb	r2, r3
 800548e:	4908      	ldr	r1, [pc, #32]	; (80054b0 <__NVIC_SetPriority+0x50>)
 8005490:	79fb      	ldrb	r3, [r7, #7]
 8005492:	f003 030f 	and.w	r3, r3, #15
 8005496:	3b04      	subs	r3, #4
 8005498:	0112      	lsls	r2, r2, #4
 800549a:	b2d2      	uxtb	r2, r2
 800549c:	440b      	add	r3, r1
 800549e:	761a      	strb	r2, [r3, #24]
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr
 80054ac:	e000e100 	.word	0xe000e100
 80054b0:	e000ed00 	.word	0xe000ed00

080054b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80054b4:	b580      	push	{r7, lr}
 80054b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80054b8:	2100      	movs	r1, #0
 80054ba:	f06f 0004 	mvn.w	r0, #4
 80054be:	f7ff ffcf 	bl	8005460 <__NVIC_SetPriority>
#endif
}
 80054c2:	bf00      	nop
 80054c4:	bd80      	pop	{r7, pc}
	...

080054c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054ce:	f3ef 8305 	mrs	r3, IPSR
 80054d2:	603b      	str	r3, [r7, #0]
  return(result);
 80054d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d003      	beq.n	80054e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80054da:	f06f 0305 	mvn.w	r3, #5
 80054de:	607b      	str	r3, [r7, #4]
 80054e0:	e00c      	b.n	80054fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80054e2:	4b0a      	ldr	r3, [pc, #40]	; (800550c <osKernelInitialize+0x44>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d105      	bne.n	80054f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80054ea:	4b08      	ldr	r3, [pc, #32]	; (800550c <osKernelInitialize+0x44>)
 80054ec:	2201      	movs	r2, #1
 80054ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80054f0:	2300      	movs	r3, #0
 80054f2:	607b      	str	r3, [r7, #4]
 80054f4:	e002      	b.n	80054fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80054f6:	f04f 33ff 	mov.w	r3, #4294967295
 80054fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80054fc:	687b      	ldr	r3, [r7, #4]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	200052a4 	.word	0x200052a4

08005510 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005516:	f3ef 8305 	mrs	r3, IPSR
 800551a:	603b      	str	r3, [r7, #0]
  return(result);
 800551c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800551e:	2b00      	cmp	r3, #0
 8005520:	d003      	beq.n	800552a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005522:	f06f 0305 	mvn.w	r3, #5
 8005526:	607b      	str	r3, [r7, #4]
 8005528:	e010      	b.n	800554c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800552a:	4b0b      	ldr	r3, [pc, #44]	; (8005558 <osKernelStart+0x48>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d109      	bne.n	8005546 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005532:	f7ff ffbf 	bl	80054b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005536:	4b08      	ldr	r3, [pc, #32]	; (8005558 <osKernelStart+0x48>)
 8005538:	2202      	movs	r2, #2
 800553a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800553c:	f001 ffb2 	bl	80074a4 <vTaskStartScheduler>
      stat = osOK;
 8005540:	2300      	movs	r3, #0
 8005542:	607b      	str	r3, [r7, #4]
 8005544:	e002      	b.n	800554c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005546:	f04f 33ff 	mov.w	r3, #4294967295
 800554a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800554c:	687b      	ldr	r3, [r7, #4]
}
 800554e:	4618      	mov	r0, r3
 8005550:	3708      	adds	r7, #8
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	200052a4 	.word	0x200052a4

0800555c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005562:	f3ef 8305 	mrs	r3, IPSR
 8005566:	603b      	str	r3, [r7, #0]
  return(result);
 8005568:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800556a:	2b00      	cmp	r3, #0
 800556c:	d003      	beq.n	8005576 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800556e:	f002 f8bb 	bl	80076e8 <xTaskGetTickCountFromISR>
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	e002      	b.n	800557c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8005576:	f002 f8a7 	bl	80076c8 <xTaskGetTickCount>
 800557a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800557c:	687b      	ldr	r3, [r7, #4]
}
 800557e:	4618      	mov	r0, r3
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005586:	b580      	push	{r7, lr}
 8005588:	b08e      	sub	sp, #56	; 0x38
 800558a:	af04      	add	r7, sp, #16
 800558c:	60f8      	str	r0, [r7, #12]
 800558e:	60b9      	str	r1, [r7, #8]
 8005590:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005592:	2300      	movs	r3, #0
 8005594:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005596:	f3ef 8305 	mrs	r3, IPSR
 800559a:	617b      	str	r3, [r7, #20]
  return(result);
 800559c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d17e      	bne.n	80056a0 <osThreadNew+0x11a>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d07b      	beq.n	80056a0 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80055a8:	2380      	movs	r3, #128	; 0x80
 80055aa:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80055ac:	2318      	movs	r3, #24
 80055ae:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80055b0:	2300      	movs	r3, #0
 80055b2:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80055b4:	f04f 33ff 	mov.w	r3, #4294967295
 80055b8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d045      	beq.n	800564c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d002      	beq.n	80055ce <osThreadNew+0x48>
        name = attr->name;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d002      	beq.n	80055dc <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d008      	beq.n	80055f4 <osThreadNew+0x6e>
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	2b38      	cmp	r3, #56	; 0x38
 80055e6:	d805      	bhi.n	80055f4 <osThreadNew+0x6e>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f003 0301 	and.w	r3, r3, #1
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d001      	beq.n	80055f8 <osThreadNew+0x72>
        return (NULL);
 80055f4:	2300      	movs	r3, #0
 80055f6:	e054      	b.n	80056a2 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d003      	beq.n	8005608 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	089b      	lsrs	r3, r3, #2
 8005606:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00e      	beq.n	800562e <osThreadNew+0xa8>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	2b5b      	cmp	r3, #91	; 0x5b
 8005616:	d90a      	bls.n	800562e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800561c:	2b00      	cmp	r3, #0
 800561e:	d006      	beq.n	800562e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	695b      	ldr	r3, [r3, #20]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d002      	beq.n	800562e <osThreadNew+0xa8>
        mem = 1;
 8005628:	2301      	movs	r3, #1
 800562a:	61bb      	str	r3, [r7, #24]
 800562c:	e010      	b.n	8005650 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10c      	bne.n	8005650 <osThreadNew+0xca>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d108      	bne.n	8005650 <osThreadNew+0xca>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d104      	bne.n	8005650 <osThreadNew+0xca>
          mem = 0;
 8005646:	2300      	movs	r3, #0
 8005648:	61bb      	str	r3, [r7, #24]
 800564a:	e001      	b.n	8005650 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800564c:	2300      	movs	r3, #0
 800564e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	2b01      	cmp	r3, #1
 8005654:	d110      	bne.n	8005678 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800565e:	9202      	str	r2, [sp, #8]
 8005660:	9301      	str	r3, [sp, #4]
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	6a3a      	ldr	r2, [r7, #32]
 800566a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f001 fd43 	bl	80070f8 <xTaskCreateStatic>
 8005672:	4603      	mov	r3, r0
 8005674:	613b      	str	r3, [r7, #16]
 8005676:	e013      	b.n	80056a0 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d110      	bne.n	80056a0 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800567e:	6a3b      	ldr	r3, [r7, #32]
 8005680:	b29a      	uxth	r2, r3
 8005682:	f107 0310 	add.w	r3, r7, #16
 8005686:	9301      	str	r3, [sp, #4]
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	f001 fd8e 	bl	80071b2 <xTaskCreate>
 8005696:	4603      	mov	r3, r0
 8005698:	2b01      	cmp	r3, #1
 800569a:	d001      	beq.n	80056a0 <osThreadNew+0x11a>
            hTask = NULL;
 800569c:	2300      	movs	r3, #0
 800569e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80056a0:	693b      	ldr	r3, [r7, #16]
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3728      	adds	r7, #40	; 0x28
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b084      	sub	sp, #16
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056b2:	f3ef 8305 	mrs	r3, IPSR
 80056b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80056b8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d003      	beq.n	80056c6 <osDelay+0x1c>
    stat = osErrorISR;
 80056be:	f06f 0305 	mvn.w	r3, #5
 80056c2:	60fb      	str	r3, [r7, #12]
 80056c4:	e007      	b.n	80056d6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80056c6:	2300      	movs	r3, #0
 80056c8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d002      	beq.n	80056d6 <osDelay+0x2c>
      vTaskDelay(ticks);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f001 feb3 	bl	800743c <vTaskDelay>
    }
  }

  return (stat);
 80056d6:	68fb      	ldr	r3, [r7, #12]
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3710      	adds	r7, #16
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b088      	sub	sp, #32
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80056e8:	2300      	movs	r3, #0
 80056ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056ec:	f3ef 8305 	mrs	r3, IPSR
 80056f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80056f2:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d174      	bne.n	80057e2 <osMutexNew+0x102>
    if (attr != NULL) {
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d003      	beq.n	8005706 <osMutexNew+0x26>
      type = attr->attr_bits;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	61bb      	str	r3, [r7, #24]
 8005704:	e001      	b.n	800570a <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005706:	2300      	movs	r3, #0
 8005708:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	f003 0301 	and.w	r3, r3, #1
 8005710:	2b00      	cmp	r3, #0
 8005712:	d002      	beq.n	800571a <osMutexNew+0x3a>
      rmtx = 1U;
 8005714:	2301      	movs	r3, #1
 8005716:	617b      	str	r3, [r7, #20]
 8005718:	e001      	b.n	800571e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800571a:	2300      	movs	r3, #0
 800571c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	f003 0308 	and.w	r3, r3, #8
 8005724:	2b00      	cmp	r3, #0
 8005726:	d15c      	bne.n	80057e2 <osMutexNew+0x102>
      mem = -1;
 8005728:	f04f 33ff 	mov.w	r3, #4294967295
 800572c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d015      	beq.n	8005760 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d006      	beq.n	800574a <osMutexNew+0x6a>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	2b4f      	cmp	r3, #79	; 0x4f
 8005742:	d902      	bls.n	800574a <osMutexNew+0x6a>
          mem = 1;
 8005744:	2301      	movs	r3, #1
 8005746:	613b      	str	r3, [r7, #16]
 8005748:	e00c      	b.n	8005764 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d108      	bne.n	8005764 <osMutexNew+0x84>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d104      	bne.n	8005764 <osMutexNew+0x84>
            mem = 0;
 800575a:	2300      	movs	r3, #0
 800575c:	613b      	str	r3, [r7, #16]
 800575e:	e001      	b.n	8005764 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005760:	2300      	movs	r3, #0
 8005762:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	2b01      	cmp	r3, #1
 8005768:	d112      	bne.n	8005790 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d007      	beq.n	8005780 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	4619      	mov	r1, r3
 8005776:	2004      	movs	r0, #4
 8005778:	f000 fd69 	bl	800624e <xQueueCreateMutexStatic>
 800577c:	61f8      	str	r0, [r7, #28]
 800577e:	e016      	b.n	80057ae <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	4619      	mov	r1, r3
 8005786:	2001      	movs	r0, #1
 8005788:	f000 fd61 	bl	800624e <xQueueCreateMutexStatic>
 800578c:	61f8      	str	r0, [r7, #28]
 800578e:	e00e      	b.n	80057ae <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10b      	bne.n	80057ae <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d004      	beq.n	80057a6 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800579c:	2004      	movs	r0, #4
 800579e:	f000 fd3e 	bl	800621e <xQueueCreateMutex>
 80057a2:	61f8      	str	r0, [r7, #28]
 80057a4:	e003      	b.n	80057ae <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80057a6:	2001      	movs	r0, #1
 80057a8:	f000 fd39 	bl	800621e <xQueueCreateMutex>
 80057ac:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00c      	beq.n	80057ce <osMutexNew+0xee>
        if (attr != NULL) {
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d003      	beq.n	80057c2 <osMutexNew+0xe2>
          name = attr->name;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	60fb      	str	r3, [r7, #12]
 80057c0:	e001      	b.n	80057c6 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80057c2:	2300      	movs	r3, #0
 80057c4:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80057c6:	68f9      	ldr	r1, [r7, #12]
 80057c8:	69f8      	ldr	r0, [r7, #28]
 80057ca:	f001 fc0d 	bl	8006fe8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d006      	beq.n	80057e2 <osMutexNew+0x102>
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d003      	beq.n	80057e2 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	f043 0301 	orr.w	r3, r3, #1
 80057e0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80057e2:	69fb      	ldr	r3, [r7, #28]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3720      	adds	r7, #32
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f023 0301 	bic.w	r3, r3, #1
 80057fc:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005806:	2300      	movs	r3, #0
 8005808:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800580a:	f3ef 8305 	mrs	r3, IPSR
 800580e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005810:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005812:	2b00      	cmp	r3, #0
 8005814:	d003      	beq.n	800581e <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005816:	f06f 0305 	mvn.w	r3, #5
 800581a:	617b      	str	r3, [r7, #20]
 800581c:	e02c      	b.n	8005878 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d103      	bne.n	800582c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005824:	f06f 0303 	mvn.w	r3, #3
 8005828:	617b      	str	r3, [r7, #20]
 800582a:	e025      	b.n	8005878 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d011      	beq.n	8005856 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005832:	6839      	ldr	r1, [r7, #0]
 8005834:	6938      	ldr	r0, [r7, #16]
 8005836:	f000 fd59 	bl	80062ec <xQueueTakeMutexRecursive>
 800583a:	4603      	mov	r3, r0
 800583c:	2b01      	cmp	r3, #1
 800583e:	d01b      	beq.n	8005878 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005846:	f06f 0301 	mvn.w	r3, #1
 800584a:	617b      	str	r3, [r7, #20]
 800584c:	e014      	b.n	8005878 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800584e:	f06f 0302 	mvn.w	r3, #2
 8005852:	617b      	str	r3, [r7, #20]
 8005854:	e010      	b.n	8005878 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005856:	6839      	ldr	r1, [r7, #0]
 8005858:	6938      	ldr	r0, [r7, #16]
 800585a:	f001 f8ed 	bl	8006a38 <xQueueSemaphoreTake>
 800585e:	4603      	mov	r3, r0
 8005860:	2b01      	cmp	r3, #1
 8005862:	d009      	beq.n	8005878 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d003      	beq.n	8005872 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800586a:	f06f 0301 	mvn.w	r3, #1
 800586e:	617b      	str	r3, [r7, #20]
 8005870:	e002      	b.n	8005878 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005872:	f06f 0302 	mvn.w	r3, #2
 8005876:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005878:	697b      	ldr	r3, [r7, #20]
}
 800587a:	4618      	mov	r0, r3
 800587c:	3718      	adds	r7, #24
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005882:	b580      	push	{r7, lr}
 8005884:	b086      	sub	sp, #24
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f023 0301 	bic.w	r3, r3, #1
 8005890:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800589a:	2300      	movs	r3, #0
 800589c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800589e:	f3ef 8305 	mrs	r3, IPSR
 80058a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80058a4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d003      	beq.n	80058b2 <osMutexRelease+0x30>
    stat = osErrorISR;
 80058aa:	f06f 0305 	mvn.w	r3, #5
 80058ae:	617b      	str	r3, [r7, #20]
 80058b0:	e01f      	b.n	80058f2 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d103      	bne.n	80058c0 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80058b8:	f06f 0303 	mvn.w	r3, #3
 80058bc:	617b      	str	r3, [r7, #20]
 80058be:	e018      	b.n	80058f2 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d009      	beq.n	80058da <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80058c6:	6938      	ldr	r0, [r7, #16]
 80058c8:	f000 fcdc 	bl	8006284 <xQueueGiveMutexRecursive>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d00f      	beq.n	80058f2 <osMutexRelease+0x70>
        stat = osErrorResource;
 80058d2:	f06f 0302 	mvn.w	r3, #2
 80058d6:	617b      	str	r3, [r7, #20]
 80058d8:	e00b      	b.n	80058f2 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80058da:	2300      	movs	r3, #0
 80058dc:	2200      	movs	r2, #0
 80058de:	2100      	movs	r1, #0
 80058e0:	6938      	ldr	r0, [r7, #16]
 80058e2:	f000 fda3 	bl	800642c <xQueueGenericSend>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d002      	beq.n	80058f2 <osMutexRelease+0x70>
        stat = osErrorResource;
 80058ec:	f06f 0302 	mvn.w	r3, #2
 80058f0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80058f2:	697b      	ldr	r3, [r7, #20]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3718      	adds	r7, #24
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b08a      	sub	sp, #40	; 0x28
 8005900:	af02      	add	r7, sp, #8
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005908:	2300      	movs	r3, #0
 800590a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800590c:	f3ef 8305 	mrs	r3, IPSR
 8005910:	613b      	str	r3, [r7, #16]
  return(result);
 8005912:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005914:	2b00      	cmp	r3, #0
 8005916:	d175      	bne.n	8005a04 <osSemaphoreNew+0x108>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d072      	beq.n	8005a04 <osSemaphoreNew+0x108>
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	429a      	cmp	r2, r3
 8005924:	d86e      	bhi.n	8005a04 <osSemaphoreNew+0x108>
    mem = -1;
 8005926:	f04f 33ff 	mov.w	r3, #4294967295
 800592a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d015      	beq.n	800595e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d006      	beq.n	8005948 <osSemaphoreNew+0x4c>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	2b4f      	cmp	r3, #79	; 0x4f
 8005940:	d902      	bls.n	8005948 <osSemaphoreNew+0x4c>
        mem = 1;
 8005942:	2301      	movs	r3, #1
 8005944:	61bb      	str	r3, [r7, #24]
 8005946:	e00c      	b.n	8005962 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d108      	bne.n	8005962 <osSemaphoreNew+0x66>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d104      	bne.n	8005962 <osSemaphoreNew+0x66>
          mem = 0;
 8005958:	2300      	movs	r3, #0
 800595a:	61bb      	str	r3, [r7, #24]
 800595c:	e001      	b.n	8005962 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800595e:	2300      	movs	r3, #0
 8005960:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005968:	d04c      	beq.n	8005a04 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d128      	bne.n	80059c2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d10a      	bne.n	800598c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	2203      	movs	r2, #3
 800597c:	9200      	str	r2, [sp, #0]
 800597e:	2200      	movs	r2, #0
 8005980:	2100      	movs	r1, #0
 8005982:	2001      	movs	r0, #1
 8005984:	f000 fb5c 	bl	8006040 <xQueueGenericCreateStatic>
 8005988:	61f8      	str	r0, [r7, #28]
 800598a:	e005      	b.n	8005998 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800598c:	2203      	movs	r2, #3
 800598e:	2100      	movs	r1, #0
 8005990:	2001      	movs	r0, #1
 8005992:	f000 fbcd 	bl	8006130 <xQueueGenericCreate>
 8005996:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d022      	beq.n	80059e4 <osSemaphoreNew+0xe8>
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d01f      	beq.n	80059e4 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80059a4:	2300      	movs	r3, #0
 80059a6:	2200      	movs	r2, #0
 80059a8:	2100      	movs	r1, #0
 80059aa:	69f8      	ldr	r0, [r7, #28]
 80059ac:	f000 fd3e 	bl	800642c <xQueueGenericSend>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d016      	beq.n	80059e4 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80059b6:	69f8      	ldr	r0, [r7, #28]
 80059b8:	f001 f9ca 	bl	8006d50 <vQueueDelete>
            hSemaphore = NULL;
 80059bc:	2300      	movs	r3, #0
 80059be:	61fb      	str	r3, [r7, #28]
 80059c0:	e010      	b.n	80059e4 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d108      	bne.n	80059da <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	461a      	mov	r2, r3
 80059ce:	68b9      	ldr	r1, [r7, #8]
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f000 fcc1 	bl	8006358 <xQueueCreateCountingSemaphoreStatic>
 80059d6:	61f8      	str	r0, [r7, #28]
 80059d8:	e004      	b.n	80059e4 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80059da:	68b9      	ldr	r1, [r7, #8]
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f000 fcf2 	bl	80063c6 <xQueueCreateCountingSemaphore>
 80059e2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00c      	beq.n	8005a04 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d003      	beq.n	80059f8 <osSemaphoreNew+0xfc>
          name = attr->name;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	617b      	str	r3, [r7, #20]
 80059f6:	e001      	b.n	80059fc <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80059f8:	2300      	movs	r3, #0
 80059fa:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80059fc:	6979      	ldr	r1, [r7, #20]
 80059fe:	69f8      	ldr	r0, [r7, #28]
 8005a00:	f001 faf2 	bl	8006fe8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005a04:	69fb      	ldr	r3, [r7, #28]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3720      	adds	r7, #32
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
	...

08005a10 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d103      	bne.n	8005a30 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005a28:	f06f 0303 	mvn.w	r3, #3
 8005a2c:	617b      	str	r3, [r7, #20]
 8005a2e:	e039      	b.n	8005aa4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a30:	f3ef 8305 	mrs	r3, IPSR
 8005a34:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a36:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d022      	beq.n	8005a82 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005a42:	f06f 0303 	mvn.w	r3, #3
 8005a46:	617b      	str	r3, [r7, #20]
 8005a48:	e02c      	b.n	8005aa4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005a4e:	f107 0308 	add.w	r3, r7, #8
 8005a52:	461a      	mov	r2, r3
 8005a54:	2100      	movs	r1, #0
 8005a56:	6938      	ldr	r0, [r7, #16]
 8005a58:	f001 f8fa 	bl	8006c50 <xQueueReceiveFromISR>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d003      	beq.n	8005a6a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005a62:	f06f 0302 	mvn.w	r3, #2
 8005a66:	617b      	str	r3, [r7, #20]
 8005a68:	e01c      	b.n	8005aa4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d019      	beq.n	8005aa4 <osSemaphoreAcquire+0x94>
 8005a70:	4b0f      	ldr	r3, [pc, #60]	; (8005ab0 <osSemaphoreAcquire+0xa0>)
 8005a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a76:	601a      	str	r2, [r3, #0]
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	f3bf 8f6f 	isb	sy
 8005a80:	e010      	b.n	8005aa4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005a82:	6839      	ldr	r1, [r7, #0]
 8005a84:	6938      	ldr	r0, [r7, #16]
 8005a86:	f000 ffd7 	bl	8006a38 <xQueueSemaphoreTake>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d009      	beq.n	8005aa4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d003      	beq.n	8005a9e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005a96:	f06f 0301 	mvn.w	r3, #1
 8005a9a:	617b      	str	r3, [r7, #20]
 8005a9c:	e002      	b.n	8005aa4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005a9e:	f06f 0302 	mvn.w	r3, #2
 8005aa2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005aa4:	697b      	ldr	r3, [r7, #20]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3718      	adds	r7, #24
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	e000ed04 	.word	0xe000ed04

08005ab4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d103      	bne.n	8005ad2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005aca:	f06f 0303 	mvn.w	r3, #3
 8005ace:	617b      	str	r3, [r7, #20]
 8005ad0:	e02c      	b.n	8005b2c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ad2:	f3ef 8305 	mrs	r3, IPSR
 8005ad6:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d01a      	beq.n	8005b14 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005ae2:	f107 0308 	add.w	r3, r7, #8
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	6938      	ldr	r0, [r7, #16]
 8005aea:	f000 fe38 	bl	800675e <xQueueGiveFromISR>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d003      	beq.n	8005afc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005af4:	f06f 0302 	mvn.w	r3, #2
 8005af8:	617b      	str	r3, [r7, #20]
 8005afa:	e017      	b.n	8005b2c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d014      	beq.n	8005b2c <osSemaphoreRelease+0x78>
 8005b02:	4b0d      	ldr	r3, [pc, #52]	; (8005b38 <osSemaphoreRelease+0x84>)
 8005b04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b08:	601a      	str	r2, [r3, #0]
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	f3bf 8f6f 	isb	sy
 8005b12:	e00b      	b.n	8005b2c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005b14:	2300      	movs	r3, #0
 8005b16:	2200      	movs	r2, #0
 8005b18:	2100      	movs	r1, #0
 8005b1a:	6938      	ldr	r0, [r7, #16]
 8005b1c:	f000 fc86 	bl	800642c <xQueueGenericSend>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d002      	beq.n	8005b2c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005b26:	f06f 0302 	mvn.w	r3, #2
 8005b2a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005b2c:	697b      	ldr	r3, [r7, #20]
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3718      	adds	r7, #24
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	e000ed04 	.word	0xe000ed04

08005b3c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b08a      	sub	sp, #40	; 0x28
 8005b40:	af02      	add	r7, sp, #8
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b4c:	f3ef 8305 	mrs	r3, IPSR
 8005b50:	613b      	str	r3, [r7, #16]
  return(result);
 8005b52:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d15f      	bne.n	8005c18 <osMessageQueueNew+0xdc>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d05c      	beq.n	8005c18 <osMessageQueueNew+0xdc>
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d059      	beq.n	8005c18 <osMessageQueueNew+0xdc>
    mem = -1;
 8005b64:	f04f 33ff 	mov.w	r3, #4294967295
 8005b68:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d029      	beq.n	8005bc4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d012      	beq.n	8005b9e <osMessageQueueNew+0x62>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	2b4f      	cmp	r3, #79	; 0x4f
 8005b7e:	d90e      	bls.n	8005b9e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d00a      	beq.n	8005b9e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	695a      	ldr	r2, [r3, #20]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	68b9      	ldr	r1, [r7, #8]
 8005b90:	fb01 f303 	mul.w	r3, r1, r3
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d302      	bcc.n	8005b9e <osMessageQueueNew+0x62>
        mem = 1;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	61bb      	str	r3, [r7, #24]
 8005b9c:	e014      	b.n	8005bc8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d110      	bne.n	8005bc8 <osMessageQueueNew+0x8c>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10c      	bne.n	8005bc8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d108      	bne.n	8005bc8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d104      	bne.n	8005bc8 <osMessageQueueNew+0x8c>
          mem = 0;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	61bb      	str	r3, [r7, #24]
 8005bc2:	e001      	b.n	8005bc8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d10b      	bne.n	8005be6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	691a      	ldr	r2, [r3, #16]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	9100      	str	r1, [sp, #0]
 8005bda:	68b9      	ldr	r1, [r7, #8]
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f000 fa2f 	bl	8006040 <xQueueGenericCreateStatic>
 8005be2:	61f8      	str	r0, [r7, #28]
 8005be4:	e008      	b.n	8005bf8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d105      	bne.n	8005bf8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005bec:	2200      	movs	r2, #0
 8005bee:	68b9      	ldr	r1, [r7, #8]
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f000 fa9d 	bl	8006130 <xQueueGenericCreate>
 8005bf6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00c      	beq.n	8005c18 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d003      	beq.n	8005c0c <osMessageQueueNew+0xd0>
        name = attr->name;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	617b      	str	r3, [r7, #20]
 8005c0a:	e001      	b.n	8005c10 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005c10:	6979      	ldr	r1, [r7, #20]
 8005c12:	69f8      	ldr	r0, [r7, #28]
 8005c14:	f001 f9e8 	bl	8006fe8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005c18:	69fb      	ldr	r3, [r7, #28]
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3720      	adds	r7, #32
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
	...

08005c24 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b088      	sub	sp, #32
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	603b      	str	r3, [r7, #0]
 8005c30:	4613      	mov	r3, r2
 8005c32:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c3c:	f3ef 8305 	mrs	r3, IPSR
 8005c40:	617b      	str	r3, [r7, #20]
  return(result);
 8005c42:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d028      	beq.n	8005c9a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d005      	beq.n	8005c5a <osMessageQueuePut+0x36>
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d002      	beq.n	8005c5a <osMessageQueuePut+0x36>
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d003      	beq.n	8005c62 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005c5a:	f06f 0303 	mvn.w	r3, #3
 8005c5e:	61fb      	str	r3, [r7, #28]
 8005c60:	e038      	b.n	8005cd4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005c62:	2300      	movs	r3, #0
 8005c64:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005c66:	f107 0210 	add.w	r2, r7, #16
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	68b9      	ldr	r1, [r7, #8]
 8005c6e:	69b8      	ldr	r0, [r7, #24]
 8005c70:	f000 fcda 	bl	8006628 <xQueueGenericSendFromISR>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d003      	beq.n	8005c82 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005c7a:	f06f 0302 	mvn.w	r3, #2
 8005c7e:	61fb      	str	r3, [r7, #28]
 8005c80:	e028      	b.n	8005cd4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d025      	beq.n	8005cd4 <osMessageQueuePut+0xb0>
 8005c88:	4b15      	ldr	r3, [pc, #84]	; (8005ce0 <osMessageQueuePut+0xbc>)
 8005c8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c8e:	601a      	str	r2, [r3, #0]
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	f3bf 8f6f 	isb	sy
 8005c98:	e01c      	b.n	8005cd4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d002      	beq.n	8005ca6 <osMessageQueuePut+0x82>
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d103      	bne.n	8005cae <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005ca6:	f06f 0303 	mvn.w	r3, #3
 8005caa:	61fb      	str	r3, [r7, #28]
 8005cac:	e012      	b.n	8005cd4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005cae:	2300      	movs	r3, #0
 8005cb0:	683a      	ldr	r2, [r7, #0]
 8005cb2:	68b9      	ldr	r1, [r7, #8]
 8005cb4:	69b8      	ldr	r0, [r7, #24]
 8005cb6:	f000 fbb9 	bl	800642c <xQueueGenericSend>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d009      	beq.n	8005cd4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d003      	beq.n	8005cce <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005cc6:	f06f 0301 	mvn.w	r3, #1
 8005cca:	61fb      	str	r3, [r7, #28]
 8005ccc:	e002      	b.n	8005cd4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005cce:	f06f 0302 	mvn.w	r3, #2
 8005cd2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005cd4:	69fb      	ldr	r3, [r7, #28]
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3720      	adds	r7, #32
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	e000ed04 	.word	0xe000ed04

08005ce4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b088      	sub	sp, #32
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
 8005cf0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cfa:	f3ef 8305 	mrs	r3, IPSR
 8005cfe:	617b      	str	r3, [r7, #20]
  return(result);
 8005d00:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d028      	beq.n	8005d58 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d005      	beq.n	8005d18 <osMessageQueueGet+0x34>
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d002      	beq.n	8005d18 <osMessageQueueGet+0x34>
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d003      	beq.n	8005d20 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005d18:	f06f 0303 	mvn.w	r3, #3
 8005d1c:	61fb      	str	r3, [r7, #28]
 8005d1e:	e037      	b.n	8005d90 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005d20:	2300      	movs	r3, #0
 8005d22:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005d24:	f107 0310 	add.w	r3, r7, #16
 8005d28:	461a      	mov	r2, r3
 8005d2a:	68b9      	ldr	r1, [r7, #8]
 8005d2c:	69b8      	ldr	r0, [r7, #24]
 8005d2e:	f000 ff8f 	bl	8006c50 <xQueueReceiveFromISR>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d003      	beq.n	8005d40 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005d38:	f06f 0302 	mvn.w	r3, #2
 8005d3c:	61fb      	str	r3, [r7, #28]
 8005d3e:	e027      	b.n	8005d90 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d024      	beq.n	8005d90 <osMessageQueueGet+0xac>
 8005d46:	4b15      	ldr	r3, [pc, #84]	; (8005d9c <osMessageQueueGet+0xb8>)
 8005d48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d4c:	601a      	str	r2, [r3, #0]
 8005d4e:	f3bf 8f4f 	dsb	sy
 8005d52:	f3bf 8f6f 	isb	sy
 8005d56:	e01b      	b.n	8005d90 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d002      	beq.n	8005d64 <osMessageQueueGet+0x80>
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d103      	bne.n	8005d6c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005d64:	f06f 0303 	mvn.w	r3, #3
 8005d68:	61fb      	str	r3, [r7, #28]
 8005d6a:	e011      	b.n	8005d90 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005d6c:	683a      	ldr	r2, [r7, #0]
 8005d6e:	68b9      	ldr	r1, [r7, #8]
 8005d70:	69b8      	ldr	r0, [r7, #24]
 8005d72:	f000 fd81 	bl	8006878 <xQueueReceive>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d009      	beq.n	8005d90 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d003      	beq.n	8005d8a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005d82:	f06f 0301 	mvn.w	r3, #1
 8005d86:	61fb      	str	r3, [r7, #28]
 8005d88:	e002      	b.n	8005d90 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005d8a:	f06f 0302 	mvn.w	r3, #2
 8005d8e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005d90:	69fb      	ldr	r3, [r7, #28]
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3720      	adds	r7, #32
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	e000ed04 	.word	0xe000ed04

08005da0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	4a07      	ldr	r2, [pc, #28]	; (8005dcc <vApplicationGetIdleTaskMemory+0x2c>)
 8005db0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	4a06      	ldr	r2, [pc, #24]	; (8005dd0 <vApplicationGetIdleTaskMemory+0x30>)
 8005db6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2280      	movs	r2, #128	; 0x80
 8005dbc:	601a      	str	r2, [r3, #0]
}
 8005dbe:	bf00      	nop
 8005dc0:	3714      	adds	r7, #20
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	200052a8 	.word	0x200052a8
 8005dd0:	20005304 	.word	0x20005304

08005dd4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	4a07      	ldr	r2, [pc, #28]	; (8005e00 <vApplicationGetTimerTaskMemory+0x2c>)
 8005de4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	4a06      	ldr	r2, [pc, #24]	; (8005e04 <vApplicationGetTimerTaskMemory+0x30>)
 8005dea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005df2:	601a      	str	r2, [r3, #0]
}
 8005df4:	bf00      	nop
 8005df6:	3714      	adds	r7, #20
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	20005504 	.word	0x20005504
 8005e04:	20005560 	.word	0x20005560

08005e08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f103 0208 	add.w	r2, r3, #8
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f103 0208 	add.w	r2, r3, #8
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f103 0208 	add.w	r2, r3, #8
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e56:	bf00      	nop
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e62:	b480      	push	{r7}
 8005e64:	b085      	sub	sp, #20
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
 8005e6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	689a      	ldr	r2, [r3, #8]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	1c5a      	adds	r2, r3, #1
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	601a      	str	r2, [r3, #0]
}
 8005e9e:	bf00      	nop
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr

08005eaa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005eaa:	b480      	push	{r7}
 8005eac:	b085      	sub	sp, #20
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
 8005eb2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec0:	d103      	bne.n	8005eca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	60fb      	str	r3, [r7, #12]
 8005ec8:	e00c      	b.n	8005ee4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	3308      	adds	r3, #8
 8005ece:	60fb      	str	r3, [r7, #12]
 8005ed0:	e002      	b.n	8005ed8 <vListInsert+0x2e>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	60fb      	str	r3, [r7, #12]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d2f6      	bcs.n	8005ed2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	683a      	ldr	r2, [r7, #0]
 8005ef2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	683a      	ldr	r2, [r7, #0]
 8005efe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	1c5a      	adds	r2, r3, #1
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	601a      	str	r2, [r3, #0]
}
 8005f10:	bf00      	nop
 8005f12:	3714      	adds	r7, #20
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	6892      	ldr	r2, [r2, #8]
 8005f32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	6852      	ldr	r2, [r2, #4]
 8005f3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d103      	bne.n	8005f50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	689a      	ldr	r2, [r3, #8]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	1e5a      	subs	r2, r3, #1
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d10a      	bne.n	8005f9a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f88:	f383 8811 	msr	BASEPRI, r3
 8005f8c:	f3bf 8f6f 	isb	sy
 8005f90:	f3bf 8f4f 	dsb	sy
 8005f94:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005f96:	bf00      	nop
 8005f98:	e7fe      	b.n	8005f98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005f9a:	f002 fd43 	bl	8008a24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa6:	68f9      	ldr	r1, [r7, #12]
 8005fa8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005faa:	fb01 f303 	mul.w	r3, r1, r3
 8005fae:	441a      	add	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	68f9      	ldr	r1, [r7, #12]
 8005fce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005fd0:	fb01 f303 	mul.w	r3, r1, r3
 8005fd4:	441a      	add	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	22ff      	movs	r2, #255	; 0xff
 8005fde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	22ff      	movs	r2, #255	; 0xff
 8005fe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d114      	bne.n	800601a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d01a      	beq.n	800602e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	3310      	adds	r3, #16
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f001 fced 	bl	80079dc <xTaskRemoveFromEventList>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d012      	beq.n	800602e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006008:	4b0c      	ldr	r3, [pc, #48]	; (800603c <xQueueGenericReset+0xcc>)
 800600a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800600e:	601a      	str	r2, [r3, #0]
 8006010:	f3bf 8f4f 	dsb	sy
 8006014:	f3bf 8f6f 	isb	sy
 8006018:	e009      	b.n	800602e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	3310      	adds	r3, #16
 800601e:	4618      	mov	r0, r3
 8006020:	f7ff fef2 	bl	8005e08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	3324      	adds	r3, #36	; 0x24
 8006028:	4618      	mov	r0, r3
 800602a:	f7ff feed 	bl	8005e08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800602e:	f002 fd29 	bl	8008a84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006032:	2301      	movs	r3, #1
}
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	e000ed04 	.word	0xe000ed04

08006040 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006040:	b580      	push	{r7, lr}
 8006042:	b08e      	sub	sp, #56	; 0x38
 8006044:	af02      	add	r7, sp, #8
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
 800604c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10a      	bne.n	800606a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006058:	f383 8811 	msr	BASEPRI, r3
 800605c:	f3bf 8f6f 	isb	sy
 8006060:	f3bf 8f4f 	dsb	sy
 8006064:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006066:	bf00      	nop
 8006068:	e7fe      	b.n	8006068 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d10a      	bne.n	8006086 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006074:	f383 8811 	msr	BASEPRI, r3
 8006078:	f3bf 8f6f 	isb	sy
 800607c:	f3bf 8f4f 	dsb	sy
 8006080:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006082:	bf00      	nop
 8006084:	e7fe      	b.n	8006084 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d002      	beq.n	8006092 <xQueueGenericCreateStatic+0x52>
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d001      	beq.n	8006096 <xQueueGenericCreateStatic+0x56>
 8006092:	2301      	movs	r3, #1
 8006094:	e000      	b.n	8006098 <xQueueGenericCreateStatic+0x58>
 8006096:	2300      	movs	r3, #0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d10a      	bne.n	80060b2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800609c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a0:	f383 8811 	msr	BASEPRI, r3
 80060a4:	f3bf 8f6f 	isb	sy
 80060a8:	f3bf 8f4f 	dsb	sy
 80060ac:	623b      	str	r3, [r7, #32]
}
 80060ae:	bf00      	nop
 80060b0:	e7fe      	b.n	80060b0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d102      	bne.n	80060be <xQueueGenericCreateStatic+0x7e>
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d101      	bne.n	80060c2 <xQueueGenericCreateStatic+0x82>
 80060be:	2301      	movs	r3, #1
 80060c0:	e000      	b.n	80060c4 <xQueueGenericCreateStatic+0x84>
 80060c2:	2300      	movs	r3, #0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d10a      	bne.n	80060de <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80060c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060cc:	f383 8811 	msr	BASEPRI, r3
 80060d0:	f3bf 8f6f 	isb	sy
 80060d4:	f3bf 8f4f 	dsb	sy
 80060d8:	61fb      	str	r3, [r7, #28]
}
 80060da:	bf00      	nop
 80060dc:	e7fe      	b.n	80060dc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80060de:	2350      	movs	r3, #80	; 0x50
 80060e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	2b50      	cmp	r3, #80	; 0x50
 80060e6:	d00a      	beq.n	80060fe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80060e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ec:	f383 8811 	msr	BASEPRI, r3
 80060f0:	f3bf 8f6f 	isb	sy
 80060f4:	f3bf 8f4f 	dsb	sy
 80060f8:	61bb      	str	r3, [r7, #24]
}
 80060fa:	bf00      	nop
 80060fc:	e7fe      	b.n	80060fc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80060fe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00d      	beq.n	8006126 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800610a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800610c:	2201      	movs	r2, #1
 800610e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006112:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	4613      	mov	r3, r2
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	68b9      	ldr	r1, [r7, #8]
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f000 f83f 	bl	80061a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006128:	4618      	mov	r0, r3
 800612a:	3730      	adds	r7, #48	; 0x30
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006130:	b580      	push	{r7, lr}
 8006132:	b08a      	sub	sp, #40	; 0x28
 8006134:	af02      	add	r7, sp, #8
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	4613      	mov	r3, r2
 800613c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d10a      	bne.n	800615a <xQueueGenericCreate+0x2a>
	__asm volatile
 8006144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006148:	f383 8811 	msr	BASEPRI, r3
 800614c:	f3bf 8f6f 	isb	sy
 8006150:	f3bf 8f4f 	dsb	sy
 8006154:	613b      	str	r3, [r7, #16]
}
 8006156:	bf00      	nop
 8006158:	e7fe      	b.n	8006158 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	fb02 f303 	mul.w	r3, r2, r3
 8006162:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	3350      	adds	r3, #80	; 0x50
 8006168:	4618      	mov	r0, r3
 800616a:	f002 fd7d 	bl	8008c68 <pvPortMalloc>
 800616e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d011      	beq.n	800619a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	3350      	adds	r3, #80	; 0x50
 800617e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006188:	79fa      	ldrb	r2, [r7, #7]
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	9300      	str	r3, [sp, #0]
 800618e:	4613      	mov	r3, r2
 8006190:	697a      	ldr	r2, [r7, #20]
 8006192:	68b9      	ldr	r1, [r7, #8]
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f000 f805 	bl	80061a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800619a:	69bb      	ldr	r3, [r7, #24]
	}
 800619c:	4618      	mov	r0, r3
 800619e:	3720      	adds	r7, #32
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
 80061b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d103      	bne.n	80061c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	69ba      	ldr	r2, [r7, #24]
 80061bc:	601a      	str	r2, [r3, #0]
 80061be:	e002      	b.n	80061c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80061d2:	2101      	movs	r1, #1
 80061d4:	69b8      	ldr	r0, [r7, #24]
 80061d6:	f7ff fecb 	bl	8005f70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	78fa      	ldrb	r2, [r7, #3]
 80061de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80061e2:	bf00      	nop
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b082      	sub	sp, #8
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00e      	beq.n	8006216 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800620a:	2300      	movs	r3, #0
 800620c:	2200      	movs	r2, #0
 800620e:	2100      	movs	r1, #0
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 f90b 	bl	800642c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006216:	bf00      	nop
 8006218:	3708      	adds	r7, #8
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800621e:	b580      	push	{r7, lr}
 8006220:	b086      	sub	sp, #24
 8006222:	af00      	add	r7, sp, #0
 8006224:	4603      	mov	r3, r0
 8006226:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006228:	2301      	movs	r3, #1
 800622a:	617b      	str	r3, [r7, #20]
 800622c:	2300      	movs	r3, #0
 800622e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006230:	79fb      	ldrb	r3, [r7, #7]
 8006232:	461a      	mov	r2, r3
 8006234:	6939      	ldr	r1, [r7, #16]
 8006236:	6978      	ldr	r0, [r7, #20]
 8006238:	f7ff ff7a 	bl	8006130 <xQueueGenericCreate>
 800623c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f7ff ffd3 	bl	80061ea <prvInitialiseMutex>

		return xNewQueue;
 8006244:	68fb      	ldr	r3, [r7, #12]
	}
 8006246:	4618      	mov	r0, r3
 8006248:	3718      	adds	r7, #24
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800624e:	b580      	push	{r7, lr}
 8006250:	b088      	sub	sp, #32
 8006252:	af02      	add	r7, sp, #8
 8006254:	4603      	mov	r3, r0
 8006256:	6039      	str	r1, [r7, #0]
 8006258:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800625a:	2301      	movs	r3, #1
 800625c:	617b      	str	r3, [r7, #20]
 800625e:	2300      	movs	r3, #0
 8006260:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006262:	79fb      	ldrb	r3, [r7, #7]
 8006264:	9300      	str	r3, [sp, #0]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	2200      	movs	r2, #0
 800626a:	6939      	ldr	r1, [r7, #16]
 800626c:	6978      	ldr	r0, [r7, #20]
 800626e:	f7ff fee7 	bl	8006040 <xQueueGenericCreateStatic>
 8006272:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f7ff ffb8 	bl	80061ea <prvInitialiseMutex>

		return xNewQueue;
 800627a:	68fb      	ldr	r3, [r7, #12]
	}
 800627c:	4618      	mov	r0, r3
 800627e:	3718      	adds	r7, #24
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006284:	b590      	push	{r4, r7, lr}
 8006286:	b087      	sub	sp, #28
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10a      	bne.n	80062ac <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8006296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629a:	f383 8811 	msr	BASEPRI, r3
 800629e:	f3bf 8f6f 	isb	sy
 80062a2:	f3bf 8f4f 	dsb	sy
 80062a6:	60fb      	str	r3, [r7, #12]
}
 80062a8:	bf00      	nop
 80062aa:	e7fe      	b.n	80062aa <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	689c      	ldr	r4, [r3, #8]
 80062b0:	f001 fd52 	bl	8007d58 <xTaskGetCurrentTaskHandle>
 80062b4:	4603      	mov	r3, r0
 80062b6:	429c      	cmp	r4, r3
 80062b8:	d111      	bne.n	80062de <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	1e5a      	subs	r2, r3, #1
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d105      	bne.n	80062d8 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80062cc:	2300      	movs	r3, #0
 80062ce:	2200      	movs	r2, #0
 80062d0:	2100      	movs	r1, #0
 80062d2:	6938      	ldr	r0, [r7, #16]
 80062d4:	f000 f8aa 	bl	800642c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80062d8:	2301      	movs	r3, #1
 80062da:	617b      	str	r3, [r7, #20]
 80062dc:	e001      	b.n	80062e2 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80062de:	2300      	movs	r3, #0
 80062e0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80062e2:	697b      	ldr	r3, [r7, #20]
	}
 80062e4:	4618      	mov	r0, r3
 80062e6:	371c      	adds	r7, #28
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd90      	pop	{r4, r7, pc}

080062ec <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80062ec:	b590      	push	{r4, r7, lr}
 80062ee:	b087      	sub	sp, #28
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10a      	bne.n	8006316 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8006300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006304:	f383 8811 	msr	BASEPRI, r3
 8006308:	f3bf 8f6f 	isb	sy
 800630c:	f3bf 8f4f 	dsb	sy
 8006310:	60fb      	str	r3, [r7, #12]
}
 8006312:	bf00      	nop
 8006314:	e7fe      	b.n	8006314 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	689c      	ldr	r4, [r3, #8]
 800631a:	f001 fd1d 	bl	8007d58 <xTaskGetCurrentTaskHandle>
 800631e:	4603      	mov	r3, r0
 8006320:	429c      	cmp	r4, r3
 8006322:	d107      	bne.n	8006334 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	1c5a      	adds	r2, r3, #1
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800632e:	2301      	movs	r3, #1
 8006330:	617b      	str	r3, [r7, #20]
 8006332:	e00c      	b.n	800634e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006334:	6839      	ldr	r1, [r7, #0]
 8006336:	6938      	ldr	r0, [r7, #16]
 8006338:	f000 fb7e 	bl	8006a38 <xQueueSemaphoreTake>
 800633c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d004      	beq.n	800634e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	1c5a      	adds	r2, r3, #1
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800634e:	697b      	ldr	r3, [r7, #20]
	}
 8006350:	4618      	mov	r0, r3
 8006352:	371c      	adds	r7, #28
 8006354:	46bd      	mov	sp, r7
 8006356:	bd90      	pop	{r4, r7, pc}

08006358 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006358:	b580      	push	{r7, lr}
 800635a:	b08a      	sub	sp, #40	; 0x28
 800635c:	af02      	add	r7, sp, #8
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10a      	bne.n	8006380 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800636a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636e:	f383 8811 	msr	BASEPRI, r3
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	f3bf 8f4f 	dsb	sy
 800637a:	61bb      	str	r3, [r7, #24]
}
 800637c:	bf00      	nop
 800637e:	e7fe      	b.n	800637e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006380:	68ba      	ldr	r2, [r7, #8]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	429a      	cmp	r2, r3
 8006386:	d90a      	bls.n	800639e <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638c:	f383 8811 	msr	BASEPRI, r3
 8006390:	f3bf 8f6f 	isb	sy
 8006394:	f3bf 8f4f 	dsb	sy
 8006398:	617b      	str	r3, [r7, #20]
}
 800639a:	bf00      	nop
 800639c:	e7fe      	b.n	800639c <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800639e:	2302      	movs	r3, #2
 80063a0:	9300      	str	r3, [sp, #0]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	2100      	movs	r1, #0
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	f7ff fe49 	bl	8006040 <xQueueGenericCreateStatic>
 80063ae:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d002      	beq.n	80063bc <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80063bc:	69fb      	ldr	r3, [r7, #28]
	}
 80063be:	4618      	mov	r0, r3
 80063c0:	3720      	adds	r7, #32
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b086      	sub	sp, #24
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
 80063ce:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10a      	bne.n	80063ec <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80063d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063da:	f383 8811 	msr	BASEPRI, r3
 80063de:	f3bf 8f6f 	isb	sy
 80063e2:	f3bf 8f4f 	dsb	sy
 80063e6:	613b      	str	r3, [r7, #16]
}
 80063e8:	bf00      	nop
 80063ea:	e7fe      	b.n	80063ea <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80063ec:	683a      	ldr	r2, [r7, #0]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d90a      	bls.n	800640a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80063f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f8:	f383 8811 	msr	BASEPRI, r3
 80063fc:	f3bf 8f6f 	isb	sy
 8006400:	f3bf 8f4f 	dsb	sy
 8006404:	60fb      	str	r3, [r7, #12]
}
 8006406:	bf00      	nop
 8006408:	e7fe      	b.n	8006408 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800640a:	2202      	movs	r2, #2
 800640c:	2100      	movs	r1, #0
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f7ff fe8e 	bl	8006130 <xQueueGenericCreate>
 8006414:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d002      	beq.n	8006422 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	683a      	ldr	r2, [r7, #0]
 8006420:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006422:	697b      	ldr	r3, [r7, #20]
	}
 8006424:	4618      	mov	r0, r3
 8006426:	3718      	adds	r7, #24
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b08e      	sub	sp, #56	; 0x38
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]
 8006438:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800643a:	2300      	movs	r3, #0
 800643c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006444:	2b00      	cmp	r3, #0
 8006446:	d10a      	bne.n	800645e <xQueueGenericSend+0x32>
	__asm volatile
 8006448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644c:	f383 8811 	msr	BASEPRI, r3
 8006450:	f3bf 8f6f 	isb	sy
 8006454:	f3bf 8f4f 	dsb	sy
 8006458:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800645a:	bf00      	nop
 800645c:	e7fe      	b.n	800645c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d103      	bne.n	800646c <xQueueGenericSend+0x40>
 8006464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006468:	2b00      	cmp	r3, #0
 800646a:	d101      	bne.n	8006470 <xQueueGenericSend+0x44>
 800646c:	2301      	movs	r3, #1
 800646e:	e000      	b.n	8006472 <xQueueGenericSend+0x46>
 8006470:	2300      	movs	r3, #0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10a      	bne.n	800648c <xQueueGenericSend+0x60>
	__asm volatile
 8006476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647a:	f383 8811 	msr	BASEPRI, r3
 800647e:	f3bf 8f6f 	isb	sy
 8006482:	f3bf 8f4f 	dsb	sy
 8006486:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006488:	bf00      	nop
 800648a:	e7fe      	b.n	800648a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	2b02      	cmp	r3, #2
 8006490:	d103      	bne.n	800649a <xQueueGenericSend+0x6e>
 8006492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006496:	2b01      	cmp	r3, #1
 8006498:	d101      	bne.n	800649e <xQueueGenericSend+0x72>
 800649a:	2301      	movs	r3, #1
 800649c:	e000      	b.n	80064a0 <xQueueGenericSend+0x74>
 800649e:	2300      	movs	r3, #0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d10a      	bne.n	80064ba <xQueueGenericSend+0x8e>
	__asm volatile
 80064a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a8:	f383 8811 	msr	BASEPRI, r3
 80064ac:	f3bf 8f6f 	isb	sy
 80064b0:	f3bf 8f4f 	dsb	sy
 80064b4:	623b      	str	r3, [r7, #32]
}
 80064b6:	bf00      	nop
 80064b8:	e7fe      	b.n	80064b8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064ba:	f001 fc5d 	bl	8007d78 <xTaskGetSchedulerState>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d102      	bne.n	80064ca <xQueueGenericSend+0x9e>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d101      	bne.n	80064ce <xQueueGenericSend+0xa2>
 80064ca:	2301      	movs	r3, #1
 80064cc:	e000      	b.n	80064d0 <xQueueGenericSend+0xa4>
 80064ce:	2300      	movs	r3, #0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10a      	bne.n	80064ea <xQueueGenericSend+0xbe>
	__asm volatile
 80064d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d8:	f383 8811 	msr	BASEPRI, r3
 80064dc:	f3bf 8f6f 	isb	sy
 80064e0:	f3bf 8f4f 	dsb	sy
 80064e4:	61fb      	str	r3, [r7, #28]
}
 80064e6:	bf00      	nop
 80064e8:	e7fe      	b.n	80064e8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80064ea:	f002 fa9b 	bl	8008a24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80064ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d302      	bcc.n	8006500 <xQueueGenericSend+0xd4>
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d129      	bne.n	8006554 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006500:	683a      	ldr	r2, [r7, #0]
 8006502:	68b9      	ldr	r1, [r7, #8]
 8006504:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006506:	f000 fc5e 	bl	8006dc6 <prvCopyDataToQueue>
 800650a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800650c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006510:	2b00      	cmp	r3, #0
 8006512:	d010      	beq.n	8006536 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006516:	3324      	adds	r3, #36	; 0x24
 8006518:	4618      	mov	r0, r3
 800651a:	f001 fa5f 	bl	80079dc <xTaskRemoveFromEventList>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d013      	beq.n	800654c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006524:	4b3f      	ldr	r3, [pc, #252]	; (8006624 <xQueueGenericSend+0x1f8>)
 8006526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800652a:	601a      	str	r2, [r3, #0]
 800652c:	f3bf 8f4f 	dsb	sy
 8006530:	f3bf 8f6f 	isb	sy
 8006534:	e00a      	b.n	800654c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006538:	2b00      	cmp	r3, #0
 800653a:	d007      	beq.n	800654c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800653c:	4b39      	ldr	r3, [pc, #228]	; (8006624 <xQueueGenericSend+0x1f8>)
 800653e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006542:	601a      	str	r2, [r3, #0]
 8006544:	f3bf 8f4f 	dsb	sy
 8006548:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800654c:	f002 fa9a 	bl	8008a84 <vPortExitCritical>
				return pdPASS;
 8006550:	2301      	movs	r3, #1
 8006552:	e063      	b.n	800661c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d103      	bne.n	8006562 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800655a:	f002 fa93 	bl	8008a84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800655e:	2300      	movs	r3, #0
 8006560:	e05c      	b.n	800661c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006564:	2b00      	cmp	r3, #0
 8006566:	d106      	bne.n	8006576 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006568:	f107 0314 	add.w	r3, r7, #20
 800656c:	4618      	mov	r0, r3
 800656e:	f001 fa99 	bl	8007aa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006572:	2301      	movs	r3, #1
 8006574:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006576:	f002 fa85 	bl	8008a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800657a:	f000 fff9 	bl	8007570 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800657e:	f002 fa51 	bl	8008a24 <vPortEnterCritical>
 8006582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006584:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006588:	b25b      	sxtb	r3, r3
 800658a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800658e:	d103      	bne.n	8006598 <xQueueGenericSend+0x16c>
 8006590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006592:	2200      	movs	r2, #0
 8006594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800659e:	b25b      	sxtb	r3, r3
 80065a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a4:	d103      	bne.n	80065ae <xQueueGenericSend+0x182>
 80065a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065ae:	f002 fa69 	bl	8008a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065b2:	1d3a      	adds	r2, r7, #4
 80065b4:	f107 0314 	add.w	r3, r7, #20
 80065b8:	4611      	mov	r1, r2
 80065ba:	4618      	mov	r0, r3
 80065bc:	f001 fa88 	bl	8007ad0 <xTaskCheckForTimeOut>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d124      	bne.n	8006610 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80065c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065c8:	f000 fcf5 	bl	8006fb6 <prvIsQueueFull>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d018      	beq.n	8006604 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80065d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d4:	3310      	adds	r3, #16
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	4611      	mov	r1, r2
 80065da:	4618      	mov	r0, r3
 80065dc:	f001 f9ae 	bl	800793c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80065e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065e2:	f000 fc80 	bl	8006ee6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80065e6:	f000 ffd1 	bl	800758c <xTaskResumeAll>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f47f af7c 	bne.w	80064ea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80065f2:	4b0c      	ldr	r3, [pc, #48]	; (8006624 <xQueueGenericSend+0x1f8>)
 80065f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065f8:	601a      	str	r2, [r3, #0]
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	f3bf 8f6f 	isb	sy
 8006602:	e772      	b.n	80064ea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006604:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006606:	f000 fc6e 	bl	8006ee6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800660a:	f000 ffbf 	bl	800758c <xTaskResumeAll>
 800660e:	e76c      	b.n	80064ea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006610:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006612:	f000 fc68 	bl	8006ee6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006616:	f000 ffb9 	bl	800758c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800661a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800661c:	4618      	mov	r0, r3
 800661e:	3738      	adds	r7, #56	; 0x38
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	e000ed04 	.word	0xe000ed04

08006628 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b090      	sub	sp, #64	; 0x40
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
 8006634:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800663a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663c:	2b00      	cmp	r3, #0
 800663e:	d10a      	bne.n	8006656 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006644:	f383 8811 	msr	BASEPRI, r3
 8006648:	f3bf 8f6f 	isb	sy
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006652:	bf00      	nop
 8006654:	e7fe      	b.n	8006654 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d103      	bne.n	8006664 <xQueueGenericSendFromISR+0x3c>
 800665c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006660:	2b00      	cmp	r3, #0
 8006662:	d101      	bne.n	8006668 <xQueueGenericSendFromISR+0x40>
 8006664:	2301      	movs	r3, #1
 8006666:	e000      	b.n	800666a <xQueueGenericSendFromISR+0x42>
 8006668:	2300      	movs	r3, #0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10a      	bne.n	8006684 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800666e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006672:	f383 8811 	msr	BASEPRI, r3
 8006676:	f3bf 8f6f 	isb	sy
 800667a:	f3bf 8f4f 	dsb	sy
 800667e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006680:	bf00      	nop
 8006682:	e7fe      	b.n	8006682 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	2b02      	cmp	r3, #2
 8006688:	d103      	bne.n	8006692 <xQueueGenericSendFromISR+0x6a>
 800668a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800668e:	2b01      	cmp	r3, #1
 8006690:	d101      	bne.n	8006696 <xQueueGenericSendFromISR+0x6e>
 8006692:	2301      	movs	r3, #1
 8006694:	e000      	b.n	8006698 <xQueueGenericSendFromISR+0x70>
 8006696:	2300      	movs	r3, #0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d10a      	bne.n	80066b2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800669c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a0:	f383 8811 	msr	BASEPRI, r3
 80066a4:	f3bf 8f6f 	isb	sy
 80066a8:	f3bf 8f4f 	dsb	sy
 80066ac:	623b      	str	r3, [r7, #32]
}
 80066ae:	bf00      	nop
 80066b0:	e7fe      	b.n	80066b0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80066b2:	f002 fa99 	bl	8008be8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80066b6:	f3ef 8211 	mrs	r2, BASEPRI
 80066ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066be:	f383 8811 	msr	BASEPRI, r3
 80066c2:	f3bf 8f6f 	isb	sy
 80066c6:	f3bf 8f4f 	dsb	sy
 80066ca:	61fa      	str	r2, [r7, #28]
 80066cc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80066ce:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80066d0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80066d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066da:	429a      	cmp	r2, r3
 80066dc:	d302      	bcc.n	80066e4 <xQueueGenericSendFromISR+0xbc>
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d12f      	bne.n	8006744 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80066e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80066f4:	683a      	ldr	r2, [r7, #0]
 80066f6:	68b9      	ldr	r1, [r7, #8]
 80066f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80066fa:	f000 fb64 	bl	8006dc6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80066fe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006706:	d112      	bne.n	800672e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670c:	2b00      	cmp	r3, #0
 800670e:	d016      	beq.n	800673e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006712:	3324      	adds	r3, #36	; 0x24
 8006714:	4618      	mov	r0, r3
 8006716:	f001 f961 	bl	80079dc <xTaskRemoveFromEventList>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00e      	beq.n	800673e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00b      	beq.n	800673e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2201      	movs	r2, #1
 800672a:	601a      	str	r2, [r3, #0]
 800672c:	e007      	b.n	800673e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800672e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006732:	3301      	adds	r3, #1
 8006734:	b2db      	uxtb	r3, r3
 8006736:	b25a      	sxtb	r2, r3
 8006738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800673a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800673e:	2301      	movs	r3, #1
 8006740:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006742:	e001      	b.n	8006748 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006744:	2300      	movs	r3, #0
 8006746:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800674a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006752:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006756:	4618      	mov	r0, r3
 8006758:	3740      	adds	r7, #64	; 0x40
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b08e      	sub	sp, #56	; 0x38
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
 8006766:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800676c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676e:	2b00      	cmp	r3, #0
 8006770:	d10a      	bne.n	8006788 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006776:	f383 8811 	msr	BASEPRI, r3
 800677a:	f3bf 8f6f 	isb	sy
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	623b      	str	r3, [r7, #32]
}
 8006784:	bf00      	nop
 8006786:	e7fe      	b.n	8006786 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00a      	beq.n	80067a6 <xQueueGiveFromISR+0x48>
	__asm volatile
 8006790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006794:	f383 8811 	msr	BASEPRI, r3
 8006798:	f3bf 8f6f 	isb	sy
 800679c:	f3bf 8f4f 	dsb	sy
 80067a0:	61fb      	str	r3, [r7, #28]
}
 80067a2:	bf00      	nop
 80067a4:	e7fe      	b.n	80067a4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80067a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d103      	bne.n	80067b6 <xQueueGiveFromISR+0x58>
 80067ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d101      	bne.n	80067ba <xQueueGiveFromISR+0x5c>
 80067b6:	2301      	movs	r3, #1
 80067b8:	e000      	b.n	80067bc <xQueueGiveFromISR+0x5e>
 80067ba:	2300      	movs	r3, #0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d10a      	bne.n	80067d6 <xQueueGiveFromISR+0x78>
	__asm volatile
 80067c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c4:	f383 8811 	msr	BASEPRI, r3
 80067c8:	f3bf 8f6f 	isb	sy
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	61bb      	str	r3, [r7, #24]
}
 80067d2:	bf00      	nop
 80067d4:	e7fe      	b.n	80067d4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80067d6:	f002 fa07 	bl	8008be8 <vPortValidateInterruptPriority>
	__asm volatile
 80067da:	f3ef 8211 	mrs	r2, BASEPRI
 80067de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e2:	f383 8811 	msr	BASEPRI, r3
 80067e6:	f3bf 8f6f 	isb	sy
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	617a      	str	r2, [r7, #20]
 80067f0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80067f2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80067f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80067fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006800:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006802:	429a      	cmp	r2, r3
 8006804:	d22b      	bcs.n	800685e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006808:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800680c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006812:	1c5a      	adds	r2, r3, #1
 8006814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006816:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006818:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800681c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006820:	d112      	bne.n	8006848 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006826:	2b00      	cmp	r3, #0
 8006828:	d016      	beq.n	8006858 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800682a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682c:	3324      	adds	r3, #36	; 0x24
 800682e:	4618      	mov	r0, r3
 8006830:	f001 f8d4 	bl	80079dc <xTaskRemoveFromEventList>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00e      	beq.n	8006858 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00b      	beq.n	8006858 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	2201      	movs	r2, #1
 8006844:	601a      	str	r2, [r3, #0]
 8006846:	e007      	b.n	8006858 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006848:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800684c:	3301      	adds	r3, #1
 800684e:	b2db      	uxtb	r3, r3
 8006850:	b25a      	sxtb	r2, r3
 8006852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006858:	2301      	movs	r3, #1
 800685a:	637b      	str	r3, [r7, #52]	; 0x34
 800685c:	e001      	b.n	8006862 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800685e:	2300      	movs	r3, #0
 8006860:	637b      	str	r3, [r7, #52]	; 0x34
 8006862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006864:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f383 8811 	msr	BASEPRI, r3
}
 800686c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800686e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006870:	4618      	mov	r0, r3
 8006872:	3738      	adds	r7, #56	; 0x38
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b08c      	sub	sp, #48	; 0x30
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006884:	2300      	movs	r3, #0
 8006886:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800688c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688e:	2b00      	cmp	r3, #0
 8006890:	d10a      	bne.n	80068a8 <xQueueReceive+0x30>
	__asm volatile
 8006892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006896:	f383 8811 	msr	BASEPRI, r3
 800689a:	f3bf 8f6f 	isb	sy
 800689e:	f3bf 8f4f 	dsb	sy
 80068a2:	623b      	str	r3, [r7, #32]
}
 80068a4:	bf00      	nop
 80068a6:	e7fe      	b.n	80068a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d103      	bne.n	80068b6 <xQueueReceive+0x3e>
 80068ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d101      	bne.n	80068ba <xQueueReceive+0x42>
 80068b6:	2301      	movs	r3, #1
 80068b8:	e000      	b.n	80068bc <xQueueReceive+0x44>
 80068ba:	2300      	movs	r3, #0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d10a      	bne.n	80068d6 <xQueueReceive+0x5e>
	__asm volatile
 80068c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c4:	f383 8811 	msr	BASEPRI, r3
 80068c8:	f3bf 8f6f 	isb	sy
 80068cc:	f3bf 8f4f 	dsb	sy
 80068d0:	61fb      	str	r3, [r7, #28]
}
 80068d2:	bf00      	nop
 80068d4:	e7fe      	b.n	80068d4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068d6:	f001 fa4f 	bl	8007d78 <xTaskGetSchedulerState>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d102      	bne.n	80068e6 <xQueueReceive+0x6e>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d101      	bne.n	80068ea <xQueueReceive+0x72>
 80068e6:	2301      	movs	r3, #1
 80068e8:	e000      	b.n	80068ec <xQueueReceive+0x74>
 80068ea:	2300      	movs	r3, #0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d10a      	bne.n	8006906 <xQueueReceive+0x8e>
	__asm volatile
 80068f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f4:	f383 8811 	msr	BASEPRI, r3
 80068f8:	f3bf 8f6f 	isb	sy
 80068fc:	f3bf 8f4f 	dsb	sy
 8006900:	61bb      	str	r3, [r7, #24]
}
 8006902:	bf00      	nop
 8006904:	e7fe      	b.n	8006904 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006906:	f002 f88d 	bl	8008a24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800690a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006912:	2b00      	cmp	r3, #0
 8006914:	d01f      	beq.n	8006956 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006916:	68b9      	ldr	r1, [r7, #8]
 8006918:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800691a:	f000 fabe 	bl	8006e9a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800691e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006920:	1e5a      	subs	r2, r3, #1
 8006922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006924:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00f      	beq.n	800694e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800692e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006930:	3310      	adds	r3, #16
 8006932:	4618      	mov	r0, r3
 8006934:	f001 f852 	bl	80079dc <xTaskRemoveFromEventList>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d007      	beq.n	800694e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800693e:	4b3d      	ldr	r3, [pc, #244]	; (8006a34 <xQueueReceive+0x1bc>)
 8006940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006944:	601a      	str	r2, [r3, #0]
 8006946:	f3bf 8f4f 	dsb	sy
 800694a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800694e:	f002 f899 	bl	8008a84 <vPortExitCritical>
				return pdPASS;
 8006952:	2301      	movs	r3, #1
 8006954:	e069      	b.n	8006a2a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d103      	bne.n	8006964 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800695c:	f002 f892 	bl	8008a84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006960:	2300      	movs	r3, #0
 8006962:	e062      	b.n	8006a2a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006966:	2b00      	cmp	r3, #0
 8006968:	d106      	bne.n	8006978 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800696a:	f107 0310 	add.w	r3, r7, #16
 800696e:	4618      	mov	r0, r3
 8006970:	f001 f898 	bl	8007aa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006974:	2301      	movs	r3, #1
 8006976:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006978:	f002 f884 	bl	8008a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800697c:	f000 fdf8 	bl	8007570 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006980:	f002 f850 	bl	8008a24 <vPortEnterCritical>
 8006984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006986:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800698a:	b25b      	sxtb	r3, r3
 800698c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006990:	d103      	bne.n	800699a <xQueueReceive+0x122>
 8006992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006994:	2200      	movs	r2, #0
 8006996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800699a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069a0:	b25b      	sxtb	r3, r3
 80069a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069a6:	d103      	bne.n	80069b0 <xQueueReceive+0x138>
 80069a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069b0:	f002 f868 	bl	8008a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80069b4:	1d3a      	adds	r2, r7, #4
 80069b6:	f107 0310 	add.w	r3, r7, #16
 80069ba:	4611      	mov	r1, r2
 80069bc:	4618      	mov	r0, r3
 80069be:	f001 f887 	bl	8007ad0 <xTaskCheckForTimeOut>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d123      	bne.n	8006a10 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069ca:	f000 fade 	bl	8006f8a <prvIsQueueEmpty>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d017      	beq.n	8006a04 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80069d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d6:	3324      	adds	r3, #36	; 0x24
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	4611      	mov	r1, r2
 80069dc:	4618      	mov	r0, r3
 80069de:	f000 ffad 	bl	800793c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80069e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069e4:	f000 fa7f 	bl	8006ee6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80069e8:	f000 fdd0 	bl	800758c <xTaskResumeAll>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d189      	bne.n	8006906 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80069f2:	4b10      	ldr	r3, [pc, #64]	; (8006a34 <xQueueReceive+0x1bc>)
 80069f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069f8:	601a      	str	r2, [r3, #0]
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	f3bf 8f6f 	isb	sy
 8006a02:	e780      	b.n	8006906 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006a04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a06:	f000 fa6e 	bl	8006ee6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a0a:	f000 fdbf 	bl	800758c <xTaskResumeAll>
 8006a0e:	e77a      	b.n	8006906 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006a10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a12:	f000 fa68 	bl	8006ee6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a16:	f000 fdb9 	bl	800758c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a1c:	f000 fab5 	bl	8006f8a <prvIsQueueEmpty>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f43f af6f 	beq.w	8006906 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006a28:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3730      	adds	r7, #48	; 0x30
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	e000ed04 	.word	0xe000ed04

08006a38 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b08e      	sub	sp, #56	; 0x38
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006a42:	2300      	movs	r3, #0
 8006a44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d10a      	bne.n	8006a6a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a58:	f383 8811 	msr	BASEPRI, r3
 8006a5c:	f3bf 8f6f 	isb	sy
 8006a60:	f3bf 8f4f 	dsb	sy
 8006a64:	623b      	str	r3, [r7, #32]
}
 8006a66:	bf00      	nop
 8006a68:	e7fe      	b.n	8006a68 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00a      	beq.n	8006a88 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a76:	f383 8811 	msr	BASEPRI, r3
 8006a7a:	f3bf 8f6f 	isb	sy
 8006a7e:	f3bf 8f4f 	dsb	sy
 8006a82:	61fb      	str	r3, [r7, #28]
}
 8006a84:	bf00      	nop
 8006a86:	e7fe      	b.n	8006a86 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a88:	f001 f976 	bl	8007d78 <xTaskGetSchedulerState>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d102      	bne.n	8006a98 <xQueueSemaphoreTake+0x60>
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d101      	bne.n	8006a9c <xQueueSemaphoreTake+0x64>
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e000      	b.n	8006a9e <xQueueSemaphoreTake+0x66>
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d10a      	bne.n	8006ab8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa6:	f383 8811 	msr	BASEPRI, r3
 8006aaa:	f3bf 8f6f 	isb	sy
 8006aae:	f3bf 8f4f 	dsb	sy
 8006ab2:	61bb      	str	r3, [r7, #24]
}
 8006ab4:	bf00      	nop
 8006ab6:	e7fe      	b.n	8006ab6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ab8:	f001 ffb4 	bl	8008a24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d024      	beq.n	8006b12 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aca:	1e5a      	subs	r2, r3, #1
 8006acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ace:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d104      	bne.n	8006ae2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006ad8:	f001 fac4 	bl	8008064 <pvTaskIncrementMutexHeldCount>
 8006adc:	4602      	mov	r2, r0
 8006ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00f      	beq.n	8006b0a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aec:	3310      	adds	r3, #16
 8006aee:	4618      	mov	r0, r3
 8006af0:	f000 ff74 	bl	80079dc <xTaskRemoveFromEventList>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d007      	beq.n	8006b0a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006afa:	4b54      	ldr	r3, [pc, #336]	; (8006c4c <xQueueSemaphoreTake+0x214>)
 8006afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b00:	601a      	str	r2, [r3, #0]
 8006b02:	f3bf 8f4f 	dsb	sy
 8006b06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006b0a:	f001 ffbb 	bl	8008a84 <vPortExitCritical>
				return pdPASS;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e097      	b.n	8006c42 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d111      	bne.n	8006b3c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00a      	beq.n	8006b34 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b22:	f383 8811 	msr	BASEPRI, r3
 8006b26:	f3bf 8f6f 	isb	sy
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	617b      	str	r3, [r7, #20]
}
 8006b30:	bf00      	nop
 8006b32:	e7fe      	b.n	8006b32 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006b34:	f001 ffa6 	bl	8008a84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	e082      	b.n	8006c42 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d106      	bne.n	8006b50 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b42:	f107 030c 	add.w	r3, r7, #12
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 ffac 	bl	8007aa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b50:	f001 ff98 	bl	8008a84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b54:	f000 fd0c 	bl	8007570 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b58:	f001 ff64 	bl	8008a24 <vPortEnterCritical>
 8006b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b62:	b25b      	sxtb	r3, r3
 8006b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b68:	d103      	bne.n	8006b72 <xQueueSemaphoreTake+0x13a>
 8006b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b78:	b25b      	sxtb	r3, r3
 8006b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b7e:	d103      	bne.n	8006b88 <xQueueSemaphoreTake+0x150>
 8006b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b88:	f001 ff7c 	bl	8008a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b8c:	463a      	mov	r2, r7
 8006b8e:	f107 030c 	add.w	r3, r7, #12
 8006b92:	4611      	mov	r1, r2
 8006b94:	4618      	mov	r0, r3
 8006b96:	f000 ff9b 	bl	8007ad0 <xTaskCheckForTimeOut>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d132      	bne.n	8006c06 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ba0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ba2:	f000 f9f2 	bl	8006f8a <prvIsQueueEmpty>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d026      	beq.n	8006bfa <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d109      	bne.n	8006bc8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006bb4:	f001 ff36 	bl	8008a24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f001 f8f9 	bl	8007db4 <xTaskPriorityInherit>
 8006bc2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006bc4:	f001 ff5e 	bl	8008a84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bca:	3324      	adds	r3, #36	; 0x24
 8006bcc:	683a      	ldr	r2, [r7, #0]
 8006bce:	4611      	mov	r1, r2
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f000 feb3 	bl	800793c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006bd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006bd8:	f000 f985 	bl	8006ee6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006bdc:	f000 fcd6 	bl	800758c <xTaskResumeAll>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f47f af68 	bne.w	8006ab8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006be8:	4b18      	ldr	r3, [pc, #96]	; (8006c4c <xQueueSemaphoreTake+0x214>)
 8006bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bee:	601a      	str	r2, [r3, #0]
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	f3bf 8f6f 	isb	sy
 8006bf8:	e75e      	b.n	8006ab8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006bfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006bfc:	f000 f973 	bl	8006ee6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c00:	f000 fcc4 	bl	800758c <xTaskResumeAll>
 8006c04:	e758      	b.n	8006ab8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006c06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c08:	f000 f96d 	bl	8006ee6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c0c:	f000 fcbe 	bl	800758c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c12:	f000 f9ba 	bl	8006f8a <prvIsQueueEmpty>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f43f af4d 	beq.w	8006ab8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00d      	beq.n	8006c40 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006c24:	f001 fefe 	bl	8008a24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006c28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c2a:	f000 f8b4 	bl	8006d96 <prvGetDisinheritPriorityAfterTimeout>
 8006c2e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c36:	4618      	mov	r0, r3
 8006c38:	f001 f992 	bl	8007f60 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006c3c:	f001 ff22 	bl	8008a84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006c40:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3738      	adds	r7, #56	; 0x38
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	e000ed04 	.word	0xe000ed04

08006c50 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b08e      	sub	sp, #56	; 0x38
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d10a      	bne.n	8006c7c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6a:	f383 8811 	msr	BASEPRI, r3
 8006c6e:	f3bf 8f6f 	isb	sy
 8006c72:	f3bf 8f4f 	dsb	sy
 8006c76:	623b      	str	r3, [r7, #32]
}
 8006c78:	bf00      	nop
 8006c7a:	e7fe      	b.n	8006c7a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d103      	bne.n	8006c8a <xQueueReceiveFromISR+0x3a>
 8006c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <xQueueReceiveFromISR+0x3e>
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e000      	b.n	8006c90 <xQueueReceiveFromISR+0x40>
 8006c8e:	2300      	movs	r3, #0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d10a      	bne.n	8006caa <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c98:	f383 8811 	msr	BASEPRI, r3
 8006c9c:	f3bf 8f6f 	isb	sy
 8006ca0:	f3bf 8f4f 	dsb	sy
 8006ca4:	61fb      	str	r3, [r7, #28]
}
 8006ca6:	bf00      	nop
 8006ca8:	e7fe      	b.n	8006ca8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006caa:	f001 ff9d 	bl	8008be8 <vPortValidateInterruptPriority>
	__asm volatile
 8006cae:	f3ef 8211 	mrs	r2, BASEPRI
 8006cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb6:	f383 8811 	msr	BASEPRI, r3
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	61ba      	str	r2, [r7, #24]
 8006cc4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006cc6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d02f      	beq.n	8006d36 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006ce0:	68b9      	ldr	r1, [r7, #8]
 8006ce2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ce4:	f000 f8d9 	bl	8006e9a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cea:	1e5a      	subs	r2, r3, #1
 8006cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cee:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006cf0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cf8:	d112      	bne.n	8006d20 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d016      	beq.n	8006d30 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d04:	3310      	adds	r3, #16
 8006d06:	4618      	mov	r0, r3
 8006d08:	f000 fe68 	bl	80079dc <xTaskRemoveFromEventList>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00e      	beq.n	8006d30 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00b      	beq.n	8006d30 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	601a      	str	r2, [r3, #0]
 8006d1e:	e007      	b.n	8006d30 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006d20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d24:	3301      	adds	r3, #1
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	b25a      	sxtb	r2, r3
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006d30:	2301      	movs	r3, #1
 8006d32:	637b      	str	r3, [r7, #52]	; 0x34
 8006d34:	e001      	b.n	8006d3a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006d36:	2300      	movs	r3, #0
 8006d38:	637b      	str	r3, [r7, #52]	; 0x34
 8006d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d3c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	f383 8811 	msr	BASEPRI, r3
}
 8006d44:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3738      	adds	r7, #56	; 0x38
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10a      	bne.n	8006d78 <vQueueDelete+0x28>
	__asm volatile
 8006d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d66:	f383 8811 	msr	BASEPRI, r3
 8006d6a:	f3bf 8f6f 	isb	sy
 8006d6e:	f3bf 8f4f 	dsb	sy
 8006d72:	60bb      	str	r3, [r7, #8]
}
 8006d74:	bf00      	nop
 8006d76:	e7fe      	b.n	8006d76 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006d78:	68f8      	ldr	r0, [r7, #12]
 8006d7a:	f000 f95f 	bl	800703c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d102      	bne.n	8006d8e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f002 f839 	bl	8008e00 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006d8e:	bf00      	nop
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006d96:	b480      	push	{r7}
 8006d98:	b085      	sub	sp, #20
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d006      	beq.n	8006db4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006db0:	60fb      	str	r3, [r7, #12]
 8006db2:	e001      	b.n	8006db8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006db4:	2300      	movs	r3, #0
 8006db6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006db8:	68fb      	ldr	r3, [r7, #12]
	}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3714      	adds	r7, #20
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr

08006dc6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b086      	sub	sp, #24
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	60f8      	str	r0, [r7, #12]
 8006dce:	60b9      	str	r1, [r7, #8]
 8006dd0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dda:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10d      	bne.n	8006e00 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d14d      	bne.n	8006e88 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	4618      	mov	r0, r3
 8006df2:	f001 f847 	bl	8007e84 <xTaskPriorityDisinherit>
 8006df6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	609a      	str	r2, [r3, #8]
 8006dfe:	e043      	b.n	8006e88 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d119      	bne.n	8006e3a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6858      	ldr	r0, [r3, #4]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0e:	461a      	mov	r2, r3
 8006e10:	68b9      	ldr	r1, [r7, #8]
 8006e12:	f00e fb8f 	bl	8015534 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	685a      	ldr	r2, [r3, #4]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1e:	441a      	add	r2, r3
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	685a      	ldr	r2, [r3, #4]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d32b      	bcc.n	8006e88 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	605a      	str	r2, [r3, #4]
 8006e38:	e026      	b.n	8006e88 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	68d8      	ldr	r0, [r3, #12]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e42:	461a      	mov	r2, r3
 8006e44:	68b9      	ldr	r1, [r7, #8]
 8006e46:	f00e fb75 	bl	8015534 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	68da      	ldr	r2, [r3, #12]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e52:	425b      	negs	r3, r3
 8006e54:	441a      	add	r2, r3
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	68da      	ldr	r2, [r3, #12]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d207      	bcs.n	8006e76 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	689a      	ldr	r2, [r3, #8]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6e:	425b      	negs	r3, r3
 8006e70:	441a      	add	r2, r3
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	d105      	bne.n	8006e88 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d002      	beq.n	8006e88 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	3b01      	subs	r3, #1
 8006e86:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	1c5a      	adds	r2, r3, #1
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006e90:	697b      	ldr	r3, [r7, #20]
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3718      	adds	r7, #24
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b082      	sub	sp, #8
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
 8006ea2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d018      	beq.n	8006ede <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	68da      	ldr	r2, [r3, #12]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb4:	441a      	add	r2, r3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	68da      	ldr	r2, [r3, #12]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d303      	bcc.n	8006ece <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	68d9      	ldr	r1, [r3, #12]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	6838      	ldr	r0, [r7, #0]
 8006eda:	f00e fb2b 	bl	8015534 <memcpy>
	}
}
 8006ede:	bf00      	nop
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b084      	sub	sp, #16
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006eee:	f001 fd99 	bl	8008a24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ef8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006efa:	e011      	b.n	8006f20 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d012      	beq.n	8006f2a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	3324      	adds	r3, #36	; 0x24
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f000 fd67 	bl	80079dc <xTaskRemoveFromEventList>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d001      	beq.n	8006f18 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006f14:	f000 fe3e 	bl	8007b94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006f18:	7bfb      	ldrb	r3, [r7, #15]
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	dce9      	bgt.n	8006efc <prvUnlockQueue+0x16>
 8006f28:	e000      	b.n	8006f2c <prvUnlockQueue+0x46>
					break;
 8006f2a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	22ff      	movs	r2, #255	; 0xff
 8006f30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006f34:	f001 fda6 	bl	8008a84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006f38:	f001 fd74 	bl	8008a24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f42:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f44:	e011      	b.n	8006f6a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d012      	beq.n	8006f74 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	3310      	adds	r3, #16
 8006f52:	4618      	mov	r0, r3
 8006f54:	f000 fd42 	bl	80079dc <xTaskRemoveFromEventList>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d001      	beq.n	8006f62 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006f5e:	f000 fe19 	bl	8007b94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006f62:	7bbb      	ldrb	r3, [r7, #14]
 8006f64:	3b01      	subs	r3, #1
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	dce9      	bgt.n	8006f46 <prvUnlockQueue+0x60>
 8006f72:	e000      	b.n	8006f76 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006f74:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	22ff      	movs	r2, #255	; 0xff
 8006f7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006f7e:	f001 fd81 	bl	8008a84 <vPortExitCritical>
}
 8006f82:	bf00      	nop
 8006f84:	3710      	adds	r7, #16
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b084      	sub	sp, #16
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f92:	f001 fd47 	bl	8008a24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d102      	bne.n	8006fa4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	60fb      	str	r3, [r7, #12]
 8006fa2:	e001      	b.n	8006fa8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006fa8:	f001 fd6c 	bl	8008a84 <vPortExitCritical>

	return xReturn;
 8006fac:	68fb      	ldr	r3, [r7, #12]
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b084      	sub	sp, #16
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006fbe:	f001 fd31 	bl	8008a24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d102      	bne.n	8006fd4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	60fb      	str	r3, [r7, #12]
 8006fd2:	e001      	b.n	8006fd8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006fd8:	f001 fd54 	bl	8008a84 <vPortExitCritical>

	return xReturn;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
	...

08006fe8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006fe8:	b480      	push	{r7}
 8006fea:	b085      	sub	sp, #20
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	60fb      	str	r3, [r7, #12]
 8006ff6:	e014      	b.n	8007022 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006ff8:	4a0f      	ldr	r2, [pc, #60]	; (8007038 <vQueueAddToRegistry+0x50>)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d10b      	bne.n	800701c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007004:	490c      	ldr	r1, [pc, #48]	; (8007038 <vQueueAddToRegistry+0x50>)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	683a      	ldr	r2, [r7, #0]
 800700a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800700e:	4a0a      	ldr	r2, [pc, #40]	; (8007038 <vQueueAddToRegistry+0x50>)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	00db      	lsls	r3, r3, #3
 8007014:	4413      	add	r3, r2
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800701a:	e006      	b.n	800702a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	3301      	adds	r3, #1
 8007020:	60fb      	str	r3, [r7, #12]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2b07      	cmp	r3, #7
 8007026:	d9e7      	bls.n	8006ff8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007028:	bf00      	nop
 800702a:	bf00      	nop
 800702c:	3714      	adds	r7, #20
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	20005960 	.word	0x20005960

0800703c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007044:	2300      	movs	r3, #0
 8007046:	60fb      	str	r3, [r7, #12]
 8007048:	e016      	b.n	8007078 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800704a:	4a10      	ldr	r2, [pc, #64]	; (800708c <vQueueUnregisterQueue+0x50>)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	00db      	lsls	r3, r3, #3
 8007050:	4413      	add	r3, r2
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	429a      	cmp	r2, r3
 8007058:	d10b      	bne.n	8007072 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800705a:	4a0c      	ldr	r2, [pc, #48]	; (800708c <vQueueUnregisterQueue+0x50>)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2100      	movs	r1, #0
 8007060:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007064:	4a09      	ldr	r2, [pc, #36]	; (800708c <vQueueUnregisterQueue+0x50>)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	00db      	lsls	r3, r3, #3
 800706a:	4413      	add	r3, r2
 800706c:	2200      	movs	r2, #0
 800706e:	605a      	str	r2, [r3, #4]
				break;
 8007070:	e006      	b.n	8007080 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	3301      	adds	r3, #1
 8007076:	60fb      	str	r3, [r7, #12]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2b07      	cmp	r3, #7
 800707c:	d9e5      	bls.n	800704a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800707e:	bf00      	nop
 8007080:	bf00      	nop
 8007082:	3714      	adds	r7, #20
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr
 800708c:	20005960 	.word	0x20005960

08007090 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80070a0:	f001 fcc0 	bl	8008a24 <vPortEnterCritical>
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070aa:	b25b      	sxtb	r3, r3
 80070ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b0:	d103      	bne.n	80070ba <vQueueWaitForMessageRestricted+0x2a>
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070c0:	b25b      	sxtb	r3, r3
 80070c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c6:	d103      	bne.n	80070d0 <vQueueWaitForMessageRestricted+0x40>
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070d0:	f001 fcd8 	bl	8008a84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d106      	bne.n	80070ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	3324      	adds	r3, #36	; 0x24
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	68b9      	ldr	r1, [r7, #8]
 80070e4:	4618      	mov	r0, r3
 80070e6:	f000 fc4d 	bl	8007984 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80070ea:	6978      	ldr	r0, [r7, #20]
 80070ec:	f7ff fefb 	bl	8006ee6 <prvUnlockQueue>
	}
 80070f0:	bf00      	nop
 80070f2:	3718      	adds	r7, #24
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b08e      	sub	sp, #56	; 0x38
 80070fc:	af04      	add	r7, sp, #16
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	607a      	str	r2, [r7, #4]
 8007104:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007108:	2b00      	cmp	r3, #0
 800710a:	d10a      	bne.n	8007122 <xTaskCreateStatic+0x2a>
	__asm volatile
 800710c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007110:	f383 8811 	msr	BASEPRI, r3
 8007114:	f3bf 8f6f 	isb	sy
 8007118:	f3bf 8f4f 	dsb	sy
 800711c:	623b      	str	r3, [r7, #32]
}
 800711e:	bf00      	nop
 8007120:	e7fe      	b.n	8007120 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007124:	2b00      	cmp	r3, #0
 8007126:	d10a      	bne.n	800713e <xTaskCreateStatic+0x46>
	__asm volatile
 8007128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712c:	f383 8811 	msr	BASEPRI, r3
 8007130:	f3bf 8f6f 	isb	sy
 8007134:	f3bf 8f4f 	dsb	sy
 8007138:	61fb      	str	r3, [r7, #28]
}
 800713a:	bf00      	nop
 800713c:	e7fe      	b.n	800713c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800713e:	235c      	movs	r3, #92	; 0x5c
 8007140:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	2b5c      	cmp	r3, #92	; 0x5c
 8007146:	d00a      	beq.n	800715e <xTaskCreateStatic+0x66>
	__asm volatile
 8007148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714c:	f383 8811 	msr	BASEPRI, r3
 8007150:	f3bf 8f6f 	isb	sy
 8007154:	f3bf 8f4f 	dsb	sy
 8007158:	61bb      	str	r3, [r7, #24]
}
 800715a:	bf00      	nop
 800715c:	e7fe      	b.n	800715c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800715e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007162:	2b00      	cmp	r3, #0
 8007164:	d01e      	beq.n	80071a4 <xTaskCreateStatic+0xac>
 8007166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007168:	2b00      	cmp	r3, #0
 800716a:	d01b      	beq.n	80071a4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800716c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007172:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007174:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007178:	2202      	movs	r2, #2
 800717a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800717e:	2300      	movs	r3, #0
 8007180:	9303      	str	r3, [sp, #12]
 8007182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007184:	9302      	str	r3, [sp, #8]
 8007186:	f107 0314 	add.w	r3, r7, #20
 800718a:	9301      	str	r3, [sp, #4]
 800718c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718e:	9300      	str	r3, [sp, #0]
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	68b9      	ldr	r1, [r7, #8]
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f000 f850 	bl	800723c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800719c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800719e:	f000 f8dd 	bl	800735c <prvAddNewTaskToReadyList>
 80071a2:	e001      	b.n	80071a8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80071a4:	2300      	movs	r3, #0
 80071a6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80071a8:	697b      	ldr	r3, [r7, #20]
	}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3728      	adds	r7, #40	; 0x28
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b08c      	sub	sp, #48	; 0x30
 80071b6:	af04      	add	r7, sp, #16
 80071b8:	60f8      	str	r0, [r7, #12]
 80071ba:	60b9      	str	r1, [r7, #8]
 80071bc:	603b      	str	r3, [r7, #0]
 80071be:	4613      	mov	r3, r2
 80071c0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80071c2:	88fb      	ldrh	r3, [r7, #6]
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	4618      	mov	r0, r3
 80071c8:	f001 fd4e 	bl	8008c68 <pvPortMalloc>
 80071cc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d00e      	beq.n	80071f2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80071d4:	205c      	movs	r0, #92	; 0x5c
 80071d6:	f001 fd47 	bl	8008c68 <pvPortMalloc>
 80071da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d003      	beq.n	80071ea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	697a      	ldr	r2, [r7, #20]
 80071e6:	631a      	str	r2, [r3, #48]	; 0x30
 80071e8:	e005      	b.n	80071f6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80071ea:	6978      	ldr	r0, [r7, #20]
 80071ec:	f001 fe08 	bl	8008e00 <vPortFree>
 80071f0:	e001      	b.n	80071f6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80071f2:	2300      	movs	r3, #0
 80071f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d017      	beq.n	800722c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007204:	88fa      	ldrh	r2, [r7, #6]
 8007206:	2300      	movs	r3, #0
 8007208:	9303      	str	r3, [sp, #12]
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	9302      	str	r3, [sp, #8]
 800720e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007210:	9301      	str	r3, [sp, #4]
 8007212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007214:	9300      	str	r3, [sp, #0]
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	68b9      	ldr	r1, [r7, #8]
 800721a:	68f8      	ldr	r0, [r7, #12]
 800721c:	f000 f80e 	bl	800723c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007220:	69f8      	ldr	r0, [r7, #28]
 8007222:	f000 f89b 	bl	800735c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007226:	2301      	movs	r3, #1
 8007228:	61bb      	str	r3, [r7, #24]
 800722a:	e002      	b.n	8007232 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800722c:	f04f 33ff 	mov.w	r3, #4294967295
 8007230:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007232:	69bb      	ldr	r3, [r7, #24]
	}
 8007234:	4618      	mov	r0, r3
 8007236:	3720      	adds	r7, #32
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b088      	sub	sp, #32
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	607a      	str	r2, [r7, #4]
 8007248:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800724a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	461a      	mov	r2, r3
 8007254:	21a5      	movs	r1, #165	; 0xa5
 8007256:	f00e f97b 	bl	8015550 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800725a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007264:	3b01      	subs	r3, #1
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	4413      	add	r3, r2
 800726a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	f023 0307 	bic.w	r3, r3, #7
 8007272:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	f003 0307 	and.w	r3, r3, #7
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00a      	beq.n	8007294 <prvInitialiseNewTask+0x58>
	__asm volatile
 800727e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007282:	f383 8811 	msr	BASEPRI, r3
 8007286:	f3bf 8f6f 	isb	sy
 800728a:	f3bf 8f4f 	dsb	sy
 800728e:	617b      	str	r3, [r7, #20]
}
 8007290:	bf00      	nop
 8007292:	e7fe      	b.n	8007292 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d01f      	beq.n	80072da <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800729a:	2300      	movs	r3, #0
 800729c:	61fb      	str	r3, [r7, #28]
 800729e:	e012      	b.n	80072c6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80072a0:	68ba      	ldr	r2, [r7, #8]
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	4413      	add	r3, r2
 80072a6:	7819      	ldrb	r1, [r3, #0]
 80072a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	4413      	add	r3, r2
 80072ae:	3334      	adds	r3, #52	; 0x34
 80072b0:	460a      	mov	r2, r1
 80072b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80072b4:	68ba      	ldr	r2, [r7, #8]
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	4413      	add	r3, r2
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d006      	beq.n	80072ce <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	3301      	adds	r3, #1
 80072c4:	61fb      	str	r3, [r7, #28]
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	2b0f      	cmp	r3, #15
 80072ca:	d9e9      	bls.n	80072a0 <prvInitialiseNewTask+0x64>
 80072cc:	e000      	b.n	80072d0 <prvInitialiseNewTask+0x94>
			{
				break;
 80072ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80072d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80072d8:	e003      	b.n	80072e2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80072da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80072e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e4:	2b37      	cmp	r3, #55	; 0x37
 80072e6:	d901      	bls.n	80072ec <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80072e8:	2337      	movs	r3, #55	; 0x37
 80072ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80072ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80072f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80072f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fa:	2200      	movs	r2, #0
 80072fc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80072fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007300:	3304      	adds	r3, #4
 8007302:	4618      	mov	r0, r3
 8007304:	f7fe fda0 	bl	8005e48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730a:	3318      	adds	r3, #24
 800730c:	4618      	mov	r0, r3
 800730e:	f7fe fd9b 	bl	8005e48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007316:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800731e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007320:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007326:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732a:	2200      	movs	r2, #0
 800732c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800732e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007330:	2200      	movs	r2, #0
 8007332:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007336:	683a      	ldr	r2, [r7, #0]
 8007338:	68f9      	ldr	r1, [r7, #12]
 800733a:	69b8      	ldr	r0, [r7, #24]
 800733c:	f001 fa48 	bl	80087d0 <pxPortInitialiseStack>
 8007340:	4602      	mov	r2, r0
 8007342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007344:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007348:	2b00      	cmp	r3, #0
 800734a:	d002      	beq.n	8007352 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800734c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007350:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007352:	bf00      	nop
 8007354:	3720      	adds	r7, #32
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
	...

0800735c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007364:	f001 fb5e 	bl	8008a24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007368:	4b2d      	ldr	r3, [pc, #180]	; (8007420 <prvAddNewTaskToReadyList+0xc4>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	3301      	adds	r3, #1
 800736e:	4a2c      	ldr	r2, [pc, #176]	; (8007420 <prvAddNewTaskToReadyList+0xc4>)
 8007370:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007372:	4b2c      	ldr	r3, [pc, #176]	; (8007424 <prvAddNewTaskToReadyList+0xc8>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d109      	bne.n	800738e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800737a:	4a2a      	ldr	r2, [pc, #168]	; (8007424 <prvAddNewTaskToReadyList+0xc8>)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007380:	4b27      	ldr	r3, [pc, #156]	; (8007420 <prvAddNewTaskToReadyList+0xc4>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2b01      	cmp	r3, #1
 8007386:	d110      	bne.n	80073aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007388:	f000 fc28 	bl	8007bdc <prvInitialiseTaskLists>
 800738c:	e00d      	b.n	80073aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800738e:	4b26      	ldr	r3, [pc, #152]	; (8007428 <prvAddNewTaskToReadyList+0xcc>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d109      	bne.n	80073aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007396:	4b23      	ldr	r3, [pc, #140]	; (8007424 <prvAddNewTaskToReadyList+0xc8>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d802      	bhi.n	80073aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80073a4:	4a1f      	ldr	r2, [pc, #124]	; (8007424 <prvAddNewTaskToReadyList+0xc8>)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80073aa:	4b20      	ldr	r3, [pc, #128]	; (800742c <prvAddNewTaskToReadyList+0xd0>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	3301      	adds	r3, #1
 80073b0:	4a1e      	ldr	r2, [pc, #120]	; (800742c <prvAddNewTaskToReadyList+0xd0>)
 80073b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80073b4:	4b1d      	ldr	r3, [pc, #116]	; (800742c <prvAddNewTaskToReadyList+0xd0>)
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073c0:	4b1b      	ldr	r3, [pc, #108]	; (8007430 <prvAddNewTaskToReadyList+0xd4>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d903      	bls.n	80073d0 <prvAddNewTaskToReadyList+0x74>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073cc:	4a18      	ldr	r2, [pc, #96]	; (8007430 <prvAddNewTaskToReadyList+0xd4>)
 80073ce:	6013      	str	r3, [r2, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073d4:	4613      	mov	r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	4413      	add	r3, r2
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	4a15      	ldr	r2, [pc, #84]	; (8007434 <prvAddNewTaskToReadyList+0xd8>)
 80073de:	441a      	add	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	3304      	adds	r3, #4
 80073e4:	4619      	mov	r1, r3
 80073e6:	4610      	mov	r0, r2
 80073e8:	f7fe fd3b 	bl	8005e62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80073ec:	f001 fb4a 	bl	8008a84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80073f0:	4b0d      	ldr	r3, [pc, #52]	; (8007428 <prvAddNewTaskToReadyList+0xcc>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00e      	beq.n	8007416 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80073f8:	4b0a      	ldr	r3, [pc, #40]	; (8007424 <prvAddNewTaskToReadyList+0xc8>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007402:	429a      	cmp	r2, r3
 8007404:	d207      	bcs.n	8007416 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007406:	4b0c      	ldr	r3, [pc, #48]	; (8007438 <prvAddNewTaskToReadyList+0xdc>)
 8007408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800740c:	601a      	str	r2, [r3, #0]
 800740e:	f3bf 8f4f 	dsb	sy
 8007412:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007416:	bf00      	nop
 8007418:	3708      	adds	r7, #8
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	20005e74 	.word	0x20005e74
 8007424:	200059a0 	.word	0x200059a0
 8007428:	20005e80 	.word	0x20005e80
 800742c:	20005e90 	.word	0x20005e90
 8007430:	20005e7c 	.word	0x20005e7c
 8007434:	200059a4 	.word	0x200059a4
 8007438:	e000ed04 	.word	0xe000ed04

0800743c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007444:	2300      	movs	r3, #0
 8007446:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d017      	beq.n	800747e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800744e:	4b13      	ldr	r3, [pc, #76]	; (800749c <vTaskDelay+0x60>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00a      	beq.n	800746c <vTaskDelay+0x30>
	__asm volatile
 8007456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745a:	f383 8811 	msr	BASEPRI, r3
 800745e:	f3bf 8f6f 	isb	sy
 8007462:	f3bf 8f4f 	dsb	sy
 8007466:	60bb      	str	r3, [r7, #8]
}
 8007468:	bf00      	nop
 800746a:	e7fe      	b.n	800746a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800746c:	f000 f880 	bl	8007570 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007470:	2100      	movs	r1, #0
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 fe0a 	bl	800808c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007478:	f000 f888 	bl	800758c <xTaskResumeAll>
 800747c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d107      	bne.n	8007494 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007484:	4b06      	ldr	r3, [pc, #24]	; (80074a0 <vTaskDelay+0x64>)
 8007486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800748a:	601a      	str	r2, [r3, #0]
 800748c:	f3bf 8f4f 	dsb	sy
 8007490:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007494:	bf00      	nop
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}
 800749c:	20005e9c 	.word	0x20005e9c
 80074a0:	e000ed04 	.word	0xe000ed04

080074a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b08a      	sub	sp, #40	; 0x28
 80074a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80074aa:	2300      	movs	r3, #0
 80074ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80074ae:	2300      	movs	r3, #0
 80074b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80074b2:	463a      	mov	r2, r7
 80074b4:	1d39      	adds	r1, r7, #4
 80074b6:	f107 0308 	add.w	r3, r7, #8
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7fe fc70 	bl	8005da0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80074c0:	6839      	ldr	r1, [r7, #0]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	9202      	str	r2, [sp, #8]
 80074c8:	9301      	str	r3, [sp, #4]
 80074ca:	2300      	movs	r3, #0
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	2300      	movs	r3, #0
 80074d0:	460a      	mov	r2, r1
 80074d2:	4921      	ldr	r1, [pc, #132]	; (8007558 <vTaskStartScheduler+0xb4>)
 80074d4:	4821      	ldr	r0, [pc, #132]	; (800755c <vTaskStartScheduler+0xb8>)
 80074d6:	f7ff fe0f 	bl	80070f8 <xTaskCreateStatic>
 80074da:	4603      	mov	r3, r0
 80074dc:	4a20      	ldr	r2, [pc, #128]	; (8007560 <vTaskStartScheduler+0xbc>)
 80074de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80074e0:	4b1f      	ldr	r3, [pc, #124]	; (8007560 <vTaskStartScheduler+0xbc>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d002      	beq.n	80074ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80074e8:	2301      	movs	r3, #1
 80074ea:	617b      	str	r3, [r7, #20]
 80074ec:	e001      	b.n	80074f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80074ee:	2300      	movs	r3, #0
 80074f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d102      	bne.n	80074fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80074f8:	f000 fe1c 	bl	8008134 <xTimerCreateTimerTask>
 80074fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	2b01      	cmp	r3, #1
 8007502:	d116      	bne.n	8007532 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007508:	f383 8811 	msr	BASEPRI, r3
 800750c:	f3bf 8f6f 	isb	sy
 8007510:	f3bf 8f4f 	dsb	sy
 8007514:	613b      	str	r3, [r7, #16]
}
 8007516:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007518:	4b12      	ldr	r3, [pc, #72]	; (8007564 <vTaskStartScheduler+0xc0>)
 800751a:	f04f 32ff 	mov.w	r2, #4294967295
 800751e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007520:	4b11      	ldr	r3, [pc, #68]	; (8007568 <vTaskStartScheduler+0xc4>)
 8007522:	2201      	movs	r2, #1
 8007524:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007526:	4b11      	ldr	r3, [pc, #68]	; (800756c <vTaskStartScheduler+0xc8>)
 8007528:	2200      	movs	r2, #0
 800752a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800752c:	f001 f9d8 	bl	80088e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007530:	e00e      	b.n	8007550 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007538:	d10a      	bne.n	8007550 <vTaskStartScheduler+0xac>
	__asm volatile
 800753a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800753e:	f383 8811 	msr	BASEPRI, r3
 8007542:	f3bf 8f6f 	isb	sy
 8007546:	f3bf 8f4f 	dsb	sy
 800754a:	60fb      	str	r3, [r7, #12]
}
 800754c:	bf00      	nop
 800754e:	e7fe      	b.n	800754e <vTaskStartScheduler+0xaa>
}
 8007550:	bf00      	nop
 8007552:	3718      	adds	r7, #24
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	08016688 	.word	0x08016688
 800755c:	08007bad 	.word	0x08007bad
 8007560:	20005e98 	.word	0x20005e98
 8007564:	20005e94 	.word	0x20005e94
 8007568:	20005e80 	.word	0x20005e80
 800756c:	20005e78 	.word	0x20005e78

08007570 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007570:	b480      	push	{r7}
 8007572:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007574:	4b04      	ldr	r3, [pc, #16]	; (8007588 <vTaskSuspendAll+0x18>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	3301      	adds	r3, #1
 800757a:	4a03      	ldr	r2, [pc, #12]	; (8007588 <vTaskSuspendAll+0x18>)
 800757c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800757e:	bf00      	nop
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr
 8007588:	20005e9c 	.word	0x20005e9c

0800758c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007592:	2300      	movs	r3, #0
 8007594:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007596:	2300      	movs	r3, #0
 8007598:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800759a:	4b42      	ldr	r3, [pc, #264]	; (80076a4 <xTaskResumeAll+0x118>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10a      	bne.n	80075b8 <xTaskResumeAll+0x2c>
	__asm volatile
 80075a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a6:	f383 8811 	msr	BASEPRI, r3
 80075aa:	f3bf 8f6f 	isb	sy
 80075ae:	f3bf 8f4f 	dsb	sy
 80075b2:	603b      	str	r3, [r7, #0]
}
 80075b4:	bf00      	nop
 80075b6:	e7fe      	b.n	80075b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80075b8:	f001 fa34 	bl	8008a24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80075bc:	4b39      	ldr	r3, [pc, #228]	; (80076a4 <xTaskResumeAll+0x118>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	3b01      	subs	r3, #1
 80075c2:	4a38      	ldr	r2, [pc, #224]	; (80076a4 <xTaskResumeAll+0x118>)
 80075c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075c6:	4b37      	ldr	r3, [pc, #220]	; (80076a4 <xTaskResumeAll+0x118>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d162      	bne.n	8007694 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80075ce:	4b36      	ldr	r3, [pc, #216]	; (80076a8 <xTaskResumeAll+0x11c>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d05e      	beq.n	8007694 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075d6:	e02f      	b.n	8007638 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075d8:	4b34      	ldr	r3, [pc, #208]	; (80076ac <xTaskResumeAll+0x120>)
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	3318      	adds	r3, #24
 80075e4:	4618      	mov	r0, r3
 80075e6:	f7fe fc99 	bl	8005f1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	3304      	adds	r3, #4
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7fe fc94 	bl	8005f1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f8:	4b2d      	ldr	r3, [pc, #180]	; (80076b0 <xTaskResumeAll+0x124>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d903      	bls.n	8007608 <xTaskResumeAll+0x7c>
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007604:	4a2a      	ldr	r2, [pc, #168]	; (80076b0 <xTaskResumeAll+0x124>)
 8007606:	6013      	str	r3, [r2, #0]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800760c:	4613      	mov	r3, r2
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	4413      	add	r3, r2
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	4a27      	ldr	r2, [pc, #156]	; (80076b4 <xTaskResumeAll+0x128>)
 8007616:	441a      	add	r2, r3
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	3304      	adds	r3, #4
 800761c:	4619      	mov	r1, r3
 800761e:	4610      	mov	r0, r2
 8007620:	f7fe fc1f 	bl	8005e62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007628:	4b23      	ldr	r3, [pc, #140]	; (80076b8 <xTaskResumeAll+0x12c>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762e:	429a      	cmp	r2, r3
 8007630:	d302      	bcc.n	8007638 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007632:	4b22      	ldr	r3, [pc, #136]	; (80076bc <xTaskResumeAll+0x130>)
 8007634:	2201      	movs	r2, #1
 8007636:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007638:	4b1c      	ldr	r3, [pc, #112]	; (80076ac <xTaskResumeAll+0x120>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1cb      	bne.n	80075d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d001      	beq.n	800764a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007646:	f000 fb67 	bl	8007d18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800764a:	4b1d      	ldr	r3, [pc, #116]	; (80076c0 <xTaskResumeAll+0x134>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d010      	beq.n	8007678 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007656:	f000 f859 	bl	800770c <xTaskIncrementTick>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d002      	beq.n	8007666 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007660:	4b16      	ldr	r3, [pc, #88]	; (80076bc <xTaskResumeAll+0x130>)
 8007662:	2201      	movs	r2, #1
 8007664:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	3b01      	subs	r3, #1
 800766a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d1f1      	bne.n	8007656 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007672:	4b13      	ldr	r3, [pc, #76]	; (80076c0 <xTaskResumeAll+0x134>)
 8007674:	2200      	movs	r2, #0
 8007676:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007678:	4b10      	ldr	r3, [pc, #64]	; (80076bc <xTaskResumeAll+0x130>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d009      	beq.n	8007694 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007680:	2301      	movs	r3, #1
 8007682:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007684:	4b0f      	ldr	r3, [pc, #60]	; (80076c4 <xTaskResumeAll+0x138>)
 8007686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800768a:	601a      	str	r2, [r3, #0]
 800768c:	f3bf 8f4f 	dsb	sy
 8007690:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007694:	f001 f9f6 	bl	8008a84 <vPortExitCritical>

	return xAlreadyYielded;
 8007698:	68bb      	ldr	r3, [r7, #8]
}
 800769a:	4618      	mov	r0, r3
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	20005e9c 	.word	0x20005e9c
 80076a8:	20005e74 	.word	0x20005e74
 80076ac:	20005e34 	.word	0x20005e34
 80076b0:	20005e7c 	.word	0x20005e7c
 80076b4:	200059a4 	.word	0x200059a4
 80076b8:	200059a0 	.word	0x200059a0
 80076bc:	20005e88 	.word	0x20005e88
 80076c0:	20005e84 	.word	0x20005e84
 80076c4:	e000ed04 	.word	0xe000ed04

080076c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80076ce:	4b05      	ldr	r3, [pc, #20]	; (80076e4 <xTaskGetTickCount+0x1c>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80076d4:	687b      	ldr	r3, [r7, #4]
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	370c      	adds	r7, #12
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	20005e78 	.word	0x20005e78

080076e8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076ee:	f001 fa7b 	bl	8008be8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80076f2:	2300      	movs	r3, #0
 80076f4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80076f6:	4b04      	ldr	r3, [pc, #16]	; (8007708 <xTaskGetTickCountFromISR+0x20>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80076fc:	683b      	ldr	r3, [r7, #0]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	20005e78 	.word	0x20005e78

0800770c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b086      	sub	sp, #24
 8007710:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007712:	2300      	movs	r3, #0
 8007714:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007716:	4b4f      	ldr	r3, [pc, #316]	; (8007854 <xTaskIncrementTick+0x148>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	f040 808f 	bne.w	800783e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007720:	4b4d      	ldr	r3, [pc, #308]	; (8007858 <xTaskIncrementTick+0x14c>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	3301      	adds	r3, #1
 8007726:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007728:	4a4b      	ldr	r2, [pc, #300]	; (8007858 <xTaskIncrementTick+0x14c>)
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d120      	bne.n	8007776 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007734:	4b49      	ldr	r3, [pc, #292]	; (800785c <xTaskIncrementTick+0x150>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00a      	beq.n	8007754 <xTaskIncrementTick+0x48>
	__asm volatile
 800773e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007742:	f383 8811 	msr	BASEPRI, r3
 8007746:	f3bf 8f6f 	isb	sy
 800774a:	f3bf 8f4f 	dsb	sy
 800774e:	603b      	str	r3, [r7, #0]
}
 8007750:	bf00      	nop
 8007752:	e7fe      	b.n	8007752 <xTaskIncrementTick+0x46>
 8007754:	4b41      	ldr	r3, [pc, #260]	; (800785c <xTaskIncrementTick+0x150>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	60fb      	str	r3, [r7, #12]
 800775a:	4b41      	ldr	r3, [pc, #260]	; (8007860 <xTaskIncrementTick+0x154>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a3f      	ldr	r2, [pc, #252]	; (800785c <xTaskIncrementTick+0x150>)
 8007760:	6013      	str	r3, [r2, #0]
 8007762:	4a3f      	ldr	r2, [pc, #252]	; (8007860 <xTaskIncrementTick+0x154>)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6013      	str	r3, [r2, #0]
 8007768:	4b3e      	ldr	r3, [pc, #248]	; (8007864 <xTaskIncrementTick+0x158>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	3301      	adds	r3, #1
 800776e:	4a3d      	ldr	r2, [pc, #244]	; (8007864 <xTaskIncrementTick+0x158>)
 8007770:	6013      	str	r3, [r2, #0]
 8007772:	f000 fad1 	bl	8007d18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007776:	4b3c      	ldr	r3, [pc, #240]	; (8007868 <xTaskIncrementTick+0x15c>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	429a      	cmp	r2, r3
 800777e:	d349      	bcc.n	8007814 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007780:	4b36      	ldr	r3, [pc, #216]	; (800785c <xTaskIncrementTick+0x150>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d104      	bne.n	8007794 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800778a:	4b37      	ldr	r3, [pc, #220]	; (8007868 <xTaskIncrementTick+0x15c>)
 800778c:	f04f 32ff 	mov.w	r2, #4294967295
 8007790:	601a      	str	r2, [r3, #0]
					break;
 8007792:	e03f      	b.n	8007814 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007794:	4b31      	ldr	r3, [pc, #196]	; (800785c <xTaskIncrementTick+0x150>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80077a4:	693a      	ldr	r2, [r7, #16]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d203      	bcs.n	80077b4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80077ac:	4a2e      	ldr	r2, [pc, #184]	; (8007868 <xTaskIncrementTick+0x15c>)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80077b2:	e02f      	b.n	8007814 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	3304      	adds	r3, #4
 80077b8:	4618      	mov	r0, r3
 80077ba:	f7fe fbaf 	bl	8005f1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d004      	beq.n	80077d0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	3318      	adds	r3, #24
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7fe fba6 	bl	8005f1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d4:	4b25      	ldr	r3, [pc, #148]	; (800786c <xTaskIncrementTick+0x160>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d903      	bls.n	80077e4 <xTaskIncrementTick+0xd8>
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e0:	4a22      	ldr	r2, [pc, #136]	; (800786c <xTaskIncrementTick+0x160>)
 80077e2:	6013      	str	r3, [r2, #0]
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077e8:	4613      	mov	r3, r2
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	4413      	add	r3, r2
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	4a1f      	ldr	r2, [pc, #124]	; (8007870 <xTaskIncrementTick+0x164>)
 80077f2:	441a      	add	r2, r3
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	3304      	adds	r3, #4
 80077f8:	4619      	mov	r1, r3
 80077fa:	4610      	mov	r0, r2
 80077fc:	f7fe fb31 	bl	8005e62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007804:	4b1b      	ldr	r3, [pc, #108]	; (8007874 <xTaskIncrementTick+0x168>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780a:	429a      	cmp	r2, r3
 800780c:	d3b8      	bcc.n	8007780 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800780e:	2301      	movs	r3, #1
 8007810:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007812:	e7b5      	b.n	8007780 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007814:	4b17      	ldr	r3, [pc, #92]	; (8007874 <xTaskIncrementTick+0x168>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800781a:	4915      	ldr	r1, [pc, #84]	; (8007870 <xTaskIncrementTick+0x164>)
 800781c:	4613      	mov	r3, r2
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	4413      	add	r3, r2
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	440b      	add	r3, r1
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2b01      	cmp	r3, #1
 800782a:	d901      	bls.n	8007830 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800782c:	2301      	movs	r3, #1
 800782e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007830:	4b11      	ldr	r3, [pc, #68]	; (8007878 <xTaskIncrementTick+0x16c>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d007      	beq.n	8007848 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007838:	2301      	movs	r3, #1
 800783a:	617b      	str	r3, [r7, #20]
 800783c:	e004      	b.n	8007848 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800783e:	4b0f      	ldr	r3, [pc, #60]	; (800787c <xTaskIncrementTick+0x170>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	3301      	adds	r3, #1
 8007844:	4a0d      	ldr	r2, [pc, #52]	; (800787c <xTaskIncrementTick+0x170>)
 8007846:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007848:	697b      	ldr	r3, [r7, #20]
}
 800784a:	4618      	mov	r0, r3
 800784c:	3718      	adds	r7, #24
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	20005e9c 	.word	0x20005e9c
 8007858:	20005e78 	.word	0x20005e78
 800785c:	20005e2c 	.word	0x20005e2c
 8007860:	20005e30 	.word	0x20005e30
 8007864:	20005e8c 	.word	0x20005e8c
 8007868:	20005e94 	.word	0x20005e94
 800786c:	20005e7c 	.word	0x20005e7c
 8007870:	200059a4 	.word	0x200059a4
 8007874:	200059a0 	.word	0x200059a0
 8007878:	20005e88 	.word	0x20005e88
 800787c:	20005e84 	.word	0x20005e84

08007880 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007886:	4b28      	ldr	r3, [pc, #160]	; (8007928 <vTaskSwitchContext+0xa8>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d003      	beq.n	8007896 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800788e:	4b27      	ldr	r3, [pc, #156]	; (800792c <vTaskSwitchContext+0xac>)
 8007890:	2201      	movs	r2, #1
 8007892:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007894:	e041      	b.n	800791a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007896:	4b25      	ldr	r3, [pc, #148]	; (800792c <vTaskSwitchContext+0xac>)
 8007898:	2200      	movs	r2, #0
 800789a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800789c:	4b24      	ldr	r3, [pc, #144]	; (8007930 <vTaskSwitchContext+0xb0>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	60fb      	str	r3, [r7, #12]
 80078a2:	e010      	b.n	80078c6 <vTaskSwitchContext+0x46>
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d10a      	bne.n	80078c0 <vTaskSwitchContext+0x40>
	__asm volatile
 80078aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ae:	f383 8811 	msr	BASEPRI, r3
 80078b2:	f3bf 8f6f 	isb	sy
 80078b6:	f3bf 8f4f 	dsb	sy
 80078ba:	607b      	str	r3, [r7, #4]
}
 80078bc:	bf00      	nop
 80078be:	e7fe      	b.n	80078be <vTaskSwitchContext+0x3e>
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	3b01      	subs	r3, #1
 80078c4:	60fb      	str	r3, [r7, #12]
 80078c6:	491b      	ldr	r1, [pc, #108]	; (8007934 <vTaskSwitchContext+0xb4>)
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	4613      	mov	r3, r2
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	4413      	add	r3, r2
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	440b      	add	r3, r1
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d0e4      	beq.n	80078a4 <vTaskSwitchContext+0x24>
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	4613      	mov	r3, r2
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	4413      	add	r3, r2
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	4a13      	ldr	r2, [pc, #76]	; (8007934 <vTaskSwitchContext+0xb4>)
 80078e6:	4413      	add	r3, r2
 80078e8:	60bb      	str	r3, [r7, #8]
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	685a      	ldr	r2, [r3, #4]
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	605a      	str	r2, [r3, #4]
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	685a      	ldr	r2, [r3, #4]
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	3308      	adds	r3, #8
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d104      	bne.n	800790a <vTaskSwitchContext+0x8a>
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	685a      	ldr	r2, [r3, #4]
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	605a      	str	r2, [r3, #4]
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	4a09      	ldr	r2, [pc, #36]	; (8007938 <vTaskSwitchContext+0xb8>)
 8007912:	6013      	str	r3, [r2, #0]
 8007914:	4a06      	ldr	r2, [pc, #24]	; (8007930 <vTaskSwitchContext+0xb0>)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6013      	str	r3, [r2, #0]
}
 800791a:	bf00      	nop
 800791c:	3714      	adds	r7, #20
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr
 8007926:	bf00      	nop
 8007928:	20005e9c 	.word	0x20005e9c
 800792c:	20005e88 	.word	0x20005e88
 8007930:	20005e7c 	.word	0x20005e7c
 8007934:	200059a4 	.word	0x200059a4
 8007938:	200059a0 	.word	0x200059a0

0800793c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d10a      	bne.n	8007962 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800794c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007950:	f383 8811 	msr	BASEPRI, r3
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	60fb      	str	r3, [r7, #12]
}
 800795e:	bf00      	nop
 8007960:	e7fe      	b.n	8007960 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007962:	4b07      	ldr	r3, [pc, #28]	; (8007980 <vTaskPlaceOnEventList+0x44>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	3318      	adds	r3, #24
 8007968:	4619      	mov	r1, r3
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f7fe fa9d 	bl	8005eaa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007970:	2101      	movs	r1, #1
 8007972:	6838      	ldr	r0, [r7, #0]
 8007974:	f000 fb8a 	bl	800808c <prvAddCurrentTaskToDelayedList>
}
 8007978:	bf00      	nop
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}
 8007980:	200059a0 	.word	0x200059a0

08007984 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007984:	b580      	push	{r7, lr}
 8007986:	b086      	sub	sp, #24
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d10a      	bne.n	80079ac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799a:	f383 8811 	msr	BASEPRI, r3
 800799e:	f3bf 8f6f 	isb	sy
 80079a2:	f3bf 8f4f 	dsb	sy
 80079a6:	617b      	str	r3, [r7, #20]
}
 80079a8:	bf00      	nop
 80079aa:	e7fe      	b.n	80079aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80079ac:	4b0a      	ldr	r3, [pc, #40]	; (80079d8 <vTaskPlaceOnEventListRestricted+0x54>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	3318      	adds	r3, #24
 80079b2:	4619      	mov	r1, r3
 80079b4:	68f8      	ldr	r0, [r7, #12]
 80079b6:	f7fe fa54 	bl	8005e62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d002      	beq.n	80079c6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80079c0:	f04f 33ff 	mov.w	r3, #4294967295
 80079c4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80079c6:	6879      	ldr	r1, [r7, #4]
 80079c8:	68b8      	ldr	r0, [r7, #8]
 80079ca:	f000 fb5f 	bl	800808c <prvAddCurrentTaskToDelayedList>
	}
 80079ce:	bf00      	nop
 80079d0:	3718      	adds	r7, #24
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	200059a0 	.word	0x200059a0

080079dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b086      	sub	sp, #24
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d10a      	bne.n	8007a08 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80079f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f6:	f383 8811 	msr	BASEPRI, r3
 80079fa:	f3bf 8f6f 	isb	sy
 80079fe:	f3bf 8f4f 	dsb	sy
 8007a02:	60fb      	str	r3, [r7, #12]
}
 8007a04:	bf00      	nop
 8007a06:	e7fe      	b.n	8007a06 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	3318      	adds	r3, #24
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f7fe fa85 	bl	8005f1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a12:	4b1e      	ldr	r3, [pc, #120]	; (8007a8c <xTaskRemoveFromEventList+0xb0>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d11d      	bne.n	8007a56 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	3304      	adds	r3, #4
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7fe fa7c 	bl	8005f1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a28:	4b19      	ldr	r3, [pc, #100]	; (8007a90 <xTaskRemoveFromEventList+0xb4>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d903      	bls.n	8007a38 <xTaskRemoveFromEventList+0x5c>
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a34:	4a16      	ldr	r2, [pc, #88]	; (8007a90 <xTaskRemoveFromEventList+0xb4>)
 8007a36:	6013      	str	r3, [r2, #0]
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	4413      	add	r3, r2
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	4a13      	ldr	r2, [pc, #76]	; (8007a94 <xTaskRemoveFromEventList+0xb8>)
 8007a46:	441a      	add	r2, r3
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	3304      	adds	r3, #4
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	4610      	mov	r0, r2
 8007a50:	f7fe fa07 	bl	8005e62 <vListInsertEnd>
 8007a54:	e005      	b.n	8007a62 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	3318      	adds	r3, #24
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	480e      	ldr	r0, [pc, #56]	; (8007a98 <xTaskRemoveFromEventList+0xbc>)
 8007a5e:	f7fe fa00 	bl	8005e62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a66:	4b0d      	ldr	r3, [pc, #52]	; (8007a9c <xTaskRemoveFromEventList+0xc0>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d905      	bls.n	8007a7c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007a70:	2301      	movs	r3, #1
 8007a72:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007a74:	4b0a      	ldr	r3, [pc, #40]	; (8007aa0 <xTaskRemoveFromEventList+0xc4>)
 8007a76:	2201      	movs	r2, #1
 8007a78:	601a      	str	r2, [r3, #0]
 8007a7a:	e001      	b.n	8007a80 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007a80:	697b      	ldr	r3, [r7, #20]
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3718      	adds	r7, #24
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	20005e9c 	.word	0x20005e9c
 8007a90:	20005e7c 	.word	0x20005e7c
 8007a94:	200059a4 	.word	0x200059a4
 8007a98:	20005e34 	.word	0x20005e34
 8007a9c:	200059a0 	.word	0x200059a0
 8007aa0:	20005e88 	.word	0x20005e88

08007aa4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007aac:	4b06      	ldr	r3, [pc, #24]	; (8007ac8 <vTaskInternalSetTimeOutState+0x24>)
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007ab4:	4b05      	ldr	r3, [pc, #20]	; (8007acc <vTaskInternalSetTimeOutState+0x28>)
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	605a      	str	r2, [r3, #4]
}
 8007abc:	bf00      	nop
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr
 8007ac8:	20005e8c 	.word	0x20005e8c
 8007acc:	20005e78 	.word	0x20005e78

08007ad0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b088      	sub	sp, #32
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d10a      	bne.n	8007af6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae4:	f383 8811 	msr	BASEPRI, r3
 8007ae8:	f3bf 8f6f 	isb	sy
 8007aec:	f3bf 8f4f 	dsb	sy
 8007af0:	613b      	str	r3, [r7, #16]
}
 8007af2:	bf00      	nop
 8007af4:	e7fe      	b.n	8007af4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d10a      	bne.n	8007b12 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b00:	f383 8811 	msr	BASEPRI, r3
 8007b04:	f3bf 8f6f 	isb	sy
 8007b08:	f3bf 8f4f 	dsb	sy
 8007b0c:	60fb      	str	r3, [r7, #12]
}
 8007b0e:	bf00      	nop
 8007b10:	e7fe      	b.n	8007b10 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007b12:	f000 ff87 	bl	8008a24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007b16:	4b1d      	ldr	r3, [pc, #116]	; (8007b8c <xTaskCheckForTimeOut+0xbc>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	69ba      	ldr	r2, [r7, #24]
 8007b22:	1ad3      	subs	r3, r2, r3
 8007b24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b2e:	d102      	bne.n	8007b36 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007b30:	2300      	movs	r3, #0
 8007b32:	61fb      	str	r3, [r7, #28]
 8007b34:	e023      	b.n	8007b7e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	4b15      	ldr	r3, [pc, #84]	; (8007b90 <xTaskCheckForTimeOut+0xc0>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d007      	beq.n	8007b52 <xTaskCheckForTimeOut+0x82>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	69ba      	ldr	r2, [r7, #24]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d302      	bcc.n	8007b52 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	61fb      	str	r3, [r7, #28]
 8007b50:	e015      	b.n	8007b7e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	697a      	ldr	r2, [r7, #20]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d20b      	bcs.n	8007b74 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	1ad2      	subs	r2, r2, r3
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f7ff ff9b 	bl	8007aa4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	61fb      	str	r3, [r7, #28]
 8007b72:	e004      	b.n	8007b7e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	2200      	movs	r2, #0
 8007b78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007b7e:	f000 ff81 	bl	8008a84 <vPortExitCritical>

	return xReturn;
 8007b82:	69fb      	ldr	r3, [r7, #28]
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3720      	adds	r7, #32
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	20005e78 	.word	0x20005e78
 8007b90:	20005e8c 	.word	0x20005e8c

08007b94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007b94:	b480      	push	{r7}
 8007b96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007b98:	4b03      	ldr	r3, [pc, #12]	; (8007ba8 <vTaskMissedYield+0x14>)
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	601a      	str	r2, [r3, #0]
}
 8007b9e:	bf00      	nop
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr
 8007ba8:	20005e88 	.word	0x20005e88

08007bac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007bb4:	f000 f852 	bl	8007c5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007bb8:	4b06      	ldr	r3, [pc, #24]	; (8007bd4 <prvIdleTask+0x28>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d9f9      	bls.n	8007bb4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007bc0:	4b05      	ldr	r3, [pc, #20]	; (8007bd8 <prvIdleTask+0x2c>)
 8007bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bc6:	601a      	str	r2, [r3, #0]
 8007bc8:	f3bf 8f4f 	dsb	sy
 8007bcc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007bd0:	e7f0      	b.n	8007bb4 <prvIdleTask+0x8>
 8007bd2:	bf00      	nop
 8007bd4:	200059a4 	.word	0x200059a4
 8007bd8:	e000ed04 	.word	0xe000ed04

08007bdc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007be2:	2300      	movs	r3, #0
 8007be4:	607b      	str	r3, [r7, #4]
 8007be6:	e00c      	b.n	8007c02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	4613      	mov	r3, r2
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	4413      	add	r3, r2
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	4a12      	ldr	r2, [pc, #72]	; (8007c3c <prvInitialiseTaskLists+0x60>)
 8007bf4:	4413      	add	r3, r2
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7fe f906 	bl	8005e08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	607b      	str	r3, [r7, #4]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2b37      	cmp	r3, #55	; 0x37
 8007c06:	d9ef      	bls.n	8007be8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007c08:	480d      	ldr	r0, [pc, #52]	; (8007c40 <prvInitialiseTaskLists+0x64>)
 8007c0a:	f7fe f8fd 	bl	8005e08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007c0e:	480d      	ldr	r0, [pc, #52]	; (8007c44 <prvInitialiseTaskLists+0x68>)
 8007c10:	f7fe f8fa 	bl	8005e08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007c14:	480c      	ldr	r0, [pc, #48]	; (8007c48 <prvInitialiseTaskLists+0x6c>)
 8007c16:	f7fe f8f7 	bl	8005e08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007c1a:	480c      	ldr	r0, [pc, #48]	; (8007c4c <prvInitialiseTaskLists+0x70>)
 8007c1c:	f7fe f8f4 	bl	8005e08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007c20:	480b      	ldr	r0, [pc, #44]	; (8007c50 <prvInitialiseTaskLists+0x74>)
 8007c22:	f7fe f8f1 	bl	8005e08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007c26:	4b0b      	ldr	r3, [pc, #44]	; (8007c54 <prvInitialiseTaskLists+0x78>)
 8007c28:	4a05      	ldr	r2, [pc, #20]	; (8007c40 <prvInitialiseTaskLists+0x64>)
 8007c2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007c2c:	4b0a      	ldr	r3, [pc, #40]	; (8007c58 <prvInitialiseTaskLists+0x7c>)
 8007c2e:	4a05      	ldr	r2, [pc, #20]	; (8007c44 <prvInitialiseTaskLists+0x68>)
 8007c30:	601a      	str	r2, [r3, #0]
}
 8007c32:	bf00      	nop
 8007c34:	3708      	adds	r7, #8
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	200059a4 	.word	0x200059a4
 8007c40:	20005e04 	.word	0x20005e04
 8007c44:	20005e18 	.word	0x20005e18
 8007c48:	20005e34 	.word	0x20005e34
 8007c4c:	20005e48 	.word	0x20005e48
 8007c50:	20005e60 	.word	0x20005e60
 8007c54:	20005e2c 	.word	0x20005e2c
 8007c58:	20005e30 	.word	0x20005e30

08007c5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c62:	e019      	b.n	8007c98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007c64:	f000 fede 	bl	8008a24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c68:	4b10      	ldr	r3, [pc, #64]	; (8007cac <prvCheckTasksWaitingTermination+0x50>)
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	3304      	adds	r3, #4
 8007c74:	4618      	mov	r0, r3
 8007c76:	f7fe f951 	bl	8005f1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007c7a:	4b0d      	ldr	r3, [pc, #52]	; (8007cb0 <prvCheckTasksWaitingTermination+0x54>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	4a0b      	ldr	r2, [pc, #44]	; (8007cb0 <prvCheckTasksWaitingTermination+0x54>)
 8007c82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007c84:	4b0b      	ldr	r3, [pc, #44]	; (8007cb4 <prvCheckTasksWaitingTermination+0x58>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	3b01      	subs	r3, #1
 8007c8a:	4a0a      	ldr	r2, [pc, #40]	; (8007cb4 <prvCheckTasksWaitingTermination+0x58>)
 8007c8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007c8e:	f000 fef9 	bl	8008a84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 f810 	bl	8007cb8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c98:	4b06      	ldr	r3, [pc, #24]	; (8007cb4 <prvCheckTasksWaitingTermination+0x58>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d1e1      	bne.n	8007c64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007ca0:	bf00      	nop
 8007ca2:	bf00      	nop
 8007ca4:	3708      	adds	r7, #8
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	20005e48 	.word	0x20005e48
 8007cb0:	20005e74 	.word	0x20005e74
 8007cb4:	20005e5c 	.word	0x20005e5c

08007cb8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d108      	bne.n	8007cdc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f001 f896 	bl	8008e00 <vPortFree>
				vPortFree( pxTCB );
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f001 f893 	bl	8008e00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007cda:	e018      	b.n	8007d0e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d103      	bne.n	8007cee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f001 f88a 	bl	8008e00 <vPortFree>
	}
 8007cec:	e00f      	b.n	8007d0e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d00a      	beq.n	8007d0e <prvDeleteTCB+0x56>
	__asm volatile
 8007cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfc:	f383 8811 	msr	BASEPRI, r3
 8007d00:	f3bf 8f6f 	isb	sy
 8007d04:	f3bf 8f4f 	dsb	sy
 8007d08:	60fb      	str	r3, [r7, #12]
}
 8007d0a:	bf00      	nop
 8007d0c:	e7fe      	b.n	8007d0c <prvDeleteTCB+0x54>
	}
 8007d0e:	bf00      	nop
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
	...

08007d18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d1e:	4b0c      	ldr	r3, [pc, #48]	; (8007d50 <prvResetNextTaskUnblockTime+0x38>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d104      	bne.n	8007d32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007d28:	4b0a      	ldr	r3, [pc, #40]	; (8007d54 <prvResetNextTaskUnblockTime+0x3c>)
 8007d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007d30:	e008      	b.n	8007d44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d32:	4b07      	ldr	r3, [pc, #28]	; (8007d50 <prvResetNextTaskUnblockTime+0x38>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	4a04      	ldr	r2, [pc, #16]	; (8007d54 <prvResetNextTaskUnblockTime+0x3c>)
 8007d42:	6013      	str	r3, [r2, #0]
}
 8007d44:	bf00      	nop
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr
 8007d50:	20005e2c 	.word	0x20005e2c
 8007d54:	20005e94 	.word	0x20005e94

08007d58 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007d5e:	4b05      	ldr	r3, [pc, #20]	; (8007d74 <xTaskGetCurrentTaskHandle+0x1c>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007d64:	687b      	ldr	r3, [r7, #4]
	}
 8007d66:	4618      	mov	r0, r3
 8007d68:	370c      	adds	r7, #12
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr
 8007d72:	bf00      	nop
 8007d74:	200059a0 	.word	0x200059a0

08007d78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007d7e:	4b0b      	ldr	r3, [pc, #44]	; (8007dac <xTaskGetSchedulerState+0x34>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d102      	bne.n	8007d8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007d86:	2301      	movs	r3, #1
 8007d88:	607b      	str	r3, [r7, #4]
 8007d8a:	e008      	b.n	8007d9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d8c:	4b08      	ldr	r3, [pc, #32]	; (8007db0 <xTaskGetSchedulerState+0x38>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d102      	bne.n	8007d9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007d94:	2302      	movs	r3, #2
 8007d96:	607b      	str	r3, [r7, #4]
 8007d98:	e001      	b.n	8007d9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007d9e:	687b      	ldr	r3, [r7, #4]
	}
 8007da0:	4618      	mov	r0, r3
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr
 8007dac:	20005e80 	.word	0x20005e80
 8007db0:	20005e9c 	.word	0x20005e9c

08007db4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d051      	beq.n	8007e6e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dce:	4b2a      	ldr	r3, [pc, #168]	; (8007e78 <xTaskPriorityInherit+0xc4>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d241      	bcs.n	8007e5c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	699b      	ldr	r3, [r3, #24]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	db06      	blt.n	8007dee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007de0:	4b25      	ldr	r3, [pc, #148]	; (8007e78 <xTaskPriorityInherit+0xc4>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	6959      	ldr	r1, [r3, #20]
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007df6:	4613      	mov	r3, r2
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	4413      	add	r3, r2
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	4a1f      	ldr	r2, [pc, #124]	; (8007e7c <xTaskPriorityInherit+0xc8>)
 8007e00:	4413      	add	r3, r2
 8007e02:	4299      	cmp	r1, r3
 8007e04:	d122      	bne.n	8007e4c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	3304      	adds	r3, #4
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f7fe f886 	bl	8005f1c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007e10:	4b19      	ldr	r3, [pc, #100]	; (8007e78 <xTaskPriorityInherit+0xc4>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e1e:	4b18      	ldr	r3, [pc, #96]	; (8007e80 <xTaskPriorityInherit+0xcc>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d903      	bls.n	8007e2e <xTaskPriorityInherit+0x7a>
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2a:	4a15      	ldr	r2, [pc, #84]	; (8007e80 <xTaskPriorityInherit+0xcc>)
 8007e2c:	6013      	str	r3, [r2, #0]
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e32:	4613      	mov	r3, r2
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	4413      	add	r3, r2
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	4a10      	ldr	r2, [pc, #64]	; (8007e7c <xTaskPriorityInherit+0xc8>)
 8007e3c:	441a      	add	r2, r3
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	3304      	adds	r3, #4
 8007e42:	4619      	mov	r1, r3
 8007e44:	4610      	mov	r0, r2
 8007e46:	f7fe f80c 	bl	8005e62 <vListInsertEnd>
 8007e4a:	e004      	b.n	8007e56 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007e4c:	4b0a      	ldr	r3, [pc, #40]	; (8007e78 <xTaskPriorityInherit+0xc4>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007e56:	2301      	movs	r3, #1
 8007e58:	60fb      	str	r3, [r7, #12]
 8007e5a:	e008      	b.n	8007e6e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e60:	4b05      	ldr	r3, [pc, #20]	; (8007e78 <xTaskPriorityInherit+0xc4>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d201      	bcs.n	8007e6e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
	}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3710      	adds	r7, #16
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	200059a0 	.word	0x200059a0
 8007e7c:	200059a4 	.word	0x200059a4
 8007e80:	20005e7c 	.word	0x20005e7c

08007e84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b086      	sub	sp, #24
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007e90:	2300      	movs	r3, #0
 8007e92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d056      	beq.n	8007f48 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007e9a:	4b2e      	ldr	r3, [pc, #184]	; (8007f54 <xTaskPriorityDisinherit+0xd0>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	693a      	ldr	r2, [r7, #16]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d00a      	beq.n	8007eba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea8:	f383 8811 	msr	BASEPRI, r3
 8007eac:	f3bf 8f6f 	isb	sy
 8007eb0:	f3bf 8f4f 	dsb	sy
 8007eb4:	60fb      	str	r3, [r7, #12]
}
 8007eb6:	bf00      	nop
 8007eb8:	e7fe      	b.n	8007eb8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d10a      	bne.n	8007ed8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec6:	f383 8811 	msr	BASEPRI, r3
 8007eca:	f3bf 8f6f 	isb	sy
 8007ece:	f3bf 8f4f 	dsb	sy
 8007ed2:	60bb      	str	r3, [r7, #8]
}
 8007ed4:	bf00      	nop
 8007ed6:	e7fe      	b.n	8007ed6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007edc:	1e5a      	subs	r2, r3, #1
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d02c      	beq.n	8007f48 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d128      	bne.n	8007f48 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	3304      	adds	r3, #4
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7fe f80e 	bl	8005f1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f0c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f18:	4b0f      	ldr	r3, [pc, #60]	; (8007f58 <xTaskPriorityDisinherit+0xd4>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d903      	bls.n	8007f28 <xTaskPriorityDisinherit+0xa4>
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f24:	4a0c      	ldr	r2, [pc, #48]	; (8007f58 <xTaskPriorityDisinherit+0xd4>)
 8007f26:	6013      	str	r3, [r2, #0]
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	4413      	add	r3, r2
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	4a09      	ldr	r2, [pc, #36]	; (8007f5c <xTaskPriorityDisinherit+0xd8>)
 8007f36:	441a      	add	r2, r3
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	3304      	adds	r3, #4
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	4610      	mov	r0, r2
 8007f40:	f7fd ff8f 	bl	8005e62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007f44:	2301      	movs	r3, #1
 8007f46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007f48:	697b      	ldr	r3, [r7, #20]
	}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3718      	adds	r7, #24
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	bf00      	nop
 8007f54:	200059a0 	.word	0x200059a0
 8007f58:	20005e7c 	.word	0x20005e7c
 8007f5c:	200059a4 	.word	0x200059a4

08007f60 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b088      	sub	sp, #32
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d06a      	beq.n	800804e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d10a      	bne.n	8007f96 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f84:	f383 8811 	msr	BASEPRI, r3
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	60fb      	str	r3, [r7, #12]
}
 8007f92:	bf00      	nop
 8007f94:	e7fe      	b.n	8007f94 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f9a:	683a      	ldr	r2, [r7, #0]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d902      	bls.n	8007fa6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	61fb      	str	r3, [r7, #28]
 8007fa4:	e002      	b.n	8007fac <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007faa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007fac:	69bb      	ldr	r3, [r7, #24]
 8007fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb0:	69fa      	ldr	r2, [r7, #28]
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d04b      	beq.n	800804e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fba:	697a      	ldr	r2, [r7, #20]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d146      	bne.n	800804e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007fc0:	4b25      	ldr	r3, [pc, #148]	; (8008058 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	69ba      	ldr	r2, [r7, #24]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d10a      	bne.n	8007fe0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fce:	f383 8811 	msr	BASEPRI, r3
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	60bb      	str	r3, [r7, #8]
}
 8007fdc:	bf00      	nop
 8007fde:	e7fe      	b.n	8007fde <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007fe6:	69bb      	ldr	r3, [r7, #24]
 8007fe8:	69fa      	ldr	r2, [r7, #28]
 8007fea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	699b      	ldr	r3, [r3, #24]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	db04      	blt.n	8007ffe <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	6959      	ldr	r1, [r3, #20]
 8008002:	693a      	ldr	r2, [r7, #16]
 8008004:	4613      	mov	r3, r2
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	4413      	add	r3, r2
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	4a13      	ldr	r2, [pc, #76]	; (800805c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800800e:	4413      	add	r3, r2
 8008010:	4299      	cmp	r1, r3
 8008012:	d11c      	bne.n	800804e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	3304      	adds	r3, #4
 8008018:	4618      	mov	r0, r3
 800801a:	f7fd ff7f 	bl	8005f1c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008022:	4b0f      	ldr	r3, [pc, #60]	; (8008060 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	429a      	cmp	r2, r3
 8008028:	d903      	bls.n	8008032 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802e:	4a0c      	ldr	r2, [pc, #48]	; (8008060 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008030:	6013      	str	r3, [r2, #0]
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008036:	4613      	mov	r3, r2
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	4413      	add	r3, r2
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	4a07      	ldr	r2, [pc, #28]	; (800805c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008040:	441a      	add	r2, r3
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	3304      	adds	r3, #4
 8008046:	4619      	mov	r1, r3
 8008048:	4610      	mov	r0, r2
 800804a:	f7fd ff0a 	bl	8005e62 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800804e:	bf00      	nop
 8008050:	3720      	adds	r7, #32
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	200059a0 	.word	0x200059a0
 800805c:	200059a4 	.word	0x200059a4
 8008060:	20005e7c 	.word	0x20005e7c

08008064 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008064:	b480      	push	{r7}
 8008066:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008068:	4b07      	ldr	r3, [pc, #28]	; (8008088 <pvTaskIncrementMutexHeldCount+0x24>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d004      	beq.n	800807a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008070:	4b05      	ldr	r3, [pc, #20]	; (8008088 <pvTaskIncrementMutexHeldCount+0x24>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008076:	3201      	adds	r2, #1
 8008078:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800807a:	4b03      	ldr	r3, [pc, #12]	; (8008088 <pvTaskIncrementMutexHeldCount+0x24>)
 800807c:	681b      	ldr	r3, [r3, #0]
	}
 800807e:	4618      	mov	r0, r3
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr
 8008088:	200059a0 	.word	0x200059a0

0800808c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008096:	4b21      	ldr	r3, [pc, #132]	; (800811c <prvAddCurrentTaskToDelayedList+0x90>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800809c:	4b20      	ldr	r3, [pc, #128]	; (8008120 <prvAddCurrentTaskToDelayedList+0x94>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	3304      	adds	r3, #4
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7fd ff3a 	bl	8005f1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ae:	d10a      	bne.n	80080c6 <prvAddCurrentTaskToDelayedList+0x3a>
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d007      	beq.n	80080c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080b6:	4b1a      	ldr	r3, [pc, #104]	; (8008120 <prvAddCurrentTaskToDelayedList+0x94>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	3304      	adds	r3, #4
 80080bc:	4619      	mov	r1, r3
 80080be:	4819      	ldr	r0, [pc, #100]	; (8008124 <prvAddCurrentTaskToDelayedList+0x98>)
 80080c0:	f7fd fecf 	bl	8005e62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80080c4:	e026      	b.n	8008114 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	4413      	add	r3, r2
 80080cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80080ce:	4b14      	ldr	r3, [pc, #80]	; (8008120 <prvAddCurrentTaskToDelayedList+0x94>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68ba      	ldr	r2, [r7, #8]
 80080d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80080d6:	68ba      	ldr	r2, [r7, #8]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d209      	bcs.n	80080f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080de:	4b12      	ldr	r3, [pc, #72]	; (8008128 <prvAddCurrentTaskToDelayedList+0x9c>)
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	4b0f      	ldr	r3, [pc, #60]	; (8008120 <prvAddCurrentTaskToDelayedList+0x94>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	3304      	adds	r3, #4
 80080e8:	4619      	mov	r1, r3
 80080ea:	4610      	mov	r0, r2
 80080ec:	f7fd fedd 	bl	8005eaa <vListInsert>
}
 80080f0:	e010      	b.n	8008114 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080f2:	4b0e      	ldr	r3, [pc, #56]	; (800812c <prvAddCurrentTaskToDelayedList+0xa0>)
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	4b0a      	ldr	r3, [pc, #40]	; (8008120 <prvAddCurrentTaskToDelayedList+0x94>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	3304      	adds	r3, #4
 80080fc:	4619      	mov	r1, r3
 80080fe:	4610      	mov	r0, r2
 8008100:	f7fd fed3 	bl	8005eaa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008104:	4b0a      	ldr	r3, [pc, #40]	; (8008130 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	68ba      	ldr	r2, [r7, #8]
 800810a:	429a      	cmp	r2, r3
 800810c:	d202      	bcs.n	8008114 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800810e:	4a08      	ldr	r2, [pc, #32]	; (8008130 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	6013      	str	r3, [r2, #0]
}
 8008114:	bf00      	nop
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}
 800811c:	20005e78 	.word	0x20005e78
 8008120:	200059a0 	.word	0x200059a0
 8008124:	20005e60 	.word	0x20005e60
 8008128:	20005e30 	.word	0x20005e30
 800812c:	20005e2c 	.word	0x20005e2c
 8008130:	20005e94 	.word	0x20005e94

08008134 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b08a      	sub	sp, #40	; 0x28
 8008138:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800813a:	2300      	movs	r3, #0
 800813c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800813e:	f000 fb07 	bl	8008750 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008142:	4b1c      	ldr	r3, [pc, #112]	; (80081b4 <xTimerCreateTimerTask+0x80>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d021      	beq.n	800818e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800814a:	2300      	movs	r3, #0
 800814c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800814e:	2300      	movs	r3, #0
 8008150:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008152:	1d3a      	adds	r2, r7, #4
 8008154:	f107 0108 	add.w	r1, r7, #8
 8008158:	f107 030c 	add.w	r3, r7, #12
 800815c:	4618      	mov	r0, r3
 800815e:	f7fd fe39 	bl	8005dd4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008162:	6879      	ldr	r1, [r7, #4]
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	68fa      	ldr	r2, [r7, #12]
 8008168:	9202      	str	r2, [sp, #8]
 800816a:	9301      	str	r3, [sp, #4]
 800816c:	2302      	movs	r3, #2
 800816e:	9300      	str	r3, [sp, #0]
 8008170:	2300      	movs	r3, #0
 8008172:	460a      	mov	r2, r1
 8008174:	4910      	ldr	r1, [pc, #64]	; (80081b8 <xTimerCreateTimerTask+0x84>)
 8008176:	4811      	ldr	r0, [pc, #68]	; (80081bc <xTimerCreateTimerTask+0x88>)
 8008178:	f7fe ffbe 	bl	80070f8 <xTaskCreateStatic>
 800817c:	4603      	mov	r3, r0
 800817e:	4a10      	ldr	r2, [pc, #64]	; (80081c0 <xTimerCreateTimerTask+0x8c>)
 8008180:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008182:	4b0f      	ldr	r3, [pc, #60]	; (80081c0 <xTimerCreateTimerTask+0x8c>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d001      	beq.n	800818e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800818a:	2301      	movs	r3, #1
 800818c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d10a      	bne.n	80081aa <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008198:	f383 8811 	msr	BASEPRI, r3
 800819c:	f3bf 8f6f 	isb	sy
 80081a0:	f3bf 8f4f 	dsb	sy
 80081a4:	613b      	str	r3, [r7, #16]
}
 80081a6:	bf00      	nop
 80081a8:	e7fe      	b.n	80081a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80081aa:	697b      	ldr	r3, [r7, #20]
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3718      	adds	r7, #24
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	20005ed0 	.word	0x20005ed0
 80081b8:	08016690 	.word	0x08016690
 80081bc:	080082f9 	.word	0x080082f9
 80081c0:	20005ed4 	.word	0x20005ed4

080081c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b08a      	sub	sp, #40	; 0x28
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	607a      	str	r2, [r7, #4]
 80081d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80081d2:	2300      	movs	r3, #0
 80081d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d10a      	bne.n	80081f2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80081dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e0:	f383 8811 	msr	BASEPRI, r3
 80081e4:	f3bf 8f6f 	isb	sy
 80081e8:	f3bf 8f4f 	dsb	sy
 80081ec:	623b      	str	r3, [r7, #32]
}
 80081ee:	bf00      	nop
 80081f0:	e7fe      	b.n	80081f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80081f2:	4b1a      	ldr	r3, [pc, #104]	; (800825c <xTimerGenericCommand+0x98>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d02a      	beq.n	8008250 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	2b05      	cmp	r3, #5
 800820a:	dc18      	bgt.n	800823e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800820c:	f7ff fdb4 	bl	8007d78 <xTaskGetSchedulerState>
 8008210:	4603      	mov	r3, r0
 8008212:	2b02      	cmp	r3, #2
 8008214:	d109      	bne.n	800822a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008216:	4b11      	ldr	r3, [pc, #68]	; (800825c <xTimerGenericCommand+0x98>)
 8008218:	6818      	ldr	r0, [r3, #0]
 800821a:	f107 0110 	add.w	r1, r7, #16
 800821e:	2300      	movs	r3, #0
 8008220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008222:	f7fe f903 	bl	800642c <xQueueGenericSend>
 8008226:	6278      	str	r0, [r7, #36]	; 0x24
 8008228:	e012      	b.n	8008250 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800822a:	4b0c      	ldr	r3, [pc, #48]	; (800825c <xTimerGenericCommand+0x98>)
 800822c:	6818      	ldr	r0, [r3, #0]
 800822e:	f107 0110 	add.w	r1, r7, #16
 8008232:	2300      	movs	r3, #0
 8008234:	2200      	movs	r2, #0
 8008236:	f7fe f8f9 	bl	800642c <xQueueGenericSend>
 800823a:	6278      	str	r0, [r7, #36]	; 0x24
 800823c:	e008      	b.n	8008250 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800823e:	4b07      	ldr	r3, [pc, #28]	; (800825c <xTimerGenericCommand+0x98>)
 8008240:	6818      	ldr	r0, [r3, #0]
 8008242:	f107 0110 	add.w	r1, r7, #16
 8008246:	2300      	movs	r3, #0
 8008248:	683a      	ldr	r2, [r7, #0]
 800824a:	f7fe f9ed 	bl	8006628 <xQueueGenericSendFromISR>
 800824e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008252:	4618      	mov	r0, r3
 8008254:	3728      	adds	r7, #40	; 0x28
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	20005ed0 	.word	0x20005ed0

08008260 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b088      	sub	sp, #32
 8008264:	af02      	add	r7, sp, #8
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800826a:	4b22      	ldr	r3, [pc, #136]	; (80082f4 <prvProcessExpiredTimer+0x94>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	3304      	adds	r3, #4
 8008278:	4618      	mov	r0, r3
 800827a:	f7fd fe4f 	bl	8005f1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008284:	f003 0304 	and.w	r3, r3, #4
 8008288:	2b00      	cmp	r3, #0
 800828a:	d022      	beq.n	80082d2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	699a      	ldr	r2, [r3, #24]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	18d1      	adds	r1, r2, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	683a      	ldr	r2, [r7, #0]
 8008298:	6978      	ldr	r0, [r7, #20]
 800829a:	f000 f8d1 	bl	8008440 <prvInsertTimerInActiveList>
 800829e:	4603      	mov	r3, r0
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d01f      	beq.n	80082e4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80082a4:	2300      	movs	r3, #0
 80082a6:	9300      	str	r3, [sp, #0]
 80082a8:	2300      	movs	r3, #0
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	2100      	movs	r1, #0
 80082ae:	6978      	ldr	r0, [r7, #20]
 80082b0:	f7ff ff88 	bl	80081c4 <xTimerGenericCommand>
 80082b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d113      	bne.n	80082e4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80082bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c0:	f383 8811 	msr	BASEPRI, r3
 80082c4:	f3bf 8f6f 	isb	sy
 80082c8:	f3bf 8f4f 	dsb	sy
 80082cc:	60fb      	str	r3, [r7, #12]
}
 80082ce:	bf00      	nop
 80082d0:	e7fe      	b.n	80082d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082d8:	f023 0301 	bic.w	r3, r3, #1
 80082dc:	b2da      	uxtb	r2, r3
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	6a1b      	ldr	r3, [r3, #32]
 80082e8:	6978      	ldr	r0, [r7, #20]
 80082ea:	4798      	blx	r3
}
 80082ec:	bf00      	nop
 80082ee:	3718      	adds	r7, #24
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	20005ec8 	.word	0x20005ec8

080082f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008300:	f107 0308 	add.w	r3, r7, #8
 8008304:	4618      	mov	r0, r3
 8008306:	f000 f857 	bl	80083b8 <prvGetNextExpireTime>
 800830a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	4619      	mov	r1, r3
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f000 f803 	bl	800831c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008316:	f000 f8d5 	bl	80084c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800831a:	e7f1      	b.n	8008300 <prvTimerTask+0x8>

0800831c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008326:	f7ff f923 	bl	8007570 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800832a:	f107 0308 	add.w	r3, r7, #8
 800832e:	4618      	mov	r0, r3
 8008330:	f000 f866 	bl	8008400 <prvSampleTimeNow>
 8008334:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d130      	bne.n	800839e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d10a      	bne.n	8008358 <prvProcessTimerOrBlockTask+0x3c>
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	429a      	cmp	r2, r3
 8008348:	d806      	bhi.n	8008358 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800834a:	f7ff f91f 	bl	800758c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800834e:	68f9      	ldr	r1, [r7, #12]
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f7ff ff85 	bl	8008260 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008356:	e024      	b.n	80083a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d008      	beq.n	8008370 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800835e:	4b13      	ldr	r3, [pc, #76]	; (80083ac <prvProcessTimerOrBlockTask+0x90>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d101      	bne.n	800836c <prvProcessTimerOrBlockTask+0x50>
 8008368:	2301      	movs	r3, #1
 800836a:	e000      	b.n	800836e <prvProcessTimerOrBlockTask+0x52>
 800836c:	2300      	movs	r3, #0
 800836e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008370:	4b0f      	ldr	r3, [pc, #60]	; (80083b0 <prvProcessTimerOrBlockTask+0x94>)
 8008372:	6818      	ldr	r0, [r3, #0]
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	683a      	ldr	r2, [r7, #0]
 800837c:	4619      	mov	r1, r3
 800837e:	f7fe fe87 	bl	8007090 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008382:	f7ff f903 	bl	800758c <xTaskResumeAll>
 8008386:	4603      	mov	r3, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d10a      	bne.n	80083a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800838c:	4b09      	ldr	r3, [pc, #36]	; (80083b4 <prvProcessTimerOrBlockTask+0x98>)
 800838e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008392:	601a      	str	r2, [r3, #0]
 8008394:	f3bf 8f4f 	dsb	sy
 8008398:	f3bf 8f6f 	isb	sy
}
 800839c:	e001      	b.n	80083a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800839e:	f7ff f8f5 	bl	800758c <xTaskResumeAll>
}
 80083a2:	bf00      	nop
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	20005ecc 	.word	0x20005ecc
 80083b0:	20005ed0 	.word	0x20005ed0
 80083b4:	e000ed04 	.word	0xe000ed04

080083b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80083b8:	b480      	push	{r7}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80083c0:	4b0e      	ldr	r3, [pc, #56]	; (80083fc <prvGetNextExpireTime+0x44>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d101      	bne.n	80083ce <prvGetNextExpireTime+0x16>
 80083ca:	2201      	movs	r2, #1
 80083cc:	e000      	b.n	80083d0 <prvGetNextExpireTime+0x18>
 80083ce:	2200      	movs	r2, #0
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d105      	bne.n	80083e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80083dc:	4b07      	ldr	r3, [pc, #28]	; (80083fc <prvGetNextExpireTime+0x44>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	60fb      	str	r3, [r7, #12]
 80083e6:	e001      	b.n	80083ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80083e8:	2300      	movs	r3, #0
 80083ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80083ec:	68fb      	ldr	r3, [r7, #12]
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3714      	adds	r7, #20
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	20005ec8 	.word	0x20005ec8

08008400 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008408:	f7ff f95e 	bl	80076c8 <xTaskGetTickCount>
 800840c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800840e:	4b0b      	ldr	r3, [pc, #44]	; (800843c <prvSampleTimeNow+0x3c>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	68fa      	ldr	r2, [r7, #12]
 8008414:	429a      	cmp	r2, r3
 8008416:	d205      	bcs.n	8008424 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008418:	f000 f936 	bl	8008688 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	601a      	str	r2, [r3, #0]
 8008422:	e002      	b.n	800842a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800842a:	4a04      	ldr	r2, [pc, #16]	; (800843c <prvSampleTimeNow+0x3c>)
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008430:	68fb      	ldr	r3, [r7, #12]
}
 8008432:	4618      	mov	r0, r3
 8008434:	3710      	adds	r7, #16
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	20005ed8 	.word	0x20005ed8

08008440 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b086      	sub	sp, #24
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	607a      	str	r2, [r7, #4]
 800844c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800844e:	2300      	movs	r3, #0
 8008450:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	68ba      	ldr	r2, [r7, #8]
 8008456:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	68fa      	ldr	r2, [r7, #12]
 800845c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800845e:	68ba      	ldr	r2, [r7, #8]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	429a      	cmp	r2, r3
 8008464:	d812      	bhi.n	800848c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	1ad2      	subs	r2, r2, r3
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	699b      	ldr	r3, [r3, #24]
 8008470:	429a      	cmp	r2, r3
 8008472:	d302      	bcc.n	800847a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008474:	2301      	movs	r3, #1
 8008476:	617b      	str	r3, [r7, #20]
 8008478:	e01b      	b.n	80084b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800847a:	4b10      	ldr	r3, [pc, #64]	; (80084bc <prvInsertTimerInActiveList+0x7c>)
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	3304      	adds	r3, #4
 8008482:	4619      	mov	r1, r3
 8008484:	4610      	mov	r0, r2
 8008486:	f7fd fd10 	bl	8005eaa <vListInsert>
 800848a:	e012      	b.n	80084b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	429a      	cmp	r2, r3
 8008492:	d206      	bcs.n	80084a2 <prvInsertTimerInActiveList+0x62>
 8008494:	68ba      	ldr	r2, [r7, #8]
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	429a      	cmp	r2, r3
 800849a:	d302      	bcc.n	80084a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800849c:	2301      	movs	r3, #1
 800849e:	617b      	str	r3, [r7, #20]
 80084a0:	e007      	b.n	80084b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80084a2:	4b07      	ldr	r3, [pc, #28]	; (80084c0 <prvInsertTimerInActiveList+0x80>)
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	3304      	adds	r3, #4
 80084aa:	4619      	mov	r1, r3
 80084ac:	4610      	mov	r0, r2
 80084ae:	f7fd fcfc 	bl	8005eaa <vListInsert>
		}
	}

	return xProcessTimerNow;
 80084b2:	697b      	ldr	r3, [r7, #20]
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3718      	adds	r7, #24
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	20005ecc 	.word	0x20005ecc
 80084c0:	20005ec8 	.word	0x20005ec8

080084c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b08e      	sub	sp, #56	; 0x38
 80084c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80084ca:	e0ca      	b.n	8008662 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	da18      	bge.n	8008504 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80084d2:	1d3b      	adds	r3, r7, #4
 80084d4:	3304      	adds	r3, #4
 80084d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80084d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d10a      	bne.n	80084f4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80084de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e2:	f383 8811 	msr	BASEPRI, r3
 80084e6:	f3bf 8f6f 	isb	sy
 80084ea:	f3bf 8f4f 	dsb	sy
 80084ee:	61fb      	str	r3, [r7, #28]
}
 80084f0:	bf00      	nop
 80084f2:	e7fe      	b.n	80084f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80084f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084fa:	6850      	ldr	r0, [r2, #4]
 80084fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084fe:	6892      	ldr	r2, [r2, #8]
 8008500:	4611      	mov	r1, r2
 8008502:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2b00      	cmp	r3, #0
 8008508:	f2c0 80aa 	blt.w	8008660 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008512:	695b      	ldr	r3, [r3, #20]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d004      	beq.n	8008522 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851a:	3304      	adds	r3, #4
 800851c:	4618      	mov	r0, r3
 800851e:	f7fd fcfd 	bl	8005f1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008522:	463b      	mov	r3, r7
 8008524:	4618      	mov	r0, r3
 8008526:	f7ff ff6b 	bl	8008400 <prvSampleTimeNow>
 800852a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2b09      	cmp	r3, #9
 8008530:	f200 8097 	bhi.w	8008662 <prvProcessReceivedCommands+0x19e>
 8008534:	a201      	add	r2, pc, #4	; (adr r2, 800853c <prvProcessReceivedCommands+0x78>)
 8008536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800853a:	bf00      	nop
 800853c:	08008565 	.word	0x08008565
 8008540:	08008565 	.word	0x08008565
 8008544:	08008565 	.word	0x08008565
 8008548:	080085d9 	.word	0x080085d9
 800854c:	080085ed 	.word	0x080085ed
 8008550:	08008637 	.word	0x08008637
 8008554:	08008565 	.word	0x08008565
 8008558:	08008565 	.word	0x08008565
 800855c:	080085d9 	.word	0x080085d9
 8008560:	080085ed 	.word	0x080085ed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008566:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800856a:	f043 0301 	orr.w	r3, r3, #1
 800856e:	b2da      	uxtb	r2, r3
 8008570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008572:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008576:	68ba      	ldr	r2, [r7, #8]
 8008578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800857a:	699b      	ldr	r3, [r3, #24]
 800857c:	18d1      	adds	r1, r2, r3
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008582:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008584:	f7ff ff5c 	bl	8008440 <prvInsertTimerInActiveList>
 8008588:	4603      	mov	r3, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d069      	beq.n	8008662 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800858e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008590:	6a1b      	ldr	r3, [r3, #32]
 8008592:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008594:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008598:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800859c:	f003 0304 	and.w	r3, r3, #4
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d05e      	beq.n	8008662 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80085a4:	68ba      	ldr	r2, [r7, #8]
 80085a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a8:	699b      	ldr	r3, [r3, #24]
 80085aa:	441a      	add	r2, r3
 80085ac:	2300      	movs	r3, #0
 80085ae:	9300      	str	r3, [sp, #0]
 80085b0:	2300      	movs	r3, #0
 80085b2:	2100      	movs	r1, #0
 80085b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085b6:	f7ff fe05 	bl	80081c4 <xTimerGenericCommand>
 80085ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80085bc:	6a3b      	ldr	r3, [r7, #32]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d14f      	bne.n	8008662 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80085c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c6:	f383 8811 	msr	BASEPRI, r3
 80085ca:	f3bf 8f6f 	isb	sy
 80085ce:	f3bf 8f4f 	dsb	sy
 80085d2:	61bb      	str	r3, [r7, #24]
}
 80085d4:	bf00      	nop
 80085d6:	e7fe      	b.n	80085d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80085d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085de:	f023 0301 	bic.w	r3, r3, #1
 80085e2:	b2da      	uxtb	r2, r3
 80085e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80085ea:	e03a      	b.n	8008662 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80085ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085f2:	f043 0301 	orr.w	r3, r3, #1
 80085f6:	b2da      	uxtb	r2, r3
 80085f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80085fe:	68ba      	ldr	r2, [r7, #8]
 8008600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008602:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008606:	699b      	ldr	r3, [r3, #24]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d10a      	bne.n	8008622 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800860c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008610:	f383 8811 	msr	BASEPRI, r3
 8008614:	f3bf 8f6f 	isb	sy
 8008618:	f3bf 8f4f 	dsb	sy
 800861c:	617b      	str	r3, [r7, #20]
}
 800861e:	bf00      	nop
 8008620:	e7fe      	b.n	8008620 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008624:	699a      	ldr	r2, [r3, #24]
 8008626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008628:	18d1      	adds	r1, r2, r3
 800862a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800862e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008630:	f7ff ff06 	bl	8008440 <prvInsertTimerInActiveList>
					break;
 8008634:	e015      	b.n	8008662 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008638:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800863c:	f003 0302 	and.w	r3, r3, #2
 8008640:	2b00      	cmp	r3, #0
 8008642:	d103      	bne.n	800864c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008644:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008646:	f000 fbdb 	bl	8008e00 <vPortFree>
 800864a:	e00a      	b.n	8008662 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800864c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008652:	f023 0301 	bic.w	r3, r3, #1
 8008656:	b2da      	uxtb	r2, r3
 8008658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800865e:	e000      	b.n	8008662 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008660:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008662:	4b08      	ldr	r3, [pc, #32]	; (8008684 <prvProcessReceivedCommands+0x1c0>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	1d39      	adds	r1, r7, #4
 8008668:	2200      	movs	r2, #0
 800866a:	4618      	mov	r0, r3
 800866c:	f7fe f904 	bl	8006878 <xQueueReceive>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	f47f af2a 	bne.w	80084cc <prvProcessReceivedCommands+0x8>
	}
}
 8008678:	bf00      	nop
 800867a:	bf00      	nop
 800867c:	3730      	adds	r7, #48	; 0x30
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	20005ed0 	.word	0x20005ed0

08008688 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b088      	sub	sp, #32
 800868c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800868e:	e048      	b.n	8008722 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008690:	4b2d      	ldr	r3, [pc, #180]	; (8008748 <prvSwitchTimerLists+0xc0>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800869a:	4b2b      	ldr	r3, [pc, #172]	; (8008748 <prvSwitchTimerLists+0xc0>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	3304      	adds	r3, #4
 80086a8:	4618      	mov	r0, r3
 80086aa:	f7fd fc37 	bl	8005f1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	6a1b      	ldr	r3, [r3, #32]
 80086b2:	68f8      	ldr	r0, [r7, #12]
 80086b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086bc:	f003 0304 	and.w	r3, r3, #4
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d02e      	beq.n	8008722 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	699b      	ldr	r3, [r3, #24]
 80086c8:	693a      	ldr	r2, [r7, #16]
 80086ca:	4413      	add	r3, r2
 80086cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d90e      	bls.n	80086f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	68ba      	ldr	r2, [r7, #8]
 80086da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	68fa      	ldr	r2, [r7, #12]
 80086e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80086e2:	4b19      	ldr	r3, [pc, #100]	; (8008748 <prvSwitchTimerLists+0xc0>)
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	3304      	adds	r3, #4
 80086ea:	4619      	mov	r1, r3
 80086ec:	4610      	mov	r0, r2
 80086ee:	f7fd fbdc 	bl	8005eaa <vListInsert>
 80086f2:	e016      	b.n	8008722 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80086f4:	2300      	movs	r3, #0
 80086f6:	9300      	str	r3, [sp, #0]
 80086f8:	2300      	movs	r3, #0
 80086fa:	693a      	ldr	r2, [r7, #16]
 80086fc:	2100      	movs	r1, #0
 80086fe:	68f8      	ldr	r0, [r7, #12]
 8008700:	f7ff fd60 	bl	80081c4 <xTimerGenericCommand>
 8008704:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d10a      	bne.n	8008722 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800870c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008710:	f383 8811 	msr	BASEPRI, r3
 8008714:	f3bf 8f6f 	isb	sy
 8008718:	f3bf 8f4f 	dsb	sy
 800871c:	603b      	str	r3, [r7, #0]
}
 800871e:	bf00      	nop
 8008720:	e7fe      	b.n	8008720 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008722:	4b09      	ldr	r3, [pc, #36]	; (8008748 <prvSwitchTimerLists+0xc0>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1b1      	bne.n	8008690 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800872c:	4b06      	ldr	r3, [pc, #24]	; (8008748 <prvSwitchTimerLists+0xc0>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008732:	4b06      	ldr	r3, [pc, #24]	; (800874c <prvSwitchTimerLists+0xc4>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a04      	ldr	r2, [pc, #16]	; (8008748 <prvSwitchTimerLists+0xc0>)
 8008738:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800873a:	4a04      	ldr	r2, [pc, #16]	; (800874c <prvSwitchTimerLists+0xc4>)
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	6013      	str	r3, [r2, #0]
}
 8008740:	bf00      	nop
 8008742:	3718      	adds	r7, #24
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}
 8008748:	20005ec8 	.word	0x20005ec8
 800874c:	20005ecc 	.word	0x20005ecc

08008750 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008756:	f000 f965 	bl	8008a24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800875a:	4b15      	ldr	r3, [pc, #84]	; (80087b0 <prvCheckForValidListAndQueue+0x60>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d120      	bne.n	80087a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008762:	4814      	ldr	r0, [pc, #80]	; (80087b4 <prvCheckForValidListAndQueue+0x64>)
 8008764:	f7fd fb50 	bl	8005e08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008768:	4813      	ldr	r0, [pc, #76]	; (80087b8 <prvCheckForValidListAndQueue+0x68>)
 800876a:	f7fd fb4d 	bl	8005e08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800876e:	4b13      	ldr	r3, [pc, #76]	; (80087bc <prvCheckForValidListAndQueue+0x6c>)
 8008770:	4a10      	ldr	r2, [pc, #64]	; (80087b4 <prvCheckForValidListAndQueue+0x64>)
 8008772:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008774:	4b12      	ldr	r3, [pc, #72]	; (80087c0 <prvCheckForValidListAndQueue+0x70>)
 8008776:	4a10      	ldr	r2, [pc, #64]	; (80087b8 <prvCheckForValidListAndQueue+0x68>)
 8008778:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800877a:	2300      	movs	r3, #0
 800877c:	9300      	str	r3, [sp, #0]
 800877e:	4b11      	ldr	r3, [pc, #68]	; (80087c4 <prvCheckForValidListAndQueue+0x74>)
 8008780:	4a11      	ldr	r2, [pc, #68]	; (80087c8 <prvCheckForValidListAndQueue+0x78>)
 8008782:	2110      	movs	r1, #16
 8008784:	200a      	movs	r0, #10
 8008786:	f7fd fc5b 	bl	8006040 <xQueueGenericCreateStatic>
 800878a:	4603      	mov	r3, r0
 800878c:	4a08      	ldr	r2, [pc, #32]	; (80087b0 <prvCheckForValidListAndQueue+0x60>)
 800878e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008790:	4b07      	ldr	r3, [pc, #28]	; (80087b0 <prvCheckForValidListAndQueue+0x60>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d005      	beq.n	80087a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008798:	4b05      	ldr	r3, [pc, #20]	; (80087b0 <prvCheckForValidListAndQueue+0x60>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	490b      	ldr	r1, [pc, #44]	; (80087cc <prvCheckForValidListAndQueue+0x7c>)
 800879e:	4618      	mov	r0, r3
 80087a0:	f7fe fc22 	bl	8006fe8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80087a4:	f000 f96e 	bl	8008a84 <vPortExitCritical>
}
 80087a8:	bf00      	nop
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	20005ed0 	.word	0x20005ed0
 80087b4:	20005ea0 	.word	0x20005ea0
 80087b8:	20005eb4 	.word	0x20005eb4
 80087bc:	20005ec8 	.word	0x20005ec8
 80087c0:	20005ecc 	.word	0x20005ecc
 80087c4:	20005f7c 	.word	0x20005f7c
 80087c8:	20005edc 	.word	0x20005edc
 80087cc:	08016698 	.word	0x08016698

080087d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80087d0:	b480      	push	{r7}
 80087d2:	b085      	sub	sp, #20
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	3b04      	subs	r3, #4
 80087e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80087e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	3b04      	subs	r3, #4
 80087ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	f023 0201 	bic.w	r2, r3, #1
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	3b04      	subs	r3, #4
 80087fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008800:	4a0c      	ldr	r2, [pc, #48]	; (8008834 <pxPortInitialiseStack+0x64>)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	3b14      	subs	r3, #20
 800880a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	3b04      	subs	r3, #4
 8008816:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f06f 0202 	mvn.w	r2, #2
 800881e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	3b20      	subs	r3, #32
 8008824:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008826:	68fb      	ldr	r3, [r7, #12]
}
 8008828:	4618      	mov	r0, r3
 800882a:	3714      	adds	r7, #20
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr
 8008834:	08008839 	.word	0x08008839

08008838 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008838:	b480      	push	{r7}
 800883a:	b085      	sub	sp, #20
 800883c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800883e:	2300      	movs	r3, #0
 8008840:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008842:	4b12      	ldr	r3, [pc, #72]	; (800888c <prvTaskExitError+0x54>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800884a:	d00a      	beq.n	8008862 <prvTaskExitError+0x2a>
	__asm volatile
 800884c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008850:	f383 8811 	msr	BASEPRI, r3
 8008854:	f3bf 8f6f 	isb	sy
 8008858:	f3bf 8f4f 	dsb	sy
 800885c:	60fb      	str	r3, [r7, #12]
}
 800885e:	bf00      	nop
 8008860:	e7fe      	b.n	8008860 <prvTaskExitError+0x28>
	__asm volatile
 8008862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008866:	f383 8811 	msr	BASEPRI, r3
 800886a:	f3bf 8f6f 	isb	sy
 800886e:	f3bf 8f4f 	dsb	sy
 8008872:	60bb      	str	r3, [r7, #8]
}
 8008874:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008876:	bf00      	nop
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d0fc      	beq.n	8008878 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800887e:	bf00      	nop
 8008880:	bf00      	nop
 8008882:	3714      	adds	r7, #20
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr
 800888c:	20000020 	.word	0x20000020

08008890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008890:	4b07      	ldr	r3, [pc, #28]	; (80088b0 <pxCurrentTCBConst2>)
 8008892:	6819      	ldr	r1, [r3, #0]
 8008894:	6808      	ldr	r0, [r1, #0]
 8008896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800889a:	f380 8809 	msr	PSP, r0
 800889e:	f3bf 8f6f 	isb	sy
 80088a2:	f04f 0000 	mov.w	r0, #0
 80088a6:	f380 8811 	msr	BASEPRI, r0
 80088aa:	4770      	bx	lr
 80088ac:	f3af 8000 	nop.w

080088b0 <pxCurrentTCBConst2>:
 80088b0:	200059a0 	.word	0x200059a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80088b4:	bf00      	nop
 80088b6:	bf00      	nop

080088b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80088b8:	4808      	ldr	r0, [pc, #32]	; (80088dc <prvPortStartFirstTask+0x24>)
 80088ba:	6800      	ldr	r0, [r0, #0]
 80088bc:	6800      	ldr	r0, [r0, #0]
 80088be:	f380 8808 	msr	MSP, r0
 80088c2:	f04f 0000 	mov.w	r0, #0
 80088c6:	f380 8814 	msr	CONTROL, r0
 80088ca:	b662      	cpsie	i
 80088cc:	b661      	cpsie	f
 80088ce:	f3bf 8f4f 	dsb	sy
 80088d2:	f3bf 8f6f 	isb	sy
 80088d6:	df00      	svc	0
 80088d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80088da:	bf00      	nop
 80088dc:	e000ed08 	.word	0xe000ed08

080088e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b086      	sub	sp, #24
 80088e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80088e6:	4b46      	ldr	r3, [pc, #280]	; (8008a00 <xPortStartScheduler+0x120>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a46      	ldr	r2, [pc, #280]	; (8008a04 <xPortStartScheduler+0x124>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d10a      	bne.n	8008906 <xPortStartScheduler+0x26>
	__asm volatile
 80088f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f4:	f383 8811 	msr	BASEPRI, r3
 80088f8:	f3bf 8f6f 	isb	sy
 80088fc:	f3bf 8f4f 	dsb	sy
 8008900:	613b      	str	r3, [r7, #16]
}
 8008902:	bf00      	nop
 8008904:	e7fe      	b.n	8008904 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008906:	4b3e      	ldr	r3, [pc, #248]	; (8008a00 <xPortStartScheduler+0x120>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a3f      	ldr	r2, [pc, #252]	; (8008a08 <xPortStartScheduler+0x128>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d10a      	bne.n	8008926 <xPortStartScheduler+0x46>
	__asm volatile
 8008910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008914:	f383 8811 	msr	BASEPRI, r3
 8008918:	f3bf 8f6f 	isb	sy
 800891c:	f3bf 8f4f 	dsb	sy
 8008920:	60fb      	str	r3, [r7, #12]
}
 8008922:	bf00      	nop
 8008924:	e7fe      	b.n	8008924 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008926:	4b39      	ldr	r3, [pc, #228]	; (8008a0c <xPortStartScheduler+0x12c>)
 8008928:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	b2db      	uxtb	r3, r3
 8008930:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	22ff      	movs	r2, #255	; 0xff
 8008936:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	b2db      	uxtb	r3, r3
 800893e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008940:	78fb      	ldrb	r3, [r7, #3]
 8008942:	b2db      	uxtb	r3, r3
 8008944:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008948:	b2da      	uxtb	r2, r3
 800894a:	4b31      	ldr	r3, [pc, #196]	; (8008a10 <xPortStartScheduler+0x130>)
 800894c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800894e:	4b31      	ldr	r3, [pc, #196]	; (8008a14 <xPortStartScheduler+0x134>)
 8008950:	2207      	movs	r2, #7
 8008952:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008954:	e009      	b.n	800896a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008956:	4b2f      	ldr	r3, [pc, #188]	; (8008a14 <xPortStartScheduler+0x134>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	3b01      	subs	r3, #1
 800895c:	4a2d      	ldr	r2, [pc, #180]	; (8008a14 <xPortStartScheduler+0x134>)
 800895e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008960:	78fb      	ldrb	r3, [r7, #3]
 8008962:	b2db      	uxtb	r3, r3
 8008964:	005b      	lsls	r3, r3, #1
 8008966:	b2db      	uxtb	r3, r3
 8008968:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800896a:	78fb      	ldrb	r3, [r7, #3]
 800896c:	b2db      	uxtb	r3, r3
 800896e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008972:	2b80      	cmp	r3, #128	; 0x80
 8008974:	d0ef      	beq.n	8008956 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008976:	4b27      	ldr	r3, [pc, #156]	; (8008a14 <xPortStartScheduler+0x134>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f1c3 0307 	rsb	r3, r3, #7
 800897e:	2b04      	cmp	r3, #4
 8008980:	d00a      	beq.n	8008998 <xPortStartScheduler+0xb8>
	__asm volatile
 8008982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008986:	f383 8811 	msr	BASEPRI, r3
 800898a:	f3bf 8f6f 	isb	sy
 800898e:	f3bf 8f4f 	dsb	sy
 8008992:	60bb      	str	r3, [r7, #8]
}
 8008994:	bf00      	nop
 8008996:	e7fe      	b.n	8008996 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008998:	4b1e      	ldr	r3, [pc, #120]	; (8008a14 <xPortStartScheduler+0x134>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	021b      	lsls	r3, r3, #8
 800899e:	4a1d      	ldr	r2, [pc, #116]	; (8008a14 <xPortStartScheduler+0x134>)
 80089a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80089a2:	4b1c      	ldr	r3, [pc, #112]	; (8008a14 <xPortStartScheduler+0x134>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80089aa:	4a1a      	ldr	r2, [pc, #104]	; (8008a14 <xPortStartScheduler+0x134>)
 80089ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	b2da      	uxtb	r2, r3
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80089b6:	4b18      	ldr	r3, [pc, #96]	; (8008a18 <xPortStartScheduler+0x138>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a17      	ldr	r2, [pc, #92]	; (8008a18 <xPortStartScheduler+0x138>)
 80089bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80089c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80089c2:	4b15      	ldr	r3, [pc, #84]	; (8008a18 <xPortStartScheduler+0x138>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a14      	ldr	r2, [pc, #80]	; (8008a18 <xPortStartScheduler+0x138>)
 80089c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80089cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80089ce:	f000 f8dd 	bl	8008b8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80089d2:	4b12      	ldr	r3, [pc, #72]	; (8008a1c <xPortStartScheduler+0x13c>)
 80089d4:	2200      	movs	r2, #0
 80089d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80089d8:	f000 f8fc 	bl	8008bd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80089dc:	4b10      	ldr	r3, [pc, #64]	; (8008a20 <xPortStartScheduler+0x140>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a0f      	ldr	r2, [pc, #60]	; (8008a20 <xPortStartScheduler+0x140>)
 80089e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80089e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80089e8:	f7ff ff66 	bl	80088b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80089ec:	f7fe ff48 	bl	8007880 <vTaskSwitchContext>
	prvTaskExitError();
 80089f0:	f7ff ff22 	bl	8008838 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3718      	adds	r7, #24
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	e000ed00 	.word	0xe000ed00
 8008a04:	410fc271 	.word	0x410fc271
 8008a08:	410fc270 	.word	0x410fc270
 8008a0c:	e000e400 	.word	0xe000e400
 8008a10:	20005fcc 	.word	0x20005fcc
 8008a14:	20005fd0 	.word	0x20005fd0
 8008a18:	e000ed20 	.word	0xe000ed20
 8008a1c:	20000020 	.word	0x20000020
 8008a20:	e000ef34 	.word	0xe000ef34

08008a24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
	__asm volatile
 8008a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2e:	f383 8811 	msr	BASEPRI, r3
 8008a32:	f3bf 8f6f 	isb	sy
 8008a36:	f3bf 8f4f 	dsb	sy
 8008a3a:	607b      	str	r3, [r7, #4]
}
 8008a3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008a3e:	4b0f      	ldr	r3, [pc, #60]	; (8008a7c <vPortEnterCritical+0x58>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	3301      	adds	r3, #1
 8008a44:	4a0d      	ldr	r2, [pc, #52]	; (8008a7c <vPortEnterCritical+0x58>)
 8008a46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008a48:	4b0c      	ldr	r3, [pc, #48]	; (8008a7c <vPortEnterCritical+0x58>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d10f      	bne.n	8008a70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008a50:	4b0b      	ldr	r3, [pc, #44]	; (8008a80 <vPortEnterCritical+0x5c>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00a      	beq.n	8008a70 <vPortEnterCritical+0x4c>
	__asm volatile
 8008a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5e:	f383 8811 	msr	BASEPRI, r3
 8008a62:	f3bf 8f6f 	isb	sy
 8008a66:	f3bf 8f4f 	dsb	sy
 8008a6a:	603b      	str	r3, [r7, #0]
}
 8008a6c:	bf00      	nop
 8008a6e:	e7fe      	b.n	8008a6e <vPortEnterCritical+0x4a>
	}
}
 8008a70:	bf00      	nop
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr
 8008a7c:	20000020 	.word	0x20000020
 8008a80:	e000ed04 	.word	0xe000ed04

08008a84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008a8a:	4b12      	ldr	r3, [pc, #72]	; (8008ad4 <vPortExitCritical+0x50>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d10a      	bne.n	8008aa8 <vPortExitCritical+0x24>
	__asm volatile
 8008a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a96:	f383 8811 	msr	BASEPRI, r3
 8008a9a:	f3bf 8f6f 	isb	sy
 8008a9e:	f3bf 8f4f 	dsb	sy
 8008aa2:	607b      	str	r3, [r7, #4]
}
 8008aa4:	bf00      	nop
 8008aa6:	e7fe      	b.n	8008aa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008aa8:	4b0a      	ldr	r3, [pc, #40]	; (8008ad4 <vPortExitCritical+0x50>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	3b01      	subs	r3, #1
 8008aae:	4a09      	ldr	r2, [pc, #36]	; (8008ad4 <vPortExitCritical+0x50>)
 8008ab0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008ab2:	4b08      	ldr	r3, [pc, #32]	; (8008ad4 <vPortExitCritical+0x50>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d105      	bne.n	8008ac6 <vPortExitCritical+0x42>
 8008aba:	2300      	movs	r3, #0
 8008abc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	f383 8811 	msr	BASEPRI, r3
}
 8008ac4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008ac6:	bf00      	nop
 8008ac8:	370c      	adds	r7, #12
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	20000020 	.word	0x20000020
	...

08008ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ae0:	f3ef 8009 	mrs	r0, PSP
 8008ae4:	f3bf 8f6f 	isb	sy
 8008ae8:	4b15      	ldr	r3, [pc, #84]	; (8008b40 <pxCurrentTCBConst>)
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	f01e 0f10 	tst.w	lr, #16
 8008af0:	bf08      	it	eq
 8008af2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008af6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008afa:	6010      	str	r0, [r2, #0]
 8008afc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008b00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008b04:	f380 8811 	msr	BASEPRI, r0
 8008b08:	f3bf 8f4f 	dsb	sy
 8008b0c:	f3bf 8f6f 	isb	sy
 8008b10:	f7fe feb6 	bl	8007880 <vTaskSwitchContext>
 8008b14:	f04f 0000 	mov.w	r0, #0
 8008b18:	f380 8811 	msr	BASEPRI, r0
 8008b1c:	bc09      	pop	{r0, r3}
 8008b1e:	6819      	ldr	r1, [r3, #0]
 8008b20:	6808      	ldr	r0, [r1, #0]
 8008b22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b26:	f01e 0f10 	tst.w	lr, #16
 8008b2a:	bf08      	it	eq
 8008b2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008b30:	f380 8809 	msr	PSP, r0
 8008b34:	f3bf 8f6f 	isb	sy
 8008b38:	4770      	bx	lr
 8008b3a:	bf00      	nop
 8008b3c:	f3af 8000 	nop.w

08008b40 <pxCurrentTCBConst>:
 8008b40:	200059a0 	.word	0x200059a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008b44:	bf00      	nop
 8008b46:	bf00      	nop

08008b48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8008b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b52:	f383 8811 	msr	BASEPRI, r3
 8008b56:	f3bf 8f6f 	isb	sy
 8008b5a:	f3bf 8f4f 	dsb	sy
 8008b5e:	607b      	str	r3, [r7, #4]
}
 8008b60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008b62:	f7fe fdd3 	bl	800770c <xTaskIncrementTick>
 8008b66:	4603      	mov	r3, r0
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d003      	beq.n	8008b74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008b6c:	4b06      	ldr	r3, [pc, #24]	; (8008b88 <xPortSysTickHandler+0x40>)
 8008b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b72:	601a      	str	r2, [r3, #0]
 8008b74:	2300      	movs	r3, #0
 8008b76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	f383 8811 	msr	BASEPRI, r3
}
 8008b7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008b80:	bf00      	nop
 8008b82:	3708      	adds	r7, #8
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	e000ed04 	.word	0xe000ed04

08008b8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008b90:	4b0b      	ldr	r3, [pc, #44]	; (8008bc0 <vPortSetupTimerInterrupt+0x34>)
 8008b92:	2200      	movs	r2, #0
 8008b94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008b96:	4b0b      	ldr	r3, [pc, #44]	; (8008bc4 <vPortSetupTimerInterrupt+0x38>)
 8008b98:	2200      	movs	r2, #0
 8008b9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008b9c:	4b0a      	ldr	r3, [pc, #40]	; (8008bc8 <vPortSetupTimerInterrupt+0x3c>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a0a      	ldr	r2, [pc, #40]	; (8008bcc <vPortSetupTimerInterrupt+0x40>)
 8008ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ba6:	099b      	lsrs	r3, r3, #6
 8008ba8:	4a09      	ldr	r2, [pc, #36]	; (8008bd0 <vPortSetupTimerInterrupt+0x44>)
 8008baa:	3b01      	subs	r3, #1
 8008bac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008bae:	4b04      	ldr	r3, [pc, #16]	; (8008bc0 <vPortSetupTimerInterrupt+0x34>)
 8008bb0:	2207      	movs	r2, #7
 8008bb2:	601a      	str	r2, [r3, #0]
}
 8008bb4:	bf00      	nop
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr
 8008bbe:	bf00      	nop
 8008bc0:	e000e010 	.word	0xe000e010
 8008bc4:	e000e018 	.word	0xe000e018
 8008bc8:	20000000 	.word	0x20000000
 8008bcc:	10624dd3 	.word	0x10624dd3
 8008bd0:	e000e014 	.word	0xe000e014

08008bd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008bd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008be4 <vPortEnableVFP+0x10>
 8008bd8:	6801      	ldr	r1, [r0, #0]
 8008bda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008bde:	6001      	str	r1, [r0, #0]
 8008be0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008be2:	bf00      	nop
 8008be4:	e000ed88 	.word	0xe000ed88

08008be8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008be8:	b480      	push	{r7}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008bee:	f3ef 8305 	mrs	r3, IPSR
 8008bf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2b0f      	cmp	r3, #15
 8008bf8:	d914      	bls.n	8008c24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008bfa:	4a17      	ldr	r2, [pc, #92]	; (8008c58 <vPortValidateInterruptPriority+0x70>)
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	4413      	add	r3, r2
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008c04:	4b15      	ldr	r3, [pc, #84]	; (8008c5c <vPortValidateInterruptPriority+0x74>)
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	7afa      	ldrb	r2, [r7, #11]
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d20a      	bcs.n	8008c24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c12:	f383 8811 	msr	BASEPRI, r3
 8008c16:	f3bf 8f6f 	isb	sy
 8008c1a:	f3bf 8f4f 	dsb	sy
 8008c1e:	607b      	str	r3, [r7, #4]
}
 8008c20:	bf00      	nop
 8008c22:	e7fe      	b.n	8008c22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008c24:	4b0e      	ldr	r3, [pc, #56]	; (8008c60 <vPortValidateInterruptPriority+0x78>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008c2c:	4b0d      	ldr	r3, [pc, #52]	; (8008c64 <vPortValidateInterruptPriority+0x7c>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d90a      	bls.n	8008c4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c38:	f383 8811 	msr	BASEPRI, r3
 8008c3c:	f3bf 8f6f 	isb	sy
 8008c40:	f3bf 8f4f 	dsb	sy
 8008c44:	603b      	str	r3, [r7, #0]
}
 8008c46:	bf00      	nop
 8008c48:	e7fe      	b.n	8008c48 <vPortValidateInterruptPriority+0x60>
	}
 8008c4a:	bf00      	nop
 8008c4c:	3714      	adds	r7, #20
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr
 8008c56:	bf00      	nop
 8008c58:	e000e3f0 	.word	0xe000e3f0
 8008c5c:	20005fcc 	.word	0x20005fcc
 8008c60:	e000ed0c 	.word	0xe000ed0c
 8008c64:	20005fd0 	.word	0x20005fd0

08008c68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b08a      	sub	sp, #40	; 0x28
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008c70:	2300      	movs	r3, #0
 8008c72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008c74:	f7fe fc7c 	bl	8007570 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008c78:	4b5b      	ldr	r3, [pc, #364]	; (8008de8 <pvPortMalloc+0x180>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d101      	bne.n	8008c84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008c80:	f000 f920 	bl	8008ec4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008c84:	4b59      	ldr	r3, [pc, #356]	; (8008dec <pvPortMalloc+0x184>)
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	4013      	ands	r3, r2
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	f040 8093 	bne.w	8008db8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d01d      	beq.n	8008cd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008c98:	2208      	movs	r2, #8
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	4413      	add	r3, r2
 8008c9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f003 0307 	and.w	r3, r3, #7
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d014      	beq.n	8008cd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f023 0307 	bic.w	r3, r3, #7
 8008cb0:	3308      	adds	r3, #8
 8008cb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f003 0307 	and.w	r3, r3, #7
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d00a      	beq.n	8008cd4 <pvPortMalloc+0x6c>
	__asm volatile
 8008cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc2:	f383 8811 	msr	BASEPRI, r3
 8008cc6:	f3bf 8f6f 	isb	sy
 8008cca:	f3bf 8f4f 	dsb	sy
 8008cce:	617b      	str	r3, [r7, #20]
}
 8008cd0:	bf00      	nop
 8008cd2:	e7fe      	b.n	8008cd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d06e      	beq.n	8008db8 <pvPortMalloc+0x150>
 8008cda:	4b45      	ldr	r3, [pc, #276]	; (8008df0 <pvPortMalloc+0x188>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d869      	bhi.n	8008db8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008ce4:	4b43      	ldr	r3, [pc, #268]	; (8008df4 <pvPortMalloc+0x18c>)
 8008ce6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ce8:	4b42      	ldr	r3, [pc, #264]	; (8008df4 <pvPortMalloc+0x18c>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008cee:	e004      	b.n	8008cfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d903      	bls.n	8008d0c <pvPortMalloc+0xa4>
 8008d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d1f1      	bne.n	8008cf0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008d0c:	4b36      	ldr	r3, [pc, #216]	; (8008de8 <pvPortMalloc+0x180>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d050      	beq.n	8008db8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008d16:	6a3b      	ldr	r3, [r7, #32]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	2208      	movs	r2, #8
 8008d1c:	4413      	add	r3, r2
 8008d1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d22:	681a      	ldr	r2, [r3, #0]
 8008d24:	6a3b      	ldr	r3, [r7, #32]
 8008d26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2a:	685a      	ldr	r2, [r3, #4]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	1ad2      	subs	r2, r2, r3
 8008d30:	2308      	movs	r3, #8
 8008d32:	005b      	lsls	r3, r3, #1
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d91f      	bls.n	8008d78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d40:	69bb      	ldr	r3, [r7, #24]
 8008d42:	f003 0307 	and.w	r3, r3, #7
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d00a      	beq.n	8008d60 <pvPortMalloc+0xf8>
	__asm volatile
 8008d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d4e:	f383 8811 	msr	BASEPRI, r3
 8008d52:	f3bf 8f6f 	isb	sy
 8008d56:	f3bf 8f4f 	dsb	sy
 8008d5a:	613b      	str	r3, [r7, #16]
}
 8008d5c:	bf00      	nop
 8008d5e:	e7fe      	b.n	8008d5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d62:	685a      	ldr	r2, [r3, #4]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	1ad2      	subs	r2, r2, r3
 8008d68:	69bb      	ldr	r3, [r7, #24]
 8008d6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008d72:	69b8      	ldr	r0, [r7, #24]
 8008d74:	f000 f908 	bl	8008f88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008d78:	4b1d      	ldr	r3, [pc, #116]	; (8008df0 <pvPortMalloc+0x188>)
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	1ad3      	subs	r3, r2, r3
 8008d82:	4a1b      	ldr	r2, [pc, #108]	; (8008df0 <pvPortMalloc+0x188>)
 8008d84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008d86:	4b1a      	ldr	r3, [pc, #104]	; (8008df0 <pvPortMalloc+0x188>)
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	4b1b      	ldr	r3, [pc, #108]	; (8008df8 <pvPortMalloc+0x190>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d203      	bcs.n	8008d9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008d92:	4b17      	ldr	r3, [pc, #92]	; (8008df0 <pvPortMalloc+0x188>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a18      	ldr	r2, [pc, #96]	; (8008df8 <pvPortMalloc+0x190>)
 8008d98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9c:	685a      	ldr	r2, [r3, #4]
 8008d9e:	4b13      	ldr	r3, [pc, #76]	; (8008dec <pvPortMalloc+0x184>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	431a      	orrs	r2, r3
 8008da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008daa:	2200      	movs	r2, #0
 8008dac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008dae:	4b13      	ldr	r3, [pc, #76]	; (8008dfc <pvPortMalloc+0x194>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	3301      	adds	r3, #1
 8008db4:	4a11      	ldr	r2, [pc, #68]	; (8008dfc <pvPortMalloc+0x194>)
 8008db6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008db8:	f7fe fbe8 	bl	800758c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	f003 0307 	and.w	r3, r3, #7
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d00a      	beq.n	8008ddc <pvPortMalloc+0x174>
	__asm volatile
 8008dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dca:	f383 8811 	msr	BASEPRI, r3
 8008dce:	f3bf 8f6f 	isb	sy
 8008dd2:	f3bf 8f4f 	dsb	sy
 8008dd6:	60fb      	str	r3, [r7, #12]
}
 8008dd8:	bf00      	nop
 8008dda:	e7fe      	b.n	8008dda <pvPortMalloc+0x172>
	return pvReturn;
 8008ddc:	69fb      	ldr	r3, [r7, #28]
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3728      	adds	r7, #40	; 0x28
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
 8008de6:	bf00      	nop
 8008de8:	20009bdc 	.word	0x20009bdc
 8008dec:	20009bf0 	.word	0x20009bf0
 8008df0:	20009be0 	.word	0x20009be0
 8008df4:	20009bd4 	.word	0x20009bd4
 8008df8:	20009be4 	.word	0x20009be4
 8008dfc:	20009be8 	.word	0x20009be8

08008e00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b086      	sub	sp, #24
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d04d      	beq.n	8008eae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008e12:	2308      	movs	r3, #8
 8008e14:	425b      	negs	r3, r3
 8008e16:	697a      	ldr	r2, [r7, #20]
 8008e18:	4413      	add	r3, r2
 8008e1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	685a      	ldr	r2, [r3, #4]
 8008e24:	4b24      	ldr	r3, [pc, #144]	; (8008eb8 <vPortFree+0xb8>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4013      	ands	r3, r2
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d10a      	bne.n	8008e44 <vPortFree+0x44>
	__asm volatile
 8008e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e32:	f383 8811 	msr	BASEPRI, r3
 8008e36:	f3bf 8f6f 	isb	sy
 8008e3a:	f3bf 8f4f 	dsb	sy
 8008e3e:	60fb      	str	r3, [r7, #12]
}
 8008e40:	bf00      	nop
 8008e42:	e7fe      	b.n	8008e42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d00a      	beq.n	8008e62 <vPortFree+0x62>
	__asm volatile
 8008e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e50:	f383 8811 	msr	BASEPRI, r3
 8008e54:	f3bf 8f6f 	isb	sy
 8008e58:	f3bf 8f4f 	dsb	sy
 8008e5c:	60bb      	str	r3, [r7, #8]
}
 8008e5e:	bf00      	nop
 8008e60:	e7fe      	b.n	8008e60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	685a      	ldr	r2, [r3, #4]
 8008e66:	4b14      	ldr	r3, [pc, #80]	; (8008eb8 <vPortFree+0xb8>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4013      	ands	r3, r2
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d01e      	beq.n	8008eae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d11a      	bne.n	8008eae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	685a      	ldr	r2, [r3, #4]
 8008e7c:	4b0e      	ldr	r3, [pc, #56]	; (8008eb8 <vPortFree+0xb8>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	43db      	mvns	r3, r3
 8008e82:	401a      	ands	r2, r3
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008e88:	f7fe fb72 	bl	8007570 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	685a      	ldr	r2, [r3, #4]
 8008e90:	4b0a      	ldr	r3, [pc, #40]	; (8008ebc <vPortFree+0xbc>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4413      	add	r3, r2
 8008e96:	4a09      	ldr	r2, [pc, #36]	; (8008ebc <vPortFree+0xbc>)
 8008e98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008e9a:	6938      	ldr	r0, [r7, #16]
 8008e9c:	f000 f874 	bl	8008f88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008ea0:	4b07      	ldr	r3, [pc, #28]	; (8008ec0 <vPortFree+0xc0>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	4a06      	ldr	r2, [pc, #24]	; (8008ec0 <vPortFree+0xc0>)
 8008ea8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008eaa:	f7fe fb6f 	bl	800758c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008eae:	bf00      	nop
 8008eb0:	3718      	adds	r7, #24
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop
 8008eb8:	20009bf0 	.word	0x20009bf0
 8008ebc:	20009be0 	.word	0x20009be0
 8008ec0:	20009bec 	.word	0x20009bec

08008ec4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b085      	sub	sp, #20
 8008ec8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008eca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008ece:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008ed0:	4b27      	ldr	r3, [pc, #156]	; (8008f70 <prvHeapInit+0xac>)
 8008ed2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f003 0307 	and.w	r3, r3, #7
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d00c      	beq.n	8008ef8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	3307      	adds	r3, #7
 8008ee2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f023 0307 	bic.w	r3, r3, #7
 8008eea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008eec:	68ba      	ldr	r2, [r7, #8]
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	1ad3      	subs	r3, r2, r3
 8008ef2:	4a1f      	ldr	r2, [pc, #124]	; (8008f70 <prvHeapInit+0xac>)
 8008ef4:	4413      	add	r3, r2
 8008ef6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008efc:	4a1d      	ldr	r2, [pc, #116]	; (8008f74 <prvHeapInit+0xb0>)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008f02:	4b1c      	ldr	r3, [pc, #112]	; (8008f74 <prvHeapInit+0xb0>)
 8008f04:	2200      	movs	r2, #0
 8008f06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	68ba      	ldr	r2, [r7, #8]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008f10:	2208      	movs	r2, #8
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	1a9b      	subs	r3, r3, r2
 8008f16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f023 0307 	bic.w	r3, r3, #7
 8008f1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	4a15      	ldr	r2, [pc, #84]	; (8008f78 <prvHeapInit+0xb4>)
 8008f24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008f26:	4b14      	ldr	r3, [pc, #80]	; (8008f78 <prvHeapInit+0xb4>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008f2e:	4b12      	ldr	r3, [pc, #72]	; (8008f78 <prvHeapInit+0xb4>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	2200      	movs	r2, #0
 8008f34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	68fa      	ldr	r2, [r7, #12]
 8008f3e:	1ad2      	subs	r2, r2, r3
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008f44:	4b0c      	ldr	r3, [pc, #48]	; (8008f78 <prvHeapInit+0xb4>)
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	4a0a      	ldr	r2, [pc, #40]	; (8008f7c <prvHeapInit+0xb8>)
 8008f52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	4a09      	ldr	r2, [pc, #36]	; (8008f80 <prvHeapInit+0xbc>)
 8008f5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008f5c:	4b09      	ldr	r3, [pc, #36]	; (8008f84 <prvHeapInit+0xc0>)
 8008f5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008f62:	601a      	str	r2, [r3, #0]
}
 8008f64:	bf00      	nop
 8008f66:	3714      	adds	r7, #20
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr
 8008f70:	20005fd4 	.word	0x20005fd4
 8008f74:	20009bd4 	.word	0x20009bd4
 8008f78:	20009bdc 	.word	0x20009bdc
 8008f7c:	20009be4 	.word	0x20009be4
 8008f80:	20009be0 	.word	0x20009be0
 8008f84:	20009bf0 	.word	0x20009bf0

08008f88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008f90:	4b28      	ldr	r3, [pc, #160]	; (8009034 <prvInsertBlockIntoFreeList+0xac>)
 8008f92:	60fb      	str	r3, [r7, #12]
 8008f94:	e002      	b.n	8008f9c <prvInsertBlockIntoFreeList+0x14>
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	60fb      	str	r3, [r7, #12]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d8f7      	bhi.n	8008f96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	68ba      	ldr	r2, [r7, #8]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d108      	bne.n	8008fca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	685a      	ldr	r2, [r3, #4]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	441a      	add	r2, r3
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	68ba      	ldr	r2, [r7, #8]
 8008fd4:	441a      	add	r2, r3
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d118      	bne.n	8009010 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	4b15      	ldr	r3, [pc, #84]	; (8009038 <prvInsertBlockIntoFreeList+0xb0>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d00d      	beq.n	8009006 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	685a      	ldr	r2, [r3, #4]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	441a      	add	r2, r3
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	681a      	ldr	r2, [r3, #0]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	601a      	str	r2, [r3, #0]
 8009004:	e008      	b.n	8009018 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009006:	4b0c      	ldr	r3, [pc, #48]	; (8009038 <prvInsertBlockIntoFreeList+0xb0>)
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	601a      	str	r2, [r3, #0]
 800900e:	e003      	b.n	8009018 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	429a      	cmp	r2, r3
 800901e:	d002      	beq.n	8009026 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009026:	bf00      	nop
 8009028:	3714      	adds	r7, #20
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr
 8009032:	bf00      	nop
 8009034:	20009bd4 	.word	0x20009bd4
 8009038:	20009bdc 	.word	0x20009bdc

0800903c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b084      	sub	sp, #16
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8009046:	f007 fae1 	bl	801060c <sys_timeouts_sleeptime>
 800904a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009052:	d10b      	bne.n	800906c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009054:	4813      	ldr	r0, [pc, #76]	; (80090a4 <tcpip_timeouts_mbox_fetch+0x68>)
 8009056:	f00c f9ee 	bl	8015436 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800905a:	2200      	movs	r2, #0
 800905c:	6839      	ldr	r1, [r7, #0]
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f00c f976 	bl	8015350 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009064:	480f      	ldr	r0, [pc, #60]	; (80090a4 <tcpip_timeouts_mbox_fetch+0x68>)
 8009066:	f00c f9d7 	bl	8015418 <sys_mutex_lock>
    return;
 800906a:	e018      	b.n	800909e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d102      	bne.n	8009078 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8009072:	f007 fa91 	bl	8010598 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009076:	e7e6      	b.n	8009046 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8009078:	480a      	ldr	r0, [pc, #40]	; (80090a4 <tcpip_timeouts_mbox_fetch+0x68>)
 800907a:	f00c f9dc 	bl	8015436 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800907e:	68fa      	ldr	r2, [r7, #12]
 8009080:	6839      	ldr	r1, [r7, #0]
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f00c f964 	bl	8015350 <sys_arch_mbox_fetch>
 8009088:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800908a:	4806      	ldr	r0, [pc, #24]	; (80090a4 <tcpip_timeouts_mbox_fetch+0x68>)
 800908c:	f00c f9c4 	bl	8015418 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009096:	d102      	bne.n	800909e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8009098:	f007 fa7e 	bl	8010598 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800909c:	e7d3      	b.n	8009046 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800909e:	3710      	adds	r7, #16
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	20009c00 	.word	0x20009c00

080090a8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b084      	sub	sp, #16
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80090b0:	4810      	ldr	r0, [pc, #64]	; (80090f4 <tcpip_thread+0x4c>)
 80090b2:	f00c f9b1 	bl	8015418 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80090b6:	4b10      	ldr	r3, [pc, #64]	; (80090f8 <tcpip_thread+0x50>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d005      	beq.n	80090ca <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80090be:	4b0e      	ldr	r3, [pc, #56]	; (80090f8 <tcpip_thread+0x50>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a0e      	ldr	r2, [pc, #56]	; (80090fc <tcpip_thread+0x54>)
 80090c4:	6812      	ldr	r2, [r2, #0]
 80090c6:	4610      	mov	r0, r2
 80090c8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80090ca:	f107 030c 	add.w	r3, r7, #12
 80090ce:	4619      	mov	r1, r3
 80090d0:	480b      	ldr	r0, [pc, #44]	; (8009100 <tcpip_thread+0x58>)
 80090d2:	f7ff ffb3 	bl	800903c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d106      	bne.n	80090ea <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80090dc:	4b09      	ldr	r3, [pc, #36]	; (8009104 <tcpip_thread+0x5c>)
 80090de:	2291      	movs	r2, #145	; 0x91
 80090e0:	4909      	ldr	r1, [pc, #36]	; (8009108 <tcpip_thread+0x60>)
 80090e2:	480a      	ldr	r0, [pc, #40]	; (800910c <tcpip_thread+0x64>)
 80090e4:	f00c fa3c 	bl	8015560 <iprintf>
      continue;
 80090e8:	e003      	b.n	80090f2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	4618      	mov	r0, r3
 80090ee:	f000 f80f 	bl	8009110 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80090f2:	e7ea      	b.n	80090ca <tcpip_thread+0x22>
 80090f4:	20009c00 	.word	0x20009c00
 80090f8:	20009bf4 	.word	0x20009bf4
 80090fc:	20009bf8 	.word	0x20009bf8
 8009100:	20009bfc 	.word	0x20009bfc
 8009104:	080166a0 	.word	0x080166a0
 8009108:	080166d0 	.word	0x080166d0
 800910c:	080166f0 	.word	0x080166f0

08009110 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	2b02      	cmp	r3, #2
 800911e:	d026      	beq.n	800916e <tcpip_thread_handle_msg+0x5e>
 8009120:	2b02      	cmp	r3, #2
 8009122:	dc2b      	bgt.n	800917c <tcpip_thread_handle_msg+0x6c>
 8009124:	2b00      	cmp	r3, #0
 8009126:	d002      	beq.n	800912e <tcpip_thread_handle_msg+0x1e>
 8009128:	2b01      	cmp	r3, #1
 800912a:	d015      	beq.n	8009158 <tcpip_thread_handle_msg+0x48>
 800912c:	e026      	b.n	800917c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	68db      	ldr	r3, [r3, #12]
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	6850      	ldr	r0, [r2, #4]
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	6892      	ldr	r2, [r2, #8]
 800913a:	4611      	mov	r1, r2
 800913c:	4798      	blx	r3
 800913e:	4603      	mov	r3, r0
 8009140:	2b00      	cmp	r3, #0
 8009142:	d004      	beq.n	800914e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	4618      	mov	r0, r3
 800914a:	f001 fd17 	bl	800ab7c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800914e:	6879      	ldr	r1, [r7, #4]
 8009150:	2009      	movs	r0, #9
 8009152:	f000 fe63 	bl	8009e1c <memp_free>
      break;
 8009156:	e018      	b.n	800918a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	6892      	ldr	r2, [r2, #8]
 8009160:	4610      	mov	r0, r2
 8009162:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009164:	6879      	ldr	r1, [r7, #4]
 8009166:	2008      	movs	r0, #8
 8009168:	f000 fe58 	bl	8009e1c <memp_free>
      break;
 800916c:	e00d      	b.n	800918a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	6892      	ldr	r2, [r2, #8]
 8009176:	4610      	mov	r0, r2
 8009178:	4798      	blx	r3
      break;
 800917a:	e006      	b.n	800918a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800917c:	4b05      	ldr	r3, [pc, #20]	; (8009194 <tcpip_thread_handle_msg+0x84>)
 800917e:	22cf      	movs	r2, #207	; 0xcf
 8009180:	4905      	ldr	r1, [pc, #20]	; (8009198 <tcpip_thread_handle_msg+0x88>)
 8009182:	4806      	ldr	r0, [pc, #24]	; (800919c <tcpip_thread_handle_msg+0x8c>)
 8009184:	f00c f9ec 	bl	8015560 <iprintf>
      break;
 8009188:	bf00      	nop
  }
}
 800918a:	bf00      	nop
 800918c:	3708      	adds	r7, #8
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop
 8009194:	080166a0 	.word	0x080166a0
 8009198:	080166d0 	.word	0x080166d0
 800919c:	080166f0 	.word	0x080166f0

080091a0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b086      	sub	sp, #24
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	60f8      	str	r0, [r7, #12]
 80091a8:	60b9      	str	r1, [r7, #8]
 80091aa:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80091ac:	481a      	ldr	r0, [pc, #104]	; (8009218 <tcpip_inpkt+0x78>)
 80091ae:	f00c f900 	bl	80153b2 <sys_mbox_valid>
 80091b2:	4603      	mov	r3, r0
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d105      	bne.n	80091c4 <tcpip_inpkt+0x24>
 80091b8:	4b18      	ldr	r3, [pc, #96]	; (800921c <tcpip_inpkt+0x7c>)
 80091ba:	22fc      	movs	r2, #252	; 0xfc
 80091bc:	4918      	ldr	r1, [pc, #96]	; (8009220 <tcpip_inpkt+0x80>)
 80091be:	4819      	ldr	r0, [pc, #100]	; (8009224 <tcpip_inpkt+0x84>)
 80091c0:	f00c f9ce 	bl	8015560 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80091c4:	2009      	movs	r0, #9
 80091c6:	f000 fdb3 	bl	8009d30 <memp_malloc>
 80091ca:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d102      	bne.n	80091d8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80091d2:	f04f 33ff 	mov.w	r3, #4294967295
 80091d6:	e01a      	b.n	800920e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	2200      	movs	r2, #0
 80091dc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	68fa      	ldr	r2, [r7, #12]
 80091e2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	68ba      	ldr	r2, [r7, #8]
 80091e8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80091f0:	6979      	ldr	r1, [r7, #20]
 80091f2:	4809      	ldr	r0, [pc, #36]	; (8009218 <tcpip_inpkt+0x78>)
 80091f4:	f00c f892 	bl	801531c <sys_mbox_trypost>
 80091f8:	4603      	mov	r3, r0
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d006      	beq.n	800920c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80091fe:	6979      	ldr	r1, [r7, #20]
 8009200:	2009      	movs	r0, #9
 8009202:	f000 fe0b 	bl	8009e1c <memp_free>
    return ERR_MEM;
 8009206:	f04f 33ff 	mov.w	r3, #4294967295
 800920a:	e000      	b.n	800920e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800920c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800920e:	4618      	mov	r0, r3
 8009210:	3718      	adds	r7, #24
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	20009bfc 	.word	0x20009bfc
 800921c:	080166a0 	.word	0x080166a0
 8009220:	08016718 	.word	0x08016718
 8009224:	080166f0 	.word	0x080166f0

08009228 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b082      	sub	sp, #8
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009238:	f003 0318 	and.w	r3, r3, #24
 800923c:	2b00      	cmp	r3, #0
 800923e:	d006      	beq.n	800924e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009240:	4a08      	ldr	r2, [pc, #32]	; (8009264 <tcpip_input+0x3c>)
 8009242:	6839      	ldr	r1, [r7, #0]
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f7ff ffab 	bl	80091a0 <tcpip_inpkt>
 800924a:	4603      	mov	r3, r0
 800924c:	e005      	b.n	800925a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800924e:	4a06      	ldr	r2, [pc, #24]	; (8009268 <tcpip_input+0x40>)
 8009250:	6839      	ldr	r1, [r7, #0]
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f7ff ffa4 	bl	80091a0 <tcpip_inpkt>
 8009258:	4603      	mov	r3, r0
}
 800925a:	4618      	mov	r0, r3
 800925c:	3708      	adds	r7, #8
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	0801513d 	.word	0x0801513d
 8009268:	08014009 	.word	0x08014009

0800926c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009276:	4819      	ldr	r0, [pc, #100]	; (80092dc <tcpip_try_callback+0x70>)
 8009278:	f00c f89b 	bl	80153b2 <sys_mbox_valid>
 800927c:	4603      	mov	r3, r0
 800927e:	2b00      	cmp	r3, #0
 8009280:	d106      	bne.n	8009290 <tcpip_try_callback+0x24>
 8009282:	4b17      	ldr	r3, [pc, #92]	; (80092e0 <tcpip_try_callback+0x74>)
 8009284:	f240 125d 	movw	r2, #349	; 0x15d
 8009288:	4916      	ldr	r1, [pc, #88]	; (80092e4 <tcpip_try_callback+0x78>)
 800928a:	4817      	ldr	r0, [pc, #92]	; (80092e8 <tcpip_try_callback+0x7c>)
 800928c:	f00c f968 	bl	8015560 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8009290:	2008      	movs	r0, #8
 8009292:	f000 fd4d 	bl	8009d30 <memp_malloc>
 8009296:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d102      	bne.n	80092a4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800929e:	f04f 33ff 	mov.w	r3, #4294967295
 80092a2:	e017      	b.n	80092d4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2201      	movs	r2, #1
 80092a8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	683a      	ldr	r2, [r7, #0]
 80092b4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80092b6:	68f9      	ldr	r1, [r7, #12]
 80092b8:	4808      	ldr	r0, [pc, #32]	; (80092dc <tcpip_try_callback+0x70>)
 80092ba:	f00c f82f 	bl	801531c <sys_mbox_trypost>
 80092be:	4603      	mov	r3, r0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d006      	beq.n	80092d2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80092c4:	68f9      	ldr	r1, [r7, #12]
 80092c6:	2008      	movs	r0, #8
 80092c8:	f000 fda8 	bl	8009e1c <memp_free>
    return ERR_MEM;
 80092cc:	f04f 33ff 	mov.w	r3, #4294967295
 80092d0:	e000      	b.n	80092d4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80092d2:	2300      	movs	r3, #0
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3710      	adds	r7, #16
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}
 80092dc:	20009bfc 	.word	0x20009bfc
 80092e0:	080166a0 	.word	0x080166a0
 80092e4:	08016718 	.word	0x08016718
 80092e8:	080166f0 	.word	0x080166f0

080092ec <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af02      	add	r7, sp, #8
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	6039      	str	r1, [r7, #0]
  lwip_init();
 80092f6:	f000 f871 	bl	80093dc <lwip_init>

  tcpip_init_done = initfunc;
 80092fa:	4a17      	ldr	r2, [pc, #92]	; (8009358 <tcpip_init+0x6c>)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009300:	4a16      	ldr	r2, [pc, #88]	; (800935c <tcpip_init+0x70>)
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009306:	2106      	movs	r1, #6
 8009308:	4815      	ldr	r0, [pc, #84]	; (8009360 <tcpip_init+0x74>)
 800930a:	f00b ffed 	bl	80152e8 <sys_mbox_new>
 800930e:	4603      	mov	r3, r0
 8009310:	2b00      	cmp	r3, #0
 8009312:	d006      	beq.n	8009322 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009314:	4b13      	ldr	r3, [pc, #76]	; (8009364 <tcpip_init+0x78>)
 8009316:	f240 2261 	movw	r2, #609	; 0x261
 800931a:	4913      	ldr	r1, [pc, #76]	; (8009368 <tcpip_init+0x7c>)
 800931c:	4813      	ldr	r0, [pc, #76]	; (800936c <tcpip_init+0x80>)
 800931e:	f00c f91f 	bl	8015560 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009322:	4813      	ldr	r0, [pc, #76]	; (8009370 <tcpip_init+0x84>)
 8009324:	f00c f862 	bl	80153ec <sys_mutex_new>
 8009328:	4603      	mov	r3, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	d006      	beq.n	800933c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800932e:	4b0d      	ldr	r3, [pc, #52]	; (8009364 <tcpip_init+0x78>)
 8009330:	f240 2265 	movw	r2, #613	; 0x265
 8009334:	490f      	ldr	r1, [pc, #60]	; (8009374 <tcpip_init+0x88>)
 8009336:	480d      	ldr	r0, [pc, #52]	; (800936c <tcpip_init+0x80>)
 8009338:	f00c f912 	bl	8015560 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800933c:	2318      	movs	r3, #24
 800933e:	9300      	str	r3, [sp, #0]
 8009340:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009344:	2200      	movs	r2, #0
 8009346:	490c      	ldr	r1, [pc, #48]	; (8009378 <tcpip_init+0x8c>)
 8009348:	480c      	ldr	r0, [pc, #48]	; (800937c <tcpip_init+0x90>)
 800934a:	f00c f881 	bl	8015450 <sys_thread_new>
}
 800934e:	bf00      	nop
 8009350:	3708      	adds	r7, #8
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	20009bf4 	.word	0x20009bf4
 800935c:	20009bf8 	.word	0x20009bf8
 8009360:	20009bfc 	.word	0x20009bfc
 8009364:	080166a0 	.word	0x080166a0
 8009368:	08016728 	.word	0x08016728
 800936c:	080166f0 	.word	0x080166f0
 8009370:	20009c00 	.word	0x20009c00
 8009374:	0801674c 	.word	0x0801674c
 8009378:	080090a9 	.word	0x080090a9
 800937c:	08016770 	.word	0x08016770

08009380 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009380:	b480      	push	{r7}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	4603      	mov	r3, r0
 8009388:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800938a:	88fb      	ldrh	r3, [r7, #6]
 800938c:	021b      	lsls	r3, r3, #8
 800938e:	b21a      	sxth	r2, r3
 8009390:	88fb      	ldrh	r3, [r7, #6]
 8009392:	0a1b      	lsrs	r3, r3, #8
 8009394:	b29b      	uxth	r3, r3
 8009396:	b21b      	sxth	r3, r3
 8009398:	4313      	orrs	r3, r2
 800939a:	b21b      	sxth	r3, r3
 800939c:	b29b      	uxth	r3, r3
}
 800939e:	4618      	mov	r0, r3
 80093a0:	370c      	adds	r7, #12
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr

080093aa <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80093aa:	b480      	push	{r7}
 80093ac:	b083      	sub	sp, #12
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	061a      	lsls	r2, r3, #24
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	021b      	lsls	r3, r3, #8
 80093ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80093be:	431a      	orrs	r2, r3
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	0a1b      	lsrs	r3, r3, #8
 80093c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80093c8:	431a      	orrs	r2, r3
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	0e1b      	lsrs	r3, r3, #24
 80093ce:	4313      	orrs	r3, r2
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	370c      	adds	r7, #12
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr

080093dc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b082      	sub	sp, #8
 80093e0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80093e2:	2300      	movs	r3, #0
 80093e4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80093e6:	f00b fff5 	bl	80153d4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80093ea:	f000 f8d5 	bl	8009598 <mem_init>
  memp_init();
 80093ee:	f000 fc31 	bl	8009c54 <memp_init>
  pbuf_init();
  netif_init();
 80093f2:	f000 fd3d 	bl	8009e70 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80093f6:	f007 f941 	bl	801067c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80093fa:	f001 fe69 	bl	800b0d0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80093fe:	f007 f883 	bl	8010508 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009402:	bf00      	nop
 8009404:	3708      	adds	r7, #8
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
	...

0800940c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
 8009412:	4603      	mov	r3, r0
 8009414:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8009416:	4b05      	ldr	r3, [pc, #20]	; (800942c <ptr_to_mem+0x20>)
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	88fb      	ldrh	r3, [r7, #6]
 800941c:	4413      	add	r3, r2
}
 800941e:	4618      	mov	r0, r3
 8009420:	370c      	adds	r7, #12
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	2000a270 	.word	0x2000a270

08009430 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009438:	4b05      	ldr	r3, [pc, #20]	; (8009450 <mem_to_ptr+0x20>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	1ad3      	subs	r3, r2, r3
 8009440:	b29b      	uxth	r3, r3
}
 8009442:	4618      	mov	r0, r3
 8009444:	370c      	adds	r7, #12
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr
 800944e:	bf00      	nop
 8009450:	2000a270 	.word	0x2000a270

08009454 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009454:	b590      	push	{r4, r7, lr}
 8009456:	b085      	sub	sp, #20
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800945c:	4b45      	ldr	r3, [pc, #276]	; (8009574 <plug_holes+0x120>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	429a      	cmp	r2, r3
 8009464:	d206      	bcs.n	8009474 <plug_holes+0x20>
 8009466:	4b44      	ldr	r3, [pc, #272]	; (8009578 <plug_holes+0x124>)
 8009468:	f240 12df 	movw	r2, #479	; 0x1df
 800946c:	4943      	ldr	r1, [pc, #268]	; (800957c <plug_holes+0x128>)
 800946e:	4844      	ldr	r0, [pc, #272]	; (8009580 <plug_holes+0x12c>)
 8009470:	f00c f876 	bl	8015560 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009474:	4b43      	ldr	r3, [pc, #268]	; (8009584 <plug_holes+0x130>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	687a      	ldr	r2, [r7, #4]
 800947a:	429a      	cmp	r2, r3
 800947c:	d306      	bcc.n	800948c <plug_holes+0x38>
 800947e:	4b3e      	ldr	r3, [pc, #248]	; (8009578 <plug_holes+0x124>)
 8009480:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009484:	4940      	ldr	r1, [pc, #256]	; (8009588 <plug_holes+0x134>)
 8009486:	483e      	ldr	r0, [pc, #248]	; (8009580 <plug_holes+0x12c>)
 8009488:	f00c f86a 	bl	8015560 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	791b      	ldrb	r3, [r3, #4]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d006      	beq.n	80094a2 <plug_holes+0x4e>
 8009494:	4b38      	ldr	r3, [pc, #224]	; (8009578 <plug_holes+0x124>)
 8009496:	f240 12e1 	movw	r2, #481	; 0x1e1
 800949a:	493c      	ldr	r1, [pc, #240]	; (800958c <plug_holes+0x138>)
 800949c:	4838      	ldr	r0, [pc, #224]	; (8009580 <plug_holes+0x12c>)
 800949e:	f00c f85f 	bl	8015560 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	881b      	ldrh	r3, [r3, #0]
 80094a6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80094aa:	d906      	bls.n	80094ba <plug_holes+0x66>
 80094ac:	4b32      	ldr	r3, [pc, #200]	; (8009578 <plug_holes+0x124>)
 80094ae:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80094b2:	4937      	ldr	r1, [pc, #220]	; (8009590 <plug_holes+0x13c>)
 80094b4:	4832      	ldr	r0, [pc, #200]	; (8009580 <plug_holes+0x12c>)
 80094b6:	f00c f853 	bl	8015560 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	881b      	ldrh	r3, [r3, #0]
 80094be:	4618      	mov	r0, r3
 80094c0:	f7ff ffa4 	bl	800940c <ptr_to_mem>
 80094c4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d024      	beq.n	8009518 <plug_holes+0xc4>
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	791b      	ldrb	r3, [r3, #4]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d120      	bne.n	8009518 <plug_holes+0xc4>
 80094d6:	4b2b      	ldr	r3, [pc, #172]	; (8009584 <plug_holes+0x130>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	68fa      	ldr	r2, [r7, #12]
 80094dc:	429a      	cmp	r2, r3
 80094de:	d01b      	beq.n	8009518 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80094e0:	4b2c      	ldr	r3, [pc, #176]	; (8009594 <plug_holes+0x140>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	68fa      	ldr	r2, [r7, #12]
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d102      	bne.n	80094f0 <plug_holes+0x9c>
      lfree = mem;
 80094ea:	4a2a      	ldr	r2, [pc, #168]	; (8009594 <plug_holes+0x140>)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	881a      	ldrh	r2, [r3, #0]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	881b      	ldrh	r3, [r3, #0]
 80094fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009500:	d00a      	beq.n	8009518 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	881b      	ldrh	r3, [r3, #0]
 8009506:	4618      	mov	r0, r3
 8009508:	f7ff ff80 	bl	800940c <ptr_to_mem>
 800950c:	4604      	mov	r4, r0
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f7ff ff8e 	bl	8009430 <mem_to_ptr>
 8009514:	4603      	mov	r3, r0
 8009516:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	885b      	ldrh	r3, [r3, #2]
 800951c:	4618      	mov	r0, r3
 800951e:	f7ff ff75 	bl	800940c <ptr_to_mem>
 8009522:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8009524:	68ba      	ldr	r2, [r7, #8]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	429a      	cmp	r2, r3
 800952a:	d01f      	beq.n	800956c <plug_holes+0x118>
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	791b      	ldrb	r3, [r3, #4]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d11b      	bne.n	800956c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8009534:	4b17      	ldr	r3, [pc, #92]	; (8009594 <plug_holes+0x140>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	687a      	ldr	r2, [r7, #4]
 800953a:	429a      	cmp	r2, r3
 800953c:	d102      	bne.n	8009544 <plug_holes+0xf0>
      lfree = pmem;
 800953e:	4a15      	ldr	r2, [pc, #84]	; (8009594 <plug_holes+0x140>)
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	881a      	ldrh	r2, [r3, #0]
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	881b      	ldrh	r3, [r3, #0]
 8009550:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009554:	d00a      	beq.n	800956c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	881b      	ldrh	r3, [r3, #0]
 800955a:	4618      	mov	r0, r3
 800955c:	f7ff ff56 	bl	800940c <ptr_to_mem>
 8009560:	4604      	mov	r4, r0
 8009562:	68b8      	ldr	r0, [r7, #8]
 8009564:	f7ff ff64 	bl	8009430 <mem_to_ptr>
 8009568:	4603      	mov	r3, r0
 800956a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800956c:	bf00      	nop
 800956e:	3714      	adds	r7, #20
 8009570:	46bd      	mov	sp, r7
 8009572:	bd90      	pop	{r4, r7, pc}
 8009574:	2000a270 	.word	0x2000a270
 8009578:	08016780 	.word	0x08016780
 800957c:	080167b0 	.word	0x080167b0
 8009580:	080167c8 	.word	0x080167c8
 8009584:	2000a274 	.word	0x2000a274
 8009588:	080167f0 	.word	0x080167f0
 800958c:	0801680c 	.word	0x0801680c
 8009590:	08016828 	.word	0x08016828
 8009594:	2000a27c 	.word	0x2000a27c

08009598 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800959e:	4b1f      	ldr	r3, [pc, #124]	; (800961c <mem_init+0x84>)
 80095a0:	3303      	adds	r3, #3
 80095a2:	f023 0303 	bic.w	r3, r3, #3
 80095a6:	461a      	mov	r2, r3
 80095a8:	4b1d      	ldr	r3, [pc, #116]	; (8009620 <mem_init+0x88>)
 80095aa:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80095ac:	4b1c      	ldr	r3, [pc, #112]	; (8009620 <mem_init+0x88>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80095b8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2200      	movs	r2, #0
 80095be:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80095c6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80095ca:	f7ff ff1f 	bl	800940c <ptr_to_mem>
 80095ce:	4603      	mov	r3, r0
 80095d0:	4a14      	ldr	r2, [pc, #80]	; (8009624 <mem_init+0x8c>)
 80095d2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80095d4:	4b13      	ldr	r3, [pc, #76]	; (8009624 <mem_init+0x8c>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2201      	movs	r2, #1
 80095da:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80095dc:	4b11      	ldr	r3, [pc, #68]	; (8009624 <mem_init+0x8c>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80095e4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80095e6:	4b0f      	ldr	r3, [pc, #60]	; (8009624 <mem_init+0x8c>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80095ee:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80095f0:	4b0b      	ldr	r3, [pc, #44]	; (8009620 <mem_init+0x88>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4a0c      	ldr	r2, [pc, #48]	; (8009628 <mem_init+0x90>)
 80095f6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80095f8:	480c      	ldr	r0, [pc, #48]	; (800962c <mem_init+0x94>)
 80095fa:	f00b fef7 	bl	80153ec <sys_mutex_new>
 80095fe:	4603      	mov	r3, r0
 8009600:	2b00      	cmp	r3, #0
 8009602:	d006      	beq.n	8009612 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8009604:	4b0a      	ldr	r3, [pc, #40]	; (8009630 <mem_init+0x98>)
 8009606:	f240 221f 	movw	r2, #543	; 0x21f
 800960a:	490a      	ldr	r1, [pc, #40]	; (8009634 <mem_init+0x9c>)
 800960c:	480a      	ldr	r0, [pc, #40]	; (8009638 <mem_init+0xa0>)
 800960e:	f00b ffa7 	bl	8015560 <iprintf>
  }
}
 8009612:	bf00      	nop
 8009614:	3708      	adds	r7, #8
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop
 800961c:	20009c1c 	.word	0x20009c1c
 8009620:	2000a270 	.word	0x2000a270
 8009624:	2000a274 	.word	0x2000a274
 8009628:	2000a27c 	.word	0x2000a27c
 800962c:	2000a278 	.word	0x2000a278
 8009630:	08016780 	.word	0x08016780
 8009634:	08016854 	.word	0x08016854
 8009638:	080167c8 	.word	0x080167c8

0800963c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b086      	sub	sp, #24
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f7ff fef3 	bl	8009430 <mem_to_ptr>
 800964a:	4603      	mov	r3, r0
 800964c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	881b      	ldrh	r3, [r3, #0]
 8009652:	4618      	mov	r0, r3
 8009654:	f7ff feda 	bl	800940c <ptr_to_mem>
 8009658:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	885b      	ldrh	r3, [r3, #2]
 800965e:	4618      	mov	r0, r3
 8009660:	f7ff fed4 	bl	800940c <ptr_to_mem>
 8009664:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	881b      	ldrh	r3, [r3, #0]
 800966a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800966e:	d818      	bhi.n	80096a2 <mem_link_valid+0x66>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	885b      	ldrh	r3, [r3, #2]
 8009674:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009678:	d813      	bhi.n	80096a2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800967e:	8afa      	ldrh	r2, [r7, #22]
 8009680:	429a      	cmp	r2, r3
 8009682:	d004      	beq.n	800968e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	881b      	ldrh	r3, [r3, #0]
 8009688:	8afa      	ldrh	r2, [r7, #22]
 800968a:	429a      	cmp	r2, r3
 800968c:	d109      	bne.n	80096a2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800968e:	4b08      	ldr	r3, [pc, #32]	; (80096b0 <mem_link_valid+0x74>)
 8009690:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009692:	693a      	ldr	r2, [r7, #16]
 8009694:	429a      	cmp	r2, r3
 8009696:	d006      	beq.n	80096a6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	885b      	ldrh	r3, [r3, #2]
 800969c:	8afa      	ldrh	r2, [r7, #22]
 800969e:	429a      	cmp	r2, r3
 80096a0:	d001      	beq.n	80096a6 <mem_link_valid+0x6a>
    return 0;
 80096a2:	2300      	movs	r3, #0
 80096a4:	e000      	b.n	80096a8 <mem_link_valid+0x6c>
  }
  return 1;
 80096a6:	2301      	movs	r3, #1
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3718      	adds	r7, #24
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	2000a274 	.word	0x2000a274

080096b4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b088      	sub	sp, #32
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d070      	beq.n	80097a4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f003 0303 	and.w	r3, r3, #3
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d00d      	beq.n	80096e8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80096cc:	4b37      	ldr	r3, [pc, #220]	; (80097ac <mem_free+0xf8>)
 80096ce:	f240 2273 	movw	r2, #627	; 0x273
 80096d2:	4937      	ldr	r1, [pc, #220]	; (80097b0 <mem_free+0xfc>)
 80096d4:	4837      	ldr	r0, [pc, #220]	; (80097b4 <mem_free+0x100>)
 80096d6:	f00b ff43 	bl	8015560 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80096da:	f00b fed9 	bl	8015490 <sys_arch_protect>
 80096de:	60f8      	str	r0, [r7, #12]
 80096e0:	68f8      	ldr	r0, [r7, #12]
 80096e2:	f00b fee3 	bl	80154ac <sys_arch_unprotect>
    return;
 80096e6:	e05e      	b.n	80097a6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	3b08      	subs	r3, #8
 80096ec:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80096ee:	4b32      	ldr	r3, [pc, #200]	; (80097b8 <mem_free+0x104>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	69fa      	ldr	r2, [r7, #28]
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d306      	bcc.n	8009706 <mem_free+0x52>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f103 020c 	add.w	r2, r3, #12
 80096fe:	4b2f      	ldr	r3, [pc, #188]	; (80097bc <mem_free+0x108>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	429a      	cmp	r2, r3
 8009704:	d90d      	bls.n	8009722 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8009706:	4b29      	ldr	r3, [pc, #164]	; (80097ac <mem_free+0xf8>)
 8009708:	f240 227f 	movw	r2, #639	; 0x27f
 800970c:	492c      	ldr	r1, [pc, #176]	; (80097c0 <mem_free+0x10c>)
 800970e:	4829      	ldr	r0, [pc, #164]	; (80097b4 <mem_free+0x100>)
 8009710:	f00b ff26 	bl	8015560 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009714:	f00b febc 	bl	8015490 <sys_arch_protect>
 8009718:	6138      	str	r0, [r7, #16]
 800971a:	6938      	ldr	r0, [r7, #16]
 800971c:	f00b fec6 	bl	80154ac <sys_arch_unprotect>
    return;
 8009720:	e041      	b.n	80097a6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8009722:	4828      	ldr	r0, [pc, #160]	; (80097c4 <mem_free+0x110>)
 8009724:	f00b fe78 	bl	8015418 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8009728:	69fb      	ldr	r3, [r7, #28]
 800972a:	791b      	ldrb	r3, [r3, #4]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d110      	bne.n	8009752 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8009730:	4b1e      	ldr	r3, [pc, #120]	; (80097ac <mem_free+0xf8>)
 8009732:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8009736:	4924      	ldr	r1, [pc, #144]	; (80097c8 <mem_free+0x114>)
 8009738:	481e      	ldr	r0, [pc, #120]	; (80097b4 <mem_free+0x100>)
 800973a:	f00b ff11 	bl	8015560 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800973e:	4821      	ldr	r0, [pc, #132]	; (80097c4 <mem_free+0x110>)
 8009740:	f00b fe79 	bl	8015436 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009744:	f00b fea4 	bl	8015490 <sys_arch_protect>
 8009748:	6178      	str	r0, [r7, #20]
 800974a:	6978      	ldr	r0, [r7, #20]
 800974c:	f00b feae 	bl	80154ac <sys_arch_unprotect>
    return;
 8009750:	e029      	b.n	80097a6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8009752:	69f8      	ldr	r0, [r7, #28]
 8009754:	f7ff ff72 	bl	800963c <mem_link_valid>
 8009758:	4603      	mov	r3, r0
 800975a:	2b00      	cmp	r3, #0
 800975c:	d110      	bne.n	8009780 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800975e:	4b13      	ldr	r3, [pc, #76]	; (80097ac <mem_free+0xf8>)
 8009760:	f240 2295 	movw	r2, #661	; 0x295
 8009764:	4919      	ldr	r1, [pc, #100]	; (80097cc <mem_free+0x118>)
 8009766:	4813      	ldr	r0, [pc, #76]	; (80097b4 <mem_free+0x100>)
 8009768:	f00b fefa 	bl	8015560 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800976c:	4815      	ldr	r0, [pc, #84]	; (80097c4 <mem_free+0x110>)
 800976e:	f00b fe62 	bl	8015436 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009772:	f00b fe8d 	bl	8015490 <sys_arch_protect>
 8009776:	61b8      	str	r0, [r7, #24]
 8009778:	69b8      	ldr	r0, [r7, #24]
 800977a:	f00b fe97 	bl	80154ac <sys_arch_unprotect>
    return;
 800977e:	e012      	b.n	80097a6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	2200      	movs	r2, #0
 8009784:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8009786:	4b12      	ldr	r3, [pc, #72]	; (80097d0 <mem_free+0x11c>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	69fa      	ldr	r2, [r7, #28]
 800978c:	429a      	cmp	r2, r3
 800978e:	d202      	bcs.n	8009796 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8009790:	4a0f      	ldr	r2, [pc, #60]	; (80097d0 <mem_free+0x11c>)
 8009792:	69fb      	ldr	r3, [r7, #28]
 8009794:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8009796:	69f8      	ldr	r0, [r7, #28]
 8009798:	f7ff fe5c 	bl	8009454 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800979c:	4809      	ldr	r0, [pc, #36]	; (80097c4 <mem_free+0x110>)
 800979e:	f00b fe4a 	bl	8015436 <sys_mutex_unlock>
 80097a2:	e000      	b.n	80097a6 <mem_free+0xf2>
    return;
 80097a4:	bf00      	nop
}
 80097a6:	3720      	adds	r7, #32
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	08016780 	.word	0x08016780
 80097b0:	08016870 	.word	0x08016870
 80097b4:	080167c8 	.word	0x080167c8
 80097b8:	2000a270 	.word	0x2000a270
 80097bc:	2000a274 	.word	0x2000a274
 80097c0:	08016894 	.word	0x08016894
 80097c4:	2000a278 	.word	0x2000a278
 80097c8:	080168b0 	.word	0x080168b0
 80097cc:	080168d8 	.word	0x080168d8
 80097d0:	2000a27c 	.word	0x2000a27c

080097d4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b088      	sub	sp, #32
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	460b      	mov	r3, r1
 80097de:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80097e0:	887b      	ldrh	r3, [r7, #2]
 80097e2:	3303      	adds	r3, #3
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	f023 0303 	bic.w	r3, r3, #3
 80097ea:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80097ec:	8bfb      	ldrh	r3, [r7, #30]
 80097ee:	2b0b      	cmp	r3, #11
 80097f0:	d801      	bhi.n	80097f6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80097f2:	230c      	movs	r3, #12
 80097f4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80097f6:	8bfb      	ldrh	r3, [r7, #30]
 80097f8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80097fc:	d803      	bhi.n	8009806 <mem_trim+0x32>
 80097fe:	8bfa      	ldrh	r2, [r7, #30]
 8009800:	887b      	ldrh	r3, [r7, #2]
 8009802:	429a      	cmp	r2, r3
 8009804:	d201      	bcs.n	800980a <mem_trim+0x36>
    return NULL;
 8009806:	2300      	movs	r3, #0
 8009808:	e0d8      	b.n	80099bc <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800980a:	4b6e      	ldr	r3, [pc, #440]	; (80099c4 <mem_trim+0x1f0>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	429a      	cmp	r2, r3
 8009812:	d304      	bcc.n	800981e <mem_trim+0x4a>
 8009814:	4b6c      	ldr	r3, [pc, #432]	; (80099c8 <mem_trim+0x1f4>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	429a      	cmp	r2, r3
 800981c:	d306      	bcc.n	800982c <mem_trim+0x58>
 800981e:	4b6b      	ldr	r3, [pc, #428]	; (80099cc <mem_trim+0x1f8>)
 8009820:	f240 22d1 	movw	r2, #721	; 0x2d1
 8009824:	496a      	ldr	r1, [pc, #424]	; (80099d0 <mem_trim+0x1fc>)
 8009826:	486b      	ldr	r0, [pc, #428]	; (80099d4 <mem_trim+0x200>)
 8009828:	f00b fe9a 	bl	8015560 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800982c:	4b65      	ldr	r3, [pc, #404]	; (80099c4 <mem_trim+0x1f0>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	687a      	ldr	r2, [r7, #4]
 8009832:	429a      	cmp	r2, r3
 8009834:	d304      	bcc.n	8009840 <mem_trim+0x6c>
 8009836:	4b64      	ldr	r3, [pc, #400]	; (80099c8 <mem_trim+0x1f4>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	687a      	ldr	r2, [r7, #4]
 800983c:	429a      	cmp	r2, r3
 800983e:	d307      	bcc.n	8009850 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009840:	f00b fe26 	bl	8015490 <sys_arch_protect>
 8009844:	60b8      	str	r0, [r7, #8]
 8009846:	68b8      	ldr	r0, [r7, #8]
 8009848:	f00b fe30 	bl	80154ac <sys_arch_unprotect>
    return rmem;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	e0b5      	b.n	80099bc <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	3b08      	subs	r3, #8
 8009854:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8009856:	69b8      	ldr	r0, [r7, #24]
 8009858:	f7ff fdea 	bl	8009430 <mem_to_ptr>
 800985c:	4603      	mov	r3, r0
 800985e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	881a      	ldrh	r2, [r3, #0]
 8009864:	8afb      	ldrh	r3, [r7, #22]
 8009866:	1ad3      	subs	r3, r2, r3
 8009868:	b29b      	uxth	r3, r3
 800986a:	3b08      	subs	r3, #8
 800986c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800986e:	8bfa      	ldrh	r2, [r7, #30]
 8009870:	8abb      	ldrh	r3, [r7, #20]
 8009872:	429a      	cmp	r2, r3
 8009874:	d906      	bls.n	8009884 <mem_trim+0xb0>
 8009876:	4b55      	ldr	r3, [pc, #340]	; (80099cc <mem_trim+0x1f8>)
 8009878:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800987c:	4956      	ldr	r1, [pc, #344]	; (80099d8 <mem_trim+0x204>)
 800987e:	4855      	ldr	r0, [pc, #340]	; (80099d4 <mem_trim+0x200>)
 8009880:	f00b fe6e 	bl	8015560 <iprintf>
  if (newsize > size) {
 8009884:	8bfa      	ldrh	r2, [r7, #30]
 8009886:	8abb      	ldrh	r3, [r7, #20]
 8009888:	429a      	cmp	r2, r3
 800988a:	d901      	bls.n	8009890 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800988c:	2300      	movs	r3, #0
 800988e:	e095      	b.n	80099bc <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8009890:	8bfa      	ldrh	r2, [r7, #30]
 8009892:	8abb      	ldrh	r3, [r7, #20]
 8009894:	429a      	cmp	r2, r3
 8009896:	d101      	bne.n	800989c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	e08f      	b.n	80099bc <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800989c:	484f      	ldr	r0, [pc, #316]	; (80099dc <mem_trim+0x208>)
 800989e:	f00b fdbb 	bl	8015418 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80098a2:	69bb      	ldr	r3, [r7, #24]
 80098a4:	881b      	ldrh	r3, [r3, #0]
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7ff fdb0 	bl	800940c <ptr_to_mem>
 80098ac:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	791b      	ldrb	r3, [r3, #4]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d13f      	bne.n	8009936 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80098b6:	69bb      	ldr	r3, [r7, #24]
 80098b8:	881b      	ldrh	r3, [r3, #0]
 80098ba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80098be:	d106      	bne.n	80098ce <mem_trim+0xfa>
 80098c0:	4b42      	ldr	r3, [pc, #264]	; (80099cc <mem_trim+0x1f8>)
 80098c2:	f240 22f5 	movw	r2, #757	; 0x2f5
 80098c6:	4946      	ldr	r1, [pc, #280]	; (80099e0 <mem_trim+0x20c>)
 80098c8:	4842      	ldr	r0, [pc, #264]	; (80099d4 <mem_trim+0x200>)
 80098ca:	f00b fe49 	bl	8015560 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	881b      	ldrh	r3, [r3, #0]
 80098d2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80098d4:	8afa      	ldrh	r2, [r7, #22]
 80098d6:	8bfb      	ldrh	r3, [r7, #30]
 80098d8:	4413      	add	r3, r2
 80098da:	b29b      	uxth	r3, r3
 80098dc:	3308      	adds	r3, #8
 80098de:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80098e0:	4b40      	ldr	r3, [pc, #256]	; (80099e4 <mem_trim+0x210>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	693a      	ldr	r2, [r7, #16]
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d106      	bne.n	80098f8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80098ea:	89fb      	ldrh	r3, [r7, #14]
 80098ec:	4618      	mov	r0, r3
 80098ee:	f7ff fd8d 	bl	800940c <ptr_to_mem>
 80098f2:	4603      	mov	r3, r0
 80098f4:	4a3b      	ldr	r2, [pc, #236]	; (80099e4 <mem_trim+0x210>)
 80098f6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80098f8:	89fb      	ldrh	r3, [r7, #14]
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7ff fd86 	bl	800940c <ptr_to_mem>
 8009900:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	2200      	movs	r2, #0
 8009906:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	89ba      	ldrh	r2, [r7, #12]
 800990c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	8afa      	ldrh	r2, [r7, #22]
 8009912:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8009914:	69bb      	ldr	r3, [r7, #24]
 8009916:	89fa      	ldrh	r2, [r7, #14]
 8009918:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	881b      	ldrh	r3, [r3, #0]
 800991e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009922:	d047      	beq.n	80099b4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	881b      	ldrh	r3, [r3, #0]
 8009928:	4618      	mov	r0, r3
 800992a:	f7ff fd6f 	bl	800940c <ptr_to_mem>
 800992e:	4602      	mov	r2, r0
 8009930:	89fb      	ldrh	r3, [r7, #14]
 8009932:	8053      	strh	r3, [r2, #2]
 8009934:	e03e      	b.n	80099b4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8009936:	8bfb      	ldrh	r3, [r7, #30]
 8009938:	f103 0214 	add.w	r2, r3, #20
 800993c:	8abb      	ldrh	r3, [r7, #20]
 800993e:	429a      	cmp	r2, r3
 8009940:	d838      	bhi.n	80099b4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009942:	8afa      	ldrh	r2, [r7, #22]
 8009944:	8bfb      	ldrh	r3, [r7, #30]
 8009946:	4413      	add	r3, r2
 8009948:	b29b      	uxth	r3, r3
 800994a:	3308      	adds	r3, #8
 800994c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800994e:	69bb      	ldr	r3, [r7, #24]
 8009950:	881b      	ldrh	r3, [r3, #0]
 8009952:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009956:	d106      	bne.n	8009966 <mem_trim+0x192>
 8009958:	4b1c      	ldr	r3, [pc, #112]	; (80099cc <mem_trim+0x1f8>)
 800995a:	f240 3216 	movw	r2, #790	; 0x316
 800995e:	4920      	ldr	r1, [pc, #128]	; (80099e0 <mem_trim+0x20c>)
 8009960:	481c      	ldr	r0, [pc, #112]	; (80099d4 <mem_trim+0x200>)
 8009962:	f00b fdfd 	bl	8015560 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8009966:	89fb      	ldrh	r3, [r7, #14]
 8009968:	4618      	mov	r0, r3
 800996a:	f7ff fd4f 	bl	800940c <ptr_to_mem>
 800996e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8009970:	4b1c      	ldr	r3, [pc, #112]	; (80099e4 <mem_trim+0x210>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	693a      	ldr	r2, [r7, #16]
 8009976:	429a      	cmp	r2, r3
 8009978:	d202      	bcs.n	8009980 <mem_trim+0x1ac>
      lfree = mem2;
 800997a:	4a1a      	ldr	r2, [pc, #104]	; (80099e4 <mem_trim+0x210>)
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	2200      	movs	r2, #0
 8009984:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8009986:	69bb      	ldr	r3, [r7, #24]
 8009988:	881a      	ldrh	r2, [r3, #0]
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	8afa      	ldrh	r2, [r7, #22]
 8009992:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8009994:	69bb      	ldr	r3, [r7, #24]
 8009996:	89fa      	ldrh	r2, [r7, #14]
 8009998:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	881b      	ldrh	r3, [r3, #0]
 800999e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80099a2:	d007      	beq.n	80099b4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	881b      	ldrh	r3, [r3, #0]
 80099a8:	4618      	mov	r0, r3
 80099aa:	f7ff fd2f 	bl	800940c <ptr_to_mem>
 80099ae:	4602      	mov	r2, r0
 80099b0:	89fb      	ldrh	r3, [r7, #14]
 80099b2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80099b4:	4809      	ldr	r0, [pc, #36]	; (80099dc <mem_trim+0x208>)
 80099b6:	f00b fd3e 	bl	8015436 <sys_mutex_unlock>
  return rmem;
 80099ba:	687b      	ldr	r3, [r7, #4]
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3720      	adds	r7, #32
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	2000a270 	.word	0x2000a270
 80099c8:	2000a274 	.word	0x2000a274
 80099cc:	08016780 	.word	0x08016780
 80099d0:	0801690c 	.word	0x0801690c
 80099d4:	080167c8 	.word	0x080167c8
 80099d8:	08016924 	.word	0x08016924
 80099dc:	2000a278 	.word	0x2000a278
 80099e0:	08016944 	.word	0x08016944
 80099e4:	2000a27c 	.word	0x2000a27c

080099e8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b088      	sub	sp, #32
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	4603      	mov	r3, r0
 80099f0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80099f2:	88fb      	ldrh	r3, [r7, #6]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d101      	bne.n	80099fc <mem_malloc+0x14>
    return NULL;
 80099f8:	2300      	movs	r3, #0
 80099fa:	e0e2      	b.n	8009bc2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80099fc:	88fb      	ldrh	r3, [r7, #6]
 80099fe:	3303      	adds	r3, #3
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	f023 0303 	bic.w	r3, r3, #3
 8009a06:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8009a08:	8bbb      	ldrh	r3, [r7, #28]
 8009a0a:	2b0b      	cmp	r3, #11
 8009a0c:	d801      	bhi.n	8009a12 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8009a0e:	230c      	movs	r3, #12
 8009a10:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8009a12:	8bbb      	ldrh	r3, [r7, #28]
 8009a14:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009a18:	d803      	bhi.n	8009a22 <mem_malloc+0x3a>
 8009a1a:	8bba      	ldrh	r2, [r7, #28]
 8009a1c:	88fb      	ldrh	r3, [r7, #6]
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	d201      	bcs.n	8009a26 <mem_malloc+0x3e>
    return NULL;
 8009a22:	2300      	movs	r3, #0
 8009a24:	e0cd      	b.n	8009bc2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8009a26:	4869      	ldr	r0, [pc, #420]	; (8009bcc <mem_malloc+0x1e4>)
 8009a28:	f00b fcf6 	bl	8015418 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009a2c:	4b68      	ldr	r3, [pc, #416]	; (8009bd0 <mem_malloc+0x1e8>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4618      	mov	r0, r3
 8009a32:	f7ff fcfd 	bl	8009430 <mem_to_ptr>
 8009a36:	4603      	mov	r3, r0
 8009a38:	83fb      	strh	r3, [r7, #30]
 8009a3a:	e0b7      	b.n	8009bac <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8009a3c:	8bfb      	ldrh	r3, [r7, #30]
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7ff fce4 	bl	800940c <ptr_to_mem>
 8009a44:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	791b      	ldrb	r3, [r3, #4]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	f040 80a7 	bne.w	8009b9e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	881b      	ldrh	r3, [r3, #0]
 8009a54:	461a      	mov	r2, r3
 8009a56:	8bfb      	ldrh	r3, [r7, #30]
 8009a58:	1ad3      	subs	r3, r2, r3
 8009a5a:	f1a3 0208 	sub.w	r2, r3, #8
 8009a5e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8009a60:	429a      	cmp	r2, r3
 8009a62:	f0c0 809c 	bcc.w	8009b9e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	881b      	ldrh	r3, [r3, #0]
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	8bfb      	ldrh	r3, [r7, #30]
 8009a6e:	1ad3      	subs	r3, r2, r3
 8009a70:	f1a3 0208 	sub.w	r2, r3, #8
 8009a74:	8bbb      	ldrh	r3, [r7, #28]
 8009a76:	3314      	adds	r3, #20
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d333      	bcc.n	8009ae4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8009a7c:	8bfa      	ldrh	r2, [r7, #30]
 8009a7e:	8bbb      	ldrh	r3, [r7, #28]
 8009a80:	4413      	add	r3, r2
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	3308      	adds	r3, #8
 8009a86:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009a88:	8a7b      	ldrh	r3, [r7, #18]
 8009a8a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009a8e:	d106      	bne.n	8009a9e <mem_malloc+0xb6>
 8009a90:	4b50      	ldr	r3, [pc, #320]	; (8009bd4 <mem_malloc+0x1ec>)
 8009a92:	f240 3287 	movw	r2, #903	; 0x387
 8009a96:	4950      	ldr	r1, [pc, #320]	; (8009bd8 <mem_malloc+0x1f0>)
 8009a98:	4850      	ldr	r0, [pc, #320]	; (8009bdc <mem_malloc+0x1f4>)
 8009a9a:	f00b fd61 	bl	8015560 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8009a9e:	8a7b      	ldrh	r3, [r7, #18]
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7ff fcb3 	bl	800940c <ptr_to_mem>
 8009aa6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	881a      	ldrh	r2, [r3, #0]
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	8bfa      	ldrh	r2, [r7, #30]
 8009aba:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	8a7a      	ldrh	r2, [r7, #18]
 8009ac0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	881b      	ldrh	r3, [r3, #0]
 8009acc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009ad0:	d00b      	beq.n	8009aea <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	881b      	ldrh	r3, [r3, #0]
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f7ff fc98 	bl	800940c <ptr_to_mem>
 8009adc:	4602      	mov	r2, r0
 8009ade:	8a7b      	ldrh	r3, [r7, #18]
 8009ae0:	8053      	strh	r3, [r2, #2]
 8009ae2:	e002      	b.n	8009aea <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8009aea:	4b39      	ldr	r3, [pc, #228]	; (8009bd0 <mem_malloc+0x1e8>)
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	697a      	ldr	r2, [r7, #20]
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d127      	bne.n	8009b44 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8009af4:	4b36      	ldr	r3, [pc, #216]	; (8009bd0 <mem_malloc+0x1e8>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8009afa:	e005      	b.n	8009b08 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8009afc:	69bb      	ldr	r3, [r7, #24]
 8009afe:	881b      	ldrh	r3, [r3, #0]
 8009b00:	4618      	mov	r0, r3
 8009b02:	f7ff fc83 	bl	800940c <ptr_to_mem>
 8009b06:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8009b08:	69bb      	ldr	r3, [r7, #24]
 8009b0a:	791b      	ldrb	r3, [r3, #4]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d004      	beq.n	8009b1a <mem_malloc+0x132>
 8009b10:	4b33      	ldr	r3, [pc, #204]	; (8009be0 <mem_malloc+0x1f8>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	69ba      	ldr	r2, [r7, #24]
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d1f0      	bne.n	8009afc <mem_malloc+0x114>
          }
          lfree = cur;
 8009b1a:	4a2d      	ldr	r2, [pc, #180]	; (8009bd0 <mem_malloc+0x1e8>)
 8009b1c:	69bb      	ldr	r3, [r7, #24]
 8009b1e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009b20:	4b2b      	ldr	r3, [pc, #172]	; (8009bd0 <mem_malloc+0x1e8>)
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	4b2e      	ldr	r3, [pc, #184]	; (8009be0 <mem_malloc+0x1f8>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d00b      	beq.n	8009b44 <mem_malloc+0x15c>
 8009b2c:	4b28      	ldr	r3, [pc, #160]	; (8009bd0 <mem_malloc+0x1e8>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	791b      	ldrb	r3, [r3, #4]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d006      	beq.n	8009b44 <mem_malloc+0x15c>
 8009b36:	4b27      	ldr	r3, [pc, #156]	; (8009bd4 <mem_malloc+0x1ec>)
 8009b38:	f240 32b5 	movw	r2, #949	; 0x3b5
 8009b3c:	4929      	ldr	r1, [pc, #164]	; (8009be4 <mem_malloc+0x1fc>)
 8009b3e:	4827      	ldr	r0, [pc, #156]	; (8009bdc <mem_malloc+0x1f4>)
 8009b40:	f00b fd0e 	bl	8015560 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8009b44:	4821      	ldr	r0, [pc, #132]	; (8009bcc <mem_malloc+0x1e4>)
 8009b46:	f00b fc76 	bl	8015436 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009b4a:	8bba      	ldrh	r2, [r7, #28]
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	4413      	add	r3, r2
 8009b50:	3308      	adds	r3, #8
 8009b52:	4a23      	ldr	r2, [pc, #140]	; (8009be0 <mem_malloc+0x1f8>)
 8009b54:	6812      	ldr	r2, [r2, #0]
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d906      	bls.n	8009b68 <mem_malloc+0x180>
 8009b5a:	4b1e      	ldr	r3, [pc, #120]	; (8009bd4 <mem_malloc+0x1ec>)
 8009b5c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8009b60:	4921      	ldr	r1, [pc, #132]	; (8009be8 <mem_malloc+0x200>)
 8009b62:	481e      	ldr	r0, [pc, #120]	; (8009bdc <mem_malloc+0x1f4>)
 8009b64:	f00b fcfc 	bl	8015560 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	f003 0303 	and.w	r3, r3, #3
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d006      	beq.n	8009b80 <mem_malloc+0x198>
 8009b72:	4b18      	ldr	r3, [pc, #96]	; (8009bd4 <mem_malloc+0x1ec>)
 8009b74:	f240 32bb 	movw	r2, #955	; 0x3bb
 8009b78:	491c      	ldr	r1, [pc, #112]	; (8009bec <mem_malloc+0x204>)
 8009b7a:	4818      	ldr	r0, [pc, #96]	; (8009bdc <mem_malloc+0x1f4>)
 8009b7c:	f00b fcf0 	bl	8015560 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	f003 0303 	and.w	r3, r3, #3
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d006      	beq.n	8009b98 <mem_malloc+0x1b0>
 8009b8a:	4b12      	ldr	r3, [pc, #72]	; (8009bd4 <mem_malloc+0x1ec>)
 8009b8c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8009b90:	4917      	ldr	r1, [pc, #92]	; (8009bf0 <mem_malloc+0x208>)
 8009b92:	4812      	ldr	r0, [pc, #72]	; (8009bdc <mem_malloc+0x1f4>)
 8009b94:	f00b fce4 	bl	8015560 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	3308      	adds	r3, #8
 8009b9c:	e011      	b.n	8009bc2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8009b9e:	8bfb      	ldrh	r3, [r7, #30]
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f7ff fc33 	bl	800940c <ptr_to_mem>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	881b      	ldrh	r3, [r3, #0]
 8009baa:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009bac:	8bfa      	ldrh	r2, [r7, #30]
 8009bae:	8bbb      	ldrh	r3, [r7, #28]
 8009bb0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	f4ff af41 	bcc.w	8009a3c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8009bba:	4804      	ldr	r0, [pc, #16]	; (8009bcc <mem_malloc+0x1e4>)
 8009bbc:	f00b fc3b 	bl	8015436 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8009bc0:	2300      	movs	r3, #0
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3720      	adds	r7, #32
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
 8009bca:	bf00      	nop
 8009bcc:	2000a278 	.word	0x2000a278
 8009bd0:	2000a27c 	.word	0x2000a27c
 8009bd4:	08016780 	.word	0x08016780
 8009bd8:	08016944 	.word	0x08016944
 8009bdc:	080167c8 	.word	0x080167c8
 8009be0:	2000a274 	.word	0x2000a274
 8009be4:	08016958 	.word	0x08016958
 8009be8:	08016974 	.word	0x08016974
 8009bec:	080169a4 	.word	0x080169a4
 8009bf0:	080169d4 	.word	0x080169d4

08009bf4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b085      	sub	sp, #20
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	689b      	ldr	r3, [r3, #8]
 8009c00:	2200      	movs	r2, #0
 8009c02:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	3303      	adds	r3, #3
 8009c0a:	f023 0303 	bic.w	r3, r3, #3
 8009c0e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8009c10:	2300      	movs	r3, #0
 8009c12:	60fb      	str	r3, [r7, #12]
 8009c14:	e011      	b.n	8009c3a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	689b      	ldr	r3, [r3, #8]
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	689b      	ldr	r3, [r3, #8]
 8009c24:	68ba      	ldr	r2, [r7, #8]
 8009c26:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	881b      	ldrh	r3, [r3, #0]
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	4413      	add	r3, r2
 8009c32:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	3301      	adds	r3, #1
 8009c38:	60fb      	str	r3, [r7, #12]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	885b      	ldrh	r3, [r3, #2]
 8009c3e:	461a      	mov	r2, r3
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	4293      	cmp	r3, r2
 8009c44:	dbe7      	blt.n	8009c16 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8009c46:	bf00      	nop
 8009c48:	bf00      	nop
 8009c4a:	3714      	adds	r7, #20
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr

08009c54 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	80fb      	strh	r3, [r7, #6]
 8009c5e:	e009      	b.n	8009c74 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8009c60:	88fb      	ldrh	r3, [r7, #6]
 8009c62:	4a08      	ldr	r2, [pc, #32]	; (8009c84 <memp_init+0x30>)
 8009c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f7ff ffc3 	bl	8009bf4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009c6e:	88fb      	ldrh	r3, [r7, #6]
 8009c70:	3301      	adds	r3, #1
 8009c72:	80fb      	strh	r3, [r7, #6]
 8009c74:	88fb      	ldrh	r3, [r7, #6]
 8009c76:	2b0c      	cmp	r3, #12
 8009c78:	d9f2      	bls.n	8009c60 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8009c7a:	bf00      	nop
 8009c7c:	bf00      	nop
 8009c7e:	3708      	adds	r7, #8
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	080195ac 	.word	0x080195ac

08009c88 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8009c90:	f00b fbfe 	bl	8015490 <sys_arch_protect>
 8009c94:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	689b      	ldr	r3, [r3, #8]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d015      	beq.n	8009cd0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	689b      	ldr	r3, [r3, #8]
 8009ca8:	68ba      	ldr	r2, [r7, #8]
 8009caa:	6812      	ldr	r2, [r2, #0]
 8009cac:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	f003 0303 	and.w	r3, r3, #3
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d006      	beq.n	8009cc6 <do_memp_malloc_pool+0x3e>
 8009cb8:	4b09      	ldr	r3, [pc, #36]	; (8009ce0 <do_memp_malloc_pool+0x58>)
 8009cba:	f44f 728c 	mov.w	r2, #280	; 0x118
 8009cbe:	4909      	ldr	r1, [pc, #36]	; (8009ce4 <do_memp_malloc_pool+0x5c>)
 8009cc0:	4809      	ldr	r0, [pc, #36]	; (8009ce8 <do_memp_malloc_pool+0x60>)
 8009cc2:	f00b fc4d 	bl	8015560 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8009cc6:	68f8      	ldr	r0, [r7, #12]
 8009cc8:	f00b fbf0 	bl	80154ac <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	e003      	b.n	8009cd8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8009cd0:	68f8      	ldr	r0, [r7, #12]
 8009cd2:	f00b fbeb 	bl	80154ac <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8009cd6:	2300      	movs	r3, #0
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3710      	adds	r7, #16
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}
 8009ce0:	080169f8 	.word	0x080169f8
 8009ce4:	08016a28 	.word	0x08016a28
 8009ce8:	08016a4c 	.word	0x08016a4c

08009cec <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d106      	bne.n	8009d08 <memp_malloc_pool+0x1c>
 8009cfa:	4b0a      	ldr	r3, [pc, #40]	; (8009d24 <memp_malloc_pool+0x38>)
 8009cfc:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8009d00:	4909      	ldr	r1, [pc, #36]	; (8009d28 <memp_malloc_pool+0x3c>)
 8009d02:	480a      	ldr	r0, [pc, #40]	; (8009d2c <memp_malloc_pool+0x40>)
 8009d04:	f00b fc2c 	bl	8015560 <iprintf>
  if (desc == NULL) {
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d101      	bne.n	8009d12 <memp_malloc_pool+0x26>
    return NULL;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	e003      	b.n	8009d1a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f7ff ffb8 	bl	8009c88 <do_memp_malloc_pool>
 8009d18:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3708      	adds	r7, #8
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop
 8009d24:	080169f8 	.word	0x080169f8
 8009d28:	08016a74 	.word	0x08016a74
 8009d2c:	08016a4c 	.word	0x08016a4c

08009d30 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	4603      	mov	r3, r0
 8009d38:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009d3a:	79fb      	ldrb	r3, [r7, #7]
 8009d3c:	2b0c      	cmp	r3, #12
 8009d3e:	d908      	bls.n	8009d52 <memp_malloc+0x22>
 8009d40:	4b0a      	ldr	r3, [pc, #40]	; (8009d6c <memp_malloc+0x3c>)
 8009d42:	f240 1257 	movw	r2, #343	; 0x157
 8009d46:	490a      	ldr	r1, [pc, #40]	; (8009d70 <memp_malloc+0x40>)
 8009d48:	480a      	ldr	r0, [pc, #40]	; (8009d74 <memp_malloc+0x44>)
 8009d4a:	f00b fc09 	bl	8015560 <iprintf>
 8009d4e:	2300      	movs	r3, #0
 8009d50:	e008      	b.n	8009d64 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009d52:	79fb      	ldrb	r3, [r7, #7]
 8009d54:	4a08      	ldr	r2, [pc, #32]	; (8009d78 <memp_malloc+0x48>)
 8009d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f7ff ff94 	bl	8009c88 <do_memp_malloc_pool>
 8009d60:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8009d62:	68fb      	ldr	r3, [r7, #12]
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3710      	adds	r7, #16
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}
 8009d6c:	080169f8 	.word	0x080169f8
 8009d70:	08016a88 	.word	0x08016a88
 8009d74:	08016a4c 	.word	0x08016a4c
 8009d78:	080195ac 	.word	0x080195ac

08009d7c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	f003 0303 	and.w	r3, r3, #3
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d006      	beq.n	8009d9e <do_memp_free_pool+0x22>
 8009d90:	4b0d      	ldr	r3, [pc, #52]	; (8009dc8 <do_memp_free_pool+0x4c>)
 8009d92:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8009d96:	490d      	ldr	r1, [pc, #52]	; (8009dcc <do_memp_free_pool+0x50>)
 8009d98:	480d      	ldr	r0, [pc, #52]	; (8009dd0 <do_memp_free_pool+0x54>)
 8009d9a:	f00b fbe1 	bl	8015560 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8009da2:	f00b fb75 	bl	8015490 <sys_arch_protect>
 8009da6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	689b      	ldr	r3, [r3, #8]
 8009db6:	68fa      	ldr	r2, [r7, #12]
 8009db8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8009dba:	68b8      	ldr	r0, [r7, #8]
 8009dbc:	f00b fb76 	bl	80154ac <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8009dc0:	bf00      	nop
 8009dc2:	3710      	adds	r7, #16
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}
 8009dc8:	080169f8 	.word	0x080169f8
 8009dcc:	08016aa8 	.word	0x08016aa8
 8009dd0:	08016a4c 	.word	0x08016a4c

08009dd4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d106      	bne.n	8009df2 <memp_free_pool+0x1e>
 8009de4:	4b0a      	ldr	r3, [pc, #40]	; (8009e10 <memp_free_pool+0x3c>)
 8009de6:	f240 1295 	movw	r2, #405	; 0x195
 8009dea:	490a      	ldr	r1, [pc, #40]	; (8009e14 <memp_free_pool+0x40>)
 8009dec:	480a      	ldr	r0, [pc, #40]	; (8009e18 <memp_free_pool+0x44>)
 8009dee:	f00b fbb7 	bl	8015560 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d007      	beq.n	8009e08 <memp_free_pool+0x34>
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d004      	beq.n	8009e08 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8009dfe:	6839      	ldr	r1, [r7, #0]
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f7ff ffbb 	bl	8009d7c <do_memp_free_pool>
 8009e06:	e000      	b.n	8009e0a <memp_free_pool+0x36>
    return;
 8009e08:	bf00      	nop
}
 8009e0a:	3708      	adds	r7, #8
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}
 8009e10:	080169f8 	.word	0x080169f8
 8009e14:	08016a74 	.word	0x08016a74
 8009e18:	08016a4c 	.word	0x08016a4c

08009e1c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	4603      	mov	r3, r0
 8009e24:	6039      	str	r1, [r7, #0]
 8009e26:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8009e28:	79fb      	ldrb	r3, [r7, #7]
 8009e2a:	2b0c      	cmp	r3, #12
 8009e2c:	d907      	bls.n	8009e3e <memp_free+0x22>
 8009e2e:	4b0c      	ldr	r3, [pc, #48]	; (8009e60 <memp_free+0x44>)
 8009e30:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8009e34:	490b      	ldr	r1, [pc, #44]	; (8009e64 <memp_free+0x48>)
 8009e36:	480c      	ldr	r0, [pc, #48]	; (8009e68 <memp_free+0x4c>)
 8009e38:	f00b fb92 	bl	8015560 <iprintf>
 8009e3c:	e00c      	b.n	8009e58 <memp_free+0x3c>

  if (mem == NULL) {
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d008      	beq.n	8009e56 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009e44:	79fb      	ldrb	r3, [r7, #7]
 8009e46:	4a09      	ldr	r2, [pc, #36]	; (8009e6c <memp_free+0x50>)
 8009e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e4c:	6839      	ldr	r1, [r7, #0]
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7ff ff94 	bl	8009d7c <do_memp_free_pool>
 8009e54:	e000      	b.n	8009e58 <memp_free+0x3c>
    return;
 8009e56:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8009e58:	3708      	adds	r7, #8
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	080169f8 	.word	0x080169f8
 8009e64:	08016ac8 	.word	0x08016ac8
 8009e68:	08016a4c 	.word	0x08016a4c
 8009e6c:	080195ac 	.word	0x080195ac

08009e70 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8009e70:	b480      	push	{r7}
 8009e72:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8009e74:	bf00      	nop
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr
	...

08009e80 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b086      	sub	sp, #24
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	60b9      	str	r1, [r7, #8]
 8009e8a:	607a      	str	r2, [r7, #4]
 8009e8c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d108      	bne.n	8009ea6 <netif_add+0x26>
 8009e94:	4b5b      	ldr	r3, [pc, #364]	; (800a004 <netif_add+0x184>)
 8009e96:	f240 1227 	movw	r2, #295	; 0x127
 8009e9a:	495b      	ldr	r1, [pc, #364]	; (800a008 <netif_add+0x188>)
 8009e9c:	485b      	ldr	r0, [pc, #364]	; (800a00c <netif_add+0x18c>)
 8009e9e:	f00b fb5f 	bl	8015560 <iprintf>
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	e0a9      	b.n	8009ffa <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8009ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d108      	bne.n	8009ebe <netif_add+0x3e>
 8009eac:	4b55      	ldr	r3, [pc, #340]	; (800a004 <netif_add+0x184>)
 8009eae:	f44f 7294 	mov.w	r2, #296	; 0x128
 8009eb2:	4957      	ldr	r1, [pc, #348]	; (800a010 <netif_add+0x190>)
 8009eb4:	4855      	ldr	r0, [pc, #340]	; (800a00c <netif_add+0x18c>)
 8009eb6:	f00b fb53 	bl	8015560 <iprintf>
 8009eba:	2300      	movs	r3, #0
 8009ebc:	e09d      	b.n	8009ffa <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d101      	bne.n	8009ec8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009ec4:	4b53      	ldr	r3, [pc, #332]	; (800a014 <netif_add+0x194>)
 8009ec6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d101      	bne.n	8009ed2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8009ece:	4b51      	ldr	r3, [pc, #324]	; (800a014 <netif_add+0x194>)
 8009ed0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d101      	bne.n	8009edc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8009ed8:	4b4e      	ldr	r3, [pc, #312]	; (800a014 <netif_add+0x194>)
 8009eda:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2200      	movs	r2, #0
 8009eec:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	4a49      	ldr	r2, [pc, #292]	; (800a018 <netif_add+0x198>)
 8009ef2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2200      	movs	r2, #0
 8009efe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	3324      	adds	r3, #36	; 0x24
 8009f06:	2204      	movs	r2, #4
 8009f08:	2100      	movs	r1, #0
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f00b fb20 	bl	8015550 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2200      	movs	r2, #0
 8009f14:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	6a3a      	ldr	r2, [r7, #32]
 8009f1a:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8009f1c:	4b3f      	ldr	r3, [pc, #252]	; (800a01c <netif_add+0x19c>)
 8009f1e:	781a      	ldrb	r2, [r3, #0]
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f2a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	687a      	ldr	r2, [r7, #4]
 8009f30:	68b9      	ldr	r1, [r7, #8]
 8009f32:	68f8      	ldr	r0, [r7, #12]
 8009f34:	f000 f914 	bl	800a160 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8009f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3a:	68f8      	ldr	r0, [r7, #12]
 8009f3c:	4798      	blx	r3
 8009f3e:	4603      	mov	r3, r0
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d001      	beq.n	8009f48 <netif_add+0xc8>
    return NULL;
 8009f44:	2300      	movs	r3, #0
 8009f46:	e058      	b.n	8009ffa <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009f4e:	2bff      	cmp	r3, #255	; 0xff
 8009f50:	d103      	bne.n	8009f5a <netif_add+0xda>
        netif->num = 0;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2200      	movs	r2, #0
 8009f56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009f5e:	4b30      	ldr	r3, [pc, #192]	; (800a020 <netif_add+0x1a0>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	617b      	str	r3, [r7, #20]
 8009f64:	e02b      	b.n	8009fbe <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8009f66:	697a      	ldr	r2, [r7, #20]
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d106      	bne.n	8009f7c <netif_add+0xfc>
 8009f6e:	4b25      	ldr	r3, [pc, #148]	; (800a004 <netif_add+0x184>)
 8009f70:	f240 128b 	movw	r2, #395	; 0x18b
 8009f74:	492b      	ldr	r1, [pc, #172]	; (800a024 <netif_add+0x1a4>)
 8009f76:	4825      	ldr	r0, [pc, #148]	; (800a00c <netif_add+0x18c>)
 8009f78:	f00b faf2 	bl	8015560 <iprintf>
        num_netifs++;
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	3301      	adds	r3, #1
 8009f80:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	2bff      	cmp	r3, #255	; 0xff
 8009f86:	dd06      	ble.n	8009f96 <netif_add+0x116>
 8009f88:	4b1e      	ldr	r3, [pc, #120]	; (800a004 <netif_add+0x184>)
 8009f8a:	f240 128d 	movw	r2, #397	; 0x18d
 8009f8e:	4926      	ldr	r1, [pc, #152]	; (800a028 <netif_add+0x1a8>)
 8009f90:	481e      	ldr	r0, [pc, #120]	; (800a00c <netif_add+0x18c>)
 8009f92:	f00b fae5 	bl	8015560 <iprintf>
        if (netif2->num == netif->num) {
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d108      	bne.n	8009fb8 <netif_add+0x138>
          netif->num++;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009fac:	3301      	adds	r3, #1
 8009fae:	b2da      	uxtb	r2, r3
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8009fb6:	e005      	b.n	8009fc4 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	617b      	str	r3, [r7, #20]
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d1d0      	bne.n	8009f66 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d1be      	bne.n	8009f48 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009fd0:	2bfe      	cmp	r3, #254	; 0xfe
 8009fd2:	d103      	bne.n	8009fdc <netif_add+0x15c>
    netif_num = 0;
 8009fd4:	4b11      	ldr	r3, [pc, #68]	; (800a01c <netif_add+0x19c>)
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	701a      	strb	r2, [r3, #0]
 8009fda:	e006      	b.n	8009fea <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	b2da      	uxtb	r2, r3
 8009fe6:	4b0d      	ldr	r3, [pc, #52]	; (800a01c <netif_add+0x19c>)
 8009fe8:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8009fea:	4b0d      	ldr	r3, [pc, #52]	; (800a020 <netif_add+0x1a0>)
 8009fec:	681a      	ldr	r2, [r3, #0]
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8009ff2:	4a0b      	ldr	r2, [pc, #44]	; (800a020 <netif_add+0x1a0>)
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3718      	adds	r7, #24
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	08016ae4 	.word	0x08016ae4
 800a008:	08016b78 	.word	0x08016b78
 800a00c:	08016b34 	.word	0x08016b34
 800a010:	08016b94 	.word	0x08016b94
 800a014:	08019630 	.word	0x08019630
 800a018:	0800a443 	.word	0x0800a443
 800a01c:	2000d374 	.word	0x2000d374
 800a020:	2000d36c 	.word	0x2000d36c
 800a024:	08016bb8 	.word	0x08016bb8
 800a028:	08016bcc 	.word	0x08016bcc

0800a02c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800a036:	6839      	ldr	r1, [r7, #0]
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f002 fb91 	bl	800c760 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800a03e:	6839      	ldr	r1, [r7, #0]
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f006 ffa7 	bl	8010f94 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800a046:	bf00      	nop
 800a048:	3708      	adds	r7, #8
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
	...

0800a050 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b086      	sub	sp, #24
 800a054:	af00      	add	r7, sp, #0
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d106      	bne.n	800a070 <netif_do_set_ipaddr+0x20>
 800a062:	4b1d      	ldr	r3, [pc, #116]	; (800a0d8 <netif_do_set_ipaddr+0x88>)
 800a064:	f240 12cb 	movw	r2, #459	; 0x1cb
 800a068:	491c      	ldr	r1, [pc, #112]	; (800a0dc <netif_do_set_ipaddr+0x8c>)
 800a06a:	481d      	ldr	r0, [pc, #116]	; (800a0e0 <netif_do_set_ipaddr+0x90>)
 800a06c:	f00b fa78 	bl	8015560 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d106      	bne.n	800a084 <netif_do_set_ipaddr+0x34>
 800a076:	4b18      	ldr	r3, [pc, #96]	; (800a0d8 <netif_do_set_ipaddr+0x88>)
 800a078:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800a07c:	4917      	ldr	r1, [pc, #92]	; (800a0dc <netif_do_set_ipaddr+0x8c>)
 800a07e:	4818      	ldr	r0, [pc, #96]	; (800a0e0 <netif_do_set_ipaddr+0x90>)
 800a080:	f00b fa6e 	bl	8015560 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	681a      	ldr	r2, [r3, #0]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	3304      	adds	r3, #4
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	429a      	cmp	r2, r3
 800a090:	d01c      	beq.n	800a0cc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	3304      	adds	r3, #4
 800a09c:	681a      	ldr	r2, [r3, #0]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800a0a2:	f107 0314 	add.w	r3, r7, #20
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f7ff ffbf 	bl	800a02c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d002      	beq.n	800a0ba <netif_do_set_ipaddr+0x6a>
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	e000      	b.n	800a0bc <netif_do_set_ipaddr+0x6c>
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	68fa      	ldr	r2, [r7, #12]
 800a0be:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a0c0:	2101      	movs	r1, #1
 800a0c2:	68f8      	ldr	r0, [r7, #12]
 800a0c4:	f000 f8d2 	bl	800a26c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	e000      	b.n	800a0ce <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800a0cc:	2300      	movs	r3, #0
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3718      	adds	r7, #24
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	bf00      	nop
 800a0d8:	08016ae4 	.word	0x08016ae4
 800a0dc:	08016bfc 	.word	0x08016bfc
 800a0e0:	08016b34 	.word	0x08016b34

0800a0e4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b085      	sub	sp, #20
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	60b9      	str	r1, [r7, #8]
 800a0ee:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	3308      	adds	r3, #8
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d00a      	beq.n	800a114 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d002      	beq.n	800a10a <netif_do_set_netmask+0x26>
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	e000      	b.n	800a10c <netif_do_set_netmask+0x28>
 800a10a:	2300      	movs	r3, #0
 800a10c:	68fa      	ldr	r2, [r7, #12]
 800a10e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800a110:	2301      	movs	r3, #1
 800a112:	e000      	b.n	800a116 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800a114:	2300      	movs	r3, #0
}
 800a116:	4618      	mov	r0, r3
 800a118:	3714      	adds	r7, #20
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr

0800a122 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800a122:	b480      	push	{r7}
 800a124:	b085      	sub	sp, #20
 800a126:	af00      	add	r7, sp, #0
 800a128:	60f8      	str	r0, [r7, #12]
 800a12a:	60b9      	str	r1, [r7, #8]
 800a12c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	330c      	adds	r3, #12
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	429a      	cmp	r2, r3
 800a13a:	d00a      	beq.n	800a152 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d002      	beq.n	800a148 <netif_do_set_gw+0x26>
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	e000      	b.n	800a14a <netif_do_set_gw+0x28>
 800a148:	2300      	movs	r3, #0
 800a14a:	68fa      	ldr	r2, [r7, #12]
 800a14c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800a14e:	2301      	movs	r3, #1
 800a150:	e000      	b.n	800a154 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800a152:	2300      	movs	r3, #0
}
 800a154:	4618      	mov	r0, r3
 800a156:	3714      	adds	r7, #20
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b088      	sub	sp, #32
 800a164:	af00      	add	r7, sp, #0
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	60b9      	str	r1, [r7, #8]
 800a16a:	607a      	str	r2, [r7, #4]
 800a16c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800a16e:	2300      	movs	r3, #0
 800a170:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800a172:	2300      	movs	r3, #0
 800a174:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d101      	bne.n	800a180 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800a17c:	4b1c      	ldr	r3, [pc, #112]	; (800a1f0 <netif_set_addr+0x90>)
 800a17e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d101      	bne.n	800a18a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800a186:	4b1a      	ldr	r3, [pc, #104]	; (800a1f0 <netif_set_addr+0x90>)
 800a188:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d101      	bne.n	800a194 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800a190:	4b17      	ldr	r3, [pc, #92]	; (800a1f0 <netif_set_addr+0x90>)
 800a192:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d003      	beq.n	800a1a2 <netif_set_addr+0x42>
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d101      	bne.n	800a1a6 <netif_set_addr+0x46>
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	e000      	b.n	800a1a8 <netif_set_addr+0x48>
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	617b      	str	r3, [r7, #20]
  if (remove) {
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d006      	beq.n	800a1be <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a1b0:	f107 0310 	add.w	r3, r7, #16
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	68b9      	ldr	r1, [r7, #8]
 800a1b8:	68f8      	ldr	r0, [r7, #12]
 800a1ba:	f7ff ff49 	bl	800a050 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800a1be:	69fa      	ldr	r2, [r7, #28]
 800a1c0:	6879      	ldr	r1, [r7, #4]
 800a1c2:	68f8      	ldr	r0, [r7, #12]
 800a1c4:	f7ff ff8e 	bl	800a0e4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800a1c8:	69ba      	ldr	r2, [r7, #24]
 800a1ca:	6839      	ldr	r1, [r7, #0]
 800a1cc:	68f8      	ldr	r0, [r7, #12]
 800a1ce:	f7ff ffa8 	bl	800a122 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d106      	bne.n	800a1e6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a1d8:	f107 0310 	add.w	r3, r7, #16
 800a1dc:	461a      	mov	r2, r3
 800a1de:	68b9      	ldr	r1, [r7, #8]
 800a1e0:	68f8      	ldr	r0, [r7, #12]
 800a1e2:	f7ff ff35 	bl	800a050 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800a1e6:	bf00      	nop
 800a1e8:	3720      	adds	r7, #32
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
 800a1ee:	bf00      	nop
 800a1f0:	08019630 	.word	0x08019630

0800a1f4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b083      	sub	sp, #12
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800a1fc:	4a04      	ldr	r2, [pc, #16]	; (800a210 <netif_set_default+0x1c>)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800a202:	bf00      	nop
 800a204:	370c      	adds	r7, #12
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr
 800a20e:	bf00      	nop
 800a210:	2000d370 	.word	0x2000d370

0800a214 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b082      	sub	sp, #8
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d107      	bne.n	800a232 <netif_set_up+0x1e>
 800a222:	4b0f      	ldr	r3, [pc, #60]	; (800a260 <netif_set_up+0x4c>)
 800a224:	f44f 7254 	mov.w	r2, #848	; 0x350
 800a228:	490e      	ldr	r1, [pc, #56]	; (800a264 <netif_set_up+0x50>)
 800a22a:	480f      	ldr	r0, [pc, #60]	; (800a268 <netif_set_up+0x54>)
 800a22c:	f00b f998 	bl	8015560 <iprintf>
 800a230:	e013      	b.n	800a25a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a238:	f003 0301 	and.w	r3, r3, #1
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d10c      	bne.n	800a25a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a246:	f043 0301 	orr.w	r3, r3, #1
 800a24a:	b2da      	uxtb	r2, r3
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a252:	2103      	movs	r1, #3
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f000 f809 	bl	800a26c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800a25a:	3708      	adds	r7, #8
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}
 800a260:	08016ae4 	.word	0x08016ae4
 800a264:	08016c6c 	.word	0x08016c6c
 800a268:	08016b34 	.word	0x08016b34

0800a26c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	460b      	mov	r3, r1
 800a276:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d106      	bne.n	800a28c <netif_issue_reports+0x20>
 800a27e:	4b18      	ldr	r3, [pc, #96]	; (800a2e0 <netif_issue_reports+0x74>)
 800a280:	f240 326d 	movw	r2, #877	; 0x36d
 800a284:	4917      	ldr	r1, [pc, #92]	; (800a2e4 <netif_issue_reports+0x78>)
 800a286:	4818      	ldr	r0, [pc, #96]	; (800a2e8 <netif_issue_reports+0x7c>)
 800a288:	f00b f96a 	bl	8015560 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a292:	f003 0304 	and.w	r3, r3, #4
 800a296:	2b00      	cmp	r3, #0
 800a298:	d01e      	beq.n	800a2d8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a2a0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d017      	beq.n	800a2d8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a2a8:	78fb      	ldrb	r3, [r7, #3]
 800a2aa:	f003 0301 	and.w	r3, r3, #1
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d013      	beq.n	800a2da <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	3304      	adds	r3, #4
 800a2b6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d00e      	beq.n	800a2da <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a2c2:	f003 0308 	and.w	r3, r3, #8
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d007      	beq.n	800a2da <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	3304      	adds	r3, #4
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f009 fc5f 	bl	8013b94 <etharp_request>
 800a2d6:	e000      	b.n	800a2da <netif_issue_reports+0x6e>
    return;
 800a2d8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800a2da:	3708      	adds	r7, #8
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}
 800a2e0:	08016ae4 	.word	0x08016ae4
 800a2e4:	08016c88 	.word	0x08016c88
 800a2e8:	08016b34 	.word	0x08016b34

0800a2ec <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b082      	sub	sp, #8
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d107      	bne.n	800a30a <netif_set_down+0x1e>
 800a2fa:	4b12      	ldr	r3, [pc, #72]	; (800a344 <netif_set_down+0x58>)
 800a2fc:	f240 329b 	movw	r2, #923	; 0x39b
 800a300:	4911      	ldr	r1, [pc, #68]	; (800a348 <netif_set_down+0x5c>)
 800a302:	4812      	ldr	r0, [pc, #72]	; (800a34c <netif_set_down+0x60>)
 800a304:	f00b f92c 	bl	8015560 <iprintf>
 800a308:	e019      	b.n	800a33e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a310:	f003 0301 	and.w	r3, r3, #1
 800a314:	2b00      	cmp	r3, #0
 800a316:	d012      	beq.n	800a33e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a31e:	f023 0301 	bic.w	r3, r3, #1
 800a322:	b2da      	uxtb	r2, r3
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a330:	f003 0308 	and.w	r3, r3, #8
 800a334:	2b00      	cmp	r3, #0
 800a336:	d002      	beq.n	800a33e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f008 ffe5 	bl	8013308 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800a33e:	3708      	adds	r7, #8
 800a340:	46bd      	mov	sp, r7
 800a342:	bd80      	pop	{r7, pc}
 800a344:	08016ae4 	.word	0x08016ae4
 800a348:	08016cac 	.word	0x08016cac
 800a34c:	08016b34 	.word	0x08016b34

0800a350 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b082      	sub	sp, #8
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d107      	bne.n	800a36e <netif_set_link_up+0x1e>
 800a35e:	4b15      	ldr	r3, [pc, #84]	; (800a3b4 <netif_set_link_up+0x64>)
 800a360:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800a364:	4914      	ldr	r1, [pc, #80]	; (800a3b8 <netif_set_link_up+0x68>)
 800a366:	4815      	ldr	r0, [pc, #84]	; (800a3bc <netif_set_link_up+0x6c>)
 800a368:	f00b f8fa 	bl	8015560 <iprintf>
 800a36c:	e01e      	b.n	800a3ac <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a374:	f003 0304 	and.w	r3, r3, #4
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d117      	bne.n	800a3ac <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a382:	f043 0304 	orr.w	r3, r3, #4
 800a386:	b2da      	uxtb	r2, r3
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f007 fa2a 	bl	80117e8 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a394:	2103      	movs	r1, #3
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f7ff ff68 	bl	800a26c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	69db      	ldr	r3, [r3, #28]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d003      	beq.n	800a3ac <netif_set_link_up+0x5c>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	69db      	ldr	r3, [r3, #28]
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a3ac:	3708      	adds	r7, #8
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
 800a3b2:	bf00      	nop
 800a3b4:	08016ae4 	.word	0x08016ae4
 800a3b8:	08016ccc 	.word	0x08016ccc
 800a3bc:	08016b34 	.word	0x08016b34

0800a3c0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b082      	sub	sp, #8
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d107      	bne.n	800a3de <netif_set_link_down+0x1e>
 800a3ce:	4b11      	ldr	r3, [pc, #68]	; (800a414 <netif_set_link_down+0x54>)
 800a3d0:	f240 4206 	movw	r2, #1030	; 0x406
 800a3d4:	4910      	ldr	r1, [pc, #64]	; (800a418 <netif_set_link_down+0x58>)
 800a3d6:	4811      	ldr	r0, [pc, #68]	; (800a41c <netif_set_link_down+0x5c>)
 800a3d8:	f00b f8c2 	bl	8015560 <iprintf>
 800a3dc:	e017      	b.n	800a40e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a3e4:	f003 0304 	and.w	r3, r3, #4
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d010      	beq.n	800a40e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a3f2:	f023 0304 	bic.w	r3, r3, #4
 800a3f6:	b2da      	uxtb	r2, r3
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	69db      	ldr	r3, [r3, #28]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d003      	beq.n	800a40e <netif_set_link_down+0x4e>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	69db      	ldr	r3, [r3, #28]
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a40e:	3708      	adds	r7, #8
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}
 800a414:	08016ae4 	.word	0x08016ae4
 800a418:	08016cf0 	.word	0x08016cf0
 800a41c:	08016b34 	.word	0x08016b34

0800a420 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800a420:	b480      	push	{r7}
 800a422:	b083      	sub	sp, #12
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d002      	beq.n	800a436 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	683a      	ldr	r2, [r7, #0]
 800a434:	61da      	str	r2, [r3, #28]
  }
}
 800a436:	bf00      	nop
 800a438:	370c      	adds	r7, #12
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr

0800a442 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800a442:	b480      	push	{r7}
 800a444:	b085      	sub	sp, #20
 800a446:	af00      	add	r7, sp, #0
 800a448:	60f8      	str	r0, [r7, #12]
 800a44a:	60b9      	str	r1, [r7, #8]
 800a44c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800a44e:	f06f 030b 	mvn.w	r3, #11
}
 800a452:	4618      	mov	r0, r3
 800a454:	3714      	adds	r7, #20
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr
	...

0800a460 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800a460:	b480      	push	{r7}
 800a462:	b085      	sub	sp, #20
 800a464:	af00      	add	r7, sp, #0
 800a466:	4603      	mov	r3, r0
 800a468:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800a46a:	79fb      	ldrb	r3, [r7, #7]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d013      	beq.n	800a498 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800a470:	4b0d      	ldr	r3, [pc, #52]	; (800a4a8 <netif_get_by_index+0x48>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	60fb      	str	r3, [r7, #12]
 800a476:	e00c      	b.n	800a492 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a47e:	3301      	adds	r3, #1
 800a480:	b2db      	uxtb	r3, r3
 800a482:	79fa      	ldrb	r2, [r7, #7]
 800a484:	429a      	cmp	r2, r3
 800a486:	d101      	bne.n	800a48c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	e006      	b.n	800a49a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	60fb      	str	r3, [r7, #12]
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d1ef      	bne.n	800a478 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800a498:	2300      	movs	r3, #0
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3714      	adds	r7, #20
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a4:	4770      	bx	lr
 800a4a6:	bf00      	nop
 800a4a8:	2000d36c 	.word	0x2000d36c

0800a4ac <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b082      	sub	sp, #8
 800a4b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800a4b2:	f00a ffed 	bl	8015490 <sys_arch_protect>
 800a4b6:	6038      	str	r0, [r7, #0]
 800a4b8:	4b0d      	ldr	r3, [pc, #52]	; (800a4f0 <pbuf_free_ooseq+0x44>)
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	701a      	strb	r2, [r3, #0]
 800a4be:	6838      	ldr	r0, [r7, #0]
 800a4c0:	f00a fff4 	bl	80154ac <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a4c4:	4b0b      	ldr	r3, [pc, #44]	; (800a4f4 <pbuf_free_ooseq+0x48>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	607b      	str	r3, [r7, #4]
 800a4ca:	e00a      	b.n	800a4e2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d003      	beq.n	800a4dc <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f002 f981 	bl	800c7dc <tcp_free_ooseq>
      return;
 800a4da:	e005      	b.n	800a4e8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	68db      	ldr	r3, [r3, #12]
 800a4e0:	607b      	str	r3, [r7, #4]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d1f1      	bne.n	800a4cc <pbuf_free_ooseq+0x20>
    }
  }
}
 800a4e8:	3708      	adds	r7, #8
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}
 800a4ee:	bf00      	nop
 800a4f0:	2000d375 	.word	0x2000d375
 800a4f4:	2000d384 	.word	0x2000d384

0800a4f8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b082      	sub	sp, #8
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800a500:	f7ff ffd4 	bl	800a4ac <pbuf_free_ooseq>
}
 800a504:	bf00      	nop
 800a506:	3708      	adds	r7, #8
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800a512:	f00a ffbd 	bl	8015490 <sys_arch_protect>
 800a516:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800a518:	4b0f      	ldr	r3, [pc, #60]	; (800a558 <pbuf_pool_is_empty+0x4c>)
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800a51e:	4b0e      	ldr	r3, [pc, #56]	; (800a558 <pbuf_pool_is_empty+0x4c>)
 800a520:	2201      	movs	r2, #1
 800a522:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f00a ffc1 	bl	80154ac <sys_arch_unprotect>

  if (!queued) {
 800a52a:	78fb      	ldrb	r3, [r7, #3]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d10f      	bne.n	800a550 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800a530:	2100      	movs	r1, #0
 800a532:	480a      	ldr	r0, [pc, #40]	; (800a55c <pbuf_pool_is_empty+0x50>)
 800a534:	f7fe fe9a 	bl	800926c <tcpip_try_callback>
 800a538:	4603      	mov	r3, r0
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d008      	beq.n	800a550 <pbuf_pool_is_empty+0x44>
 800a53e:	f00a ffa7 	bl	8015490 <sys_arch_protect>
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	4b04      	ldr	r3, [pc, #16]	; (800a558 <pbuf_pool_is_empty+0x4c>)
 800a546:	2200      	movs	r2, #0
 800a548:	701a      	strb	r2, [r3, #0]
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f00a ffae 	bl	80154ac <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800a550:	bf00      	nop
 800a552:	3708      	adds	r7, #8
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}
 800a558:	2000d375 	.word	0x2000d375
 800a55c:	0800a4f9 	.word	0x0800a4f9

0800a560 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800a560:	b480      	push	{r7}
 800a562:	b085      	sub	sp, #20
 800a564:	af00      	add	r7, sp, #0
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	60b9      	str	r1, [r7, #8]
 800a56a:	4611      	mov	r1, r2
 800a56c:	461a      	mov	r2, r3
 800a56e:	460b      	mov	r3, r1
 800a570:	80fb      	strh	r3, [r7, #6]
 800a572:	4613      	mov	r3, r2
 800a574:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2200      	movs	r2, #0
 800a57a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	68ba      	ldr	r2, [r7, #8]
 800a580:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	88fa      	ldrh	r2, [r7, #6]
 800a586:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	88ba      	ldrh	r2, [r7, #4]
 800a58c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800a58e:	8b3b      	ldrh	r3, [r7, #24]
 800a590:	b2da      	uxtb	r2, r3
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	7f3a      	ldrb	r2, [r7, #28]
 800a59a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2201      	movs	r2, #1
 800a5a0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	73da      	strb	r2, [r3, #15]
}
 800a5a8:	bf00      	nop
 800a5aa:	3714      	adds	r7, #20
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr

0800a5b4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b08c      	sub	sp, #48	; 0x30
 800a5b8:	af02      	add	r7, sp, #8
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	71fb      	strb	r3, [r7, #7]
 800a5be:	460b      	mov	r3, r1
 800a5c0:	80bb      	strh	r3, [r7, #4]
 800a5c2:	4613      	mov	r3, r2
 800a5c4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800a5c6:	79fb      	ldrb	r3, [r7, #7]
 800a5c8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800a5ca:	887b      	ldrh	r3, [r7, #2]
 800a5cc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a5d0:	d07f      	beq.n	800a6d2 <pbuf_alloc+0x11e>
 800a5d2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800a5d6:	f300 80c8 	bgt.w	800a76a <pbuf_alloc+0x1b6>
 800a5da:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a5de:	d010      	beq.n	800a602 <pbuf_alloc+0x4e>
 800a5e0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800a5e4:	f300 80c1 	bgt.w	800a76a <pbuf_alloc+0x1b6>
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d002      	beq.n	800a5f2 <pbuf_alloc+0x3e>
 800a5ec:	2b41      	cmp	r3, #65	; 0x41
 800a5ee:	f040 80bc 	bne.w	800a76a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800a5f2:	887a      	ldrh	r2, [r7, #2]
 800a5f4:	88bb      	ldrh	r3, [r7, #4]
 800a5f6:	4619      	mov	r1, r3
 800a5f8:	2000      	movs	r0, #0
 800a5fa:	f000 f8d1 	bl	800a7a0 <pbuf_alloc_reference>
 800a5fe:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800a600:	e0bd      	b.n	800a77e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800a602:	2300      	movs	r3, #0
 800a604:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800a606:	2300      	movs	r3, #0
 800a608:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800a60a:	88bb      	ldrh	r3, [r7, #4]
 800a60c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a60e:	200c      	movs	r0, #12
 800a610:	f7ff fb8e 	bl	8009d30 <memp_malloc>
 800a614:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d109      	bne.n	800a630 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800a61c:	f7ff ff76 	bl	800a50c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800a620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a622:	2b00      	cmp	r3, #0
 800a624:	d002      	beq.n	800a62c <pbuf_alloc+0x78>
            pbuf_free(p);
 800a626:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a628:	f000 faa8 	bl	800ab7c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800a62c:	2300      	movs	r3, #0
 800a62e:	e0a7      	b.n	800a780 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a630:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a632:	3303      	adds	r3, #3
 800a634:	b29b      	uxth	r3, r3
 800a636:	f023 0303 	bic.w	r3, r3, #3
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800a640:	b29b      	uxth	r3, r3
 800a642:	8b7a      	ldrh	r2, [r7, #26]
 800a644:	4293      	cmp	r3, r2
 800a646:	bf28      	it	cs
 800a648:	4613      	movcs	r3, r2
 800a64a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a64c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a64e:	3310      	adds	r3, #16
 800a650:	693a      	ldr	r2, [r7, #16]
 800a652:	4413      	add	r3, r2
 800a654:	3303      	adds	r3, #3
 800a656:	f023 0303 	bic.w	r3, r3, #3
 800a65a:	4618      	mov	r0, r3
 800a65c:	89f9      	ldrh	r1, [r7, #14]
 800a65e:	8b7a      	ldrh	r2, [r7, #26]
 800a660:	2300      	movs	r3, #0
 800a662:	9301      	str	r3, [sp, #4]
 800a664:	887b      	ldrh	r3, [r7, #2]
 800a666:	9300      	str	r3, [sp, #0]
 800a668:	460b      	mov	r3, r1
 800a66a:	4601      	mov	r1, r0
 800a66c:	6938      	ldr	r0, [r7, #16]
 800a66e:	f7ff ff77 	bl	800a560 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	f003 0303 	and.w	r3, r3, #3
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d006      	beq.n	800a68c <pbuf_alloc+0xd8>
 800a67e:	4b42      	ldr	r3, [pc, #264]	; (800a788 <pbuf_alloc+0x1d4>)
 800a680:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a684:	4941      	ldr	r1, [pc, #260]	; (800a78c <pbuf_alloc+0x1d8>)
 800a686:	4842      	ldr	r0, [pc, #264]	; (800a790 <pbuf_alloc+0x1dc>)
 800a688:	f00a ff6a 	bl	8015560 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800a68c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a68e:	3303      	adds	r3, #3
 800a690:	f023 0303 	bic.w	r3, r3, #3
 800a694:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800a698:	d106      	bne.n	800a6a8 <pbuf_alloc+0xf4>
 800a69a:	4b3b      	ldr	r3, [pc, #236]	; (800a788 <pbuf_alloc+0x1d4>)
 800a69c:	f44f 7281 	mov.w	r2, #258	; 0x102
 800a6a0:	493c      	ldr	r1, [pc, #240]	; (800a794 <pbuf_alloc+0x1e0>)
 800a6a2:	483b      	ldr	r0, [pc, #236]	; (800a790 <pbuf_alloc+0x1dc>)
 800a6a4:	f00a ff5c 	bl	8015560 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800a6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d102      	bne.n	800a6b4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	627b      	str	r3, [r7, #36]	; 0x24
 800a6b2:	e002      	b.n	800a6ba <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800a6b4:	69fb      	ldr	r3, [r7, #28]
 800a6b6:	693a      	ldr	r2, [r7, #16]
 800a6b8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800a6be:	8b7a      	ldrh	r2, [r7, #26]
 800a6c0:	89fb      	ldrh	r3, [r7, #14]
 800a6c2:	1ad3      	subs	r3, r2, r3
 800a6c4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800a6ca:	8b7b      	ldrh	r3, [r7, #26]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d19e      	bne.n	800a60e <pbuf_alloc+0x5a>
      break;
 800a6d0:	e055      	b.n	800a77e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800a6d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a6d4:	3303      	adds	r3, #3
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	f023 0303 	bic.w	r3, r3, #3
 800a6dc:	b29a      	uxth	r2, r3
 800a6de:	88bb      	ldrh	r3, [r7, #4]
 800a6e0:	3303      	adds	r3, #3
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	f023 0303 	bic.w	r3, r3, #3
 800a6e8:	b29b      	uxth	r3, r3
 800a6ea:	4413      	add	r3, r2
 800a6ec:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a6ee:	8b3b      	ldrh	r3, [r7, #24]
 800a6f0:	3310      	adds	r3, #16
 800a6f2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a6f4:	8b3a      	ldrh	r2, [r7, #24]
 800a6f6:	88bb      	ldrh	r3, [r7, #4]
 800a6f8:	3303      	adds	r3, #3
 800a6fa:	f023 0303 	bic.w	r3, r3, #3
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d306      	bcc.n	800a710 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800a702:	8afa      	ldrh	r2, [r7, #22]
 800a704:	88bb      	ldrh	r3, [r7, #4]
 800a706:	3303      	adds	r3, #3
 800a708:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d201      	bcs.n	800a714 <pbuf_alloc+0x160>
        return NULL;
 800a710:	2300      	movs	r3, #0
 800a712:	e035      	b.n	800a780 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800a714:	8afb      	ldrh	r3, [r7, #22]
 800a716:	4618      	mov	r0, r3
 800a718:	f7ff f966 	bl	80099e8 <mem_malloc>
 800a71c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800a71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a720:	2b00      	cmp	r3, #0
 800a722:	d101      	bne.n	800a728 <pbuf_alloc+0x174>
        return NULL;
 800a724:	2300      	movs	r3, #0
 800a726:	e02b      	b.n	800a780 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a728:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a72a:	3310      	adds	r3, #16
 800a72c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a72e:	4413      	add	r3, r2
 800a730:	3303      	adds	r3, #3
 800a732:	f023 0303 	bic.w	r3, r3, #3
 800a736:	4618      	mov	r0, r3
 800a738:	88b9      	ldrh	r1, [r7, #4]
 800a73a:	88ba      	ldrh	r2, [r7, #4]
 800a73c:	2300      	movs	r3, #0
 800a73e:	9301      	str	r3, [sp, #4]
 800a740:	887b      	ldrh	r3, [r7, #2]
 800a742:	9300      	str	r3, [sp, #0]
 800a744:	460b      	mov	r3, r1
 800a746:	4601      	mov	r1, r0
 800a748:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a74a:	f7ff ff09 	bl	800a560 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800a74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	f003 0303 	and.w	r3, r3, #3
 800a756:	2b00      	cmp	r3, #0
 800a758:	d010      	beq.n	800a77c <pbuf_alloc+0x1c8>
 800a75a:	4b0b      	ldr	r3, [pc, #44]	; (800a788 <pbuf_alloc+0x1d4>)
 800a75c:	f44f 7291 	mov.w	r2, #290	; 0x122
 800a760:	490d      	ldr	r1, [pc, #52]	; (800a798 <pbuf_alloc+0x1e4>)
 800a762:	480b      	ldr	r0, [pc, #44]	; (800a790 <pbuf_alloc+0x1dc>)
 800a764:	f00a fefc 	bl	8015560 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800a768:	e008      	b.n	800a77c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a76a:	4b07      	ldr	r3, [pc, #28]	; (800a788 <pbuf_alloc+0x1d4>)
 800a76c:	f240 1227 	movw	r2, #295	; 0x127
 800a770:	490a      	ldr	r1, [pc, #40]	; (800a79c <pbuf_alloc+0x1e8>)
 800a772:	4807      	ldr	r0, [pc, #28]	; (800a790 <pbuf_alloc+0x1dc>)
 800a774:	f00a fef4 	bl	8015560 <iprintf>
      return NULL;
 800a778:	2300      	movs	r3, #0
 800a77a:	e001      	b.n	800a780 <pbuf_alloc+0x1cc>
      break;
 800a77c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800a77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a780:	4618      	mov	r0, r3
 800a782:	3728      	adds	r7, #40	; 0x28
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}
 800a788:	08016d14 	.word	0x08016d14
 800a78c:	08016d44 	.word	0x08016d44
 800a790:	08016d74 	.word	0x08016d74
 800a794:	08016d9c 	.word	0x08016d9c
 800a798:	08016dd0 	.word	0x08016dd0
 800a79c:	08016dfc 	.word	0x08016dfc

0800a7a0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b086      	sub	sp, #24
 800a7a4:	af02      	add	r7, sp, #8
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	460b      	mov	r3, r1
 800a7aa:	807b      	strh	r3, [r7, #2]
 800a7ac:	4613      	mov	r3, r2
 800a7ae:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a7b0:	883b      	ldrh	r3, [r7, #0]
 800a7b2:	2b41      	cmp	r3, #65	; 0x41
 800a7b4:	d009      	beq.n	800a7ca <pbuf_alloc_reference+0x2a>
 800a7b6:	883b      	ldrh	r3, [r7, #0]
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	d006      	beq.n	800a7ca <pbuf_alloc_reference+0x2a>
 800a7bc:	4b0f      	ldr	r3, [pc, #60]	; (800a7fc <pbuf_alloc_reference+0x5c>)
 800a7be:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800a7c2:	490f      	ldr	r1, [pc, #60]	; (800a800 <pbuf_alloc_reference+0x60>)
 800a7c4:	480f      	ldr	r0, [pc, #60]	; (800a804 <pbuf_alloc_reference+0x64>)
 800a7c6:	f00a fecb 	bl	8015560 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a7ca:	200b      	movs	r0, #11
 800a7cc:	f7ff fab0 	bl	8009d30 <memp_malloc>
 800a7d0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d101      	bne.n	800a7dc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	e00b      	b.n	800a7f4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800a7dc:	8879      	ldrh	r1, [r7, #2]
 800a7de:	887a      	ldrh	r2, [r7, #2]
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	9301      	str	r3, [sp, #4]
 800a7e4:	883b      	ldrh	r3, [r7, #0]
 800a7e6:	9300      	str	r3, [sp, #0]
 800a7e8:	460b      	mov	r3, r1
 800a7ea:	6879      	ldr	r1, [r7, #4]
 800a7ec:	68f8      	ldr	r0, [r7, #12]
 800a7ee:	f7ff feb7 	bl	800a560 <pbuf_init_alloced_pbuf>
  return p;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3710      	adds	r7, #16
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}
 800a7fc:	08016d14 	.word	0x08016d14
 800a800:	08016e18 	.word	0x08016e18
 800a804:	08016d74 	.word	0x08016d74

0800a808 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b088      	sub	sp, #32
 800a80c:	af02      	add	r7, sp, #8
 800a80e:	607b      	str	r3, [r7, #4]
 800a810:	4603      	mov	r3, r0
 800a812:	73fb      	strb	r3, [r7, #15]
 800a814:	460b      	mov	r3, r1
 800a816:	81bb      	strh	r3, [r7, #12]
 800a818:	4613      	mov	r3, r2
 800a81a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800a81c:	7bfb      	ldrb	r3, [r7, #15]
 800a81e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a820:	8a7b      	ldrh	r3, [r7, #18]
 800a822:	3303      	adds	r3, #3
 800a824:	f023 0203 	bic.w	r2, r3, #3
 800a828:	89bb      	ldrh	r3, [r7, #12]
 800a82a:	441a      	add	r2, r3
 800a82c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a82e:	429a      	cmp	r2, r3
 800a830:	d901      	bls.n	800a836 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800a832:	2300      	movs	r3, #0
 800a834:	e018      	b.n	800a868 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800a836:	6a3b      	ldr	r3, [r7, #32]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d007      	beq.n	800a84c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a83c:	8a7b      	ldrh	r3, [r7, #18]
 800a83e:	3303      	adds	r3, #3
 800a840:	f023 0303 	bic.w	r3, r3, #3
 800a844:	6a3a      	ldr	r2, [r7, #32]
 800a846:	4413      	add	r3, r2
 800a848:	617b      	str	r3, [r7, #20]
 800a84a:	e001      	b.n	800a850 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800a84c:	2300      	movs	r3, #0
 800a84e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	89b9      	ldrh	r1, [r7, #12]
 800a854:	89ba      	ldrh	r2, [r7, #12]
 800a856:	2302      	movs	r3, #2
 800a858:	9301      	str	r3, [sp, #4]
 800a85a:	897b      	ldrh	r3, [r7, #10]
 800a85c:	9300      	str	r3, [sp, #0]
 800a85e:	460b      	mov	r3, r1
 800a860:	6979      	ldr	r1, [r7, #20]
 800a862:	f7ff fe7d 	bl	800a560 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800a866:	687b      	ldr	r3, [r7, #4]
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3718      	adds	r7, #24
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	460b      	mov	r3, r1
 800a87a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d106      	bne.n	800a890 <pbuf_realloc+0x20>
 800a882:	4b3a      	ldr	r3, [pc, #232]	; (800a96c <pbuf_realloc+0xfc>)
 800a884:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a888:	4939      	ldr	r1, [pc, #228]	; (800a970 <pbuf_realloc+0x100>)
 800a88a:	483a      	ldr	r0, [pc, #232]	; (800a974 <pbuf_realloc+0x104>)
 800a88c:	f00a fe68 	bl	8015560 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	891b      	ldrh	r3, [r3, #8]
 800a894:	887a      	ldrh	r2, [r7, #2]
 800a896:	429a      	cmp	r2, r3
 800a898:	d263      	bcs.n	800a962 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	891a      	ldrh	r2, [r3, #8]
 800a89e:	887b      	ldrh	r3, [r7, #2]
 800a8a0:	1ad3      	subs	r3, r2, r3
 800a8a2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800a8a4:	887b      	ldrh	r3, [r7, #2]
 800a8a6:	817b      	strh	r3, [r7, #10]
  q = p;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800a8ac:	e018      	b.n	800a8e0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	895b      	ldrh	r3, [r3, #10]
 800a8b2:	897a      	ldrh	r2, [r7, #10]
 800a8b4:	1ad3      	subs	r3, r2, r3
 800a8b6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	891a      	ldrh	r2, [r3, #8]
 800a8bc:	893b      	ldrh	r3, [r7, #8]
 800a8be:	1ad3      	subs	r3, r2, r3
 800a8c0:	b29a      	uxth	r2, r3
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d106      	bne.n	800a8e0 <pbuf_realloc+0x70>
 800a8d2:	4b26      	ldr	r3, [pc, #152]	; (800a96c <pbuf_realloc+0xfc>)
 800a8d4:	f240 12af 	movw	r2, #431	; 0x1af
 800a8d8:	4927      	ldr	r1, [pc, #156]	; (800a978 <pbuf_realloc+0x108>)
 800a8da:	4826      	ldr	r0, [pc, #152]	; (800a974 <pbuf_realloc+0x104>)
 800a8dc:	f00a fe40 	bl	8015560 <iprintf>
  while (rem_len > q->len) {
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	895b      	ldrh	r3, [r3, #10]
 800a8e4:	897a      	ldrh	r2, [r7, #10]
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d8e1      	bhi.n	800a8ae <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	7b1b      	ldrb	r3, [r3, #12]
 800a8ee:	f003 030f 	and.w	r3, r3, #15
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d121      	bne.n	800a93a <pbuf_realloc+0xca>
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	895b      	ldrh	r3, [r3, #10]
 800a8fa:	897a      	ldrh	r2, [r7, #10]
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d01c      	beq.n	800a93a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	7b5b      	ldrb	r3, [r3, #13]
 800a904:	f003 0302 	and.w	r3, r3, #2
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d116      	bne.n	800a93a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	685a      	ldr	r2, [r3, #4]
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	1ad3      	subs	r3, r2, r3
 800a914:	b29a      	uxth	r2, r3
 800a916:	897b      	ldrh	r3, [r7, #10]
 800a918:	4413      	add	r3, r2
 800a91a:	b29b      	uxth	r3, r3
 800a91c:	4619      	mov	r1, r3
 800a91e:	68f8      	ldr	r0, [r7, #12]
 800a920:	f7fe ff58 	bl	80097d4 <mem_trim>
 800a924:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d106      	bne.n	800a93a <pbuf_realloc+0xca>
 800a92c:	4b0f      	ldr	r3, [pc, #60]	; (800a96c <pbuf_realloc+0xfc>)
 800a92e:	f240 12bd 	movw	r2, #445	; 0x1bd
 800a932:	4912      	ldr	r1, [pc, #72]	; (800a97c <pbuf_realloc+0x10c>)
 800a934:	480f      	ldr	r0, [pc, #60]	; (800a974 <pbuf_realloc+0x104>)
 800a936:	f00a fe13 	bl	8015560 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	897a      	ldrh	r2, [r7, #10]
 800a93e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	895a      	ldrh	r2, [r3, #10]
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d004      	beq.n	800a95a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4618      	mov	r0, r3
 800a956:	f000 f911 	bl	800ab7c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2200      	movs	r2, #0
 800a95e:	601a      	str	r2, [r3, #0]
 800a960:	e000      	b.n	800a964 <pbuf_realloc+0xf4>
    return;
 800a962:	bf00      	nop

}
 800a964:	3710      	adds	r7, #16
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}
 800a96a:	bf00      	nop
 800a96c:	08016d14 	.word	0x08016d14
 800a970:	08016e2c 	.word	0x08016e2c
 800a974:	08016d74 	.word	0x08016d74
 800a978:	08016e44 	.word	0x08016e44
 800a97c:	08016e5c 	.word	0x08016e5c

0800a980 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b086      	sub	sp, #24
 800a984:	af00      	add	r7, sp, #0
 800a986:	60f8      	str	r0, [r7, #12]
 800a988:	60b9      	str	r1, [r7, #8]
 800a98a:	4613      	mov	r3, r2
 800a98c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d106      	bne.n	800a9a2 <pbuf_add_header_impl+0x22>
 800a994:	4b2b      	ldr	r3, [pc, #172]	; (800aa44 <pbuf_add_header_impl+0xc4>)
 800a996:	f240 12df 	movw	r2, #479	; 0x1df
 800a99a:	492b      	ldr	r1, [pc, #172]	; (800aa48 <pbuf_add_header_impl+0xc8>)
 800a99c:	482b      	ldr	r0, [pc, #172]	; (800aa4c <pbuf_add_header_impl+0xcc>)
 800a99e:	f00a fddf 	bl	8015560 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d003      	beq.n	800a9b0 <pbuf_add_header_impl+0x30>
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9ae:	d301      	bcc.n	800a9b4 <pbuf_add_header_impl+0x34>
    return 1;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	e043      	b.n	800aa3c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d101      	bne.n	800a9be <pbuf_add_header_impl+0x3e>
    return 0;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	e03e      	b.n	800aa3c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	891a      	ldrh	r2, [r3, #8]
 800a9c6:	8a7b      	ldrh	r3, [r7, #18]
 800a9c8:	4413      	add	r3, r2
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	8a7a      	ldrh	r2, [r7, #18]
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d901      	bls.n	800a9d6 <pbuf_add_header_impl+0x56>
    return 1;
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	e032      	b.n	800aa3c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	7b1b      	ldrb	r3, [r3, #12]
 800a9da:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a9dc:	8a3b      	ldrh	r3, [r7, #16]
 800a9de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d00c      	beq.n	800aa00 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	685a      	ldr	r2, [r3, #4]
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	425b      	negs	r3, r3
 800a9ee:	4413      	add	r3, r2
 800a9f0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	3310      	adds	r3, #16
 800a9f6:	697a      	ldr	r2, [r7, #20]
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d20d      	bcs.n	800aa18 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	e01d      	b.n	800aa3c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800aa00:	79fb      	ldrb	r3, [r7, #7]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d006      	beq.n	800aa14 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	685a      	ldr	r2, [r3, #4]
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	425b      	negs	r3, r3
 800aa0e:	4413      	add	r3, r2
 800aa10:	617b      	str	r3, [r7, #20]
 800aa12:	e001      	b.n	800aa18 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800aa14:	2301      	movs	r3, #1
 800aa16:	e011      	b.n	800aa3c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	697a      	ldr	r2, [r7, #20]
 800aa1c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	895a      	ldrh	r2, [r3, #10]
 800aa22:	8a7b      	ldrh	r3, [r7, #18]
 800aa24:	4413      	add	r3, r2
 800aa26:	b29a      	uxth	r2, r3
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	891a      	ldrh	r2, [r3, #8]
 800aa30:	8a7b      	ldrh	r3, [r7, #18]
 800aa32:	4413      	add	r3, r2
 800aa34:	b29a      	uxth	r2, r3
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	811a      	strh	r2, [r3, #8]


  return 0;
 800aa3a:	2300      	movs	r3, #0
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3718      	adds	r7, #24
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}
 800aa44:	08016d14 	.word	0x08016d14
 800aa48:	08016e78 	.word	0x08016e78
 800aa4c:	08016d74 	.word	0x08016d74

0800aa50 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b082      	sub	sp, #8
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	6839      	ldr	r1, [r7, #0]
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f7ff ff8e 	bl	800a980 <pbuf_add_header_impl>
 800aa64:	4603      	mov	r3, r0
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3708      	adds	r7, #8
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}
	...

0800aa70 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b084      	sub	sp, #16
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d106      	bne.n	800aa8e <pbuf_remove_header+0x1e>
 800aa80:	4b20      	ldr	r3, [pc, #128]	; (800ab04 <pbuf_remove_header+0x94>)
 800aa82:	f240 224b 	movw	r2, #587	; 0x24b
 800aa86:	4920      	ldr	r1, [pc, #128]	; (800ab08 <pbuf_remove_header+0x98>)
 800aa88:	4820      	ldr	r0, [pc, #128]	; (800ab0c <pbuf_remove_header+0x9c>)
 800aa8a:	f00a fd69 	bl	8015560 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d003      	beq.n	800aa9c <pbuf_remove_header+0x2c>
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa9a:	d301      	bcc.n	800aaa0 <pbuf_remove_header+0x30>
    return 1;
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	e02c      	b.n	800aafa <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d101      	bne.n	800aaaa <pbuf_remove_header+0x3a>
    return 0;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	e027      	b.n	800aafa <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	895b      	ldrh	r3, [r3, #10]
 800aab2:	89fa      	ldrh	r2, [r7, #14]
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d908      	bls.n	800aaca <pbuf_remove_header+0x5a>
 800aab8:	4b12      	ldr	r3, [pc, #72]	; (800ab04 <pbuf_remove_header+0x94>)
 800aaba:	f240 2255 	movw	r2, #597	; 0x255
 800aabe:	4914      	ldr	r1, [pc, #80]	; (800ab10 <pbuf_remove_header+0xa0>)
 800aac0:	4812      	ldr	r0, [pc, #72]	; (800ab0c <pbuf_remove_header+0x9c>)
 800aac2:	f00a fd4d 	bl	8015560 <iprintf>
 800aac6:	2301      	movs	r3, #1
 800aac8:	e017      	b.n	800aafa <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	685a      	ldr	r2, [r3, #4]
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	441a      	add	r2, r3
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	895a      	ldrh	r2, [r3, #10]
 800aae0:	89fb      	ldrh	r3, [r7, #14]
 800aae2:	1ad3      	subs	r3, r2, r3
 800aae4:	b29a      	uxth	r2, r3
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	891a      	ldrh	r2, [r3, #8]
 800aaee:	89fb      	ldrh	r3, [r7, #14]
 800aaf0:	1ad3      	subs	r3, r2, r3
 800aaf2:	b29a      	uxth	r2, r3
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800aaf8:	2300      	movs	r3, #0
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3710      	adds	r7, #16
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
 800ab02:	bf00      	nop
 800ab04:	08016d14 	.word	0x08016d14
 800ab08:	08016e78 	.word	0x08016e78
 800ab0c:	08016d74 	.word	0x08016d74
 800ab10:	08016e84 	.word	0x08016e84

0800ab14 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b082      	sub	sp, #8
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	807b      	strh	r3, [r7, #2]
 800ab20:	4613      	mov	r3, r2
 800ab22:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800ab24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	da08      	bge.n	800ab3e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ab2c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ab30:	425b      	negs	r3, r3
 800ab32:	4619      	mov	r1, r3
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f7ff ff9b 	bl	800aa70 <pbuf_remove_header>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	e007      	b.n	800ab4e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ab3e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ab42:	787a      	ldrb	r2, [r7, #1]
 800ab44:	4619      	mov	r1, r3
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f7ff ff1a 	bl	800a980 <pbuf_add_header_impl>
 800ab4c:	4603      	mov	r3, r0
  }
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3708      	adds	r7, #8
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}

0800ab56 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ab56:	b580      	push	{r7, lr}
 800ab58:	b082      	sub	sp, #8
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	6078      	str	r0, [r7, #4]
 800ab5e:	460b      	mov	r3, r1
 800ab60:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ab62:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ab66:	2201      	movs	r2, #1
 800ab68:	4619      	mov	r1, r3
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f7ff ffd2 	bl	800ab14 <pbuf_header_impl>
 800ab70:	4603      	mov	r3, r0
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3708      	adds	r7, #8
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
	...

0800ab7c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b088      	sub	sp, #32
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d10b      	bne.n	800aba2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d106      	bne.n	800ab9e <pbuf_free+0x22>
 800ab90:	4b3b      	ldr	r3, [pc, #236]	; (800ac80 <pbuf_free+0x104>)
 800ab92:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800ab96:	493b      	ldr	r1, [pc, #236]	; (800ac84 <pbuf_free+0x108>)
 800ab98:	483b      	ldr	r0, [pc, #236]	; (800ac88 <pbuf_free+0x10c>)
 800ab9a:	f00a fce1 	bl	8015560 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	e069      	b.n	800ac76 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800aba2:	2300      	movs	r3, #0
 800aba4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800aba6:	e062      	b.n	800ac6e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800aba8:	f00a fc72 	bl	8015490 <sys_arch_protect>
 800abac:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	7b9b      	ldrb	r3, [r3, #14]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d106      	bne.n	800abc4 <pbuf_free+0x48>
 800abb6:	4b32      	ldr	r3, [pc, #200]	; (800ac80 <pbuf_free+0x104>)
 800abb8:	f240 22f1 	movw	r2, #753	; 0x2f1
 800abbc:	4933      	ldr	r1, [pc, #204]	; (800ac8c <pbuf_free+0x110>)
 800abbe:	4832      	ldr	r0, [pc, #200]	; (800ac88 <pbuf_free+0x10c>)
 800abc0:	f00a fcce 	bl	8015560 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	7b9b      	ldrb	r3, [r3, #14]
 800abc8:	3b01      	subs	r3, #1
 800abca:	b2da      	uxtb	r2, r3
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	739a      	strb	r2, [r3, #14]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	7b9b      	ldrb	r3, [r3, #14]
 800abd4:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800abd6:	69b8      	ldr	r0, [r7, #24]
 800abd8:	f00a fc68 	bl	80154ac <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800abdc:	7dfb      	ldrb	r3, [r7, #23]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d143      	bne.n	800ac6a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	7b1b      	ldrb	r3, [r3, #12]
 800abec:	f003 030f 	and.w	r3, r3, #15
 800abf0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	7b5b      	ldrb	r3, [r3, #13]
 800abf6:	f003 0302 	and.w	r3, r3, #2
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d011      	beq.n	800ac22 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	691b      	ldr	r3, [r3, #16]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d106      	bne.n	800ac18 <pbuf_free+0x9c>
 800ac0a:	4b1d      	ldr	r3, [pc, #116]	; (800ac80 <pbuf_free+0x104>)
 800ac0c:	f240 22ff 	movw	r2, #767	; 0x2ff
 800ac10:	491f      	ldr	r1, [pc, #124]	; (800ac90 <pbuf_free+0x114>)
 800ac12:	481d      	ldr	r0, [pc, #116]	; (800ac88 <pbuf_free+0x10c>)
 800ac14:	f00a fca4 	bl	8015560 <iprintf>
        pc->custom_free_function(p);
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	691b      	ldr	r3, [r3, #16]
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	4798      	blx	r3
 800ac20:	e01d      	b.n	800ac5e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800ac22:	7bfb      	ldrb	r3, [r7, #15]
 800ac24:	2b02      	cmp	r3, #2
 800ac26:	d104      	bne.n	800ac32 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800ac28:	6879      	ldr	r1, [r7, #4]
 800ac2a:	200c      	movs	r0, #12
 800ac2c:	f7ff f8f6 	bl	8009e1c <memp_free>
 800ac30:	e015      	b.n	800ac5e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800ac32:	7bfb      	ldrb	r3, [r7, #15]
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	d104      	bne.n	800ac42 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800ac38:	6879      	ldr	r1, [r7, #4]
 800ac3a:	200b      	movs	r0, #11
 800ac3c:	f7ff f8ee 	bl	8009e1c <memp_free>
 800ac40:	e00d      	b.n	800ac5e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800ac42:	7bfb      	ldrb	r3, [r7, #15]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d103      	bne.n	800ac50 <pbuf_free+0xd4>
          mem_free(p);
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f7fe fd33 	bl	80096b4 <mem_free>
 800ac4e:	e006      	b.n	800ac5e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800ac50:	4b0b      	ldr	r3, [pc, #44]	; (800ac80 <pbuf_free+0x104>)
 800ac52:	f240 320f 	movw	r2, #783	; 0x30f
 800ac56:	490f      	ldr	r1, [pc, #60]	; (800ac94 <pbuf_free+0x118>)
 800ac58:	480b      	ldr	r0, [pc, #44]	; (800ac88 <pbuf_free+0x10c>)
 800ac5a:	f00a fc81 	bl	8015560 <iprintf>
        }
      }
      count++;
 800ac5e:	7ffb      	ldrb	r3, [r7, #31]
 800ac60:	3301      	adds	r3, #1
 800ac62:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	607b      	str	r3, [r7, #4]
 800ac68:	e001      	b.n	800ac6e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d199      	bne.n	800aba8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ac74:	7ffb      	ldrb	r3, [r7, #31]
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3720      	adds	r7, #32
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	08016d14 	.word	0x08016d14
 800ac84:	08016e78 	.word	0x08016e78
 800ac88:	08016d74 	.word	0x08016d74
 800ac8c:	08016ea4 	.word	0x08016ea4
 800ac90:	08016ebc 	.word	0x08016ebc
 800ac94:	08016ee0 	.word	0x08016ee0

0800ac98 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b085      	sub	sp, #20
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800aca0:	2300      	movs	r3, #0
 800aca2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800aca4:	e005      	b.n	800acb2 <pbuf_clen+0x1a>
    ++len;
 800aca6:	89fb      	ldrh	r3, [r7, #14]
 800aca8:	3301      	adds	r3, #1
 800acaa:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d1f6      	bne.n	800aca6 <pbuf_clen+0xe>
  }
  return len;
 800acb8:	89fb      	ldrh	r3, [r7, #14]
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3714      	adds	r7, #20
 800acbe:	46bd      	mov	sp, r7
 800acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc4:	4770      	bx	lr
	...

0800acc8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b084      	sub	sp, #16
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d016      	beq.n	800ad04 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800acd6:	f00a fbdb 	bl	8015490 <sys_arch_protect>
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	7b9b      	ldrb	r3, [r3, #14]
 800ace0:	3301      	adds	r3, #1
 800ace2:	b2da      	uxtb	r2, r3
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	739a      	strb	r2, [r3, #14]
 800ace8:	68f8      	ldr	r0, [r7, #12]
 800acea:	f00a fbdf 	bl	80154ac <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	7b9b      	ldrb	r3, [r3, #14]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d106      	bne.n	800ad04 <pbuf_ref+0x3c>
 800acf6:	4b05      	ldr	r3, [pc, #20]	; (800ad0c <pbuf_ref+0x44>)
 800acf8:	f240 3242 	movw	r2, #834	; 0x342
 800acfc:	4904      	ldr	r1, [pc, #16]	; (800ad10 <pbuf_ref+0x48>)
 800acfe:	4805      	ldr	r0, [pc, #20]	; (800ad14 <pbuf_ref+0x4c>)
 800ad00:	f00a fc2e 	bl	8015560 <iprintf>
  }
}
 800ad04:	bf00      	nop
 800ad06:	3710      	adds	r7, #16
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}
 800ad0c:	08016d14 	.word	0x08016d14
 800ad10:	08016ef4 	.word	0x08016ef4
 800ad14:	08016d74 	.word	0x08016d74

0800ad18 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b084      	sub	sp, #16
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d002      	beq.n	800ad2e <pbuf_cat+0x16>
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d107      	bne.n	800ad3e <pbuf_cat+0x26>
 800ad2e:	4b20      	ldr	r3, [pc, #128]	; (800adb0 <pbuf_cat+0x98>)
 800ad30:	f240 3259 	movw	r2, #857	; 0x359
 800ad34:	491f      	ldr	r1, [pc, #124]	; (800adb4 <pbuf_cat+0x9c>)
 800ad36:	4820      	ldr	r0, [pc, #128]	; (800adb8 <pbuf_cat+0xa0>)
 800ad38:	f00a fc12 	bl	8015560 <iprintf>
 800ad3c:	e034      	b.n	800ada8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	60fb      	str	r3, [r7, #12]
 800ad42:	e00a      	b.n	800ad5a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	891a      	ldrh	r2, [r3, #8]
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	891b      	ldrh	r3, [r3, #8]
 800ad4c:	4413      	add	r3, r2
 800ad4e:	b29a      	uxth	r2, r3
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	60fb      	str	r3, [r7, #12]
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d1f0      	bne.n	800ad44 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	891a      	ldrh	r2, [r3, #8]
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	895b      	ldrh	r3, [r3, #10]
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d006      	beq.n	800ad7c <pbuf_cat+0x64>
 800ad6e:	4b10      	ldr	r3, [pc, #64]	; (800adb0 <pbuf_cat+0x98>)
 800ad70:	f240 3262 	movw	r2, #866	; 0x362
 800ad74:	4911      	ldr	r1, [pc, #68]	; (800adbc <pbuf_cat+0xa4>)
 800ad76:	4810      	ldr	r0, [pc, #64]	; (800adb8 <pbuf_cat+0xa0>)
 800ad78:	f00a fbf2 	bl	8015560 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d006      	beq.n	800ad92 <pbuf_cat+0x7a>
 800ad84:	4b0a      	ldr	r3, [pc, #40]	; (800adb0 <pbuf_cat+0x98>)
 800ad86:	f240 3263 	movw	r2, #867	; 0x363
 800ad8a:	490d      	ldr	r1, [pc, #52]	; (800adc0 <pbuf_cat+0xa8>)
 800ad8c:	480a      	ldr	r0, [pc, #40]	; (800adb8 <pbuf_cat+0xa0>)
 800ad8e:	f00a fbe7 	bl	8015560 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	891a      	ldrh	r2, [r3, #8]
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	891b      	ldrh	r3, [r3, #8]
 800ad9a:	4413      	add	r3, r2
 800ad9c:	b29a      	uxth	r2, r3
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	683a      	ldr	r2, [r7, #0]
 800ada6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ada8:	3710      	adds	r7, #16
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}
 800adae:	bf00      	nop
 800adb0:	08016d14 	.word	0x08016d14
 800adb4:	08016f08 	.word	0x08016f08
 800adb8:	08016d74 	.word	0x08016d74
 800adbc:	08016f40 	.word	0x08016f40
 800adc0:	08016f70 	.word	0x08016f70

0800adc4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b082      	sub	sp, #8
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
 800adcc:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800adce:	6839      	ldr	r1, [r7, #0]
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f7ff ffa1 	bl	800ad18 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800add6:	6838      	ldr	r0, [r7, #0]
 800add8:	f7ff ff76 	bl	800acc8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800addc:	bf00      	nop
 800adde:	3708      	adds	r7, #8
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b086      	sub	sp, #24
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800adee:	2300      	movs	r3, #0
 800adf0:	617b      	str	r3, [r7, #20]
 800adf2:	2300      	movs	r3, #0
 800adf4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d008      	beq.n	800ae0e <pbuf_copy+0x2a>
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d005      	beq.n	800ae0e <pbuf_copy+0x2a>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	891a      	ldrh	r2, [r3, #8]
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	891b      	ldrh	r3, [r3, #8]
 800ae0a:	429a      	cmp	r2, r3
 800ae0c:	d209      	bcs.n	800ae22 <pbuf_copy+0x3e>
 800ae0e:	4b57      	ldr	r3, [pc, #348]	; (800af6c <pbuf_copy+0x188>)
 800ae10:	f240 32c9 	movw	r2, #969	; 0x3c9
 800ae14:	4956      	ldr	r1, [pc, #344]	; (800af70 <pbuf_copy+0x18c>)
 800ae16:	4857      	ldr	r0, [pc, #348]	; (800af74 <pbuf_copy+0x190>)
 800ae18:	f00a fba2 	bl	8015560 <iprintf>
 800ae1c:	f06f 030f 	mvn.w	r3, #15
 800ae20:	e09f      	b.n	800af62 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	895b      	ldrh	r3, [r3, #10]
 800ae26:	461a      	mov	r2, r3
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	1ad2      	subs	r2, r2, r3
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	895b      	ldrh	r3, [r3, #10]
 800ae30:	4619      	mov	r1, r3
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	1acb      	subs	r3, r1, r3
 800ae36:	429a      	cmp	r2, r3
 800ae38:	d306      	bcc.n	800ae48 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	895b      	ldrh	r3, [r3, #10]
 800ae3e:	461a      	mov	r2, r3
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	1ad3      	subs	r3, r2, r3
 800ae44:	60fb      	str	r3, [r7, #12]
 800ae46:	e005      	b.n	800ae54 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	895b      	ldrh	r3, [r3, #10]
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	1ad3      	subs	r3, r2, r3
 800ae52:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	685a      	ldr	r2, [r3, #4]
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	18d0      	adds	r0, r2, r3
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	685a      	ldr	r2, [r3, #4]
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	4413      	add	r3, r2
 800ae64:	68fa      	ldr	r2, [r7, #12]
 800ae66:	4619      	mov	r1, r3
 800ae68:	f00a fb64 	bl	8015534 <memcpy>
    offset_to += len;
 800ae6c:	697a      	ldr	r2, [r7, #20]
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	4413      	add	r3, r2
 800ae72:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800ae74:	693a      	ldr	r2, [r7, #16]
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	4413      	add	r3, r2
 800ae7a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	895b      	ldrh	r3, [r3, #10]
 800ae80:	461a      	mov	r2, r3
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d906      	bls.n	800ae96 <pbuf_copy+0xb2>
 800ae88:	4b38      	ldr	r3, [pc, #224]	; (800af6c <pbuf_copy+0x188>)
 800ae8a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800ae8e:	493a      	ldr	r1, [pc, #232]	; (800af78 <pbuf_copy+0x194>)
 800ae90:	4838      	ldr	r0, [pc, #224]	; (800af74 <pbuf_copy+0x190>)
 800ae92:	f00a fb65 	bl	8015560 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	895b      	ldrh	r3, [r3, #10]
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d906      	bls.n	800aeb0 <pbuf_copy+0xcc>
 800aea2:	4b32      	ldr	r3, [pc, #200]	; (800af6c <pbuf_copy+0x188>)
 800aea4:	f240 32da 	movw	r2, #986	; 0x3da
 800aea8:	4934      	ldr	r1, [pc, #208]	; (800af7c <pbuf_copy+0x198>)
 800aeaa:	4832      	ldr	r0, [pc, #200]	; (800af74 <pbuf_copy+0x190>)
 800aeac:	f00a fb58 	bl	8015560 <iprintf>
    if (offset_from >= p_from->len) {
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	895b      	ldrh	r3, [r3, #10]
 800aeb4:	461a      	mov	r2, r3
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	4293      	cmp	r3, r2
 800aeba:	d304      	bcc.n	800aec6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800aebc:	2300      	movs	r3, #0
 800aebe:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	895b      	ldrh	r3, [r3, #10]
 800aeca:	461a      	mov	r2, r3
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	4293      	cmp	r3, r2
 800aed0:	d114      	bne.n	800aefc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800aed2:	2300      	movs	r3, #0
 800aed4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d10c      	bne.n	800aefc <pbuf_copy+0x118>
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d009      	beq.n	800aefc <pbuf_copy+0x118>
 800aee8:	4b20      	ldr	r3, [pc, #128]	; (800af6c <pbuf_copy+0x188>)
 800aeea:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800aeee:	4924      	ldr	r1, [pc, #144]	; (800af80 <pbuf_copy+0x19c>)
 800aef0:	4820      	ldr	r0, [pc, #128]	; (800af74 <pbuf_copy+0x190>)
 800aef2:	f00a fb35 	bl	8015560 <iprintf>
 800aef6:	f06f 030f 	mvn.w	r3, #15
 800aefa:	e032      	b.n	800af62 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d013      	beq.n	800af2a <pbuf_copy+0x146>
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	895a      	ldrh	r2, [r3, #10]
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	891b      	ldrh	r3, [r3, #8]
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d10d      	bne.n	800af2a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d009      	beq.n	800af2a <pbuf_copy+0x146>
 800af16:	4b15      	ldr	r3, [pc, #84]	; (800af6c <pbuf_copy+0x188>)
 800af18:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800af1c:	4919      	ldr	r1, [pc, #100]	; (800af84 <pbuf_copy+0x1a0>)
 800af1e:	4815      	ldr	r0, [pc, #84]	; (800af74 <pbuf_copy+0x190>)
 800af20:	f00a fb1e 	bl	8015560 <iprintf>
 800af24:	f06f 0305 	mvn.w	r3, #5
 800af28:	e01b      	b.n	800af62 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d013      	beq.n	800af58 <pbuf_copy+0x174>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	895a      	ldrh	r2, [r3, #10]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	891b      	ldrh	r3, [r3, #8]
 800af38:	429a      	cmp	r2, r3
 800af3a:	d10d      	bne.n	800af58 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d009      	beq.n	800af58 <pbuf_copy+0x174>
 800af44:	4b09      	ldr	r3, [pc, #36]	; (800af6c <pbuf_copy+0x188>)
 800af46:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800af4a:	490e      	ldr	r1, [pc, #56]	; (800af84 <pbuf_copy+0x1a0>)
 800af4c:	4809      	ldr	r0, [pc, #36]	; (800af74 <pbuf_copy+0x190>)
 800af4e:	f00a fb07 	bl	8015560 <iprintf>
 800af52:	f06f 0305 	mvn.w	r3, #5
 800af56:	e004      	b.n	800af62 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	f47f af61 	bne.w	800ae22 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800af60:	2300      	movs	r3, #0
}
 800af62:	4618      	mov	r0, r3
 800af64:	3718      	adds	r7, #24
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}
 800af6a:	bf00      	nop
 800af6c:	08016d14 	.word	0x08016d14
 800af70:	08016fbc 	.word	0x08016fbc
 800af74:	08016d74 	.word	0x08016d74
 800af78:	08016fec 	.word	0x08016fec
 800af7c:	08017004 	.word	0x08017004
 800af80:	08017020 	.word	0x08017020
 800af84:	08017030 	.word	0x08017030

0800af88 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b088      	sub	sp, #32
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	60b9      	str	r1, [r7, #8]
 800af92:	4611      	mov	r1, r2
 800af94:	461a      	mov	r2, r3
 800af96:	460b      	mov	r3, r1
 800af98:	80fb      	strh	r3, [r7, #6]
 800af9a:	4613      	mov	r3, r2
 800af9c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800af9e:	2300      	movs	r3, #0
 800afa0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800afa2:	2300      	movs	r3, #0
 800afa4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d108      	bne.n	800afbe <pbuf_copy_partial+0x36>
 800afac:	4b2b      	ldr	r3, [pc, #172]	; (800b05c <pbuf_copy_partial+0xd4>)
 800afae:	f240 420a 	movw	r2, #1034	; 0x40a
 800afb2:	492b      	ldr	r1, [pc, #172]	; (800b060 <pbuf_copy_partial+0xd8>)
 800afb4:	482b      	ldr	r0, [pc, #172]	; (800b064 <pbuf_copy_partial+0xdc>)
 800afb6:	f00a fad3 	bl	8015560 <iprintf>
 800afba:	2300      	movs	r3, #0
 800afbc:	e04a      	b.n	800b054 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d108      	bne.n	800afd6 <pbuf_copy_partial+0x4e>
 800afc4:	4b25      	ldr	r3, [pc, #148]	; (800b05c <pbuf_copy_partial+0xd4>)
 800afc6:	f240 420b 	movw	r2, #1035	; 0x40b
 800afca:	4927      	ldr	r1, [pc, #156]	; (800b068 <pbuf_copy_partial+0xe0>)
 800afcc:	4825      	ldr	r0, [pc, #148]	; (800b064 <pbuf_copy_partial+0xdc>)
 800afce:	f00a fac7 	bl	8015560 <iprintf>
 800afd2:	2300      	movs	r3, #0
 800afd4:	e03e      	b.n	800b054 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	61fb      	str	r3, [r7, #28]
 800afda:	e034      	b.n	800b046 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800afdc:	88bb      	ldrh	r3, [r7, #4]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d00a      	beq.n	800aff8 <pbuf_copy_partial+0x70>
 800afe2:	69fb      	ldr	r3, [r7, #28]
 800afe4:	895b      	ldrh	r3, [r3, #10]
 800afe6:	88ba      	ldrh	r2, [r7, #4]
 800afe8:	429a      	cmp	r2, r3
 800afea:	d305      	bcc.n	800aff8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800afec:	69fb      	ldr	r3, [r7, #28]
 800afee:	895b      	ldrh	r3, [r3, #10]
 800aff0:	88ba      	ldrh	r2, [r7, #4]
 800aff2:	1ad3      	subs	r3, r2, r3
 800aff4:	80bb      	strh	r3, [r7, #4]
 800aff6:	e023      	b.n	800b040 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800aff8:	69fb      	ldr	r3, [r7, #28]
 800affa:	895a      	ldrh	r2, [r3, #10]
 800affc:	88bb      	ldrh	r3, [r7, #4]
 800affe:	1ad3      	subs	r3, r2, r3
 800b000:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800b002:	8b3a      	ldrh	r2, [r7, #24]
 800b004:	88fb      	ldrh	r3, [r7, #6]
 800b006:	429a      	cmp	r2, r3
 800b008:	d901      	bls.n	800b00e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800b00a:	88fb      	ldrh	r3, [r7, #6]
 800b00c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800b00e:	8b7b      	ldrh	r3, [r7, #26]
 800b010:	68ba      	ldr	r2, [r7, #8]
 800b012:	18d0      	adds	r0, r2, r3
 800b014:	69fb      	ldr	r3, [r7, #28]
 800b016:	685a      	ldr	r2, [r3, #4]
 800b018:	88bb      	ldrh	r3, [r7, #4]
 800b01a:	4413      	add	r3, r2
 800b01c:	8b3a      	ldrh	r2, [r7, #24]
 800b01e:	4619      	mov	r1, r3
 800b020:	f00a fa88 	bl	8015534 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800b024:	8afa      	ldrh	r2, [r7, #22]
 800b026:	8b3b      	ldrh	r3, [r7, #24]
 800b028:	4413      	add	r3, r2
 800b02a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800b02c:	8b7a      	ldrh	r2, [r7, #26]
 800b02e:	8b3b      	ldrh	r3, [r7, #24]
 800b030:	4413      	add	r3, r2
 800b032:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800b034:	88fa      	ldrh	r2, [r7, #6]
 800b036:	8b3b      	ldrh	r3, [r7, #24]
 800b038:	1ad3      	subs	r3, r2, r3
 800b03a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800b03c:	2300      	movs	r3, #0
 800b03e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b040:	69fb      	ldr	r3, [r7, #28]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	61fb      	str	r3, [r7, #28]
 800b046:	88fb      	ldrh	r3, [r7, #6]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d002      	beq.n	800b052 <pbuf_copy_partial+0xca>
 800b04c:	69fb      	ldr	r3, [r7, #28]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d1c4      	bne.n	800afdc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800b052:	8afb      	ldrh	r3, [r7, #22]
}
 800b054:	4618      	mov	r0, r3
 800b056:	3720      	adds	r7, #32
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}
 800b05c:	08016d14 	.word	0x08016d14
 800b060:	0801705c 	.word	0x0801705c
 800b064:	08016d74 	.word	0x08016d74
 800b068:	0801707c 	.word	0x0801707c

0800b06c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b084      	sub	sp, #16
 800b070:	af00      	add	r7, sp, #0
 800b072:	4603      	mov	r3, r0
 800b074:	603a      	str	r2, [r7, #0]
 800b076:	71fb      	strb	r3, [r7, #7]
 800b078:	460b      	mov	r3, r1
 800b07a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	8919      	ldrh	r1, [r3, #8]
 800b080:	88ba      	ldrh	r2, [r7, #4]
 800b082:	79fb      	ldrb	r3, [r7, #7]
 800b084:	4618      	mov	r0, r3
 800b086:	f7ff fa95 	bl	800a5b4 <pbuf_alloc>
 800b08a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d101      	bne.n	800b096 <pbuf_clone+0x2a>
    return NULL;
 800b092:	2300      	movs	r3, #0
 800b094:	e011      	b.n	800b0ba <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800b096:	6839      	ldr	r1, [r7, #0]
 800b098:	68f8      	ldr	r0, [r7, #12]
 800b09a:	f7ff fea3 	bl	800ade4 <pbuf_copy>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800b0a2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d006      	beq.n	800b0b8 <pbuf_clone+0x4c>
 800b0aa:	4b06      	ldr	r3, [pc, #24]	; (800b0c4 <pbuf_clone+0x58>)
 800b0ac:	f240 5224 	movw	r2, #1316	; 0x524
 800b0b0:	4905      	ldr	r1, [pc, #20]	; (800b0c8 <pbuf_clone+0x5c>)
 800b0b2:	4806      	ldr	r0, [pc, #24]	; (800b0cc <pbuf_clone+0x60>)
 800b0b4:	f00a fa54 	bl	8015560 <iprintf>
  return q;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3710      	adds	r7, #16
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}
 800b0c2:	bf00      	nop
 800b0c4:	08016d14 	.word	0x08016d14
 800b0c8:	08017188 	.word	0x08017188
 800b0cc:	08016d74 	.word	0x08016d74

0800b0d0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b0d4:	f00a fa5c 	bl	8015590 <rand>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	b29b      	uxth	r3, r3
 800b0dc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b0e6:	b29a      	uxth	r2, r3
 800b0e8:	4b01      	ldr	r3, [pc, #4]	; (800b0f0 <tcp_init+0x20>)
 800b0ea:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b0ec:	bf00      	nop
 800b0ee:	bd80      	pop	{r7, pc}
 800b0f0:	20000024 	.word	0x20000024

0800b0f4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b082      	sub	sp, #8
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	7d1b      	ldrb	r3, [r3, #20]
 800b100:	2b01      	cmp	r3, #1
 800b102:	d105      	bne.n	800b110 <tcp_free+0x1c>
 800b104:	4b06      	ldr	r3, [pc, #24]	; (800b120 <tcp_free+0x2c>)
 800b106:	22d4      	movs	r2, #212	; 0xd4
 800b108:	4906      	ldr	r1, [pc, #24]	; (800b124 <tcp_free+0x30>)
 800b10a:	4807      	ldr	r0, [pc, #28]	; (800b128 <tcp_free+0x34>)
 800b10c:	f00a fa28 	bl	8015560 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800b110:	6879      	ldr	r1, [r7, #4]
 800b112:	2001      	movs	r0, #1
 800b114:	f7fe fe82 	bl	8009e1c <memp_free>
}
 800b118:	bf00      	nop
 800b11a:	3708      	adds	r7, #8
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}
 800b120:	08017214 	.word	0x08017214
 800b124:	08017244 	.word	0x08017244
 800b128:	08017258 	.word	0x08017258

0800b12c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b082      	sub	sp, #8
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	7d1b      	ldrb	r3, [r3, #20]
 800b138:	2b01      	cmp	r3, #1
 800b13a:	d105      	bne.n	800b148 <tcp_free_listen+0x1c>
 800b13c:	4b06      	ldr	r3, [pc, #24]	; (800b158 <tcp_free_listen+0x2c>)
 800b13e:	22df      	movs	r2, #223	; 0xdf
 800b140:	4906      	ldr	r1, [pc, #24]	; (800b15c <tcp_free_listen+0x30>)
 800b142:	4807      	ldr	r0, [pc, #28]	; (800b160 <tcp_free_listen+0x34>)
 800b144:	f00a fa0c 	bl	8015560 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800b148:	6879      	ldr	r1, [r7, #4]
 800b14a:	2002      	movs	r0, #2
 800b14c:	f7fe fe66 	bl	8009e1c <memp_free>
}
 800b150:	bf00      	nop
 800b152:	3708      	adds	r7, #8
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}
 800b158:	08017214 	.word	0x08017214
 800b15c:	08017280 	.word	0x08017280
 800b160:	08017258 	.word	0x08017258

0800b164 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800b168:	f000 fea2 	bl	800beb0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800b16c:	4b07      	ldr	r3, [pc, #28]	; (800b18c <tcp_tmr+0x28>)
 800b16e:	781b      	ldrb	r3, [r3, #0]
 800b170:	3301      	adds	r3, #1
 800b172:	b2da      	uxtb	r2, r3
 800b174:	4b05      	ldr	r3, [pc, #20]	; (800b18c <tcp_tmr+0x28>)
 800b176:	701a      	strb	r2, [r3, #0]
 800b178:	4b04      	ldr	r3, [pc, #16]	; (800b18c <tcp_tmr+0x28>)
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	f003 0301 	and.w	r3, r3, #1
 800b180:	2b00      	cmp	r3, #0
 800b182:	d001      	beq.n	800b188 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800b184:	f000 fb54 	bl	800b830 <tcp_slowtmr>
  }
}
 800b188:	bf00      	nop
 800b18a:	bd80      	pop	{r7, pc}
 800b18c:	2000d38d 	.word	0x2000d38d

0800b190 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b084      	sub	sp, #16
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d105      	bne.n	800b1ac <tcp_remove_listener+0x1c>
 800b1a0:	4b0d      	ldr	r3, [pc, #52]	; (800b1d8 <tcp_remove_listener+0x48>)
 800b1a2:	22ff      	movs	r2, #255	; 0xff
 800b1a4:	490d      	ldr	r1, [pc, #52]	; (800b1dc <tcp_remove_listener+0x4c>)
 800b1a6:	480e      	ldr	r0, [pc, #56]	; (800b1e0 <tcp_remove_listener+0x50>)
 800b1a8:	f00a f9da 	bl	8015560 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	60fb      	str	r3, [r7, #12]
 800b1b0:	e00a      	b.n	800b1c8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1b6:	683a      	ldr	r2, [r7, #0]
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d102      	bne.n	800b1c2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	68db      	ldr	r3, [r3, #12]
 800b1c6:	60fb      	str	r3, [r7, #12]
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d1f1      	bne.n	800b1b2 <tcp_remove_listener+0x22>
    }
  }
}
 800b1ce:	bf00      	nop
 800b1d0:	bf00      	nop
 800b1d2:	3710      	adds	r7, #16
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}
 800b1d8:	08017214 	.word	0x08017214
 800b1dc:	0801729c 	.word	0x0801729c
 800b1e0:	08017258 	.word	0x08017258

0800b1e4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b084      	sub	sp, #16
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d106      	bne.n	800b200 <tcp_listen_closed+0x1c>
 800b1f2:	4b14      	ldr	r3, [pc, #80]	; (800b244 <tcp_listen_closed+0x60>)
 800b1f4:	f240 1211 	movw	r2, #273	; 0x111
 800b1f8:	4913      	ldr	r1, [pc, #76]	; (800b248 <tcp_listen_closed+0x64>)
 800b1fa:	4814      	ldr	r0, [pc, #80]	; (800b24c <tcp_listen_closed+0x68>)
 800b1fc:	f00a f9b0 	bl	8015560 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	7d1b      	ldrb	r3, [r3, #20]
 800b204:	2b01      	cmp	r3, #1
 800b206:	d006      	beq.n	800b216 <tcp_listen_closed+0x32>
 800b208:	4b0e      	ldr	r3, [pc, #56]	; (800b244 <tcp_listen_closed+0x60>)
 800b20a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800b20e:	4910      	ldr	r1, [pc, #64]	; (800b250 <tcp_listen_closed+0x6c>)
 800b210:	480e      	ldr	r0, [pc, #56]	; (800b24c <tcp_listen_closed+0x68>)
 800b212:	f00a f9a5 	bl	8015560 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b216:	2301      	movs	r3, #1
 800b218:	60fb      	str	r3, [r7, #12]
 800b21a:	e00b      	b.n	800b234 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800b21c:	4a0d      	ldr	r2, [pc, #52]	; (800b254 <tcp_listen_closed+0x70>)
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	6879      	ldr	r1, [r7, #4]
 800b228:	4618      	mov	r0, r3
 800b22a:	f7ff ffb1 	bl	800b190 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	3301      	adds	r3, #1
 800b232:	60fb      	str	r3, [r7, #12]
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2b03      	cmp	r3, #3
 800b238:	d9f0      	bls.n	800b21c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800b23a:	bf00      	nop
 800b23c:	bf00      	nop
 800b23e:	3710      	adds	r7, #16
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}
 800b244:	08017214 	.word	0x08017214
 800b248:	080172c4 	.word	0x080172c4
 800b24c:	08017258 	.word	0x08017258
 800b250:	080172d0 	.word	0x080172d0
 800b254:	080195f8 	.word	0x080195f8

0800b258 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800b258:	b5b0      	push	{r4, r5, r7, lr}
 800b25a:	b088      	sub	sp, #32
 800b25c:	af04      	add	r7, sp, #16
 800b25e:	6078      	str	r0, [r7, #4]
 800b260:	460b      	mov	r3, r1
 800b262:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d106      	bne.n	800b278 <tcp_close_shutdown+0x20>
 800b26a:	4b63      	ldr	r3, [pc, #396]	; (800b3f8 <tcp_close_shutdown+0x1a0>)
 800b26c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800b270:	4962      	ldr	r1, [pc, #392]	; (800b3fc <tcp_close_shutdown+0x1a4>)
 800b272:	4863      	ldr	r0, [pc, #396]	; (800b400 <tcp_close_shutdown+0x1a8>)
 800b274:	f00a f974 	bl	8015560 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800b278:	78fb      	ldrb	r3, [r7, #3]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d066      	beq.n	800b34c <tcp_close_shutdown+0xf4>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	7d1b      	ldrb	r3, [r3, #20]
 800b282:	2b04      	cmp	r3, #4
 800b284:	d003      	beq.n	800b28e <tcp_close_shutdown+0x36>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	7d1b      	ldrb	r3, [r3, #20]
 800b28a:	2b07      	cmp	r3, #7
 800b28c:	d15e      	bne.n	800b34c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b292:	2b00      	cmp	r3, #0
 800b294:	d104      	bne.n	800b2a0 <tcp_close_shutdown+0x48>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b29a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b29e:	d055      	beq.n	800b34c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	8b5b      	ldrh	r3, [r3, #26]
 800b2a4:	f003 0310 	and.w	r3, r3, #16
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d106      	bne.n	800b2ba <tcp_close_shutdown+0x62>
 800b2ac:	4b52      	ldr	r3, [pc, #328]	; (800b3f8 <tcp_close_shutdown+0x1a0>)
 800b2ae:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800b2b2:	4954      	ldr	r1, [pc, #336]	; (800b404 <tcp_close_shutdown+0x1ac>)
 800b2b4:	4852      	ldr	r0, [pc, #328]	; (800b400 <tcp_close_shutdown+0x1a8>)
 800b2b6:	f00a f953 	bl	8015560 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b2c2:	687d      	ldr	r5, [r7, #4]
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	3304      	adds	r3, #4
 800b2c8:	687a      	ldr	r2, [r7, #4]
 800b2ca:	8ad2      	ldrh	r2, [r2, #22]
 800b2cc:	6879      	ldr	r1, [r7, #4]
 800b2ce:	8b09      	ldrh	r1, [r1, #24]
 800b2d0:	9102      	str	r1, [sp, #8]
 800b2d2:	9201      	str	r2, [sp, #4]
 800b2d4:	9300      	str	r3, [sp, #0]
 800b2d6:	462b      	mov	r3, r5
 800b2d8:	4622      	mov	r2, r4
 800b2da:	4601      	mov	r1, r0
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f004 fe91 	bl	8010004 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f001 f8c6 	bl	800c474 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b2e8:	4b47      	ldr	r3, [pc, #284]	; (800b408 <tcp_close_shutdown+0x1b0>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	687a      	ldr	r2, [r7, #4]
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d105      	bne.n	800b2fe <tcp_close_shutdown+0xa6>
 800b2f2:	4b45      	ldr	r3, [pc, #276]	; (800b408 <tcp_close_shutdown+0x1b0>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	68db      	ldr	r3, [r3, #12]
 800b2f8:	4a43      	ldr	r2, [pc, #268]	; (800b408 <tcp_close_shutdown+0x1b0>)
 800b2fa:	6013      	str	r3, [r2, #0]
 800b2fc:	e013      	b.n	800b326 <tcp_close_shutdown+0xce>
 800b2fe:	4b42      	ldr	r3, [pc, #264]	; (800b408 <tcp_close_shutdown+0x1b0>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	60fb      	str	r3, [r7, #12]
 800b304:	e00c      	b.n	800b320 <tcp_close_shutdown+0xc8>
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	68db      	ldr	r3, [r3, #12]
 800b30a:	687a      	ldr	r2, [r7, #4]
 800b30c:	429a      	cmp	r2, r3
 800b30e:	d104      	bne.n	800b31a <tcp_close_shutdown+0xc2>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	68da      	ldr	r2, [r3, #12]
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	60da      	str	r2, [r3, #12]
 800b318:	e005      	b.n	800b326 <tcp_close_shutdown+0xce>
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	68db      	ldr	r3, [r3, #12]
 800b31e:	60fb      	str	r3, [r7, #12]
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d1ef      	bne.n	800b306 <tcp_close_shutdown+0xae>
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2200      	movs	r2, #0
 800b32a:	60da      	str	r2, [r3, #12]
 800b32c:	4b37      	ldr	r3, [pc, #220]	; (800b40c <tcp_close_shutdown+0x1b4>)
 800b32e:	2201      	movs	r2, #1
 800b330:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800b332:	4b37      	ldr	r3, [pc, #220]	; (800b410 <tcp_close_shutdown+0x1b8>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	687a      	ldr	r2, [r7, #4]
 800b338:	429a      	cmp	r2, r3
 800b33a:	d102      	bne.n	800b342 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800b33c:	f003 fd5e 	bl	800edfc <tcp_trigger_input_pcb_close>
 800b340:	e002      	b.n	800b348 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f7ff fed6 	bl	800b0f4 <tcp_free>
      }
      return ERR_OK;
 800b348:	2300      	movs	r3, #0
 800b34a:	e050      	b.n	800b3ee <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	7d1b      	ldrb	r3, [r3, #20]
 800b350:	2b02      	cmp	r3, #2
 800b352:	d03b      	beq.n	800b3cc <tcp_close_shutdown+0x174>
 800b354:	2b02      	cmp	r3, #2
 800b356:	dc44      	bgt.n	800b3e2 <tcp_close_shutdown+0x18a>
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d002      	beq.n	800b362 <tcp_close_shutdown+0x10a>
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d02a      	beq.n	800b3b6 <tcp_close_shutdown+0x15e>
 800b360:	e03f      	b.n	800b3e2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	8adb      	ldrh	r3, [r3, #22]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d021      	beq.n	800b3ae <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b36a:	4b2a      	ldr	r3, [pc, #168]	; (800b414 <tcp_close_shutdown+0x1bc>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	687a      	ldr	r2, [r7, #4]
 800b370:	429a      	cmp	r2, r3
 800b372:	d105      	bne.n	800b380 <tcp_close_shutdown+0x128>
 800b374:	4b27      	ldr	r3, [pc, #156]	; (800b414 <tcp_close_shutdown+0x1bc>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	68db      	ldr	r3, [r3, #12]
 800b37a:	4a26      	ldr	r2, [pc, #152]	; (800b414 <tcp_close_shutdown+0x1bc>)
 800b37c:	6013      	str	r3, [r2, #0]
 800b37e:	e013      	b.n	800b3a8 <tcp_close_shutdown+0x150>
 800b380:	4b24      	ldr	r3, [pc, #144]	; (800b414 <tcp_close_shutdown+0x1bc>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	60bb      	str	r3, [r7, #8]
 800b386:	e00c      	b.n	800b3a2 <tcp_close_shutdown+0x14a>
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	68db      	ldr	r3, [r3, #12]
 800b38c:	687a      	ldr	r2, [r7, #4]
 800b38e:	429a      	cmp	r2, r3
 800b390:	d104      	bne.n	800b39c <tcp_close_shutdown+0x144>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	68da      	ldr	r2, [r3, #12]
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	60da      	str	r2, [r3, #12]
 800b39a:	e005      	b.n	800b3a8 <tcp_close_shutdown+0x150>
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	68db      	ldr	r3, [r3, #12]
 800b3a0:	60bb      	str	r3, [r7, #8]
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d1ef      	bne.n	800b388 <tcp_close_shutdown+0x130>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f7ff fea0 	bl	800b0f4 <tcp_free>
      break;
 800b3b4:	e01a      	b.n	800b3ec <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f7ff ff14 	bl	800b1e4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800b3bc:	6879      	ldr	r1, [r7, #4]
 800b3be:	4816      	ldr	r0, [pc, #88]	; (800b418 <tcp_close_shutdown+0x1c0>)
 800b3c0:	f001 f8a8 	bl	800c514 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f7ff feb1 	bl	800b12c <tcp_free_listen>
      break;
 800b3ca:	e00f      	b.n	800b3ec <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b3cc:	6879      	ldr	r1, [r7, #4]
 800b3ce:	480e      	ldr	r0, [pc, #56]	; (800b408 <tcp_close_shutdown+0x1b0>)
 800b3d0:	f001 f8a0 	bl	800c514 <tcp_pcb_remove>
 800b3d4:	4b0d      	ldr	r3, [pc, #52]	; (800b40c <tcp_close_shutdown+0x1b4>)
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f7ff fe8a 	bl	800b0f4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800b3e0:	e004      	b.n	800b3ec <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f000 f81a 	bl	800b41c <tcp_close_shutdown_fin>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	e000      	b.n	800b3ee <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800b3ec:	2300      	movs	r3, #0
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3710      	adds	r7, #16
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bdb0      	pop	{r4, r5, r7, pc}
 800b3f6:	bf00      	nop
 800b3f8:	08017214 	.word	0x08017214
 800b3fc:	080172e8 	.word	0x080172e8
 800b400:	08017258 	.word	0x08017258
 800b404:	08017308 	.word	0x08017308
 800b408:	2000d384 	.word	0x2000d384
 800b40c:	2000d38c 	.word	0x2000d38c
 800b410:	2000d3c4 	.word	0x2000d3c4
 800b414:	2000d37c 	.word	0x2000d37c
 800b418:	2000d380 	.word	0x2000d380

0800b41c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b084      	sub	sp, #16
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d106      	bne.n	800b438 <tcp_close_shutdown_fin+0x1c>
 800b42a:	4b2e      	ldr	r3, [pc, #184]	; (800b4e4 <tcp_close_shutdown_fin+0xc8>)
 800b42c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800b430:	492d      	ldr	r1, [pc, #180]	; (800b4e8 <tcp_close_shutdown_fin+0xcc>)
 800b432:	482e      	ldr	r0, [pc, #184]	; (800b4ec <tcp_close_shutdown_fin+0xd0>)
 800b434:	f00a f894 	bl	8015560 <iprintf>

  switch (pcb->state) {
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	7d1b      	ldrb	r3, [r3, #20]
 800b43c:	2b07      	cmp	r3, #7
 800b43e:	d020      	beq.n	800b482 <tcp_close_shutdown_fin+0x66>
 800b440:	2b07      	cmp	r3, #7
 800b442:	dc2b      	bgt.n	800b49c <tcp_close_shutdown_fin+0x80>
 800b444:	2b03      	cmp	r3, #3
 800b446:	d002      	beq.n	800b44e <tcp_close_shutdown_fin+0x32>
 800b448:	2b04      	cmp	r3, #4
 800b44a:	d00d      	beq.n	800b468 <tcp_close_shutdown_fin+0x4c>
 800b44c:	e026      	b.n	800b49c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f003 fee6 	bl	800f220 <tcp_send_fin>
 800b454:	4603      	mov	r3, r0
 800b456:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b458:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d11f      	bne.n	800b4a0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2205      	movs	r2, #5
 800b464:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b466:	e01b      	b.n	800b4a0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f003 fed9 	bl	800f220 <tcp_send_fin>
 800b46e:	4603      	mov	r3, r0
 800b470:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d114      	bne.n	800b4a4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2205      	movs	r2, #5
 800b47e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b480:	e010      	b.n	800b4a4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f003 fecc 	bl	800f220 <tcp_send_fin>
 800b488:	4603      	mov	r3, r0
 800b48a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b48c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d109      	bne.n	800b4a8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2209      	movs	r2, #9
 800b498:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b49a:	e005      	b.n	800b4a8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800b49c:	2300      	movs	r3, #0
 800b49e:	e01c      	b.n	800b4da <tcp_close_shutdown_fin+0xbe>
      break;
 800b4a0:	bf00      	nop
 800b4a2:	e002      	b.n	800b4aa <tcp_close_shutdown_fin+0x8e>
      break;
 800b4a4:	bf00      	nop
 800b4a6:	e000      	b.n	800b4aa <tcp_close_shutdown_fin+0x8e>
      break;
 800b4a8:	bf00      	nop
  }

  if (err == ERR_OK) {
 800b4aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d103      	bne.n	800b4ba <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f003 fff2 	bl	800f49c <tcp_output>
 800b4b8:	e00d      	b.n	800b4d6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800b4ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4c2:	d108      	bne.n	800b4d6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	8b5b      	ldrh	r3, [r3, #26]
 800b4c8:	f043 0308 	orr.w	r3, r3, #8
 800b4cc:	b29a      	uxth	r2, r3
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	e001      	b.n	800b4da <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800b4d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	3710      	adds	r7, #16
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}
 800b4e2:	bf00      	nop
 800b4e4:	08017214 	.word	0x08017214
 800b4e8:	080172c4 	.word	0x080172c4
 800b4ec:	08017258 	.word	0x08017258

0800b4f0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b082      	sub	sp, #8
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d109      	bne.n	800b512 <tcp_close+0x22>
 800b4fe:	4b0f      	ldr	r3, [pc, #60]	; (800b53c <tcp_close+0x4c>)
 800b500:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800b504:	490e      	ldr	r1, [pc, #56]	; (800b540 <tcp_close+0x50>)
 800b506:	480f      	ldr	r0, [pc, #60]	; (800b544 <tcp_close+0x54>)
 800b508:	f00a f82a 	bl	8015560 <iprintf>
 800b50c:	f06f 030f 	mvn.w	r3, #15
 800b510:	e00f      	b.n	800b532 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	7d1b      	ldrb	r3, [r3, #20]
 800b516:	2b01      	cmp	r3, #1
 800b518:	d006      	beq.n	800b528 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	8b5b      	ldrh	r3, [r3, #26]
 800b51e:	f043 0310 	orr.w	r3, r3, #16
 800b522:	b29a      	uxth	r2, r3
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800b528:	2101      	movs	r1, #1
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f7ff fe94 	bl	800b258 <tcp_close_shutdown>
 800b530:	4603      	mov	r3, r0
}
 800b532:	4618      	mov	r0, r3
 800b534:	3708      	adds	r7, #8
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}
 800b53a:	bf00      	nop
 800b53c:	08017214 	.word	0x08017214
 800b540:	08017324 	.word	0x08017324
 800b544:	08017258 	.word	0x08017258

0800b548 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b08e      	sub	sp, #56	; 0x38
 800b54c:	af04      	add	r7, sp, #16
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d107      	bne.n	800b568 <tcp_abandon+0x20>
 800b558:	4b52      	ldr	r3, [pc, #328]	; (800b6a4 <tcp_abandon+0x15c>)
 800b55a:	f240 223d 	movw	r2, #573	; 0x23d
 800b55e:	4952      	ldr	r1, [pc, #328]	; (800b6a8 <tcp_abandon+0x160>)
 800b560:	4852      	ldr	r0, [pc, #328]	; (800b6ac <tcp_abandon+0x164>)
 800b562:	f009 fffd 	bl	8015560 <iprintf>
 800b566:	e099      	b.n	800b69c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	7d1b      	ldrb	r3, [r3, #20]
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	d106      	bne.n	800b57e <tcp_abandon+0x36>
 800b570:	4b4c      	ldr	r3, [pc, #304]	; (800b6a4 <tcp_abandon+0x15c>)
 800b572:	f44f 7210 	mov.w	r2, #576	; 0x240
 800b576:	494e      	ldr	r1, [pc, #312]	; (800b6b0 <tcp_abandon+0x168>)
 800b578:	484c      	ldr	r0, [pc, #304]	; (800b6ac <tcp_abandon+0x164>)
 800b57a:	f009 fff1 	bl	8015560 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	7d1b      	ldrb	r3, [r3, #20]
 800b582:	2b0a      	cmp	r3, #10
 800b584:	d107      	bne.n	800b596 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800b586:	6879      	ldr	r1, [r7, #4]
 800b588:	484a      	ldr	r0, [pc, #296]	; (800b6b4 <tcp_abandon+0x16c>)
 800b58a:	f000 ffc3 	bl	800c514 <tcp_pcb_remove>
    tcp_free(pcb);
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f7ff fdb0 	bl	800b0f4 <tcp_free>
 800b594:	e082      	b.n	800b69c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800b596:	2300      	movs	r3, #0
 800b598:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800b59a:	2300      	movs	r3, #0
 800b59c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5a2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5b0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	691b      	ldr	r3, [r3, #16]
 800b5b6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	7d1b      	ldrb	r3, [r3, #20]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d126      	bne.n	800b60e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	8adb      	ldrh	r3, [r3, #22]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d02e      	beq.n	800b626 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b5c8:	4b3b      	ldr	r3, [pc, #236]	; (800b6b8 <tcp_abandon+0x170>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	687a      	ldr	r2, [r7, #4]
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	d105      	bne.n	800b5de <tcp_abandon+0x96>
 800b5d2:	4b39      	ldr	r3, [pc, #228]	; (800b6b8 <tcp_abandon+0x170>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	68db      	ldr	r3, [r3, #12]
 800b5d8:	4a37      	ldr	r2, [pc, #220]	; (800b6b8 <tcp_abandon+0x170>)
 800b5da:	6013      	str	r3, [r2, #0]
 800b5dc:	e013      	b.n	800b606 <tcp_abandon+0xbe>
 800b5de:	4b36      	ldr	r3, [pc, #216]	; (800b6b8 <tcp_abandon+0x170>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	61fb      	str	r3, [r7, #28]
 800b5e4:	e00c      	b.n	800b600 <tcp_abandon+0xb8>
 800b5e6:	69fb      	ldr	r3, [r7, #28]
 800b5e8:	68db      	ldr	r3, [r3, #12]
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	429a      	cmp	r2, r3
 800b5ee:	d104      	bne.n	800b5fa <tcp_abandon+0xb2>
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	68da      	ldr	r2, [r3, #12]
 800b5f4:	69fb      	ldr	r3, [r7, #28]
 800b5f6:	60da      	str	r2, [r3, #12]
 800b5f8:	e005      	b.n	800b606 <tcp_abandon+0xbe>
 800b5fa:	69fb      	ldr	r3, [r7, #28]
 800b5fc:	68db      	ldr	r3, [r3, #12]
 800b5fe:	61fb      	str	r3, [r7, #28]
 800b600:	69fb      	ldr	r3, [r7, #28]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d1ef      	bne.n	800b5e6 <tcp_abandon+0x9e>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2200      	movs	r2, #0
 800b60a:	60da      	str	r2, [r3, #12]
 800b60c:	e00b      	b.n	800b626 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	8adb      	ldrh	r3, [r3, #22]
 800b616:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b618:	6879      	ldr	r1, [r7, #4]
 800b61a:	4828      	ldr	r0, [pc, #160]	; (800b6bc <tcp_abandon+0x174>)
 800b61c:	f000 ff7a 	bl	800c514 <tcp_pcb_remove>
 800b620:	4b27      	ldr	r3, [pc, #156]	; (800b6c0 <tcp_abandon+0x178>)
 800b622:	2201      	movs	r2, #1
 800b624:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d004      	beq.n	800b638 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b632:	4618      	mov	r0, r3
 800b634:	f000 fd1c 	bl	800c070 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d004      	beq.n	800b64a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b644:	4618      	mov	r0, r3
 800b646:	f000 fd13 	bl	800c070 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d004      	beq.n	800b65c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b656:	4618      	mov	r0, r3
 800b658:	f000 fd0a 	bl	800c070 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800b65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d00e      	beq.n	800b680 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800b662:	6879      	ldr	r1, [r7, #4]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	3304      	adds	r3, #4
 800b668:	687a      	ldr	r2, [r7, #4]
 800b66a:	8b12      	ldrh	r2, [r2, #24]
 800b66c:	9202      	str	r2, [sp, #8]
 800b66e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b670:	9201      	str	r2, [sp, #4]
 800b672:	9300      	str	r3, [sp, #0]
 800b674:	460b      	mov	r3, r1
 800b676:	697a      	ldr	r2, [r7, #20]
 800b678:	69b9      	ldr	r1, [r7, #24]
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f004 fcc2 	bl	8010004 <tcp_rst>
    }
    last_state = pcb->state;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	7d1b      	ldrb	r3, [r3, #20]
 800b684:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f7ff fd34 	bl	800b0f4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b68c:	693b      	ldr	r3, [r7, #16]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d004      	beq.n	800b69c <tcp_abandon+0x154>
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	f06f 010c 	mvn.w	r1, #12
 800b698:	68f8      	ldr	r0, [r7, #12]
 800b69a:	4798      	blx	r3
  }
}
 800b69c:	3728      	adds	r7, #40	; 0x28
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}
 800b6a2:	bf00      	nop
 800b6a4:	08017214 	.word	0x08017214
 800b6a8:	08017358 	.word	0x08017358
 800b6ac:	08017258 	.word	0x08017258
 800b6b0:	08017374 	.word	0x08017374
 800b6b4:	2000d388 	.word	0x2000d388
 800b6b8:	2000d37c 	.word	0x2000d37c
 800b6bc:	2000d384 	.word	0x2000d384
 800b6c0:	2000d38c 	.word	0x2000d38c

0800b6c4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b082      	sub	sp, #8
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800b6cc:	2101      	movs	r1, #1
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f7ff ff3a 	bl	800b548 <tcp_abandon>
}
 800b6d4:	bf00      	nop
 800b6d6:	3708      	adds	r7, #8
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}

0800b6dc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b084      	sub	sp, #16
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d106      	bne.n	800b6f8 <tcp_update_rcv_ann_wnd+0x1c>
 800b6ea:	4b25      	ldr	r3, [pc, #148]	; (800b780 <tcp_update_rcv_ann_wnd+0xa4>)
 800b6ec:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b6f0:	4924      	ldr	r1, [pc, #144]	; (800b784 <tcp_update_rcv_ann_wnd+0xa8>)
 800b6f2:	4825      	ldr	r0, [pc, #148]	; (800b788 <tcp_update_rcv_ann_wnd+0xac>)
 800b6f4:	f009 ff34 	bl	8015560 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6fc:	687a      	ldr	r2, [r7, #4]
 800b6fe:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800b700:	4413      	add	r3, r2
 800b702:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b708:	687a      	ldr	r2, [r7, #4]
 800b70a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800b70c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800b710:	bf28      	it	cs
 800b712:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800b716:	b292      	uxth	r2, r2
 800b718:	4413      	add	r3, r2
 800b71a:	68fa      	ldr	r2, [r7, #12]
 800b71c:	1ad3      	subs	r3, r2, r3
 800b71e:	2b00      	cmp	r3, #0
 800b720:	db08      	blt.n	800b734 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b72e:	68fa      	ldr	r2, [r7, #12]
 800b730:	1ad3      	subs	r3, r2, r3
 800b732:	e020      	b.n	800b776 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b73c:	1ad3      	subs	r3, r2, r3
 800b73e:	2b00      	cmp	r3, #0
 800b740:	dd03      	ble.n	800b74a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2200      	movs	r2, #0
 800b746:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b748:	e014      	b.n	800b774 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b752:	1ad3      	subs	r3, r2, r3
 800b754:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b75c:	d306      	bcc.n	800b76c <tcp_update_rcv_ann_wnd+0x90>
 800b75e:	4b08      	ldr	r3, [pc, #32]	; (800b780 <tcp_update_rcv_ann_wnd+0xa4>)
 800b760:	f240 32b6 	movw	r2, #950	; 0x3b6
 800b764:	4909      	ldr	r1, [pc, #36]	; (800b78c <tcp_update_rcv_ann_wnd+0xb0>)
 800b766:	4808      	ldr	r0, [pc, #32]	; (800b788 <tcp_update_rcv_ann_wnd+0xac>)
 800b768:	f009 fefa 	bl	8015560 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	b29a      	uxth	r2, r3
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800b774:	2300      	movs	r3, #0
  }
}
 800b776:	4618      	mov	r0, r3
 800b778:	3710      	adds	r7, #16
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
 800b77e:	bf00      	nop
 800b780:	08017214 	.word	0x08017214
 800b784:	08017470 	.word	0x08017470
 800b788:	08017258 	.word	0x08017258
 800b78c:	08017494 	.word	0x08017494

0800b790 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b084      	sub	sp, #16
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
 800b798:	460b      	mov	r3, r1
 800b79a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d107      	bne.n	800b7b2 <tcp_recved+0x22>
 800b7a2:	4b1f      	ldr	r3, [pc, #124]	; (800b820 <tcp_recved+0x90>)
 800b7a4:	f240 32cf 	movw	r2, #975	; 0x3cf
 800b7a8:	491e      	ldr	r1, [pc, #120]	; (800b824 <tcp_recved+0x94>)
 800b7aa:	481f      	ldr	r0, [pc, #124]	; (800b828 <tcp_recved+0x98>)
 800b7ac:	f009 fed8 	bl	8015560 <iprintf>
 800b7b0:	e032      	b.n	800b818 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	7d1b      	ldrb	r3, [r3, #20]
 800b7b6:	2b01      	cmp	r3, #1
 800b7b8:	d106      	bne.n	800b7c8 <tcp_recved+0x38>
 800b7ba:	4b19      	ldr	r3, [pc, #100]	; (800b820 <tcp_recved+0x90>)
 800b7bc:	f240 32d2 	movw	r2, #978	; 0x3d2
 800b7c0:	491a      	ldr	r1, [pc, #104]	; (800b82c <tcp_recved+0x9c>)
 800b7c2:	4819      	ldr	r0, [pc, #100]	; (800b828 <tcp_recved+0x98>)
 800b7c4:	f009 fecc 	bl	8015560 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b7cc:	887b      	ldrh	r3, [r7, #2]
 800b7ce:	4413      	add	r3, r2
 800b7d0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800b7d2:	89fb      	ldrh	r3, [r7, #14]
 800b7d4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b7d8:	d804      	bhi.n	800b7e4 <tcp_recved+0x54>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7de:	89fa      	ldrh	r2, [r7, #14]
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d204      	bcs.n	800b7ee <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b7ea:	851a      	strh	r2, [r3, #40]	; 0x28
 800b7ec:	e002      	b.n	800b7f4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	89fa      	ldrh	r2, [r7, #14]
 800b7f2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f7ff ff71 	bl	800b6dc <tcp_update_rcv_ann_wnd>
 800b7fa:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b802:	d309      	bcc.n	800b818 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	8b5b      	ldrh	r3, [r3, #26]
 800b808:	f043 0302 	orr.w	r3, r3, #2
 800b80c:	b29a      	uxth	r2, r3
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f003 fe42 	bl	800f49c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800b818:	3710      	adds	r7, #16
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
 800b81e:	bf00      	nop
 800b820:	08017214 	.word	0x08017214
 800b824:	080174b0 	.word	0x080174b0
 800b828:	08017258 	.word	0x08017258
 800b82c:	080174c8 	.word	0x080174c8

0800b830 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800b830:	b5b0      	push	{r4, r5, r7, lr}
 800b832:	b090      	sub	sp, #64	; 0x40
 800b834:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800b836:	2300      	movs	r3, #0
 800b838:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800b83c:	4b94      	ldr	r3, [pc, #592]	; (800ba90 <tcp_slowtmr+0x260>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	3301      	adds	r3, #1
 800b842:	4a93      	ldr	r2, [pc, #588]	; (800ba90 <tcp_slowtmr+0x260>)
 800b844:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800b846:	4b93      	ldr	r3, [pc, #588]	; (800ba94 <tcp_slowtmr+0x264>)
 800b848:	781b      	ldrb	r3, [r3, #0]
 800b84a:	3301      	adds	r3, #1
 800b84c:	b2da      	uxtb	r2, r3
 800b84e:	4b91      	ldr	r3, [pc, #580]	; (800ba94 <tcp_slowtmr+0x264>)
 800b850:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800b852:	2300      	movs	r3, #0
 800b854:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800b856:	4b90      	ldr	r3, [pc, #576]	; (800ba98 <tcp_slowtmr+0x268>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800b85c:	e29f      	b.n	800bd9e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b860:	7d1b      	ldrb	r3, [r3, #20]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d106      	bne.n	800b874 <tcp_slowtmr+0x44>
 800b866:	4b8d      	ldr	r3, [pc, #564]	; (800ba9c <tcp_slowtmr+0x26c>)
 800b868:	f240 42be 	movw	r2, #1214	; 0x4be
 800b86c:	498c      	ldr	r1, [pc, #560]	; (800baa0 <tcp_slowtmr+0x270>)
 800b86e:	488d      	ldr	r0, [pc, #564]	; (800baa4 <tcp_slowtmr+0x274>)
 800b870:	f009 fe76 	bl	8015560 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800b874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b876:	7d1b      	ldrb	r3, [r3, #20]
 800b878:	2b01      	cmp	r3, #1
 800b87a:	d106      	bne.n	800b88a <tcp_slowtmr+0x5a>
 800b87c:	4b87      	ldr	r3, [pc, #540]	; (800ba9c <tcp_slowtmr+0x26c>)
 800b87e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800b882:	4989      	ldr	r1, [pc, #548]	; (800baa8 <tcp_slowtmr+0x278>)
 800b884:	4887      	ldr	r0, [pc, #540]	; (800baa4 <tcp_slowtmr+0x274>)
 800b886:	f009 fe6b 	bl	8015560 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800b88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b88c:	7d1b      	ldrb	r3, [r3, #20]
 800b88e:	2b0a      	cmp	r3, #10
 800b890:	d106      	bne.n	800b8a0 <tcp_slowtmr+0x70>
 800b892:	4b82      	ldr	r3, [pc, #520]	; (800ba9c <tcp_slowtmr+0x26c>)
 800b894:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800b898:	4984      	ldr	r1, [pc, #528]	; (800baac <tcp_slowtmr+0x27c>)
 800b89a:	4882      	ldr	r0, [pc, #520]	; (800baa4 <tcp_slowtmr+0x274>)
 800b89c:	f009 fe60 	bl	8015560 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800b8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a2:	7f9a      	ldrb	r2, [r3, #30]
 800b8a4:	4b7b      	ldr	r3, [pc, #492]	; (800ba94 <tcp_slowtmr+0x264>)
 800b8a6:	781b      	ldrb	r3, [r3, #0]
 800b8a8:	429a      	cmp	r2, r3
 800b8aa:	d105      	bne.n	800b8b8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800b8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ae:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800b8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8b2:	68db      	ldr	r3, [r3, #12]
 800b8b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800b8b6:	e272      	b.n	800bd9e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800b8b8:	4b76      	ldr	r3, [pc, #472]	; (800ba94 <tcp_slowtmr+0x264>)
 800b8ba:	781a      	ldrb	r2, [r3, #0]
 800b8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8be:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ce:	7d1b      	ldrb	r3, [r3, #20]
 800b8d0:	2b02      	cmp	r3, #2
 800b8d2:	d10a      	bne.n	800b8ea <tcp_slowtmr+0xba>
 800b8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b8da:	2b05      	cmp	r3, #5
 800b8dc:	d905      	bls.n	800b8ea <tcp_slowtmr+0xba>
      ++pcb_remove;
 800b8de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8e2:	3301      	adds	r3, #1
 800b8e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b8e8:	e11e      	b.n	800bb28 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800b8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b8f0:	2b0b      	cmp	r3, #11
 800b8f2:	d905      	bls.n	800b900 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800b8f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b8fe:	e113      	b.n	800bb28 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800b900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b902:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b906:	2b00      	cmp	r3, #0
 800b908:	d075      	beq.n	800b9f6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800b90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b90c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d006      	beq.n	800b920 <tcp_slowtmr+0xf0>
 800b912:	4b62      	ldr	r3, [pc, #392]	; (800ba9c <tcp_slowtmr+0x26c>)
 800b914:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800b918:	4965      	ldr	r1, [pc, #404]	; (800bab0 <tcp_slowtmr+0x280>)
 800b91a:	4862      	ldr	r0, [pc, #392]	; (800baa4 <tcp_slowtmr+0x274>)
 800b91c:	f009 fe20 	bl	8015560 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800b920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b924:	2b00      	cmp	r3, #0
 800b926:	d106      	bne.n	800b936 <tcp_slowtmr+0x106>
 800b928:	4b5c      	ldr	r3, [pc, #368]	; (800ba9c <tcp_slowtmr+0x26c>)
 800b92a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800b92e:	4961      	ldr	r1, [pc, #388]	; (800bab4 <tcp_slowtmr+0x284>)
 800b930:	485c      	ldr	r0, [pc, #368]	; (800baa4 <tcp_slowtmr+0x274>)
 800b932:	f009 fe15 	bl	8015560 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800b936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b938:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b93c:	2b0b      	cmp	r3, #11
 800b93e:	d905      	bls.n	800b94c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800b940:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b944:	3301      	adds	r3, #1
 800b946:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b94a:	e0ed      	b.n	800bb28 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800b94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b94e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b952:	3b01      	subs	r3, #1
 800b954:	4a58      	ldr	r2, [pc, #352]	; (800bab8 <tcp_slowtmr+0x288>)
 800b956:	5cd3      	ldrb	r3, [r2, r3]
 800b958:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800b95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b95c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b960:	7c7a      	ldrb	r2, [r7, #17]
 800b962:	429a      	cmp	r2, r3
 800b964:	d907      	bls.n	800b976 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800b966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b968:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b96c:	3301      	adds	r3, #1
 800b96e:	b2da      	uxtb	r2, r3
 800b970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b972:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800b976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b978:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b97c:	7c7a      	ldrb	r2, [r7, #17]
 800b97e:	429a      	cmp	r2, r3
 800b980:	f200 80d2 	bhi.w	800bb28 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800b984:	2301      	movs	r3, #1
 800b986:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800b988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b98a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d108      	bne.n	800b9a4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800b992:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b994:	f004 fc2a 	bl	80101ec <tcp_zero_window_probe>
 800b998:	4603      	mov	r3, r0
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d014      	beq.n	800b9c8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800b99e:	2300      	movs	r3, #0
 800b9a0:	623b      	str	r3, [r7, #32]
 800b9a2:	e011      	b.n	800b9c8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800b9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b9ae:	f003 faef 	bl	800ef90 <tcp_split_unsent_seg>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d107      	bne.n	800b9c8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800b9b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b9ba:	f003 fd6f 	bl	800f49c <tcp_output>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d101      	bne.n	800b9c8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800b9c8:	6a3b      	ldr	r3, [r7, #32]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	f000 80ac 	beq.w	800bb28 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800b9d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9da:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b9de:	2b06      	cmp	r3, #6
 800b9e0:	f200 80a2 	bhi.w	800bb28 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800b9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9e6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b9ea:	3301      	adds	r3, #1
 800b9ec:	b2da      	uxtb	r2, r3
 800b9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800b9f4:	e098      	b.n	800bb28 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800b9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	db0f      	blt.n	800ba20 <tcp_slowtmr+0x1f0>
 800ba00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba02:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ba06:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d008      	beq.n	800ba20 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800ba0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba10:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ba14:	b29b      	uxth	r3, r3
 800ba16:	3301      	adds	r3, #1
 800ba18:	b29b      	uxth	r3, r3
 800ba1a:	b21a      	sxth	r2, r3
 800ba1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba1e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800ba20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba22:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800ba26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba28:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	db7b      	blt.n	800bb28 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800ba30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ba32:	f004 f825 	bl	800fa80 <tcp_rexmit_rto_prepare>
 800ba36:	4603      	mov	r3, r0
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d007      	beq.n	800ba4c <tcp_slowtmr+0x21c>
 800ba3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d171      	bne.n	800bb28 <tcp_slowtmr+0x2f8>
 800ba44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d06d      	beq.n	800bb28 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800ba4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba4e:	7d1b      	ldrb	r3, [r3, #20]
 800ba50:	2b02      	cmp	r3, #2
 800ba52:	d03a      	beq.n	800baca <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ba54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ba5a:	2b0c      	cmp	r3, #12
 800ba5c:	bf28      	it	cs
 800ba5e:	230c      	movcs	r3, #12
 800ba60:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ba62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba64:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ba68:	10db      	asrs	r3, r3, #3
 800ba6a:	b21b      	sxth	r3, r3
 800ba6c:	461a      	mov	r2, r3
 800ba6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba70:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ba74:	4413      	add	r3, r2
 800ba76:	7efa      	ldrb	r2, [r7, #27]
 800ba78:	4910      	ldr	r1, [pc, #64]	; (800babc <tcp_slowtmr+0x28c>)
 800ba7a:	5c8a      	ldrb	r2, [r1, r2]
 800ba7c:	4093      	lsls	r3, r2
 800ba7e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800ba86:	4293      	cmp	r3, r2
 800ba88:	dc1a      	bgt.n	800bac0 <tcp_slowtmr+0x290>
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	b21a      	sxth	r2, r3
 800ba8e:	e019      	b.n	800bac4 <tcp_slowtmr+0x294>
 800ba90:	2000d378 	.word	0x2000d378
 800ba94:	2000d38e 	.word	0x2000d38e
 800ba98:	2000d384 	.word	0x2000d384
 800ba9c:	08017214 	.word	0x08017214
 800baa0:	08017558 	.word	0x08017558
 800baa4:	08017258 	.word	0x08017258
 800baa8:	08017584 	.word	0x08017584
 800baac:	080175b0 	.word	0x080175b0
 800bab0:	080175e0 	.word	0x080175e0
 800bab4:	08017614 	.word	0x08017614
 800bab8:	080195f0 	.word	0x080195f0
 800babc:	080195e0 	.word	0x080195e0
 800bac0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800bac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bac6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800baca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bacc:	2200      	movs	r2, #0
 800bace:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800bad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bad2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bad8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800badc:	4293      	cmp	r3, r2
 800bade:	bf28      	it	cs
 800bae0:	4613      	movcs	r3, r2
 800bae2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800bae4:	8a7b      	ldrh	r3, [r7, #18]
 800bae6:	085b      	lsrs	r3, r3, #1
 800bae8:	b29a      	uxth	r2, r3
 800baea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800baf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baf2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800baf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baf8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bafa:	005b      	lsls	r3, r3, #1
 800bafc:	b29b      	uxth	r3, r3
 800bafe:	429a      	cmp	r2, r3
 800bb00:	d206      	bcs.n	800bb10 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800bb02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bb06:	005b      	lsls	r3, r3, #1
 800bb08:	b29a      	uxth	r2, r3
 800bb0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb0c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800bb10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb12:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800bb14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb16:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800bb1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800bb22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb24:	f004 f81c 	bl	800fb60 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800bb28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb2a:	7d1b      	ldrb	r3, [r3, #20]
 800bb2c:	2b06      	cmp	r3, #6
 800bb2e:	d111      	bne.n	800bb54 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800bb30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb32:	8b5b      	ldrh	r3, [r3, #26]
 800bb34:	f003 0310 	and.w	r3, r3, #16
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d00b      	beq.n	800bb54 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bb3c:	4b9d      	ldr	r3, [pc, #628]	; (800bdb4 <tcp_slowtmr+0x584>)
 800bb3e:	681a      	ldr	r2, [r3, #0]
 800bb40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb42:	6a1b      	ldr	r3, [r3, #32]
 800bb44:	1ad3      	subs	r3, r2, r3
 800bb46:	2b28      	cmp	r3, #40	; 0x28
 800bb48:	d904      	bls.n	800bb54 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800bb4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb4e:	3301      	adds	r3, #1
 800bb50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800bb54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb56:	7a5b      	ldrb	r3, [r3, #9]
 800bb58:	f003 0308 	and.w	r3, r3, #8
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d04c      	beq.n	800bbfa <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800bb60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb62:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800bb64:	2b04      	cmp	r3, #4
 800bb66:	d003      	beq.n	800bb70 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800bb68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb6a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800bb6c:	2b07      	cmp	r3, #7
 800bb6e:	d144      	bne.n	800bbfa <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bb70:	4b90      	ldr	r3, [pc, #576]	; (800bdb4 <tcp_slowtmr+0x584>)
 800bb72:	681a      	ldr	r2, [r3, #0]
 800bb74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb76:	6a1b      	ldr	r3, [r3, #32]
 800bb78:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800bb7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bb80:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800bb84:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800bb88:	498b      	ldr	r1, [pc, #556]	; (800bdb8 <tcp_slowtmr+0x588>)
 800bb8a:	fba1 1303 	umull	r1, r3, r1, r3
 800bb8e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d90a      	bls.n	800bbaa <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800bb94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb98:	3301      	adds	r3, #1
 800bb9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800bb9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bba2:	3301      	adds	r3, #1
 800bba4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800bba8:	e027      	b.n	800bbfa <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bbaa:	4b82      	ldr	r3, [pc, #520]	; (800bdb4 <tcp_slowtmr+0x584>)
 800bbac:	681a      	ldr	r2, [r3, #0]
 800bbae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbb0:	6a1b      	ldr	r3, [r3, #32]
 800bbb2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800bbb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbb6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800bbba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbbc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	4b7e      	ldr	r3, [pc, #504]	; (800bdbc <tcp_slowtmr+0x58c>)
 800bbc4:	fb00 f303 	mul.w	r3, r0, r3
 800bbc8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800bbca:	497b      	ldr	r1, [pc, #492]	; (800bdb8 <tcp_slowtmr+0x588>)
 800bbcc:	fba1 1303 	umull	r1, r3, r1, r3
 800bbd0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d911      	bls.n	800bbfa <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800bbd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bbd8:	f004 fac8 	bl	801016c <tcp_keepalive>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800bbe2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d107      	bne.n	800bbfa <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800bbea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbec:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800bbf0:	3301      	adds	r3, #1
 800bbf2:	b2da      	uxtb	r2, r3
 800bbf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbf6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800bbfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d011      	beq.n	800bc26 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800bc02:	4b6c      	ldr	r3, [pc, #432]	; (800bdb4 <tcp_slowtmr+0x584>)
 800bc04:	681a      	ldr	r2, [r3, #0]
 800bc06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc08:	6a1b      	ldr	r3, [r3, #32]
 800bc0a:	1ad2      	subs	r2, r2, r3
 800bc0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc0e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800bc12:	4619      	mov	r1, r3
 800bc14:	460b      	mov	r3, r1
 800bc16:	005b      	lsls	r3, r3, #1
 800bc18:	440b      	add	r3, r1
 800bc1a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	d302      	bcc.n	800bc26 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800bc20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc22:	f000 fddb 	bl	800c7dc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800bc26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc28:	7d1b      	ldrb	r3, [r3, #20]
 800bc2a:	2b03      	cmp	r3, #3
 800bc2c:	d10b      	bne.n	800bc46 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bc2e:	4b61      	ldr	r3, [pc, #388]	; (800bdb4 <tcp_slowtmr+0x584>)
 800bc30:	681a      	ldr	r2, [r3, #0]
 800bc32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc34:	6a1b      	ldr	r3, [r3, #32]
 800bc36:	1ad3      	subs	r3, r2, r3
 800bc38:	2b28      	cmp	r3, #40	; 0x28
 800bc3a:	d904      	bls.n	800bc46 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800bc3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc40:	3301      	adds	r3, #1
 800bc42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800bc46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc48:	7d1b      	ldrb	r3, [r3, #20]
 800bc4a:	2b09      	cmp	r3, #9
 800bc4c:	d10b      	bne.n	800bc66 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800bc4e:	4b59      	ldr	r3, [pc, #356]	; (800bdb4 <tcp_slowtmr+0x584>)
 800bc50:	681a      	ldr	r2, [r3, #0]
 800bc52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc54:	6a1b      	ldr	r3, [r3, #32]
 800bc56:	1ad3      	subs	r3, r2, r3
 800bc58:	2bf0      	cmp	r3, #240	; 0xf0
 800bc5a:	d904      	bls.n	800bc66 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800bc5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc60:	3301      	adds	r3, #1
 800bc62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800bc66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d060      	beq.n	800bd30 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800bc6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc74:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800bc76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bc78:	f000 fbfc 	bl	800c474 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800bc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d010      	beq.n	800bca4 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800bc82:	4b4f      	ldr	r3, [pc, #316]	; (800bdc0 <tcp_slowtmr+0x590>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc88:	429a      	cmp	r2, r3
 800bc8a:	d106      	bne.n	800bc9a <tcp_slowtmr+0x46a>
 800bc8c:	4b4d      	ldr	r3, [pc, #308]	; (800bdc4 <tcp_slowtmr+0x594>)
 800bc8e:	f240 526d 	movw	r2, #1389	; 0x56d
 800bc92:	494d      	ldr	r1, [pc, #308]	; (800bdc8 <tcp_slowtmr+0x598>)
 800bc94:	484d      	ldr	r0, [pc, #308]	; (800bdcc <tcp_slowtmr+0x59c>)
 800bc96:	f009 fc63 	bl	8015560 <iprintf>
        prev->next = pcb->next;
 800bc9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc9c:	68da      	ldr	r2, [r3, #12]
 800bc9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca0:	60da      	str	r2, [r3, #12]
 800bca2:	e00f      	b.n	800bcc4 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800bca4:	4b46      	ldr	r3, [pc, #280]	; (800bdc0 <tcp_slowtmr+0x590>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d006      	beq.n	800bcbc <tcp_slowtmr+0x48c>
 800bcae:	4b45      	ldr	r3, [pc, #276]	; (800bdc4 <tcp_slowtmr+0x594>)
 800bcb0:	f240 5271 	movw	r2, #1393	; 0x571
 800bcb4:	4946      	ldr	r1, [pc, #280]	; (800bdd0 <tcp_slowtmr+0x5a0>)
 800bcb6:	4845      	ldr	r0, [pc, #276]	; (800bdcc <tcp_slowtmr+0x59c>)
 800bcb8:	f009 fc52 	bl	8015560 <iprintf>
        tcp_active_pcbs = pcb->next;
 800bcbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcbe:	68db      	ldr	r3, [r3, #12]
 800bcc0:	4a3f      	ldr	r2, [pc, #252]	; (800bdc0 <tcp_slowtmr+0x590>)
 800bcc2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800bcc4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d013      	beq.n	800bcf4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcce:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800bcd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800bcd4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800bcd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd8:	3304      	adds	r3, #4
 800bcda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcdc:	8ad2      	ldrh	r2, [r2, #22]
 800bcde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bce0:	8b09      	ldrh	r1, [r1, #24]
 800bce2:	9102      	str	r1, [sp, #8]
 800bce4:	9201      	str	r2, [sp, #4]
 800bce6:	9300      	str	r3, [sp, #0]
 800bce8:	462b      	mov	r3, r5
 800bcea:	4622      	mov	r2, r4
 800bcec:	4601      	mov	r1, r0
 800bcee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bcf0:	f004 f988 	bl	8010004 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800bcf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcf6:	691b      	ldr	r3, [r3, #16]
 800bcf8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800bcfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcfc:	7d1b      	ldrb	r3, [r3, #20]
 800bcfe:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800bd00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd02:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800bd04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd06:	68db      	ldr	r3, [r3, #12]
 800bd08:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800bd0a:	6838      	ldr	r0, [r7, #0]
 800bd0c:	f7ff f9f2 	bl	800b0f4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800bd10:	4b30      	ldr	r3, [pc, #192]	; (800bdd4 <tcp_slowtmr+0x5a4>)
 800bd12:	2200      	movs	r2, #0
 800bd14:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d004      	beq.n	800bd26 <tcp_slowtmr+0x4f6>
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	f06f 010c 	mvn.w	r1, #12
 800bd22:	68b8      	ldr	r0, [r7, #8]
 800bd24:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800bd26:	4b2b      	ldr	r3, [pc, #172]	; (800bdd4 <tcp_slowtmr+0x5a4>)
 800bd28:	781b      	ldrb	r3, [r3, #0]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d037      	beq.n	800bd9e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800bd2e:	e590      	b.n	800b852 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800bd30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd32:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800bd34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd36:	68db      	ldr	r3, [r3, #12]
 800bd38:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800bd3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd3c:	7f1b      	ldrb	r3, [r3, #28]
 800bd3e:	3301      	adds	r3, #1
 800bd40:	b2da      	uxtb	r2, r3
 800bd42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd44:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800bd46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd48:	7f1a      	ldrb	r2, [r3, #28]
 800bd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd4c:	7f5b      	ldrb	r3, [r3, #29]
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	d325      	bcc.n	800bd9e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800bd52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd54:	2200      	movs	r2, #0
 800bd56:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800bd58:	4b1e      	ldr	r3, [pc, #120]	; (800bdd4 <tcp_slowtmr+0x5a4>)
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800bd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d00b      	beq.n	800bd80 <tcp_slowtmr+0x550>
 800bd68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd70:	6912      	ldr	r2, [r2, #16]
 800bd72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bd74:	4610      	mov	r0, r2
 800bd76:	4798      	blx	r3
 800bd78:	4603      	mov	r3, r0
 800bd7a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800bd7e:	e002      	b.n	800bd86 <tcp_slowtmr+0x556>
 800bd80:	2300      	movs	r3, #0
 800bd82:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800bd86:	4b13      	ldr	r3, [pc, #76]	; (800bdd4 <tcp_slowtmr+0x5a4>)
 800bd88:	781b      	ldrb	r3, [r3, #0]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d000      	beq.n	800bd90 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800bd8e:	e560      	b.n	800b852 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800bd90:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d102      	bne.n	800bd9e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800bd98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd9a:	f003 fb7f 	bl	800f49c <tcp_output>
  while (pcb != NULL) {
 800bd9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	f47f ad5c 	bne.w	800b85e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800bda6:	2300      	movs	r3, #0
 800bda8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800bdaa:	4b0b      	ldr	r3, [pc, #44]	; (800bdd8 <tcp_slowtmr+0x5a8>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800bdb0:	e067      	b.n	800be82 <tcp_slowtmr+0x652>
 800bdb2:	bf00      	nop
 800bdb4:	2000d378 	.word	0x2000d378
 800bdb8:	10624dd3 	.word	0x10624dd3
 800bdbc:	000124f8 	.word	0x000124f8
 800bdc0:	2000d384 	.word	0x2000d384
 800bdc4:	08017214 	.word	0x08017214
 800bdc8:	0801764c 	.word	0x0801764c
 800bdcc:	08017258 	.word	0x08017258
 800bdd0:	08017678 	.word	0x08017678
 800bdd4:	2000d38c 	.word	0x2000d38c
 800bdd8:	2000d388 	.word	0x2000d388
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800bddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdde:	7d1b      	ldrb	r3, [r3, #20]
 800bde0:	2b0a      	cmp	r3, #10
 800bde2:	d006      	beq.n	800bdf2 <tcp_slowtmr+0x5c2>
 800bde4:	4b2b      	ldr	r3, [pc, #172]	; (800be94 <tcp_slowtmr+0x664>)
 800bde6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800bdea:	492b      	ldr	r1, [pc, #172]	; (800be98 <tcp_slowtmr+0x668>)
 800bdec:	482b      	ldr	r0, [pc, #172]	; (800be9c <tcp_slowtmr+0x66c>)
 800bdee:	f009 fbb7 	bl	8015560 <iprintf>
    pcb_remove = 0;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800bdf8:	4b29      	ldr	r3, [pc, #164]	; (800bea0 <tcp_slowtmr+0x670>)
 800bdfa:	681a      	ldr	r2, [r3, #0]
 800bdfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdfe:	6a1b      	ldr	r3, [r3, #32]
 800be00:	1ad3      	subs	r3, r2, r3
 800be02:	2bf0      	cmp	r3, #240	; 0xf0
 800be04:	d904      	bls.n	800be10 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800be06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be0a:	3301      	adds	r3, #1
 800be0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800be10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be14:	2b00      	cmp	r3, #0
 800be16:	d02f      	beq.n	800be78 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800be18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be1a:	f000 fb2b 	bl	800c474 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800be1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be20:	2b00      	cmp	r3, #0
 800be22:	d010      	beq.n	800be46 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800be24:	4b1f      	ldr	r3, [pc, #124]	; (800bea4 <tcp_slowtmr+0x674>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be2a:	429a      	cmp	r2, r3
 800be2c:	d106      	bne.n	800be3c <tcp_slowtmr+0x60c>
 800be2e:	4b19      	ldr	r3, [pc, #100]	; (800be94 <tcp_slowtmr+0x664>)
 800be30:	f240 52af 	movw	r2, #1455	; 0x5af
 800be34:	491c      	ldr	r1, [pc, #112]	; (800bea8 <tcp_slowtmr+0x678>)
 800be36:	4819      	ldr	r0, [pc, #100]	; (800be9c <tcp_slowtmr+0x66c>)
 800be38:	f009 fb92 	bl	8015560 <iprintf>
        prev->next = pcb->next;
 800be3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be3e:	68da      	ldr	r2, [r3, #12]
 800be40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be42:	60da      	str	r2, [r3, #12]
 800be44:	e00f      	b.n	800be66 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800be46:	4b17      	ldr	r3, [pc, #92]	; (800bea4 <tcp_slowtmr+0x674>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be4c:	429a      	cmp	r2, r3
 800be4e:	d006      	beq.n	800be5e <tcp_slowtmr+0x62e>
 800be50:	4b10      	ldr	r3, [pc, #64]	; (800be94 <tcp_slowtmr+0x664>)
 800be52:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800be56:	4915      	ldr	r1, [pc, #84]	; (800beac <tcp_slowtmr+0x67c>)
 800be58:	4810      	ldr	r0, [pc, #64]	; (800be9c <tcp_slowtmr+0x66c>)
 800be5a:	f009 fb81 	bl	8015560 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800be5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be60:	68db      	ldr	r3, [r3, #12]
 800be62:	4a10      	ldr	r2, [pc, #64]	; (800bea4 <tcp_slowtmr+0x674>)
 800be64:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800be66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be68:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800be6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be6c:	68db      	ldr	r3, [r3, #12]
 800be6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800be70:	69f8      	ldr	r0, [r7, #28]
 800be72:	f7ff f93f 	bl	800b0f4 <tcp_free>
 800be76:	e004      	b.n	800be82 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800be78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be7a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800be7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be7e:	68db      	ldr	r3, [r3, #12]
 800be80:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800be82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be84:	2b00      	cmp	r3, #0
 800be86:	d1a9      	bne.n	800bddc <tcp_slowtmr+0x5ac>
    }
  }
}
 800be88:	bf00      	nop
 800be8a:	bf00      	nop
 800be8c:	3730      	adds	r7, #48	; 0x30
 800be8e:	46bd      	mov	sp, r7
 800be90:	bdb0      	pop	{r4, r5, r7, pc}
 800be92:	bf00      	nop
 800be94:	08017214 	.word	0x08017214
 800be98:	080176a4 	.word	0x080176a4
 800be9c:	08017258 	.word	0x08017258
 800bea0:	2000d378 	.word	0x2000d378
 800bea4:	2000d388 	.word	0x2000d388
 800bea8:	080176d4 	.word	0x080176d4
 800beac:	080176fc 	.word	0x080176fc

0800beb0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b082      	sub	sp, #8
 800beb4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800beb6:	4b2d      	ldr	r3, [pc, #180]	; (800bf6c <tcp_fasttmr+0xbc>)
 800beb8:	781b      	ldrb	r3, [r3, #0]
 800beba:	3301      	adds	r3, #1
 800bebc:	b2da      	uxtb	r2, r3
 800bebe:	4b2b      	ldr	r3, [pc, #172]	; (800bf6c <tcp_fasttmr+0xbc>)
 800bec0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800bec2:	4b2b      	ldr	r3, [pc, #172]	; (800bf70 <tcp_fasttmr+0xc0>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800bec8:	e048      	b.n	800bf5c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	7f9a      	ldrb	r2, [r3, #30]
 800bece:	4b27      	ldr	r3, [pc, #156]	; (800bf6c <tcp_fasttmr+0xbc>)
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	429a      	cmp	r2, r3
 800bed4:	d03f      	beq.n	800bf56 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800bed6:	4b25      	ldr	r3, [pc, #148]	; (800bf6c <tcp_fasttmr+0xbc>)
 800bed8:	781a      	ldrb	r2, [r3, #0]
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	8b5b      	ldrh	r3, [r3, #26]
 800bee2:	f003 0301 	and.w	r3, r3, #1
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d010      	beq.n	800bf0c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	8b5b      	ldrh	r3, [r3, #26]
 800beee:	f043 0302 	orr.w	r3, r3, #2
 800bef2:	b29a      	uxth	r2, r3
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f003 facf 	bl	800f49c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	8b5b      	ldrh	r3, [r3, #26]
 800bf02:	f023 0303 	bic.w	r3, r3, #3
 800bf06:	b29a      	uxth	r2, r3
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	8b5b      	ldrh	r3, [r3, #26]
 800bf10:	f003 0308 	and.w	r3, r3, #8
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d009      	beq.n	800bf2c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	8b5b      	ldrh	r3, [r3, #26]
 800bf1c:	f023 0308 	bic.w	r3, r3, #8
 800bf20:	b29a      	uxth	r2, r3
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f7ff fa78 	bl	800b41c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	68db      	ldr	r3, [r3, #12]
 800bf30:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d00a      	beq.n	800bf50 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800bf3a:	4b0e      	ldr	r3, [pc, #56]	; (800bf74 <tcp_fasttmr+0xc4>)
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f000 f819 	bl	800bf78 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800bf46:	4b0b      	ldr	r3, [pc, #44]	; (800bf74 <tcp_fasttmr+0xc4>)
 800bf48:	781b      	ldrb	r3, [r3, #0]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d000      	beq.n	800bf50 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800bf4e:	e7b8      	b.n	800bec2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	607b      	str	r3, [r7, #4]
 800bf54:	e002      	b.n	800bf5c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	68db      	ldr	r3, [r3, #12]
 800bf5a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d1b3      	bne.n	800beca <tcp_fasttmr+0x1a>
    }
  }
}
 800bf62:	bf00      	nop
 800bf64:	bf00      	nop
 800bf66:	3708      	adds	r7, #8
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}
 800bf6c:	2000d38e 	.word	0x2000d38e
 800bf70:	2000d384 	.word	0x2000d384
 800bf74:	2000d38c 	.word	0x2000d38c

0800bf78 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800bf78:	b590      	push	{r4, r7, lr}
 800bf7a:	b085      	sub	sp, #20
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d109      	bne.n	800bf9a <tcp_process_refused_data+0x22>
 800bf86:	4b37      	ldr	r3, [pc, #220]	; (800c064 <tcp_process_refused_data+0xec>)
 800bf88:	f240 6209 	movw	r2, #1545	; 0x609
 800bf8c:	4936      	ldr	r1, [pc, #216]	; (800c068 <tcp_process_refused_data+0xf0>)
 800bf8e:	4837      	ldr	r0, [pc, #220]	; (800c06c <tcp_process_refused_data+0xf4>)
 800bf90:	f009 fae6 	bl	8015560 <iprintf>
 800bf94:	f06f 030f 	mvn.w	r3, #15
 800bf98:	e060      	b.n	800c05c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf9e:	7b5b      	ldrb	r3, [r3, #13]
 800bfa0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bfa6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d00b      	beq.n	800bfd0 <tcp_process_refused_data+0x58>
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6918      	ldr	r0, [r3, #16]
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	68ba      	ldr	r2, [r7, #8]
 800bfc6:	6879      	ldr	r1, [r7, #4]
 800bfc8:	47a0      	blx	r4
 800bfca:	4603      	mov	r3, r0
 800bfcc:	73fb      	strb	r3, [r7, #15]
 800bfce:	e007      	b.n	800bfe0 <tcp_process_refused_data+0x68>
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	68ba      	ldr	r2, [r7, #8]
 800bfd4:	6879      	ldr	r1, [r7, #4]
 800bfd6:	2000      	movs	r0, #0
 800bfd8:	f000 f8a4 	bl	800c124 <tcp_recv_null>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800bfe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d12a      	bne.n	800c03e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800bfe8:	7bbb      	ldrb	r3, [r7, #14]
 800bfea:	f003 0320 	and.w	r3, r3, #32
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d033      	beq.n	800c05a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bff6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bffa:	d005      	beq.n	800c008 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c000:	3301      	adds	r3, #1
 800c002:	b29a      	uxth	r2, r3
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d00b      	beq.n	800c02a <tcp_process_refused_data+0xb2>
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6918      	ldr	r0, [r3, #16]
 800c01c:	2300      	movs	r3, #0
 800c01e:	2200      	movs	r2, #0
 800c020:	6879      	ldr	r1, [r7, #4]
 800c022:	47a0      	blx	r4
 800c024:	4603      	mov	r3, r0
 800c026:	73fb      	strb	r3, [r7, #15]
 800c028:	e001      	b.n	800c02e <tcp_process_refused_data+0xb6>
 800c02a:	2300      	movs	r3, #0
 800c02c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800c02e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c032:	f113 0f0d 	cmn.w	r3, #13
 800c036:	d110      	bne.n	800c05a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800c038:	f06f 030c 	mvn.w	r3, #12
 800c03c:	e00e      	b.n	800c05c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800c03e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c042:	f113 0f0d 	cmn.w	r3, #13
 800c046:	d102      	bne.n	800c04e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800c048:	f06f 030c 	mvn.w	r3, #12
 800c04c:	e006      	b.n	800c05c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	68ba      	ldr	r2, [r7, #8]
 800c052:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800c054:	f06f 0304 	mvn.w	r3, #4
 800c058:	e000      	b.n	800c05c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800c05a:	2300      	movs	r3, #0
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3714      	adds	r7, #20
 800c060:	46bd      	mov	sp, r7
 800c062:	bd90      	pop	{r4, r7, pc}
 800c064:	08017214 	.word	0x08017214
 800c068:	08017724 	.word	0x08017724
 800c06c:	08017258 	.word	0x08017258

0800c070 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b084      	sub	sp, #16
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800c078:	e007      	b.n	800c08a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	f000 f80a 	bl	800c09a <tcp_seg_free>
    seg = next;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d1f4      	bne.n	800c07a <tcp_segs_free+0xa>
  }
}
 800c090:	bf00      	nop
 800c092:	bf00      	nop
 800c094:	3710      	adds	r7, #16
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}

0800c09a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800c09a:	b580      	push	{r7, lr}
 800c09c:	b082      	sub	sp, #8
 800c09e:	af00      	add	r7, sp, #0
 800c0a0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d00c      	beq.n	800c0c2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	685b      	ldr	r3, [r3, #4]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d004      	beq.n	800c0ba <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	685b      	ldr	r3, [r3, #4]
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f7fe fd61 	bl	800ab7c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800c0ba:	6879      	ldr	r1, [r7, #4]
 800c0bc:	2003      	movs	r0, #3
 800c0be:	f7fd fead 	bl	8009e1c <memp_free>
  }
}
 800c0c2:	bf00      	nop
 800c0c4:	3708      	adds	r7, #8
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}
	...

0800c0cc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b084      	sub	sp, #16
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d106      	bne.n	800c0e8 <tcp_seg_copy+0x1c>
 800c0da:	4b0f      	ldr	r3, [pc, #60]	; (800c118 <tcp_seg_copy+0x4c>)
 800c0dc:	f240 6282 	movw	r2, #1666	; 0x682
 800c0e0:	490e      	ldr	r1, [pc, #56]	; (800c11c <tcp_seg_copy+0x50>)
 800c0e2:	480f      	ldr	r0, [pc, #60]	; (800c120 <tcp_seg_copy+0x54>)
 800c0e4:	f009 fa3c 	bl	8015560 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800c0e8:	2003      	movs	r0, #3
 800c0ea:	f7fd fe21 	bl	8009d30 <memp_malloc>
 800c0ee:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d101      	bne.n	800c0fa <tcp_seg_copy+0x2e>
    return NULL;
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	e00a      	b.n	800c110 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800c0fa:	2210      	movs	r2, #16
 800c0fc:	6879      	ldr	r1, [r7, #4]
 800c0fe:	68f8      	ldr	r0, [r7, #12]
 800c100:	f009 fa18 	bl	8015534 <memcpy>
  pbuf_ref(cseg->p);
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	685b      	ldr	r3, [r3, #4]
 800c108:	4618      	mov	r0, r3
 800c10a:	f7fe fddd 	bl	800acc8 <pbuf_ref>
  return cseg;
 800c10e:	68fb      	ldr	r3, [r7, #12]
}
 800c110:	4618      	mov	r0, r3
 800c112:	3710      	adds	r7, #16
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}
 800c118:	08017214 	.word	0x08017214
 800c11c:	08017768 	.word	0x08017768
 800c120:	08017258 	.word	0x08017258

0800c124 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b084      	sub	sp, #16
 800c128:	af00      	add	r7, sp, #0
 800c12a:	60f8      	str	r0, [r7, #12]
 800c12c:	60b9      	str	r1, [r7, #8]
 800c12e:	607a      	str	r2, [r7, #4]
 800c130:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d109      	bne.n	800c14c <tcp_recv_null+0x28>
 800c138:	4b12      	ldr	r3, [pc, #72]	; (800c184 <tcp_recv_null+0x60>)
 800c13a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c13e:	4912      	ldr	r1, [pc, #72]	; (800c188 <tcp_recv_null+0x64>)
 800c140:	4812      	ldr	r0, [pc, #72]	; (800c18c <tcp_recv_null+0x68>)
 800c142:	f009 fa0d 	bl	8015560 <iprintf>
 800c146:	f06f 030f 	mvn.w	r3, #15
 800c14a:	e016      	b.n	800c17a <tcp_recv_null+0x56>

  if (p != NULL) {
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d009      	beq.n	800c166 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	891b      	ldrh	r3, [r3, #8]
 800c156:	4619      	mov	r1, r3
 800c158:	68b8      	ldr	r0, [r7, #8]
 800c15a:	f7ff fb19 	bl	800b790 <tcp_recved>
    pbuf_free(p);
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f7fe fd0c 	bl	800ab7c <pbuf_free>
 800c164:	e008      	b.n	800c178 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800c166:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d104      	bne.n	800c178 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800c16e:	68b8      	ldr	r0, [r7, #8]
 800c170:	f7ff f9be 	bl	800b4f0 <tcp_close>
 800c174:	4603      	mov	r3, r0
 800c176:	e000      	b.n	800c17a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800c178:	2300      	movs	r3, #0
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	3710      	adds	r7, #16
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}
 800c182:	bf00      	nop
 800c184:	08017214 	.word	0x08017214
 800c188:	08017784 	.word	0x08017784
 800c18c:	08017258 	.word	0x08017258

0800c190 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b086      	sub	sp, #24
 800c194:	af00      	add	r7, sp, #0
 800c196:	4603      	mov	r3, r0
 800c198:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800c19a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	db01      	blt.n	800c1a6 <tcp_kill_prio+0x16>
 800c1a2:	79fb      	ldrb	r3, [r7, #7]
 800c1a4:	e000      	b.n	800c1a8 <tcp_kill_prio+0x18>
 800c1a6:	237f      	movs	r3, #127	; 0x7f
 800c1a8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800c1aa:	7afb      	ldrb	r3, [r7, #11]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d034      	beq.n	800c21a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800c1b0:	7afb      	ldrb	r3, [r7, #11]
 800c1b2:	3b01      	subs	r3, #1
 800c1b4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c1be:	4b19      	ldr	r3, [pc, #100]	; (800c224 <tcp_kill_prio+0x94>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	617b      	str	r3, [r7, #20]
 800c1c4:	e01f      	b.n	800c206 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	7d5b      	ldrb	r3, [r3, #21]
 800c1ca:	7afa      	ldrb	r2, [r7, #11]
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	d80c      	bhi.n	800c1ea <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800c1d4:	7afa      	ldrb	r2, [r7, #11]
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d112      	bne.n	800c200 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c1da:	4b13      	ldr	r3, [pc, #76]	; (800c228 <tcp_kill_prio+0x98>)
 800c1dc:	681a      	ldr	r2, [r3, #0]
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	6a1b      	ldr	r3, [r3, #32]
 800c1e2:	1ad3      	subs	r3, r2, r3
 800c1e4:	68fa      	ldr	r2, [r7, #12]
 800c1e6:	429a      	cmp	r2, r3
 800c1e8:	d80a      	bhi.n	800c200 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800c1ea:	4b0f      	ldr	r3, [pc, #60]	; (800c228 <tcp_kill_prio+0x98>)
 800c1ec:	681a      	ldr	r2, [r3, #0]
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	6a1b      	ldr	r3, [r3, #32]
 800c1f2:	1ad3      	subs	r3, r2, r3
 800c1f4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800c1f6:	697b      	ldr	r3, [r7, #20]
 800c1f8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	7d5b      	ldrb	r3, [r3, #21]
 800c1fe:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c200:	697b      	ldr	r3, [r7, #20]
 800c202:	68db      	ldr	r3, [r3, #12]
 800c204:	617b      	str	r3, [r7, #20]
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d1dc      	bne.n	800c1c6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d004      	beq.n	800c21c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c212:	6938      	ldr	r0, [r7, #16]
 800c214:	f7ff fa56 	bl	800b6c4 <tcp_abort>
 800c218:	e000      	b.n	800c21c <tcp_kill_prio+0x8c>
    return;
 800c21a:	bf00      	nop
  }
}
 800c21c:	3718      	adds	r7, #24
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}
 800c222:	bf00      	nop
 800c224:	2000d384 	.word	0x2000d384
 800c228:	2000d378 	.word	0x2000d378

0800c22c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b086      	sub	sp, #24
 800c230:	af00      	add	r7, sp, #0
 800c232:	4603      	mov	r3, r0
 800c234:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800c236:	79fb      	ldrb	r3, [r7, #7]
 800c238:	2b08      	cmp	r3, #8
 800c23a:	d009      	beq.n	800c250 <tcp_kill_state+0x24>
 800c23c:	79fb      	ldrb	r3, [r7, #7]
 800c23e:	2b09      	cmp	r3, #9
 800c240:	d006      	beq.n	800c250 <tcp_kill_state+0x24>
 800c242:	4b1a      	ldr	r3, [pc, #104]	; (800c2ac <tcp_kill_state+0x80>)
 800c244:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800c248:	4919      	ldr	r1, [pc, #100]	; (800c2b0 <tcp_kill_state+0x84>)
 800c24a:	481a      	ldr	r0, [pc, #104]	; (800c2b4 <tcp_kill_state+0x88>)
 800c24c:	f009 f988 	bl	8015560 <iprintf>

  inactivity = 0;
 800c250:	2300      	movs	r3, #0
 800c252:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c254:	2300      	movs	r3, #0
 800c256:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c258:	4b17      	ldr	r3, [pc, #92]	; (800c2b8 <tcp_kill_state+0x8c>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	617b      	str	r3, [r7, #20]
 800c25e:	e017      	b.n	800c290 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	7d1b      	ldrb	r3, [r3, #20]
 800c264:	79fa      	ldrb	r2, [r7, #7]
 800c266:	429a      	cmp	r2, r3
 800c268:	d10f      	bne.n	800c28a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c26a:	4b14      	ldr	r3, [pc, #80]	; (800c2bc <tcp_kill_state+0x90>)
 800c26c:	681a      	ldr	r2, [r3, #0]
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	6a1b      	ldr	r3, [r3, #32]
 800c272:	1ad3      	subs	r3, r2, r3
 800c274:	68fa      	ldr	r2, [r7, #12]
 800c276:	429a      	cmp	r2, r3
 800c278:	d807      	bhi.n	800c28a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800c27a:	4b10      	ldr	r3, [pc, #64]	; (800c2bc <tcp_kill_state+0x90>)
 800c27c:	681a      	ldr	r2, [r3, #0]
 800c27e:	697b      	ldr	r3, [r7, #20]
 800c280:	6a1b      	ldr	r3, [r3, #32]
 800c282:	1ad3      	subs	r3, r2, r3
 800c284:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800c286:	697b      	ldr	r3, [r7, #20]
 800c288:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	68db      	ldr	r3, [r3, #12]
 800c28e:	617b      	str	r3, [r7, #20]
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d1e4      	bne.n	800c260 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800c296:	693b      	ldr	r3, [r7, #16]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d003      	beq.n	800c2a4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800c29c:	2100      	movs	r1, #0
 800c29e:	6938      	ldr	r0, [r7, #16]
 800c2a0:	f7ff f952 	bl	800b548 <tcp_abandon>
  }
}
 800c2a4:	bf00      	nop
 800c2a6:	3718      	adds	r7, #24
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}
 800c2ac:	08017214 	.word	0x08017214
 800c2b0:	080177a0 	.word	0x080177a0
 800c2b4:	08017258 	.word	0x08017258
 800c2b8:	2000d384 	.word	0x2000d384
 800c2bc:	2000d378 	.word	0x2000d378

0800c2c0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b084      	sub	sp, #16
 800c2c4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c2ce:	4b12      	ldr	r3, [pc, #72]	; (800c318 <tcp_kill_timewait+0x58>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	60fb      	str	r3, [r7, #12]
 800c2d4:	e012      	b.n	800c2fc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c2d6:	4b11      	ldr	r3, [pc, #68]	; (800c31c <tcp_kill_timewait+0x5c>)
 800c2d8:	681a      	ldr	r2, [r3, #0]
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	6a1b      	ldr	r3, [r3, #32]
 800c2de:	1ad3      	subs	r3, r2, r3
 800c2e0:	687a      	ldr	r2, [r7, #4]
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d807      	bhi.n	800c2f6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800c2e6:	4b0d      	ldr	r3, [pc, #52]	; (800c31c <tcp_kill_timewait+0x5c>)
 800c2e8:	681a      	ldr	r2, [r3, #0]
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	6a1b      	ldr	r3, [r3, #32]
 800c2ee:	1ad3      	subs	r3, r2, r3
 800c2f0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	68db      	ldr	r3, [r3, #12]
 800c2fa:	60fb      	str	r3, [r7, #12]
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d1e9      	bne.n	800c2d6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d002      	beq.n	800c30e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c308:	68b8      	ldr	r0, [r7, #8]
 800c30a:	f7ff f9db 	bl	800b6c4 <tcp_abort>
  }
}
 800c30e:	bf00      	nop
 800c310:	3710      	adds	r7, #16
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
 800c316:	bf00      	nop
 800c318:	2000d388 	.word	0x2000d388
 800c31c:	2000d378 	.word	0x2000d378

0800c320 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b082      	sub	sp, #8
 800c324:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800c326:	4b10      	ldr	r3, [pc, #64]	; (800c368 <tcp_handle_closepend+0x48>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c32c:	e014      	b.n	800c358 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	68db      	ldr	r3, [r3, #12]
 800c332:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	8b5b      	ldrh	r3, [r3, #26]
 800c338:	f003 0308 	and.w	r3, r3, #8
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d009      	beq.n	800c354 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	8b5b      	ldrh	r3, [r3, #26]
 800c344:	f023 0308 	bic.w	r3, r3, #8
 800c348:	b29a      	uxth	r2, r3
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f7ff f864 	bl	800b41c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d1e7      	bne.n	800c32e <tcp_handle_closepend+0xe>
  }
}
 800c35e:	bf00      	nop
 800c360:	bf00      	nop
 800c362:	3708      	adds	r7, #8
 800c364:	46bd      	mov	sp, r7
 800c366:	bd80      	pop	{r7, pc}
 800c368:	2000d384 	.word	0x2000d384

0800c36c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b084      	sub	sp, #16
 800c370:	af00      	add	r7, sp, #0
 800c372:	4603      	mov	r3, r0
 800c374:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c376:	2001      	movs	r0, #1
 800c378:	f7fd fcda 	bl	8009d30 <memp_malloc>
 800c37c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d126      	bne.n	800c3d2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800c384:	f7ff ffcc 	bl	800c320 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800c388:	f7ff ff9a 	bl	800c2c0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c38c:	2001      	movs	r0, #1
 800c38e:	f7fd fccf 	bl	8009d30 <memp_malloc>
 800c392:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d11b      	bne.n	800c3d2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800c39a:	2009      	movs	r0, #9
 800c39c:	f7ff ff46 	bl	800c22c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c3a0:	2001      	movs	r0, #1
 800c3a2:	f7fd fcc5 	bl	8009d30 <memp_malloc>
 800c3a6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d111      	bne.n	800c3d2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800c3ae:	2008      	movs	r0, #8
 800c3b0:	f7ff ff3c 	bl	800c22c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c3b4:	2001      	movs	r0, #1
 800c3b6:	f7fd fcbb 	bl	8009d30 <memp_malloc>
 800c3ba:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d107      	bne.n	800c3d2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800c3c2:	79fb      	ldrb	r3, [r7, #7]
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f7ff fee3 	bl	800c190 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c3ca:	2001      	movs	r0, #1
 800c3cc:	f7fd fcb0 	bl	8009d30 <memp_malloc>
 800c3d0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d03f      	beq.n	800c458 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800c3d8:	229c      	movs	r2, #156	; 0x9c
 800c3da:	2100      	movs	r1, #0
 800c3dc:	68f8      	ldr	r0, [r7, #12]
 800c3de:	f009 f8b7 	bl	8015550 <memset>
    pcb->prio = prio;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	79fa      	ldrb	r2, [r7, #7]
 800c3e6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c3ee:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c3f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	22ff      	movs	r2, #255	; 0xff
 800c406:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c40e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	2206      	movs	r2, #6
 800c414:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	2206      	movs	r2, #6
 800c41c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c424:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	2201      	movs	r2, #1
 800c42a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800c42e:	4b0d      	ldr	r3, [pc, #52]	; (800c464 <tcp_alloc+0xf8>)
 800c430:	681a      	ldr	r2, [r3, #0]
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800c436:	4b0c      	ldr	r3, [pc, #48]	; (800c468 <tcp_alloc+0xfc>)
 800c438:	781a      	ldrb	r2, [r3, #0]
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800c444:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	4a08      	ldr	r2, [pc, #32]	; (800c46c <tcp_alloc+0x100>)
 800c44c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	4a07      	ldr	r2, [pc, #28]	; (800c470 <tcp_alloc+0x104>)
 800c454:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800c458:	68fb      	ldr	r3, [r7, #12]
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	3710      	adds	r7, #16
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}
 800c462:	bf00      	nop
 800c464:	2000d378 	.word	0x2000d378
 800c468:	2000d38e 	.word	0x2000d38e
 800c46c:	0800c125 	.word	0x0800c125
 800c470:	006ddd00 	.word	0x006ddd00

0800c474 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b082      	sub	sp, #8
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d107      	bne.n	800c492 <tcp_pcb_purge+0x1e>
 800c482:	4b21      	ldr	r3, [pc, #132]	; (800c508 <tcp_pcb_purge+0x94>)
 800c484:	f640 0251 	movw	r2, #2129	; 0x851
 800c488:	4920      	ldr	r1, [pc, #128]	; (800c50c <tcp_pcb_purge+0x98>)
 800c48a:	4821      	ldr	r0, [pc, #132]	; (800c510 <tcp_pcb_purge+0x9c>)
 800c48c:	f009 f868 	bl	8015560 <iprintf>
 800c490:	e037      	b.n	800c502 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	7d1b      	ldrb	r3, [r3, #20]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d033      	beq.n	800c502 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800c49e:	2b0a      	cmp	r3, #10
 800c4a0:	d02f      	beq.n	800c502 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800c4a6:	2b01      	cmp	r3, #1
 800c4a8:	d02b      	beq.n	800c502 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d007      	beq.n	800c4c2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f7fe fb60 	bl	800ab7c <pbuf_free>
      pcb->refused_data = NULL;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d002      	beq.n	800c4d0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f000 f986 	bl	800c7dc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c4d6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f7ff fdc7 	bl	800c070 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f7ff fdc2 	bl	800c070 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	66da      	str	r2, [r3, #108]	; 0x6c
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800c502:	3708      	adds	r7, #8
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}
 800c508:	08017214 	.word	0x08017214
 800c50c:	08017860 	.word	0x08017860
 800c510:	08017258 	.word	0x08017258

0800c514 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b084      	sub	sp, #16
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
 800c51c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d106      	bne.n	800c532 <tcp_pcb_remove+0x1e>
 800c524:	4b3e      	ldr	r3, [pc, #248]	; (800c620 <tcp_pcb_remove+0x10c>)
 800c526:	f640 0283 	movw	r2, #2179	; 0x883
 800c52a:	493e      	ldr	r1, [pc, #248]	; (800c624 <tcp_pcb_remove+0x110>)
 800c52c:	483e      	ldr	r0, [pc, #248]	; (800c628 <tcp_pcb_remove+0x114>)
 800c52e:	f009 f817 	bl	8015560 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d106      	bne.n	800c546 <tcp_pcb_remove+0x32>
 800c538:	4b39      	ldr	r3, [pc, #228]	; (800c620 <tcp_pcb_remove+0x10c>)
 800c53a:	f640 0284 	movw	r2, #2180	; 0x884
 800c53e:	493b      	ldr	r1, [pc, #236]	; (800c62c <tcp_pcb_remove+0x118>)
 800c540:	4839      	ldr	r0, [pc, #228]	; (800c628 <tcp_pcb_remove+0x114>)
 800c542:	f009 f80d 	bl	8015560 <iprintf>

  TCP_RMV(pcblist, pcb);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	683a      	ldr	r2, [r7, #0]
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d105      	bne.n	800c55c <tcp_pcb_remove+0x48>
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	68da      	ldr	r2, [r3, #12]
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	601a      	str	r2, [r3, #0]
 800c55a:	e013      	b.n	800c584 <tcp_pcb_remove+0x70>
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	60fb      	str	r3, [r7, #12]
 800c562:	e00c      	b.n	800c57e <tcp_pcb_remove+0x6a>
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	68db      	ldr	r3, [r3, #12]
 800c568:	683a      	ldr	r2, [r7, #0]
 800c56a:	429a      	cmp	r2, r3
 800c56c:	d104      	bne.n	800c578 <tcp_pcb_remove+0x64>
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	68da      	ldr	r2, [r3, #12]
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	60da      	str	r2, [r3, #12]
 800c576:	e005      	b.n	800c584 <tcp_pcb_remove+0x70>
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	68db      	ldr	r3, [r3, #12]
 800c57c:	60fb      	str	r3, [r7, #12]
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d1ef      	bne.n	800c564 <tcp_pcb_remove+0x50>
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	2200      	movs	r2, #0
 800c588:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800c58a:	6838      	ldr	r0, [r7, #0]
 800c58c:	f7ff ff72 	bl	800c474 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	7d1b      	ldrb	r3, [r3, #20]
 800c594:	2b0a      	cmp	r3, #10
 800c596:	d013      	beq.n	800c5c0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800c59c:	2b01      	cmp	r3, #1
 800c59e:	d00f      	beq.n	800c5c0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	8b5b      	ldrh	r3, [r3, #26]
 800c5a4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d009      	beq.n	800c5c0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	8b5b      	ldrh	r3, [r3, #26]
 800c5b0:	f043 0302 	orr.w	r3, r3, #2
 800c5b4:	b29a      	uxth	r2, r3
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c5ba:	6838      	ldr	r0, [r7, #0]
 800c5bc:	f002 ff6e 	bl	800f49c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	7d1b      	ldrb	r3, [r3, #20]
 800c5c4:	2b01      	cmp	r3, #1
 800c5c6:	d020      	beq.n	800c60a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d006      	beq.n	800c5de <tcp_pcb_remove+0xca>
 800c5d0:	4b13      	ldr	r3, [pc, #76]	; (800c620 <tcp_pcb_remove+0x10c>)
 800c5d2:	f640 0293 	movw	r2, #2195	; 0x893
 800c5d6:	4916      	ldr	r1, [pc, #88]	; (800c630 <tcp_pcb_remove+0x11c>)
 800c5d8:	4813      	ldr	r0, [pc, #76]	; (800c628 <tcp_pcb_remove+0x114>)
 800c5da:	f008 ffc1 	bl	8015560 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d006      	beq.n	800c5f4 <tcp_pcb_remove+0xe0>
 800c5e6:	4b0e      	ldr	r3, [pc, #56]	; (800c620 <tcp_pcb_remove+0x10c>)
 800c5e8:	f640 0294 	movw	r2, #2196	; 0x894
 800c5ec:	4911      	ldr	r1, [pc, #68]	; (800c634 <tcp_pcb_remove+0x120>)
 800c5ee:	480e      	ldr	r0, [pc, #56]	; (800c628 <tcp_pcb_remove+0x114>)
 800c5f0:	f008 ffb6 	bl	8015560 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d006      	beq.n	800c60a <tcp_pcb_remove+0xf6>
 800c5fc:	4b08      	ldr	r3, [pc, #32]	; (800c620 <tcp_pcb_remove+0x10c>)
 800c5fe:	f640 0296 	movw	r2, #2198	; 0x896
 800c602:	490d      	ldr	r1, [pc, #52]	; (800c638 <tcp_pcb_remove+0x124>)
 800c604:	4808      	ldr	r0, [pc, #32]	; (800c628 <tcp_pcb_remove+0x114>)
 800c606:	f008 ffab 	bl	8015560 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	2200      	movs	r2, #0
 800c60e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	2200      	movs	r2, #0
 800c614:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800c616:	bf00      	nop
 800c618:	3710      	adds	r7, #16
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}
 800c61e:	bf00      	nop
 800c620:	08017214 	.word	0x08017214
 800c624:	0801787c 	.word	0x0801787c
 800c628:	08017258 	.word	0x08017258
 800c62c:	08017898 	.word	0x08017898
 800c630:	080178b8 	.word	0x080178b8
 800c634:	080178d0 	.word	0x080178d0
 800c638:	080178ec 	.word	0x080178ec

0800c63c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b082      	sub	sp, #8
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d106      	bne.n	800c658 <tcp_next_iss+0x1c>
 800c64a:	4b0a      	ldr	r3, [pc, #40]	; (800c674 <tcp_next_iss+0x38>)
 800c64c:	f640 02af 	movw	r2, #2223	; 0x8af
 800c650:	4909      	ldr	r1, [pc, #36]	; (800c678 <tcp_next_iss+0x3c>)
 800c652:	480a      	ldr	r0, [pc, #40]	; (800c67c <tcp_next_iss+0x40>)
 800c654:	f008 ff84 	bl	8015560 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800c658:	4b09      	ldr	r3, [pc, #36]	; (800c680 <tcp_next_iss+0x44>)
 800c65a:	681a      	ldr	r2, [r3, #0]
 800c65c:	4b09      	ldr	r3, [pc, #36]	; (800c684 <tcp_next_iss+0x48>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	4413      	add	r3, r2
 800c662:	4a07      	ldr	r2, [pc, #28]	; (800c680 <tcp_next_iss+0x44>)
 800c664:	6013      	str	r3, [r2, #0]
  return iss;
 800c666:	4b06      	ldr	r3, [pc, #24]	; (800c680 <tcp_next_iss+0x44>)
 800c668:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	3708      	adds	r7, #8
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}
 800c672:	bf00      	nop
 800c674:	08017214 	.word	0x08017214
 800c678:	08017904 	.word	0x08017904
 800c67c:	08017258 	.word	0x08017258
 800c680:	20000028 	.word	0x20000028
 800c684:	2000d378 	.word	0x2000d378

0800c688 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b086      	sub	sp, #24
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	4603      	mov	r3, r0
 800c690:	60b9      	str	r1, [r7, #8]
 800c692:	607a      	str	r2, [r7, #4]
 800c694:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d106      	bne.n	800c6aa <tcp_eff_send_mss_netif+0x22>
 800c69c:	4b14      	ldr	r3, [pc, #80]	; (800c6f0 <tcp_eff_send_mss_netif+0x68>)
 800c69e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800c6a2:	4914      	ldr	r1, [pc, #80]	; (800c6f4 <tcp_eff_send_mss_netif+0x6c>)
 800c6a4:	4814      	ldr	r0, [pc, #80]	; (800c6f8 <tcp_eff_send_mss_netif+0x70>)
 800c6a6:	f008 ff5b 	bl	8015560 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d101      	bne.n	800c6b4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800c6b0:	89fb      	ldrh	r3, [r7, #14]
 800c6b2:	e019      	b.n	800c6e8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c6b8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800c6ba:	8afb      	ldrh	r3, [r7, #22]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d012      	beq.n	800c6e6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800c6c0:	2328      	movs	r3, #40	; 0x28
 800c6c2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800c6c4:	8afa      	ldrh	r2, [r7, #22]
 800c6c6:	8abb      	ldrh	r3, [r7, #20]
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	d904      	bls.n	800c6d6 <tcp_eff_send_mss_netif+0x4e>
 800c6cc:	8afa      	ldrh	r2, [r7, #22]
 800c6ce:	8abb      	ldrh	r3, [r7, #20]
 800c6d0:	1ad3      	subs	r3, r2, r3
 800c6d2:	b29b      	uxth	r3, r3
 800c6d4:	e000      	b.n	800c6d8 <tcp_eff_send_mss_netif+0x50>
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800c6da:	8a7a      	ldrh	r2, [r7, #18]
 800c6dc:	89fb      	ldrh	r3, [r7, #14]
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	bf28      	it	cs
 800c6e2:	4613      	movcs	r3, r2
 800c6e4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800c6e6:	89fb      	ldrh	r3, [r7, #14]
}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	3718      	adds	r7, #24
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd80      	pop	{r7, pc}
 800c6f0:	08017214 	.word	0x08017214
 800c6f4:	08017920 	.word	0x08017920
 800c6f8:	08017258 	.word	0x08017258

0800c6fc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b084      	sub	sp, #16
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d119      	bne.n	800c744 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800c710:	4b10      	ldr	r3, [pc, #64]	; (800c754 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800c712:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800c716:	4910      	ldr	r1, [pc, #64]	; (800c758 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800c718:	4810      	ldr	r0, [pc, #64]	; (800c75c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800c71a:	f008 ff21 	bl	8015560 <iprintf>

  while (pcb != NULL) {
 800c71e:	e011      	b.n	800c744 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	681a      	ldr	r2, [r3, #0]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	429a      	cmp	r2, r3
 800c72a:	d108      	bne.n	800c73e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	68db      	ldr	r3, [r3, #12]
 800c730:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800c732:	68f8      	ldr	r0, [r7, #12]
 800c734:	f7fe ffc6 	bl	800b6c4 <tcp_abort>
      pcb = next;
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	60fb      	str	r3, [r7, #12]
 800c73c:	e002      	b.n	800c744 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	68db      	ldr	r3, [r3, #12]
 800c742:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d1ea      	bne.n	800c720 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800c74a:	bf00      	nop
 800c74c:	bf00      	nop
 800c74e:	3710      	adds	r7, #16
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}
 800c754:	08017214 	.word	0x08017214
 800c758:	08017948 	.word	0x08017948
 800c75c:	08017258 	.word	0x08017258

0800c760 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b084      	sub	sp, #16
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
 800c768:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d02a      	beq.n	800c7c6 <tcp_netif_ip_addr_changed+0x66>
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d026      	beq.n	800c7c6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800c778:	4b15      	ldr	r3, [pc, #84]	; (800c7d0 <tcp_netif_ip_addr_changed+0x70>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	4619      	mov	r1, r3
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f7ff ffbc 	bl	800c6fc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800c784:	4b13      	ldr	r3, [pc, #76]	; (800c7d4 <tcp_netif_ip_addr_changed+0x74>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	4619      	mov	r1, r3
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f7ff ffb6 	bl	800c6fc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d017      	beq.n	800c7c6 <tcp_netif_ip_addr_changed+0x66>
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d013      	beq.n	800c7c6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c79e:	4b0e      	ldr	r3, [pc, #56]	; (800c7d8 <tcp_netif_ip_addr_changed+0x78>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	60fb      	str	r3, [r7, #12]
 800c7a4:	e00c      	b.n	800c7c0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	681a      	ldr	r2, [r3, #0]
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	429a      	cmp	r2, r3
 800c7b0:	d103      	bne.n	800c7ba <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	681a      	ldr	r2, [r3, #0]
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	68db      	ldr	r3, [r3, #12]
 800c7be:	60fb      	str	r3, [r7, #12]
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d1ef      	bne.n	800c7a6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800c7c6:	bf00      	nop
 800c7c8:	3710      	adds	r7, #16
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}
 800c7ce:	bf00      	nop
 800c7d0:	2000d384 	.word	0x2000d384
 800c7d4:	2000d37c 	.word	0x2000d37c
 800c7d8:	2000d380 	.word	0x2000d380

0800c7dc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b082      	sub	sp, #8
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d007      	beq.n	800c7fc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f7ff fc3d 	bl	800c070 <tcp_segs_free>
    pcb->ooseq = NULL;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800c7fc:	bf00      	nop
 800c7fe:	3708      	adds	r7, #8
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800c804:	b590      	push	{r4, r7, lr}
 800c806:	b08d      	sub	sp, #52	; 0x34
 800c808:	af04      	add	r7, sp, #16
 800c80a:	6078      	str	r0, [r7, #4]
 800c80c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d105      	bne.n	800c820 <tcp_input+0x1c>
 800c814:	4b9b      	ldr	r3, [pc, #620]	; (800ca84 <tcp_input+0x280>)
 800c816:	2283      	movs	r2, #131	; 0x83
 800c818:	499b      	ldr	r1, [pc, #620]	; (800ca88 <tcp_input+0x284>)
 800c81a:	489c      	ldr	r0, [pc, #624]	; (800ca8c <tcp_input+0x288>)
 800c81c:	f008 fea0 	bl	8015560 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	685b      	ldr	r3, [r3, #4]
 800c824:	4a9a      	ldr	r2, [pc, #616]	; (800ca90 <tcp_input+0x28c>)
 800c826:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	895b      	ldrh	r3, [r3, #10]
 800c82c:	2b13      	cmp	r3, #19
 800c82e:	f240 83d1 	bls.w	800cfd4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c832:	4b98      	ldr	r3, [pc, #608]	; (800ca94 <tcp_input+0x290>)
 800c834:	695b      	ldr	r3, [r3, #20]
 800c836:	4a97      	ldr	r2, [pc, #604]	; (800ca94 <tcp_input+0x290>)
 800c838:	6812      	ldr	r2, [r2, #0]
 800c83a:	4611      	mov	r1, r2
 800c83c:	4618      	mov	r0, r3
 800c83e:	f007 fdfd 	bl	801443c <ip4_addr_isbroadcast_u32>
 800c842:	4603      	mov	r3, r0
 800c844:	2b00      	cmp	r3, #0
 800c846:	f040 83c7 	bne.w	800cfd8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800c84a:	4b92      	ldr	r3, [pc, #584]	; (800ca94 <tcp_input+0x290>)
 800c84c:	695b      	ldr	r3, [r3, #20]
 800c84e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c852:	2be0      	cmp	r3, #224	; 0xe0
 800c854:	f000 83c0 	beq.w	800cfd8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800c858:	4b8d      	ldr	r3, [pc, #564]	; (800ca90 <tcp_input+0x28c>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	899b      	ldrh	r3, [r3, #12]
 800c85e:	b29b      	uxth	r3, r3
 800c860:	4618      	mov	r0, r3
 800c862:	f7fc fd8d 	bl	8009380 <lwip_htons>
 800c866:	4603      	mov	r3, r0
 800c868:	0b1b      	lsrs	r3, r3, #12
 800c86a:	b29b      	uxth	r3, r3
 800c86c:	b2db      	uxtb	r3, r3
 800c86e:	009b      	lsls	r3, r3, #2
 800c870:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800c872:	7cbb      	ldrb	r3, [r7, #18]
 800c874:	2b13      	cmp	r3, #19
 800c876:	f240 83b1 	bls.w	800cfdc <tcp_input+0x7d8>
 800c87a:	7cbb      	ldrb	r3, [r7, #18]
 800c87c:	b29a      	uxth	r2, r3
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	891b      	ldrh	r3, [r3, #8]
 800c882:	429a      	cmp	r2, r3
 800c884:	f200 83aa 	bhi.w	800cfdc <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c888:	7cbb      	ldrb	r3, [r7, #18]
 800c88a:	b29b      	uxth	r3, r3
 800c88c:	3b14      	subs	r3, #20
 800c88e:	b29a      	uxth	r2, r3
 800c890:	4b81      	ldr	r3, [pc, #516]	; (800ca98 <tcp_input+0x294>)
 800c892:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800c894:	4b81      	ldr	r3, [pc, #516]	; (800ca9c <tcp_input+0x298>)
 800c896:	2200      	movs	r2, #0
 800c898:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	895a      	ldrh	r2, [r3, #10]
 800c89e:	7cbb      	ldrb	r3, [r7, #18]
 800c8a0:	b29b      	uxth	r3, r3
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d309      	bcc.n	800c8ba <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800c8a6:	4b7c      	ldr	r3, [pc, #496]	; (800ca98 <tcp_input+0x294>)
 800c8a8:	881a      	ldrh	r2, [r3, #0]
 800c8aa:	4b7d      	ldr	r3, [pc, #500]	; (800caa0 <tcp_input+0x29c>)
 800c8ac:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800c8ae:	7cbb      	ldrb	r3, [r7, #18]
 800c8b0:	4619      	mov	r1, r3
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f7fe f8dc 	bl	800aa70 <pbuf_remove_header>
 800c8b8:	e04e      	b.n	800c958 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d105      	bne.n	800c8ce <tcp_input+0xca>
 800c8c2:	4b70      	ldr	r3, [pc, #448]	; (800ca84 <tcp_input+0x280>)
 800c8c4:	22c2      	movs	r2, #194	; 0xc2
 800c8c6:	4977      	ldr	r1, [pc, #476]	; (800caa4 <tcp_input+0x2a0>)
 800c8c8:	4870      	ldr	r0, [pc, #448]	; (800ca8c <tcp_input+0x288>)
 800c8ca:	f008 fe49 	bl	8015560 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800c8ce:	2114      	movs	r1, #20
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	f7fe f8cd 	bl	800aa70 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	895a      	ldrh	r2, [r3, #10]
 800c8da:	4b71      	ldr	r3, [pc, #452]	; (800caa0 <tcp_input+0x29c>)
 800c8dc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c8de:	4b6e      	ldr	r3, [pc, #440]	; (800ca98 <tcp_input+0x294>)
 800c8e0:	881a      	ldrh	r2, [r3, #0]
 800c8e2:	4b6f      	ldr	r3, [pc, #444]	; (800caa0 <tcp_input+0x29c>)
 800c8e4:	881b      	ldrh	r3, [r3, #0]
 800c8e6:	1ad3      	subs	r3, r2, r3
 800c8e8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800c8ea:	4b6d      	ldr	r3, [pc, #436]	; (800caa0 <tcp_input+0x29c>)
 800c8ec:	881b      	ldrh	r3, [r3, #0]
 800c8ee:	4619      	mov	r1, r3
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f7fe f8bd 	bl	800aa70 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	895b      	ldrh	r3, [r3, #10]
 800c8fc:	8a3a      	ldrh	r2, [r7, #16]
 800c8fe:	429a      	cmp	r2, r3
 800c900:	f200 836e 	bhi.w	800cfe0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	685b      	ldr	r3, [r3, #4]
 800c90a:	4a64      	ldr	r2, [pc, #400]	; (800ca9c <tcp_input+0x298>)
 800c90c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	8a3a      	ldrh	r2, [r7, #16]
 800c914:	4611      	mov	r1, r2
 800c916:	4618      	mov	r0, r3
 800c918:	f7fe f8aa 	bl	800aa70 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	891a      	ldrh	r2, [r3, #8]
 800c920:	8a3b      	ldrh	r3, [r7, #16]
 800c922:	1ad3      	subs	r3, r2, r3
 800c924:	b29a      	uxth	r2, r3
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	895b      	ldrh	r3, [r3, #10]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d005      	beq.n	800c93e <tcp_input+0x13a>
 800c932:	4b54      	ldr	r3, [pc, #336]	; (800ca84 <tcp_input+0x280>)
 800c934:	22df      	movs	r2, #223	; 0xdf
 800c936:	495c      	ldr	r1, [pc, #368]	; (800caa8 <tcp_input+0x2a4>)
 800c938:	4854      	ldr	r0, [pc, #336]	; (800ca8c <tcp_input+0x288>)
 800c93a:	f008 fe11 	bl	8015560 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	891a      	ldrh	r2, [r3, #8]
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	891b      	ldrh	r3, [r3, #8]
 800c948:	429a      	cmp	r2, r3
 800c94a:	d005      	beq.n	800c958 <tcp_input+0x154>
 800c94c:	4b4d      	ldr	r3, [pc, #308]	; (800ca84 <tcp_input+0x280>)
 800c94e:	22e0      	movs	r2, #224	; 0xe0
 800c950:	4956      	ldr	r1, [pc, #344]	; (800caac <tcp_input+0x2a8>)
 800c952:	484e      	ldr	r0, [pc, #312]	; (800ca8c <tcp_input+0x288>)
 800c954:	f008 fe04 	bl	8015560 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800c958:	4b4d      	ldr	r3, [pc, #308]	; (800ca90 <tcp_input+0x28c>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	881b      	ldrh	r3, [r3, #0]
 800c95e:	b29b      	uxth	r3, r3
 800c960:	4a4b      	ldr	r2, [pc, #300]	; (800ca90 <tcp_input+0x28c>)
 800c962:	6814      	ldr	r4, [r2, #0]
 800c964:	4618      	mov	r0, r3
 800c966:	f7fc fd0b 	bl	8009380 <lwip_htons>
 800c96a:	4603      	mov	r3, r0
 800c96c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800c96e:	4b48      	ldr	r3, [pc, #288]	; (800ca90 <tcp_input+0x28c>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	885b      	ldrh	r3, [r3, #2]
 800c974:	b29b      	uxth	r3, r3
 800c976:	4a46      	ldr	r2, [pc, #280]	; (800ca90 <tcp_input+0x28c>)
 800c978:	6814      	ldr	r4, [r2, #0]
 800c97a:	4618      	mov	r0, r3
 800c97c:	f7fc fd00 	bl	8009380 <lwip_htons>
 800c980:	4603      	mov	r3, r0
 800c982:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800c984:	4b42      	ldr	r3, [pc, #264]	; (800ca90 <tcp_input+0x28c>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	685b      	ldr	r3, [r3, #4]
 800c98a:	4a41      	ldr	r2, [pc, #260]	; (800ca90 <tcp_input+0x28c>)
 800c98c:	6814      	ldr	r4, [r2, #0]
 800c98e:	4618      	mov	r0, r3
 800c990:	f7fc fd0b 	bl	80093aa <lwip_htonl>
 800c994:	4603      	mov	r3, r0
 800c996:	6063      	str	r3, [r4, #4]
 800c998:	6863      	ldr	r3, [r4, #4]
 800c99a:	4a45      	ldr	r2, [pc, #276]	; (800cab0 <tcp_input+0x2ac>)
 800c99c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800c99e:	4b3c      	ldr	r3, [pc, #240]	; (800ca90 <tcp_input+0x28c>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	689b      	ldr	r3, [r3, #8]
 800c9a4:	4a3a      	ldr	r2, [pc, #232]	; (800ca90 <tcp_input+0x28c>)
 800c9a6:	6814      	ldr	r4, [r2, #0]
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f7fc fcfe 	bl	80093aa <lwip_htonl>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	60a3      	str	r3, [r4, #8]
 800c9b2:	68a3      	ldr	r3, [r4, #8]
 800c9b4:	4a3f      	ldr	r2, [pc, #252]	; (800cab4 <tcp_input+0x2b0>)
 800c9b6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800c9b8:	4b35      	ldr	r3, [pc, #212]	; (800ca90 <tcp_input+0x28c>)
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	89db      	ldrh	r3, [r3, #14]
 800c9be:	b29b      	uxth	r3, r3
 800c9c0:	4a33      	ldr	r2, [pc, #204]	; (800ca90 <tcp_input+0x28c>)
 800c9c2:	6814      	ldr	r4, [r2, #0]
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f7fc fcdb 	bl	8009380 <lwip_htons>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800c9ce:	4b30      	ldr	r3, [pc, #192]	; (800ca90 <tcp_input+0x28c>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	899b      	ldrh	r3, [r3, #12]
 800c9d4:	b29b      	uxth	r3, r3
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f7fc fcd2 	bl	8009380 <lwip_htons>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	b2db      	uxtb	r3, r3
 800c9e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9e4:	b2da      	uxtb	r2, r3
 800c9e6:	4b34      	ldr	r3, [pc, #208]	; (800cab8 <tcp_input+0x2b4>)
 800c9e8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	891a      	ldrh	r2, [r3, #8]
 800c9ee:	4b33      	ldr	r3, [pc, #204]	; (800cabc <tcp_input+0x2b8>)
 800c9f0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800c9f2:	4b31      	ldr	r3, [pc, #196]	; (800cab8 <tcp_input+0x2b4>)
 800c9f4:	781b      	ldrb	r3, [r3, #0]
 800c9f6:	f003 0303 	and.w	r3, r3, #3
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d00c      	beq.n	800ca18 <tcp_input+0x214>
    tcplen++;
 800c9fe:	4b2f      	ldr	r3, [pc, #188]	; (800cabc <tcp_input+0x2b8>)
 800ca00:	881b      	ldrh	r3, [r3, #0]
 800ca02:	3301      	adds	r3, #1
 800ca04:	b29a      	uxth	r2, r3
 800ca06:	4b2d      	ldr	r3, [pc, #180]	; (800cabc <tcp_input+0x2b8>)
 800ca08:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	891a      	ldrh	r2, [r3, #8]
 800ca0e:	4b2b      	ldr	r3, [pc, #172]	; (800cabc <tcp_input+0x2b8>)
 800ca10:	881b      	ldrh	r3, [r3, #0]
 800ca12:	429a      	cmp	r2, r3
 800ca14:	f200 82e6 	bhi.w	800cfe4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800ca18:	2300      	movs	r3, #0
 800ca1a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ca1c:	4b28      	ldr	r3, [pc, #160]	; (800cac0 <tcp_input+0x2bc>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	61fb      	str	r3, [r7, #28]
 800ca22:	e09d      	b.n	800cb60 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ca24:	69fb      	ldr	r3, [r7, #28]
 800ca26:	7d1b      	ldrb	r3, [r3, #20]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d105      	bne.n	800ca38 <tcp_input+0x234>
 800ca2c:	4b15      	ldr	r3, [pc, #84]	; (800ca84 <tcp_input+0x280>)
 800ca2e:	22fb      	movs	r2, #251	; 0xfb
 800ca30:	4924      	ldr	r1, [pc, #144]	; (800cac4 <tcp_input+0x2c0>)
 800ca32:	4816      	ldr	r0, [pc, #88]	; (800ca8c <tcp_input+0x288>)
 800ca34:	f008 fd94 	bl	8015560 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ca38:	69fb      	ldr	r3, [r7, #28]
 800ca3a:	7d1b      	ldrb	r3, [r3, #20]
 800ca3c:	2b0a      	cmp	r3, #10
 800ca3e:	d105      	bne.n	800ca4c <tcp_input+0x248>
 800ca40:	4b10      	ldr	r3, [pc, #64]	; (800ca84 <tcp_input+0x280>)
 800ca42:	22fc      	movs	r2, #252	; 0xfc
 800ca44:	4920      	ldr	r1, [pc, #128]	; (800cac8 <tcp_input+0x2c4>)
 800ca46:	4811      	ldr	r0, [pc, #68]	; (800ca8c <tcp_input+0x288>)
 800ca48:	f008 fd8a 	bl	8015560 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ca4c:	69fb      	ldr	r3, [r7, #28]
 800ca4e:	7d1b      	ldrb	r3, [r3, #20]
 800ca50:	2b01      	cmp	r3, #1
 800ca52:	d105      	bne.n	800ca60 <tcp_input+0x25c>
 800ca54:	4b0b      	ldr	r3, [pc, #44]	; (800ca84 <tcp_input+0x280>)
 800ca56:	22fd      	movs	r2, #253	; 0xfd
 800ca58:	491c      	ldr	r1, [pc, #112]	; (800cacc <tcp_input+0x2c8>)
 800ca5a:	480c      	ldr	r0, [pc, #48]	; (800ca8c <tcp_input+0x288>)
 800ca5c:	f008 fd80 	bl	8015560 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ca60:	69fb      	ldr	r3, [r7, #28]
 800ca62:	7a1b      	ldrb	r3, [r3, #8]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d033      	beq.n	800cad0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ca68:	69fb      	ldr	r3, [r7, #28]
 800ca6a:	7a1a      	ldrb	r2, [r3, #8]
 800ca6c:	4b09      	ldr	r3, [pc, #36]	; (800ca94 <tcp_input+0x290>)
 800ca6e:	685b      	ldr	r3, [r3, #4]
 800ca70:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ca74:	3301      	adds	r3, #1
 800ca76:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	d029      	beq.n	800cad0 <tcp_input+0x2cc>
      prev = pcb;
 800ca7c:	69fb      	ldr	r3, [r7, #28]
 800ca7e:	61bb      	str	r3, [r7, #24]
      continue;
 800ca80:	e06b      	b.n	800cb5a <tcp_input+0x356>
 800ca82:	bf00      	nop
 800ca84:	0801797c 	.word	0x0801797c
 800ca88:	080179b0 	.word	0x080179b0
 800ca8c:	080179c8 	.word	0x080179c8
 800ca90:	2000d3a0 	.word	0x2000d3a0
 800ca94:	20009c04 	.word	0x20009c04
 800ca98:	2000d3a4 	.word	0x2000d3a4
 800ca9c:	2000d3a8 	.word	0x2000d3a8
 800caa0:	2000d3a6 	.word	0x2000d3a6
 800caa4:	080179f0 	.word	0x080179f0
 800caa8:	08017a00 	.word	0x08017a00
 800caac:	08017a0c 	.word	0x08017a0c
 800cab0:	2000d3b0 	.word	0x2000d3b0
 800cab4:	2000d3b4 	.word	0x2000d3b4
 800cab8:	2000d3bc 	.word	0x2000d3bc
 800cabc:	2000d3ba 	.word	0x2000d3ba
 800cac0:	2000d384 	.word	0x2000d384
 800cac4:	08017a2c 	.word	0x08017a2c
 800cac8:	08017a54 	.word	0x08017a54
 800cacc:	08017a80 	.word	0x08017a80
    }

    if (pcb->remote_port == tcphdr->src &&
 800cad0:	69fb      	ldr	r3, [r7, #28]
 800cad2:	8b1a      	ldrh	r2, [r3, #24]
 800cad4:	4b72      	ldr	r3, [pc, #456]	; (800cca0 <tcp_input+0x49c>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	881b      	ldrh	r3, [r3, #0]
 800cada:	b29b      	uxth	r3, r3
 800cadc:	429a      	cmp	r2, r3
 800cade:	d13a      	bne.n	800cb56 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800cae0:	69fb      	ldr	r3, [r7, #28]
 800cae2:	8ada      	ldrh	r2, [r3, #22]
 800cae4:	4b6e      	ldr	r3, [pc, #440]	; (800cca0 <tcp_input+0x49c>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	885b      	ldrh	r3, [r3, #2]
 800caea:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800caec:	429a      	cmp	r2, r3
 800caee:	d132      	bne.n	800cb56 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800caf0:	69fb      	ldr	r3, [r7, #28]
 800caf2:	685a      	ldr	r2, [r3, #4]
 800caf4:	4b6b      	ldr	r3, [pc, #428]	; (800cca4 <tcp_input+0x4a0>)
 800caf6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800caf8:	429a      	cmp	r2, r3
 800cafa:	d12c      	bne.n	800cb56 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800cafc:	69fb      	ldr	r3, [r7, #28]
 800cafe:	681a      	ldr	r2, [r3, #0]
 800cb00:	4b68      	ldr	r3, [pc, #416]	; (800cca4 <tcp_input+0x4a0>)
 800cb02:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d126      	bne.n	800cb56 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800cb08:	69fb      	ldr	r3, [r7, #28]
 800cb0a:	68db      	ldr	r3, [r3, #12]
 800cb0c:	69fa      	ldr	r2, [r7, #28]
 800cb0e:	429a      	cmp	r2, r3
 800cb10:	d106      	bne.n	800cb20 <tcp_input+0x31c>
 800cb12:	4b65      	ldr	r3, [pc, #404]	; (800cca8 <tcp_input+0x4a4>)
 800cb14:	f240 120d 	movw	r2, #269	; 0x10d
 800cb18:	4964      	ldr	r1, [pc, #400]	; (800ccac <tcp_input+0x4a8>)
 800cb1a:	4865      	ldr	r0, [pc, #404]	; (800ccb0 <tcp_input+0x4ac>)
 800cb1c:	f008 fd20 	bl	8015560 <iprintf>
      if (prev != NULL) {
 800cb20:	69bb      	ldr	r3, [r7, #24]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d00a      	beq.n	800cb3c <tcp_input+0x338>
        prev->next = pcb->next;
 800cb26:	69fb      	ldr	r3, [r7, #28]
 800cb28:	68da      	ldr	r2, [r3, #12]
 800cb2a:	69bb      	ldr	r3, [r7, #24]
 800cb2c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800cb2e:	4b61      	ldr	r3, [pc, #388]	; (800ccb4 <tcp_input+0x4b0>)
 800cb30:	681a      	ldr	r2, [r3, #0]
 800cb32:	69fb      	ldr	r3, [r7, #28]
 800cb34:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800cb36:	4a5f      	ldr	r2, [pc, #380]	; (800ccb4 <tcp_input+0x4b0>)
 800cb38:	69fb      	ldr	r3, [r7, #28]
 800cb3a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800cb3c:	69fb      	ldr	r3, [r7, #28]
 800cb3e:	68db      	ldr	r3, [r3, #12]
 800cb40:	69fa      	ldr	r2, [r7, #28]
 800cb42:	429a      	cmp	r2, r3
 800cb44:	d111      	bne.n	800cb6a <tcp_input+0x366>
 800cb46:	4b58      	ldr	r3, [pc, #352]	; (800cca8 <tcp_input+0x4a4>)
 800cb48:	f240 1215 	movw	r2, #277	; 0x115
 800cb4c:	495a      	ldr	r1, [pc, #360]	; (800ccb8 <tcp_input+0x4b4>)
 800cb4e:	4858      	ldr	r0, [pc, #352]	; (800ccb0 <tcp_input+0x4ac>)
 800cb50:	f008 fd06 	bl	8015560 <iprintf>
      break;
 800cb54:	e009      	b.n	800cb6a <tcp_input+0x366>
    }
    prev = pcb;
 800cb56:	69fb      	ldr	r3, [r7, #28]
 800cb58:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cb5a:	69fb      	ldr	r3, [r7, #28]
 800cb5c:	68db      	ldr	r3, [r3, #12]
 800cb5e:	61fb      	str	r3, [r7, #28]
 800cb60:	69fb      	ldr	r3, [r7, #28]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	f47f af5e 	bne.w	800ca24 <tcp_input+0x220>
 800cb68:	e000      	b.n	800cb6c <tcp_input+0x368>
      break;
 800cb6a:	bf00      	nop
  }

  if (pcb == NULL) {
 800cb6c:	69fb      	ldr	r3, [r7, #28]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	f040 80aa 	bne.w	800ccc8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cb74:	4b51      	ldr	r3, [pc, #324]	; (800ccbc <tcp_input+0x4b8>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	61fb      	str	r3, [r7, #28]
 800cb7a:	e03f      	b.n	800cbfc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cb7c:	69fb      	ldr	r3, [r7, #28]
 800cb7e:	7d1b      	ldrb	r3, [r3, #20]
 800cb80:	2b0a      	cmp	r3, #10
 800cb82:	d006      	beq.n	800cb92 <tcp_input+0x38e>
 800cb84:	4b48      	ldr	r3, [pc, #288]	; (800cca8 <tcp_input+0x4a4>)
 800cb86:	f240 121f 	movw	r2, #287	; 0x11f
 800cb8a:	494d      	ldr	r1, [pc, #308]	; (800ccc0 <tcp_input+0x4bc>)
 800cb8c:	4848      	ldr	r0, [pc, #288]	; (800ccb0 <tcp_input+0x4ac>)
 800cb8e:	f008 fce7 	bl	8015560 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cb92:	69fb      	ldr	r3, [r7, #28]
 800cb94:	7a1b      	ldrb	r3, [r3, #8]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d009      	beq.n	800cbae <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cb9a:	69fb      	ldr	r3, [r7, #28]
 800cb9c:	7a1a      	ldrb	r2, [r3, #8]
 800cb9e:	4b41      	ldr	r3, [pc, #260]	; (800cca4 <tcp_input+0x4a0>)
 800cba0:	685b      	ldr	r3, [r3, #4]
 800cba2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cba6:	3301      	adds	r3, #1
 800cba8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	d122      	bne.n	800cbf4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800cbae:	69fb      	ldr	r3, [r7, #28]
 800cbb0:	8b1a      	ldrh	r2, [r3, #24]
 800cbb2:	4b3b      	ldr	r3, [pc, #236]	; (800cca0 <tcp_input+0x49c>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	881b      	ldrh	r3, [r3, #0]
 800cbb8:	b29b      	uxth	r3, r3
 800cbba:	429a      	cmp	r2, r3
 800cbbc:	d11b      	bne.n	800cbf6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800cbbe:	69fb      	ldr	r3, [r7, #28]
 800cbc0:	8ada      	ldrh	r2, [r3, #22]
 800cbc2:	4b37      	ldr	r3, [pc, #220]	; (800cca0 <tcp_input+0x49c>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	885b      	ldrh	r3, [r3, #2]
 800cbc8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d113      	bne.n	800cbf6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cbce:	69fb      	ldr	r3, [r7, #28]
 800cbd0:	685a      	ldr	r2, [r3, #4]
 800cbd2:	4b34      	ldr	r3, [pc, #208]	; (800cca4 <tcp_input+0x4a0>)
 800cbd4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d10d      	bne.n	800cbf6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800cbda:	69fb      	ldr	r3, [r7, #28]
 800cbdc:	681a      	ldr	r2, [r3, #0]
 800cbde:	4b31      	ldr	r3, [pc, #196]	; (800cca4 <tcp_input+0x4a0>)
 800cbe0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cbe2:	429a      	cmp	r2, r3
 800cbe4:	d107      	bne.n	800cbf6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800cbe6:	69f8      	ldr	r0, [r7, #28]
 800cbe8:	f000 fb56 	bl	800d298 <tcp_timewait_input>
        }
        pbuf_free(p);
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f7fd ffc5 	bl	800ab7c <pbuf_free>
        return;
 800cbf2:	e1fd      	b.n	800cff0 <tcp_input+0x7ec>
        continue;
 800cbf4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cbf6:	69fb      	ldr	r3, [r7, #28]
 800cbf8:	68db      	ldr	r3, [r3, #12]
 800cbfa:	61fb      	str	r3, [r7, #28]
 800cbfc:	69fb      	ldr	r3, [r7, #28]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d1bc      	bne.n	800cb7c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800cc02:	2300      	movs	r3, #0
 800cc04:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cc06:	4b2f      	ldr	r3, [pc, #188]	; (800ccc4 <tcp_input+0x4c0>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	617b      	str	r3, [r7, #20]
 800cc0c:	e02a      	b.n	800cc64 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	7a1b      	ldrb	r3, [r3, #8]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d00c      	beq.n	800cc30 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cc16:	697b      	ldr	r3, [r7, #20]
 800cc18:	7a1a      	ldrb	r2, [r3, #8]
 800cc1a:	4b22      	ldr	r3, [pc, #136]	; (800cca4 <tcp_input+0x4a0>)
 800cc1c:	685b      	ldr	r3, [r3, #4]
 800cc1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cc22:	3301      	adds	r3, #1
 800cc24:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800cc26:	429a      	cmp	r2, r3
 800cc28:	d002      	beq.n	800cc30 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	61bb      	str	r3, [r7, #24]
        continue;
 800cc2e:	e016      	b.n	800cc5e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800cc30:	697b      	ldr	r3, [r7, #20]
 800cc32:	8ada      	ldrh	r2, [r3, #22]
 800cc34:	4b1a      	ldr	r3, [pc, #104]	; (800cca0 <tcp_input+0x49c>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	885b      	ldrh	r3, [r3, #2]
 800cc3a:	b29b      	uxth	r3, r3
 800cc3c:	429a      	cmp	r2, r3
 800cc3e:	d10c      	bne.n	800cc5a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	681a      	ldr	r2, [r3, #0]
 800cc44:	4b17      	ldr	r3, [pc, #92]	; (800cca4 <tcp_input+0x4a0>)
 800cc46:	695b      	ldr	r3, [r3, #20]
 800cc48:	429a      	cmp	r2, r3
 800cc4a:	d00f      	beq.n	800cc6c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800cc4c:	697b      	ldr	r3, [r7, #20]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d00d      	beq.n	800cc6e <tcp_input+0x46a>
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d009      	beq.n	800cc6e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cc5e:	697b      	ldr	r3, [r7, #20]
 800cc60:	68db      	ldr	r3, [r3, #12]
 800cc62:	617b      	str	r3, [r7, #20]
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d1d1      	bne.n	800cc0e <tcp_input+0x40a>
 800cc6a:	e000      	b.n	800cc6e <tcp_input+0x46a>
            break;
 800cc6c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800cc6e:	697b      	ldr	r3, [r7, #20]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d029      	beq.n	800ccc8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800cc74:	69bb      	ldr	r3, [r7, #24]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d00a      	beq.n	800cc90 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800cc7a:	697b      	ldr	r3, [r7, #20]
 800cc7c:	68da      	ldr	r2, [r3, #12]
 800cc7e:	69bb      	ldr	r3, [r7, #24]
 800cc80:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800cc82:	4b10      	ldr	r3, [pc, #64]	; (800ccc4 <tcp_input+0x4c0>)
 800cc84:	681a      	ldr	r2, [r3, #0]
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800cc8a:	4a0e      	ldr	r2, [pc, #56]	; (800ccc4 <tcp_input+0x4c0>)
 800cc8c:	697b      	ldr	r3, [r7, #20]
 800cc8e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800cc90:	6978      	ldr	r0, [r7, #20]
 800cc92:	f000 fa03 	bl	800d09c <tcp_listen_input>
      }
      pbuf_free(p);
 800cc96:	6878      	ldr	r0, [r7, #4]
 800cc98:	f7fd ff70 	bl	800ab7c <pbuf_free>
      return;
 800cc9c:	e1a8      	b.n	800cff0 <tcp_input+0x7ec>
 800cc9e:	bf00      	nop
 800cca0:	2000d3a0 	.word	0x2000d3a0
 800cca4:	20009c04 	.word	0x20009c04
 800cca8:	0801797c 	.word	0x0801797c
 800ccac:	08017aa8 	.word	0x08017aa8
 800ccb0:	080179c8 	.word	0x080179c8
 800ccb4:	2000d384 	.word	0x2000d384
 800ccb8:	08017ad4 	.word	0x08017ad4
 800ccbc:	2000d388 	.word	0x2000d388
 800ccc0:	08017b00 	.word	0x08017b00
 800ccc4:	2000d380 	.word	0x2000d380
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800ccc8:	69fb      	ldr	r3, [r7, #28]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	f000 8158 	beq.w	800cf80 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800ccd0:	4b95      	ldr	r3, [pc, #596]	; (800cf28 <tcp_input+0x724>)
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	891a      	ldrh	r2, [r3, #8]
 800ccda:	4b93      	ldr	r3, [pc, #588]	; (800cf28 <tcp_input+0x724>)
 800ccdc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800ccde:	4a92      	ldr	r2, [pc, #584]	; (800cf28 <tcp_input+0x724>)
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800cce4:	4b91      	ldr	r3, [pc, #580]	; (800cf2c <tcp_input+0x728>)
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	4a8f      	ldr	r2, [pc, #572]	; (800cf28 <tcp_input+0x724>)
 800ccea:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800ccec:	4b90      	ldr	r3, [pc, #576]	; (800cf30 <tcp_input+0x72c>)
 800ccee:	2200      	movs	r2, #0
 800ccf0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800ccf2:	4b90      	ldr	r3, [pc, #576]	; (800cf34 <tcp_input+0x730>)
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800ccf8:	4b8f      	ldr	r3, [pc, #572]	; (800cf38 <tcp_input+0x734>)
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800ccfe:	4b8f      	ldr	r3, [pc, #572]	; (800cf3c <tcp_input+0x738>)
 800cd00:	781b      	ldrb	r3, [r3, #0]
 800cd02:	f003 0308 	and.w	r3, r3, #8
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d006      	beq.n	800cd18 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	7b5b      	ldrb	r3, [r3, #13]
 800cd0e:	f043 0301 	orr.w	r3, r3, #1
 800cd12:	b2da      	uxtb	r2, r3
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800cd18:	69fb      	ldr	r3, [r7, #28]
 800cd1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d017      	beq.n	800cd50 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800cd20:	69f8      	ldr	r0, [r7, #28]
 800cd22:	f7ff f929 	bl	800bf78 <tcp_process_refused_data>
 800cd26:	4603      	mov	r3, r0
 800cd28:	f113 0f0d 	cmn.w	r3, #13
 800cd2c:	d007      	beq.n	800cd3e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800cd2e:	69fb      	ldr	r3, [r7, #28]
 800cd30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d00c      	beq.n	800cd50 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800cd36:	4b82      	ldr	r3, [pc, #520]	; (800cf40 <tcp_input+0x73c>)
 800cd38:	881b      	ldrh	r3, [r3, #0]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d008      	beq.n	800cd50 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800cd3e:	69fb      	ldr	r3, [r7, #28]
 800cd40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	f040 80e3 	bne.w	800cf0e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800cd48:	69f8      	ldr	r0, [r7, #28]
 800cd4a:	f003 f9ad 	bl	80100a8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800cd4e:	e0de      	b.n	800cf0e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800cd50:	4a7c      	ldr	r2, [pc, #496]	; (800cf44 <tcp_input+0x740>)
 800cd52:	69fb      	ldr	r3, [r7, #28]
 800cd54:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800cd56:	69f8      	ldr	r0, [r7, #28]
 800cd58:	f000 fb18 	bl	800d38c <tcp_process>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800cd60:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cd64:	f113 0f0d 	cmn.w	r3, #13
 800cd68:	f000 80d3 	beq.w	800cf12 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800cd6c:	4b71      	ldr	r3, [pc, #452]	; (800cf34 <tcp_input+0x730>)
 800cd6e:	781b      	ldrb	r3, [r3, #0]
 800cd70:	f003 0308 	and.w	r3, r3, #8
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d015      	beq.n	800cda4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800cd78:	69fb      	ldr	r3, [r7, #28]
 800cd7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d008      	beq.n	800cd94 <tcp_input+0x590>
 800cd82:	69fb      	ldr	r3, [r7, #28]
 800cd84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd88:	69fa      	ldr	r2, [r7, #28]
 800cd8a:	6912      	ldr	r2, [r2, #16]
 800cd8c:	f06f 010d 	mvn.w	r1, #13
 800cd90:	4610      	mov	r0, r2
 800cd92:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800cd94:	69f9      	ldr	r1, [r7, #28]
 800cd96:	486c      	ldr	r0, [pc, #432]	; (800cf48 <tcp_input+0x744>)
 800cd98:	f7ff fbbc 	bl	800c514 <tcp_pcb_remove>
        tcp_free(pcb);
 800cd9c:	69f8      	ldr	r0, [r7, #28]
 800cd9e:	f7fe f9a9 	bl	800b0f4 <tcp_free>
 800cda2:	e0da      	b.n	800cf5a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800cda4:	2300      	movs	r3, #0
 800cda6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800cda8:	4b63      	ldr	r3, [pc, #396]	; (800cf38 <tcp_input+0x734>)
 800cdaa:	881b      	ldrh	r3, [r3, #0]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d01d      	beq.n	800cdec <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800cdb0:	4b61      	ldr	r3, [pc, #388]	; (800cf38 <tcp_input+0x734>)
 800cdb2:	881b      	ldrh	r3, [r3, #0]
 800cdb4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800cdb6:	69fb      	ldr	r3, [r7, #28]
 800cdb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d00a      	beq.n	800cdd6 <tcp_input+0x5d2>
 800cdc0:	69fb      	ldr	r3, [r7, #28]
 800cdc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cdc6:	69fa      	ldr	r2, [r7, #28]
 800cdc8:	6910      	ldr	r0, [r2, #16]
 800cdca:	89fa      	ldrh	r2, [r7, #14]
 800cdcc:	69f9      	ldr	r1, [r7, #28]
 800cdce:	4798      	blx	r3
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	74fb      	strb	r3, [r7, #19]
 800cdd4:	e001      	b.n	800cdda <tcp_input+0x5d6>
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800cdda:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cdde:	f113 0f0d 	cmn.w	r3, #13
 800cde2:	f000 8098 	beq.w	800cf16 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800cde6:	4b54      	ldr	r3, [pc, #336]	; (800cf38 <tcp_input+0x734>)
 800cde8:	2200      	movs	r2, #0
 800cdea:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800cdec:	69f8      	ldr	r0, [r7, #28]
 800cdee:	f000 f915 	bl	800d01c <tcp_input_delayed_close>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	f040 8090 	bne.w	800cf1a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800cdfa:	4b4d      	ldr	r3, [pc, #308]	; (800cf30 <tcp_input+0x72c>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d041      	beq.n	800ce86 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ce02:	69fb      	ldr	r3, [r7, #28]
 800ce04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d006      	beq.n	800ce18 <tcp_input+0x614>
 800ce0a:	4b50      	ldr	r3, [pc, #320]	; (800cf4c <tcp_input+0x748>)
 800ce0c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ce10:	494f      	ldr	r1, [pc, #316]	; (800cf50 <tcp_input+0x74c>)
 800ce12:	4850      	ldr	r0, [pc, #320]	; (800cf54 <tcp_input+0x750>)
 800ce14:	f008 fba4 	bl	8015560 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ce18:	69fb      	ldr	r3, [r7, #28]
 800ce1a:	8b5b      	ldrh	r3, [r3, #26]
 800ce1c:	f003 0310 	and.w	r3, r3, #16
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d008      	beq.n	800ce36 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ce24:	4b42      	ldr	r3, [pc, #264]	; (800cf30 <tcp_input+0x72c>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f7fd fea7 	bl	800ab7c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ce2e:	69f8      	ldr	r0, [r7, #28]
 800ce30:	f7fe fc48 	bl	800b6c4 <tcp_abort>
            goto aborted;
 800ce34:	e091      	b.n	800cf5a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ce36:	69fb      	ldr	r3, [r7, #28]
 800ce38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d00c      	beq.n	800ce5a <tcp_input+0x656>
 800ce40:	69fb      	ldr	r3, [r7, #28]
 800ce42:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ce46:	69fb      	ldr	r3, [r7, #28]
 800ce48:	6918      	ldr	r0, [r3, #16]
 800ce4a:	4b39      	ldr	r3, [pc, #228]	; (800cf30 <tcp_input+0x72c>)
 800ce4c:	681a      	ldr	r2, [r3, #0]
 800ce4e:	2300      	movs	r3, #0
 800ce50:	69f9      	ldr	r1, [r7, #28]
 800ce52:	47a0      	blx	r4
 800ce54:	4603      	mov	r3, r0
 800ce56:	74fb      	strb	r3, [r7, #19]
 800ce58:	e008      	b.n	800ce6c <tcp_input+0x668>
 800ce5a:	4b35      	ldr	r3, [pc, #212]	; (800cf30 <tcp_input+0x72c>)
 800ce5c:	681a      	ldr	r2, [r3, #0]
 800ce5e:	2300      	movs	r3, #0
 800ce60:	69f9      	ldr	r1, [r7, #28]
 800ce62:	2000      	movs	r0, #0
 800ce64:	f7ff f95e 	bl	800c124 <tcp_recv_null>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800ce6c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ce70:	f113 0f0d 	cmn.w	r3, #13
 800ce74:	d053      	beq.n	800cf1e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ce76:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d003      	beq.n	800ce86 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800ce7e:	4b2c      	ldr	r3, [pc, #176]	; (800cf30 <tcp_input+0x72c>)
 800ce80:	681a      	ldr	r2, [r3, #0]
 800ce82:	69fb      	ldr	r3, [r7, #28]
 800ce84:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800ce86:	4b2b      	ldr	r3, [pc, #172]	; (800cf34 <tcp_input+0x730>)
 800ce88:	781b      	ldrb	r3, [r3, #0]
 800ce8a:	f003 0320 	and.w	r3, r3, #32
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d030      	beq.n	800cef4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800ce92:	69fb      	ldr	r3, [r7, #28]
 800ce94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d009      	beq.n	800ceae <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800ce9a:	69fb      	ldr	r3, [r7, #28]
 800ce9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce9e:	7b5a      	ldrb	r2, [r3, #13]
 800cea0:	69fb      	ldr	r3, [r7, #28]
 800cea2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cea4:	f042 0220 	orr.w	r2, r2, #32
 800cea8:	b2d2      	uxtb	r2, r2
 800ceaa:	735a      	strb	r2, [r3, #13]
 800ceac:	e022      	b.n	800cef4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ceae:	69fb      	ldr	r3, [r7, #28]
 800ceb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ceb2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ceb6:	d005      	beq.n	800cec4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800ceb8:	69fb      	ldr	r3, [r7, #28]
 800ceba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cebc:	3301      	adds	r3, #1
 800cebe:	b29a      	uxth	r2, r3
 800cec0:	69fb      	ldr	r3, [r7, #28]
 800cec2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800cec4:	69fb      	ldr	r3, [r7, #28]
 800cec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d00b      	beq.n	800cee6 <tcp_input+0x6e2>
 800cece:	69fb      	ldr	r3, [r7, #28]
 800ced0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ced4:	69fb      	ldr	r3, [r7, #28]
 800ced6:	6918      	ldr	r0, [r3, #16]
 800ced8:	2300      	movs	r3, #0
 800ceda:	2200      	movs	r2, #0
 800cedc:	69f9      	ldr	r1, [r7, #28]
 800cede:	47a0      	blx	r4
 800cee0:	4603      	mov	r3, r0
 800cee2:	74fb      	strb	r3, [r7, #19]
 800cee4:	e001      	b.n	800ceea <tcp_input+0x6e6>
 800cee6:	2300      	movs	r3, #0
 800cee8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ceea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ceee:	f113 0f0d 	cmn.w	r3, #13
 800cef2:	d016      	beq.n	800cf22 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800cef4:	4b13      	ldr	r3, [pc, #76]	; (800cf44 <tcp_input+0x740>)
 800cef6:	2200      	movs	r2, #0
 800cef8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800cefa:	69f8      	ldr	r0, [r7, #28]
 800cefc:	f000 f88e 	bl	800d01c <tcp_input_delayed_close>
 800cf00:	4603      	mov	r3, r0
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d128      	bne.n	800cf58 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800cf06:	69f8      	ldr	r0, [r7, #28]
 800cf08:	f002 fac8 	bl	800f49c <tcp_output>
 800cf0c:	e025      	b.n	800cf5a <tcp_input+0x756>
        goto aborted;
 800cf0e:	bf00      	nop
 800cf10:	e023      	b.n	800cf5a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800cf12:	bf00      	nop
 800cf14:	e021      	b.n	800cf5a <tcp_input+0x756>
              goto aborted;
 800cf16:	bf00      	nop
 800cf18:	e01f      	b.n	800cf5a <tcp_input+0x756>
          goto aborted;
 800cf1a:	bf00      	nop
 800cf1c:	e01d      	b.n	800cf5a <tcp_input+0x756>
            goto aborted;
 800cf1e:	bf00      	nop
 800cf20:	e01b      	b.n	800cf5a <tcp_input+0x756>
              goto aborted;
 800cf22:	bf00      	nop
 800cf24:	e019      	b.n	800cf5a <tcp_input+0x756>
 800cf26:	bf00      	nop
 800cf28:	2000d390 	.word	0x2000d390
 800cf2c:	2000d3a0 	.word	0x2000d3a0
 800cf30:	2000d3c0 	.word	0x2000d3c0
 800cf34:	2000d3bd 	.word	0x2000d3bd
 800cf38:	2000d3b8 	.word	0x2000d3b8
 800cf3c:	2000d3bc 	.word	0x2000d3bc
 800cf40:	2000d3ba 	.word	0x2000d3ba
 800cf44:	2000d3c4 	.word	0x2000d3c4
 800cf48:	2000d384 	.word	0x2000d384
 800cf4c:	0801797c 	.word	0x0801797c
 800cf50:	08017b30 	.word	0x08017b30
 800cf54:	080179c8 	.word	0x080179c8
          goto aborted;
 800cf58:	bf00      	nop
    tcp_input_pcb = NULL;
 800cf5a:	4b27      	ldr	r3, [pc, #156]	; (800cff8 <tcp_input+0x7f4>)
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800cf60:	4b26      	ldr	r3, [pc, #152]	; (800cffc <tcp_input+0x7f8>)
 800cf62:	2200      	movs	r2, #0
 800cf64:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800cf66:	4b26      	ldr	r3, [pc, #152]	; (800d000 <tcp_input+0x7fc>)
 800cf68:	685b      	ldr	r3, [r3, #4]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d03f      	beq.n	800cfee <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800cf6e:	4b24      	ldr	r3, [pc, #144]	; (800d000 <tcp_input+0x7fc>)
 800cf70:	685b      	ldr	r3, [r3, #4]
 800cf72:	4618      	mov	r0, r3
 800cf74:	f7fd fe02 	bl	800ab7c <pbuf_free>
      inseg.p = NULL;
 800cf78:	4b21      	ldr	r3, [pc, #132]	; (800d000 <tcp_input+0x7fc>)
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800cf7e:	e036      	b.n	800cfee <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800cf80:	4b20      	ldr	r3, [pc, #128]	; (800d004 <tcp_input+0x800>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	899b      	ldrh	r3, [r3, #12]
 800cf86:	b29b      	uxth	r3, r3
 800cf88:	4618      	mov	r0, r3
 800cf8a:	f7fc f9f9 	bl	8009380 <lwip_htons>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	b2db      	uxtb	r3, r3
 800cf92:	f003 0304 	and.w	r3, r3, #4
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d118      	bne.n	800cfcc <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cf9a:	4b1b      	ldr	r3, [pc, #108]	; (800d008 <tcp_input+0x804>)
 800cf9c:	6819      	ldr	r1, [r3, #0]
 800cf9e:	4b1b      	ldr	r3, [pc, #108]	; (800d00c <tcp_input+0x808>)
 800cfa0:	881b      	ldrh	r3, [r3, #0]
 800cfa2:	461a      	mov	r2, r3
 800cfa4:	4b1a      	ldr	r3, [pc, #104]	; (800d010 <tcp_input+0x80c>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cfaa:	4b16      	ldr	r3, [pc, #88]	; (800d004 <tcp_input+0x800>)
 800cfac:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cfae:	885b      	ldrh	r3, [r3, #2]
 800cfb0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cfb2:	4a14      	ldr	r2, [pc, #80]	; (800d004 <tcp_input+0x800>)
 800cfb4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cfb6:	8812      	ldrh	r2, [r2, #0]
 800cfb8:	b292      	uxth	r2, r2
 800cfba:	9202      	str	r2, [sp, #8]
 800cfbc:	9301      	str	r3, [sp, #4]
 800cfbe:	4b15      	ldr	r3, [pc, #84]	; (800d014 <tcp_input+0x810>)
 800cfc0:	9300      	str	r3, [sp, #0]
 800cfc2:	4b15      	ldr	r3, [pc, #84]	; (800d018 <tcp_input+0x814>)
 800cfc4:	4602      	mov	r2, r0
 800cfc6:	2000      	movs	r0, #0
 800cfc8:	f003 f81c 	bl	8010004 <tcp_rst>
    pbuf_free(p);
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f7fd fdd5 	bl	800ab7c <pbuf_free>
  return;
 800cfd2:	e00c      	b.n	800cfee <tcp_input+0x7ea>
    goto dropped;
 800cfd4:	bf00      	nop
 800cfd6:	e006      	b.n	800cfe6 <tcp_input+0x7e2>
    goto dropped;
 800cfd8:	bf00      	nop
 800cfda:	e004      	b.n	800cfe6 <tcp_input+0x7e2>
    goto dropped;
 800cfdc:	bf00      	nop
 800cfde:	e002      	b.n	800cfe6 <tcp_input+0x7e2>
      goto dropped;
 800cfe0:	bf00      	nop
 800cfe2:	e000      	b.n	800cfe6 <tcp_input+0x7e2>
      goto dropped;
 800cfe4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f7fd fdc8 	bl	800ab7c <pbuf_free>
 800cfec:	e000      	b.n	800cff0 <tcp_input+0x7ec>
  return;
 800cfee:	bf00      	nop
}
 800cff0:	3724      	adds	r7, #36	; 0x24
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd90      	pop	{r4, r7, pc}
 800cff6:	bf00      	nop
 800cff8:	2000d3c4 	.word	0x2000d3c4
 800cffc:	2000d3c0 	.word	0x2000d3c0
 800d000:	2000d390 	.word	0x2000d390
 800d004:	2000d3a0 	.word	0x2000d3a0
 800d008:	2000d3b4 	.word	0x2000d3b4
 800d00c:	2000d3ba 	.word	0x2000d3ba
 800d010:	2000d3b0 	.word	0x2000d3b0
 800d014:	20009c14 	.word	0x20009c14
 800d018:	20009c18 	.word	0x20009c18

0800d01c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b082      	sub	sp, #8
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d106      	bne.n	800d038 <tcp_input_delayed_close+0x1c>
 800d02a:	4b17      	ldr	r3, [pc, #92]	; (800d088 <tcp_input_delayed_close+0x6c>)
 800d02c:	f240 225a 	movw	r2, #602	; 0x25a
 800d030:	4916      	ldr	r1, [pc, #88]	; (800d08c <tcp_input_delayed_close+0x70>)
 800d032:	4817      	ldr	r0, [pc, #92]	; (800d090 <tcp_input_delayed_close+0x74>)
 800d034:	f008 fa94 	bl	8015560 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800d038:	4b16      	ldr	r3, [pc, #88]	; (800d094 <tcp_input_delayed_close+0x78>)
 800d03a:	781b      	ldrb	r3, [r3, #0]
 800d03c:	f003 0310 	and.w	r3, r3, #16
 800d040:	2b00      	cmp	r3, #0
 800d042:	d01c      	beq.n	800d07e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	8b5b      	ldrh	r3, [r3, #26]
 800d048:	f003 0310 	and.w	r3, r3, #16
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d10d      	bne.n	800d06c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d056:	2b00      	cmp	r3, #0
 800d058:	d008      	beq.n	800d06c <tcp_input_delayed_close+0x50>
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d060:	687a      	ldr	r2, [r7, #4]
 800d062:	6912      	ldr	r2, [r2, #16]
 800d064:	f06f 010e 	mvn.w	r1, #14
 800d068:	4610      	mov	r0, r2
 800d06a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d06c:	6879      	ldr	r1, [r7, #4]
 800d06e:	480a      	ldr	r0, [pc, #40]	; (800d098 <tcp_input_delayed_close+0x7c>)
 800d070:	f7ff fa50 	bl	800c514 <tcp_pcb_remove>
    tcp_free(pcb);
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f7fe f83d 	bl	800b0f4 <tcp_free>
    return 1;
 800d07a:	2301      	movs	r3, #1
 800d07c:	e000      	b.n	800d080 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800d07e:	2300      	movs	r3, #0
}
 800d080:	4618      	mov	r0, r3
 800d082:	3708      	adds	r7, #8
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}
 800d088:	0801797c 	.word	0x0801797c
 800d08c:	08017b4c 	.word	0x08017b4c
 800d090:	080179c8 	.word	0x080179c8
 800d094:	2000d3bd 	.word	0x2000d3bd
 800d098:	2000d384 	.word	0x2000d384

0800d09c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800d09c:	b590      	push	{r4, r7, lr}
 800d09e:	b08b      	sub	sp, #44	; 0x2c
 800d0a0:	af04      	add	r7, sp, #16
 800d0a2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800d0a4:	4b6f      	ldr	r3, [pc, #444]	; (800d264 <tcp_listen_input+0x1c8>)
 800d0a6:	781b      	ldrb	r3, [r3, #0]
 800d0a8:	f003 0304 	and.w	r3, r3, #4
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	f040 80d2 	bne.w	800d256 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d106      	bne.n	800d0c6 <tcp_listen_input+0x2a>
 800d0b8:	4b6b      	ldr	r3, [pc, #428]	; (800d268 <tcp_listen_input+0x1cc>)
 800d0ba:	f240 2281 	movw	r2, #641	; 0x281
 800d0be:	496b      	ldr	r1, [pc, #428]	; (800d26c <tcp_listen_input+0x1d0>)
 800d0c0:	486b      	ldr	r0, [pc, #428]	; (800d270 <tcp_listen_input+0x1d4>)
 800d0c2:	f008 fa4d 	bl	8015560 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800d0c6:	4b67      	ldr	r3, [pc, #412]	; (800d264 <tcp_listen_input+0x1c8>)
 800d0c8:	781b      	ldrb	r3, [r3, #0]
 800d0ca:	f003 0310 	and.w	r3, r3, #16
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d019      	beq.n	800d106 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d0d2:	4b68      	ldr	r3, [pc, #416]	; (800d274 <tcp_listen_input+0x1d8>)
 800d0d4:	6819      	ldr	r1, [r3, #0]
 800d0d6:	4b68      	ldr	r3, [pc, #416]	; (800d278 <tcp_listen_input+0x1dc>)
 800d0d8:	881b      	ldrh	r3, [r3, #0]
 800d0da:	461a      	mov	r2, r3
 800d0dc:	4b67      	ldr	r3, [pc, #412]	; (800d27c <tcp_listen_input+0x1e0>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d0e2:	4b67      	ldr	r3, [pc, #412]	; (800d280 <tcp_listen_input+0x1e4>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d0e6:	885b      	ldrh	r3, [r3, #2]
 800d0e8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d0ea:	4a65      	ldr	r2, [pc, #404]	; (800d280 <tcp_listen_input+0x1e4>)
 800d0ec:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d0ee:	8812      	ldrh	r2, [r2, #0]
 800d0f0:	b292      	uxth	r2, r2
 800d0f2:	9202      	str	r2, [sp, #8]
 800d0f4:	9301      	str	r3, [sp, #4]
 800d0f6:	4b63      	ldr	r3, [pc, #396]	; (800d284 <tcp_listen_input+0x1e8>)
 800d0f8:	9300      	str	r3, [sp, #0]
 800d0fa:	4b63      	ldr	r3, [pc, #396]	; (800d288 <tcp_listen_input+0x1ec>)
 800d0fc:	4602      	mov	r2, r0
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	f002 ff80 	bl	8010004 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800d104:	e0a9      	b.n	800d25a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800d106:	4b57      	ldr	r3, [pc, #348]	; (800d264 <tcp_listen_input+0x1c8>)
 800d108:	781b      	ldrb	r3, [r3, #0]
 800d10a:	f003 0302 	and.w	r3, r3, #2
 800d10e:	2b00      	cmp	r3, #0
 800d110:	f000 80a3 	beq.w	800d25a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	7d5b      	ldrb	r3, [r3, #21]
 800d118:	4618      	mov	r0, r3
 800d11a:	f7ff f927 	bl	800c36c <tcp_alloc>
 800d11e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800d120:	697b      	ldr	r3, [r7, #20]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d111      	bne.n	800d14a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	699b      	ldr	r3, [r3, #24]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d00a      	beq.n	800d144 <tcp_listen_input+0xa8>
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	699b      	ldr	r3, [r3, #24]
 800d132:	687a      	ldr	r2, [r7, #4]
 800d134:	6910      	ldr	r0, [r2, #16]
 800d136:	f04f 32ff 	mov.w	r2, #4294967295
 800d13a:	2100      	movs	r1, #0
 800d13c:	4798      	blx	r3
 800d13e:	4603      	mov	r3, r0
 800d140:	73bb      	strb	r3, [r7, #14]
      return;
 800d142:	e08b      	b.n	800d25c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d144:	23f0      	movs	r3, #240	; 0xf0
 800d146:	73bb      	strb	r3, [r7, #14]
      return;
 800d148:	e088      	b.n	800d25c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800d14a:	4b50      	ldr	r3, [pc, #320]	; (800d28c <tcp_listen_input+0x1f0>)
 800d14c:	695a      	ldr	r2, [r3, #20]
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800d152:	4b4e      	ldr	r3, [pc, #312]	; (800d28c <tcp_listen_input+0x1f0>)
 800d154:	691a      	ldr	r2, [r3, #16]
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	8ada      	ldrh	r2, [r3, #22]
 800d15e:	697b      	ldr	r3, [r7, #20]
 800d160:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800d162:	4b47      	ldr	r3, [pc, #284]	; (800d280 <tcp_listen_input+0x1e4>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	881b      	ldrh	r3, [r3, #0]
 800d168:	b29a      	uxth	r2, r3
 800d16a:	697b      	ldr	r3, [r7, #20]
 800d16c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800d16e:	697b      	ldr	r3, [r7, #20]
 800d170:	2203      	movs	r2, #3
 800d172:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800d174:	4b41      	ldr	r3, [pc, #260]	; (800d27c <tcp_listen_input+0x1e0>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	1c5a      	adds	r2, r3, #1
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800d17e:	697b      	ldr	r3, [r7, #20]
 800d180:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800d186:	6978      	ldr	r0, [r7, #20]
 800d188:	f7ff fa58 	bl	800c63c <tcp_next_iss>
 800d18c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	693a      	ldr	r2, [r7, #16]
 800d192:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	693a      	ldr	r2, [r7, #16]
 800d198:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800d19a:	697b      	ldr	r3, [r7, #20]
 800d19c:	693a      	ldr	r2, [r7, #16]
 800d19e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800d1a0:	697b      	ldr	r3, [r7, #20]
 800d1a2:	693a      	ldr	r2, [r7, #16]
 800d1a4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800d1a6:	4b35      	ldr	r3, [pc, #212]	; (800d27c <tcp_listen_input+0x1e0>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	1e5a      	subs	r2, r3, #1
 800d1ac:	697b      	ldr	r3, [r7, #20]
 800d1ae:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	691a      	ldr	r2, [r3, #16]
 800d1b4:	697b      	ldr	r3, [r7, #20]
 800d1b6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	687a      	ldr	r2, [r7, #4]
 800d1bc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	7a5b      	ldrb	r3, [r3, #9]
 800d1c2:	f003 030c 	and.w	r3, r3, #12
 800d1c6:	b2da      	uxtb	r2, r3
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	7a1a      	ldrb	r2, [r3, #8]
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800d1d4:	4b2e      	ldr	r3, [pc, #184]	; (800d290 <tcp_listen_input+0x1f4>)
 800d1d6:	681a      	ldr	r2, [r3, #0]
 800d1d8:	697b      	ldr	r3, [r7, #20]
 800d1da:	60da      	str	r2, [r3, #12]
 800d1dc:	4a2c      	ldr	r2, [pc, #176]	; (800d290 <tcp_listen_input+0x1f4>)
 800d1de:	697b      	ldr	r3, [r7, #20]
 800d1e0:	6013      	str	r3, [r2, #0]
 800d1e2:	f003 f8d1 	bl	8010388 <tcp_timer_needed>
 800d1e6:	4b2b      	ldr	r3, [pc, #172]	; (800d294 <tcp_listen_input+0x1f8>)
 800d1e8:	2201      	movs	r2, #1
 800d1ea:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800d1ec:	6978      	ldr	r0, [r7, #20]
 800d1ee:	f001 fd8f 	bl	800ed10 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800d1f2:	4b23      	ldr	r3, [pc, #140]	; (800d280 <tcp_listen_input+0x1e4>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	89db      	ldrh	r3, [r3, #14]
 800d1f8:	b29a      	uxth	r2, r3
 800d1fa:	697b      	ldr	r3, [r7, #20]
 800d1fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d206:	697b      	ldr	r3, [r7, #20]
 800d208:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d20c:	697b      	ldr	r3, [r7, #20]
 800d20e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	3304      	adds	r3, #4
 800d214:	4618      	mov	r0, r3
 800d216:	f006 fe5d 	bl	8013ed4 <ip4_route>
 800d21a:	4601      	mov	r1, r0
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	3304      	adds	r3, #4
 800d220:	461a      	mov	r2, r3
 800d222:	4620      	mov	r0, r4
 800d224:	f7ff fa30 	bl	800c688 <tcp_eff_send_mss_netif>
 800d228:	4603      	mov	r3, r0
 800d22a:	461a      	mov	r2, r3
 800d22c:	697b      	ldr	r3, [r7, #20]
 800d22e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800d230:	2112      	movs	r1, #18
 800d232:	6978      	ldr	r0, [r7, #20]
 800d234:	f002 f844 	bl	800f2c0 <tcp_enqueue_flags>
 800d238:	4603      	mov	r3, r0
 800d23a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800d23c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d004      	beq.n	800d24e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800d244:	2100      	movs	r1, #0
 800d246:	6978      	ldr	r0, [r7, #20]
 800d248:	f7fe f97e 	bl	800b548 <tcp_abandon>
      return;
 800d24c:	e006      	b.n	800d25c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800d24e:	6978      	ldr	r0, [r7, #20]
 800d250:	f002 f924 	bl	800f49c <tcp_output>
  return;
 800d254:	e001      	b.n	800d25a <tcp_listen_input+0x1be>
    return;
 800d256:	bf00      	nop
 800d258:	e000      	b.n	800d25c <tcp_listen_input+0x1c0>
  return;
 800d25a:	bf00      	nop
}
 800d25c:	371c      	adds	r7, #28
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd90      	pop	{r4, r7, pc}
 800d262:	bf00      	nop
 800d264:	2000d3bc 	.word	0x2000d3bc
 800d268:	0801797c 	.word	0x0801797c
 800d26c:	08017b74 	.word	0x08017b74
 800d270:	080179c8 	.word	0x080179c8
 800d274:	2000d3b4 	.word	0x2000d3b4
 800d278:	2000d3ba 	.word	0x2000d3ba
 800d27c:	2000d3b0 	.word	0x2000d3b0
 800d280:	2000d3a0 	.word	0x2000d3a0
 800d284:	20009c14 	.word	0x20009c14
 800d288:	20009c18 	.word	0x20009c18
 800d28c:	20009c04 	.word	0x20009c04
 800d290:	2000d384 	.word	0x2000d384
 800d294:	2000d38c 	.word	0x2000d38c

0800d298 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b086      	sub	sp, #24
 800d29c:	af04      	add	r7, sp, #16
 800d29e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800d2a0:	4b2f      	ldr	r3, [pc, #188]	; (800d360 <tcp_timewait_input+0xc8>)
 800d2a2:	781b      	ldrb	r3, [r3, #0]
 800d2a4:	f003 0304 	and.w	r3, r3, #4
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d153      	bne.n	800d354 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d106      	bne.n	800d2c0 <tcp_timewait_input+0x28>
 800d2b2:	4b2c      	ldr	r3, [pc, #176]	; (800d364 <tcp_timewait_input+0xcc>)
 800d2b4:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d2b8:	492b      	ldr	r1, [pc, #172]	; (800d368 <tcp_timewait_input+0xd0>)
 800d2ba:	482c      	ldr	r0, [pc, #176]	; (800d36c <tcp_timewait_input+0xd4>)
 800d2bc:	f008 f950 	bl	8015560 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800d2c0:	4b27      	ldr	r3, [pc, #156]	; (800d360 <tcp_timewait_input+0xc8>)
 800d2c2:	781b      	ldrb	r3, [r3, #0]
 800d2c4:	f003 0302 	and.w	r3, r3, #2
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d02a      	beq.n	800d322 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800d2cc:	4b28      	ldr	r3, [pc, #160]	; (800d370 <tcp_timewait_input+0xd8>)
 800d2ce:	681a      	ldr	r2, [r3, #0]
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2d4:	1ad3      	subs	r3, r2, r3
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	db2d      	blt.n	800d336 <tcp_timewait_input+0x9e>
 800d2da:	4b25      	ldr	r3, [pc, #148]	; (800d370 <tcp_timewait_input+0xd8>)
 800d2dc:	681a      	ldr	r2, [r3, #0]
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2e2:	6879      	ldr	r1, [r7, #4]
 800d2e4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d2e6:	440b      	add	r3, r1
 800d2e8:	1ad3      	subs	r3, r2, r3
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	dc23      	bgt.n	800d336 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d2ee:	4b21      	ldr	r3, [pc, #132]	; (800d374 <tcp_timewait_input+0xdc>)
 800d2f0:	6819      	ldr	r1, [r3, #0]
 800d2f2:	4b21      	ldr	r3, [pc, #132]	; (800d378 <tcp_timewait_input+0xe0>)
 800d2f4:	881b      	ldrh	r3, [r3, #0]
 800d2f6:	461a      	mov	r2, r3
 800d2f8:	4b1d      	ldr	r3, [pc, #116]	; (800d370 <tcp_timewait_input+0xd8>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d2fe:	4b1f      	ldr	r3, [pc, #124]	; (800d37c <tcp_timewait_input+0xe4>)
 800d300:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d302:	885b      	ldrh	r3, [r3, #2]
 800d304:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d306:	4a1d      	ldr	r2, [pc, #116]	; (800d37c <tcp_timewait_input+0xe4>)
 800d308:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d30a:	8812      	ldrh	r2, [r2, #0]
 800d30c:	b292      	uxth	r2, r2
 800d30e:	9202      	str	r2, [sp, #8]
 800d310:	9301      	str	r3, [sp, #4]
 800d312:	4b1b      	ldr	r3, [pc, #108]	; (800d380 <tcp_timewait_input+0xe8>)
 800d314:	9300      	str	r3, [sp, #0]
 800d316:	4b1b      	ldr	r3, [pc, #108]	; (800d384 <tcp_timewait_input+0xec>)
 800d318:	4602      	mov	r2, r0
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f002 fe72 	bl	8010004 <tcp_rst>
      return;
 800d320:	e01b      	b.n	800d35a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800d322:	4b0f      	ldr	r3, [pc, #60]	; (800d360 <tcp_timewait_input+0xc8>)
 800d324:	781b      	ldrb	r3, [r3, #0]
 800d326:	f003 0301 	and.w	r3, r3, #1
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d003      	beq.n	800d336 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800d32e:	4b16      	ldr	r3, [pc, #88]	; (800d388 <tcp_timewait_input+0xf0>)
 800d330:	681a      	ldr	r2, [r3, #0]
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800d336:	4b10      	ldr	r3, [pc, #64]	; (800d378 <tcp_timewait_input+0xe0>)
 800d338:	881b      	ldrh	r3, [r3, #0]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d00c      	beq.n	800d358 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	8b5b      	ldrh	r3, [r3, #26]
 800d342:	f043 0302 	orr.w	r3, r3, #2
 800d346:	b29a      	uxth	r2, r3
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f002 f8a5 	bl	800f49c <tcp_output>
  }
  return;
 800d352:	e001      	b.n	800d358 <tcp_timewait_input+0xc0>
    return;
 800d354:	bf00      	nop
 800d356:	e000      	b.n	800d35a <tcp_timewait_input+0xc2>
  return;
 800d358:	bf00      	nop
}
 800d35a:	3708      	adds	r7, #8
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}
 800d360:	2000d3bc 	.word	0x2000d3bc
 800d364:	0801797c 	.word	0x0801797c
 800d368:	08017b94 	.word	0x08017b94
 800d36c:	080179c8 	.word	0x080179c8
 800d370:	2000d3b0 	.word	0x2000d3b0
 800d374:	2000d3b4 	.word	0x2000d3b4
 800d378:	2000d3ba 	.word	0x2000d3ba
 800d37c:	2000d3a0 	.word	0x2000d3a0
 800d380:	20009c14 	.word	0x20009c14
 800d384:	20009c18 	.word	0x20009c18
 800d388:	2000d378 	.word	0x2000d378

0800d38c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800d38c:	b590      	push	{r4, r7, lr}
 800d38e:	b08d      	sub	sp, #52	; 0x34
 800d390:	af04      	add	r7, sp, #16
 800d392:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800d394:	2300      	movs	r3, #0
 800d396:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800d398:	2300      	movs	r3, #0
 800d39a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d106      	bne.n	800d3b0 <tcp_process+0x24>
 800d3a2:	4b9d      	ldr	r3, [pc, #628]	; (800d618 <tcp_process+0x28c>)
 800d3a4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800d3a8:	499c      	ldr	r1, [pc, #624]	; (800d61c <tcp_process+0x290>)
 800d3aa:	489d      	ldr	r0, [pc, #628]	; (800d620 <tcp_process+0x294>)
 800d3ac:	f008 f8d8 	bl	8015560 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800d3b0:	4b9c      	ldr	r3, [pc, #624]	; (800d624 <tcp_process+0x298>)
 800d3b2:	781b      	ldrb	r3, [r3, #0]
 800d3b4:	f003 0304 	and.w	r3, r3, #4
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d04e      	beq.n	800d45a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	7d1b      	ldrb	r3, [r3, #20]
 800d3c0:	2b02      	cmp	r3, #2
 800d3c2:	d108      	bne.n	800d3d6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d3c8:	4b97      	ldr	r3, [pc, #604]	; (800d628 <tcp_process+0x29c>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	429a      	cmp	r2, r3
 800d3ce:	d123      	bne.n	800d418 <tcp_process+0x8c>
        acceptable = 1;
 800d3d0:	2301      	movs	r3, #1
 800d3d2:	76fb      	strb	r3, [r7, #27]
 800d3d4:	e020      	b.n	800d418 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d3da:	4b94      	ldr	r3, [pc, #592]	; (800d62c <tcp_process+0x2a0>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	d102      	bne.n	800d3e8 <tcp_process+0x5c>
        acceptable = 1;
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	76fb      	strb	r3, [r7, #27]
 800d3e6:	e017      	b.n	800d418 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d3e8:	4b90      	ldr	r3, [pc, #576]	; (800d62c <tcp_process+0x2a0>)
 800d3ea:	681a      	ldr	r2, [r3, #0]
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3f0:	1ad3      	subs	r3, r2, r3
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	db10      	blt.n	800d418 <tcp_process+0x8c>
 800d3f6:	4b8d      	ldr	r3, [pc, #564]	; (800d62c <tcp_process+0x2a0>)
 800d3f8:	681a      	ldr	r2, [r3, #0]
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3fe:	6879      	ldr	r1, [r7, #4]
 800d400:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d402:	440b      	add	r3, r1
 800d404:	1ad3      	subs	r3, r2, r3
 800d406:	2b00      	cmp	r3, #0
 800d408:	dc06      	bgt.n	800d418 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	8b5b      	ldrh	r3, [r3, #26]
 800d40e:	f043 0302 	orr.w	r3, r3, #2
 800d412:	b29a      	uxth	r2, r3
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800d418:	7efb      	ldrb	r3, [r7, #27]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d01b      	beq.n	800d456 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	7d1b      	ldrb	r3, [r3, #20]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d106      	bne.n	800d434 <tcp_process+0xa8>
 800d426:	4b7c      	ldr	r3, [pc, #496]	; (800d618 <tcp_process+0x28c>)
 800d428:	f44f 724e 	mov.w	r2, #824	; 0x338
 800d42c:	4980      	ldr	r1, [pc, #512]	; (800d630 <tcp_process+0x2a4>)
 800d42e:	487c      	ldr	r0, [pc, #496]	; (800d620 <tcp_process+0x294>)
 800d430:	f008 f896 	bl	8015560 <iprintf>
      recv_flags |= TF_RESET;
 800d434:	4b7f      	ldr	r3, [pc, #508]	; (800d634 <tcp_process+0x2a8>)
 800d436:	781b      	ldrb	r3, [r3, #0]
 800d438:	f043 0308 	orr.w	r3, r3, #8
 800d43c:	b2da      	uxtb	r2, r3
 800d43e:	4b7d      	ldr	r3, [pc, #500]	; (800d634 <tcp_process+0x2a8>)
 800d440:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	8b5b      	ldrh	r3, [r3, #26]
 800d446:	f023 0301 	bic.w	r3, r3, #1
 800d44a:	b29a      	uxth	r2, r3
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800d450:	f06f 030d 	mvn.w	r3, #13
 800d454:	e37a      	b.n	800db4c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800d456:	2300      	movs	r3, #0
 800d458:	e378      	b.n	800db4c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800d45a:	4b72      	ldr	r3, [pc, #456]	; (800d624 <tcp_process+0x298>)
 800d45c:	781b      	ldrb	r3, [r3, #0]
 800d45e:	f003 0302 	and.w	r3, r3, #2
 800d462:	2b00      	cmp	r3, #0
 800d464:	d010      	beq.n	800d488 <tcp_process+0xfc>
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	7d1b      	ldrb	r3, [r3, #20]
 800d46a:	2b02      	cmp	r3, #2
 800d46c:	d00c      	beq.n	800d488 <tcp_process+0xfc>
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	7d1b      	ldrb	r3, [r3, #20]
 800d472:	2b03      	cmp	r3, #3
 800d474:	d008      	beq.n	800d488 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	8b5b      	ldrh	r3, [r3, #26]
 800d47a:	f043 0302 	orr.w	r3, r3, #2
 800d47e:	b29a      	uxth	r2, r3
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800d484:	2300      	movs	r3, #0
 800d486:	e361      	b.n	800db4c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	8b5b      	ldrh	r3, [r3, #26]
 800d48c:	f003 0310 	and.w	r3, r3, #16
 800d490:	2b00      	cmp	r3, #0
 800d492:	d103      	bne.n	800d49c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800d494:	4b68      	ldr	r3, [pc, #416]	; (800d638 <tcp_process+0x2ac>)
 800d496:	681a      	ldr	r2, [r3, #0]
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	2200      	movs	r2, #0
 800d4a0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f001 fc2f 	bl	800ed10 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	7d1b      	ldrb	r3, [r3, #20]
 800d4b6:	3b02      	subs	r3, #2
 800d4b8:	2b07      	cmp	r3, #7
 800d4ba:	f200 8337 	bhi.w	800db2c <tcp_process+0x7a0>
 800d4be:	a201      	add	r2, pc, #4	; (adr r2, 800d4c4 <tcp_process+0x138>)
 800d4c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4c4:	0800d4e5 	.word	0x0800d4e5
 800d4c8:	0800d715 	.word	0x0800d715
 800d4cc:	0800d88d 	.word	0x0800d88d
 800d4d0:	0800d8b7 	.word	0x0800d8b7
 800d4d4:	0800d9db 	.word	0x0800d9db
 800d4d8:	0800d88d 	.word	0x0800d88d
 800d4dc:	0800da67 	.word	0x0800da67
 800d4e0:	0800daf7 	.word	0x0800daf7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800d4e4:	4b4f      	ldr	r3, [pc, #316]	; (800d624 <tcp_process+0x298>)
 800d4e6:	781b      	ldrb	r3, [r3, #0]
 800d4e8:	f003 0310 	and.w	r3, r3, #16
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	f000 80e4 	beq.w	800d6ba <tcp_process+0x32e>
 800d4f2:	4b4c      	ldr	r3, [pc, #304]	; (800d624 <tcp_process+0x298>)
 800d4f4:	781b      	ldrb	r3, [r3, #0]
 800d4f6:	f003 0302 	and.w	r3, r3, #2
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	f000 80dd 	beq.w	800d6ba <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d504:	1c5a      	adds	r2, r3, #1
 800d506:	4b48      	ldr	r3, [pc, #288]	; (800d628 <tcp_process+0x29c>)
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	429a      	cmp	r2, r3
 800d50c:	f040 80d5 	bne.w	800d6ba <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800d510:	4b46      	ldr	r3, [pc, #280]	; (800d62c <tcp_process+0x2a0>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	1c5a      	adds	r2, r3, #1
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800d522:	4b41      	ldr	r3, [pc, #260]	; (800d628 <tcp_process+0x29c>)
 800d524:	681a      	ldr	r2, [r3, #0]
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800d52a:	4b44      	ldr	r3, [pc, #272]	; (800d63c <tcp_process+0x2b0>)
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	89db      	ldrh	r3, [r3, #14]
 800d530:	b29a      	uxth	r2, r3
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800d544:	4b39      	ldr	r3, [pc, #228]	; (800d62c <tcp_process+0x2a0>)
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	1e5a      	subs	r2, r3, #1
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2204      	movs	r2, #4
 800d552:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	3304      	adds	r3, #4
 800d55c:	4618      	mov	r0, r3
 800d55e:	f006 fcb9 	bl	8013ed4 <ip4_route>
 800d562:	4601      	mov	r1, r0
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	3304      	adds	r3, #4
 800d568:	461a      	mov	r2, r3
 800d56a:	4620      	mov	r0, r4
 800d56c:	f7ff f88c 	bl	800c688 <tcp_eff_send_mss_netif>
 800d570:	4603      	mov	r3, r0
 800d572:	461a      	mov	r2, r3
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d57c:	009a      	lsls	r2, r3, #2
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d582:	005b      	lsls	r3, r3, #1
 800d584:	f241 111c 	movw	r1, #4380	; 0x111c
 800d588:	428b      	cmp	r3, r1
 800d58a:	bf38      	it	cc
 800d58c:	460b      	movcc	r3, r1
 800d58e:	429a      	cmp	r2, r3
 800d590:	d204      	bcs.n	800d59c <tcp_process+0x210>
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d596:	009b      	lsls	r3, r3, #2
 800d598:	b29b      	uxth	r3, r3
 800d59a:	e00d      	b.n	800d5b8 <tcp_process+0x22c>
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d5a0:	005b      	lsls	r3, r3, #1
 800d5a2:	f241 121c 	movw	r2, #4380	; 0x111c
 800d5a6:	4293      	cmp	r3, r2
 800d5a8:	d904      	bls.n	800d5b4 <tcp_process+0x228>
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d5ae:	005b      	lsls	r3, r3, #1
 800d5b0:	b29b      	uxth	r3, r3
 800d5b2:	e001      	b.n	800d5b8 <tcp_process+0x22c>
 800d5b4:	f241 131c 	movw	r3, #4380	; 0x111c
 800d5b8:	687a      	ldr	r2, [r7, #4]
 800d5ba:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d106      	bne.n	800d5d6 <tcp_process+0x24a>
 800d5c8:	4b13      	ldr	r3, [pc, #76]	; (800d618 <tcp_process+0x28c>)
 800d5ca:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800d5ce:	491c      	ldr	r1, [pc, #112]	; (800d640 <tcp_process+0x2b4>)
 800d5d0:	4813      	ldr	r0, [pc, #76]	; (800d620 <tcp_process+0x294>)
 800d5d2:	f007 ffc5 	bl	8015560 <iprintf>
        --pcb->snd_queuelen;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d5dc:	3b01      	subs	r3, #1
 800d5de:	b29a      	uxth	r2, r3
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5ea:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800d5ec:	69fb      	ldr	r3, [r7, #28]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d12a      	bne.n	800d648 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5f6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800d5f8:	69fb      	ldr	r3, [r7, #28]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d106      	bne.n	800d60c <tcp_process+0x280>
 800d5fe:	4b06      	ldr	r3, [pc, #24]	; (800d618 <tcp_process+0x28c>)
 800d600:	f44f 725d 	mov.w	r2, #884	; 0x374
 800d604:	490f      	ldr	r1, [pc, #60]	; (800d644 <tcp_process+0x2b8>)
 800d606:	4806      	ldr	r0, [pc, #24]	; (800d620 <tcp_process+0x294>)
 800d608:	f007 ffaa 	bl	8015560 <iprintf>
          pcb->unsent = rseg->next;
 800d60c:	69fb      	ldr	r3, [r7, #28]
 800d60e:	681a      	ldr	r2, [r3, #0]
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	66da      	str	r2, [r3, #108]	; 0x6c
 800d614:	e01c      	b.n	800d650 <tcp_process+0x2c4>
 800d616:	bf00      	nop
 800d618:	0801797c 	.word	0x0801797c
 800d61c:	08017bb4 	.word	0x08017bb4
 800d620:	080179c8 	.word	0x080179c8
 800d624:	2000d3bc 	.word	0x2000d3bc
 800d628:	2000d3b4 	.word	0x2000d3b4
 800d62c:	2000d3b0 	.word	0x2000d3b0
 800d630:	08017bd0 	.word	0x08017bd0
 800d634:	2000d3bd 	.word	0x2000d3bd
 800d638:	2000d378 	.word	0x2000d378
 800d63c:	2000d3a0 	.word	0x2000d3a0
 800d640:	08017bf0 	.word	0x08017bf0
 800d644:	08017c08 	.word	0x08017c08
        } else {
          pcb->unacked = rseg->next;
 800d648:	69fb      	ldr	r3, [r7, #28]
 800d64a:	681a      	ldr	r2, [r3, #0]
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800d650:	69f8      	ldr	r0, [r7, #28]
 800d652:	f7fe fd22 	bl	800c09a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d104      	bne.n	800d668 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d664:	861a      	strh	r2, [r3, #48]	; 0x30
 800d666:	e006      	b.n	800d676 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2200      	movs	r2, #0
 800d66c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	2200      	movs	r2, #0
 800d672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d00a      	beq.n	800d696 <tcp_process+0x30a>
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d686:	687a      	ldr	r2, [r7, #4]
 800d688:	6910      	ldr	r0, [r2, #16]
 800d68a:	2200      	movs	r2, #0
 800d68c:	6879      	ldr	r1, [r7, #4]
 800d68e:	4798      	blx	r3
 800d690:	4603      	mov	r3, r0
 800d692:	76bb      	strb	r3, [r7, #26]
 800d694:	e001      	b.n	800d69a <tcp_process+0x30e>
 800d696:	2300      	movs	r3, #0
 800d698:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800d69a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d69e:	f113 0f0d 	cmn.w	r3, #13
 800d6a2:	d102      	bne.n	800d6aa <tcp_process+0x31e>
          return ERR_ABRT;
 800d6a4:	f06f 030c 	mvn.w	r3, #12
 800d6a8:	e250      	b.n	800db4c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	8b5b      	ldrh	r3, [r3, #26]
 800d6ae:	f043 0302 	orr.w	r3, r3, #2
 800d6b2:	b29a      	uxth	r2, r3
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800d6b8:	e23a      	b.n	800db30 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800d6ba:	4b98      	ldr	r3, [pc, #608]	; (800d91c <tcp_process+0x590>)
 800d6bc:	781b      	ldrb	r3, [r3, #0]
 800d6be:	f003 0310 	and.w	r3, r3, #16
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	f000 8234 	beq.w	800db30 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d6c8:	4b95      	ldr	r3, [pc, #596]	; (800d920 <tcp_process+0x594>)
 800d6ca:	6819      	ldr	r1, [r3, #0]
 800d6cc:	4b95      	ldr	r3, [pc, #596]	; (800d924 <tcp_process+0x598>)
 800d6ce:	881b      	ldrh	r3, [r3, #0]
 800d6d0:	461a      	mov	r2, r3
 800d6d2:	4b95      	ldr	r3, [pc, #596]	; (800d928 <tcp_process+0x59c>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d6d8:	4b94      	ldr	r3, [pc, #592]	; (800d92c <tcp_process+0x5a0>)
 800d6da:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d6dc:	885b      	ldrh	r3, [r3, #2]
 800d6de:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d6e0:	4a92      	ldr	r2, [pc, #584]	; (800d92c <tcp_process+0x5a0>)
 800d6e2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d6e4:	8812      	ldrh	r2, [r2, #0]
 800d6e6:	b292      	uxth	r2, r2
 800d6e8:	9202      	str	r2, [sp, #8]
 800d6ea:	9301      	str	r3, [sp, #4]
 800d6ec:	4b90      	ldr	r3, [pc, #576]	; (800d930 <tcp_process+0x5a4>)
 800d6ee:	9300      	str	r3, [sp, #0]
 800d6f0:	4b90      	ldr	r3, [pc, #576]	; (800d934 <tcp_process+0x5a8>)
 800d6f2:	4602      	mov	r2, r0
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	f002 fc85 	bl	8010004 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d700:	2b05      	cmp	r3, #5
 800d702:	f200 8215 	bhi.w	800db30 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	2200      	movs	r2, #0
 800d70a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800d70c:	6878      	ldr	r0, [r7, #4]
 800d70e:	f002 fa4f 	bl	800fbb0 <tcp_rexmit_rto>
      break;
 800d712:	e20d      	b.n	800db30 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800d714:	4b81      	ldr	r3, [pc, #516]	; (800d91c <tcp_process+0x590>)
 800d716:	781b      	ldrb	r3, [r3, #0]
 800d718:	f003 0310 	and.w	r3, r3, #16
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	f000 80a1 	beq.w	800d864 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d722:	4b7f      	ldr	r3, [pc, #508]	; (800d920 <tcp_process+0x594>)
 800d724:	681a      	ldr	r2, [r3, #0]
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d72a:	1ad3      	subs	r3, r2, r3
 800d72c:	3b01      	subs	r3, #1
 800d72e:	2b00      	cmp	r3, #0
 800d730:	db7e      	blt.n	800d830 <tcp_process+0x4a4>
 800d732:	4b7b      	ldr	r3, [pc, #492]	; (800d920 <tcp_process+0x594>)
 800d734:	681a      	ldr	r2, [r3, #0]
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d73a:	1ad3      	subs	r3, r2, r3
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	dc77      	bgt.n	800d830 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	2204      	movs	r2, #4
 800d744:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d102      	bne.n	800d754 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800d74e:	23fa      	movs	r3, #250	; 0xfa
 800d750:	76bb      	strb	r3, [r7, #26]
 800d752:	e01d      	b.n	800d790 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d758:	699b      	ldr	r3, [r3, #24]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d106      	bne.n	800d76c <tcp_process+0x3e0>
 800d75e:	4b76      	ldr	r3, [pc, #472]	; (800d938 <tcp_process+0x5ac>)
 800d760:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800d764:	4975      	ldr	r1, [pc, #468]	; (800d93c <tcp_process+0x5b0>)
 800d766:	4876      	ldr	r0, [pc, #472]	; (800d940 <tcp_process+0x5b4>)
 800d768:	f007 fefa 	bl	8015560 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d770:	699b      	ldr	r3, [r3, #24]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d00a      	beq.n	800d78c <tcp_process+0x400>
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d77a:	699b      	ldr	r3, [r3, #24]
 800d77c:	687a      	ldr	r2, [r7, #4]
 800d77e:	6910      	ldr	r0, [r2, #16]
 800d780:	2200      	movs	r2, #0
 800d782:	6879      	ldr	r1, [r7, #4]
 800d784:	4798      	blx	r3
 800d786:	4603      	mov	r3, r0
 800d788:	76bb      	strb	r3, [r7, #26]
 800d78a:	e001      	b.n	800d790 <tcp_process+0x404>
 800d78c:	23f0      	movs	r3, #240	; 0xf0
 800d78e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800d790:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d00a      	beq.n	800d7ae <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800d798:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800d79c:	f113 0f0d 	cmn.w	r3, #13
 800d7a0:	d002      	beq.n	800d7a8 <tcp_process+0x41c>
              tcp_abort(pcb);
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f7fd ff8e 	bl	800b6c4 <tcp_abort>
            }
            return ERR_ABRT;
 800d7a8:	f06f 030c 	mvn.w	r3, #12
 800d7ac:	e1ce      	b.n	800db4c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f000 fae0 	bl	800dd74 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800d7b4:	4b63      	ldr	r3, [pc, #396]	; (800d944 <tcp_process+0x5b8>)
 800d7b6:	881b      	ldrh	r3, [r3, #0]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d005      	beq.n	800d7c8 <tcp_process+0x43c>
            recv_acked--;
 800d7bc:	4b61      	ldr	r3, [pc, #388]	; (800d944 <tcp_process+0x5b8>)
 800d7be:	881b      	ldrh	r3, [r3, #0]
 800d7c0:	3b01      	subs	r3, #1
 800d7c2:	b29a      	uxth	r2, r3
 800d7c4:	4b5f      	ldr	r3, [pc, #380]	; (800d944 <tcp_process+0x5b8>)
 800d7c6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d7cc:	009a      	lsls	r2, r3, #2
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d7d2:	005b      	lsls	r3, r3, #1
 800d7d4:	f241 111c 	movw	r1, #4380	; 0x111c
 800d7d8:	428b      	cmp	r3, r1
 800d7da:	bf38      	it	cc
 800d7dc:	460b      	movcc	r3, r1
 800d7de:	429a      	cmp	r2, r3
 800d7e0:	d204      	bcs.n	800d7ec <tcp_process+0x460>
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d7e6:	009b      	lsls	r3, r3, #2
 800d7e8:	b29b      	uxth	r3, r3
 800d7ea:	e00d      	b.n	800d808 <tcp_process+0x47c>
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d7f0:	005b      	lsls	r3, r3, #1
 800d7f2:	f241 121c 	movw	r2, #4380	; 0x111c
 800d7f6:	4293      	cmp	r3, r2
 800d7f8:	d904      	bls.n	800d804 <tcp_process+0x478>
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d7fe:	005b      	lsls	r3, r3, #1
 800d800:	b29b      	uxth	r3, r3
 800d802:	e001      	b.n	800d808 <tcp_process+0x47c>
 800d804:	f241 131c 	movw	r3, #4380	; 0x111c
 800d808:	687a      	ldr	r2, [r7, #4]
 800d80a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800d80e:	4b4e      	ldr	r3, [pc, #312]	; (800d948 <tcp_process+0x5bc>)
 800d810:	781b      	ldrb	r3, [r3, #0]
 800d812:	f003 0320 	and.w	r3, r3, #32
 800d816:	2b00      	cmp	r3, #0
 800d818:	d037      	beq.n	800d88a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	8b5b      	ldrh	r3, [r3, #26]
 800d81e:	f043 0302 	orr.w	r3, r3, #2
 800d822:	b29a      	uxth	r2, r3
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2207      	movs	r2, #7
 800d82c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800d82e:	e02c      	b.n	800d88a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d830:	4b3b      	ldr	r3, [pc, #236]	; (800d920 <tcp_process+0x594>)
 800d832:	6819      	ldr	r1, [r3, #0]
 800d834:	4b3b      	ldr	r3, [pc, #236]	; (800d924 <tcp_process+0x598>)
 800d836:	881b      	ldrh	r3, [r3, #0]
 800d838:	461a      	mov	r2, r3
 800d83a:	4b3b      	ldr	r3, [pc, #236]	; (800d928 <tcp_process+0x59c>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d840:	4b3a      	ldr	r3, [pc, #232]	; (800d92c <tcp_process+0x5a0>)
 800d842:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d844:	885b      	ldrh	r3, [r3, #2]
 800d846:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d848:	4a38      	ldr	r2, [pc, #224]	; (800d92c <tcp_process+0x5a0>)
 800d84a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d84c:	8812      	ldrh	r2, [r2, #0]
 800d84e:	b292      	uxth	r2, r2
 800d850:	9202      	str	r2, [sp, #8]
 800d852:	9301      	str	r3, [sp, #4]
 800d854:	4b36      	ldr	r3, [pc, #216]	; (800d930 <tcp_process+0x5a4>)
 800d856:	9300      	str	r3, [sp, #0]
 800d858:	4b36      	ldr	r3, [pc, #216]	; (800d934 <tcp_process+0x5a8>)
 800d85a:	4602      	mov	r2, r0
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f002 fbd1 	bl	8010004 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800d862:	e167      	b.n	800db34 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800d864:	4b2d      	ldr	r3, [pc, #180]	; (800d91c <tcp_process+0x590>)
 800d866:	781b      	ldrb	r3, [r3, #0]
 800d868:	f003 0302 	and.w	r3, r3, #2
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	f000 8161 	beq.w	800db34 <tcp_process+0x7a8>
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d876:	1e5a      	subs	r2, r3, #1
 800d878:	4b2b      	ldr	r3, [pc, #172]	; (800d928 <tcp_process+0x59c>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	429a      	cmp	r2, r3
 800d87e:	f040 8159 	bne.w	800db34 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800d882:	6878      	ldr	r0, [r7, #4]
 800d884:	f002 f9b6 	bl	800fbf4 <tcp_rexmit>
      break;
 800d888:	e154      	b.n	800db34 <tcp_process+0x7a8>
 800d88a:	e153      	b.n	800db34 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800d88c:	6878      	ldr	r0, [r7, #4]
 800d88e:	f000 fa71 	bl	800dd74 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800d892:	4b2d      	ldr	r3, [pc, #180]	; (800d948 <tcp_process+0x5bc>)
 800d894:	781b      	ldrb	r3, [r3, #0]
 800d896:	f003 0320 	and.w	r3, r3, #32
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	f000 814c 	beq.w	800db38 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	8b5b      	ldrh	r3, [r3, #26]
 800d8a4:	f043 0302 	orr.w	r3, r3, #2
 800d8a8:	b29a      	uxth	r2, r3
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2207      	movs	r2, #7
 800d8b2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d8b4:	e140      	b.n	800db38 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f000 fa5c 	bl	800dd74 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d8bc:	4b22      	ldr	r3, [pc, #136]	; (800d948 <tcp_process+0x5bc>)
 800d8be:	781b      	ldrb	r3, [r3, #0]
 800d8c0:	f003 0320 	and.w	r3, r3, #32
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d071      	beq.n	800d9ac <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d8c8:	4b14      	ldr	r3, [pc, #80]	; (800d91c <tcp_process+0x590>)
 800d8ca:	781b      	ldrb	r3, [r3, #0]
 800d8cc:	f003 0310 	and.w	r3, r3, #16
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d060      	beq.n	800d996 <tcp_process+0x60a>
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d8d8:	4b11      	ldr	r3, [pc, #68]	; (800d920 <tcp_process+0x594>)
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	429a      	cmp	r2, r3
 800d8de:	d15a      	bne.n	800d996 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d156      	bne.n	800d996 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	8b5b      	ldrh	r3, [r3, #26]
 800d8ec:	f043 0302 	orr.w	r3, r3, #2
 800d8f0:	b29a      	uxth	r2, r3
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800d8f6:	6878      	ldr	r0, [r7, #4]
 800d8f8:	f7fe fdbc 	bl	800c474 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800d8fc:	4b13      	ldr	r3, [pc, #76]	; (800d94c <tcp_process+0x5c0>)
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	687a      	ldr	r2, [r7, #4]
 800d902:	429a      	cmp	r2, r3
 800d904:	d105      	bne.n	800d912 <tcp_process+0x586>
 800d906:	4b11      	ldr	r3, [pc, #68]	; (800d94c <tcp_process+0x5c0>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	68db      	ldr	r3, [r3, #12]
 800d90c:	4a0f      	ldr	r2, [pc, #60]	; (800d94c <tcp_process+0x5c0>)
 800d90e:	6013      	str	r3, [r2, #0]
 800d910:	e02e      	b.n	800d970 <tcp_process+0x5e4>
 800d912:	4b0e      	ldr	r3, [pc, #56]	; (800d94c <tcp_process+0x5c0>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	617b      	str	r3, [r7, #20]
 800d918:	e027      	b.n	800d96a <tcp_process+0x5de>
 800d91a:	bf00      	nop
 800d91c:	2000d3bc 	.word	0x2000d3bc
 800d920:	2000d3b4 	.word	0x2000d3b4
 800d924:	2000d3ba 	.word	0x2000d3ba
 800d928:	2000d3b0 	.word	0x2000d3b0
 800d92c:	2000d3a0 	.word	0x2000d3a0
 800d930:	20009c14 	.word	0x20009c14
 800d934:	20009c18 	.word	0x20009c18
 800d938:	0801797c 	.word	0x0801797c
 800d93c:	08017c1c 	.word	0x08017c1c
 800d940:	080179c8 	.word	0x080179c8
 800d944:	2000d3b8 	.word	0x2000d3b8
 800d948:	2000d3bd 	.word	0x2000d3bd
 800d94c:	2000d384 	.word	0x2000d384
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	68db      	ldr	r3, [r3, #12]
 800d954:	687a      	ldr	r2, [r7, #4]
 800d956:	429a      	cmp	r2, r3
 800d958:	d104      	bne.n	800d964 <tcp_process+0x5d8>
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	68da      	ldr	r2, [r3, #12]
 800d95e:	697b      	ldr	r3, [r7, #20]
 800d960:	60da      	str	r2, [r3, #12]
 800d962:	e005      	b.n	800d970 <tcp_process+0x5e4>
 800d964:	697b      	ldr	r3, [r7, #20]
 800d966:	68db      	ldr	r3, [r3, #12]
 800d968:	617b      	str	r3, [r7, #20]
 800d96a:	697b      	ldr	r3, [r7, #20]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d1ef      	bne.n	800d950 <tcp_process+0x5c4>
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2200      	movs	r2, #0
 800d974:	60da      	str	r2, [r3, #12]
 800d976:	4b77      	ldr	r3, [pc, #476]	; (800db54 <tcp_process+0x7c8>)
 800d978:	2201      	movs	r2, #1
 800d97a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	220a      	movs	r2, #10
 800d980:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800d982:	4b75      	ldr	r3, [pc, #468]	; (800db58 <tcp_process+0x7cc>)
 800d984:	681a      	ldr	r2, [r3, #0]
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	60da      	str	r2, [r3, #12]
 800d98a:	4a73      	ldr	r2, [pc, #460]	; (800db58 <tcp_process+0x7cc>)
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6013      	str	r3, [r2, #0]
 800d990:	f002 fcfa 	bl	8010388 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800d994:	e0d2      	b.n	800db3c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	8b5b      	ldrh	r3, [r3, #26]
 800d99a:	f043 0302 	orr.w	r3, r3, #2
 800d99e:	b29a      	uxth	r2, r3
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2208      	movs	r2, #8
 800d9a8:	751a      	strb	r2, [r3, #20]
      break;
 800d9aa:	e0c7      	b.n	800db3c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d9ac:	4b6b      	ldr	r3, [pc, #428]	; (800db5c <tcp_process+0x7d0>)
 800d9ae:	781b      	ldrb	r3, [r3, #0]
 800d9b0:	f003 0310 	and.w	r3, r3, #16
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	f000 80c1 	beq.w	800db3c <tcp_process+0x7b0>
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d9be:	4b68      	ldr	r3, [pc, #416]	; (800db60 <tcp_process+0x7d4>)
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	f040 80ba 	bne.w	800db3c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	f040 80b5 	bne.w	800db3c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	2206      	movs	r2, #6
 800d9d6:	751a      	strb	r2, [r3, #20]
      break;
 800d9d8:	e0b0      	b.n	800db3c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800d9da:	6878      	ldr	r0, [r7, #4]
 800d9dc:	f000 f9ca 	bl	800dd74 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d9e0:	4b60      	ldr	r3, [pc, #384]	; (800db64 <tcp_process+0x7d8>)
 800d9e2:	781b      	ldrb	r3, [r3, #0]
 800d9e4:	f003 0320 	and.w	r3, r3, #32
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	f000 80a9 	beq.w	800db40 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	8b5b      	ldrh	r3, [r3, #26]
 800d9f2:	f043 0302 	orr.w	r3, r3, #2
 800d9f6:	b29a      	uxth	r2, r3
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	f7fe fd39 	bl	800c474 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800da02:	4b59      	ldr	r3, [pc, #356]	; (800db68 <tcp_process+0x7dc>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	687a      	ldr	r2, [r7, #4]
 800da08:	429a      	cmp	r2, r3
 800da0a:	d105      	bne.n	800da18 <tcp_process+0x68c>
 800da0c:	4b56      	ldr	r3, [pc, #344]	; (800db68 <tcp_process+0x7dc>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	68db      	ldr	r3, [r3, #12]
 800da12:	4a55      	ldr	r2, [pc, #340]	; (800db68 <tcp_process+0x7dc>)
 800da14:	6013      	str	r3, [r2, #0]
 800da16:	e013      	b.n	800da40 <tcp_process+0x6b4>
 800da18:	4b53      	ldr	r3, [pc, #332]	; (800db68 <tcp_process+0x7dc>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	613b      	str	r3, [r7, #16]
 800da1e:	e00c      	b.n	800da3a <tcp_process+0x6ae>
 800da20:	693b      	ldr	r3, [r7, #16]
 800da22:	68db      	ldr	r3, [r3, #12]
 800da24:	687a      	ldr	r2, [r7, #4]
 800da26:	429a      	cmp	r2, r3
 800da28:	d104      	bne.n	800da34 <tcp_process+0x6a8>
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	68da      	ldr	r2, [r3, #12]
 800da2e:	693b      	ldr	r3, [r7, #16]
 800da30:	60da      	str	r2, [r3, #12]
 800da32:	e005      	b.n	800da40 <tcp_process+0x6b4>
 800da34:	693b      	ldr	r3, [r7, #16]
 800da36:	68db      	ldr	r3, [r3, #12]
 800da38:	613b      	str	r3, [r7, #16]
 800da3a:	693b      	ldr	r3, [r7, #16]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d1ef      	bne.n	800da20 <tcp_process+0x694>
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2200      	movs	r2, #0
 800da44:	60da      	str	r2, [r3, #12]
 800da46:	4b43      	ldr	r3, [pc, #268]	; (800db54 <tcp_process+0x7c8>)
 800da48:	2201      	movs	r2, #1
 800da4a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	220a      	movs	r2, #10
 800da50:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800da52:	4b41      	ldr	r3, [pc, #260]	; (800db58 <tcp_process+0x7cc>)
 800da54:	681a      	ldr	r2, [r3, #0]
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	60da      	str	r2, [r3, #12]
 800da5a:	4a3f      	ldr	r2, [pc, #252]	; (800db58 <tcp_process+0x7cc>)
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6013      	str	r3, [r2, #0]
 800da60:	f002 fc92 	bl	8010388 <tcp_timer_needed>
      }
      break;
 800da64:	e06c      	b.n	800db40 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f000 f984 	bl	800dd74 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800da6c:	4b3b      	ldr	r3, [pc, #236]	; (800db5c <tcp_process+0x7d0>)
 800da6e:	781b      	ldrb	r3, [r3, #0]
 800da70:	f003 0310 	and.w	r3, r3, #16
 800da74:	2b00      	cmp	r3, #0
 800da76:	d065      	beq.n	800db44 <tcp_process+0x7b8>
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800da7c:	4b38      	ldr	r3, [pc, #224]	; (800db60 <tcp_process+0x7d4>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	429a      	cmp	r2, r3
 800da82:	d15f      	bne.n	800db44 <tcp_process+0x7b8>
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d15b      	bne.n	800db44 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f7fe fcf1 	bl	800c474 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800da92:	4b35      	ldr	r3, [pc, #212]	; (800db68 <tcp_process+0x7dc>)
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	687a      	ldr	r2, [r7, #4]
 800da98:	429a      	cmp	r2, r3
 800da9a:	d105      	bne.n	800daa8 <tcp_process+0x71c>
 800da9c:	4b32      	ldr	r3, [pc, #200]	; (800db68 <tcp_process+0x7dc>)
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	68db      	ldr	r3, [r3, #12]
 800daa2:	4a31      	ldr	r2, [pc, #196]	; (800db68 <tcp_process+0x7dc>)
 800daa4:	6013      	str	r3, [r2, #0]
 800daa6:	e013      	b.n	800dad0 <tcp_process+0x744>
 800daa8:	4b2f      	ldr	r3, [pc, #188]	; (800db68 <tcp_process+0x7dc>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	60fb      	str	r3, [r7, #12]
 800daae:	e00c      	b.n	800daca <tcp_process+0x73e>
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	68db      	ldr	r3, [r3, #12]
 800dab4:	687a      	ldr	r2, [r7, #4]
 800dab6:	429a      	cmp	r2, r3
 800dab8:	d104      	bne.n	800dac4 <tcp_process+0x738>
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	68da      	ldr	r2, [r3, #12]
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	60da      	str	r2, [r3, #12]
 800dac2:	e005      	b.n	800dad0 <tcp_process+0x744>
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	68db      	ldr	r3, [r3, #12]
 800dac8:	60fb      	str	r3, [r7, #12]
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d1ef      	bne.n	800dab0 <tcp_process+0x724>
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2200      	movs	r2, #0
 800dad4:	60da      	str	r2, [r3, #12]
 800dad6:	4b1f      	ldr	r3, [pc, #124]	; (800db54 <tcp_process+0x7c8>)
 800dad8:	2201      	movs	r2, #1
 800dada:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	220a      	movs	r2, #10
 800dae0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800dae2:	4b1d      	ldr	r3, [pc, #116]	; (800db58 <tcp_process+0x7cc>)
 800dae4:	681a      	ldr	r2, [r3, #0]
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	60da      	str	r2, [r3, #12]
 800daea:	4a1b      	ldr	r2, [pc, #108]	; (800db58 <tcp_process+0x7cc>)
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	6013      	str	r3, [r2, #0]
 800daf0:	f002 fc4a 	bl	8010388 <tcp_timer_needed>
      }
      break;
 800daf4:	e026      	b.n	800db44 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800daf6:	6878      	ldr	r0, [r7, #4]
 800daf8:	f000 f93c 	bl	800dd74 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800dafc:	4b17      	ldr	r3, [pc, #92]	; (800db5c <tcp_process+0x7d0>)
 800dafe:	781b      	ldrb	r3, [r3, #0]
 800db00:	f003 0310 	and.w	r3, r3, #16
 800db04:	2b00      	cmp	r3, #0
 800db06:	d01f      	beq.n	800db48 <tcp_process+0x7bc>
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800db0c:	4b14      	ldr	r3, [pc, #80]	; (800db60 <tcp_process+0x7d4>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	429a      	cmp	r2, r3
 800db12:	d119      	bne.n	800db48 <tcp_process+0x7bc>
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d115      	bne.n	800db48 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800db1c:	4b11      	ldr	r3, [pc, #68]	; (800db64 <tcp_process+0x7d8>)
 800db1e:	781b      	ldrb	r3, [r3, #0]
 800db20:	f043 0310 	orr.w	r3, r3, #16
 800db24:	b2da      	uxtb	r2, r3
 800db26:	4b0f      	ldr	r3, [pc, #60]	; (800db64 <tcp_process+0x7d8>)
 800db28:	701a      	strb	r2, [r3, #0]
      }
      break;
 800db2a:	e00d      	b.n	800db48 <tcp_process+0x7bc>
    default:
      break;
 800db2c:	bf00      	nop
 800db2e:	e00c      	b.n	800db4a <tcp_process+0x7be>
      break;
 800db30:	bf00      	nop
 800db32:	e00a      	b.n	800db4a <tcp_process+0x7be>
      break;
 800db34:	bf00      	nop
 800db36:	e008      	b.n	800db4a <tcp_process+0x7be>
      break;
 800db38:	bf00      	nop
 800db3a:	e006      	b.n	800db4a <tcp_process+0x7be>
      break;
 800db3c:	bf00      	nop
 800db3e:	e004      	b.n	800db4a <tcp_process+0x7be>
      break;
 800db40:	bf00      	nop
 800db42:	e002      	b.n	800db4a <tcp_process+0x7be>
      break;
 800db44:	bf00      	nop
 800db46:	e000      	b.n	800db4a <tcp_process+0x7be>
      break;
 800db48:	bf00      	nop
  }
  return ERR_OK;
 800db4a:	2300      	movs	r3, #0
}
 800db4c:	4618      	mov	r0, r3
 800db4e:	3724      	adds	r7, #36	; 0x24
 800db50:	46bd      	mov	sp, r7
 800db52:	bd90      	pop	{r4, r7, pc}
 800db54:	2000d38c 	.word	0x2000d38c
 800db58:	2000d388 	.word	0x2000d388
 800db5c:	2000d3bc 	.word	0x2000d3bc
 800db60:	2000d3b4 	.word	0x2000d3b4
 800db64:	2000d3bd 	.word	0x2000d3bd
 800db68:	2000d384 	.word	0x2000d384

0800db6c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800db6c:	b590      	push	{r4, r7, lr}
 800db6e:	b085      	sub	sp, #20
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
 800db74:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d106      	bne.n	800db8a <tcp_oos_insert_segment+0x1e>
 800db7c:	4b3b      	ldr	r3, [pc, #236]	; (800dc6c <tcp_oos_insert_segment+0x100>)
 800db7e:	f240 421f 	movw	r2, #1055	; 0x41f
 800db82:	493b      	ldr	r1, [pc, #236]	; (800dc70 <tcp_oos_insert_segment+0x104>)
 800db84:	483b      	ldr	r0, [pc, #236]	; (800dc74 <tcp_oos_insert_segment+0x108>)
 800db86:	f007 fceb 	bl	8015560 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	68db      	ldr	r3, [r3, #12]
 800db8e:	899b      	ldrh	r3, [r3, #12]
 800db90:	b29b      	uxth	r3, r3
 800db92:	4618      	mov	r0, r3
 800db94:	f7fb fbf4 	bl	8009380 <lwip_htons>
 800db98:	4603      	mov	r3, r0
 800db9a:	b2db      	uxtb	r3, r3
 800db9c:	f003 0301 	and.w	r3, r3, #1
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d028      	beq.n	800dbf6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800dba4:	6838      	ldr	r0, [r7, #0]
 800dba6:	f7fe fa63 	bl	800c070 <tcp_segs_free>
    next = NULL;
 800dbaa:	2300      	movs	r3, #0
 800dbac:	603b      	str	r3, [r7, #0]
 800dbae:	e056      	b.n	800dc5e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	68db      	ldr	r3, [r3, #12]
 800dbb4:	899b      	ldrh	r3, [r3, #12]
 800dbb6:	b29b      	uxth	r3, r3
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f7fb fbe1 	bl	8009380 <lwip_htons>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	b2db      	uxtb	r3, r3
 800dbc2:	f003 0301 	and.w	r3, r3, #1
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d00d      	beq.n	800dbe6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	68db      	ldr	r3, [r3, #12]
 800dbce:	899b      	ldrh	r3, [r3, #12]
 800dbd0:	b29c      	uxth	r4, r3
 800dbd2:	2001      	movs	r0, #1
 800dbd4:	f7fb fbd4 	bl	8009380 <lwip_htons>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	461a      	mov	r2, r3
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	68db      	ldr	r3, [r3, #12]
 800dbe0:	4322      	orrs	r2, r4
 800dbe2:	b292      	uxth	r2, r2
 800dbe4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800dbf0:	68f8      	ldr	r0, [r7, #12]
 800dbf2:	f7fe fa52 	bl	800c09a <tcp_seg_free>
    while (next &&
 800dbf6:	683b      	ldr	r3, [r7, #0]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d00e      	beq.n	800dc1a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	891b      	ldrh	r3, [r3, #8]
 800dc00:	461a      	mov	r2, r3
 800dc02:	4b1d      	ldr	r3, [pc, #116]	; (800dc78 <tcp_oos_insert_segment+0x10c>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	441a      	add	r2, r3
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	68db      	ldr	r3, [r3, #12]
 800dc0c:	685b      	ldr	r3, [r3, #4]
 800dc0e:	6839      	ldr	r1, [r7, #0]
 800dc10:	8909      	ldrh	r1, [r1, #8]
 800dc12:	440b      	add	r3, r1
 800dc14:	1ad3      	subs	r3, r2, r3
    while (next &&
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	daca      	bge.n	800dbb0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d01e      	beq.n	800dc5e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	891b      	ldrh	r3, [r3, #8]
 800dc24:	461a      	mov	r2, r3
 800dc26:	4b14      	ldr	r3, [pc, #80]	; (800dc78 <tcp_oos_insert_segment+0x10c>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	441a      	add	r2, r3
 800dc2c:	683b      	ldr	r3, [r7, #0]
 800dc2e:	68db      	ldr	r3, [r3, #12]
 800dc30:	685b      	ldr	r3, [r3, #4]
 800dc32:	1ad3      	subs	r3, r2, r3
    if (next &&
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	dd12      	ble.n	800dc5e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	68db      	ldr	r3, [r3, #12]
 800dc3c:	685b      	ldr	r3, [r3, #4]
 800dc3e:	b29a      	uxth	r2, r3
 800dc40:	4b0d      	ldr	r3, [pc, #52]	; (800dc78 <tcp_oos_insert_segment+0x10c>)
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	b29b      	uxth	r3, r3
 800dc46:	1ad3      	subs	r3, r2, r3
 800dc48:	b29a      	uxth	r2, r3
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	685a      	ldr	r2, [r3, #4]
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	891b      	ldrh	r3, [r3, #8]
 800dc56:	4619      	mov	r1, r3
 800dc58:	4610      	mov	r0, r2
 800dc5a:	f7fc fe09 	bl	800a870 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	683a      	ldr	r2, [r7, #0]
 800dc62:	601a      	str	r2, [r3, #0]
}
 800dc64:	bf00      	nop
 800dc66:	3714      	adds	r7, #20
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	bd90      	pop	{r4, r7, pc}
 800dc6c:	0801797c 	.word	0x0801797c
 800dc70:	08017c3c 	.word	0x08017c3c
 800dc74:	080179c8 	.word	0x080179c8
 800dc78:	2000d3b0 	.word	0x2000d3b0

0800dc7c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800dc7c:	b5b0      	push	{r4, r5, r7, lr}
 800dc7e:	b086      	sub	sp, #24
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	60f8      	str	r0, [r7, #12]
 800dc84:	60b9      	str	r1, [r7, #8]
 800dc86:	607a      	str	r2, [r7, #4]
 800dc88:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800dc8a:	e03e      	b.n	800dd0a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800dc90:	68bb      	ldr	r3, [r7, #8]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800dc96:	697b      	ldr	r3, [r7, #20]
 800dc98:	685b      	ldr	r3, [r3, #4]
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f7fc fffc 	bl	800ac98 <pbuf_clen>
 800dca0:	4603      	mov	r3, r0
 800dca2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dcaa:	8a7a      	ldrh	r2, [r7, #18]
 800dcac:	429a      	cmp	r2, r3
 800dcae:	d906      	bls.n	800dcbe <tcp_free_acked_segments+0x42>
 800dcb0:	4b2a      	ldr	r3, [pc, #168]	; (800dd5c <tcp_free_acked_segments+0xe0>)
 800dcb2:	f240 4257 	movw	r2, #1111	; 0x457
 800dcb6:	492a      	ldr	r1, [pc, #168]	; (800dd60 <tcp_free_acked_segments+0xe4>)
 800dcb8:	482a      	ldr	r0, [pc, #168]	; (800dd64 <tcp_free_acked_segments+0xe8>)
 800dcba:	f007 fc51 	bl	8015560 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800dcc4:	8a7b      	ldrh	r3, [r7, #18]
 800dcc6:	1ad3      	subs	r3, r2, r3
 800dcc8:	b29a      	uxth	r2, r3
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800dcd0:	697b      	ldr	r3, [r7, #20]
 800dcd2:	891a      	ldrh	r2, [r3, #8]
 800dcd4:	4b24      	ldr	r3, [pc, #144]	; (800dd68 <tcp_free_acked_segments+0xec>)
 800dcd6:	881b      	ldrh	r3, [r3, #0]
 800dcd8:	4413      	add	r3, r2
 800dcda:	b29a      	uxth	r2, r3
 800dcdc:	4b22      	ldr	r3, [pc, #136]	; (800dd68 <tcp_free_acked_segments+0xec>)
 800dcde:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800dce0:	6978      	ldr	r0, [r7, #20]
 800dce2:	f7fe f9da 	bl	800c09a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d00c      	beq.n	800dd0a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d109      	bne.n	800dd0a <tcp_free_acked_segments+0x8e>
 800dcf6:	683b      	ldr	r3, [r7, #0]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d106      	bne.n	800dd0a <tcp_free_acked_segments+0x8e>
 800dcfc:	4b17      	ldr	r3, [pc, #92]	; (800dd5c <tcp_free_acked_segments+0xe0>)
 800dcfe:	f240 4261 	movw	r2, #1121	; 0x461
 800dd02:	491a      	ldr	r1, [pc, #104]	; (800dd6c <tcp_free_acked_segments+0xf0>)
 800dd04:	4817      	ldr	r0, [pc, #92]	; (800dd64 <tcp_free_acked_segments+0xe8>)
 800dd06:	f007 fc2b 	bl	8015560 <iprintf>
  while (seg_list != NULL &&
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d020      	beq.n	800dd52 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	68db      	ldr	r3, [r3, #12]
 800dd14:	685b      	ldr	r3, [r3, #4]
 800dd16:	4618      	mov	r0, r3
 800dd18:	f7fb fb47 	bl	80093aa <lwip_htonl>
 800dd1c:	4604      	mov	r4, r0
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	891b      	ldrh	r3, [r3, #8]
 800dd22:	461d      	mov	r5, r3
 800dd24:	68bb      	ldr	r3, [r7, #8]
 800dd26:	68db      	ldr	r3, [r3, #12]
 800dd28:	899b      	ldrh	r3, [r3, #12]
 800dd2a:	b29b      	uxth	r3, r3
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f7fb fb27 	bl	8009380 <lwip_htons>
 800dd32:	4603      	mov	r3, r0
 800dd34:	b2db      	uxtb	r3, r3
 800dd36:	f003 0303 	and.w	r3, r3, #3
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d001      	beq.n	800dd42 <tcp_free_acked_segments+0xc6>
 800dd3e:	2301      	movs	r3, #1
 800dd40:	e000      	b.n	800dd44 <tcp_free_acked_segments+0xc8>
 800dd42:	2300      	movs	r3, #0
 800dd44:	442b      	add	r3, r5
 800dd46:	18e2      	adds	r2, r4, r3
 800dd48:	4b09      	ldr	r3, [pc, #36]	; (800dd70 <tcp_free_acked_segments+0xf4>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	dd9c      	ble.n	800dc8c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800dd52:	68bb      	ldr	r3, [r7, #8]
}
 800dd54:	4618      	mov	r0, r3
 800dd56:	3718      	adds	r7, #24
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bdb0      	pop	{r4, r5, r7, pc}
 800dd5c:	0801797c 	.word	0x0801797c
 800dd60:	08017c64 	.word	0x08017c64
 800dd64:	080179c8 	.word	0x080179c8
 800dd68:	2000d3b8 	.word	0x2000d3b8
 800dd6c:	08017c8c 	.word	0x08017c8c
 800dd70:	2000d3b4 	.word	0x2000d3b4

0800dd74 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800dd74:	b5b0      	push	{r4, r5, r7, lr}
 800dd76:	b094      	sub	sp, #80	; 0x50
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d106      	bne.n	800dd94 <tcp_receive+0x20>
 800dd86:	4b91      	ldr	r3, [pc, #580]	; (800dfcc <tcp_receive+0x258>)
 800dd88:	f240 427b 	movw	r2, #1147	; 0x47b
 800dd8c:	4990      	ldr	r1, [pc, #576]	; (800dfd0 <tcp_receive+0x25c>)
 800dd8e:	4891      	ldr	r0, [pc, #580]	; (800dfd4 <tcp_receive+0x260>)
 800dd90:	f007 fbe6 	bl	8015560 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	7d1b      	ldrb	r3, [r3, #20]
 800dd98:	2b03      	cmp	r3, #3
 800dd9a:	d806      	bhi.n	800ddaa <tcp_receive+0x36>
 800dd9c:	4b8b      	ldr	r3, [pc, #556]	; (800dfcc <tcp_receive+0x258>)
 800dd9e:	f240 427c 	movw	r2, #1148	; 0x47c
 800dda2:	498d      	ldr	r1, [pc, #564]	; (800dfd8 <tcp_receive+0x264>)
 800dda4:	488b      	ldr	r0, [pc, #556]	; (800dfd4 <tcp_receive+0x260>)
 800dda6:	f007 fbdb 	bl	8015560 <iprintf>

  if (flags & TCP_ACK) {
 800ddaa:	4b8c      	ldr	r3, [pc, #560]	; (800dfdc <tcp_receive+0x268>)
 800ddac:	781b      	ldrb	r3, [r3, #0]
 800ddae:	f003 0310 	and.w	r3, r3, #16
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	f000 8264 	beq.w	800e280 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ddbe:	461a      	mov	r2, r3
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ddc4:	4413      	add	r3, r2
 800ddc6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ddcc:	4b84      	ldr	r3, [pc, #528]	; (800dfe0 <tcp_receive+0x26c>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	1ad3      	subs	r3, r2, r3
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	db1b      	blt.n	800de0e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ddda:	4b81      	ldr	r3, [pc, #516]	; (800dfe0 <tcp_receive+0x26c>)
 800dddc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ddde:	429a      	cmp	r2, r3
 800dde0:	d106      	bne.n	800ddf0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dde6:	4b7f      	ldr	r3, [pc, #508]	; (800dfe4 <tcp_receive+0x270>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	1ad3      	subs	r3, r2, r3
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	db0e      	blt.n	800de0e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ddf4:	4b7b      	ldr	r3, [pc, #492]	; (800dfe4 <tcp_receive+0x270>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	d125      	bne.n	800de48 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ddfc:	4b7a      	ldr	r3, [pc, #488]	; (800dfe8 <tcp_receive+0x274>)
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	89db      	ldrh	r3, [r3, #14]
 800de02:	b29a      	uxth	r2, r3
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800de0a:	429a      	cmp	r2, r3
 800de0c:	d91c      	bls.n	800de48 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800de0e:	4b76      	ldr	r3, [pc, #472]	; (800dfe8 <tcp_receive+0x274>)
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	89db      	ldrh	r3, [r3, #14]
 800de14:	b29a      	uxth	r2, r3
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800de28:	429a      	cmp	r2, r3
 800de2a:	d205      	bcs.n	800de38 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800de38:	4b69      	ldr	r3, [pc, #420]	; (800dfe0 <tcp_receive+0x26c>)
 800de3a:	681a      	ldr	r2, [r3, #0]
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800de40:	4b68      	ldr	r3, [pc, #416]	; (800dfe4 <tcp_receive+0x270>)
 800de42:	681a      	ldr	r2, [r3, #0]
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800de48:	4b66      	ldr	r3, [pc, #408]	; (800dfe4 <tcp_receive+0x270>)
 800de4a:	681a      	ldr	r2, [r3, #0]
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de50:	1ad3      	subs	r3, r2, r3
 800de52:	2b00      	cmp	r3, #0
 800de54:	dc58      	bgt.n	800df08 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800de56:	4b65      	ldr	r3, [pc, #404]	; (800dfec <tcp_receive+0x278>)
 800de58:	881b      	ldrh	r3, [r3, #0]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d14b      	bne.n	800def6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de62:	687a      	ldr	r2, [r7, #4]
 800de64:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800de68:	4413      	add	r3, r2
 800de6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de6c:	429a      	cmp	r2, r3
 800de6e:	d142      	bne.n	800def6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800de76:	2b00      	cmp	r3, #0
 800de78:	db3d      	blt.n	800def6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800de7e:	4b59      	ldr	r3, [pc, #356]	; (800dfe4 <tcp_receive+0x270>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	429a      	cmp	r2, r3
 800de84:	d137      	bne.n	800def6 <tcp_receive+0x182>
              found_dupack = 1;
 800de86:	2301      	movs	r3, #1
 800de88:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800de90:	2bff      	cmp	r3, #255	; 0xff
 800de92:	d007      	beq.n	800dea4 <tcp_receive+0x130>
                ++pcb->dupacks;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800de9a:	3301      	adds	r3, #1
 800de9c:	b2da      	uxtb	r2, r3
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800deaa:	2b03      	cmp	r3, #3
 800deac:	d91b      	bls.n	800dee6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800deb8:	4413      	add	r3, r2
 800deba:	b29a      	uxth	r2, r3
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dec2:	429a      	cmp	r2, r3
 800dec4:	d30a      	bcc.n	800dedc <tcp_receive+0x168>
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ded0:	4413      	add	r3, r2
 800ded2:	b29a      	uxth	r2, r3
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800deda:	e004      	b.n	800dee6 <tcp_receive+0x172>
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dee2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800deec:	2b02      	cmp	r3, #2
 800deee:	d902      	bls.n	800def6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800def0:	6878      	ldr	r0, [r7, #4]
 800def2:	f001 feeb 	bl	800fccc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800def6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800def8:	2b00      	cmp	r3, #0
 800defa:	f040 8161 	bne.w	800e1c0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2200      	movs	r2, #0
 800df02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800df06:	e15b      	b.n	800e1c0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800df08:	4b36      	ldr	r3, [pc, #216]	; (800dfe4 <tcp_receive+0x270>)
 800df0a:	681a      	ldr	r2, [r3, #0]
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df10:	1ad3      	subs	r3, r2, r3
 800df12:	3b01      	subs	r3, #1
 800df14:	2b00      	cmp	r3, #0
 800df16:	f2c0 814e 	blt.w	800e1b6 <tcp_receive+0x442>
 800df1a:	4b32      	ldr	r3, [pc, #200]	; (800dfe4 <tcp_receive+0x270>)
 800df1c:	681a      	ldr	r2, [r3, #0]
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df22:	1ad3      	subs	r3, r2, r3
 800df24:	2b00      	cmp	r3, #0
 800df26:	f300 8146 	bgt.w	800e1b6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	8b5b      	ldrh	r3, [r3, #26]
 800df2e:	f003 0304 	and.w	r3, r3, #4
 800df32:	2b00      	cmp	r3, #0
 800df34:	d010      	beq.n	800df58 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	8b5b      	ldrh	r3, [r3, #26]
 800df3a:	f023 0304 	bic.w	r3, r3, #4
 800df3e:	b29a      	uxth	r2, r3
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2200      	movs	r2, #0
 800df54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2200      	movs	r2, #0
 800df5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800df66:	10db      	asrs	r3, r3, #3
 800df68:	b21b      	sxth	r3, r3
 800df6a:	b29a      	uxth	r2, r3
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800df72:	b29b      	uxth	r3, r3
 800df74:	4413      	add	r3, r2
 800df76:	b29b      	uxth	r3, r3
 800df78:	b21a      	sxth	r2, r3
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800df80:	4b18      	ldr	r3, [pc, #96]	; (800dfe4 <tcp_receive+0x270>)
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	b29a      	uxth	r2, r3
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df8a:	b29b      	uxth	r3, r3
 800df8c:	1ad3      	subs	r3, r2, r3
 800df8e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2200      	movs	r2, #0
 800df94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800df98:	4b12      	ldr	r3, [pc, #72]	; (800dfe4 <tcp_receive+0x270>)
 800df9a:	681a      	ldr	r2, [r3, #0]
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	7d1b      	ldrb	r3, [r3, #20]
 800dfa4:	2b03      	cmp	r3, #3
 800dfa6:	f240 8097 	bls.w	800e0d8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800dfb6:	429a      	cmp	r2, r3
 800dfb8:	d245      	bcs.n	800e046 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	8b5b      	ldrh	r3, [r3, #26]
 800dfbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d014      	beq.n	800dff0 <tcp_receive+0x27c>
 800dfc6:	2301      	movs	r3, #1
 800dfc8:	e013      	b.n	800dff2 <tcp_receive+0x27e>
 800dfca:	bf00      	nop
 800dfcc:	0801797c 	.word	0x0801797c
 800dfd0:	08017cac 	.word	0x08017cac
 800dfd4:	080179c8 	.word	0x080179c8
 800dfd8:	08017cc8 	.word	0x08017cc8
 800dfdc:	2000d3bc 	.word	0x2000d3bc
 800dfe0:	2000d3b0 	.word	0x2000d3b0
 800dfe4:	2000d3b4 	.word	0x2000d3b4
 800dfe8:	2000d3a0 	.word	0x2000d3a0
 800dfec:	2000d3ba 	.word	0x2000d3ba
 800dff0:	2302      	movs	r3, #2
 800dff2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800dff6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800dffa:	b29a      	uxth	r2, r3
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e000:	fb12 f303 	smulbb	r3, r2, r3
 800e004:	b29b      	uxth	r3, r3
 800e006:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e008:	4293      	cmp	r3, r2
 800e00a:	bf28      	it	cs
 800e00c:	4613      	movcs	r3, r2
 800e00e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e016:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e018:	4413      	add	r3, r2
 800e01a:	b29a      	uxth	r2, r3
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e022:	429a      	cmp	r2, r3
 800e024:	d309      	bcc.n	800e03a <tcp_receive+0x2c6>
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e02c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e02e:	4413      	add	r3, r2
 800e030:	b29a      	uxth	r2, r3
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e038:	e04e      	b.n	800e0d8 <tcp_receive+0x364>
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e040:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e044:	e048      	b.n	800e0d8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e04c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e04e:	4413      	add	r3, r2
 800e050:	b29a      	uxth	r2, r3
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e058:	429a      	cmp	r2, r3
 800e05a:	d309      	bcc.n	800e070 <tcp_receive+0x2fc>
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e062:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e064:	4413      	add	r3, r2
 800e066:	b29a      	uxth	r2, r3
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e06e:	e004      	b.n	800e07a <tcp_receive+0x306>
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e076:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e086:	429a      	cmp	r2, r3
 800e088:	d326      	bcc.n	800e0d8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e096:	1ad3      	subs	r3, r2, r3
 800e098:	b29a      	uxth	r2, r3
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e0aa:	4413      	add	r3, r2
 800e0ac:	b29a      	uxth	r2, r3
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e0b4:	429a      	cmp	r2, r3
 800e0b6:	d30a      	bcc.n	800e0ce <tcp_receive+0x35a>
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e0c2:	4413      	add	r3, r2
 800e0c4:	b29a      	uxth	r2, r3
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e0cc:	e004      	b.n	800e0d8 <tcp_receive+0x364>
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e0d4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0e0:	4a98      	ldr	r2, [pc, #608]	; (800e344 <tcp_receive+0x5d0>)
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	f7ff fdca 	bl	800dc7c <tcp_free_acked_segments>
 800e0e8:	4602      	mov	r2, r0
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0f6:	4a94      	ldr	r2, [pc, #592]	; (800e348 <tcp_receive+0x5d4>)
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f7ff fdbf 	bl	800dc7c <tcp_free_acked_segments>
 800e0fe:	4602      	mov	r2, r0
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d104      	bne.n	800e116 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e112:	861a      	strh	r2, [r3, #48]	; 0x30
 800e114:	e002      	b.n	800e11c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2200      	movs	r2, #0
 800e11a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2200      	movs	r2, #0
 800e120:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e126:	2b00      	cmp	r3, #0
 800e128:	d103      	bne.n	800e132 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	2200      	movs	r2, #0
 800e12e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800e138:	4b84      	ldr	r3, [pc, #528]	; (800e34c <tcp_receive+0x5d8>)
 800e13a:	881b      	ldrh	r3, [r3, #0]
 800e13c:	4413      	add	r3, r2
 800e13e:	b29a      	uxth	r2, r3
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	8b5b      	ldrh	r3, [r3, #26]
 800e14a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d035      	beq.n	800e1be <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e156:	2b00      	cmp	r3, #0
 800e158:	d118      	bne.n	800e18c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d00c      	beq.n	800e17c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e16a:	68db      	ldr	r3, [r3, #12]
 800e16c:	685b      	ldr	r3, [r3, #4]
 800e16e:	4618      	mov	r0, r3
 800e170:	f7fb f91b 	bl	80093aa <lwip_htonl>
 800e174:	4603      	mov	r3, r0
 800e176:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800e178:	2b00      	cmp	r3, #0
 800e17a:	dc20      	bgt.n	800e1be <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	8b5b      	ldrh	r3, [r3, #26]
 800e180:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e184:	b29a      	uxth	r2, r3
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e18a:	e018      	b.n	800e1be <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e194:	68db      	ldr	r3, [r3, #12]
 800e196:	685b      	ldr	r3, [r3, #4]
 800e198:	4618      	mov	r0, r3
 800e19a:	f7fb f906 	bl	80093aa <lwip_htonl>
 800e19e:	4603      	mov	r3, r0
 800e1a0:	1ae3      	subs	r3, r4, r3
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	dc0b      	bgt.n	800e1be <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	8b5b      	ldrh	r3, [r3, #26]
 800e1aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e1ae:	b29a      	uxth	r2, r3
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e1b4:	e003      	b.n	800e1be <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800e1b6:	6878      	ldr	r0, [r7, #4]
 800e1b8:	f001 ff76 	bl	80100a8 <tcp_send_empty_ack>
 800e1bc:	e000      	b.n	800e1c0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e1be:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d05b      	beq.n	800e280 <tcp_receive+0x50c>
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e1cc:	4b60      	ldr	r3, [pc, #384]	; (800e350 <tcp_receive+0x5dc>)
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	1ad3      	subs	r3, r2, r3
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	da54      	bge.n	800e280 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800e1d6:	4b5f      	ldr	r3, [pc, #380]	; (800e354 <tcp_receive+0x5e0>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	b29a      	uxth	r2, r3
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1e0:	b29b      	uxth	r3, r3
 800e1e2:	1ad3      	subs	r3, r2, r3
 800e1e4:	b29b      	uxth	r3, r3
 800e1e6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800e1ea:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e1f4:	10db      	asrs	r3, r3, #3
 800e1f6:	b21b      	sxth	r3, r3
 800e1f8:	b29b      	uxth	r3, r3
 800e1fa:	1ad3      	subs	r3, r2, r3
 800e1fc:	b29b      	uxth	r3, r3
 800e1fe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e208:	b29a      	uxth	r2, r3
 800e20a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e20e:	4413      	add	r3, r2
 800e210:	b29b      	uxth	r3, r3
 800e212:	b21a      	sxth	r2, r3
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800e218:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	da05      	bge.n	800e22c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800e220:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e224:	425b      	negs	r3, r3
 800e226:	b29b      	uxth	r3, r3
 800e228:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800e22c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e236:	109b      	asrs	r3, r3, #2
 800e238:	b21b      	sxth	r3, r3
 800e23a:	b29b      	uxth	r3, r3
 800e23c:	1ad3      	subs	r3, r2, r3
 800e23e:	b29b      	uxth	r3, r3
 800e240:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e24a:	b29a      	uxth	r2, r3
 800e24c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e250:	4413      	add	r3, r2
 800e252:	b29b      	uxth	r3, r3
 800e254:	b21a      	sxth	r2, r3
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e260:	10db      	asrs	r3, r3, #3
 800e262:	b21b      	sxth	r3, r3
 800e264:	b29a      	uxth	r2, r3
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e26c:	b29b      	uxth	r3, r3
 800e26e:	4413      	add	r3, r2
 800e270:	b29b      	uxth	r3, r3
 800e272:	b21a      	sxth	r2, r3
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	2200      	movs	r2, #0
 800e27e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800e280:	4b35      	ldr	r3, [pc, #212]	; (800e358 <tcp_receive+0x5e4>)
 800e282:	881b      	ldrh	r3, [r3, #0]
 800e284:	2b00      	cmp	r3, #0
 800e286:	f000 84e2 	beq.w	800ec4e <tcp_receive+0xeda>
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	7d1b      	ldrb	r3, [r3, #20]
 800e28e:	2b06      	cmp	r3, #6
 800e290:	f200 84dd 	bhi.w	800ec4e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e298:	4b30      	ldr	r3, [pc, #192]	; (800e35c <tcp_receive+0x5e8>)
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	1ad3      	subs	r3, r2, r3
 800e29e:	3b01      	subs	r3, #1
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	f2c0 808f 	blt.w	800e3c4 <tcp_receive+0x650>
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e2aa:	4b2b      	ldr	r3, [pc, #172]	; (800e358 <tcp_receive+0x5e4>)
 800e2ac:	881b      	ldrh	r3, [r3, #0]
 800e2ae:	4619      	mov	r1, r3
 800e2b0:	4b2a      	ldr	r3, [pc, #168]	; (800e35c <tcp_receive+0x5e8>)
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	440b      	add	r3, r1
 800e2b6:	1ad3      	subs	r3, r2, r3
 800e2b8:	3301      	adds	r3, #1
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	f300 8082 	bgt.w	800e3c4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800e2c0:	4b27      	ldr	r3, [pc, #156]	; (800e360 <tcp_receive+0x5ec>)
 800e2c2:	685b      	ldr	r3, [r3, #4]
 800e2c4:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e2ca:	4b24      	ldr	r3, [pc, #144]	; (800e35c <tcp_receive+0x5e8>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	1ad3      	subs	r3, r2, r3
 800e2d0:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800e2d2:	4b23      	ldr	r3, [pc, #140]	; (800e360 <tcp_receive+0x5ec>)
 800e2d4:	685b      	ldr	r3, [r3, #4]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d106      	bne.n	800e2e8 <tcp_receive+0x574>
 800e2da:	4b22      	ldr	r3, [pc, #136]	; (800e364 <tcp_receive+0x5f0>)
 800e2dc:	f240 5294 	movw	r2, #1428	; 0x594
 800e2e0:	4921      	ldr	r1, [pc, #132]	; (800e368 <tcp_receive+0x5f4>)
 800e2e2:	4822      	ldr	r0, [pc, #136]	; (800e36c <tcp_receive+0x5f8>)
 800e2e4:	f007 f93c 	bl	8015560 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800e2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e2ee:	4293      	cmp	r3, r2
 800e2f0:	d906      	bls.n	800e300 <tcp_receive+0x58c>
 800e2f2:	4b1c      	ldr	r3, [pc, #112]	; (800e364 <tcp_receive+0x5f0>)
 800e2f4:	f240 5295 	movw	r2, #1429	; 0x595
 800e2f8:	491d      	ldr	r1, [pc, #116]	; (800e370 <tcp_receive+0x5fc>)
 800e2fa:	481c      	ldr	r0, [pc, #112]	; (800e36c <tcp_receive+0x5f8>)
 800e2fc:	f007 f930 	bl	8015560 <iprintf>
      off = (u16_t)off32;
 800e300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e302:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800e306:	4b16      	ldr	r3, [pc, #88]	; (800e360 <tcp_receive+0x5ec>)
 800e308:	685b      	ldr	r3, [r3, #4]
 800e30a:	891b      	ldrh	r3, [r3, #8]
 800e30c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e310:	429a      	cmp	r2, r3
 800e312:	d906      	bls.n	800e322 <tcp_receive+0x5ae>
 800e314:	4b13      	ldr	r3, [pc, #76]	; (800e364 <tcp_receive+0x5f0>)
 800e316:	f240 5297 	movw	r2, #1431	; 0x597
 800e31a:	4916      	ldr	r1, [pc, #88]	; (800e374 <tcp_receive+0x600>)
 800e31c:	4813      	ldr	r0, [pc, #76]	; (800e36c <tcp_receive+0x5f8>)
 800e31e:	f007 f91f 	bl	8015560 <iprintf>
      inseg.len -= off;
 800e322:	4b0f      	ldr	r3, [pc, #60]	; (800e360 <tcp_receive+0x5ec>)
 800e324:	891a      	ldrh	r2, [r3, #8]
 800e326:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e32a:	1ad3      	subs	r3, r2, r3
 800e32c:	b29a      	uxth	r2, r3
 800e32e:	4b0c      	ldr	r3, [pc, #48]	; (800e360 <tcp_receive+0x5ec>)
 800e330:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800e332:	4b0b      	ldr	r3, [pc, #44]	; (800e360 <tcp_receive+0x5ec>)
 800e334:	685b      	ldr	r3, [r3, #4]
 800e336:	891a      	ldrh	r2, [r3, #8]
 800e338:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e33c:	1ad3      	subs	r3, r2, r3
 800e33e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800e340:	e02a      	b.n	800e398 <tcp_receive+0x624>
 800e342:	bf00      	nop
 800e344:	08017ce4 	.word	0x08017ce4
 800e348:	08017cec 	.word	0x08017cec
 800e34c:	2000d3b8 	.word	0x2000d3b8
 800e350:	2000d3b4 	.word	0x2000d3b4
 800e354:	2000d378 	.word	0x2000d378
 800e358:	2000d3ba 	.word	0x2000d3ba
 800e35c:	2000d3b0 	.word	0x2000d3b0
 800e360:	2000d390 	.word	0x2000d390
 800e364:	0801797c 	.word	0x0801797c
 800e368:	08017cf4 	.word	0x08017cf4
 800e36c:	080179c8 	.word	0x080179c8
 800e370:	08017d04 	.word	0x08017d04
 800e374:	08017d14 	.word	0x08017d14
        off -= p->len;
 800e378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e37a:	895b      	ldrh	r3, [r3, #10]
 800e37c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e380:	1ad3      	subs	r3, r2, r3
 800e382:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800e386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e388:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e38a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800e38c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e38e:	2200      	movs	r2, #0
 800e390:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800e392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800e398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e39a:	895b      	ldrh	r3, [r3, #10]
 800e39c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	d8e9      	bhi.n	800e378 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800e3a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e3a8:	4619      	mov	r1, r3
 800e3aa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e3ac:	f7fc fb60 	bl	800aa70 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3b4:	4a91      	ldr	r2, [pc, #580]	; (800e5fc <tcp_receive+0x888>)
 800e3b6:	6013      	str	r3, [r2, #0]
 800e3b8:	4b91      	ldr	r3, [pc, #580]	; (800e600 <tcp_receive+0x88c>)
 800e3ba:	68db      	ldr	r3, [r3, #12]
 800e3bc:	4a8f      	ldr	r2, [pc, #572]	; (800e5fc <tcp_receive+0x888>)
 800e3be:	6812      	ldr	r2, [r2, #0]
 800e3c0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800e3c2:	e00d      	b.n	800e3e0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800e3c4:	4b8d      	ldr	r3, [pc, #564]	; (800e5fc <tcp_receive+0x888>)
 800e3c6:	681a      	ldr	r2, [r3, #0]
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3cc:	1ad3      	subs	r3, r2, r3
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	da06      	bge.n	800e3e0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	8b5b      	ldrh	r3, [r3, #26]
 800e3d6:	f043 0302 	orr.w	r3, r3, #2
 800e3da:	b29a      	uxth	r2, r3
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e3e0:	4b86      	ldr	r3, [pc, #536]	; (800e5fc <tcp_receive+0x888>)
 800e3e2:	681a      	ldr	r2, [r3, #0]
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3e8:	1ad3      	subs	r3, r2, r3
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	f2c0 842a 	blt.w	800ec44 <tcp_receive+0xed0>
 800e3f0:	4b82      	ldr	r3, [pc, #520]	; (800e5fc <tcp_receive+0x888>)
 800e3f2:	681a      	ldr	r2, [r3, #0]
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3f8:	6879      	ldr	r1, [r7, #4]
 800e3fa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e3fc:	440b      	add	r3, r1
 800e3fe:	1ad3      	subs	r3, r2, r3
 800e400:	3301      	adds	r3, #1
 800e402:	2b00      	cmp	r3, #0
 800e404:	f300 841e 	bgt.w	800ec44 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e40c:	4b7b      	ldr	r3, [pc, #492]	; (800e5fc <tcp_receive+0x888>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	429a      	cmp	r2, r3
 800e412:	f040 829a 	bne.w	800e94a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800e416:	4b7a      	ldr	r3, [pc, #488]	; (800e600 <tcp_receive+0x88c>)
 800e418:	891c      	ldrh	r4, [r3, #8]
 800e41a:	4b79      	ldr	r3, [pc, #484]	; (800e600 <tcp_receive+0x88c>)
 800e41c:	68db      	ldr	r3, [r3, #12]
 800e41e:	899b      	ldrh	r3, [r3, #12]
 800e420:	b29b      	uxth	r3, r3
 800e422:	4618      	mov	r0, r3
 800e424:	f7fa ffac 	bl	8009380 <lwip_htons>
 800e428:	4603      	mov	r3, r0
 800e42a:	b2db      	uxtb	r3, r3
 800e42c:	f003 0303 	and.w	r3, r3, #3
 800e430:	2b00      	cmp	r3, #0
 800e432:	d001      	beq.n	800e438 <tcp_receive+0x6c4>
 800e434:	2301      	movs	r3, #1
 800e436:	e000      	b.n	800e43a <tcp_receive+0x6c6>
 800e438:	2300      	movs	r3, #0
 800e43a:	4423      	add	r3, r4
 800e43c:	b29a      	uxth	r2, r3
 800e43e:	4b71      	ldr	r3, [pc, #452]	; (800e604 <tcp_receive+0x890>)
 800e440:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e446:	4b6f      	ldr	r3, [pc, #444]	; (800e604 <tcp_receive+0x890>)
 800e448:	881b      	ldrh	r3, [r3, #0]
 800e44a:	429a      	cmp	r2, r3
 800e44c:	d275      	bcs.n	800e53a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e44e:	4b6c      	ldr	r3, [pc, #432]	; (800e600 <tcp_receive+0x88c>)
 800e450:	68db      	ldr	r3, [r3, #12]
 800e452:	899b      	ldrh	r3, [r3, #12]
 800e454:	b29b      	uxth	r3, r3
 800e456:	4618      	mov	r0, r3
 800e458:	f7fa ff92 	bl	8009380 <lwip_htons>
 800e45c:	4603      	mov	r3, r0
 800e45e:	b2db      	uxtb	r3, r3
 800e460:	f003 0301 	and.w	r3, r3, #1
 800e464:	2b00      	cmp	r3, #0
 800e466:	d01f      	beq.n	800e4a8 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800e468:	4b65      	ldr	r3, [pc, #404]	; (800e600 <tcp_receive+0x88c>)
 800e46a:	68db      	ldr	r3, [r3, #12]
 800e46c:	899b      	ldrh	r3, [r3, #12]
 800e46e:	b29b      	uxth	r3, r3
 800e470:	b21b      	sxth	r3, r3
 800e472:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e476:	b21c      	sxth	r4, r3
 800e478:	4b61      	ldr	r3, [pc, #388]	; (800e600 <tcp_receive+0x88c>)
 800e47a:	68db      	ldr	r3, [r3, #12]
 800e47c:	899b      	ldrh	r3, [r3, #12]
 800e47e:	b29b      	uxth	r3, r3
 800e480:	4618      	mov	r0, r3
 800e482:	f7fa ff7d 	bl	8009380 <lwip_htons>
 800e486:	4603      	mov	r3, r0
 800e488:	b2db      	uxtb	r3, r3
 800e48a:	b29b      	uxth	r3, r3
 800e48c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e490:	b29b      	uxth	r3, r3
 800e492:	4618      	mov	r0, r3
 800e494:	f7fa ff74 	bl	8009380 <lwip_htons>
 800e498:	4603      	mov	r3, r0
 800e49a:	b21b      	sxth	r3, r3
 800e49c:	4323      	orrs	r3, r4
 800e49e:	b21a      	sxth	r2, r3
 800e4a0:	4b57      	ldr	r3, [pc, #348]	; (800e600 <tcp_receive+0x88c>)
 800e4a2:	68db      	ldr	r3, [r3, #12]
 800e4a4:	b292      	uxth	r2, r2
 800e4a6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e4ac:	4b54      	ldr	r3, [pc, #336]	; (800e600 <tcp_receive+0x88c>)
 800e4ae:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e4b0:	4b53      	ldr	r3, [pc, #332]	; (800e600 <tcp_receive+0x88c>)
 800e4b2:	68db      	ldr	r3, [r3, #12]
 800e4b4:	899b      	ldrh	r3, [r3, #12]
 800e4b6:	b29b      	uxth	r3, r3
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	f7fa ff61 	bl	8009380 <lwip_htons>
 800e4be:	4603      	mov	r3, r0
 800e4c0:	b2db      	uxtb	r3, r3
 800e4c2:	f003 0302 	and.w	r3, r3, #2
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d005      	beq.n	800e4d6 <tcp_receive+0x762>
            inseg.len -= 1;
 800e4ca:	4b4d      	ldr	r3, [pc, #308]	; (800e600 <tcp_receive+0x88c>)
 800e4cc:	891b      	ldrh	r3, [r3, #8]
 800e4ce:	3b01      	subs	r3, #1
 800e4d0:	b29a      	uxth	r2, r3
 800e4d2:	4b4b      	ldr	r3, [pc, #300]	; (800e600 <tcp_receive+0x88c>)
 800e4d4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800e4d6:	4b4a      	ldr	r3, [pc, #296]	; (800e600 <tcp_receive+0x88c>)
 800e4d8:	685b      	ldr	r3, [r3, #4]
 800e4da:	4a49      	ldr	r2, [pc, #292]	; (800e600 <tcp_receive+0x88c>)
 800e4dc:	8912      	ldrh	r2, [r2, #8]
 800e4de:	4611      	mov	r1, r2
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f7fc f9c5 	bl	800a870 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800e4e6:	4b46      	ldr	r3, [pc, #280]	; (800e600 <tcp_receive+0x88c>)
 800e4e8:	891c      	ldrh	r4, [r3, #8]
 800e4ea:	4b45      	ldr	r3, [pc, #276]	; (800e600 <tcp_receive+0x88c>)
 800e4ec:	68db      	ldr	r3, [r3, #12]
 800e4ee:	899b      	ldrh	r3, [r3, #12]
 800e4f0:	b29b      	uxth	r3, r3
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	f7fa ff44 	bl	8009380 <lwip_htons>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	b2db      	uxtb	r3, r3
 800e4fc:	f003 0303 	and.w	r3, r3, #3
 800e500:	2b00      	cmp	r3, #0
 800e502:	d001      	beq.n	800e508 <tcp_receive+0x794>
 800e504:	2301      	movs	r3, #1
 800e506:	e000      	b.n	800e50a <tcp_receive+0x796>
 800e508:	2300      	movs	r3, #0
 800e50a:	4423      	add	r3, r4
 800e50c:	b29a      	uxth	r2, r3
 800e50e:	4b3d      	ldr	r3, [pc, #244]	; (800e604 <tcp_receive+0x890>)
 800e510:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e512:	4b3c      	ldr	r3, [pc, #240]	; (800e604 <tcp_receive+0x890>)
 800e514:	881b      	ldrh	r3, [r3, #0]
 800e516:	461a      	mov	r2, r3
 800e518:	4b38      	ldr	r3, [pc, #224]	; (800e5fc <tcp_receive+0x888>)
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	441a      	add	r2, r3
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e522:	6879      	ldr	r1, [r7, #4]
 800e524:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e526:	440b      	add	r3, r1
 800e528:	429a      	cmp	r2, r3
 800e52a:	d006      	beq.n	800e53a <tcp_receive+0x7c6>
 800e52c:	4b36      	ldr	r3, [pc, #216]	; (800e608 <tcp_receive+0x894>)
 800e52e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800e532:	4936      	ldr	r1, [pc, #216]	; (800e60c <tcp_receive+0x898>)
 800e534:	4836      	ldr	r0, [pc, #216]	; (800e610 <tcp_receive+0x89c>)
 800e536:	f007 f813 	bl	8015560 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e53e:	2b00      	cmp	r3, #0
 800e540:	f000 80e7 	beq.w	800e712 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e544:	4b2e      	ldr	r3, [pc, #184]	; (800e600 <tcp_receive+0x88c>)
 800e546:	68db      	ldr	r3, [r3, #12]
 800e548:	899b      	ldrh	r3, [r3, #12]
 800e54a:	b29b      	uxth	r3, r3
 800e54c:	4618      	mov	r0, r3
 800e54e:	f7fa ff17 	bl	8009380 <lwip_htons>
 800e552:	4603      	mov	r3, r0
 800e554:	b2db      	uxtb	r3, r3
 800e556:	f003 0301 	and.w	r3, r3, #1
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d010      	beq.n	800e580 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800e55e:	e00a      	b.n	800e576 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e564:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e56a:	681a      	ldr	r2, [r3, #0]
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800e570:	68f8      	ldr	r0, [r7, #12]
 800e572:	f7fd fd92 	bl	800c09a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d1f0      	bne.n	800e560 <tcp_receive+0x7ec>
 800e57e:	e0c8      	b.n	800e712 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e584:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800e586:	e052      	b.n	800e62e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e58a:	68db      	ldr	r3, [r3, #12]
 800e58c:	899b      	ldrh	r3, [r3, #12]
 800e58e:	b29b      	uxth	r3, r3
 800e590:	4618      	mov	r0, r3
 800e592:	f7fa fef5 	bl	8009380 <lwip_htons>
 800e596:	4603      	mov	r3, r0
 800e598:	b2db      	uxtb	r3, r3
 800e59a:	f003 0301 	and.w	r3, r3, #1
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d03d      	beq.n	800e61e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800e5a2:	4b17      	ldr	r3, [pc, #92]	; (800e600 <tcp_receive+0x88c>)
 800e5a4:	68db      	ldr	r3, [r3, #12]
 800e5a6:	899b      	ldrh	r3, [r3, #12]
 800e5a8:	b29b      	uxth	r3, r3
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f7fa fee8 	bl	8009380 <lwip_htons>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	b2db      	uxtb	r3, r3
 800e5b4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d130      	bne.n	800e61e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800e5bc:	4b10      	ldr	r3, [pc, #64]	; (800e600 <tcp_receive+0x88c>)
 800e5be:	68db      	ldr	r3, [r3, #12]
 800e5c0:	899b      	ldrh	r3, [r3, #12]
 800e5c2:	b29c      	uxth	r4, r3
 800e5c4:	2001      	movs	r0, #1
 800e5c6:	f7fa fedb 	bl	8009380 <lwip_htons>
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	461a      	mov	r2, r3
 800e5ce:	4b0c      	ldr	r3, [pc, #48]	; (800e600 <tcp_receive+0x88c>)
 800e5d0:	68db      	ldr	r3, [r3, #12]
 800e5d2:	4322      	orrs	r2, r4
 800e5d4:	b292      	uxth	r2, r2
 800e5d6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800e5d8:	4b09      	ldr	r3, [pc, #36]	; (800e600 <tcp_receive+0x88c>)
 800e5da:	891c      	ldrh	r4, [r3, #8]
 800e5dc:	4b08      	ldr	r3, [pc, #32]	; (800e600 <tcp_receive+0x88c>)
 800e5de:	68db      	ldr	r3, [r3, #12]
 800e5e0:	899b      	ldrh	r3, [r3, #12]
 800e5e2:	b29b      	uxth	r3, r3
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f7fa fecb 	bl	8009380 <lwip_htons>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	b2db      	uxtb	r3, r3
 800e5ee:	f003 0303 	and.w	r3, r3, #3
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d00e      	beq.n	800e614 <tcp_receive+0x8a0>
 800e5f6:	2301      	movs	r3, #1
 800e5f8:	e00d      	b.n	800e616 <tcp_receive+0x8a2>
 800e5fa:	bf00      	nop
 800e5fc:	2000d3b0 	.word	0x2000d3b0
 800e600:	2000d390 	.word	0x2000d390
 800e604:	2000d3ba 	.word	0x2000d3ba
 800e608:	0801797c 	.word	0x0801797c
 800e60c:	08017d24 	.word	0x08017d24
 800e610:	080179c8 	.word	0x080179c8
 800e614:	2300      	movs	r3, #0
 800e616:	4423      	add	r3, r4
 800e618:	b29a      	uxth	r2, r3
 800e61a:	4b98      	ldr	r3, [pc, #608]	; (800e87c <tcp_receive+0xb08>)
 800e61c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800e61e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e620:	613b      	str	r3, [r7, #16]
              next = next->next;
 800e622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800e628:	6938      	ldr	r0, [r7, #16]
 800e62a:	f7fd fd36 	bl	800c09a <tcp_seg_free>
            while (next &&
 800e62e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e630:	2b00      	cmp	r3, #0
 800e632:	d00e      	beq.n	800e652 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800e634:	4b91      	ldr	r3, [pc, #580]	; (800e87c <tcp_receive+0xb08>)
 800e636:	881b      	ldrh	r3, [r3, #0]
 800e638:	461a      	mov	r2, r3
 800e63a:	4b91      	ldr	r3, [pc, #580]	; (800e880 <tcp_receive+0xb0c>)
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	441a      	add	r2, r3
 800e640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e642:	68db      	ldr	r3, [r3, #12]
 800e644:	685b      	ldr	r3, [r3, #4]
 800e646:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e648:	8909      	ldrh	r1, [r1, #8]
 800e64a:	440b      	add	r3, r1
 800e64c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800e64e:	2b00      	cmp	r3, #0
 800e650:	da9a      	bge.n	800e588 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800e652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e654:	2b00      	cmp	r3, #0
 800e656:	d059      	beq.n	800e70c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800e658:	4b88      	ldr	r3, [pc, #544]	; (800e87c <tcp_receive+0xb08>)
 800e65a:	881b      	ldrh	r3, [r3, #0]
 800e65c:	461a      	mov	r2, r3
 800e65e:	4b88      	ldr	r3, [pc, #544]	; (800e880 <tcp_receive+0xb0c>)
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	441a      	add	r2, r3
 800e664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e666:	68db      	ldr	r3, [r3, #12]
 800e668:	685b      	ldr	r3, [r3, #4]
 800e66a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	dd4d      	ble.n	800e70c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800e670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e672:	68db      	ldr	r3, [r3, #12]
 800e674:	685b      	ldr	r3, [r3, #4]
 800e676:	b29a      	uxth	r2, r3
 800e678:	4b81      	ldr	r3, [pc, #516]	; (800e880 <tcp_receive+0xb0c>)
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	b29b      	uxth	r3, r3
 800e67e:	1ad3      	subs	r3, r2, r3
 800e680:	b29a      	uxth	r2, r3
 800e682:	4b80      	ldr	r3, [pc, #512]	; (800e884 <tcp_receive+0xb10>)
 800e684:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800e686:	4b7f      	ldr	r3, [pc, #508]	; (800e884 <tcp_receive+0xb10>)
 800e688:	68db      	ldr	r3, [r3, #12]
 800e68a:	899b      	ldrh	r3, [r3, #12]
 800e68c:	b29b      	uxth	r3, r3
 800e68e:	4618      	mov	r0, r3
 800e690:	f7fa fe76 	bl	8009380 <lwip_htons>
 800e694:	4603      	mov	r3, r0
 800e696:	b2db      	uxtb	r3, r3
 800e698:	f003 0302 	and.w	r3, r3, #2
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d005      	beq.n	800e6ac <tcp_receive+0x938>
                inseg.len -= 1;
 800e6a0:	4b78      	ldr	r3, [pc, #480]	; (800e884 <tcp_receive+0xb10>)
 800e6a2:	891b      	ldrh	r3, [r3, #8]
 800e6a4:	3b01      	subs	r3, #1
 800e6a6:	b29a      	uxth	r2, r3
 800e6a8:	4b76      	ldr	r3, [pc, #472]	; (800e884 <tcp_receive+0xb10>)
 800e6aa:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800e6ac:	4b75      	ldr	r3, [pc, #468]	; (800e884 <tcp_receive+0xb10>)
 800e6ae:	685b      	ldr	r3, [r3, #4]
 800e6b0:	4a74      	ldr	r2, [pc, #464]	; (800e884 <tcp_receive+0xb10>)
 800e6b2:	8912      	ldrh	r2, [r2, #8]
 800e6b4:	4611      	mov	r1, r2
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f7fc f8da 	bl	800a870 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800e6bc:	4b71      	ldr	r3, [pc, #452]	; (800e884 <tcp_receive+0xb10>)
 800e6be:	891c      	ldrh	r4, [r3, #8]
 800e6c0:	4b70      	ldr	r3, [pc, #448]	; (800e884 <tcp_receive+0xb10>)
 800e6c2:	68db      	ldr	r3, [r3, #12]
 800e6c4:	899b      	ldrh	r3, [r3, #12]
 800e6c6:	b29b      	uxth	r3, r3
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	f7fa fe59 	bl	8009380 <lwip_htons>
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	b2db      	uxtb	r3, r3
 800e6d2:	f003 0303 	and.w	r3, r3, #3
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d001      	beq.n	800e6de <tcp_receive+0x96a>
 800e6da:	2301      	movs	r3, #1
 800e6dc:	e000      	b.n	800e6e0 <tcp_receive+0x96c>
 800e6de:	2300      	movs	r3, #0
 800e6e0:	4423      	add	r3, r4
 800e6e2:	b29a      	uxth	r2, r3
 800e6e4:	4b65      	ldr	r3, [pc, #404]	; (800e87c <tcp_receive+0xb08>)
 800e6e6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800e6e8:	4b64      	ldr	r3, [pc, #400]	; (800e87c <tcp_receive+0xb08>)
 800e6ea:	881b      	ldrh	r3, [r3, #0]
 800e6ec:	461a      	mov	r2, r3
 800e6ee:	4b64      	ldr	r3, [pc, #400]	; (800e880 <tcp_receive+0xb0c>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	441a      	add	r2, r3
 800e6f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6f6:	68db      	ldr	r3, [r3, #12]
 800e6f8:	685b      	ldr	r3, [r3, #4]
 800e6fa:	429a      	cmp	r2, r3
 800e6fc:	d006      	beq.n	800e70c <tcp_receive+0x998>
 800e6fe:	4b62      	ldr	r3, [pc, #392]	; (800e888 <tcp_receive+0xb14>)
 800e700:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800e704:	4961      	ldr	r1, [pc, #388]	; (800e88c <tcp_receive+0xb18>)
 800e706:	4862      	ldr	r0, [pc, #392]	; (800e890 <tcp_receive+0xb1c>)
 800e708:	f006 ff2a 	bl	8015560 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e710:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800e712:	4b5a      	ldr	r3, [pc, #360]	; (800e87c <tcp_receive+0xb08>)
 800e714:	881b      	ldrh	r3, [r3, #0]
 800e716:	461a      	mov	r2, r3
 800e718:	4b59      	ldr	r3, [pc, #356]	; (800e880 <tcp_receive+0xb0c>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	441a      	add	r2, r3
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e726:	4b55      	ldr	r3, [pc, #340]	; (800e87c <tcp_receive+0xb08>)
 800e728:	881b      	ldrh	r3, [r3, #0]
 800e72a:	429a      	cmp	r2, r3
 800e72c:	d206      	bcs.n	800e73c <tcp_receive+0x9c8>
 800e72e:	4b56      	ldr	r3, [pc, #344]	; (800e888 <tcp_receive+0xb14>)
 800e730:	f240 6207 	movw	r2, #1543	; 0x607
 800e734:	4957      	ldr	r1, [pc, #348]	; (800e894 <tcp_receive+0xb20>)
 800e736:	4856      	ldr	r0, [pc, #344]	; (800e890 <tcp_receive+0xb1c>)
 800e738:	f006 ff12 	bl	8015560 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e740:	4b4e      	ldr	r3, [pc, #312]	; (800e87c <tcp_receive+0xb08>)
 800e742:	881b      	ldrh	r3, [r3, #0]
 800e744:	1ad3      	subs	r3, r2, r3
 800e746:	b29a      	uxth	r2, r3
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800e74c:	6878      	ldr	r0, [r7, #4]
 800e74e:	f7fc ffc5 	bl	800b6dc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800e752:	4b4c      	ldr	r3, [pc, #304]	; (800e884 <tcp_receive+0xb10>)
 800e754:	685b      	ldr	r3, [r3, #4]
 800e756:	891b      	ldrh	r3, [r3, #8]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d006      	beq.n	800e76a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800e75c:	4b49      	ldr	r3, [pc, #292]	; (800e884 <tcp_receive+0xb10>)
 800e75e:	685b      	ldr	r3, [r3, #4]
 800e760:	4a4d      	ldr	r2, [pc, #308]	; (800e898 <tcp_receive+0xb24>)
 800e762:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800e764:	4b47      	ldr	r3, [pc, #284]	; (800e884 <tcp_receive+0xb10>)
 800e766:	2200      	movs	r2, #0
 800e768:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800e76a:	4b46      	ldr	r3, [pc, #280]	; (800e884 <tcp_receive+0xb10>)
 800e76c:	68db      	ldr	r3, [r3, #12]
 800e76e:	899b      	ldrh	r3, [r3, #12]
 800e770:	b29b      	uxth	r3, r3
 800e772:	4618      	mov	r0, r3
 800e774:	f7fa fe04 	bl	8009380 <lwip_htons>
 800e778:	4603      	mov	r3, r0
 800e77a:	b2db      	uxtb	r3, r3
 800e77c:	f003 0301 	and.w	r3, r3, #1
 800e780:	2b00      	cmp	r3, #0
 800e782:	f000 80b8 	beq.w	800e8f6 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800e786:	4b45      	ldr	r3, [pc, #276]	; (800e89c <tcp_receive+0xb28>)
 800e788:	781b      	ldrb	r3, [r3, #0]
 800e78a:	f043 0320 	orr.w	r3, r3, #32
 800e78e:	b2da      	uxtb	r2, r3
 800e790:	4b42      	ldr	r3, [pc, #264]	; (800e89c <tcp_receive+0xb28>)
 800e792:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800e794:	e0af      	b.n	800e8f6 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e79a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e7a0:	68db      	ldr	r3, [r3, #12]
 800e7a2:	685b      	ldr	r3, [r3, #4]
 800e7a4:	4a36      	ldr	r2, [pc, #216]	; (800e880 <tcp_receive+0xb0c>)
 800e7a6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800e7a8:	68bb      	ldr	r3, [r7, #8]
 800e7aa:	891b      	ldrh	r3, [r3, #8]
 800e7ac:	461c      	mov	r4, r3
 800e7ae:	68bb      	ldr	r3, [r7, #8]
 800e7b0:	68db      	ldr	r3, [r3, #12]
 800e7b2:	899b      	ldrh	r3, [r3, #12]
 800e7b4:	b29b      	uxth	r3, r3
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	f7fa fde2 	bl	8009380 <lwip_htons>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	b2db      	uxtb	r3, r3
 800e7c0:	f003 0303 	and.w	r3, r3, #3
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d001      	beq.n	800e7cc <tcp_receive+0xa58>
 800e7c8:	2301      	movs	r3, #1
 800e7ca:	e000      	b.n	800e7ce <tcp_receive+0xa5a>
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	191a      	adds	r2, r3, r4
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7d4:	441a      	add	r2, r3
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e7de:	461c      	mov	r4, r3
 800e7e0:	68bb      	ldr	r3, [r7, #8]
 800e7e2:	891b      	ldrh	r3, [r3, #8]
 800e7e4:	461d      	mov	r5, r3
 800e7e6:	68bb      	ldr	r3, [r7, #8]
 800e7e8:	68db      	ldr	r3, [r3, #12]
 800e7ea:	899b      	ldrh	r3, [r3, #12]
 800e7ec:	b29b      	uxth	r3, r3
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f7fa fdc6 	bl	8009380 <lwip_htons>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	b2db      	uxtb	r3, r3
 800e7f8:	f003 0303 	and.w	r3, r3, #3
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d001      	beq.n	800e804 <tcp_receive+0xa90>
 800e800:	2301      	movs	r3, #1
 800e802:	e000      	b.n	800e806 <tcp_receive+0xa92>
 800e804:	2300      	movs	r3, #0
 800e806:	442b      	add	r3, r5
 800e808:	429c      	cmp	r4, r3
 800e80a:	d206      	bcs.n	800e81a <tcp_receive+0xaa6>
 800e80c:	4b1e      	ldr	r3, [pc, #120]	; (800e888 <tcp_receive+0xb14>)
 800e80e:	f240 622b 	movw	r2, #1579	; 0x62b
 800e812:	4923      	ldr	r1, [pc, #140]	; (800e8a0 <tcp_receive+0xb2c>)
 800e814:	481e      	ldr	r0, [pc, #120]	; (800e890 <tcp_receive+0xb1c>)
 800e816:	f006 fea3 	bl	8015560 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800e81a:	68bb      	ldr	r3, [r7, #8]
 800e81c:	891b      	ldrh	r3, [r3, #8]
 800e81e:	461c      	mov	r4, r3
 800e820:	68bb      	ldr	r3, [r7, #8]
 800e822:	68db      	ldr	r3, [r3, #12]
 800e824:	899b      	ldrh	r3, [r3, #12]
 800e826:	b29b      	uxth	r3, r3
 800e828:	4618      	mov	r0, r3
 800e82a:	f7fa fda9 	bl	8009380 <lwip_htons>
 800e82e:	4603      	mov	r3, r0
 800e830:	b2db      	uxtb	r3, r3
 800e832:	f003 0303 	and.w	r3, r3, #3
 800e836:	2b00      	cmp	r3, #0
 800e838:	d001      	beq.n	800e83e <tcp_receive+0xaca>
 800e83a:	2301      	movs	r3, #1
 800e83c:	e000      	b.n	800e840 <tcp_receive+0xacc>
 800e83e:	2300      	movs	r3, #0
 800e840:	1919      	adds	r1, r3, r4
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e846:	b28b      	uxth	r3, r1
 800e848:	1ad3      	subs	r3, r2, r3
 800e84a:	b29a      	uxth	r2, r3
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800e850:	6878      	ldr	r0, [r7, #4]
 800e852:	f7fc ff43 	bl	800b6dc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800e856:	68bb      	ldr	r3, [r7, #8]
 800e858:	685b      	ldr	r3, [r3, #4]
 800e85a:	891b      	ldrh	r3, [r3, #8]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d028      	beq.n	800e8b2 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800e860:	4b0d      	ldr	r3, [pc, #52]	; (800e898 <tcp_receive+0xb24>)
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d01d      	beq.n	800e8a4 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800e868:	4b0b      	ldr	r3, [pc, #44]	; (800e898 <tcp_receive+0xb24>)
 800e86a:	681a      	ldr	r2, [r3, #0]
 800e86c:	68bb      	ldr	r3, [r7, #8]
 800e86e:	685b      	ldr	r3, [r3, #4]
 800e870:	4619      	mov	r1, r3
 800e872:	4610      	mov	r0, r2
 800e874:	f7fc fa50 	bl	800ad18 <pbuf_cat>
 800e878:	e018      	b.n	800e8ac <tcp_receive+0xb38>
 800e87a:	bf00      	nop
 800e87c:	2000d3ba 	.word	0x2000d3ba
 800e880:	2000d3b0 	.word	0x2000d3b0
 800e884:	2000d390 	.word	0x2000d390
 800e888:	0801797c 	.word	0x0801797c
 800e88c:	08017d5c 	.word	0x08017d5c
 800e890:	080179c8 	.word	0x080179c8
 800e894:	08017d98 	.word	0x08017d98
 800e898:	2000d3c0 	.word	0x2000d3c0
 800e89c:	2000d3bd 	.word	0x2000d3bd
 800e8a0:	08017db8 	.word	0x08017db8
            } else {
              recv_data = cseg->p;
 800e8a4:	68bb      	ldr	r3, [r7, #8]
 800e8a6:	685b      	ldr	r3, [r3, #4]
 800e8a8:	4a70      	ldr	r2, [pc, #448]	; (800ea6c <tcp_receive+0xcf8>)
 800e8aa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800e8ac:	68bb      	ldr	r3, [r7, #8]
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e8b2:	68bb      	ldr	r3, [r7, #8]
 800e8b4:	68db      	ldr	r3, [r3, #12]
 800e8b6:	899b      	ldrh	r3, [r3, #12]
 800e8b8:	b29b      	uxth	r3, r3
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f7fa fd60 	bl	8009380 <lwip_htons>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	b2db      	uxtb	r3, r3
 800e8c4:	f003 0301 	and.w	r3, r3, #1
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d00d      	beq.n	800e8e8 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800e8cc:	4b68      	ldr	r3, [pc, #416]	; (800ea70 <tcp_receive+0xcfc>)
 800e8ce:	781b      	ldrb	r3, [r3, #0]
 800e8d0:	f043 0320 	orr.w	r3, r3, #32
 800e8d4:	b2da      	uxtb	r2, r3
 800e8d6:	4b66      	ldr	r3, [pc, #408]	; (800ea70 <tcp_receive+0xcfc>)
 800e8d8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	7d1b      	ldrb	r3, [r3, #20]
 800e8de:	2b04      	cmp	r3, #4
 800e8e0:	d102      	bne.n	800e8e8 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2207      	movs	r2, #7
 800e8e6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800e8e8:	68bb      	ldr	r3, [r7, #8]
 800e8ea:	681a      	ldr	r2, [r3, #0]
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800e8f0:	68b8      	ldr	r0, [r7, #8]
 800e8f2:	f7fd fbd2 	bl	800c09a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d008      	beq.n	800e910 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e902:	68db      	ldr	r3, [r3, #12]
 800e904:	685a      	ldr	r2, [r3, #4]
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800e90a:	429a      	cmp	r2, r3
 800e90c:	f43f af43 	beq.w	800e796 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	8b5b      	ldrh	r3, [r3, #26]
 800e914:	f003 0301 	and.w	r3, r3, #1
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d00e      	beq.n	800e93a <tcp_receive+0xbc6>
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	8b5b      	ldrh	r3, [r3, #26]
 800e920:	f023 0301 	bic.w	r3, r3, #1
 800e924:	b29a      	uxth	r2, r3
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	835a      	strh	r2, [r3, #26]
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	8b5b      	ldrh	r3, [r3, #26]
 800e92e:	f043 0302 	orr.w	r3, r3, #2
 800e932:	b29a      	uxth	r2, r3
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e938:	e188      	b.n	800ec4c <tcp_receive+0xed8>
        tcp_ack(pcb);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	8b5b      	ldrh	r3, [r3, #26]
 800e93e:	f043 0301 	orr.w	r3, r3, #1
 800e942:	b29a      	uxth	r2, r3
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800e948:	e180      	b.n	800ec4c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d106      	bne.n	800e960 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800e952:	4848      	ldr	r0, [pc, #288]	; (800ea74 <tcp_receive+0xd00>)
 800e954:	f7fd fbba 	bl	800c0cc <tcp_seg_copy>
 800e958:	4602      	mov	r2, r0
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	675a      	str	r2, [r3, #116]	; 0x74
 800e95e:	e16d      	b.n	800ec3c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800e960:	2300      	movs	r3, #0
 800e962:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e968:	63bb      	str	r3, [r7, #56]	; 0x38
 800e96a:	e157      	b.n	800ec1c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800e96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e96e:	68db      	ldr	r3, [r3, #12]
 800e970:	685a      	ldr	r2, [r3, #4]
 800e972:	4b41      	ldr	r3, [pc, #260]	; (800ea78 <tcp_receive+0xd04>)
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	429a      	cmp	r2, r3
 800e978:	d11d      	bne.n	800e9b6 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800e97a:	4b3e      	ldr	r3, [pc, #248]	; (800ea74 <tcp_receive+0xd00>)
 800e97c:	891a      	ldrh	r2, [r3, #8]
 800e97e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e980:	891b      	ldrh	r3, [r3, #8]
 800e982:	429a      	cmp	r2, r3
 800e984:	f240 814f 	bls.w	800ec26 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e988:	483a      	ldr	r0, [pc, #232]	; (800ea74 <tcp_receive+0xd00>)
 800e98a:	f7fd fb9f 	bl	800c0cc <tcp_seg_copy>
 800e98e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800e990:	697b      	ldr	r3, [r7, #20]
 800e992:	2b00      	cmp	r3, #0
 800e994:	f000 8149 	beq.w	800ec2a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800e998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d003      	beq.n	800e9a6 <tcp_receive+0xc32>
                    prev->next = cseg;
 800e99e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9a0:	697a      	ldr	r2, [r7, #20]
 800e9a2:	601a      	str	r2, [r3, #0]
 800e9a4:	e002      	b.n	800e9ac <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	697a      	ldr	r2, [r7, #20]
 800e9aa:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800e9ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e9ae:	6978      	ldr	r0, [r7, #20]
 800e9b0:	f7ff f8dc 	bl	800db6c <tcp_oos_insert_segment>
                }
                break;
 800e9b4:	e139      	b.n	800ec2a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800e9b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d117      	bne.n	800e9ec <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800e9bc:	4b2e      	ldr	r3, [pc, #184]	; (800ea78 <tcp_receive+0xd04>)
 800e9be:	681a      	ldr	r2, [r3, #0]
 800e9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9c2:	68db      	ldr	r3, [r3, #12]
 800e9c4:	685b      	ldr	r3, [r3, #4]
 800e9c6:	1ad3      	subs	r3, r2, r3
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	da57      	bge.n	800ea7c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800e9cc:	4829      	ldr	r0, [pc, #164]	; (800ea74 <tcp_receive+0xd00>)
 800e9ce:	f7fd fb7d 	bl	800c0cc <tcp_seg_copy>
 800e9d2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800e9d4:	69bb      	ldr	r3, [r7, #24]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	f000 8129 	beq.w	800ec2e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	69ba      	ldr	r2, [r7, #24]
 800e9e0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800e9e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e9e4:	69b8      	ldr	r0, [r7, #24]
 800e9e6:	f7ff f8c1 	bl	800db6c <tcp_oos_insert_segment>
                  }
                  break;
 800e9ea:	e120      	b.n	800ec2e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800e9ec:	4b22      	ldr	r3, [pc, #136]	; (800ea78 <tcp_receive+0xd04>)
 800e9ee:	681a      	ldr	r2, [r3, #0]
 800e9f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9f2:	68db      	ldr	r3, [r3, #12]
 800e9f4:	685b      	ldr	r3, [r3, #4]
 800e9f6:	1ad3      	subs	r3, r2, r3
 800e9f8:	3b01      	subs	r3, #1
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	db3e      	blt.n	800ea7c <tcp_receive+0xd08>
 800e9fe:	4b1e      	ldr	r3, [pc, #120]	; (800ea78 <tcp_receive+0xd04>)
 800ea00:	681a      	ldr	r2, [r3, #0]
 800ea02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea04:	68db      	ldr	r3, [r3, #12]
 800ea06:	685b      	ldr	r3, [r3, #4]
 800ea08:	1ad3      	subs	r3, r2, r3
 800ea0a:	3301      	adds	r3, #1
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	dc35      	bgt.n	800ea7c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ea10:	4818      	ldr	r0, [pc, #96]	; (800ea74 <tcp_receive+0xd00>)
 800ea12:	f7fd fb5b 	bl	800c0cc <tcp_seg_copy>
 800ea16:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800ea18:	69fb      	ldr	r3, [r7, #28]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	f000 8109 	beq.w	800ec32 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ea20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea22:	68db      	ldr	r3, [r3, #12]
 800ea24:	685b      	ldr	r3, [r3, #4]
 800ea26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea28:	8912      	ldrh	r2, [r2, #8]
 800ea2a:	441a      	add	r2, r3
 800ea2c:	4b12      	ldr	r3, [pc, #72]	; (800ea78 <tcp_receive+0xd04>)
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	1ad3      	subs	r3, r2, r3
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	dd12      	ble.n	800ea5c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ea36:	4b10      	ldr	r3, [pc, #64]	; (800ea78 <tcp_receive+0xd04>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	b29a      	uxth	r2, r3
 800ea3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea3e:	68db      	ldr	r3, [r3, #12]
 800ea40:	685b      	ldr	r3, [r3, #4]
 800ea42:	b29b      	uxth	r3, r3
 800ea44:	1ad3      	subs	r3, r2, r3
 800ea46:	b29a      	uxth	r2, r3
 800ea48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea4a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ea4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea4e:	685a      	ldr	r2, [r3, #4]
 800ea50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea52:	891b      	ldrh	r3, [r3, #8]
 800ea54:	4619      	mov	r1, r3
 800ea56:	4610      	mov	r0, r2
 800ea58:	f7fb ff0a 	bl	800a870 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ea5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea5e:	69fa      	ldr	r2, [r7, #28]
 800ea60:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ea62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ea64:	69f8      	ldr	r0, [r7, #28]
 800ea66:	f7ff f881 	bl	800db6c <tcp_oos_insert_segment>
                  }
                  break;
 800ea6a:	e0e2      	b.n	800ec32 <tcp_receive+0xebe>
 800ea6c:	2000d3c0 	.word	0x2000d3c0
 800ea70:	2000d3bd 	.word	0x2000d3bd
 800ea74:	2000d390 	.word	0x2000d390
 800ea78:	2000d3b0 	.word	0x2000d3b0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800ea7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea7e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800ea80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	f040 80c6 	bne.w	800ec16 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ea8a:	4b80      	ldr	r3, [pc, #512]	; (800ec8c <tcp_receive+0xf18>)
 800ea8c:	681a      	ldr	r2, [r3, #0]
 800ea8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea90:	68db      	ldr	r3, [r3, #12]
 800ea92:	685b      	ldr	r3, [r3, #4]
 800ea94:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	f340 80bd 	ble.w	800ec16 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ea9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea9e:	68db      	ldr	r3, [r3, #12]
 800eaa0:	899b      	ldrh	r3, [r3, #12]
 800eaa2:	b29b      	uxth	r3, r3
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f7fa fc6b 	bl	8009380 <lwip_htons>
 800eaaa:	4603      	mov	r3, r0
 800eaac:	b2db      	uxtb	r3, r3
 800eaae:	f003 0301 	and.w	r3, r3, #1
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	f040 80bf 	bne.w	800ec36 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800eab8:	4875      	ldr	r0, [pc, #468]	; (800ec90 <tcp_receive+0xf1c>)
 800eaba:	f7fd fb07 	bl	800c0cc <tcp_seg_copy>
 800eabe:	4602      	mov	r2, r0
 800eac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eac2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800eac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	f000 80b6 	beq.w	800ec3a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800eace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ead0:	68db      	ldr	r3, [r3, #12]
 800ead2:	685b      	ldr	r3, [r3, #4]
 800ead4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ead6:	8912      	ldrh	r2, [r2, #8]
 800ead8:	441a      	add	r2, r3
 800eada:	4b6c      	ldr	r3, [pc, #432]	; (800ec8c <tcp_receive+0xf18>)
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	1ad3      	subs	r3, r2, r3
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	dd12      	ble.n	800eb0a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800eae4:	4b69      	ldr	r3, [pc, #420]	; (800ec8c <tcp_receive+0xf18>)
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	b29a      	uxth	r2, r3
 800eaea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaec:	68db      	ldr	r3, [r3, #12]
 800eaee:	685b      	ldr	r3, [r3, #4]
 800eaf0:	b29b      	uxth	r3, r3
 800eaf2:	1ad3      	subs	r3, r2, r3
 800eaf4:	b29a      	uxth	r2, r3
 800eaf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaf8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800eafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eafc:	685a      	ldr	r2, [r3, #4]
 800eafe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb00:	891b      	ldrh	r3, [r3, #8]
 800eb02:	4619      	mov	r1, r3
 800eb04:	4610      	mov	r0, r2
 800eb06:	f7fb feb3 	bl	800a870 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800eb0a:	4b62      	ldr	r3, [pc, #392]	; (800ec94 <tcp_receive+0xf20>)
 800eb0c:	881b      	ldrh	r3, [r3, #0]
 800eb0e:	461a      	mov	r2, r3
 800eb10:	4b5e      	ldr	r3, [pc, #376]	; (800ec8c <tcp_receive+0xf18>)
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	441a      	add	r2, r3
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb1a:	6879      	ldr	r1, [r7, #4]
 800eb1c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800eb1e:	440b      	add	r3, r1
 800eb20:	1ad3      	subs	r3, r2, r3
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	f340 8089 	ble.w	800ec3a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800eb28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	68db      	ldr	r3, [r3, #12]
 800eb2e:	899b      	ldrh	r3, [r3, #12]
 800eb30:	b29b      	uxth	r3, r3
 800eb32:	4618      	mov	r0, r3
 800eb34:	f7fa fc24 	bl	8009380 <lwip_htons>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	b2db      	uxtb	r3, r3
 800eb3c:	f003 0301 	and.w	r3, r3, #1
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d022      	beq.n	800eb8a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800eb44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	68db      	ldr	r3, [r3, #12]
 800eb4a:	899b      	ldrh	r3, [r3, #12]
 800eb4c:	b29b      	uxth	r3, r3
 800eb4e:	b21b      	sxth	r3, r3
 800eb50:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800eb54:	b21c      	sxth	r4, r3
 800eb56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	68db      	ldr	r3, [r3, #12]
 800eb5c:	899b      	ldrh	r3, [r3, #12]
 800eb5e:	b29b      	uxth	r3, r3
 800eb60:	4618      	mov	r0, r3
 800eb62:	f7fa fc0d 	bl	8009380 <lwip_htons>
 800eb66:	4603      	mov	r3, r0
 800eb68:	b2db      	uxtb	r3, r3
 800eb6a:	b29b      	uxth	r3, r3
 800eb6c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800eb70:	b29b      	uxth	r3, r3
 800eb72:	4618      	mov	r0, r3
 800eb74:	f7fa fc04 	bl	8009380 <lwip_htons>
 800eb78:	4603      	mov	r3, r0
 800eb7a:	b21b      	sxth	r3, r3
 800eb7c:	4323      	orrs	r3, r4
 800eb7e:	b21a      	sxth	r2, r3
 800eb80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	68db      	ldr	r3, [r3, #12]
 800eb86:	b292      	uxth	r2, r2
 800eb88:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb8e:	b29a      	uxth	r2, r3
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eb94:	4413      	add	r3, r2
 800eb96:	b299      	uxth	r1, r3
 800eb98:	4b3c      	ldr	r3, [pc, #240]	; (800ec8c <tcp_receive+0xf18>)
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	b29a      	uxth	r2, r3
 800eb9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	1a8a      	subs	r2, r1, r2
 800eba4:	b292      	uxth	r2, r2
 800eba6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800eba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	685a      	ldr	r2, [r3, #4]
 800ebae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	891b      	ldrh	r3, [r3, #8]
 800ebb4:	4619      	mov	r1, r3
 800ebb6:	4610      	mov	r0, r2
 800ebb8:	f7fb fe5a 	bl	800a870 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800ebbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	891c      	ldrh	r4, [r3, #8]
 800ebc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	68db      	ldr	r3, [r3, #12]
 800ebc8:	899b      	ldrh	r3, [r3, #12]
 800ebca:	b29b      	uxth	r3, r3
 800ebcc:	4618      	mov	r0, r3
 800ebce:	f7fa fbd7 	bl	8009380 <lwip_htons>
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	b2db      	uxtb	r3, r3
 800ebd6:	f003 0303 	and.w	r3, r3, #3
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d001      	beq.n	800ebe2 <tcp_receive+0xe6e>
 800ebde:	2301      	movs	r3, #1
 800ebe0:	e000      	b.n	800ebe4 <tcp_receive+0xe70>
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	4423      	add	r3, r4
 800ebe6:	b29a      	uxth	r2, r3
 800ebe8:	4b2a      	ldr	r3, [pc, #168]	; (800ec94 <tcp_receive+0xf20>)
 800ebea:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ebec:	4b29      	ldr	r3, [pc, #164]	; (800ec94 <tcp_receive+0xf20>)
 800ebee:	881b      	ldrh	r3, [r3, #0]
 800ebf0:	461a      	mov	r2, r3
 800ebf2:	4b26      	ldr	r3, [pc, #152]	; (800ec8c <tcp_receive+0xf18>)
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	441a      	add	r2, r3
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebfc:	6879      	ldr	r1, [r7, #4]
 800ebfe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ec00:	440b      	add	r3, r1
 800ec02:	429a      	cmp	r2, r3
 800ec04:	d019      	beq.n	800ec3a <tcp_receive+0xec6>
 800ec06:	4b24      	ldr	r3, [pc, #144]	; (800ec98 <tcp_receive+0xf24>)
 800ec08:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800ec0c:	4923      	ldr	r1, [pc, #140]	; (800ec9c <tcp_receive+0xf28>)
 800ec0e:	4824      	ldr	r0, [pc, #144]	; (800eca0 <tcp_receive+0xf2c>)
 800ec10:	f006 fca6 	bl	8015560 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800ec14:	e011      	b.n	800ec3a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ec16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ec1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	f47f aea4 	bne.w	800e96c <tcp_receive+0xbf8>
 800ec24:	e00a      	b.n	800ec3c <tcp_receive+0xec8>
                break;
 800ec26:	bf00      	nop
 800ec28:	e008      	b.n	800ec3c <tcp_receive+0xec8>
                break;
 800ec2a:	bf00      	nop
 800ec2c:	e006      	b.n	800ec3c <tcp_receive+0xec8>
                  break;
 800ec2e:	bf00      	nop
 800ec30:	e004      	b.n	800ec3c <tcp_receive+0xec8>
                  break;
 800ec32:	bf00      	nop
 800ec34:	e002      	b.n	800ec3c <tcp_receive+0xec8>
                  break;
 800ec36:	bf00      	nop
 800ec38:	e000      	b.n	800ec3c <tcp_receive+0xec8>
                break;
 800ec3a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800ec3c:	6878      	ldr	r0, [r7, #4]
 800ec3e:	f001 fa33 	bl	80100a8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800ec42:	e003      	b.n	800ec4c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800ec44:	6878      	ldr	r0, [r7, #4]
 800ec46:	f001 fa2f 	bl	80100a8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ec4a:	e01a      	b.n	800ec82 <tcp_receive+0xf0e>
 800ec4c:	e019      	b.n	800ec82 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800ec4e:	4b0f      	ldr	r3, [pc, #60]	; (800ec8c <tcp_receive+0xf18>)
 800ec50:	681a      	ldr	r2, [r3, #0]
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec56:	1ad3      	subs	r3, r2, r3
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	db0a      	blt.n	800ec72 <tcp_receive+0xefe>
 800ec5c:	4b0b      	ldr	r3, [pc, #44]	; (800ec8c <tcp_receive+0xf18>)
 800ec5e:	681a      	ldr	r2, [r3, #0]
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec64:	6879      	ldr	r1, [r7, #4]
 800ec66:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ec68:	440b      	add	r3, r1
 800ec6a:	1ad3      	subs	r3, r2, r3
 800ec6c:	3301      	adds	r3, #1
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	dd07      	ble.n	800ec82 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	8b5b      	ldrh	r3, [r3, #26]
 800ec76:	f043 0302 	orr.w	r3, r3, #2
 800ec7a:	b29a      	uxth	r2, r3
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800ec80:	e7ff      	b.n	800ec82 <tcp_receive+0xf0e>
 800ec82:	bf00      	nop
 800ec84:	3750      	adds	r7, #80	; 0x50
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bdb0      	pop	{r4, r5, r7, pc}
 800ec8a:	bf00      	nop
 800ec8c:	2000d3b0 	.word	0x2000d3b0
 800ec90:	2000d390 	.word	0x2000d390
 800ec94:	2000d3ba 	.word	0x2000d3ba
 800ec98:	0801797c 	.word	0x0801797c
 800ec9c:	08017d24 	.word	0x08017d24
 800eca0:	080179c8 	.word	0x080179c8

0800eca4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800eca4:	b480      	push	{r7}
 800eca6:	b083      	sub	sp, #12
 800eca8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800ecaa:	4b15      	ldr	r3, [pc, #84]	; (800ed00 <tcp_get_next_optbyte+0x5c>)
 800ecac:	881b      	ldrh	r3, [r3, #0]
 800ecae:	1c5a      	adds	r2, r3, #1
 800ecb0:	b291      	uxth	r1, r2
 800ecb2:	4a13      	ldr	r2, [pc, #76]	; (800ed00 <tcp_get_next_optbyte+0x5c>)
 800ecb4:	8011      	strh	r1, [r2, #0]
 800ecb6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ecb8:	4b12      	ldr	r3, [pc, #72]	; (800ed04 <tcp_get_next_optbyte+0x60>)
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d004      	beq.n	800ecca <tcp_get_next_optbyte+0x26>
 800ecc0:	4b11      	ldr	r3, [pc, #68]	; (800ed08 <tcp_get_next_optbyte+0x64>)
 800ecc2:	881b      	ldrh	r3, [r3, #0]
 800ecc4:	88fa      	ldrh	r2, [r7, #6]
 800ecc6:	429a      	cmp	r2, r3
 800ecc8:	d208      	bcs.n	800ecdc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800ecca:	4b10      	ldr	r3, [pc, #64]	; (800ed0c <tcp_get_next_optbyte+0x68>)
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	3314      	adds	r3, #20
 800ecd0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800ecd2:	88fb      	ldrh	r3, [r7, #6]
 800ecd4:	683a      	ldr	r2, [r7, #0]
 800ecd6:	4413      	add	r3, r2
 800ecd8:	781b      	ldrb	r3, [r3, #0]
 800ecda:	e00b      	b.n	800ecf4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ecdc:	88fb      	ldrh	r3, [r7, #6]
 800ecde:	b2da      	uxtb	r2, r3
 800ece0:	4b09      	ldr	r3, [pc, #36]	; (800ed08 <tcp_get_next_optbyte+0x64>)
 800ece2:	881b      	ldrh	r3, [r3, #0]
 800ece4:	b2db      	uxtb	r3, r3
 800ece6:	1ad3      	subs	r3, r2, r3
 800ece8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800ecea:	4b06      	ldr	r3, [pc, #24]	; (800ed04 <tcp_get_next_optbyte+0x60>)
 800ecec:	681a      	ldr	r2, [r3, #0]
 800ecee:	797b      	ldrb	r3, [r7, #5]
 800ecf0:	4413      	add	r3, r2
 800ecf2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	370c      	adds	r7, #12
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfe:	4770      	bx	lr
 800ed00:	2000d3ac 	.word	0x2000d3ac
 800ed04:	2000d3a8 	.word	0x2000d3a8
 800ed08:	2000d3a6 	.word	0x2000d3a6
 800ed0c:	2000d3a0 	.word	0x2000d3a0

0800ed10 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b084      	sub	sp, #16
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d106      	bne.n	800ed2c <tcp_parseopt+0x1c>
 800ed1e:	4b32      	ldr	r3, [pc, #200]	; (800ede8 <tcp_parseopt+0xd8>)
 800ed20:	f240 727d 	movw	r2, #1917	; 0x77d
 800ed24:	4931      	ldr	r1, [pc, #196]	; (800edec <tcp_parseopt+0xdc>)
 800ed26:	4832      	ldr	r0, [pc, #200]	; (800edf0 <tcp_parseopt+0xe0>)
 800ed28:	f006 fc1a 	bl	8015560 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800ed2c:	4b31      	ldr	r3, [pc, #196]	; (800edf4 <tcp_parseopt+0xe4>)
 800ed2e:	881b      	ldrh	r3, [r3, #0]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d055      	beq.n	800ede0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ed34:	4b30      	ldr	r3, [pc, #192]	; (800edf8 <tcp_parseopt+0xe8>)
 800ed36:	2200      	movs	r2, #0
 800ed38:	801a      	strh	r2, [r3, #0]
 800ed3a:	e045      	b.n	800edc8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800ed3c:	f7ff ffb2 	bl	800eca4 <tcp_get_next_optbyte>
 800ed40:	4603      	mov	r3, r0
 800ed42:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800ed44:	7bfb      	ldrb	r3, [r7, #15]
 800ed46:	2b02      	cmp	r3, #2
 800ed48:	d006      	beq.n	800ed58 <tcp_parseopt+0x48>
 800ed4a:	2b02      	cmp	r3, #2
 800ed4c:	dc2b      	bgt.n	800eda6 <tcp_parseopt+0x96>
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d041      	beq.n	800edd6 <tcp_parseopt+0xc6>
 800ed52:	2b01      	cmp	r3, #1
 800ed54:	d127      	bne.n	800eda6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800ed56:	e037      	b.n	800edc8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800ed58:	f7ff ffa4 	bl	800eca4 <tcp_get_next_optbyte>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	2b04      	cmp	r3, #4
 800ed60:	d13b      	bne.n	800edda <tcp_parseopt+0xca>
 800ed62:	4b25      	ldr	r3, [pc, #148]	; (800edf8 <tcp_parseopt+0xe8>)
 800ed64:	881b      	ldrh	r3, [r3, #0]
 800ed66:	3301      	adds	r3, #1
 800ed68:	4a22      	ldr	r2, [pc, #136]	; (800edf4 <tcp_parseopt+0xe4>)
 800ed6a:	8812      	ldrh	r2, [r2, #0]
 800ed6c:	4293      	cmp	r3, r2
 800ed6e:	da34      	bge.n	800edda <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800ed70:	f7ff ff98 	bl	800eca4 <tcp_get_next_optbyte>
 800ed74:	4603      	mov	r3, r0
 800ed76:	b29b      	uxth	r3, r3
 800ed78:	021b      	lsls	r3, r3, #8
 800ed7a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800ed7c:	f7ff ff92 	bl	800eca4 <tcp_get_next_optbyte>
 800ed80:	4603      	mov	r3, r0
 800ed82:	b29a      	uxth	r2, r3
 800ed84:	89bb      	ldrh	r3, [r7, #12]
 800ed86:	4313      	orrs	r3, r2
 800ed88:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ed8a:	89bb      	ldrh	r3, [r7, #12]
 800ed8c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ed90:	d804      	bhi.n	800ed9c <tcp_parseopt+0x8c>
 800ed92:	89bb      	ldrh	r3, [r7, #12]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d001      	beq.n	800ed9c <tcp_parseopt+0x8c>
 800ed98:	89ba      	ldrh	r2, [r7, #12]
 800ed9a:	e001      	b.n	800eda0 <tcp_parseopt+0x90>
 800ed9c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800eda4:	e010      	b.n	800edc8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800eda6:	f7ff ff7d 	bl	800eca4 <tcp_get_next_optbyte>
 800edaa:	4603      	mov	r3, r0
 800edac:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800edae:	7afb      	ldrb	r3, [r7, #11]
 800edb0:	2b01      	cmp	r3, #1
 800edb2:	d914      	bls.n	800edde <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800edb4:	7afb      	ldrb	r3, [r7, #11]
 800edb6:	b29a      	uxth	r2, r3
 800edb8:	4b0f      	ldr	r3, [pc, #60]	; (800edf8 <tcp_parseopt+0xe8>)
 800edba:	881b      	ldrh	r3, [r3, #0]
 800edbc:	4413      	add	r3, r2
 800edbe:	b29b      	uxth	r3, r3
 800edc0:	3b02      	subs	r3, #2
 800edc2:	b29a      	uxth	r2, r3
 800edc4:	4b0c      	ldr	r3, [pc, #48]	; (800edf8 <tcp_parseopt+0xe8>)
 800edc6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800edc8:	4b0b      	ldr	r3, [pc, #44]	; (800edf8 <tcp_parseopt+0xe8>)
 800edca:	881a      	ldrh	r2, [r3, #0]
 800edcc:	4b09      	ldr	r3, [pc, #36]	; (800edf4 <tcp_parseopt+0xe4>)
 800edce:	881b      	ldrh	r3, [r3, #0]
 800edd0:	429a      	cmp	r2, r3
 800edd2:	d3b3      	bcc.n	800ed3c <tcp_parseopt+0x2c>
 800edd4:	e004      	b.n	800ede0 <tcp_parseopt+0xd0>
          return;
 800edd6:	bf00      	nop
 800edd8:	e002      	b.n	800ede0 <tcp_parseopt+0xd0>
            return;
 800edda:	bf00      	nop
 800eddc:	e000      	b.n	800ede0 <tcp_parseopt+0xd0>
            return;
 800edde:	bf00      	nop
      }
    }
  }
}
 800ede0:	3710      	adds	r7, #16
 800ede2:	46bd      	mov	sp, r7
 800ede4:	bd80      	pop	{r7, pc}
 800ede6:	bf00      	nop
 800ede8:	0801797c 	.word	0x0801797c
 800edec:	08017de0 	.word	0x08017de0
 800edf0:	080179c8 	.word	0x080179c8
 800edf4:	2000d3a4 	.word	0x2000d3a4
 800edf8:	2000d3ac 	.word	0x2000d3ac

0800edfc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800edfc:	b480      	push	{r7}
 800edfe:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800ee00:	4b05      	ldr	r3, [pc, #20]	; (800ee18 <tcp_trigger_input_pcb_close+0x1c>)
 800ee02:	781b      	ldrb	r3, [r3, #0]
 800ee04:	f043 0310 	orr.w	r3, r3, #16
 800ee08:	b2da      	uxtb	r2, r3
 800ee0a:	4b03      	ldr	r3, [pc, #12]	; (800ee18 <tcp_trigger_input_pcb_close+0x1c>)
 800ee0c:	701a      	strb	r2, [r3, #0]
}
 800ee0e:	bf00      	nop
 800ee10:	46bd      	mov	sp, r7
 800ee12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee16:	4770      	bx	lr
 800ee18:	2000d3bd 	.word	0x2000d3bd

0800ee1c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b084      	sub	sp, #16
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	60f8      	str	r0, [r7, #12]
 800ee24:	60b9      	str	r1, [r7, #8]
 800ee26:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d00a      	beq.n	800ee44 <tcp_route+0x28>
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	7a1b      	ldrb	r3, [r3, #8]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d006      	beq.n	800ee44 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	7a1b      	ldrb	r3, [r3, #8]
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f7fb fb10 	bl	800a460 <netif_get_by_index>
 800ee40:	4603      	mov	r3, r0
 800ee42:	e003      	b.n	800ee4c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800ee44:	6878      	ldr	r0, [r7, #4]
 800ee46:	f005 f845 	bl	8013ed4 <ip4_route>
 800ee4a:	4603      	mov	r3, r0
  }
}
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	3710      	adds	r7, #16
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}

0800ee54 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800ee54:	b590      	push	{r4, r7, lr}
 800ee56:	b087      	sub	sp, #28
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	60f8      	str	r0, [r7, #12]
 800ee5c:	60b9      	str	r1, [r7, #8]
 800ee5e:	603b      	str	r3, [r7, #0]
 800ee60:	4613      	mov	r3, r2
 800ee62:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d105      	bne.n	800ee76 <tcp_create_segment+0x22>
 800ee6a:	4b44      	ldr	r3, [pc, #272]	; (800ef7c <tcp_create_segment+0x128>)
 800ee6c:	22a3      	movs	r2, #163	; 0xa3
 800ee6e:	4944      	ldr	r1, [pc, #272]	; (800ef80 <tcp_create_segment+0x12c>)
 800ee70:	4844      	ldr	r0, [pc, #272]	; (800ef84 <tcp_create_segment+0x130>)
 800ee72:	f006 fb75 	bl	8015560 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d105      	bne.n	800ee88 <tcp_create_segment+0x34>
 800ee7c:	4b3f      	ldr	r3, [pc, #252]	; (800ef7c <tcp_create_segment+0x128>)
 800ee7e:	22a4      	movs	r2, #164	; 0xa4
 800ee80:	4941      	ldr	r1, [pc, #260]	; (800ef88 <tcp_create_segment+0x134>)
 800ee82:	4840      	ldr	r0, [pc, #256]	; (800ef84 <tcp_create_segment+0x130>)
 800ee84:	f006 fb6c 	bl	8015560 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ee88:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ee8c:	009b      	lsls	r3, r3, #2
 800ee8e:	b2db      	uxtb	r3, r3
 800ee90:	f003 0304 	and.w	r3, r3, #4
 800ee94:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ee96:	2003      	movs	r0, #3
 800ee98:	f7fa ff4a 	bl	8009d30 <memp_malloc>
 800ee9c:	6138      	str	r0, [r7, #16]
 800ee9e:	693b      	ldr	r3, [r7, #16]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d104      	bne.n	800eeae <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800eea4:	68b8      	ldr	r0, [r7, #8]
 800eea6:	f7fb fe69 	bl	800ab7c <pbuf_free>
    return NULL;
 800eeaa:	2300      	movs	r3, #0
 800eeac:	e061      	b.n	800ef72 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800eeae:	693b      	ldr	r3, [r7, #16]
 800eeb0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800eeb4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800eeb6:	693b      	ldr	r3, [r7, #16]
 800eeb8:	2200      	movs	r2, #0
 800eeba:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800eebc:	693b      	ldr	r3, [r7, #16]
 800eebe:	68ba      	ldr	r2, [r7, #8]
 800eec0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800eec2:	68bb      	ldr	r3, [r7, #8]
 800eec4:	891a      	ldrh	r2, [r3, #8]
 800eec6:	7dfb      	ldrb	r3, [r7, #23]
 800eec8:	b29b      	uxth	r3, r3
 800eeca:	429a      	cmp	r2, r3
 800eecc:	d205      	bcs.n	800eeda <tcp_create_segment+0x86>
 800eece:	4b2b      	ldr	r3, [pc, #172]	; (800ef7c <tcp_create_segment+0x128>)
 800eed0:	22b0      	movs	r2, #176	; 0xb0
 800eed2:	492e      	ldr	r1, [pc, #184]	; (800ef8c <tcp_create_segment+0x138>)
 800eed4:	482b      	ldr	r0, [pc, #172]	; (800ef84 <tcp_create_segment+0x130>)
 800eed6:	f006 fb43 	bl	8015560 <iprintf>
  seg->len = p->tot_len - optlen;
 800eeda:	68bb      	ldr	r3, [r7, #8]
 800eedc:	891a      	ldrh	r2, [r3, #8]
 800eede:	7dfb      	ldrb	r3, [r7, #23]
 800eee0:	b29b      	uxth	r3, r3
 800eee2:	1ad3      	subs	r3, r2, r3
 800eee4:	b29a      	uxth	r2, r3
 800eee6:	693b      	ldr	r3, [r7, #16]
 800eee8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800eeea:	2114      	movs	r1, #20
 800eeec:	68b8      	ldr	r0, [r7, #8]
 800eeee:	f7fb fdaf 	bl	800aa50 <pbuf_add_header>
 800eef2:	4603      	mov	r3, r0
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d004      	beq.n	800ef02 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800eef8:	6938      	ldr	r0, [r7, #16]
 800eefa:	f7fd f8ce 	bl	800c09a <tcp_seg_free>
    return NULL;
 800eefe:	2300      	movs	r3, #0
 800ef00:	e037      	b.n	800ef72 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ef02:	693b      	ldr	r3, [r7, #16]
 800ef04:	685b      	ldr	r3, [r3, #4]
 800ef06:	685a      	ldr	r2, [r3, #4]
 800ef08:	693b      	ldr	r3, [r7, #16]
 800ef0a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	8ada      	ldrh	r2, [r3, #22]
 800ef10:	693b      	ldr	r3, [r7, #16]
 800ef12:	68dc      	ldr	r4, [r3, #12]
 800ef14:	4610      	mov	r0, r2
 800ef16:	f7fa fa33 	bl	8009380 <lwip_htons>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	8b1a      	ldrh	r2, [r3, #24]
 800ef22:	693b      	ldr	r3, [r7, #16]
 800ef24:	68dc      	ldr	r4, [r3, #12]
 800ef26:	4610      	mov	r0, r2
 800ef28:	f7fa fa2a 	bl	8009380 <lwip_htons>
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800ef30:	693b      	ldr	r3, [r7, #16]
 800ef32:	68dc      	ldr	r4, [r3, #12]
 800ef34:	6838      	ldr	r0, [r7, #0]
 800ef36:	f7fa fa38 	bl	80093aa <lwip_htonl>
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800ef3e:	7dfb      	ldrb	r3, [r7, #23]
 800ef40:	089b      	lsrs	r3, r3, #2
 800ef42:	b2db      	uxtb	r3, r3
 800ef44:	b29b      	uxth	r3, r3
 800ef46:	3305      	adds	r3, #5
 800ef48:	b29b      	uxth	r3, r3
 800ef4a:	031b      	lsls	r3, r3, #12
 800ef4c:	b29a      	uxth	r2, r3
 800ef4e:	79fb      	ldrb	r3, [r7, #7]
 800ef50:	b29b      	uxth	r3, r3
 800ef52:	4313      	orrs	r3, r2
 800ef54:	b29a      	uxth	r2, r3
 800ef56:	693b      	ldr	r3, [r7, #16]
 800ef58:	68dc      	ldr	r4, [r3, #12]
 800ef5a:	4610      	mov	r0, r2
 800ef5c:	f7fa fa10 	bl	8009380 <lwip_htons>
 800ef60:	4603      	mov	r3, r0
 800ef62:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800ef64:	693b      	ldr	r3, [r7, #16]
 800ef66:	68db      	ldr	r3, [r3, #12]
 800ef68:	2200      	movs	r2, #0
 800ef6a:	749a      	strb	r2, [r3, #18]
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	74da      	strb	r2, [r3, #19]
  return seg;
 800ef70:	693b      	ldr	r3, [r7, #16]
}
 800ef72:	4618      	mov	r0, r3
 800ef74:	371c      	adds	r7, #28
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bd90      	pop	{r4, r7, pc}
 800ef7a:	bf00      	nop
 800ef7c:	08017dfc 	.word	0x08017dfc
 800ef80:	08017e30 	.word	0x08017e30
 800ef84:	08017e50 	.word	0x08017e50
 800ef88:	08017e78 	.word	0x08017e78
 800ef8c:	08017e9c 	.word	0x08017e9c

0800ef90 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800ef90:	b590      	push	{r4, r7, lr}
 800ef92:	b08b      	sub	sp, #44	; 0x2c
 800ef94:	af02      	add	r7, sp, #8
 800ef96:	6078      	str	r0, [r7, #4]
 800ef98:	460b      	mov	r3, r1
 800ef9a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	61fb      	str	r3, [r7, #28]
 800efa0:	2300      	movs	r3, #0
 800efa2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800efa4:	2300      	movs	r3, #0
 800efa6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d106      	bne.n	800efbc <tcp_split_unsent_seg+0x2c>
 800efae:	4b95      	ldr	r3, [pc, #596]	; (800f204 <tcp_split_unsent_seg+0x274>)
 800efb0:	f240 324b 	movw	r2, #843	; 0x34b
 800efb4:	4994      	ldr	r1, [pc, #592]	; (800f208 <tcp_split_unsent_seg+0x278>)
 800efb6:	4895      	ldr	r0, [pc, #596]	; (800f20c <tcp_split_unsent_seg+0x27c>)
 800efb8:	f006 fad2 	bl	8015560 <iprintf>

  useg = pcb->unsent;
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efc0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800efc2:	697b      	ldr	r3, [r7, #20]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d102      	bne.n	800efce <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800efc8:	f04f 33ff 	mov.w	r3, #4294967295
 800efcc:	e116      	b.n	800f1fc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800efce:	887b      	ldrh	r3, [r7, #2]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d109      	bne.n	800efe8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800efd4:	4b8b      	ldr	r3, [pc, #556]	; (800f204 <tcp_split_unsent_seg+0x274>)
 800efd6:	f240 3253 	movw	r2, #851	; 0x353
 800efda:	498d      	ldr	r1, [pc, #564]	; (800f210 <tcp_split_unsent_seg+0x280>)
 800efdc:	488b      	ldr	r0, [pc, #556]	; (800f20c <tcp_split_unsent_seg+0x27c>)
 800efde:	f006 fabf 	bl	8015560 <iprintf>
    return ERR_VAL;
 800efe2:	f06f 0305 	mvn.w	r3, #5
 800efe6:	e109      	b.n	800f1fc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800efe8:	697b      	ldr	r3, [r7, #20]
 800efea:	891b      	ldrh	r3, [r3, #8]
 800efec:	887a      	ldrh	r2, [r7, #2]
 800efee:	429a      	cmp	r2, r3
 800eff0:	d301      	bcc.n	800eff6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800eff2:	2300      	movs	r3, #0
 800eff4:	e102      	b.n	800f1fc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800effa:	887a      	ldrh	r2, [r7, #2]
 800effc:	429a      	cmp	r2, r3
 800effe:	d906      	bls.n	800f00e <tcp_split_unsent_seg+0x7e>
 800f000:	4b80      	ldr	r3, [pc, #512]	; (800f204 <tcp_split_unsent_seg+0x274>)
 800f002:	f240 325b 	movw	r2, #859	; 0x35b
 800f006:	4983      	ldr	r1, [pc, #524]	; (800f214 <tcp_split_unsent_seg+0x284>)
 800f008:	4880      	ldr	r0, [pc, #512]	; (800f20c <tcp_split_unsent_seg+0x27c>)
 800f00a:	f006 faa9 	bl	8015560 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800f00e:	697b      	ldr	r3, [r7, #20]
 800f010:	891b      	ldrh	r3, [r3, #8]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d106      	bne.n	800f024 <tcp_split_unsent_seg+0x94>
 800f016:	4b7b      	ldr	r3, [pc, #492]	; (800f204 <tcp_split_unsent_seg+0x274>)
 800f018:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800f01c:	497e      	ldr	r1, [pc, #504]	; (800f218 <tcp_split_unsent_seg+0x288>)
 800f01e:	487b      	ldr	r0, [pc, #492]	; (800f20c <tcp_split_unsent_seg+0x27c>)
 800f020:	f006 fa9e 	bl	8015560 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800f024:	697b      	ldr	r3, [r7, #20]
 800f026:	7a9b      	ldrb	r3, [r3, #10]
 800f028:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800f02a:	7bfb      	ldrb	r3, [r7, #15]
 800f02c:	009b      	lsls	r3, r3, #2
 800f02e:	b2db      	uxtb	r3, r3
 800f030:	f003 0304 	and.w	r3, r3, #4
 800f034:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800f036:	697b      	ldr	r3, [r7, #20]
 800f038:	891a      	ldrh	r2, [r3, #8]
 800f03a:	887b      	ldrh	r3, [r7, #2]
 800f03c:	1ad3      	subs	r3, r2, r3
 800f03e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800f040:	7bbb      	ldrb	r3, [r7, #14]
 800f042:	b29a      	uxth	r2, r3
 800f044:	89bb      	ldrh	r3, [r7, #12]
 800f046:	4413      	add	r3, r2
 800f048:	b29b      	uxth	r3, r3
 800f04a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f04e:	4619      	mov	r1, r3
 800f050:	2036      	movs	r0, #54	; 0x36
 800f052:	f7fb faaf 	bl	800a5b4 <pbuf_alloc>
 800f056:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f058:	693b      	ldr	r3, [r7, #16]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	f000 80b7 	beq.w	800f1ce <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800f060:	697b      	ldr	r3, [r7, #20]
 800f062:	685b      	ldr	r3, [r3, #4]
 800f064:	891a      	ldrh	r2, [r3, #8]
 800f066:	697b      	ldr	r3, [r7, #20]
 800f068:	891b      	ldrh	r3, [r3, #8]
 800f06a:	1ad3      	subs	r3, r2, r3
 800f06c:	b29a      	uxth	r2, r3
 800f06e:	887b      	ldrh	r3, [r7, #2]
 800f070:	4413      	add	r3, r2
 800f072:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800f074:	697b      	ldr	r3, [r7, #20]
 800f076:	6858      	ldr	r0, [r3, #4]
 800f078:	693b      	ldr	r3, [r7, #16]
 800f07a:	685a      	ldr	r2, [r3, #4]
 800f07c:	7bbb      	ldrb	r3, [r7, #14]
 800f07e:	18d1      	adds	r1, r2, r3
 800f080:	897b      	ldrh	r3, [r7, #10]
 800f082:	89ba      	ldrh	r2, [r7, #12]
 800f084:	f7fb ff80 	bl	800af88 <pbuf_copy_partial>
 800f088:	4603      	mov	r3, r0
 800f08a:	461a      	mov	r2, r3
 800f08c:	89bb      	ldrh	r3, [r7, #12]
 800f08e:	4293      	cmp	r3, r2
 800f090:	f040 809f 	bne.w	800f1d2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800f094:	697b      	ldr	r3, [r7, #20]
 800f096:	68db      	ldr	r3, [r3, #12]
 800f098:	899b      	ldrh	r3, [r3, #12]
 800f09a:	b29b      	uxth	r3, r3
 800f09c:	4618      	mov	r0, r3
 800f09e:	f7fa f96f 	bl	8009380 <lwip_htons>
 800f0a2:	4603      	mov	r3, r0
 800f0a4:	b2db      	uxtb	r3, r3
 800f0a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f0aa:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800f0b0:	7efb      	ldrb	r3, [r7, #27]
 800f0b2:	f003 0308 	and.w	r3, r3, #8
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d007      	beq.n	800f0ca <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800f0ba:	7efb      	ldrb	r3, [r7, #27]
 800f0bc:	f023 0308 	bic.w	r3, r3, #8
 800f0c0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800f0c2:	7ebb      	ldrb	r3, [r7, #26]
 800f0c4:	f043 0308 	orr.w	r3, r3, #8
 800f0c8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800f0ca:	7efb      	ldrb	r3, [r7, #27]
 800f0cc:	f003 0301 	and.w	r3, r3, #1
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d007      	beq.n	800f0e4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800f0d4:	7efb      	ldrb	r3, [r7, #27]
 800f0d6:	f023 0301 	bic.w	r3, r3, #1
 800f0da:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800f0dc:	7ebb      	ldrb	r3, [r7, #26]
 800f0de:	f043 0301 	orr.w	r3, r3, #1
 800f0e2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800f0e4:	697b      	ldr	r3, [r7, #20]
 800f0e6:	68db      	ldr	r3, [r3, #12]
 800f0e8:	685b      	ldr	r3, [r3, #4]
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	f7fa f95d 	bl	80093aa <lwip_htonl>
 800f0f0:	4602      	mov	r2, r0
 800f0f2:	887b      	ldrh	r3, [r7, #2]
 800f0f4:	18d1      	adds	r1, r2, r3
 800f0f6:	7eba      	ldrb	r2, [r7, #26]
 800f0f8:	7bfb      	ldrb	r3, [r7, #15]
 800f0fa:	9300      	str	r3, [sp, #0]
 800f0fc:	460b      	mov	r3, r1
 800f0fe:	6939      	ldr	r1, [r7, #16]
 800f100:	6878      	ldr	r0, [r7, #4]
 800f102:	f7ff fea7 	bl	800ee54 <tcp_create_segment>
 800f106:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800f108:	69fb      	ldr	r3, [r7, #28]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d063      	beq.n	800f1d6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800f10e:	697b      	ldr	r3, [r7, #20]
 800f110:	685b      	ldr	r3, [r3, #4]
 800f112:	4618      	mov	r0, r3
 800f114:	f7fb fdc0 	bl	800ac98 <pbuf_clen>
 800f118:	4603      	mov	r3, r0
 800f11a:	461a      	mov	r2, r3
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f122:	1a9b      	subs	r3, r3, r2
 800f124:	b29a      	uxth	r2, r3
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800f12c:	697b      	ldr	r3, [r7, #20]
 800f12e:	6858      	ldr	r0, [r3, #4]
 800f130:	697b      	ldr	r3, [r7, #20]
 800f132:	685b      	ldr	r3, [r3, #4]
 800f134:	891a      	ldrh	r2, [r3, #8]
 800f136:	89bb      	ldrh	r3, [r7, #12]
 800f138:	1ad3      	subs	r3, r2, r3
 800f13a:	b29b      	uxth	r3, r3
 800f13c:	4619      	mov	r1, r3
 800f13e:	f7fb fb97 	bl	800a870 <pbuf_realloc>
  useg->len -= remainder;
 800f142:	697b      	ldr	r3, [r7, #20]
 800f144:	891a      	ldrh	r2, [r3, #8]
 800f146:	89bb      	ldrh	r3, [r7, #12]
 800f148:	1ad3      	subs	r3, r2, r3
 800f14a:	b29a      	uxth	r2, r3
 800f14c:	697b      	ldr	r3, [r7, #20]
 800f14e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800f150:	697b      	ldr	r3, [r7, #20]
 800f152:	68db      	ldr	r3, [r3, #12]
 800f154:	899b      	ldrh	r3, [r3, #12]
 800f156:	b29c      	uxth	r4, r3
 800f158:	7efb      	ldrb	r3, [r7, #27]
 800f15a:	b29b      	uxth	r3, r3
 800f15c:	4618      	mov	r0, r3
 800f15e:	f7fa f90f 	bl	8009380 <lwip_htons>
 800f162:	4603      	mov	r3, r0
 800f164:	461a      	mov	r2, r3
 800f166:	697b      	ldr	r3, [r7, #20]
 800f168:	68db      	ldr	r3, [r3, #12]
 800f16a:	4322      	orrs	r2, r4
 800f16c:	b292      	uxth	r2, r2
 800f16e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800f170:	697b      	ldr	r3, [r7, #20]
 800f172:	685b      	ldr	r3, [r3, #4]
 800f174:	4618      	mov	r0, r3
 800f176:	f7fb fd8f 	bl	800ac98 <pbuf_clen>
 800f17a:	4603      	mov	r3, r0
 800f17c:	461a      	mov	r2, r3
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f184:	4413      	add	r3, r2
 800f186:	b29a      	uxth	r2, r3
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f18e:	69fb      	ldr	r3, [r7, #28]
 800f190:	685b      	ldr	r3, [r3, #4]
 800f192:	4618      	mov	r0, r3
 800f194:	f7fb fd80 	bl	800ac98 <pbuf_clen>
 800f198:	4603      	mov	r3, r0
 800f19a:	461a      	mov	r2, r3
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f1a2:	4413      	add	r3, r2
 800f1a4:	b29a      	uxth	r2, r3
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800f1ac:	697b      	ldr	r3, [r7, #20]
 800f1ae:	681a      	ldr	r2, [r3, #0]
 800f1b0:	69fb      	ldr	r3, [r7, #28]
 800f1b2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800f1b4:	697b      	ldr	r3, [r7, #20]
 800f1b6:	69fa      	ldr	r2, [r7, #28]
 800f1b8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800f1ba:	69fb      	ldr	r3, [r7, #28]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d103      	bne.n	800f1ca <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	e016      	b.n	800f1fc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800f1ce:	bf00      	nop
 800f1d0:	e002      	b.n	800f1d8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f1d2:	bf00      	nop
 800f1d4:	e000      	b.n	800f1d8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f1d6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800f1d8:	69fb      	ldr	r3, [r7, #28]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d006      	beq.n	800f1ec <tcp_split_unsent_seg+0x25c>
 800f1de:	4b09      	ldr	r3, [pc, #36]	; (800f204 <tcp_split_unsent_seg+0x274>)
 800f1e0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800f1e4:	490d      	ldr	r1, [pc, #52]	; (800f21c <tcp_split_unsent_seg+0x28c>)
 800f1e6:	4809      	ldr	r0, [pc, #36]	; (800f20c <tcp_split_unsent_seg+0x27c>)
 800f1e8:	f006 f9ba 	bl	8015560 <iprintf>
  if (p != NULL) {
 800f1ec:	693b      	ldr	r3, [r7, #16]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d002      	beq.n	800f1f8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800f1f2:	6938      	ldr	r0, [r7, #16]
 800f1f4:	f7fb fcc2 	bl	800ab7c <pbuf_free>
  }

  return ERR_MEM;
 800f1f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	3724      	adds	r7, #36	; 0x24
 800f200:	46bd      	mov	sp, r7
 800f202:	bd90      	pop	{r4, r7, pc}
 800f204:	08017dfc 	.word	0x08017dfc
 800f208:	08018190 	.word	0x08018190
 800f20c:	08017e50 	.word	0x08017e50
 800f210:	080181b4 	.word	0x080181b4
 800f214:	080181d8 	.word	0x080181d8
 800f218:	080181e8 	.word	0x080181e8
 800f21c:	080181f8 	.word	0x080181f8

0800f220 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800f220:	b590      	push	{r4, r7, lr}
 800f222:	b085      	sub	sp, #20
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d106      	bne.n	800f23c <tcp_send_fin+0x1c>
 800f22e:	4b21      	ldr	r3, [pc, #132]	; (800f2b4 <tcp_send_fin+0x94>)
 800f230:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800f234:	4920      	ldr	r1, [pc, #128]	; (800f2b8 <tcp_send_fin+0x98>)
 800f236:	4821      	ldr	r0, [pc, #132]	; (800f2bc <tcp_send_fin+0x9c>)
 800f238:	f006 f992 	bl	8015560 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f240:	2b00      	cmp	r3, #0
 800f242:	d02e      	beq.n	800f2a2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f248:	60fb      	str	r3, [r7, #12]
 800f24a:	e002      	b.n	800f252 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d1f8      	bne.n	800f24c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	68db      	ldr	r3, [r3, #12]
 800f25e:	899b      	ldrh	r3, [r3, #12]
 800f260:	b29b      	uxth	r3, r3
 800f262:	4618      	mov	r0, r3
 800f264:	f7fa f88c 	bl	8009380 <lwip_htons>
 800f268:	4603      	mov	r3, r0
 800f26a:	b2db      	uxtb	r3, r3
 800f26c:	f003 0307 	and.w	r3, r3, #7
 800f270:	2b00      	cmp	r3, #0
 800f272:	d116      	bne.n	800f2a2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	68db      	ldr	r3, [r3, #12]
 800f278:	899b      	ldrh	r3, [r3, #12]
 800f27a:	b29c      	uxth	r4, r3
 800f27c:	2001      	movs	r0, #1
 800f27e:	f7fa f87f 	bl	8009380 <lwip_htons>
 800f282:	4603      	mov	r3, r0
 800f284:	461a      	mov	r2, r3
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	68db      	ldr	r3, [r3, #12]
 800f28a:	4322      	orrs	r2, r4
 800f28c:	b292      	uxth	r2, r2
 800f28e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	8b5b      	ldrh	r3, [r3, #26]
 800f294:	f043 0320 	orr.w	r3, r3, #32
 800f298:	b29a      	uxth	r2, r3
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800f29e:	2300      	movs	r3, #0
 800f2a0:	e004      	b.n	800f2ac <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800f2a2:	2101      	movs	r1, #1
 800f2a4:	6878      	ldr	r0, [r7, #4]
 800f2a6:	f000 f80b 	bl	800f2c0 <tcp_enqueue_flags>
 800f2aa:	4603      	mov	r3, r0
}
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	3714      	adds	r7, #20
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	bd90      	pop	{r4, r7, pc}
 800f2b4:	08017dfc 	.word	0x08017dfc
 800f2b8:	08018204 	.word	0x08018204
 800f2bc:	08017e50 	.word	0x08017e50

0800f2c0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b08a      	sub	sp, #40	; 0x28
 800f2c4:	af02      	add	r7, sp, #8
 800f2c6:	6078      	str	r0, [r7, #4]
 800f2c8:	460b      	mov	r3, r1
 800f2ca:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800f2d4:	78fb      	ldrb	r3, [r7, #3]
 800f2d6:	f003 0303 	and.w	r3, r3, #3
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d106      	bne.n	800f2ec <tcp_enqueue_flags+0x2c>
 800f2de:	4b67      	ldr	r3, [pc, #412]	; (800f47c <tcp_enqueue_flags+0x1bc>)
 800f2e0:	f240 4211 	movw	r2, #1041	; 0x411
 800f2e4:	4966      	ldr	r1, [pc, #408]	; (800f480 <tcp_enqueue_flags+0x1c0>)
 800f2e6:	4867      	ldr	r0, [pc, #412]	; (800f484 <tcp_enqueue_flags+0x1c4>)
 800f2e8:	f006 f93a 	bl	8015560 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d106      	bne.n	800f300 <tcp_enqueue_flags+0x40>
 800f2f2:	4b62      	ldr	r3, [pc, #392]	; (800f47c <tcp_enqueue_flags+0x1bc>)
 800f2f4:	f240 4213 	movw	r2, #1043	; 0x413
 800f2f8:	4963      	ldr	r1, [pc, #396]	; (800f488 <tcp_enqueue_flags+0x1c8>)
 800f2fa:	4862      	ldr	r0, [pc, #392]	; (800f484 <tcp_enqueue_flags+0x1c4>)
 800f2fc:	f006 f930 	bl	8015560 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800f300:	78fb      	ldrb	r3, [r7, #3]
 800f302:	f003 0302 	and.w	r3, r3, #2
 800f306:	2b00      	cmp	r3, #0
 800f308:	d001      	beq.n	800f30e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800f30a:	2301      	movs	r3, #1
 800f30c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f30e:	7ffb      	ldrb	r3, [r7, #31]
 800f310:	009b      	lsls	r3, r3, #2
 800f312:	b2db      	uxtb	r3, r3
 800f314:	f003 0304 	and.w	r3, r3, #4
 800f318:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800f31a:	7dfb      	ldrb	r3, [r7, #23]
 800f31c:	b29b      	uxth	r3, r3
 800f31e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f322:	4619      	mov	r1, r3
 800f324:	2036      	movs	r0, #54	; 0x36
 800f326:	f7fb f945 	bl	800a5b4 <pbuf_alloc>
 800f32a:	6138      	str	r0, [r7, #16]
 800f32c:	693b      	ldr	r3, [r7, #16]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d109      	bne.n	800f346 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	8b5b      	ldrh	r3, [r3, #26]
 800f336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f33a:	b29a      	uxth	r2, r3
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f340:	f04f 33ff 	mov.w	r3, #4294967295
 800f344:	e095      	b.n	800f472 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800f346:	693b      	ldr	r3, [r7, #16]
 800f348:	895a      	ldrh	r2, [r3, #10]
 800f34a:	7dfb      	ldrb	r3, [r7, #23]
 800f34c:	b29b      	uxth	r3, r3
 800f34e:	429a      	cmp	r2, r3
 800f350:	d206      	bcs.n	800f360 <tcp_enqueue_flags+0xa0>
 800f352:	4b4a      	ldr	r3, [pc, #296]	; (800f47c <tcp_enqueue_flags+0x1bc>)
 800f354:	f240 4239 	movw	r2, #1081	; 0x439
 800f358:	494c      	ldr	r1, [pc, #304]	; (800f48c <tcp_enqueue_flags+0x1cc>)
 800f35a:	484a      	ldr	r0, [pc, #296]	; (800f484 <tcp_enqueue_flags+0x1c4>)
 800f35c:	f006 f900 	bl	8015560 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800f364:	78fa      	ldrb	r2, [r7, #3]
 800f366:	7ffb      	ldrb	r3, [r7, #31]
 800f368:	9300      	str	r3, [sp, #0]
 800f36a:	460b      	mov	r3, r1
 800f36c:	6939      	ldr	r1, [r7, #16]
 800f36e:	6878      	ldr	r0, [r7, #4]
 800f370:	f7ff fd70 	bl	800ee54 <tcp_create_segment>
 800f374:	60f8      	str	r0, [r7, #12]
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d109      	bne.n	800f390 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	8b5b      	ldrh	r3, [r3, #26]
 800f380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f384:	b29a      	uxth	r2, r3
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800f38a:	f04f 33ff 	mov.w	r3, #4294967295
 800f38e:	e070      	b.n	800f472 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	68db      	ldr	r3, [r3, #12]
 800f394:	f003 0303 	and.w	r3, r3, #3
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d006      	beq.n	800f3aa <tcp_enqueue_flags+0xea>
 800f39c:	4b37      	ldr	r3, [pc, #220]	; (800f47c <tcp_enqueue_flags+0x1bc>)
 800f39e:	f240 4242 	movw	r2, #1090	; 0x442
 800f3a2:	493b      	ldr	r1, [pc, #236]	; (800f490 <tcp_enqueue_flags+0x1d0>)
 800f3a4:	4837      	ldr	r0, [pc, #220]	; (800f484 <tcp_enqueue_flags+0x1c4>)
 800f3a6:	f006 f8db 	bl	8015560 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	891b      	ldrh	r3, [r3, #8]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d006      	beq.n	800f3c0 <tcp_enqueue_flags+0x100>
 800f3b2:	4b32      	ldr	r3, [pc, #200]	; (800f47c <tcp_enqueue_flags+0x1bc>)
 800f3b4:	f240 4243 	movw	r2, #1091	; 0x443
 800f3b8:	4936      	ldr	r1, [pc, #216]	; (800f494 <tcp_enqueue_flags+0x1d4>)
 800f3ba:	4832      	ldr	r0, [pc, #200]	; (800f484 <tcp_enqueue_flags+0x1c4>)
 800f3bc:	f006 f8d0 	bl	8015560 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d103      	bne.n	800f3d0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	68fa      	ldr	r2, [r7, #12]
 800f3cc:	66da      	str	r2, [r3, #108]	; 0x6c
 800f3ce:	e00d      	b.n	800f3ec <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3d4:	61bb      	str	r3, [r7, #24]
 800f3d6:	e002      	b.n	800f3de <tcp_enqueue_flags+0x11e>
 800f3d8:	69bb      	ldr	r3, [r7, #24]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	61bb      	str	r3, [r7, #24]
 800f3de:	69bb      	ldr	r3, [r7, #24]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d1f8      	bne.n	800f3d8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800f3e6:	69bb      	ldr	r3, [r7, #24]
 800f3e8:	68fa      	ldr	r2, [r7, #12]
 800f3ea:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800f3f4:	78fb      	ldrb	r3, [r7, #3]
 800f3f6:	f003 0302 	and.w	r3, r3, #2
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d104      	bne.n	800f408 <tcp_enqueue_flags+0x148>
 800f3fe:	78fb      	ldrb	r3, [r7, #3]
 800f400:	f003 0301 	and.w	r3, r3, #1
 800f404:	2b00      	cmp	r3, #0
 800f406:	d004      	beq.n	800f412 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f40c:	1c5a      	adds	r2, r3, #1
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800f412:	78fb      	ldrb	r3, [r7, #3]
 800f414:	f003 0301 	and.w	r3, r3, #1
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d006      	beq.n	800f42a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	8b5b      	ldrh	r3, [r3, #26]
 800f420:	f043 0320 	orr.w	r3, r3, #32
 800f424:	b29a      	uxth	r2, r3
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	685b      	ldr	r3, [r3, #4]
 800f42e:	4618      	mov	r0, r3
 800f430:	f7fb fc32 	bl	800ac98 <pbuf_clen>
 800f434:	4603      	mov	r3, r0
 800f436:	461a      	mov	r2, r3
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f43e:	4413      	add	r3, r2
 800f440:	b29a      	uxth	r2, r3
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d00e      	beq.n	800f470 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f456:	2b00      	cmp	r3, #0
 800f458:	d10a      	bne.n	800f470 <tcp_enqueue_flags+0x1b0>
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d106      	bne.n	800f470 <tcp_enqueue_flags+0x1b0>
 800f462:	4b06      	ldr	r3, [pc, #24]	; (800f47c <tcp_enqueue_flags+0x1bc>)
 800f464:	f240 4265 	movw	r2, #1125	; 0x465
 800f468:	490b      	ldr	r1, [pc, #44]	; (800f498 <tcp_enqueue_flags+0x1d8>)
 800f46a:	4806      	ldr	r0, [pc, #24]	; (800f484 <tcp_enqueue_flags+0x1c4>)
 800f46c:	f006 f878 	bl	8015560 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800f470:	2300      	movs	r3, #0
}
 800f472:	4618      	mov	r0, r3
 800f474:	3720      	adds	r7, #32
 800f476:	46bd      	mov	sp, r7
 800f478:	bd80      	pop	{r7, pc}
 800f47a:	bf00      	nop
 800f47c:	08017dfc 	.word	0x08017dfc
 800f480:	08018220 	.word	0x08018220
 800f484:	08017e50 	.word	0x08017e50
 800f488:	08018278 	.word	0x08018278
 800f48c:	08018298 	.word	0x08018298
 800f490:	080182d4 	.word	0x080182d4
 800f494:	080182ec 	.word	0x080182ec
 800f498:	08018318 	.word	0x08018318

0800f49c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800f49c:	b5b0      	push	{r4, r5, r7, lr}
 800f49e:	b08a      	sub	sp, #40	; 0x28
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d106      	bne.n	800f4b8 <tcp_output+0x1c>
 800f4aa:	4b8a      	ldr	r3, [pc, #552]	; (800f6d4 <tcp_output+0x238>)
 800f4ac:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800f4b0:	4989      	ldr	r1, [pc, #548]	; (800f6d8 <tcp_output+0x23c>)
 800f4b2:	488a      	ldr	r0, [pc, #552]	; (800f6dc <tcp_output+0x240>)
 800f4b4:	f006 f854 	bl	8015560 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	7d1b      	ldrb	r3, [r3, #20]
 800f4bc:	2b01      	cmp	r3, #1
 800f4be:	d106      	bne.n	800f4ce <tcp_output+0x32>
 800f4c0:	4b84      	ldr	r3, [pc, #528]	; (800f6d4 <tcp_output+0x238>)
 800f4c2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800f4c6:	4986      	ldr	r1, [pc, #536]	; (800f6e0 <tcp_output+0x244>)
 800f4c8:	4884      	ldr	r0, [pc, #528]	; (800f6dc <tcp_output+0x240>)
 800f4ca:	f006 f849 	bl	8015560 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800f4ce:	4b85      	ldr	r3, [pc, #532]	; (800f6e4 <tcp_output+0x248>)
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	687a      	ldr	r2, [r7, #4]
 800f4d4:	429a      	cmp	r2, r3
 800f4d6:	d101      	bne.n	800f4dc <tcp_output+0x40>
    return ERR_OK;
 800f4d8:	2300      	movs	r3, #0
 800f4da:	e1ce      	b.n	800f87a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f4e8:	4293      	cmp	r3, r2
 800f4ea:	bf28      	it	cs
 800f4ec:	4613      	movcs	r3, r2
 800f4ee:	b29b      	uxth	r3, r3
 800f4f0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800f4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d10b      	bne.n	800f516 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	8b5b      	ldrh	r3, [r3, #26]
 800f502:	f003 0302 	and.w	r3, r3, #2
 800f506:	2b00      	cmp	r3, #0
 800f508:	f000 81aa 	beq.w	800f860 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800f50c:	6878      	ldr	r0, [r7, #4]
 800f50e:	f000 fdcb 	bl	80100a8 <tcp_send_empty_ack>
 800f512:	4603      	mov	r3, r0
 800f514:	e1b1      	b.n	800f87a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800f516:	6879      	ldr	r1, [r7, #4]
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	3304      	adds	r3, #4
 800f51c:	461a      	mov	r2, r3
 800f51e:	6878      	ldr	r0, [r7, #4]
 800f520:	f7ff fc7c 	bl	800ee1c <tcp_route>
 800f524:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800f526:	697b      	ldr	r3, [r7, #20]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d102      	bne.n	800f532 <tcp_output+0x96>
    return ERR_RTE;
 800f52c:	f06f 0303 	mvn.w	r3, #3
 800f530:	e1a3      	b.n	800f87a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d003      	beq.n	800f540 <tcp_output+0xa4>
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d111      	bne.n	800f564 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800f540:	697b      	ldr	r3, [r7, #20]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d002      	beq.n	800f54c <tcp_output+0xb0>
 800f546:	697b      	ldr	r3, [r7, #20]
 800f548:	3304      	adds	r3, #4
 800f54a:	e000      	b.n	800f54e <tcp_output+0xb2>
 800f54c:	2300      	movs	r3, #0
 800f54e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800f550:	693b      	ldr	r3, [r7, #16]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d102      	bne.n	800f55c <tcp_output+0xc0>
      return ERR_RTE;
 800f556:	f06f 0303 	mvn.w	r3, #3
 800f55a:	e18e      	b.n	800f87a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800f55c:	693b      	ldr	r3, [r7, #16]
 800f55e:	681a      	ldr	r2, [r3, #0]
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800f564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f566:	68db      	ldr	r3, [r3, #12]
 800f568:	685b      	ldr	r3, [r3, #4]
 800f56a:	4618      	mov	r0, r3
 800f56c:	f7f9 ff1d 	bl	80093aa <lwip_htonl>
 800f570:	4602      	mov	r2, r0
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f576:	1ad3      	subs	r3, r2, r3
 800f578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f57a:	8912      	ldrh	r2, [r2, #8]
 800f57c:	4413      	add	r3, r2
 800f57e:	69ba      	ldr	r2, [r7, #24]
 800f580:	429a      	cmp	r2, r3
 800f582:	d227      	bcs.n	800f5d4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f58a:	461a      	mov	r2, r3
 800f58c:	69bb      	ldr	r3, [r7, #24]
 800f58e:	4293      	cmp	r3, r2
 800f590:	d114      	bne.n	800f5bc <tcp_output+0x120>
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f596:	2b00      	cmp	r3, #0
 800f598:	d110      	bne.n	800f5bc <tcp_output+0x120>
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d10b      	bne.n	800f5bc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	2201      	movs	r2, #1
 800f5b0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	8b5b      	ldrh	r3, [r3, #26]
 800f5c0:	f003 0302 	and.w	r3, r3, #2
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	f000 814d 	beq.w	800f864 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800f5ca:	6878      	ldr	r0, [r7, #4]
 800f5cc:	f000 fd6c 	bl	80100a8 <tcp_send_empty_ack>
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	e152      	b.n	800f87a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5e0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800f5e2:	6a3b      	ldr	r3, [r7, #32]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	f000 811c 	beq.w	800f822 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800f5ea:	e002      	b.n	800f5f2 <tcp_output+0x156>
 800f5ec:	6a3b      	ldr	r3, [r7, #32]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	623b      	str	r3, [r7, #32]
 800f5f2:	6a3b      	ldr	r3, [r7, #32]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d1f8      	bne.n	800f5ec <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800f5fa:	e112      	b.n	800f822 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800f5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5fe:	68db      	ldr	r3, [r3, #12]
 800f600:	899b      	ldrh	r3, [r3, #12]
 800f602:	b29b      	uxth	r3, r3
 800f604:	4618      	mov	r0, r3
 800f606:	f7f9 febb 	bl	8009380 <lwip_htons>
 800f60a:	4603      	mov	r3, r0
 800f60c:	b2db      	uxtb	r3, r3
 800f60e:	f003 0304 	and.w	r3, r3, #4
 800f612:	2b00      	cmp	r3, #0
 800f614:	d006      	beq.n	800f624 <tcp_output+0x188>
 800f616:	4b2f      	ldr	r3, [pc, #188]	; (800f6d4 <tcp_output+0x238>)
 800f618:	f240 5236 	movw	r2, #1334	; 0x536
 800f61c:	4932      	ldr	r1, [pc, #200]	; (800f6e8 <tcp_output+0x24c>)
 800f61e:	482f      	ldr	r0, [pc, #188]	; (800f6dc <tcp_output+0x240>)
 800f620:	f005 ff9e 	bl	8015560 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d01f      	beq.n	800f66c <tcp_output+0x1d0>
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	8b5b      	ldrh	r3, [r3, #26]
 800f630:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800f634:	2b00      	cmp	r3, #0
 800f636:	d119      	bne.n	800f66c <tcp_output+0x1d0>
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d00b      	beq.n	800f658 <tcp_output+0x1bc>
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d110      	bne.n	800f66c <tcp_output+0x1d0>
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f64e:	891a      	ldrh	r2, [r3, #8]
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f654:	429a      	cmp	r2, r3
 800f656:	d209      	bcs.n	800f66c <tcp_output+0x1d0>
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d004      	beq.n	800f66c <tcp_output+0x1d0>
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f668:	2b08      	cmp	r3, #8
 800f66a:	d901      	bls.n	800f670 <tcp_output+0x1d4>
 800f66c:	2301      	movs	r3, #1
 800f66e:	e000      	b.n	800f672 <tcp_output+0x1d6>
 800f670:	2300      	movs	r3, #0
 800f672:	2b00      	cmp	r3, #0
 800f674:	d106      	bne.n	800f684 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	8b5b      	ldrh	r3, [r3, #26]
 800f67a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f67e:	2b00      	cmp	r3, #0
 800f680:	f000 80e4 	beq.w	800f84c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	7d1b      	ldrb	r3, [r3, #20]
 800f688:	2b02      	cmp	r3, #2
 800f68a:	d00d      	beq.n	800f6a8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800f68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f68e:	68db      	ldr	r3, [r3, #12]
 800f690:	899b      	ldrh	r3, [r3, #12]
 800f692:	b29c      	uxth	r4, r3
 800f694:	2010      	movs	r0, #16
 800f696:	f7f9 fe73 	bl	8009380 <lwip_htons>
 800f69a:	4603      	mov	r3, r0
 800f69c:	461a      	mov	r2, r3
 800f69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6a0:	68db      	ldr	r3, [r3, #12]
 800f6a2:	4322      	orrs	r2, r4
 800f6a4:	b292      	uxth	r2, r2
 800f6a6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800f6a8:	697a      	ldr	r2, [r7, #20]
 800f6aa:	6879      	ldr	r1, [r7, #4]
 800f6ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f6ae:	f000 f909 	bl	800f8c4 <tcp_output_segment>
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800f6b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d016      	beq.n	800f6ec <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	8b5b      	ldrh	r3, [r3, #26]
 800f6c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f6c6:	b29a      	uxth	r2, r3
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	835a      	strh	r2, [r3, #26]
      return err;
 800f6cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f6d0:	e0d3      	b.n	800f87a <tcp_output+0x3de>
 800f6d2:	bf00      	nop
 800f6d4:	08017dfc 	.word	0x08017dfc
 800f6d8:	08018340 	.word	0x08018340
 800f6dc:	08017e50 	.word	0x08017e50
 800f6e0:	08018358 	.word	0x08018358
 800f6e4:	2000d3c4 	.word	0x2000d3c4
 800f6e8:	08018380 	.word	0x08018380
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800f6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ee:	681a      	ldr	r2, [r3, #0]
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	7d1b      	ldrb	r3, [r3, #20]
 800f6f8:	2b02      	cmp	r3, #2
 800f6fa:	d006      	beq.n	800f70a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	8b5b      	ldrh	r3, [r3, #26]
 800f700:	f023 0303 	bic.w	r3, r3, #3
 800f704:	b29a      	uxth	r2, r3
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f70c:	68db      	ldr	r3, [r3, #12]
 800f70e:	685b      	ldr	r3, [r3, #4]
 800f710:	4618      	mov	r0, r3
 800f712:	f7f9 fe4a 	bl	80093aa <lwip_htonl>
 800f716:	4604      	mov	r4, r0
 800f718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f71a:	891b      	ldrh	r3, [r3, #8]
 800f71c:	461d      	mov	r5, r3
 800f71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f720:	68db      	ldr	r3, [r3, #12]
 800f722:	899b      	ldrh	r3, [r3, #12]
 800f724:	b29b      	uxth	r3, r3
 800f726:	4618      	mov	r0, r3
 800f728:	f7f9 fe2a 	bl	8009380 <lwip_htons>
 800f72c:	4603      	mov	r3, r0
 800f72e:	b2db      	uxtb	r3, r3
 800f730:	f003 0303 	and.w	r3, r3, #3
 800f734:	2b00      	cmp	r3, #0
 800f736:	d001      	beq.n	800f73c <tcp_output+0x2a0>
 800f738:	2301      	movs	r3, #1
 800f73a:	e000      	b.n	800f73e <tcp_output+0x2a2>
 800f73c:	2300      	movs	r3, #0
 800f73e:	442b      	add	r3, r5
 800f740:	4423      	add	r3, r4
 800f742:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f748:	68bb      	ldr	r3, [r7, #8]
 800f74a:	1ad3      	subs	r3, r2, r3
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	da02      	bge.n	800f756 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	68ba      	ldr	r2, [r7, #8]
 800f754:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800f756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f758:	891b      	ldrh	r3, [r3, #8]
 800f75a:	461c      	mov	r4, r3
 800f75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f75e:	68db      	ldr	r3, [r3, #12]
 800f760:	899b      	ldrh	r3, [r3, #12]
 800f762:	b29b      	uxth	r3, r3
 800f764:	4618      	mov	r0, r3
 800f766:	f7f9 fe0b 	bl	8009380 <lwip_htons>
 800f76a:	4603      	mov	r3, r0
 800f76c:	b2db      	uxtb	r3, r3
 800f76e:	f003 0303 	and.w	r3, r3, #3
 800f772:	2b00      	cmp	r3, #0
 800f774:	d001      	beq.n	800f77a <tcp_output+0x2de>
 800f776:	2301      	movs	r3, #1
 800f778:	e000      	b.n	800f77c <tcp_output+0x2e0>
 800f77a:	2300      	movs	r3, #0
 800f77c:	4423      	add	r3, r4
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d049      	beq.n	800f816 <tcp_output+0x37a>
      seg->next = NULL;
 800f782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f784:	2200      	movs	r2, #0
 800f786:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d105      	bne.n	800f79c <tcp_output+0x300>
        pcb->unacked = seg;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f794:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800f796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f798:	623b      	str	r3, [r7, #32]
 800f79a:	e03f      	b.n	800f81c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800f79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f79e:	68db      	ldr	r3, [r3, #12]
 800f7a0:	685b      	ldr	r3, [r3, #4]
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	f7f9 fe01 	bl	80093aa <lwip_htonl>
 800f7a8:	4604      	mov	r4, r0
 800f7aa:	6a3b      	ldr	r3, [r7, #32]
 800f7ac:	68db      	ldr	r3, [r3, #12]
 800f7ae:	685b      	ldr	r3, [r3, #4]
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	f7f9 fdfa 	bl	80093aa <lwip_htonl>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	1ae3      	subs	r3, r4, r3
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	da24      	bge.n	800f808 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	3370      	adds	r3, #112	; 0x70
 800f7c2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f7c4:	e002      	b.n	800f7cc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800f7c6:	69fb      	ldr	r3, [r7, #28]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f7cc:	69fb      	ldr	r3, [r7, #28]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d011      	beq.n	800f7f8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f7d4:	69fb      	ldr	r3, [r7, #28]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	68db      	ldr	r3, [r3, #12]
 800f7da:	685b      	ldr	r3, [r3, #4]
 800f7dc:	4618      	mov	r0, r3
 800f7de:	f7f9 fde4 	bl	80093aa <lwip_htonl>
 800f7e2:	4604      	mov	r4, r0
 800f7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7e6:	68db      	ldr	r3, [r3, #12]
 800f7e8:	685b      	ldr	r3, [r3, #4]
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	f7f9 fddd 	bl	80093aa <lwip_htonl>
 800f7f0:	4603      	mov	r3, r0
 800f7f2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	dbe6      	blt.n	800f7c6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800f7f8:	69fb      	ldr	r3, [r7, #28]
 800f7fa:	681a      	ldr	r2, [r3, #0]
 800f7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7fe:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800f800:	69fb      	ldr	r3, [r7, #28]
 800f802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f804:	601a      	str	r2, [r3, #0]
 800f806:	e009      	b.n	800f81c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800f808:	6a3b      	ldr	r3, [r7, #32]
 800f80a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f80c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800f80e:	6a3b      	ldr	r3, [r7, #32]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	623b      	str	r3, [r7, #32]
 800f814:	e002      	b.n	800f81c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800f816:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f818:	f7fc fc3f 	bl	800c09a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f820:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800f822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f824:	2b00      	cmp	r3, #0
 800f826:	d012      	beq.n	800f84e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800f828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f82a:	68db      	ldr	r3, [r3, #12]
 800f82c:	685b      	ldr	r3, [r3, #4]
 800f82e:	4618      	mov	r0, r3
 800f830:	f7f9 fdbb 	bl	80093aa <lwip_htonl>
 800f834:	4602      	mov	r2, r0
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f83a:	1ad3      	subs	r3, r2, r3
 800f83c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f83e:	8912      	ldrh	r2, [r2, #8]
 800f840:	4413      	add	r3, r2
  while (seg != NULL &&
 800f842:	69ba      	ldr	r2, [r7, #24]
 800f844:	429a      	cmp	r2, r3
 800f846:	f4bf aed9 	bcs.w	800f5fc <tcp_output+0x160>
 800f84a:	e000      	b.n	800f84e <tcp_output+0x3b2>
      break;
 800f84c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f852:	2b00      	cmp	r3, #0
 800f854:	d108      	bne.n	800f868 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	2200      	movs	r2, #0
 800f85a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800f85e:	e004      	b.n	800f86a <tcp_output+0x3ce>
    goto output_done;
 800f860:	bf00      	nop
 800f862:	e002      	b.n	800f86a <tcp_output+0x3ce>
    goto output_done;
 800f864:	bf00      	nop
 800f866:	e000      	b.n	800f86a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800f868:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	8b5b      	ldrh	r3, [r3, #26]
 800f86e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f872:	b29a      	uxth	r2, r3
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800f878:	2300      	movs	r3, #0
}
 800f87a:	4618      	mov	r0, r3
 800f87c:	3728      	adds	r7, #40	; 0x28
 800f87e:	46bd      	mov	sp, r7
 800f880:	bdb0      	pop	{r4, r5, r7, pc}
 800f882:	bf00      	nop

0800f884 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b082      	sub	sp, #8
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d106      	bne.n	800f8a0 <tcp_output_segment_busy+0x1c>
 800f892:	4b09      	ldr	r3, [pc, #36]	; (800f8b8 <tcp_output_segment_busy+0x34>)
 800f894:	f240 529a 	movw	r2, #1434	; 0x59a
 800f898:	4908      	ldr	r1, [pc, #32]	; (800f8bc <tcp_output_segment_busy+0x38>)
 800f89a:	4809      	ldr	r0, [pc, #36]	; (800f8c0 <tcp_output_segment_busy+0x3c>)
 800f89c:	f005 fe60 	bl	8015560 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	685b      	ldr	r3, [r3, #4]
 800f8a4:	7b9b      	ldrb	r3, [r3, #14]
 800f8a6:	2b01      	cmp	r3, #1
 800f8a8:	d001      	beq.n	800f8ae <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800f8aa:	2301      	movs	r3, #1
 800f8ac:	e000      	b.n	800f8b0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800f8ae:	2300      	movs	r3, #0
}
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	3708      	adds	r7, #8
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	bd80      	pop	{r7, pc}
 800f8b8:	08017dfc 	.word	0x08017dfc
 800f8bc:	08018398 	.word	0x08018398
 800f8c0:	08017e50 	.word	0x08017e50

0800f8c4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800f8c4:	b5b0      	push	{r4, r5, r7, lr}
 800f8c6:	b08c      	sub	sp, #48	; 0x30
 800f8c8:	af04      	add	r7, sp, #16
 800f8ca:	60f8      	str	r0, [r7, #12]
 800f8cc:	60b9      	str	r1, [r7, #8]
 800f8ce:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d106      	bne.n	800f8e4 <tcp_output_segment+0x20>
 800f8d6:	4b63      	ldr	r3, [pc, #396]	; (800fa64 <tcp_output_segment+0x1a0>)
 800f8d8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800f8dc:	4962      	ldr	r1, [pc, #392]	; (800fa68 <tcp_output_segment+0x1a4>)
 800f8de:	4863      	ldr	r0, [pc, #396]	; (800fa6c <tcp_output_segment+0x1a8>)
 800f8e0:	f005 fe3e 	bl	8015560 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800f8e4:	68bb      	ldr	r3, [r7, #8]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d106      	bne.n	800f8f8 <tcp_output_segment+0x34>
 800f8ea:	4b5e      	ldr	r3, [pc, #376]	; (800fa64 <tcp_output_segment+0x1a0>)
 800f8ec:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800f8f0:	495f      	ldr	r1, [pc, #380]	; (800fa70 <tcp_output_segment+0x1ac>)
 800f8f2:	485e      	ldr	r0, [pc, #376]	; (800fa6c <tcp_output_segment+0x1a8>)
 800f8f4:	f005 fe34 	bl	8015560 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d106      	bne.n	800f90c <tcp_output_segment+0x48>
 800f8fe:	4b59      	ldr	r3, [pc, #356]	; (800fa64 <tcp_output_segment+0x1a0>)
 800f900:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800f904:	495b      	ldr	r1, [pc, #364]	; (800fa74 <tcp_output_segment+0x1b0>)
 800f906:	4859      	ldr	r0, [pc, #356]	; (800fa6c <tcp_output_segment+0x1a8>)
 800f908:	f005 fe2a 	bl	8015560 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800f90c:	68f8      	ldr	r0, [r7, #12]
 800f90e:	f7ff ffb9 	bl	800f884 <tcp_output_segment_busy>
 800f912:	4603      	mov	r3, r0
 800f914:	2b00      	cmp	r3, #0
 800f916:	d001      	beq.n	800f91c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800f918:	2300      	movs	r3, #0
 800f91a:	e09f      	b.n	800fa5c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800f91c:	68bb      	ldr	r3, [r7, #8]
 800f91e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	68dc      	ldr	r4, [r3, #12]
 800f924:	4610      	mov	r0, r2
 800f926:	f7f9 fd40 	bl	80093aa <lwip_htonl>
 800f92a:	4603      	mov	r3, r0
 800f92c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800f92e:	68bb      	ldr	r3, [r7, #8]
 800f930:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	68dc      	ldr	r4, [r3, #12]
 800f936:	4610      	mov	r0, r2
 800f938:	f7f9 fd22 	bl	8009380 <lwip_htons>
 800f93c:	4603      	mov	r3, r0
 800f93e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f940:	68bb      	ldr	r3, [r7, #8]
 800f942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f944:	68ba      	ldr	r2, [r7, #8]
 800f946:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f948:	441a      	add	r2, r3
 800f94a:	68bb      	ldr	r3, [r7, #8]
 800f94c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	68db      	ldr	r3, [r3, #12]
 800f952:	3314      	adds	r3, #20
 800f954:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	7a9b      	ldrb	r3, [r3, #10]
 800f95a:	f003 0301 	and.w	r3, r3, #1
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d015      	beq.n	800f98e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800f962:	68bb      	ldr	r3, [r7, #8]
 800f964:	3304      	adds	r3, #4
 800f966:	461a      	mov	r2, r3
 800f968:	6879      	ldr	r1, [r7, #4]
 800f96a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800f96e:	f7fc fe8b 	bl	800c688 <tcp_eff_send_mss_netif>
 800f972:	4603      	mov	r3, r0
 800f974:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800f976:	8b7b      	ldrh	r3, [r7, #26]
 800f978:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800f97c:	4618      	mov	r0, r3
 800f97e:	f7f9 fd14 	bl	80093aa <lwip_htonl>
 800f982:	4602      	mov	r2, r0
 800f984:	69fb      	ldr	r3, [r7, #28]
 800f986:	601a      	str	r2, [r3, #0]
    opts += 1;
 800f988:	69fb      	ldr	r3, [r7, #28]
 800f98a:	3304      	adds	r3, #4
 800f98c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800f98e:	68bb      	ldr	r3, [r7, #8]
 800f990:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f994:	2b00      	cmp	r3, #0
 800f996:	da02      	bge.n	800f99e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800f998:	68bb      	ldr	r3, [r7, #8]
 800f99a:	2200      	movs	r2, #0
 800f99c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800f99e:	68bb      	ldr	r3, [r7, #8]
 800f9a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d10c      	bne.n	800f9c0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800f9a6:	4b34      	ldr	r3, [pc, #208]	; (800fa78 <tcp_output_segment+0x1b4>)
 800f9a8:	681a      	ldr	r2, [r3, #0]
 800f9aa:	68bb      	ldr	r3, [r7, #8]
 800f9ac:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	68db      	ldr	r3, [r3, #12]
 800f9b2:	685b      	ldr	r3, [r3, #4]
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	f7f9 fcf8 	bl	80093aa <lwip_htonl>
 800f9ba:	4602      	mov	r2, r0
 800f9bc:	68bb      	ldr	r3, [r7, #8]
 800f9be:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	68da      	ldr	r2, [r3, #12]
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	685b      	ldr	r3, [r3, #4]
 800f9c8:	685b      	ldr	r3, [r3, #4]
 800f9ca:	1ad3      	subs	r3, r2, r3
 800f9cc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	685b      	ldr	r3, [r3, #4]
 800f9d2:	8959      	ldrh	r1, [r3, #10]
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	685b      	ldr	r3, [r3, #4]
 800f9d8:	8b3a      	ldrh	r2, [r7, #24]
 800f9da:	1a8a      	subs	r2, r1, r2
 800f9dc:	b292      	uxth	r2, r2
 800f9de:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	685b      	ldr	r3, [r3, #4]
 800f9e4:	8919      	ldrh	r1, [r3, #8]
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	685b      	ldr	r3, [r3, #4]
 800f9ea:	8b3a      	ldrh	r2, [r7, #24]
 800f9ec:	1a8a      	subs	r2, r1, r2
 800f9ee:	b292      	uxth	r2, r2
 800f9f0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	685b      	ldr	r3, [r3, #4]
 800f9f6:	68fa      	ldr	r2, [r7, #12]
 800f9f8:	68d2      	ldr	r2, [r2, #12]
 800f9fa:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	68db      	ldr	r3, [r3, #12]
 800fa00:	2200      	movs	r2, #0
 800fa02:	741a      	strb	r2, [r3, #16]
 800fa04:	2200      	movs	r2, #0
 800fa06:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	68db      	ldr	r3, [r3, #12]
 800fa0c:	f103 0214 	add.w	r2, r3, #20
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	7a9b      	ldrb	r3, [r3, #10]
 800fa14:	009b      	lsls	r3, r3, #2
 800fa16:	f003 0304 	and.w	r3, r3, #4
 800fa1a:	4413      	add	r3, r2
 800fa1c:	69fa      	ldr	r2, [r7, #28]
 800fa1e:	429a      	cmp	r2, r3
 800fa20:	d006      	beq.n	800fa30 <tcp_output_segment+0x16c>
 800fa22:	4b10      	ldr	r3, [pc, #64]	; (800fa64 <tcp_output_segment+0x1a0>)
 800fa24:	f240 621c 	movw	r2, #1564	; 0x61c
 800fa28:	4914      	ldr	r1, [pc, #80]	; (800fa7c <tcp_output_segment+0x1b8>)
 800fa2a:	4810      	ldr	r0, [pc, #64]	; (800fa6c <tcp_output_segment+0x1a8>)
 800fa2c:	f005 fd98 	bl	8015560 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	6858      	ldr	r0, [r3, #4]
 800fa34:	68b9      	ldr	r1, [r7, #8]
 800fa36:	68bb      	ldr	r3, [r7, #8]
 800fa38:	1d1c      	adds	r4, r3, #4
 800fa3a:	68bb      	ldr	r3, [r7, #8]
 800fa3c:	7add      	ldrb	r5, [r3, #11]
 800fa3e:	68bb      	ldr	r3, [r7, #8]
 800fa40:	7a9b      	ldrb	r3, [r3, #10]
 800fa42:	687a      	ldr	r2, [r7, #4]
 800fa44:	9202      	str	r2, [sp, #8]
 800fa46:	2206      	movs	r2, #6
 800fa48:	9201      	str	r2, [sp, #4]
 800fa4a:	9300      	str	r3, [sp, #0]
 800fa4c:	462b      	mov	r3, r5
 800fa4e:	4622      	mov	r2, r4
 800fa50:	f004 fc1c 	bl	801428c <ip4_output_if>
 800fa54:	4603      	mov	r3, r0
 800fa56:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800fa58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	3720      	adds	r7, #32
 800fa60:	46bd      	mov	sp, r7
 800fa62:	bdb0      	pop	{r4, r5, r7, pc}
 800fa64:	08017dfc 	.word	0x08017dfc
 800fa68:	080183c0 	.word	0x080183c0
 800fa6c:	08017e50 	.word	0x08017e50
 800fa70:	080183e0 	.word	0x080183e0
 800fa74:	08018400 	.word	0x08018400
 800fa78:	2000d378 	.word	0x2000d378
 800fa7c:	08018424 	.word	0x08018424

0800fa80 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800fa80:	b5b0      	push	{r4, r5, r7, lr}
 800fa82:	b084      	sub	sp, #16
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d106      	bne.n	800fa9c <tcp_rexmit_rto_prepare+0x1c>
 800fa8e:	4b31      	ldr	r3, [pc, #196]	; (800fb54 <tcp_rexmit_rto_prepare+0xd4>)
 800fa90:	f240 6263 	movw	r2, #1635	; 0x663
 800fa94:	4930      	ldr	r1, [pc, #192]	; (800fb58 <tcp_rexmit_rto_prepare+0xd8>)
 800fa96:	4831      	ldr	r0, [pc, #196]	; (800fb5c <tcp_rexmit_rto_prepare+0xdc>)
 800fa98:	f005 fd62 	bl	8015560 <iprintf>

  if (pcb->unacked == NULL) {
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d102      	bne.n	800faaa <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800faa4:	f06f 0305 	mvn.w	r3, #5
 800faa8:	e050      	b.n	800fb4c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800faae:	60fb      	str	r3, [r7, #12]
 800fab0:	e00b      	b.n	800faca <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800fab2:	68f8      	ldr	r0, [r7, #12]
 800fab4:	f7ff fee6 	bl	800f884 <tcp_output_segment_busy>
 800fab8:	4603      	mov	r3, r0
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d002      	beq.n	800fac4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800fabe:	f06f 0305 	mvn.w	r3, #5
 800fac2:	e043      	b.n	800fb4c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	60fb      	str	r3, [r7, #12]
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d1ef      	bne.n	800fab2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800fad2:	68f8      	ldr	r0, [r7, #12]
 800fad4:	f7ff fed6 	bl	800f884 <tcp_output_segment_busy>
 800fad8:	4603      	mov	r3, r0
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d002      	beq.n	800fae4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800fade:	f06f 0305 	mvn.w	r3, #5
 800fae2:	e033      	b.n	800fb4c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2200      	movs	r2, #0
 800faf8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	8b5b      	ldrh	r3, [r3, #26]
 800fafe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800fb02:	b29a      	uxth	r2, r3
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	68db      	ldr	r3, [r3, #12]
 800fb0c:	685b      	ldr	r3, [r3, #4]
 800fb0e:	4618      	mov	r0, r3
 800fb10:	f7f9 fc4b 	bl	80093aa <lwip_htonl>
 800fb14:	4604      	mov	r4, r0
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	891b      	ldrh	r3, [r3, #8]
 800fb1a:	461d      	mov	r5, r3
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	68db      	ldr	r3, [r3, #12]
 800fb20:	899b      	ldrh	r3, [r3, #12]
 800fb22:	b29b      	uxth	r3, r3
 800fb24:	4618      	mov	r0, r3
 800fb26:	f7f9 fc2b 	bl	8009380 <lwip_htons>
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	b2db      	uxtb	r3, r3
 800fb2e:	f003 0303 	and.w	r3, r3, #3
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d001      	beq.n	800fb3a <tcp_rexmit_rto_prepare+0xba>
 800fb36:	2301      	movs	r3, #1
 800fb38:	e000      	b.n	800fb3c <tcp_rexmit_rto_prepare+0xbc>
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	442b      	add	r3, r5
 800fb3e:	18e2      	adds	r2, r4, r3
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2200      	movs	r2, #0
 800fb48:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800fb4a:	2300      	movs	r3, #0
}
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	3710      	adds	r7, #16
 800fb50:	46bd      	mov	sp, r7
 800fb52:	bdb0      	pop	{r4, r5, r7, pc}
 800fb54:	08017dfc 	.word	0x08017dfc
 800fb58:	08018438 	.word	0x08018438
 800fb5c:	08017e50 	.word	0x08017e50

0800fb60 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800fb60:	b580      	push	{r7, lr}
 800fb62:	b082      	sub	sp, #8
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d106      	bne.n	800fb7c <tcp_rexmit_rto_commit+0x1c>
 800fb6e:	4b0d      	ldr	r3, [pc, #52]	; (800fba4 <tcp_rexmit_rto_commit+0x44>)
 800fb70:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800fb74:	490c      	ldr	r1, [pc, #48]	; (800fba8 <tcp_rexmit_rto_commit+0x48>)
 800fb76:	480d      	ldr	r0, [pc, #52]	; (800fbac <tcp_rexmit_rto_commit+0x4c>)
 800fb78:	f005 fcf2 	bl	8015560 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fb82:	2bff      	cmp	r3, #255	; 0xff
 800fb84:	d007      	beq.n	800fb96 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fb8c:	3301      	adds	r3, #1
 800fb8e:	b2da      	uxtb	r2, r3
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800fb96:	6878      	ldr	r0, [r7, #4]
 800fb98:	f7ff fc80 	bl	800f49c <tcp_output>
}
 800fb9c:	bf00      	nop
 800fb9e:	3708      	adds	r7, #8
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd80      	pop	{r7, pc}
 800fba4:	08017dfc 	.word	0x08017dfc
 800fba8:	0801845c 	.word	0x0801845c
 800fbac:	08017e50 	.word	0x08017e50

0800fbb0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b082      	sub	sp, #8
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d106      	bne.n	800fbcc <tcp_rexmit_rto+0x1c>
 800fbbe:	4b0a      	ldr	r3, [pc, #40]	; (800fbe8 <tcp_rexmit_rto+0x38>)
 800fbc0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800fbc4:	4909      	ldr	r1, [pc, #36]	; (800fbec <tcp_rexmit_rto+0x3c>)
 800fbc6:	480a      	ldr	r0, [pc, #40]	; (800fbf0 <tcp_rexmit_rto+0x40>)
 800fbc8:	f005 fcca 	bl	8015560 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800fbcc:	6878      	ldr	r0, [r7, #4]
 800fbce:	f7ff ff57 	bl	800fa80 <tcp_rexmit_rto_prepare>
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d102      	bne.n	800fbde <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800fbd8:	6878      	ldr	r0, [r7, #4]
 800fbda:	f7ff ffc1 	bl	800fb60 <tcp_rexmit_rto_commit>
  }
}
 800fbde:	bf00      	nop
 800fbe0:	3708      	adds	r7, #8
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	bd80      	pop	{r7, pc}
 800fbe6:	bf00      	nop
 800fbe8:	08017dfc 	.word	0x08017dfc
 800fbec:	08018480 	.word	0x08018480
 800fbf0:	08017e50 	.word	0x08017e50

0800fbf4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800fbf4:	b590      	push	{r4, r7, lr}
 800fbf6:	b085      	sub	sp, #20
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d106      	bne.n	800fc10 <tcp_rexmit+0x1c>
 800fc02:	4b2f      	ldr	r3, [pc, #188]	; (800fcc0 <tcp_rexmit+0xcc>)
 800fc04:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800fc08:	492e      	ldr	r1, [pc, #184]	; (800fcc4 <tcp_rexmit+0xd0>)
 800fc0a:	482f      	ldr	r0, [pc, #188]	; (800fcc8 <tcp_rexmit+0xd4>)
 800fc0c:	f005 fca8 	bl	8015560 <iprintf>

  if (pcb->unacked == NULL) {
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d102      	bne.n	800fc1e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800fc18:	f06f 0305 	mvn.w	r3, #5
 800fc1c:	e04c      	b.n	800fcb8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc22:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800fc24:	68b8      	ldr	r0, [r7, #8]
 800fc26:	f7ff fe2d 	bl	800f884 <tcp_output_segment_busy>
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d002      	beq.n	800fc36 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800fc30:	f06f 0305 	mvn.w	r3, #5
 800fc34:	e040      	b.n	800fcb8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800fc36:	68bb      	ldr	r3, [r7, #8]
 800fc38:	681a      	ldr	r2, [r3, #0]
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	336c      	adds	r3, #108	; 0x6c
 800fc42:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800fc44:	e002      	b.n	800fc4c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d011      	beq.n	800fc78 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	68db      	ldr	r3, [r3, #12]
 800fc5a:	685b      	ldr	r3, [r3, #4]
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	f7f9 fba4 	bl	80093aa <lwip_htonl>
 800fc62:	4604      	mov	r4, r0
 800fc64:	68bb      	ldr	r3, [r7, #8]
 800fc66:	68db      	ldr	r3, [r3, #12]
 800fc68:	685b      	ldr	r3, [r3, #4]
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f7f9 fb9d 	bl	80093aa <lwip_htonl>
 800fc70:	4603      	mov	r3, r0
 800fc72:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	dbe6      	blt.n	800fc46 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	681a      	ldr	r2, [r3, #0]
 800fc7c:	68bb      	ldr	r3, [r7, #8]
 800fc7e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	68ba      	ldr	r2, [r7, #8]
 800fc84:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800fc86:	68bb      	ldr	r3, [r7, #8]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d103      	bne.n	800fc96 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	2200      	movs	r2, #0
 800fc92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fc9c:	2bff      	cmp	r3, #255	; 0xff
 800fc9e:	d007      	beq.n	800fcb0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fca6:	3301      	adds	r3, #1
 800fca8:	b2da      	uxtb	r2, r3
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800fcb6:	2300      	movs	r3, #0
}
 800fcb8:	4618      	mov	r0, r3
 800fcba:	3714      	adds	r7, #20
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	bd90      	pop	{r4, r7, pc}
 800fcc0:	08017dfc 	.word	0x08017dfc
 800fcc4:	0801849c 	.word	0x0801849c
 800fcc8:	08017e50 	.word	0x08017e50

0800fccc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b082      	sub	sp, #8
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d106      	bne.n	800fce8 <tcp_rexmit_fast+0x1c>
 800fcda:	4b2a      	ldr	r3, [pc, #168]	; (800fd84 <tcp_rexmit_fast+0xb8>)
 800fcdc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800fce0:	4929      	ldr	r1, [pc, #164]	; (800fd88 <tcp_rexmit_fast+0xbc>)
 800fce2:	482a      	ldr	r0, [pc, #168]	; (800fd8c <tcp_rexmit_fast+0xc0>)
 800fce4:	f005 fc3c 	bl	8015560 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d044      	beq.n	800fd7a <tcp_rexmit_fast+0xae>
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	8b5b      	ldrh	r3, [r3, #26]
 800fcf4:	f003 0304 	and.w	r3, r3, #4
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d13e      	bne.n	800fd7a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800fcfc:	6878      	ldr	r0, [r7, #4]
 800fcfe:	f7ff ff79 	bl	800fbf4 <tcp_rexmit>
 800fd02:	4603      	mov	r3, r0
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d138      	bne.n	800fd7a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fd14:	4293      	cmp	r3, r2
 800fd16:	bf28      	it	cs
 800fd18:	4613      	movcs	r3, r2
 800fd1a:	b29b      	uxth	r3, r3
 800fd1c:	0fda      	lsrs	r2, r3, #31
 800fd1e:	4413      	add	r3, r2
 800fd20:	105b      	asrs	r3, r3, #1
 800fd22:	b29a      	uxth	r2, r3
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800fd30:	461a      	mov	r2, r3
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fd36:	005b      	lsls	r3, r3, #1
 800fd38:	429a      	cmp	r2, r3
 800fd3a:	d206      	bcs.n	800fd4a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fd40:	005b      	lsls	r3, r3, #1
 800fd42:	b29a      	uxth	r2, r3
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fd54:	4619      	mov	r1, r3
 800fd56:	0049      	lsls	r1, r1, #1
 800fd58:	440b      	add	r3, r1
 800fd5a:	b29b      	uxth	r3, r3
 800fd5c:	4413      	add	r3, r2
 800fd5e:	b29a      	uxth	r2, r3
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	8b5b      	ldrh	r3, [r3, #26]
 800fd6a:	f043 0304 	orr.w	r3, r3, #4
 800fd6e:	b29a      	uxth	r2, r3
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	2200      	movs	r2, #0
 800fd78:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800fd7a:	bf00      	nop
 800fd7c:	3708      	adds	r7, #8
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	bd80      	pop	{r7, pc}
 800fd82:	bf00      	nop
 800fd84:	08017dfc 	.word	0x08017dfc
 800fd88:	080184b4 	.word	0x080184b4
 800fd8c:	08017e50 	.word	0x08017e50

0800fd90 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800fd90:	b580      	push	{r7, lr}
 800fd92:	b086      	sub	sp, #24
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	60f8      	str	r0, [r7, #12]
 800fd98:	607b      	str	r3, [r7, #4]
 800fd9a:	460b      	mov	r3, r1
 800fd9c:	817b      	strh	r3, [r7, #10]
 800fd9e:	4613      	mov	r3, r2
 800fda0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800fda2:	897a      	ldrh	r2, [r7, #10]
 800fda4:	893b      	ldrh	r3, [r7, #8]
 800fda6:	4413      	add	r3, r2
 800fda8:	b29b      	uxth	r3, r3
 800fdaa:	3314      	adds	r3, #20
 800fdac:	b29b      	uxth	r3, r3
 800fdae:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fdb2:	4619      	mov	r1, r3
 800fdb4:	2022      	movs	r0, #34	; 0x22
 800fdb6:	f7fa fbfd 	bl	800a5b4 <pbuf_alloc>
 800fdba:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800fdbc:	697b      	ldr	r3, [r7, #20]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d04d      	beq.n	800fe5e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800fdc2:	897b      	ldrh	r3, [r7, #10]
 800fdc4:	3313      	adds	r3, #19
 800fdc6:	697a      	ldr	r2, [r7, #20]
 800fdc8:	8952      	ldrh	r2, [r2, #10]
 800fdca:	4293      	cmp	r3, r2
 800fdcc:	db06      	blt.n	800fddc <tcp_output_alloc_header_common+0x4c>
 800fdce:	4b26      	ldr	r3, [pc, #152]	; (800fe68 <tcp_output_alloc_header_common+0xd8>)
 800fdd0:	f240 7223 	movw	r2, #1827	; 0x723
 800fdd4:	4925      	ldr	r1, [pc, #148]	; (800fe6c <tcp_output_alloc_header_common+0xdc>)
 800fdd6:	4826      	ldr	r0, [pc, #152]	; (800fe70 <tcp_output_alloc_header_common+0xe0>)
 800fdd8:	f005 fbc2 	bl	8015560 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800fddc:	697b      	ldr	r3, [r7, #20]
 800fdde:	685b      	ldr	r3, [r3, #4]
 800fde0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800fde2:	8c3b      	ldrh	r3, [r7, #32]
 800fde4:	4618      	mov	r0, r3
 800fde6:	f7f9 facb 	bl	8009380 <lwip_htons>
 800fdea:	4603      	mov	r3, r0
 800fdec:	461a      	mov	r2, r3
 800fdee:	693b      	ldr	r3, [r7, #16]
 800fdf0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800fdf2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	f7f9 fac3 	bl	8009380 <lwip_htons>
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	461a      	mov	r2, r3
 800fdfe:	693b      	ldr	r3, [r7, #16]
 800fe00:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800fe02:	693b      	ldr	r3, [r7, #16]
 800fe04:	687a      	ldr	r2, [r7, #4]
 800fe06:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800fe08:	68f8      	ldr	r0, [r7, #12]
 800fe0a:	f7f9 face 	bl	80093aa <lwip_htonl>
 800fe0e:	4602      	mov	r2, r0
 800fe10:	693b      	ldr	r3, [r7, #16]
 800fe12:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800fe14:	897b      	ldrh	r3, [r7, #10]
 800fe16:	089b      	lsrs	r3, r3, #2
 800fe18:	b29b      	uxth	r3, r3
 800fe1a:	3305      	adds	r3, #5
 800fe1c:	b29b      	uxth	r3, r3
 800fe1e:	031b      	lsls	r3, r3, #12
 800fe20:	b29a      	uxth	r2, r3
 800fe22:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fe26:	b29b      	uxth	r3, r3
 800fe28:	4313      	orrs	r3, r2
 800fe2a:	b29b      	uxth	r3, r3
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	f7f9 faa7 	bl	8009380 <lwip_htons>
 800fe32:	4603      	mov	r3, r0
 800fe34:	461a      	mov	r2, r3
 800fe36:	693b      	ldr	r3, [r7, #16]
 800fe38:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800fe3a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	f7f9 fa9f 	bl	8009380 <lwip_htons>
 800fe42:	4603      	mov	r3, r0
 800fe44:	461a      	mov	r2, r3
 800fe46:	693b      	ldr	r3, [r7, #16]
 800fe48:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800fe4a:	693b      	ldr	r3, [r7, #16]
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	741a      	strb	r2, [r3, #16]
 800fe50:	2200      	movs	r2, #0
 800fe52:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800fe54:	693b      	ldr	r3, [r7, #16]
 800fe56:	2200      	movs	r2, #0
 800fe58:	749a      	strb	r2, [r3, #18]
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800fe5e:	697b      	ldr	r3, [r7, #20]
}
 800fe60:	4618      	mov	r0, r3
 800fe62:	3718      	adds	r7, #24
 800fe64:	46bd      	mov	sp, r7
 800fe66:	bd80      	pop	{r7, pc}
 800fe68:	08017dfc 	.word	0x08017dfc
 800fe6c:	080184d4 	.word	0x080184d4
 800fe70:	08017e50 	.word	0x08017e50

0800fe74 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800fe74:	b5b0      	push	{r4, r5, r7, lr}
 800fe76:	b08a      	sub	sp, #40	; 0x28
 800fe78:	af04      	add	r7, sp, #16
 800fe7a:	60f8      	str	r0, [r7, #12]
 800fe7c:	607b      	str	r3, [r7, #4]
 800fe7e:	460b      	mov	r3, r1
 800fe80:	817b      	strh	r3, [r7, #10]
 800fe82:	4613      	mov	r3, r2
 800fe84:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d106      	bne.n	800fe9a <tcp_output_alloc_header+0x26>
 800fe8c:	4b15      	ldr	r3, [pc, #84]	; (800fee4 <tcp_output_alloc_header+0x70>)
 800fe8e:	f240 7242 	movw	r2, #1858	; 0x742
 800fe92:	4915      	ldr	r1, [pc, #84]	; (800fee8 <tcp_output_alloc_header+0x74>)
 800fe94:	4815      	ldr	r0, [pc, #84]	; (800feec <tcp_output_alloc_header+0x78>)
 800fe96:	f005 fb63 	bl	8015560 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	8adb      	ldrh	r3, [r3, #22]
 800fea2:	68fa      	ldr	r2, [r7, #12]
 800fea4:	8b12      	ldrh	r2, [r2, #24]
 800fea6:	68f9      	ldr	r1, [r7, #12]
 800fea8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800feaa:	893d      	ldrh	r5, [r7, #8]
 800feac:	897c      	ldrh	r4, [r7, #10]
 800feae:	9103      	str	r1, [sp, #12]
 800feb0:	2110      	movs	r1, #16
 800feb2:	9102      	str	r1, [sp, #8]
 800feb4:	9201      	str	r2, [sp, #4]
 800feb6:	9300      	str	r3, [sp, #0]
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	462a      	mov	r2, r5
 800febc:	4621      	mov	r1, r4
 800febe:	f7ff ff67 	bl	800fd90 <tcp_output_alloc_header_common>
 800fec2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800fec4:	697b      	ldr	r3, [r7, #20]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d006      	beq.n	800fed8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fece:	68fa      	ldr	r2, [r7, #12]
 800fed0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800fed2:	441a      	add	r2, r3
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800fed8:	697b      	ldr	r3, [r7, #20]
}
 800feda:	4618      	mov	r0, r3
 800fedc:	3718      	adds	r7, #24
 800fede:	46bd      	mov	sp, r7
 800fee0:	bdb0      	pop	{r4, r5, r7, pc}
 800fee2:	bf00      	nop
 800fee4:	08017dfc 	.word	0x08017dfc
 800fee8:	08018504 	.word	0x08018504
 800feec:	08017e50 	.word	0x08017e50

0800fef0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b088      	sub	sp, #32
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	60f8      	str	r0, [r7, #12]
 800fef8:	60b9      	str	r1, [r7, #8]
 800fefa:	4611      	mov	r1, r2
 800fefc:	461a      	mov	r2, r3
 800fefe:	460b      	mov	r3, r1
 800ff00:	71fb      	strb	r3, [r7, #7]
 800ff02:	4613      	mov	r3, r2
 800ff04:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800ff06:	2300      	movs	r3, #0
 800ff08:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800ff0a:	68bb      	ldr	r3, [r7, #8]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d106      	bne.n	800ff1e <tcp_output_fill_options+0x2e>
 800ff10:	4b13      	ldr	r3, [pc, #76]	; (800ff60 <tcp_output_fill_options+0x70>)
 800ff12:	f240 7256 	movw	r2, #1878	; 0x756
 800ff16:	4913      	ldr	r1, [pc, #76]	; (800ff64 <tcp_output_fill_options+0x74>)
 800ff18:	4813      	ldr	r0, [pc, #76]	; (800ff68 <tcp_output_fill_options+0x78>)
 800ff1a:	f005 fb21 	bl	8015560 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800ff1e:	68bb      	ldr	r3, [r7, #8]
 800ff20:	685b      	ldr	r3, [r3, #4]
 800ff22:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800ff24:	69bb      	ldr	r3, [r7, #24]
 800ff26:	3314      	adds	r3, #20
 800ff28:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800ff2a:	69bb      	ldr	r3, [r7, #24]
 800ff2c:	f103 0214 	add.w	r2, r3, #20
 800ff30:	8bfb      	ldrh	r3, [r7, #30]
 800ff32:	009b      	lsls	r3, r3, #2
 800ff34:	4619      	mov	r1, r3
 800ff36:	79fb      	ldrb	r3, [r7, #7]
 800ff38:	009b      	lsls	r3, r3, #2
 800ff3a:	f003 0304 	and.w	r3, r3, #4
 800ff3e:	440b      	add	r3, r1
 800ff40:	4413      	add	r3, r2
 800ff42:	697a      	ldr	r2, [r7, #20]
 800ff44:	429a      	cmp	r2, r3
 800ff46:	d006      	beq.n	800ff56 <tcp_output_fill_options+0x66>
 800ff48:	4b05      	ldr	r3, [pc, #20]	; (800ff60 <tcp_output_fill_options+0x70>)
 800ff4a:	f240 7275 	movw	r2, #1909	; 0x775
 800ff4e:	4907      	ldr	r1, [pc, #28]	; (800ff6c <tcp_output_fill_options+0x7c>)
 800ff50:	4805      	ldr	r0, [pc, #20]	; (800ff68 <tcp_output_fill_options+0x78>)
 800ff52:	f005 fb05 	bl	8015560 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800ff56:	bf00      	nop
 800ff58:	3720      	adds	r7, #32
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	bd80      	pop	{r7, pc}
 800ff5e:	bf00      	nop
 800ff60:	08017dfc 	.word	0x08017dfc
 800ff64:	0801852c 	.word	0x0801852c
 800ff68:	08017e50 	.word	0x08017e50
 800ff6c:	08018424 	.word	0x08018424

0800ff70 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b08a      	sub	sp, #40	; 0x28
 800ff74:	af04      	add	r7, sp, #16
 800ff76:	60f8      	str	r0, [r7, #12]
 800ff78:	60b9      	str	r1, [r7, #8]
 800ff7a:	607a      	str	r2, [r7, #4]
 800ff7c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800ff7e:	68bb      	ldr	r3, [r7, #8]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d106      	bne.n	800ff92 <tcp_output_control_segment+0x22>
 800ff84:	4b1c      	ldr	r3, [pc, #112]	; (800fff8 <tcp_output_control_segment+0x88>)
 800ff86:	f240 7287 	movw	r2, #1927	; 0x787
 800ff8a:	491c      	ldr	r1, [pc, #112]	; (800fffc <tcp_output_control_segment+0x8c>)
 800ff8c:	481c      	ldr	r0, [pc, #112]	; (8010000 <tcp_output_control_segment+0x90>)
 800ff8e:	f005 fae7 	bl	8015560 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800ff92:	683a      	ldr	r2, [r7, #0]
 800ff94:	6879      	ldr	r1, [r7, #4]
 800ff96:	68f8      	ldr	r0, [r7, #12]
 800ff98:	f7fe ff40 	bl	800ee1c <tcp_route>
 800ff9c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800ff9e:	693b      	ldr	r3, [r7, #16]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d102      	bne.n	800ffaa <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800ffa4:	23fc      	movs	r3, #252	; 0xfc
 800ffa6:	75fb      	strb	r3, [r7, #23]
 800ffa8:	e01c      	b.n	800ffe4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d006      	beq.n	800ffbe <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	7adb      	ldrb	r3, [r3, #11]
 800ffb4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	7a9b      	ldrb	r3, [r3, #10]
 800ffba:	757b      	strb	r3, [r7, #21]
 800ffbc:	e003      	b.n	800ffc6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800ffbe:	23ff      	movs	r3, #255	; 0xff
 800ffc0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800ffc6:	7dba      	ldrb	r2, [r7, #22]
 800ffc8:	693b      	ldr	r3, [r7, #16]
 800ffca:	9302      	str	r3, [sp, #8]
 800ffcc:	2306      	movs	r3, #6
 800ffce:	9301      	str	r3, [sp, #4]
 800ffd0:	7d7b      	ldrb	r3, [r7, #21]
 800ffd2:	9300      	str	r3, [sp, #0]
 800ffd4:	4613      	mov	r3, r2
 800ffd6:	683a      	ldr	r2, [r7, #0]
 800ffd8:	6879      	ldr	r1, [r7, #4]
 800ffda:	68b8      	ldr	r0, [r7, #8]
 800ffdc:	f004 f956 	bl	801428c <ip4_output_if>
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800ffe4:	68b8      	ldr	r0, [r7, #8]
 800ffe6:	f7fa fdc9 	bl	800ab7c <pbuf_free>
  return err;
 800ffea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ffee:	4618      	mov	r0, r3
 800fff0:	3718      	adds	r7, #24
 800fff2:	46bd      	mov	sp, r7
 800fff4:	bd80      	pop	{r7, pc}
 800fff6:	bf00      	nop
 800fff8:	08017dfc 	.word	0x08017dfc
 800fffc:	08018554 	.word	0x08018554
 8010000:	08017e50 	.word	0x08017e50

08010004 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8010004:	b590      	push	{r4, r7, lr}
 8010006:	b08b      	sub	sp, #44	; 0x2c
 8010008:	af04      	add	r7, sp, #16
 801000a:	60f8      	str	r0, [r7, #12]
 801000c:	60b9      	str	r1, [r7, #8]
 801000e:	607a      	str	r2, [r7, #4]
 8010010:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8010012:	683b      	ldr	r3, [r7, #0]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d106      	bne.n	8010026 <tcp_rst+0x22>
 8010018:	4b1f      	ldr	r3, [pc, #124]	; (8010098 <tcp_rst+0x94>)
 801001a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801001e:	491f      	ldr	r1, [pc, #124]	; (801009c <tcp_rst+0x98>)
 8010020:	481f      	ldr	r0, [pc, #124]	; (80100a0 <tcp_rst+0x9c>)
 8010022:	f005 fa9d 	bl	8015560 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8010026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010028:	2b00      	cmp	r3, #0
 801002a:	d106      	bne.n	801003a <tcp_rst+0x36>
 801002c:	4b1a      	ldr	r3, [pc, #104]	; (8010098 <tcp_rst+0x94>)
 801002e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8010032:	491c      	ldr	r1, [pc, #112]	; (80100a4 <tcp_rst+0xa0>)
 8010034:	481a      	ldr	r0, [pc, #104]	; (80100a0 <tcp_rst+0x9c>)
 8010036:	f005 fa93 	bl	8015560 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801003a:	2300      	movs	r3, #0
 801003c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801003e:	f246 0308 	movw	r3, #24584	; 0x6008
 8010042:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8010044:	7dfb      	ldrb	r3, [r7, #23]
 8010046:	b29c      	uxth	r4, r3
 8010048:	68b8      	ldr	r0, [r7, #8]
 801004a:	f7f9 f9ae 	bl	80093aa <lwip_htonl>
 801004e:	4602      	mov	r2, r0
 8010050:	8abb      	ldrh	r3, [r7, #20]
 8010052:	9303      	str	r3, [sp, #12]
 8010054:	2314      	movs	r3, #20
 8010056:	9302      	str	r3, [sp, #8]
 8010058:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801005a:	9301      	str	r3, [sp, #4]
 801005c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801005e:	9300      	str	r3, [sp, #0]
 8010060:	4613      	mov	r3, r2
 8010062:	2200      	movs	r2, #0
 8010064:	4621      	mov	r1, r4
 8010066:	6878      	ldr	r0, [r7, #4]
 8010068:	f7ff fe92 	bl	800fd90 <tcp_output_alloc_header_common>
 801006c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801006e:	693b      	ldr	r3, [r7, #16]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d00c      	beq.n	801008e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010074:	7dfb      	ldrb	r3, [r7, #23]
 8010076:	2200      	movs	r2, #0
 8010078:	6939      	ldr	r1, [r7, #16]
 801007a:	68f8      	ldr	r0, [r7, #12]
 801007c:	f7ff ff38 	bl	800fef0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010082:	683a      	ldr	r2, [r7, #0]
 8010084:	6939      	ldr	r1, [r7, #16]
 8010086:	68f8      	ldr	r0, [r7, #12]
 8010088:	f7ff ff72 	bl	800ff70 <tcp_output_control_segment>
 801008c:	e000      	b.n	8010090 <tcp_rst+0x8c>
    return;
 801008e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8010090:	371c      	adds	r7, #28
 8010092:	46bd      	mov	sp, r7
 8010094:	bd90      	pop	{r4, r7, pc}
 8010096:	bf00      	nop
 8010098:	08017dfc 	.word	0x08017dfc
 801009c:	08018580 	.word	0x08018580
 80100a0:	08017e50 	.word	0x08017e50
 80100a4:	0801859c 	.word	0x0801859c

080100a8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80100a8:	b590      	push	{r4, r7, lr}
 80100aa:	b087      	sub	sp, #28
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80100b0:	2300      	movs	r3, #0
 80100b2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80100b4:	2300      	movs	r3, #0
 80100b6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d106      	bne.n	80100cc <tcp_send_empty_ack+0x24>
 80100be:	4b28      	ldr	r3, [pc, #160]	; (8010160 <tcp_send_empty_ack+0xb8>)
 80100c0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80100c4:	4927      	ldr	r1, [pc, #156]	; (8010164 <tcp_send_empty_ack+0xbc>)
 80100c6:	4828      	ldr	r0, [pc, #160]	; (8010168 <tcp_send_empty_ack+0xc0>)
 80100c8:	f005 fa4a 	bl	8015560 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80100cc:	7dfb      	ldrb	r3, [r7, #23]
 80100ce:	009b      	lsls	r3, r3, #2
 80100d0:	b2db      	uxtb	r3, r3
 80100d2:	f003 0304 	and.w	r3, r3, #4
 80100d6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80100d8:	7d7b      	ldrb	r3, [r7, #21]
 80100da:	b29c      	uxth	r4, r3
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80100e0:	4618      	mov	r0, r3
 80100e2:	f7f9 f962 	bl	80093aa <lwip_htonl>
 80100e6:	4603      	mov	r3, r0
 80100e8:	2200      	movs	r2, #0
 80100ea:	4621      	mov	r1, r4
 80100ec:	6878      	ldr	r0, [r7, #4]
 80100ee:	f7ff fec1 	bl	800fe74 <tcp_output_alloc_header>
 80100f2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80100f4:	693b      	ldr	r3, [r7, #16]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d109      	bne.n	801010e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	8b5b      	ldrh	r3, [r3, #26]
 80100fe:	f043 0303 	orr.w	r3, r3, #3
 8010102:	b29a      	uxth	r2, r3
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8010108:	f06f 0301 	mvn.w	r3, #1
 801010c:	e023      	b.n	8010156 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801010e:	7dbb      	ldrb	r3, [r7, #22]
 8010110:	7dfa      	ldrb	r2, [r7, #23]
 8010112:	6939      	ldr	r1, [r7, #16]
 8010114:	6878      	ldr	r0, [r7, #4]
 8010116:	f7ff feeb 	bl	800fef0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801011a:	687a      	ldr	r2, [r7, #4]
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	3304      	adds	r3, #4
 8010120:	6939      	ldr	r1, [r7, #16]
 8010122:	6878      	ldr	r0, [r7, #4]
 8010124:	f7ff ff24 	bl	800ff70 <tcp_output_control_segment>
 8010128:	4603      	mov	r3, r0
 801012a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801012c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d007      	beq.n	8010144 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	8b5b      	ldrh	r3, [r3, #26]
 8010138:	f043 0303 	orr.w	r3, r3, #3
 801013c:	b29a      	uxth	r2, r3
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	835a      	strh	r2, [r3, #26]
 8010142:	e006      	b.n	8010152 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	8b5b      	ldrh	r3, [r3, #26]
 8010148:	f023 0303 	bic.w	r3, r3, #3
 801014c:	b29a      	uxth	r2, r3
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8010152:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010156:	4618      	mov	r0, r3
 8010158:	371c      	adds	r7, #28
 801015a:	46bd      	mov	sp, r7
 801015c:	bd90      	pop	{r4, r7, pc}
 801015e:	bf00      	nop
 8010160:	08017dfc 	.word	0x08017dfc
 8010164:	080185b8 	.word	0x080185b8
 8010168:	08017e50 	.word	0x08017e50

0801016c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801016c:	b590      	push	{r4, r7, lr}
 801016e:	b087      	sub	sp, #28
 8010170:	af00      	add	r7, sp, #0
 8010172:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010174:	2300      	movs	r3, #0
 8010176:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d106      	bne.n	801018c <tcp_keepalive+0x20>
 801017e:	4b18      	ldr	r3, [pc, #96]	; (80101e0 <tcp_keepalive+0x74>)
 8010180:	f640 0224 	movw	r2, #2084	; 0x824
 8010184:	4917      	ldr	r1, [pc, #92]	; (80101e4 <tcp_keepalive+0x78>)
 8010186:	4818      	ldr	r0, [pc, #96]	; (80101e8 <tcp_keepalive+0x7c>)
 8010188:	f005 f9ea 	bl	8015560 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801018c:	7dfb      	ldrb	r3, [r7, #23]
 801018e:	b29c      	uxth	r4, r3
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010194:	3b01      	subs	r3, #1
 8010196:	4618      	mov	r0, r3
 8010198:	f7f9 f907 	bl	80093aa <lwip_htonl>
 801019c:	4603      	mov	r3, r0
 801019e:	2200      	movs	r2, #0
 80101a0:	4621      	mov	r1, r4
 80101a2:	6878      	ldr	r0, [r7, #4]
 80101a4:	f7ff fe66 	bl	800fe74 <tcp_output_alloc_header>
 80101a8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80101aa:	693b      	ldr	r3, [r7, #16]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d102      	bne.n	80101b6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80101b0:	f04f 33ff 	mov.w	r3, #4294967295
 80101b4:	e010      	b.n	80101d8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80101b6:	7dfb      	ldrb	r3, [r7, #23]
 80101b8:	2200      	movs	r2, #0
 80101ba:	6939      	ldr	r1, [r7, #16]
 80101bc:	6878      	ldr	r0, [r7, #4]
 80101be:	f7ff fe97 	bl	800fef0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80101c2:	687a      	ldr	r2, [r7, #4]
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	3304      	adds	r3, #4
 80101c8:	6939      	ldr	r1, [r7, #16]
 80101ca:	6878      	ldr	r0, [r7, #4]
 80101cc:	f7ff fed0 	bl	800ff70 <tcp_output_control_segment>
 80101d0:	4603      	mov	r3, r0
 80101d2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80101d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80101d8:	4618      	mov	r0, r3
 80101da:	371c      	adds	r7, #28
 80101dc:	46bd      	mov	sp, r7
 80101de:	bd90      	pop	{r4, r7, pc}
 80101e0:	08017dfc 	.word	0x08017dfc
 80101e4:	080185d8 	.word	0x080185d8
 80101e8:	08017e50 	.word	0x08017e50

080101ec <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80101ec:	b590      	push	{r4, r7, lr}
 80101ee:	b08b      	sub	sp, #44	; 0x2c
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80101f4:	2300      	movs	r3, #0
 80101f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d106      	bne.n	801020e <tcp_zero_window_probe+0x22>
 8010200:	4b4c      	ldr	r3, [pc, #304]	; (8010334 <tcp_zero_window_probe+0x148>)
 8010202:	f640 024f 	movw	r2, #2127	; 0x84f
 8010206:	494c      	ldr	r1, [pc, #304]	; (8010338 <tcp_zero_window_probe+0x14c>)
 8010208:	484c      	ldr	r0, [pc, #304]	; (801033c <tcp_zero_window_probe+0x150>)
 801020a:	f005 f9a9 	bl	8015560 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010212:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8010214:	6a3b      	ldr	r3, [r7, #32]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d101      	bne.n	801021e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801021a:	2300      	movs	r3, #0
 801021c:	e086      	b.n	801032c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010224:	2bff      	cmp	r3, #255	; 0xff
 8010226:	d007      	beq.n	8010238 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801022e:	3301      	adds	r3, #1
 8010230:	b2da      	uxtb	r2, r3
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8010238:	6a3b      	ldr	r3, [r7, #32]
 801023a:	68db      	ldr	r3, [r3, #12]
 801023c:	899b      	ldrh	r3, [r3, #12]
 801023e:	b29b      	uxth	r3, r3
 8010240:	4618      	mov	r0, r3
 8010242:	f7f9 f89d 	bl	8009380 <lwip_htons>
 8010246:	4603      	mov	r3, r0
 8010248:	b2db      	uxtb	r3, r3
 801024a:	f003 0301 	and.w	r3, r3, #1
 801024e:	2b00      	cmp	r3, #0
 8010250:	d005      	beq.n	801025e <tcp_zero_window_probe+0x72>
 8010252:	6a3b      	ldr	r3, [r7, #32]
 8010254:	891b      	ldrh	r3, [r3, #8]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d101      	bne.n	801025e <tcp_zero_window_probe+0x72>
 801025a:	2301      	movs	r3, #1
 801025c:	e000      	b.n	8010260 <tcp_zero_window_probe+0x74>
 801025e:	2300      	movs	r3, #0
 8010260:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8010262:	7ffb      	ldrb	r3, [r7, #31]
 8010264:	2b00      	cmp	r3, #0
 8010266:	bf0c      	ite	eq
 8010268:	2301      	moveq	r3, #1
 801026a:	2300      	movne	r3, #0
 801026c:	b2db      	uxtb	r3, r3
 801026e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8010270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010274:	b299      	uxth	r1, r3
 8010276:	6a3b      	ldr	r3, [r7, #32]
 8010278:	68db      	ldr	r3, [r3, #12]
 801027a:	685b      	ldr	r3, [r3, #4]
 801027c:	8bba      	ldrh	r2, [r7, #28]
 801027e:	6878      	ldr	r0, [r7, #4]
 8010280:	f7ff fdf8 	bl	800fe74 <tcp_output_alloc_header>
 8010284:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8010286:	69bb      	ldr	r3, [r7, #24]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d102      	bne.n	8010292 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801028c:	f04f 33ff 	mov.w	r3, #4294967295
 8010290:	e04c      	b.n	801032c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8010292:	69bb      	ldr	r3, [r7, #24]
 8010294:	685b      	ldr	r3, [r3, #4]
 8010296:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8010298:	7ffb      	ldrb	r3, [r7, #31]
 801029a:	2b00      	cmp	r3, #0
 801029c:	d011      	beq.n	80102c2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801029e:	697b      	ldr	r3, [r7, #20]
 80102a0:	899b      	ldrh	r3, [r3, #12]
 80102a2:	b29b      	uxth	r3, r3
 80102a4:	b21b      	sxth	r3, r3
 80102a6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80102aa:	b21c      	sxth	r4, r3
 80102ac:	2011      	movs	r0, #17
 80102ae:	f7f9 f867 	bl	8009380 <lwip_htons>
 80102b2:	4603      	mov	r3, r0
 80102b4:	b21b      	sxth	r3, r3
 80102b6:	4323      	orrs	r3, r4
 80102b8:	b21b      	sxth	r3, r3
 80102ba:	b29a      	uxth	r2, r3
 80102bc:	697b      	ldr	r3, [r7, #20]
 80102be:	819a      	strh	r2, [r3, #12]
 80102c0:	e010      	b.n	80102e4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80102c2:	69bb      	ldr	r3, [r7, #24]
 80102c4:	685b      	ldr	r3, [r3, #4]
 80102c6:	3314      	adds	r3, #20
 80102c8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80102ca:	6a3b      	ldr	r3, [r7, #32]
 80102cc:	6858      	ldr	r0, [r3, #4]
 80102ce:	6a3b      	ldr	r3, [r7, #32]
 80102d0:	685b      	ldr	r3, [r3, #4]
 80102d2:	891a      	ldrh	r2, [r3, #8]
 80102d4:	6a3b      	ldr	r3, [r7, #32]
 80102d6:	891b      	ldrh	r3, [r3, #8]
 80102d8:	1ad3      	subs	r3, r2, r3
 80102da:	b29b      	uxth	r3, r3
 80102dc:	2201      	movs	r2, #1
 80102de:	6939      	ldr	r1, [r7, #16]
 80102e0:	f7fa fe52 	bl	800af88 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80102e4:	6a3b      	ldr	r3, [r7, #32]
 80102e6:	68db      	ldr	r3, [r3, #12]
 80102e8:	685b      	ldr	r3, [r3, #4]
 80102ea:	4618      	mov	r0, r3
 80102ec:	f7f9 f85d 	bl	80093aa <lwip_htonl>
 80102f0:	4603      	mov	r3, r0
 80102f2:	3301      	adds	r3, #1
 80102f4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	1ad3      	subs	r3, r2, r3
 80102fe:	2b00      	cmp	r3, #0
 8010300:	da02      	bge.n	8010308 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	68fa      	ldr	r2, [r7, #12]
 8010306:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010308:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801030c:	2200      	movs	r2, #0
 801030e:	69b9      	ldr	r1, [r7, #24]
 8010310:	6878      	ldr	r0, [r7, #4]
 8010312:	f7ff fded 	bl	800fef0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010316:	687a      	ldr	r2, [r7, #4]
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	3304      	adds	r3, #4
 801031c:	69b9      	ldr	r1, [r7, #24]
 801031e:	6878      	ldr	r0, [r7, #4]
 8010320:	f7ff fe26 	bl	800ff70 <tcp_output_control_segment>
 8010324:	4603      	mov	r3, r0
 8010326:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010328:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801032c:	4618      	mov	r0, r3
 801032e:	372c      	adds	r7, #44	; 0x2c
 8010330:	46bd      	mov	sp, r7
 8010332:	bd90      	pop	{r4, r7, pc}
 8010334:	08017dfc 	.word	0x08017dfc
 8010338:	080185f4 	.word	0x080185f4
 801033c:	08017e50 	.word	0x08017e50

08010340 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8010340:	b580      	push	{r7, lr}
 8010342:	b082      	sub	sp, #8
 8010344:	af00      	add	r7, sp, #0
 8010346:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8010348:	f7fa ff0c 	bl	800b164 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801034c:	4b0a      	ldr	r3, [pc, #40]	; (8010378 <tcpip_tcp_timer+0x38>)
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d103      	bne.n	801035c <tcpip_tcp_timer+0x1c>
 8010354:	4b09      	ldr	r3, [pc, #36]	; (801037c <tcpip_tcp_timer+0x3c>)
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d005      	beq.n	8010368 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801035c:	2200      	movs	r2, #0
 801035e:	4908      	ldr	r1, [pc, #32]	; (8010380 <tcpip_tcp_timer+0x40>)
 8010360:	20fa      	movs	r0, #250	; 0xfa
 8010362:	f000 f8f3 	bl	801054c <sys_timeout>
 8010366:	e003      	b.n	8010370 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8010368:	4b06      	ldr	r3, [pc, #24]	; (8010384 <tcpip_tcp_timer+0x44>)
 801036a:	2200      	movs	r2, #0
 801036c:	601a      	str	r2, [r3, #0]
  }
}
 801036e:	bf00      	nop
 8010370:	bf00      	nop
 8010372:	3708      	adds	r7, #8
 8010374:	46bd      	mov	sp, r7
 8010376:	bd80      	pop	{r7, pc}
 8010378:	2000d384 	.word	0x2000d384
 801037c:	2000d388 	.word	0x2000d388
 8010380:	08010341 	.word	0x08010341
 8010384:	2000d3d0 	.word	0x2000d3d0

08010388 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8010388:	b580      	push	{r7, lr}
 801038a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801038c:	4b0a      	ldr	r3, [pc, #40]	; (80103b8 <tcp_timer_needed+0x30>)
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d10f      	bne.n	80103b4 <tcp_timer_needed+0x2c>
 8010394:	4b09      	ldr	r3, [pc, #36]	; (80103bc <tcp_timer_needed+0x34>)
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	2b00      	cmp	r3, #0
 801039a:	d103      	bne.n	80103a4 <tcp_timer_needed+0x1c>
 801039c:	4b08      	ldr	r3, [pc, #32]	; (80103c0 <tcp_timer_needed+0x38>)
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d007      	beq.n	80103b4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80103a4:	4b04      	ldr	r3, [pc, #16]	; (80103b8 <tcp_timer_needed+0x30>)
 80103a6:	2201      	movs	r2, #1
 80103a8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80103aa:	2200      	movs	r2, #0
 80103ac:	4905      	ldr	r1, [pc, #20]	; (80103c4 <tcp_timer_needed+0x3c>)
 80103ae:	20fa      	movs	r0, #250	; 0xfa
 80103b0:	f000 f8cc 	bl	801054c <sys_timeout>
  }
}
 80103b4:	bf00      	nop
 80103b6:	bd80      	pop	{r7, pc}
 80103b8:	2000d3d0 	.word	0x2000d3d0
 80103bc:	2000d384 	.word	0x2000d384
 80103c0:	2000d388 	.word	0x2000d388
 80103c4:	08010341 	.word	0x08010341

080103c8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b086      	sub	sp, #24
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	60f8      	str	r0, [r7, #12]
 80103d0:	60b9      	str	r1, [r7, #8]
 80103d2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80103d4:	200a      	movs	r0, #10
 80103d6:	f7f9 fcab 	bl	8009d30 <memp_malloc>
 80103da:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80103dc:	693b      	ldr	r3, [r7, #16]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d109      	bne.n	80103f6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80103e2:	693b      	ldr	r3, [r7, #16]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d151      	bne.n	801048c <sys_timeout_abs+0xc4>
 80103e8:	4b2a      	ldr	r3, [pc, #168]	; (8010494 <sys_timeout_abs+0xcc>)
 80103ea:	22be      	movs	r2, #190	; 0xbe
 80103ec:	492a      	ldr	r1, [pc, #168]	; (8010498 <sys_timeout_abs+0xd0>)
 80103ee:	482b      	ldr	r0, [pc, #172]	; (801049c <sys_timeout_abs+0xd4>)
 80103f0:	f005 f8b6 	bl	8015560 <iprintf>
    return;
 80103f4:	e04a      	b.n	801048c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80103f6:	693b      	ldr	r3, [r7, #16]
 80103f8:	2200      	movs	r2, #0
 80103fa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80103fc:	693b      	ldr	r3, [r7, #16]
 80103fe:	68ba      	ldr	r2, [r7, #8]
 8010400:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8010402:	693b      	ldr	r3, [r7, #16]
 8010404:	687a      	ldr	r2, [r7, #4]
 8010406:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8010408:	693b      	ldr	r3, [r7, #16]
 801040a:	68fa      	ldr	r2, [r7, #12]
 801040c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801040e:	4b24      	ldr	r3, [pc, #144]	; (80104a0 <sys_timeout_abs+0xd8>)
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d103      	bne.n	801041e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8010416:	4a22      	ldr	r2, [pc, #136]	; (80104a0 <sys_timeout_abs+0xd8>)
 8010418:	693b      	ldr	r3, [r7, #16]
 801041a:	6013      	str	r3, [r2, #0]
    return;
 801041c:	e037      	b.n	801048e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801041e:	693b      	ldr	r3, [r7, #16]
 8010420:	685a      	ldr	r2, [r3, #4]
 8010422:	4b1f      	ldr	r3, [pc, #124]	; (80104a0 <sys_timeout_abs+0xd8>)
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	685b      	ldr	r3, [r3, #4]
 8010428:	1ad3      	subs	r3, r2, r3
 801042a:	0fdb      	lsrs	r3, r3, #31
 801042c:	f003 0301 	and.w	r3, r3, #1
 8010430:	b2db      	uxtb	r3, r3
 8010432:	2b00      	cmp	r3, #0
 8010434:	d007      	beq.n	8010446 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8010436:	4b1a      	ldr	r3, [pc, #104]	; (80104a0 <sys_timeout_abs+0xd8>)
 8010438:	681a      	ldr	r2, [r3, #0]
 801043a:	693b      	ldr	r3, [r7, #16]
 801043c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801043e:	4a18      	ldr	r2, [pc, #96]	; (80104a0 <sys_timeout_abs+0xd8>)
 8010440:	693b      	ldr	r3, [r7, #16]
 8010442:	6013      	str	r3, [r2, #0]
 8010444:	e023      	b.n	801048e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8010446:	4b16      	ldr	r3, [pc, #88]	; (80104a0 <sys_timeout_abs+0xd8>)
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	617b      	str	r3, [r7, #20]
 801044c:	e01a      	b.n	8010484 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801044e:	697b      	ldr	r3, [r7, #20]
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	2b00      	cmp	r3, #0
 8010454:	d00b      	beq.n	801046e <sys_timeout_abs+0xa6>
 8010456:	693b      	ldr	r3, [r7, #16]
 8010458:	685a      	ldr	r2, [r3, #4]
 801045a:	697b      	ldr	r3, [r7, #20]
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	685b      	ldr	r3, [r3, #4]
 8010460:	1ad3      	subs	r3, r2, r3
 8010462:	0fdb      	lsrs	r3, r3, #31
 8010464:	f003 0301 	and.w	r3, r3, #1
 8010468:	b2db      	uxtb	r3, r3
 801046a:	2b00      	cmp	r3, #0
 801046c:	d007      	beq.n	801047e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801046e:	697b      	ldr	r3, [r7, #20]
 8010470:	681a      	ldr	r2, [r3, #0]
 8010472:	693b      	ldr	r3, [r7, #16]
 8010474:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8010476:	697b      	ldr	r3, [r7, #20]
 8010478:	693a      	ldr	r2, [r7, #16]
 801047a:	601a      	str	r2, [r3, #0]
        break;
 801047c:	e007      	b.n	801048e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801047e:	697b      	ldr	r3, [r7, #20]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	617b      	str	r3, [r7, #20]
 8010484:	697b      	ldr	r3, [r7, #20]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d1e1      	bne.n	801044e <sys_timeout_abs+0x86>
 801048a:	e000      	b.n	801048e <sys_timeout_abs+0xc6>
    return;
 801048c:	bf00      	nop
      }
    }
  }
}
 801048e:	3718      	adds	r7, #24
 8010490:	46bd      	mov	sp, r7
 8010492:	bd80      	pop	{r7, pc}
 8010494:	08018618 	.word	0x08018618
 8010498:	0801864c 	.word	0x0801864c
 801049c:	0801868c 	.word	0x0801868c
 80104a0:	2000d3c8 	.word	0x2000d3c8

080104a4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b086      	sub	sp, #24
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80104b0:	697b      	ldr	r3, [r7, #20]
 80104b2:	685b      	ldr	r3, [r3, #4]
 80104b4:	4798      	blx	r3

  now = sys_now();
 80104b6:	f7f4 fda5 	bl	8005004 <sys_now>
 80104ba:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80104bc:	697b      	ldr	r3, [r7, #20]
 80104be:	681a      	ldr	r2, [r3, #0]
 80104c0:	4b0f      	ldr	r3, [pc, #60]	; (8010500 <lwip_cyclic_timer+0x5c>)
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	4413      	add	r3, r2
 80104c6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80104c8:	68fa      	ldr	r2, [r7, #12]
 80104ca:	693b      	ldr	r3, [r7, #16]
 80104cc:	1ad3      	subs	r3, r2, r3
 80104ce:	0fdb      	lsrs	r3, r3, #31
 80104d0:	f003 0301 	and.w	r3, r3, #1
 80104d4:	b2db      	uxtb	r3, r3
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d009      	beq.n	80104ee <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80104da:	697b      	ldr	r3, [r7, #20]
 80104dc:	681a      	ldr	r2, [r3, #0]
 80104de:	693b      	ldr	r3, [r7, #16]
 80104e0:	4413      	add	r3, r2
 80104e2:	687a      	ldr	r2, [r7, #4]
 80104e4:	4907      	ldr	r1, [pc, #28]	; (8010504 <lwip_cyclic_timer+0x60>)
 80104e6:	4618      	mov	r0, r3
 80104e8:	f7ff ff6e 	bl	80103c8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80104ec:	e004      	b.n	80104f8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80104ee:	687a      	ldr	r2, [r7, #4]
 80104f0:	4904      	ldr	r1, [pc, #16]	; (8010504 <lwip_cyclic_timer+0x60>)
 80104f2:	68f8      	ldr	r0, [r7, #12]
 80104f4:	f7ff ff68 	bl	80103c8 <sys_timeout_abs>
}
 80104f8:	bf00      	nop
 80104fa:	3718      	adds	r7, #24
 80104fc:	46bd      	mov	sp, r7
 80104fe:	bd80      	pop	{r7, pc}
 8010500:	2000d3cc 	.word	0x2000d3cc
 8010504:	080104a5 	.word	0x080104a5

08010508 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b082      	sub	sp, #8
 801050c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801050e:	2301      	movs	r3, #1
 8010510:	607b      	str	r3, [r7, #4]
 8010512:	e00e      	b.n	8010532 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8010514:	4a0b      	ldr	r2, [pc, #44]	; (8010544 <sys_timeouts_init+0x3c>)
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	00db      	lsls	r3, r3, #3
 8010520:	4a08      	ldr	r2, [pc, #32]	; (8010544 <sys_timeouts_init+0x3c>)
 8010522:	4413      	add	r3, r2
 8010524:	461a      	mov	r2, r3
 8010526:	4908      	ldr	r1, [pc, #32]	; (8010548 <sys_timeouts_init+0x40>)
 8010528:	f000 f810 	bl	801054c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	3301      	adds	r3, #1
 8010530:	607b      	str	r3, [r7, #4]
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	2b04      	cmp	r3, #4
 8010536:	d9ed      	bls.n	8010514 <sys_timeouts_init+0xc>
  }
}
 8010538:	bf00      	nop
 801053a:	bf00      	nop
 801053c:	3708      	adds	r7, #8
 801053e:	46bd      	mov	sp, r7
 8010540:	bd80      	pop	{r7, pc}
 8010542:	bf00      	nop
 8010544:	08019608 	.word	0x08019608
 8010548:	080104a5 	.word	0x080104a5

0801054c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801054c:	b580      	push	{r7, lr}
 801054e:	b086      	sub	sp, #24
 8010550:	af00      	add	r7, sp, #0
 8010552:	60f8      	str	r0, [r7, #12]
 8010554:	60b9      	str	r1, [r7, #8]
 8010556:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801055e:	d306      	bcc.n	801056e <sys_timeout+0x22>
 8010560:	4b0a      	ldr	r3, [pc, #40]	; (801058c <sys_timeout+0x40>)
 8010562:	f240 1229 	movw	r2, #297	; 0x129
 8010566:	490a      	ldr	r1, [pc, #40]	; (8010590 <sys_timeout+0x44>)
 8010568:	480a      	ldr	r0, [pc, #40]	; (8010594 <sys_timeout+0x48>)
 801056a:	f004 fff9 	bl	8015560 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801056e:	f7f4 fd49 	bl	8005004 <sys_now>
 8010572:	4602      	mov	r2, r0
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	4413      	add	r3, r2
 8010578:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801057a:	687a      	ldr	r2, [r7, #4]
 801057c:	68b9      	ldr	r1, [r7, #8]
 801057e:	6978      	ldr	r0, [r7, #20]
 8010580:	f7ff ff22 	bl	80103c8 <sys_timeout_abs>
#endif
}
 8010584:	bf00      	nop
 8010586:	3718      	adds	r7, #24
 8010588:	46bd      	mov	sp, r7
 801058a:	bd80      	pop	{r7, pc}
 801058c:	08018618 	.word	0x08018618
 8010590:	080186b4 	.word	0x080186b4
 8010594:	0801868c 	.word	0x0801868c

08010598 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b084      	sub	sp, #16
 801059c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801059e:	f7f4 fd31 	bl	8005004 <sys_now>
 80105a2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80105a4:	4b17      	ldr	r3, [pc, #92]	; (8010604 <sys_check_timeouts+0x6c>)
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80105aa:	68bb      	ldr	r3, [r7, #8]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d022      	beq.n	80105f6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80105b0:	68bb      	ldr	r3, [r7, #8]
 80105b2:	685b      	ldr	r3, [r3, #4]
 80105b4:	68fa      	ldr	r2, [r7, #12]
 80105b6:	1ad3      	subs	r3, r2, r3
 80105b8:	0fdb      	lsrs	r3, r3, #31
 80105ba:	f003 0301 	and.w	r3, r3, #1
 80105be:	b2db      	uxtb	r3, r3
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d11a      	bne.n	80105fa <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80105c4:	68bb      	ldr	r3, [r7, #8]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	4a0e      	ldr	r2, [pc, #56]	; (8010604 <sys_check_timeouts+0x6c>)
 80105ca:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80105cc:	68bb      	ldr	r3, [r7, #8]
 80105ce:	689b      	ldr	r3, [r3, #8]
 80105d0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80105d2:	68bb      	ldr	r3, [r7, #8]
 80105d4:	68db      	ldr	r3, [r3, #12]
 80105d6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80105d8:	68bb      	ldr	r3, [r7, #8]
 80105da:	685b      	ldr	r3, [r3, #4]
 80105dc:	4a0a      	ldr	r2, [pc, #40]	; (8010608 <sys_check_timeouts+0x70>)
 80105de:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80105e0:	68b9      	ldr	r1, [r7, #8]
 80105e2:	200a      	movs	r0, #10
 80105e4:	f7f9 fc1a 	bl	8009e1c <memp_free>
    if (handler != NULL) {
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d0da      	beq.n	80105a4 <sys_check_timeouts+0xc>
      handler(arg);
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	6838      	ldr	r0, [r7, #0]
 80105f2:	4798      	blx	r3
  do {
 80105f4:	e7d6      	b.n	80105a4 <sys_check_timeouts+0xc>
      return;
 80105f6:	bf00      	nop
 80105f8:	e000      	b.n	80105fc <sys_check_timeouts+0x64>
      return;
 80105fa:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80105fc:	3710      	adds	r7, #16
 80105fe:	46bd      	mov	sp, r7
 8010600:	bd80      	pop	{r7, pc}
 8010602:	bf00      	nop
 8010604:	2000d3c8 	.word	0x2000d3c8
 8010608:	2000d3cc 	.word	0x2000d3cc

0801060c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b082      	sub	sp, #8
 8010610:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8010612:	4b16      	ldr	r3, [pc, #88]	; (801066c <sys_timeouts_sleeptime+0x60>)
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d102      	bne.n	8010620 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801061a:	f04f 33ff 	mov.w	r3, #4294967295
 801061e:	e020      	b.n	8010662 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8010620:	f7f4 fcf0 	bl	8005004 <sys_now>
 8010624:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8010626:	4b11      	ldr	r3, [pc, #68]	; (801066c <sys_timeouts_sleeptime+0x60>)
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	685a      	ldr	r2, [r3, #4]
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	1ad3      	subs	r3, r2, r3
 8010630:	0fdb      	lsrs	r3, r3, #31
 8010632:	f003 0301 	and.w	r3, r3, #1
 8010636:	b2db      	uxtb	r3, r3
 8010638:	2b00      	cmp	r3, #0
 801063a:	d001      	beq.n	8010640 <sys_timeouts_sleeptime+0x34>
    return 0;
 801063c:	2300      	movs	r3, #0
 801063e:	e010      	b.n	8010662 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8010640:	4b0a      	ldr	r3, [pc, #40]	; (801066c <sys_timeouts_sleeptime+0x60>)
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	685a      	ldr	r2, [r3, #4]
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	1ad3      	subs	r3, r2, r3
 801064a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801064c:	683b      	ldr	r3, [r7, #0]
 801064e:	2b00      	cmp	r3, #0
 8010650:	da06      	bge.n	8010660 <sys_timeouts_sleeptime+0x54>
 8010652:	4b07      	ldr	r3, [pc, #28]	; (8010670 <sys_timeouts_sleeptime+0x64>)
 8010654:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8010658:	4906      	ldr	r1, [pc, #24]	; (8010674 <sys_timeouts_sleeptime+0x68>)
 801065a:	4807      	ldr	r0, [pc, #28]	; (8010678 <sys_timeouts_sleeptime+0x6c>)
 801065c:	f004 ff80 	bl	8015560 <iprintf>
    return ret;
 8010660:	683b      	ldr	r3, [r7, #0]
  }
}
 8010662:	4618      	mov	r0, r3
 8010664:	3708      	adds	r7, #8
 8010666:	46bd      	mov	sp, r7
 8010668:	bd80      	pop	{r7, pc}
 801066a:	bf00      	nop
 801066c:	2000d3c8 	.word	0x2000d3c8
 8010670:	08018618 	.word	0x08018618
 8010674:	080186ec 	.word	0x080186ec
 8010678:	0801868c 	.word	0x0801868c

0801067c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801067c:	b580      	push	{r7, lr}
 801067e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010680:	f004 ff86 	bl	8015590 <rand>
 8010684:	4603      	mov	r3, r0
 8010686:	b29b      	uxth	r3, r3
 8010688:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801068c:	b29b      	uxth	r3, r3
 801068e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8010692:	b29a      	uxth	r2, r3
 8010694:	4b01      	ldr	r3, [pc, #4]	; (801069c <udp_init+0x20>)
 8010696:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010698:	bf00      	nop
 801069a:	bd80      	pop	{r7, pc}
 801069c:	2000002c 	.word	0x2000002c

080106a0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80106a0:	b480      	push	{r7}
 80106a2:	b083      	sub	sp, #12
 80106a4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80106a6:	2300      	movs	r3, #0
 80106a8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80106aa:	4b17      	ldr	r3, [pc, #92]	; (8010708 <udp_new_port+0x68>)
 80106ac:	881b      	ldrh	r3, [r3, #0]
 80106ae:	1c5a      	adds	r2, r3, #1
 80106b0:	b291      	uxth	r1, r2
 80106b2:	4a15      	ldr	r2, [pc, #84]	; (8010708 <udp_new_port+0x68>)
 80106b4:	8011      	strh	r1, [r2, #0]
 80106b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80106ba:	4293      	cmp	r3, r2
 80106bc:	d103      	bne.n	80106c6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80106be:	4b12      	ldr	r3, [pc, #72]	; (8010708 <udp_new_port+0x68>)
 80106c0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80106c4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80106c6:	4b11      	ldr	r3, [pc, #68]	; (801070c <udp_new_port+0x6c>)
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	603b      	str	r3, [r7, #0]
 80106cc:	e011      	b.n	80106f2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80106ce:	683b      	ldr	r3, [r7, #0]
 80106d0:	8a5a      	ldrh	r2, [r3, #18]
 80106d2:	4b0d      	ldr	r3, [pc, #52]	; (8010708 <udp_new_port+0x68>)
 80106d4:	881b      	ldrh	r3, [r3, #0]
 80106d6:	429a      	cmp	r2, r3
 80106d8:	d108      	bne.n	80106ec <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80106da:	88fb      	ldrh	r3, [r7, #6]
 80106dc:	3301      	adds	r3, #1
 80106de:	80fb      	strh	r3, [r7, #6]
 80106e0:	88fb      	ldrh	r3, [r7, #6]
 80106e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80106e6:	d3e0      	bcc.n	80106aa <udp_new_port+0xa>
        return 0;
 80106e8:	2300      	movs	r3, #0
 80106ea:	e007      	b.n	80106fc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80106ec:	683b      	ldr	r3, [r7, #0]
 80106ee:	68db      	ldr	r3, [r3, #12]
 80106f0:	603b      	str	r3, [r7, #0]
 80106f2:	683b      	ldr	r3, [r7, #0]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d1ea      	bne.n	80106ce <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80106f8:	4b03      	ldr	r3, [pc, #12]	; (8010708 <udp_new_port+0x68>)
 80106fa:	881b      	ldrh	r3, [r3, #0]
}
 80106fc:	4618      	mov	r0, r3
 80106fe:	370c      	adds	r7, #12
 8010700:	46bd      	mov	sp, r7
 8010702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010706:	4770      	bx	lr
 8010708:	2000002c 	.word	0x2000002c
 801070c:	2000d3d4 	.word	0x2000d3d4

08010710 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b084      	sub	sp, #16
 8010714:	af00      	add	r7, sp, #0
 8010716:	60f8      	str	r0, [r7, #12]
 8010718:	60b9      	str	r1, [r7, #8]
 801071a:	4613      	mov	r3, r2
 801071c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d105      	bne.n	8010730 <udp_input_local_match+0x20>
 8010724:	4b27      	ldr	r3, [pc, #156]	; (80107c4 <udp_input_local_match+0xb4>)
 8010726:	2287      	movs	r2, #135	; 0x87
 8010728:	4927      	ldr	r1, [pc, #156]	; (80107c8 <udp_input_local_match+0xb8>)
 801072a:	4828      	ldr	r0, [pc, #160]	; (80107cc <udp_input_local_match+0xbc>)
 801072c:	f004 ff18 	bl	8015560 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8010730:	68bb      	ldr	r3, [r7, #8]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d105      	bne.n	8010742 <udp_input_local_match+0x32>
 8010736:	4b23      	ldr	r3, [pc, #140]	; (80107c4 <udp_input_local_match+0xb4>)
 8010738:	2288      	movs	r2, #136	; 0x88
 801073a:	4925      	ldr	r1, [pc, #148]	; (80107d0 <udp_input_local_match+0xc0>)
 801073c:	4823      	ldr	r0, [pc, #140]	; (80107cc <udp_input_local_match+0xbc>)
 801073e:	f004 ff0f 	bl	8015560 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	7a1b      	ldrb	r3, [r3, #8]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d00b      	beq.n	8010762 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	7a1a      	ldrb	r2, [r3, #8]
 801074e:	4b21      	ldr	r3, [pc, #132]	; (80107d4 <udp_input_local_match+0xc4>)
 8010750:	685b      	ldr	r3, [r3, #4]
 8010752:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010756:	3301      	adds	r3, #1
 8010758:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801075a:	429a      	cmp	r2, r3
 801075c:	d001      	beq.n	8010762 <udp_input_local_match+0x52>
    return 0;
 801075e:	2300      	movs	r3, #0
 8010760:	e02b      	b.n	80107ba <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8010762:	79fb      	ldrb	r3, [r7, #7]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d018      	beq.n	801079a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d013      	beq.n	8010796 <udp_input_local_match+0x86>
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d00f      	beq.n	8010796 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010776:	4b17      	ldr	r3, [pc, #92]	; (80107d4 <udp_input_local_match+0xc4>)
 8010778:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801077a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801077e:	d00a      	beq.n	8010796 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	681a      	ldr	r2, [r3, #0]
 8010784:	4b13      	ldr	r3, [pc, #76]	; (80107d4 <udp_input_local_match+0xc4>)
 8010786:	695b      	ldr	r3, [r3, #20]
 8010788:	405a      	eors	r2, r3
 801078a:	68bb      	ldr	r3, [r7, #8]
 801078c:	3308      	adds	r3, #8
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010792:	2b00      	cmp	r3, #0
 8010794:	d110      	bne.n	80107b8 <udp_input_local_match+0xa8>
          return 1;
 8010796:	2301      	movs	r3, #1
 8010798:	e00f      	b.n	80107ba <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d009      	beq.n	80107b4 <udp_input_local_match+0xa4>
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d005      	beq.n	80107b4 <udp_input_local_match+0xa4>
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	681a      	ldr	r2, [r3, #0]
 80107ac:	4b09      	ldr	r3, [pc, #36]	; (80107d4 <udp_input_local_match+0xc4>)
 80107ae:	695b      	ldr	r3, [r3, #20]
 80107b0:	429a      	cmp	r2, r3
 80107b2:	d101      	bne.n	80107b8 <udp_input_local_match+0xa8>
        return 1;
 80107b4:	2301      	movs	r3, #1
 80107b6:	e000      	b.n	80107ba <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80107b8:	2300      	movs	r3, #0
}
 80107ba:	4618      	mov	r0, r3
 80107bc:	3710      	adds	r7, #16
 80107be:	46bd      	mov	sp, r7
 80107c0:	bd80      	pop	{r7, pc}
 80107c2:	bf00      	nop
 80107c4:	08018700 	.word	0x08018700
 80107c8:	08018730 	.word	0x08018730
 80107cc:	08018754 	.word	0x08018754
 80107d0:	0801877c 	.word	0x0801877c
 80107d4:	20009c04 	.word	0x20009c04

080107d8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80107d8:	b590      	push	{r4, r7, lr}
 80107da:	b08d      	sub	sp, #52	; 0x34
 80107dc:	af02      	add	r7, sp, #8
 80107de:	6078      	str	r0, [r7, #4]
 80107e0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80107e2:	2300      	movs	r3, #0
 80107e4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d105      	bne.n	80107f8 <udp_input+0x20>
 80107ec:	4b7c      	ldr	r3, [pc, #496]	; (80109e0 <udp_input+0x208>)
 80107ee:	22cf      	movs	r2, #207	; 0xcf
 80107f0:	497c      	ldr	r1, [pc, #496]	; (80109e4 <udp_input+0x20c>)
 80107f2:	487d      	ldr	r0, [pc, #500]	; (80109e8 <udp_input+0x210>)
 80107f4:	f004 feb4 	bl	8015560 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80107f8:	683b      	ldr	r3, [r7, #0]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d105      	bne.n	801080a <udp_input+0x32>
 80107fe:	4b78      	ldr	r3, [pc, #480]	; (80109e0 <udp_input+0x208>)
 8010800:	22d0      	movs	r2, #208	; 0xd0
 8010802:	497a      	ldr	r1, [pc, #488]	; (80109ec <udp_input+0x214>)
 8010804:	4878      	ldr	r0, [pc, #480]	; (80109e8 <udp_input+0x210>)
 8010806:	f004 feab 	bl	8015560 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	895b      	ldrh	r3, [r3, #10]
 801080e:	2b07      	cmp	r3, #7
 8010810:	d803      	bhi.n	801081a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8010812:	6878      	ldr	r0, [r7, #4]
 8010814:	f7fa f9b2 	bl	800ab7c <pbuf_free>
    goto end;
 8010818:	e0de      	b.n	80109d8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	685b      	ldr	r3, [r3, #4]
 801081e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010820:	4b73      	ldr	r3, [pc, #460]	; (80109f0 <udp_input+0x218>)
 8010822:	695b      	ldr	r3, [r3, #20]
 8010824:	4a72      	ldr	r2, [pc, #456]	; (80109f0 <udp_input+0x218>)
 8010826:	6812      	ldr	r2, [r2, #0]
 8010828:	4611      	mov	r1, r2
 801082a:	4618      	mov	r0, r3
 801082c:	f003 fe06 	bl	801443c <ip4_addr_isbroadcast_u32>
 8010830:	4603      	mov	r3, r0
 8010832:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8010834:	697b      	ldr	r3, [r7, #20]
 8010836:	881b      	ldrh	r3, [r3, #0]
 8010838:	b29b      	uxth	r3, r3
 801083a:	4618      	mov	r0, r3
 801083c:	f7f8 fda0 	bl	8009380 <lwip_htons>
 8010840:	4603      	mov	r3, r0
 8010842:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8010844:	697b      	ldr	r3, [r7, #20]
 8010846:	885b      	ldrh	r3, [r3, #2]
 8010848:	b29b      	uxth	r3, r3
 801084a:	4618      	mov	r0, r3
 801084c:	f7f8 fd98 	bl	8009380 <lwip_htons>
 8010850:	4603      	mov	r3, r0
 8010852:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8010854:	2300      	movs	r3, #0
 8010856:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8010858:	2300      	movs	r3, #0
 801085a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801085c:	2300      	movs	r3, #0
 801085e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010860:	4b64      	ldr	r3, [pc, #400]	; (80109f4 <udp_input+0x21c>)
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	627b      	str	r3, [r7, #36]	; 0x24
 8010866:	e054      	b.n	8010912 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8010868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801086a:	8a5b      	ldrh	r3, [r3, #18]
 801086c:	89fa      	ldrh	r2, [r7, #14]
 801086e:	429a      	cmp	r2, r3
 8010870:	d14a      	bne.n	8010908 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8010872:	7cfb      	ldrb	r3, [r7, #19]
 8010874:	461a      	mov	r2, r3
 8010876:	6839      	ldr	r1, [r7, #0]
 8010878:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801087a:	f7ff ff49 	bl	8010710 <udp_input_local_match>
 801087e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8010880:	2b00      	cmp	r3, #0
 8010882:	d041      	beq.n	8010908 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8010884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010886:	7c1b      	ldrb	r3, [r3, #16]
 8010888:	f003 0304 	and.w	r3, r3, #4
 801088c:	2b00      	cmp	r3, #0
 801088e:	d11d      	bne.n	80108cc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8010890:	69fb      	ldr	r3, [r7, #28]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d102      	bne.n	801089c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8010896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010898:	61fb      	str	r3, [r7, #28]
 801089a:	e017      	b.n	80108cc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801089c:	7cfb      	ldrb	r3, [r7, #19]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d014      	beq.n	80108cc <udp_input+0xf4>
 80108a2:	4b53      	ldr	r3, [pc, #332]	; (80109f0 <udp_input+0x218>)
 80108a4:	695b      	ldr	r3, [r3, #20]
 80108a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108aa:	d10f      	bne.n	80108cc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80108ac:	69fb      	ldr	r3, [r7, #28]
 80108ae:	681a      	ldr	r2, [r3, #0]
 80108b0:	683b      	ldr	r3, [r7, #0]
 80108b2:	3304      	adds	r3, #4
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	429a      	cmp	r2, r3
 80108b8:	d008      	beq.n	80108cc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80108ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108bc:	681a      	ldr	r2, [r3, #0]
 80108be:	683b      	ldr	r3, [r7, #0]
 80108c0:	3304      	adds	r3, #4
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	429a      	cmp	r2, r3
 80108c6:	d101      	bne.n	80108cc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80108c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ca:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80108cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ce:	8a9b      	ldrh	r3, [r3, #20]
 80108d0:	8a3a      	ldrh	r2, [r7, #16]
 80108d2:	429a      	cmp	r2, r3
 80108d4:	d118      	bne.n	8010908 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80108d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108d8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d005      	beq.n	80108ea <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80108de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108e0:	685a      	ldr	r2, [r3, #4]
 80108e2:	4b43      	ldr	r3, [pc, #268]	; (80109f0 <udp_input+0x218>)
 80108e4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80108e6:	429a      	cmp	r2, r3
 80108e8:	d10e      	bne.n	8010908 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80108ea:	6a3b      	ldr	r3, [r7, #32]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d014      	beq.n	801091a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80108f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108f2:	68da      	ldr	r2, [r3, #12]
 80108f4:	6a3b      	ldr	r3, [r7, #32]
 80108f6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80108f8:	4b3e      	ldr	r3, [pc, #248]	; (80109f4 <udp_input+0x21c>)
 80108fa:	681a      	ldr	r2, [r3, #0]
 80108fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108fe:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8010900:	4a3c      	ldr	r2, [pc, #240]	; (80109f4 <udp_input+0x21c>)
 8010902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010904:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8010906:	e008      	b.n	801091a <udp_input+0x142>
      }
    }

    prev = pcb;
 8010908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801090a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801090c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801090e:	68db      	ldr	r3, [r3, #12]
 8010910:	627b      	str	r3, [r7, #36]	; 0x24
 8010912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010914:	2b00      	cmp	r3, #0
 8010916:	d1a7      	bne.n	8010868 <udp_input+0x90>
 8010918:	e000      	b.n	801091c <udp_input+0x144>
        break;
 801091a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801091c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801091e:	2b00      	cmp	r3, #0
 8010920:	d101      	bne.n	8010926 <udp_input+0x14e>
    pcb = uncon_pcb;
 8010922:	69fb      	ldr	r3, [r7, #28]
 8010924:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8010926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010928:	2b00      	cmp	r3, #0
 801092a:	d002      	beq.n	8010932 <udp_input+0x15a>
    for_us = 1;
 801092c:	2301      	movs	r3, #1
 801092e:	76fb      	strb	r3, [r7, #27]
 8010930:	e00a      	b.n	8010948 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8010932:	683b      	ldr	r3, [r7, #0]
 8010934:	3304      	adds	r3, #4
 8010936:	681a      	ldr	r2, [r3, #0]
 8010938:	4b2d      	ldr	r3, [pc, #180]	; (80109f0 <udp_input+0x218>)
 801093a:	695b      	ldr	r3, [r3, #20]
 801093c:	429a      	cmp	r2, r3
 801093e:	bf0c      	ite	eq
 8010940:	2301      	moveq	r3, #1
 8010942:	2300      	movne	r3, #0
 8010944:	b2db      	uxtb	r3, r3
 8010946:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8010948:	7efb      	ldrb	r3, [r7, #27]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d041      	beq.n	80109d2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801094e:	2108      	movs	r1, #8
 8010950:	6878      	ldr	r0, [r7, #4]
 8010952:	f7fa f88d 	bl	800aa70 <pbuf_remove_header>
 8010956:	4603      	mov	r3, r0
 8010958:	2b00      	cmp	r3, #0
 801095a:	d00a      	beq.n	8010972 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801095c:	4b20      	ldr	r3, [pc, #128]	; (80109e0 <udp_input+0x208>)
 801095e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8010962:	4925      	ldr	r1, [pc, #148]	; (80109f8 <udp_input+0x220>)
 8010964:	4820      	ldr	r0, [pc, #128]	; (80109e8 <udp_input+0x210>)
 8010966:	f004 fdfb 	bl	8015560 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801096a:	6878      	ldr	r0, [r7, #4]
 801096c:	f7fa f906 	bl	800ab7c <pbuf_free>
      goto end;
 8010970:	e032      	b.n	80109d8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8010972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010974:	2b00      	cmp	r3, #0
 8010976:	d012      	beq.n	801099e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8010978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801097a:	699b      	ldr	r3, [r3, #24]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d00a      	beq.n	8010996 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8010980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010982:	699c      	ldr	r4, [r3, #24]
 8010984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010986:	69d8      	ldr	r0, [r3, #28]
 8010988:	8a3b      	ldrh	r3, [r7, #16]
 801098a:	9300      	str	r3, [sp, #0]
 801098c:	4b1b      	ldr	r3, [pc, #108]	; (80109fc <udp_input+0x224>)
 801098e:	687a      	ldr	r2, [r7, #4]
 8010990:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010992:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8010994:	e021      	b.n	80109da <udp_input+0x202>
        pbuf_free(p);
 8010996:	6878      	ldr	r0, [r7, #4]
 8010998:	f7fa f8f0 	bl	800ab7c <pbuf_free>
        goto end;
 801099c:	e01c      	b.n	80109d8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801099e:	7cfb      	ldrb	r3, [r7, #19]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d112      	bne.n	80109ca <udp_input+0x1f2>
 80109a4:	4b12      	ldr	r3, [pc, #72]	; (80109f0 <udp_input+0x218>)
 80109a6:	695b      	ldr	r3, [r3, #20]
 80109a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80109ac:	2be0      	cmp	r3, #224	; 0xe0
 80109ae:	d00c      	beq.n	80109ca <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80109b0:	4b0f      	ldr	r3, [pc, #60]	; (80109f0 <udp_input+0x218>)
 80109b2:	899b      	ldrh	r3, [r3, #12]
 80109b4:	3308      	adds	r3, #8
 80109b6:	b29b      	uxth	r3, r3
 80109b8:	b21b      	sxth	r3, r3
 80109ba:	4619      	mov	r1, r3
 80109bc:	6878      	ldr	r0, [r7, #4]
 80109be:	f7fa f8ca 	bl	800ab56 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80109c2:	2103      	movs	r1, #3
 80109c4:	6878      	ldr	r0, [r7, #4]
 80109c6:	f003 f9fb 	bl	8013dc0 <icmp_dest_unreach>
      pbuf_free(p);
 80109ca:	6878      	ldr	r0, [r7, #4]
 80109cc:	f7fa f8d6 	bl	800ab7c <pbuf_free>
  return;
 80109d0:	e003      	b.n	80109da <udp_input+0x202>
    pbuf_free(p);
 80109d2:	6878      	ldr	r0, [r7, #4]
 80109d4:	f7fa f8d2 	bl	800ab7c <pbuf_free>
  return;
 80109d8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80109da:	372c      	adds	r7, #44	; 0x2c
 80109dc:	46bd      	mov	sp, r7
 80109de:	bd90      	pop	{r4, r7, pc}
 80109e0:	08018700 	.word	0x08018700
 80109e4:	080187a4 	.word	0x080187a4
 80109e8:	08018754 	.word	0x08018754
 80109ec:	080187bc 	.word	0x080187bc
 80109f0:	20009c04 	.word	0x20009c04
 80109f4:	2000d3d4 	.word	0x2000d3d4
 80109f8:	080187d8 	.word	0x080187d8
 80109fc:	20009c14 	.word	0x20009c14

08010a00 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8010a00:	b580      	push	{r7, lr}
 8010a02:	b088      	sub	sp, #32
 8010a04:	af02      	add	r7, sp, #8
 8010a06:	60f8      	str	r0, [r7, #12]
 8010a08:	60b9      	str	r1, [r7, #8]
 8010a0a:	607a      	str	r2, [r7, #4]
 8010a0c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d109      	bne.n	8010a28 <udp_sendto_if+0x28>
 8010a14:	4b2e      	ldr	r3, [pc, #184]	; (8010ad0 <udp_sendto_if+0xd0>)
 8010a16:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010a1a:	492e      	ldr	r1, [pc, #184]	; (8010ad4 <udp_sendto_if+0xd4>)
 8010a1c:	482e      	ldr	r0, [pc, #184]	; (8010ad8 <udp_sendto_if+0xd8>)
 8010a1e:	f004 fd9f 	bl	8015560 <iprintf>
 8010a22:	f06f 030f 	mvn.w	r3, #15
 8010a26:	e04f      	b.n	8010ac8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8010a28:	68bb      	ldr	r3, [r7, #8]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d109      	bne.n	8010a42 <udp_sendto_if+0x42>
 8010a2e:	4b28      	ldr	r3, [pc, #160]	; (8010ad0 <udp_sendto_if+0xd0>)
 8010a30:	f240 2281 	movw	r2, #641	; 0x281
 8010a34:	4929      	ldr	r1, [pc, #164]	; (8010adc <udp_sendto_if+0xdc>)
 8010a36:	4828      	ldr	r0, [pc, #160]	; (8010ad8 <udp_sendto_if+0xd8>)
 8010a38:	f004 fd92 	bl	8015560 <iprintf>
 8010a3c:	f06f 030f 	mvn.w	r3, #15
 8010a40:	e042      	b.n	8010ac8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d109      	bne.n	8010a5c <udp_sendto_if+0x5c>
 8010a48:	4b21      	ldr	r3, [pc, #132]	; (8010ad0 <udp_sendto_if+0xd0>)
 8010a4a:	f240 2282 	movw	r2, #642	; 0x282
 8010a4e:	4924      	ldr	r1, [pc, #144]	; (8010ae0 <udp_sendto_if+0xe0>)
 8010a50:	4821      	ldr	r0, [pc, #132]	; (8010ad8 <udp_sendto_if+0xd8>)
 8010a52:	f004 fd85 	bl	8015560 <iprintf>
 8010a56:	f06f 030f 	mvn.w	r3, #15
 8010a5a:	e035      	b.n	8010ac8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8010a5c:	6a3b      	ldr	r3, [r7, #32]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d109      	bne.n	8010a76 <udp_sendto_if+0x76>
 8010a62:	4b1b      	ldr	r3, [pc, #108]	; (8010ad0 <udp_sendto_if+0xd0>)
 8010a64:	f240 2283 	movw	r2, #643	; 0x283
 8010a68:	491e      	ldr	r1, [pc, #120]	; (8010ae4 <udp_sendto_if+0xe4>)
 8010a6a:	481b      	ldr	r0, [pc, #108]	; (8010ad8 <udp_sendto_if+0xd8>)
 8010a6c:	f004 fd78 	bl	8015560 <iprintf>
 8010a70:	f06f 030f 	mvn.w	r3, #15
 8010a74:	e028      	b.n	8010ac8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d009      	beq.n	8010a90 <udp_sendto_if+0x90>
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d005      	beq.n	8010a90 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010a8c:	2be0      	cmp	r3, #224	; 0xe0
 8010a8e:	d103      	bne.n	8010a98 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8010a90:	6a3b      	ldr	r3, [r7, #32]
 8010a92:	3304      	adds	r3, #4
 8010a94:	617b      	str	r3, [r7, #20]
 8010a96:	e00b      	b.n	8010ab0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	681a      	ldr	r2, [r3, #0]
 8010a9c:	6a3b      	ldr	r3, [r7, #32]
 8010a9e:	3304      	adds	r3, #4
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	429a      	cmp	r2, r3
 8010aa4:	d002      	beq.n	8010aac <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8010aa6:	f06f 0303 	mvn.w	r3, #3
 8010aaa:	e00d      	b.n	8010ac8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8010ab0:	887a      	ldrh	r2, [r7, #2]
 8010ab2:	697b      	ldr	r3, [r7, #20]
 8010ab4:	9301      	str	r3, [sp, #4]
 8010ab6:	6a3b      	ldr	r3, [r7, #32]
 8010ab8:	9300      	str	r3, [sp, #0]
 8010aba:	4613      	mov	r3, r2
 8010abc:	687a      	ldr	r2, [r7, #4]
 8010abe:	68b9      	ldr	r1, [r7, #8]
 8010ac0:	68f8      	ldr	r0, [r7, #12]
 8010ac2:	f000 f811 	bl	8010ae8 <udp_sendto_if_src>
 8010ac6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8010ac8:	4618      	mov	r0, r3
 8010aca:	3718      	adds	r7, #24
 8010acc:	46bd      	mov	sp, r7
 8010ace:	bd80      	pop	{r7, pc}
 8010ad0:	08018700 	.word	0x08018700
 8010ad4:	08018874 	.word	0x08018874
 8010ad8:	08018754 	.word	0x08018754
 8010adc:	08018890 	.word	0x08018890
 8010ae0:	080188ac 	.word	0x080188ac
 8010ae4:	080188cc 	.word	0x080188cc

08010ae8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b08c      	sub	sp, #48	; 0x30
 8010aec:	af04      	add	r7, sp, #16
 8010aee:	60f8      	str	r0, [r7, #12]
 8010af0:	60b9      	str	r1, [r7, #8]
 8010af2:	607a      	str	r2, [r7, #4]
 8010af4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d109      	bne.n	8010b10 <udp_sendto_if_src+0x28>
 8010afc:	4b65      	ldr	r3, [pc, #404]	; (8010c94 <udp_sendto_if_src+0x1ac>)
 8010afe:	f240 22d1 	movw	r2, #721	; 0x2d1
 8010b02:	4965      	ldr	r1, [pc, #404]	; (8010c98 <udp_sendto_if_src+0x1b0>)
 8010b04:	4865      	ldr	r0, [pc, #404]	; (8010c9c <udp_sendto_if_src+0x1b4>)
 8010b06:	f004 fd2b 	bl	8015560 <iprintf>
 8010b0a:	f06f 030f 	mvn.w	r3, #15
 8010b0e:	e0bc      	b.n	8010c8a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8010b10:	68bb      	ldr	r3, [r7, #8]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d109      	bne.n	8010b2a <udp_sendto_if_src+0x42>
 8010b16:	4b5f      	ldr	r3, [pc, #380]	; (8010c94 <udp_sendto_if_src+0x1ac>)
 8010b18:	f240 22d2 	movw	r2, #722	; 0x2d2
 8010b1c:	4960      	ldr	r1, [pc, #384]	; (8010ca0 <udp_sendto_if_src+0x1b8>)
 8010b1e:	485f      	ldr	r0, [pc, #380]	; (8010c9c <udp_sendto_if_src+0x1b4>)
 8010b20:	f004 fd1e 	bl	8015560 <iprintf>
 8010b24:	f06f 030f 	mvn.w	r3, #15
 8010b28:	e0af      	b.n	8010c8a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d109      	bne.n	8010b44 <udp_sendto_if_src+0x5c>
 8010b30:	4b58      	ldr	r3, [pc, #352]	; (8010c94 <udp_sendto_if_src+0x1ac>)
 8010b32:	f240 22d3 	movw	r2, #723	; 0x2d3
 8010b36:	495b      	ldr	r1, [pc, #364]	; (8010ca4 <udp_sendto_if_src+0x1bc>)
 8010b38:	4858      	ldr	r0, [pc, #352]	; (8010c9c <udp_sendto_if_src+0x1b4>)
 8010b3a:	f004 fd11 	bl	8015560 <iprintf>
 8010b3e:	f06f 030f 	mvn.w	r3, #15
 8010b42:	e0a2      	b.n	8010c8a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8010b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d109      	bne.n	8010b5e <udp_sendto_if_src+0x76>
 8010b4a:	4b52      	ldr	r3, [pc, #328]	; (8010c94 <udp_sendto_if_src+0x1ac>)
 8010b4c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8010b50:	4955      	ldr	r1, [pc, #340]	; (8010ca8 <udp_sendto_if_src+0x1c0>)
 8010b52:	4852      	ldr	r0, [pc, #328]	; (8010c9c <udp_sendto_if_src+0x1b4>)
 8010b54:	f004 fd04 	bl	8015560 <iprintf>
 8010b58:	f06f 030f 	mvn.w	r3, #15
 8010b5c:	e095      	b.n	8010c8a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8010b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d109      	bne.n	8010b78 <udp_sendto_if_src+0x90>
 8010b64:	4b4b      	ldr	r3, [pc, #300]	; (8010c94 <udp_sendto_if_src+0x1ac>)
 8010b66:	f240 22d5 	movw	r2, #725	; 0x2d5
 8010b6a:	4950      	ldr	r1, [pc, #320]	; (8010cac <udp_sendto_if_src+0x1c4>)
 8010b6c:	484b      	ldr	r0, [pc, #300]	; (8010c9c <udp_sendto_if_src+0x1b4>)
 8010b6e:	f004 fcf7 	bl	8015560 <iprintf>
 8010b72:	f06f 030f 	mvn.w	r3, #15
 8010b76:	e088      	b.n	8010c8a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	8a5b      	ldrh	r3, [r3, #18]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d10f      	bne.n	8010ba0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8010b80:	68f9      	ldr	r1, [r7, #12]
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	8a5b      	ldrh	r3, [r3, #18]
 8010b86:	461a      	mov	r2, r3
 8010b88:	68f8      	ldr	r0, [r7, #12]
 8010b8a:	f000 f893 	bl	8010cb4 <udp_bind>
 8010b8e:	4603      	mov	r3, r0
 8010b90:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8010b92:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d002      	beq.n	8010ba0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8010b9a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010b9e:	e074      	b.n	8010c8a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8010ba0:	68bb      	ldr	r3, [r7, #8]
 8010ba2:	891b      	ldrh	r3, [r3, #8]
 8010ba4:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8010ba8:	4293      	cmp	r3, r2
 8010baa:	d902      	bls.n	8010bb2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8010bac:	f04f 33ff 	mov.w	r3, #4294967295
 8010bb0:	e06b      	b.n	8010c8a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8010bb2:	2108      	movs	r1, #8
 8010bb4:	68b8      	ldr	r0, [r7, #8]
 8010bb6:	f7f9 ff4b 	bl	800aa50 <pbuf_add_header>
 8010bba:	4603      	mov	r3, r0
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d015      	beq.n	8010bec <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8010bc0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010bc4:	2108      	movs	r1, #8
 8010bc6:	2022      	movs	r0, #34	; 0x22
 8010bc8:	f7f9 fcf4 	bl	800a5b4 <pbuf_alloc>
 8010bcc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8010bce:	69fb      	ldr	r3, [r7, #28]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d102      	bne.n	8010bda <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8010bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8010bd8:	e057      	b.n	8010c8a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8010bda:	68bb      	ldr	r3, [r7, #8]
 8010bdc:	891b      	ldrh	r3, [r3, #8]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d006      	beq.n	8010bf0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8010be2:	68b9      	ldr	r1, [r7, #8]
 8010be4:	69f8      	ldr	r0, [r7, #28]
 8010be6:	f7fa f8ed 	bl	800adc4 <pbuf_chain>
 8010bea:	e001      	b.n	8010bf0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8010bec:	68bb      	ldr	r3, [r7, #8]
 8010bee:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8010bf0:	69fb      	ldr	r3, [r7, #28]
 8010bf2:	895b      	ldrh	r3, [r3, #10]
 8010bf4:	2b07      	cmp	r3, #7
 8010bf6:	d806      	bhi.n	8010c06 <udp_sendto_if_src+0x11e>
 8010bf8:	4b26      	ldr	r3, [pc, #152]	; (8010c94 <udp_sendto_if_src+0x1ac>)
 8010bfa:	f240 320d 	movw	r2, #781	; 0x30d
 8010bfe:	492c      	ldr	r1, [pc, #176]	; (8010cb0 <udp_sendto_if_src+0x1c8>)
 8010c00:	4826      	ldr	r0, [pc, #152]	; (8010c9c <udp_sendto_if_src+0x1b4>)
 8010c02:	f004 fcad 	bl	8015560 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8010c06:	69fb      	ldr	r3, [r7, #28]
 8010c08:	685b      	ldr	r3, [r3, #4]
 8010c0a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	8a5b      	ldrh	r3, [r3, #18]
 8010c10:	4618      	mov	r0, r3
 8010c12:	f7f8 fbb5 	bl	8009380 <lwip_htons>
 8010c16:	4603      	mov	r3, r0
 8010c18:	461a      	mov	r2, r3
 8010c1a:	697b      	ldr	r3, [r7, #20]
 8010c1c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8010c1e:	887b      	ldrh	r3, [r7, #2]
 8010c20:	4618      	mov	r0, r3
 8010c22:	f7f8 fbad 	bl	8009380 <lwip_htons>
 8010c26:	4603      	mov	r3, r0
 8010c28:	461a      	mov	r2, r3
 8010c2a:	697b      	ldr	r3, [r7, #20]
 8010c2c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8010c2e:	697b      	ldr	r3, [r7, #20]
 8010c30:	2200      	movs	r2, #0
 8010c32:	719a      	strb	r2, [r3, #6]
 8010c34:	2200      	movs	r2, #0
 8010c36:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8010c38:	69fb      	ldr	r3, [r7, #28]
 8010c3a:	891b      	ldrh	r3, [r3, #8]
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	f7f8 fb9f 	bl	8009380 <lwip_htons>
 8010c42:	4603      	mov	r3, r0
 8010c44:	461a      	mov	r2, r3
 8010c46:	697b      	ldr	r3, [r7, #20]
 8010c48:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8010c4a:	2311      	movs	r3, #17
 8010c4c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	7adb      	ldrb	r3, [r3, #11]
 8010c52:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	7a9b      	ldrb	r3, [r3, #10]
 8010c58:	7cb9      	ldrb	r1, [r7, #18]
 8010c5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c5c:	9202      	str	r2, [sp, #8]
 8010c5e:	7cfa      	ldrb	r2, [r7, #19]
 8010c60:	9201      	str	r2, [sp, #4]
 8010c62:	9300      	str	r3, [sp, #0]
 8010c64:	460b      	mov	r3, r1
 8010c66:	687a      	ldr	r2, [r7, #4]
 8010c68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010c6a:	69f8      	ldr	r0, [r7, #28]
 8010c6c:	f003 fb38 	bl	80142e0 <ip4_output_if_src>
 8010c70:	4603      	mov	r3, r0
 8010c72:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8010c74:	69fa      	ldr	r2, [r7, #28]
 8010c76:	68bb      	ldr	r3, [r7, #8]
 8010c78:	429a      	cmp	r2, r3
 8010c7a:	d004      	beq.n	8010c86 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8010c7c:	69f8      	ldr	r0, [r7, #28]
 8010c7e:	f7f9 ff7d 	bl	800ab7c <pbuf_free>
    q = NULL;
 8010c82:	2300      	movs	r3, #0
 8010c84:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8010c86:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	3720      	adds	r7, #32
 8010c8e:	46bd      	mov	sp, r7
 8010c90:	bd80      	pop	{r7, pc}
 8010c92:	bf00      	nop
 8010c94:	08018700 	.word	0x08018700
 8010c98:	080188ec 	.word	0x080188ec
 8010c9c:	08018754 	.word	0x08018754
 8010ca0:	0801890c 	.word	0x0801890c
 8010ca4:	0801892c 	.word	0x0801892c
 8010ca8:	08018950 	.word	0x08018950
 8010cac:	08018974 	.word	0x08018974
 8010cb0:	08018998 	.word	0x08018998

08010cb4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010cb4:	b580      	push	{r7, lr}
 8010cb6:	b086      	sub	sp, #24
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	60f8      	str	r0, [r7, #12]
 8010cbc:	60b9      	str	r1, [r7, #8]
 8010cbe:	4613      	mov	r3, r2
 8010cc0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010cc2:	68bb      	ldr	r3, [r7, #8]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d101      	bne.n	8010ccc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8010cc8:	4b39      	ldr	r3, [pc, #228]	; (8010db0 <udp_bind+0xfc>)
 8010cca:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d109      	bne.n	8010ce6 <udp_bind+0x32>
 8010cd2:	4b38      	ldr	r3, [pc, #224]	; (8010db4 <udp_bind+0x100>)
 8010cd4:	f240 32b7 	movw	r2, #951	; 0x3b7
 8010cd8:	4937      	ldr	r1, [pc, #220]	; (8010db8 <udp_bind+0x104>)
 8010cda:	4838      	ldr	r0, [pc, #224]	; (8010dbc <udp_bind+0x108>)
 8010cdc:	f004 fc40 	bl	8015560 <iprintf>
 8010ce0:	f06f 030f 	mvn.w	r3, #15
 8010ce4:	e060      	b.n	8010da8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010cea:	4b35      	ldr	r3, [pc, #212]	; (8010dc0 <udp_bind+0x10c>)
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	617b      	str	r3, [r7, #20]
 8010cf0:	e009      	b.n	8010d06 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8010cf2:	68fa      	ldr	r2, [r7, #12]
 8010cf4:	697b      	ldr	r3, [r7, #20]
 8010cf6:	429a      	cmp	r2, r3
 8010cf8:	d102      	bne.n	8010d00 <udp_bind+0x4c>
      rebind = 1;
 8010cfa:	2301      	movs	r3, #1
 8010cfc:	74fb      	strb	r3, [r7, #19]
      break;
 8010cfe:	e005      	b.n	8010d0c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010d00:	697b      	ldr	r3, [r7, #20]
 8010d02:	68db      	ldr	r3, [r3, #12]
 8010d04:	617b      	str	r3, [r7, #20]
 8010d06:	697b      	ldr	r3, [r7, #20]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d1f2      	bne.n	8010cf2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8010d0c:	88fb      	ldrh	r3, [r7, #6]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d109      	bne.n	8010d26 <udp_bind+0x72>
    port = udp_new_port();
 8010d12:	f7ff fcc5 	bl	80106a0 <udp_new_port>
 8010d16:	4603      	mov	r3, r0
 8010d18:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8010d1a:	88fb      	ldrh	r3, [r7, #6]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d12c      	bne.n	8010d7a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8010d20:	f06f 0307 	mvn.w	r3, #7
 8010d24:	e040      	b.n	8010da8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010d26:	4b26      	ldr	r3, [pc, #152]	; (8010dc0 <udp_bind+0x10c>)
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	617b      	str	r3, [r7, #20]
 8010d2c:	e022      	b.n	8010d74 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8010d2e:	68fa      	ldr	r2, [r7, #12]
 8010d30:	697b      	ldr	r3, [r7, #20]
 8010d32:	429a      	cmp	r2, r3
 8010d34:	d01b      	beq.n	8010d6e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8010d36:	697b      	ldr	r3, [r7, #20]
 8010d38:	8a5b      	ldrh	r3, [r3, #18]
 8010d3a:	88fa      	ldrh	r2, [r7, #6]
 8010d3c:	429a      	cmp	r2, r3
 8010d3e:	d116      	bne.n	8010d6e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010d40:	697b      	ldr	r3, [r7, #20]
 8010d42:	681a      	ldr	r2, [r3, #0]
 8010d44:	68bb      	ldr	r3, [r7, #8]
 8010d46:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8010d48:	429a      	cmp	r2, r3
 8010d4a:	d00d      	beq.n	8010d68 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010d4c:	68bb      	ldr	r3, [r7, #8]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d00a      	beq.n	8010d68 <udp_bind+0xb4>
 8010d52:	68bb      	ldr	r3, [r7, #8]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d006      	beq.n	8010d68 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010d5a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d003      	beq.n	8010d68 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010d60:	697b      	ldr	r3, [r7, #20]
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d102      	bne.n	8010d6e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8010d68:	f06f 0307 	mvn.w	r3, #7
 8010d6c:	e01c      	b.n	8010da8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010d6e:	697b      	ldr	r3, [r7, #20]
 8010d70:	68db      	ldr	r3, [r3, #12]
 8010d72:	617b      	str	r3, [r7, #20]
 8010d74:	697b      	ldr	r3, [r7, #20]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d1d9      	bne.n	8010d2e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8010d7a:	68bb      	ldr	r3, [r7, #8]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d002      	beq.n	8010d86 <udp_bind+0xd2>
 8010d80:	68bb      	ldr	r3, [r7, #8]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	e000      	b.n	8010d88 <udp_bind+0xd4>
 8010d86:	2300      	movs	r3, #0
 8010d88:	68fa      	ldr	r2, [r7, #12]
 8010d8a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	88fa      	ldrh	r2, [r7, #6]
 8010d90:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8010d92:	7cfb      	ldrb	r3, [r7, #19]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d106      	bne.n	8010da6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8010d98:	4b09      	ldr	r3, [pc, #36]	; (8010dc0 <udp_bind+0x10c>)
 8010d9a:	681a      	ldr	r2, [r3, #0]
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8010da0:	4a07      	ldr	r2, [pc, #28]	; (8010dc0 <udp_bind+0x10c>)
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8010da6:	2300      	movs	r3, #0
}
 8010da8:	4618      	mov	r0, r3
 8010daa:	3718      	adds	r7, #24
 8010dac:	46bd      	mov	sp, r7
 8010dae:	bd80      	pop	{r7, pc}
 8010db0:	08019630 	.word	0x08019630
 8010db4:	08018700 	.word	0x08018700
 8010db8:	080189c8 	.word	0x080189c8
 8010dbc:	08018754 	.word	0x08018754
 8010dc0:	2000d3d4 	.word	0x2000d3d4

08010dc4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b086      	sub	sp, #24
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	60f8      	str	r0, [r7, #12]
 8010dcc:	60b9      	str	r1, [r7, #8]
 8010dce:	4613      	mov	r3, r2
 8010dd0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d109      	bne.n	8010dec <udp_connect+0x28>
 8010dd8:	4b2c      	ldr	r3, [pc, #176]	; (8010e8c <udp_connect+0xc8>)
 8010dda:	f240 4235 	movw	r2, #1077	; 0x435
 8010dde:	492c      	ldr	r1, [pc, #176]	; (8010e90 <udp_connect+0xcc>)
 8010de0:	482c      	ldr	r0, [pc, #176]	; (8010e94 <udp_connect+0xd0>)
 8010de2:	f004 fbbd 	bl	8015560 <iprintf>
 8010de6:	f06f 030f 	mvn.w	r3, #15
 8010dea:	e04b      	b.n	8010e84 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8010dec:	68bb      	ldr	r3, [r7, #8]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d109      	bne.n	8010e06 <udp_connect+0x42>
 8010df2:	4b26      	ldr	r3, [pc, #152]	; (8010e8c <udp_connect+0xc8>)
 8010df4:	f240 4236 	movw	r2, #1078	; 0x436
 8010df8:	4927      	ldr	r1, [pc, #156]	; (8010e98 <udp_connect+0xd4>)
 8010dfa:	4826      	ldr	r0, [pc, #152]	; (8010e94 <udp_connect+0xd0>)
 8010dfc:	f004 fbb0 	bl	8015560 <iprintf>
 8010e00:	f06f 030f 	mvn.w	r3, #15
 8010e04:	e03e      	b.n	8010e84 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	8a5b      	ldrh	r3, [r3, #18]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d10f      	bne.n	8010e2e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8010e0e:	68f9      	ldr	r1, [r7, #12]
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	8a5b      	ldrh	r3, [r3, #18]
 8010e14:	461a      	mov	r2, r3
 8010e16:	68f8      	ldr	r0, [r7, #12]
 8010e18:	f7ff ff4c 	bl	8010cb4 <udp_bind>
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8010e20:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d002      	beq.n	8010e2e <udp_connect+0x6a>
      return err;
 8010e28:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010e2c:	e02a      	b.n	8010e84 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8010e2e:	68bb      	ldr	r3, [r7, #8]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d002      	beq.n	8010e3a <udp_connect+0x76>
 8010e34:	68bb      	ldr	r3, [r7, #8]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	e000      	b.n	8010e3c <udp_connect+0x78>
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	68fa      	ldr	r2, [r7, #12]
 8010e3e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	88fa      	ldrh	r2, [r7, #6]
 8010e44:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	7c1b      	ldrb	r3, [r3, #16]
 8010e4a:	f043 0304 	orr.w	r3, r3, #4
 8010e4e:	b2da      	uxtb	r2, r3
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010e54:	4b11      	ldr	r3, [pc, #68]	; (8010e9c <udp_connect+0xd8>)
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	617b      	str	r3, [r7, #20]
 8010e5a:	e008      	b.n	8010e6e <udp_connect+0xaa>
    if (pcb == ipcb) {
 8010e5c:	68fa      	ldr	r2, [r7, #12]
 8010e5e:	697b      	ldr	r3, [r7, #20]
 8010e60:	429a      	cmp	r2, r3
 8010e62:	d101      	bne.n	8010e68 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8010e64:	2300      	movs	r3, #0
 8010e66:	e00d      	b.n	8010e84 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010e68:	697b      	ldr	r3, [r7, #20]
 8010e6a:	68db      	ldr	r3, [r3, #12]
 8010e6c:	617b      	str	r3, [r7, #20]
 8010e6e:	697b      	ldr	r3, [r7, #20]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d1f3      	bne.n	8010e5c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8010e74:	4b09      	ldr	r3, [pc, #36]	; (8010e9c <udp_connect+0xd8>)
 8010e76:	681a      	ldr	r2, [r3, #0]
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8010e7c:	4a07      	ldr	r2, [pc, #28]	; (8010e9c <udp_connect+0xd8>)
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8010e82:	2300      	movs	r3, #0
}
 8010e84:	4618      	mov	r0, r3
 8010e86:	3718      	adds	r7, #24
 8010e88:	46bd      	mov	sp, r7
 8010e8a:	bd80      	pop	{r7, pc}
 8010e8c:	08018700 	.word	0x08018700
 8010e90:	080189e0 	.word	0x080189e0
 8010e94:	08018754 	.word	0x08018754
 8010e98:	080189fc 	.word	0x080189fc
 8010e9c:	2000d3d4 	.word	0x2000d3d4

08010ea0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b084      	sub	sp, #16
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	60f8      	str	r0, [r7, #12]
 8010ea8:	60b9      	str	r1, [r7, #8]
 8010eaa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d107      	bne.n	8010ec2 <udp_recv+0x22>
 8010eb2:	4b08      	ldr	r3, [pc, #32]	; (8010ed4 <udp_recv+0x34>)
 8010eb4:	f240 428a 	movw	r2, #1162	; 0x48a
 8010eb8:	4907      	ldr	r1, [pc, #28]	; (8010ed8 <udp_recv+0x38>)
 8010eba:	4808      	ldr	r0, [pc, #32]	; (8010edc <udp_recv+0x3c>)
 8010ebc:	f004 fb50 	bl	8015560 <iprintf>
 8010ec0:	e005      	b.n	8010ece <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	68ba      	ldr	r2, [r7, #8]
 8010ec6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	687a      	ldr	r2, [r7, #4]
 8010ecc:	61da      	str	r2, [r3, #28]
}
 8010ece:	3710      	adds	r7, #16
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	bd80      	pop	{r7, pc}
 8010ed4:	08018700 	.word	0x08018700
 8010ed8:	08018a34 	.word	0x08018a34
 8010edc:	08018754 	.word	0x08018754

08010ee0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b084      	sub	sp, #16
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d107      	bne.n	8010efe <udp_remove+0x1e>
 8010eee:	4b19      	ldr	r3, [pc, #100]	; (8010f54 <udp_remove+0x74>)
 8010ef0:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8010ef4:	4918      	ldr	r1, [pc, #96]	; (8010f58 <udp_remove+0x78>)
 8010ef6:	4819      	ldr	r0, [pc, #100]	; (8010f5c <udp_remove+0x7c>)
 8010ef8:	f004 fb32 	bl	8015560 <iprintf>
 8010efc:	e026      	b.n	8010f4c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8010efe:	4b18      	ldr	r3, [pc, #96]	; (8010f60 <udp_remove+0x80>)
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	687a      	ldr	r2, [r7, #4]
 8010f04:	429a      	cmp	r2, r3
 8010f06:	d105      	bne.n	8010f14 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8010f08:	4b15      	ldr	r3, [pc, #84]	; (8010f60 <udp_remove+0x80>)
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	68db      	ldr	r3, [r3, #12]
 8010f0e:	4a14      	ldr	r2, [pc, #80]	; (8010f60 <udp_remove+0x80>)
 8010f10:	6013      	str	r3, [r2, #0]
 8010f12:	e017      	b.n	8010f44 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8010f14:	4b12      	ldr	r3, [pc, #72]	; (8010f60 <udp_remove+0x80>)
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	60fb      	str	r3, [r7, #12]
 8010f1a:	e010      	b.n	8010f3e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	68db      	ldr	r3, [r3, #12]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d009      	beq.n	8010f38 <udp_remove+0x58>
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	68db      	ldr	r3, [r3, #12]
 8010f28:	687a      	ldr	r2, [r7, #4]
 8010f2a:	429a      	cmp	r2, r3
 8010f2c:	d104      	bne.n	8010f38 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	68da      	ldr	r2, [r3, #12]
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	60da      	str	r2, [r3, #12]
        break;
 8010f36:	e005      	b.n	8010f44 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	68db      	ldr	r3, [r3, #12]
 8010f3c:	60fb      	str	r3, [r7, #12]
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d1eb      	bne.n	8010f1c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8010f44:	6879      	ldr	r1, [r7, #4]
 8010f46:	2000      	movs	r0, #0
 8010f48:	f7f8 ff68 	bl	8009e1c <memp_free>
}
 8010f4c:	3710      	adds	r7, #16
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	bd80      	pop	{r7, pc}
 8010f52:	bf00      	nop
 8010f54:	08018700 	.word	0x08018700
 8010f58:	08018a4c 	.word	0x08018a4c
 8010f5c:	08018754 	.word	0x08018754
 8010f60:	2000d3d4 	.word	0x2000d3d4

08010f64 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b082      	sub	sp, #8
 8010f68:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8010f6a:	2000      	movs	r0, #0
 8010f6c:	f7f8 fee0 	bl	8009d30 <memp_malloc>
 8010f70:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d007      	beq.n	8010f88 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8010f78:	2220      	movs	r2, #32
 8010f7a:	2100      	movs	r1, #0
 8010f7c:	6878      	ldr	r0, [r7, #4]
 8010f7e:	f004 fae7 	bl	8015550 <memset>
    pcb->ttl = UDP_TTL;
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	22ff      	movs	r2, #255	; 0xff
 8010f86:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8010f88:	687b      	ldr	r3, [r7, #4]
}
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	3708      	adds	r7, #8
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	bd80      	pop	{r7, pc}
	...

08010f94 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010f94:	b480      	push	{r7}
 8010f96:	b085      	sub	sp, #20
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
 8010f9c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d01e      	beq.n	8010fe2 <udp_netif_ip_addr_changed+0x4e>
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d01a      	beq.n	8010fe2 <udp_netif_ip_addr_changed+0x4e>
 8010fac:	683b      	ldr	r3, [r7, #0]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d017      	beq.n	8010fe2 <udp_netif_ip_addr_changed+0x4e>
 8010fb2:	683b      	ldr	r3, [r7, #0]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d013      	beq.n	8010fe2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010fba:	4b0d      	ldr	r3, [pc, #52]	; (8010ff0 <udp_netif_ip_addr_changed+0x5c>)
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	60fb      	str	r3, [r7, #12]
 8010fc0:	e00c      	b.n	8010fdc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	681a      	ldr	r2, [r3, #0]
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	429a      	cmp	r2, r3
 8010fcc:	d103      	bne.n	8010fd6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8010fce:	683b      	ldr	r3, [r7, #0]
 8010fd0:	681a      	ldr	r2, [r3, #0]
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	68db      	ldr	r3, [r3, #12]
 8010fda:	60fb      	str	r3, [r7, #12]
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d1ef      	bne.n	8010fc2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8010fe2:	bf00      	nop
 8010fe4:	3714      	adds	r7, #20
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fec:	4770      	bx	lr
 8010fee:	bf00      	nop
 8010ff0:	2000d3d4 	.word	0x2000d3d4

08010ff4 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8010ff8:	4b20      	ldr	r3, [pc, #128]	; (801107c <dhcp_inc_pcb_refcount+0x88>)
 8010ffa:	781b      	ldrb	r3, [r3, #0]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d133      	bne.n	8011068 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8011000:	4b1f      	ldr	r3, [pc, #124]	; (8011080 <dhcp_inc_pcb_refcount+0x8c>)
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d005      	beq.n	8011014 <dhcp_inc_pcb_refcount+0x20>
 8011008:	4b1e      	ldr	r3, [pc, #120]	; (8011084 <dhcp_inc_pcb_refcount+0x90>)
 801100a:	22e5      	movs	r2, #229	; 0xe5
 801100c:	491e      	ldr	r1, [pc, #120]	; (8011088 <dhcp_inc_pcb_refcount+0x94>)
 801100e:	481f      	ldr	r0, [pc, #124]	; (801108c <dhcp_inc_pcb_refcount+0x98>)
 8011010:	f004 faa6 	bl	8015560 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8011014:	f7ff ffa6 	bl	8010f64 <udp_new>
 8011018:	4603      	mov	r3, r0
 801101a:	4a19      	ldr	r2, [pc, #100]	; (8011080 <dhcp_inc_pcb_refcount+0x8c>)
 801101c:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 801101e:	4b18      	ldr	r3, [pc, #96]	; (8011080 <dhcp_inc_pcb_refcount+0x8c>)
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d102      	bne.n	801102c <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8011026:	f04f 33ff 	mov.w	r3, #4294967295
 801102a:	e024      	b.n	8011076 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801102c:	4b14      	ldr	r3, [pc, #80]	; (8011080 <dhcp_inc_pcb_refcount+0x8c>)
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	7a5a      	ldrb	r2, [r3, #9]
 8011032:	4b13      	ldr	r3, [pc, #76]	; (8011080 <dhcp_inc_pcb_refcount+0x8c>)
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	f042 0220 	orr.w	r2, r2, #32
 801103a:	b2d2      	uxtb	r2, r2
 801103c:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801103e:	4b10      	ldr	r3, [pc, #64]	; (8011080 <dhcp_inc_pcb_refcount+0x8c>)
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	2244      	movs	r2, #68	; 0x44
 8011044:	4912      	ldr	r1, [pc, #72]	; (8011090 <dhcp_inc_pcb_refcount+0x9c>)
 8011046:	4618      	mov	r0, r3
 8011048:	f7ff fe34 	bl	8010cb4 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801104c:	4b0c      	ldr	r3, [pc, #48]	; (8011080 <dhcp_inc_pcb_refcount+0x8c>)
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	2243      	movs	r2, #67	; 0x43
 8011052:	490f      	ldr	r1, [pc, #60]	; (8011090 <dhcp_inc_pcb_refcount+0x9c>)
 8011054:	4618      	mov	r0, r3
 8011056:	f7ff feb5 	bl	8010dc4 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801105a:	4b09      	ldr	r3, [pc, #36]	; (8011080 <dhcp_inc_pcb_refcount+0x8c>)
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	2200      	movs	r2, #0
 8011060:	490c      	ldr	r1, [pc, #48]	; (8011094 <dhcp_inc_pcb_refcount+0xa0>)
 8011062:	4618      	mov	r0, r3
 8011064:	f7ff ff1c 	bl	8010ea0 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8011068:	4b04      	ldr	r3, [pc, #16]	; (801107c <dhcp_inc_pcb_refcount+0x88>)
 801106a:	781b      	ldrb	r3, [r3, #0]
 801106c:	3301      	adds	r3, #1
 801106e:	b2da      	uxtb	r2, r3
 8011070:	4b02      	ldr	r3, [pc, #8]	; (801107c <dhcp_inc_pcb_refcount+0x88>)
 8011072:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8011074:	2300      	movs	r3, #0
}
 8011076:	4618      	mov	r0, r3
 8011078:	bd80      	pop	{r7, pc}
 801107a:	bf00      	nop
 801107c:	2000d404 	.word	0x2000d404
 8011080:	2000d400 	.word	0x2000d400
 8011084:	08018a64 	.word	0x08018a64
 8011088:	08018a9c 	.word	0x08018a9c
 801108c:	08018ac4 	.word	0x08018ac4
 8011090:	08019630 	.word	0x08019630
 8011094:	08012929 	.word	0x08012929

08011098 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8011098:	b580      	push	{r7, lr}
 801109a:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801109c:	4b0e      	ldr	r3, [pc, #56]	; (80110d8 <dhcp_dec_pcb_refcount+0x40>)
 801109e:	781b      	ldrb	r3, [r3, #0]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d105      	bne.n	80110b0 <dhcp_dec_pcb_refcount+0x18>
 80110a4:	4b0d      	ldr	r3, [pc, #52]	; (80110dc <dhcp_dec_pcb_refcount+0x44>)
 80110a6:	22ff      	movs	r2, #255	; 0xff
 80110a8:	490d      	ldr	r1, [pc, #52]	; (80110e0 <dhcp_dec_pcb_refcount+0x48>)
 80110aa:	480e      	ldr	r0, [pc, #56]	; (80110e4 <dhcp_dec_pcb_refcount+0x4c>)
 80110ac:	f004 fa58 	bl	8015560 <iprintf>
  dhcp_pcb_refcount--;
 80110b0:	4b09      	ldr	r3, [pc, #36]	; (80110d8 <dhcp_dec_pcb_refcount+0x40>)
 80110b2:	781b      	ldrb	r3, [r3, #0]
 80110b4:	3b01      	subs	r3, #1
 80110b6:	b2da      	uxtb	r2, r3
 80110b8:	4b07      	ldr	r3, [pc, #28]	; (80110d8 <dhcp_dec_pcb_refcount+0x40>)
 80110ba:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 80110bc:	4b06      	ldr	r3, [pc, #24]	; (80110d8 <dhcp_dec_pcb_refcount+0x40>)
 80110be:	781b      	ldrb	r3, [r3, #0]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d107      	bne.n	80110d4 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 80110c4:	4b08      	ldr	r3, [pc, #32]	; (80110e8 <dhcp_dec_pcb_refcount+0x50>)
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	4618      	mov	r0, r3
 80110ca:	f7ff ff09 	bl	8010ee0 <udp_remove>
    dhcp_pcb = NULL;
 80110ce:	4b06      	ldr	r3, [pc, #24]	; (80110e8 <dhcp_dec_pcb_refcount+0x50>)
 80110d0:	2200      	movs	r2, #0
 80110d2:	601a      	str	r2, [r3, #0]
  }
}
 80110d4:	bf00      	nop
 80110d6:	bd80      	pop	{r7, pc}
 80110d8:	2000d404 	.word	0x2000d404
 80110dc:	08018a64 	.word	0x08018a64
 80110e0:	08018aec 	.word	0x08018aec
 80110e4:	08018ac4 	.word	0x08018ac4
 80110e8:	2000d400 	.word	0x2000d400

080110ec <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b084      	sub	sp, #16
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110f8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80110fa:	210c      	movs	r1, #12
 80110fc:	68f8      	ldr	r0, [r7, #12]
 80110fe:	f001 f855 	bl	80121ac <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8011102:	4b06      	ldr	r3, [pc, #24]	; (801111c <dhcp_handle_nak+0x30>)
 8011104:	4a05      	ldr	r2, [pc, #20]	; (801111c <dhcp_handle_nak+0x30>)
 8011106:	4905      	ldr	r1, [pc, #20]	; (801111c <dhcp_handle_nak+0x30>)
 8011108:	6878      	ldr	r0, [r7, #4]
 801110a:	f7f9 f829 	bl	800a160 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801110e:	6878      	ldr	r0, [r7, #4]
 8011110:	f000 fc48 	bl	80119a4 <dhcp_discover>
}
 8011114:	bf00      	nop
 8011116:	3710      	adds	r7, #16
 8011118:	46bd      	mov	sp, r7
 801111a:	bd80      	pop	{r7, pc}
 801111c:	08019630 	.word	0x08019630

08011120 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8011120:	b580      	push	{r7, lr}
 8011122:	b084      	sub	sp, #16
 8011124:	af00      	add	r7, sp, #0
 8011126:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801112c:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801112e:	2108      	movs	r1, #8
 8011130:	68f8      	ldr	r0, [r7, #12]
 8011132:	f001 f83b 	bl	80121ac <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	331c      	adds	r3, #28
 801113a:	2200      	movs	r2, #0
 801113c:	4619      	mov	r1, r3
 801113e:	6878      	ldr	r0, [r7, #4]
 8011140:	f002 fb3c 	bl	80137bc <etharp_query>
 8011144:	4603      	mov	r3, r0
 8011146:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	799b      	ldrb	r3, [r3, #6]
 801114c:	2bff      	cmp	r3, #255	; 0xff
 801114e:	d005      	beq.n	801115c <dhcp_check+0x3c>
    dhcp->tries++;
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	799b      	ldrb	r3, [r3, #6]
 8011154:	3301      	adds	r3, #1
 8011156:	b2da      	uxtb	r2, r3
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 801115c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8011160:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011162:	893b      	ldrh	r3, [r7, #8]
 8011164:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011168:	4a06      	ldr	r2, [pc, #24]	; (8011184 <dhcp_check+0x64>)
 801116a:	fb82 1203 	smull	r1, r2, r2, r3
 801116e:	1152      	asrs	r2, r2, #5
 8011170:	17db      	asrs	r3, r3, #31
 8011172:	1ad3      	subs	r3, r2, r3
 8011174:	b29a      	uxth	r2, r3
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801117a:	bf00      	nop
 801117c:	3710      	adds	r7, #16
 801117e:	46bd      	mov	sp, r7
 8011180:	bd80      	pop	{r7, pc}
 8011182:	bf00      	nop
 8011184:	10624dd3 	.word	0x10624dd3

08011188 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8011188:	b580      	push	{r7, lr}
 801118a:	b084      	sub	sp, #16
 801118c:	af00      	add	r7, sp, #0
 801118e:	6078      	str	r0, [r7, #4]
 8011190:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011196:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8011198:	4b0c      	ldr	r3, [pc, #48]	; (80111cc <dhcp_handle_offer+0x44>)
 801119a:	789b      	ldrb	r3, [r3, #2]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d011      	beq.n	80111c4 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	2200      	movs	r2, #0
 80111a4:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80111a6:	4b0a      	ldr	r3, [pc, #40]	; (80111d0 <dhcp_handle_offer+0x48>)
 80111a8:	689b      	ldr	r3, [r3, #8]
 80111aa:	4618      	mov	r0, r3
 80111ac:	f7f8 f8fd 	bl	80093aa <lwip_htonl>
 80111b0:	4602      	mov	r2, r0
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80111b6:	683b      	ldr	r3, [r7, #0]
 80111b8:	691a      	ldr	r2, [r3, #16]
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 80111be:	6878      	ldr	r0, [r7, #4]
 80111c0:	f000 f808 	bl	80111d4 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 80111c4:	bf00      	nop
 80111c6:	3710      	adds	r7, #16
 80111c8:	46bd      	mov	sp, r7
 80111ca:	bd80      	pop	{r7, pc}
 80111cc:	2000d3f8 	.word	0x2000d3f8
 80111d0:	2000d3d8 	.word	0x2000d3d8

080111d4 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 80111d4:	b5b0      	push	{r4, r5, r7, lr}
 80111d6:	b08a      	sub	sp, #40	; 0x28
 80111d8:	af02      	add	r7, sp, #8
 80111da:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d109      	bne.n	80111f6 <dhcp_select+0x22>
 80111e2:	4b71      	ldr	r3, [pc, #452]	; (80113a8 <dhcp_select+0x1d4>)
 80111e4:	f240 1277 	movw	r2, #375	; 0x177
 80111e8:	4970      	ldr	r1, [pc, #448]	; (80113ac <dhcp_select+0x1d8>)
 80111ea:	4871      	ldr	r0, [pc, #452]	; (80113b0 <dhcp_select+0x1dc>)
 80111ec:	f004 f9b8 	bl	8015560 <iprintf>
 80111f0:	f06f 030f 	mvn.w	r3, #15
 80111f4:	e0d3      	b.n	801139e <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111fa:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80111fc:	69bb      	ldr	r3, [r7, #24]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d109      	bne.n	8011216 <dhcp_select+0x42>
 8011202:	4b69      	ldr	r3, [pc, #420]	; (80113a8 <dhcp_select+0x1d4>)
 8011204:	f240 1279 	movw	r2, #377	; 0x179
 8011208:	496a      	ldr	r1, [pc, #424]	; (80113b4 <dhcp_select+0x1e0>)
 801120a:	4869      	ldr	r0, [pc, #420]	; (80113b0 <dhcp_select+0x1dc>)
 801120c:	f004 f9a8 	bl	8015560 <iprintf>
 8011210:	f06f 0305 	mvn.w	r3, #5
 8011214:	e0c3      	b.n	801139e <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8011216:	2101      	movs	r1, #1
 8011218:	69b8      	ldr	r0, [r7, #24]
 801121a:	f000 ffc7 	bl	80121ac <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801121e:	f107 030c 	add.w	r3, r7, #12
 8011222:	2203      	movs	r2, #3
 8011224:	69b9      	ldr	r1, [r7, #24]
 8011226:	6878      	ldr	r0, [r7, #4]
 8011228:	f001 fc4c 	bl	8012ac4 <dhcp_create_msg>
 801122c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801122e:	697b      	ldr	r3, [r7, #20]
 8011230:	2b00      	cmp	r3, #0
 8011232:	f000 8085 	beq.w	8011340 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011236:	697b      	ldr	r3, [r7, #20]
 8011238:	685b      	ldr	r3, [r3, #4]
 801123a:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801123c:	89b8      	ldrh	r0, [r7, #12]
 801123e:	693b      	ldr	r3, [r7, #16]
 8011240:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011244:	2302      	movs	r3, #2
 8011246:	2239      	movs	r2, #57	; 0x39
 8011248:	f000 ffca 	bl	80121e0 <dhcp_option>
 801124c:	4603      	mov	r3, r0
 801124e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8011250:	89b8      	ldrh	r0, [r7, #12]
 8011252:	693b      	ldr	r3, [r7, #16]
 8011254:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801125c:	461a      	mov	r2, r3
 801125e:	f001 f819 	bl	8012294 <dhcp_option_short>
 8011262:	4603      	mov	r3, r0
 8011264:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8011266:	89b8      	ldrh	r0, [r7, #12]
 8011268:	693b      	ldr	r3, [r7, #16]
 801126a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801126e:	2304      	movs	r3, #4
 8011270:	2232      	movs	r2, #50	; 0x32
 8011272:	f000 ffb5 	bl	80121e0 <dhcp_option>
 8011276:	4603      	mov	r3, r0
 8011278:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801127a:	89bc      	ldrh	r4, [r7, #12]
 801127c:	693b      	ldr	r3, [r7, #16]
 801127e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8011282:	69bb      	ldr	r3, [r7, #24]
 8011284:	69db      	ldr	r3, [r3, #28]
 8011286:	4618      	mov	r0, r3
 8011288:	f7f8 f88f 	bl	80093aa <lwip_htonl>
 801128c:	4603      	mov	r3, r0
 801128e:	461a      	mov	r2, r3
 8011290:	4629      	mov	r1, r5
 8011292:	4620      	mov	r0, r4
 8011294:	f001 f830 	bl	80122f8 <dhcp_option_long>
 8011298:	4603      	mov	r3, r0
 801129a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801129c:	89b8      	ldrh	r0, [r7, #12]
 801129e:	693b      	ldr	r3, [r7, #16]
 80112a0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80112a4:	2304      	movs	r3, #4
 80112a6:	2236      	movs	r2, #54	; 0x36
 80112a8:	f000 ff9a 	bl	80121e0 <dhcp_option>
 80112ac:	4603      	mov	r3, r0
 80112ae:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80112b0:	89bc      	ldrh	r4, [r7, #12]
 80112b2:	693b      	ldr	r3, [r7, #16]
 80112b4:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80112b8:	69bb      	ldr	r3, [r7, #24]
 80112ba:	699b      	ldr	r3, [r3, #24]
 80112bc:	4618      	mov	r0, r3
 80112be:	f7f8 f874 	bl	80093aa <lwip_htonl>
 80112c2:	4603      	mov	r3, r0
 80112c4:	461a      	mov	r2, r3
 80112c6:	4629      	mov	r1, r5
 80112c8:	4620      	mov	r0, r4
 80112ca:	f001 f815 	bl	80122f8 <dhcp_option_long>
 80112ce:	4603      	mov	r3, r0
 80112d0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80112d2:	89b8      	ldrh	r0, [r7, #12]
 80112d4:	693b      	ldr	r3, [r7, #16]
 80112d6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80112da:	2303      	movs	r3, #3
 80112dc:	2237      	movs	r2, #55	; 0x37
 80112de:	f000 ff7f 	bl	80121e0 <dhcp_option>
 80112e2:	4603      	mov	r3, r0
 80112e4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80112e6:	2300      	movs	r3, #0
 80112e8:	77bb      	strb	r3, [r7, #30]
 80112ea:	e00e      	b.n	801130a <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80112ec:	89b8      	ldrh	r0, [r7, #12]
 80112ee:	693b      	ldr	r3, [r7, #16]
 80112f0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80112f4:	7fbb      	ldrb	r3, [r7, #30]
 80112f6:	4a30      	ldr	r2, [pc, #192]	; (80113b8 <dhcp_select+0x1e4>)
 80112f8:	5cd3      	ldrb	r3, [r2, r3]
 80112fa:	461a      	mov	r2, r3
 80112fc:	f000 ffa4 	bl	8012248 <dhcp_option_byte>
 8011300:	4603      	mov	r3, r0
 8011302:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011304:	7fbb      	ldrb	r3, [r7, #30]
 8011306:	3301      	adds	r3, #1
 8011308:	77bb      	strb	r3, [r7, #30]
 801130a:	7fbb      	ldrb	r3, [r7, #30]
 801130c:	2b02      	cmp	r3, #2
 801130e:	d9ed      	bls.n	80112ec <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011310:	89b8      	ldrh	r0, [r7, #12]
 8011312:	693b      	ldr	r3, [r7, #16]
 8011314:	33f0      	adds	r3, #240	; 0xf0
 8011316:	697a      	ldr	r2, [r7, #20]
 8011318:	4619      	mov	r1, r3
 801131a:	f001 fca9 	bl	8012c70 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801131e:	4b27      	ldr	r3, [pc, #156]	; (80113bc <dhcp_select+0x1e8>)
 8011320:	6818      	ldr	r0, [r3, #0]
 8011322:	4b27      	ldr	r3, [pc, #156]	; (80113c0 <dhcp_select+0x1ec>)
 8011324:	9301      	str	r3, [sp, #4]
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	9300      	str	r3, [sp, #0]
 801132a:	2343      	movs	r3, #67	; 0x43
 801132c:	4a25      	ldr	r2, [pc, #148]	; (80113c4 <dhcp_select+0x1f0>)
 801132e:	6979      	ldr	r1, [r7, #20]
 8011330:	f7ff fbda 	bl	8010ae8 <udp_sendto_if_src>
 8011334:	4603      	mov	r3, r0
 8011336:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8011338:	6978      	ldr	r0, [r7, #20]
 801133a:	f7f9 fc1f 	bl	800ab7c <pbuf_free>
 801133e:	e001      	b.n	8011344 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8011340:	23ff      	movs	r3, #255	; 0xff
 8011342:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8011344:	69bb      	ldr	r3, [r7, #24]
 8011346:	799b      	ldrb	r3, [r3, #6]
 8011348:	2bff      	cmp	r3, #255	; 0xff
 801134a:	d005      	beq.n	8011358 <dhcp_select+0x184>
    dhcp->tries++;
 801134c:	69bb      	ldr	r3, [r7, #24]
 801134e:	799b      	ldrb	r3, [r3, #6]
 8011350:	3301      	adds	r3, #1
 8011352:	b2da      	uxtb	r2, r3
 8011354:	69bb      	ldr	r3, [r7, #24]
 8011356:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8011358:	69bb      	ldr	r3, [r7, #24]
 801135a:	799b      	ldrb	r3, [r3, #6]
 801135c:	2b05      	cmp	r3, #5
 801135e:	d80d      	bhi.n	801137c <dhcp_select+0x1a8>
 8011360:	69bb      	ldr	r3, [r7, #24]
 8011362:	799b      	ldrb	r3, [r3, #6]
 8011364:	461a      	mov	r2, r3
 8011366:	2301      	movs	r3, #1
 8011368:	4093      	lsls	r3, r2
 801136a:	b29b      	uxth	r3, r3
 801136c:	461a      	mov	r2, r3
 801136e:	0152      	lsls	r2, r2, #5
 8011370:	1ad2      	subs	r2, r2, r3
 8011372:	0092      	lsls	r2, r2, #2
 8011374:	4413      	add	r3, r2
 8011376:	00db      	lsls	r3, r3, #3
 8011378:	b29b      	uxth	r3, r3
 801137a:	e001      	b.n	8011380 <dhcp_select+0x1ac>
 801137c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8011380:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011382:	89fb      	ldrh	r3, [r7, #14]
 8011384:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011388:	4a0f      	ldr	r2, [pc, #60]	; (80113c8 <dhcp_select+0x1f4>)
 801138a:	fb82 1203 	smull	r1, r2, r2, r3
 801138e:	1152      	asrs	r2, r2, #5
 8011390:	17db      	asrs	r3, r3, #31
 8011392:	1ad3      	subs	r3, r2, r3
 8011394:	b29a      	uxth	r2, r3
 8011396:	69bb      	ldr	r3, [r7, #24]
 8011398:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801139a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801139e:	4618      	mov	r0, r3
 80113a0:	3720      	adds	r7, #32
 80113a2:	46bd      	mov	sp, r7
 80113a4:	bdb0      	pop	{r4, r5, r7, pc}
 80113a6:	bf00      	nop
 80113a8:	08018a64 	.word	0x08018a64
 80113ac:	08018b10 	.word	0x08018b10
 80113b0:	08018ac4 	.word	0x08018ac4
 80113b4:	08018b2c 	.word	0x08018b2c
 80113b8:	20000030 	.word	0x20000030
 80113bc:	2000d400 	.word	0x2000d400
 80113c0:	08019630 	.word	0x08019630
 80113c4:	08019634 	.word	0x08019634
 80113c8:	10624dd3 	.word	0x10624dd3

080113cc <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 80113cc:	b580      	push	{r7, lr}
 80113ce:	b082      	sub	sp, #8
 80113d0:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 80113d2:	4b27      	ldr	r3, [pc, #156]	; (8011470 <dhcp_coarse_tmr+0xa4>)
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	607b      	str	r3, [r7, #4]
 80113d8:	e042      	b.n	8011460 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113de:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80113e0:	683b      	ldr	r3, [r7, #0]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d039      	beq.n	801145a <dhcp_coarse_tmr+0x8e>
 80113e6:	683b      	ldr	r3, [r7, #0]
 80113e8:	795b      	ldrb	r3, [r3, #5]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d035      	beq.n	801145a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80113ee:	683b      	ldr	r3, [r7, #0]
 80113f0:	8a9b      	ldrh	r3, [r3, #20]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d012      	beq.n	801141c <dhcp_coarse_tmr+0x50>
 80113f6:	683b      	ldr	r3, [r7, #0]
 80113f8:	8a5b      	ldrh	r3, [r3, #18]
 80113fa:	3301      	adds	r3, #1
 80113fc:	b29a      	uxth	r2, r3
 80113fe:	683b      	ldr	r3, [r7, #0]
 8011400:	825a      	strh	r2, [r3, #18]
 8011402:	683b      	ldr	r3, [r7, #0]
 8011404:	8a5a      	ldrh	r2, [r3, #18]
 8011406:	683b      	ldr	r3, [r7, #0]
 8011408:	8a9b      	ldrh	r3, [r3, #20]
 801140a:	429a      	cmp	r2, r3
 801140c:	d106      	bne.n	801141c <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801140e:	6878      	ldr	r0, [r7, #4]
 8011410:	f000 fe32 	bl	8012078 <dhcp_release_and_stop>
        dhcp_start(netif);
 8011414:	6878      	ldr	r0, [r7, #4]
 8011416:	f000 f969 	bl	80116ec <dhcp_start>
 801141a:	e01e      	b.n	801145a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801141c:	683b      	ldr	r3, [r7, #0]
 801141e:	8a1b      	ldrh	r3, [r3, #16]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d00b      	beq.n	801143c <dhcp_coarse_tmr+0x70>
 8011424:	683b      	ldr	r3, [r7, #0]
 8011426:	8a1b      	ldrh	r3, [r3, #16]
 8011428:	1e5a      	subs	r2, r3, #1
 801142a:	b291      	uxth	r1, r2
 801142c:	683a      	ldr	r2, [r7, #0]
 801142e:	8211      	strh	r1, [r2, #16]
 8011430:	2b01      	cmp	r3, #1
 8011432:	d103      	bne.n	801143c <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8011434:	6878      	ldr	r0, [r7, #4]
 8011436:	f000 f8c6 	bl	80115c6 <dhcp_t2_timeout>
 801143a:	e00e      	b.n	801145a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801143c:	683b      	ldr	r3, [r7, #0]
 801143e:	89db      	ldrh	r3, [r3, #14]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d00a      	beq.n	801145a <dhcp_coarse_tmr+0x8e>
 8011444:	683b      	ldr	r3, [r7, #0]
 8011446:	89db      	ldrh	r3, [r3, #14]
 8011448:	1e5a      	subs	r2, r3, #1
 801144a:	b291      	uxth	r1, r2
 801144c:	683a      	ldr	r2, [r7, #0]
 801144e:	81d1      	strh	r1, [r2, #14]
 8011450:	2b01      	cmp	r3, #1
 8011452:	d102      	bne.n	801145a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8011454:	6878      	ldr	r0, [r7, #4]
 8011456:	f000 f888 	bl	801156a <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	607b      	str	r3, [r7, #4]
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d1b9      	bne.n	80113da <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8011466:	bf00      	nop
 8011468:	bf00      	nop
 801146a:	3708      	adds	r7, #8
 801146c:	46bd      	mov	sp, r7
 801146e:	bd80      	pop	{r7, pc}
 8011470:	2000d36c 	.word	0x2000d36c

08011474 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8011474:	b580      	push	{r7, lr}
 8011476:	b082      	sub	sp, #8
 8011478:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801147a:	4b16      	ldr	r3, [pc, #88]	; (80114d4 <dhcp_fine_tmr+0x60>)
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	607b      	str	r3, [r7, #4]
 8011480:	e020      	b.n	80114c4 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011486:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8011488:	683b      	ldr	r3, [r7, #0]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d017      	beq.n	80114be <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801148e:	683b      	ldr	r3, [r7, #0]
 8011490:	891b      	ldrh	r3, [r3, #8]
 8011492:	2b01      	cmp	r3, #1
 8011494:	d906      	bls.n	80114a4 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8011496:	683b      	ldr	r3, [r7, #0]
 8011498:	891b      	ldrh	r3, [r3, #8]
 801149a:	3b01      	subs	r3, #1
 801149c:	b29a      	uxth	r2, r3
 801149e:	683b      	ldr	r3, [r7, #0]
 80114a0:	811a      	strh	r2, [r3, #8]
 80114a2:	e00c      	b.n	80114be <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 80114a4:	683b      	ldr	r3, [r7, #0]
 80114a6:	891b      	ldrh	r3, [r3, #8]
 80114a8:	2b01      	cmp	r3, #1
 80114aa:	d108      	bne.n	80114be <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 80114ac:	683b      	ldr	r3, [r7, #0]
 80114ae:	891b      	ldrh	r3, [r3, #8]
 80114b0:	3b01      	subs	r3, #1
 80114b2:	b29a      	uxth	r2, r3
 80114b4:	683b      	ldr	r3, [r7, #0]
 80114b6:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 80114b8:	6878      	ldr	r0, [r7, #4]
 80114ba:	f000 f80d 	bl	80114d8 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	607b      	str	r3, [r7, #4]
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d1db      	bne.n	8011482 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 80114ca:	bf00      	nop
 80114cc:	bf00      	nop
 80114ce:	3708      	adds	r7, #8
 80114d0:	46bd      	mov	sp, r7
 80114d2:	bd80      	pop	{r7, pc}
 80114d4:	2000d36c 	.word	0x2000d36c

080114d8 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b084      	sub	sp, #16
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114e4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	795b      	ldrb	r3, [r3, #5]
 80114ea:	2b0c      	cmp	r3, #12
 80114ec:	d003      	beq.n	80114f6 <dhcp_timeout+0x1e>
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	795b      	ldrb	r3, [r3, #5]
 80114f2:	2b06      	cmp	r3, #6
 80114f4:	d103      	bne.n	80114fe <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 80114f6:	6878      	ldr	r0, [r7, #4]
 80114f8:	f000 fa54 	bl	80119a4 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 80114fc:	e031      	b.n	8011562 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	795b      	ldrb	r3, [r3, #5]
 8011502:	2b01      	cmp	r3, #1
 8011504:	d10e      	bne.n	8011524 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	799b      	ldrb	r3, [r3, #6]
 801150a:	2b05      	cmp	r3, #5
 801150c:	d803      	bhi.n	8011516 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801150e:	6878      	ldr	r0, [r7, #4]
 8011510:	f7ff fe60 	bl	80111d4 <dhcp_select>
}
 8011514:	e025      	b.n	8011562 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8011516:	6878      	ldr	r0, [r7, #4]
 8011518:	f000 fdae 	bl	8012078 <dhcp_release_and_stop>
      dhcp_start(netif);
 801151c:	6878      	ldr	r0, [r7, #4]
 801151e:	f000 f8e5 	bl	80116ec <dhcp_start>
}
 8011522:	e01e      	b.n	8011562 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	795b      	ldrb	r3, [r3, #5]
 8011528:	2b08      	cmp	r3, #8
 801152a:	d10b      	bne.n	8011544 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	799b      	ldrb	r3, [r3, #6]
 8011530:	2b01      	cmp	r3, #1
 8011532:	d803      	bhi.n	801153c <dhcp_timeout+0x64>
      dhcp_check(netif);
 8011534:	6878      	ldr	r0, [r7, #4]
 8011536:	f7ff fdf3 	bl	8011120 <dhcp_check>
}
 801153a:	e012      	b.n	8011562 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 801153c:	6878      	ldr	r0, [r7, #4]
 801153e:	f000 fad3 	bl	8011ae8 <dhcp_bind>
}
 8011542:	e00e      	b.n	8011562 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	795b      	ldrb	r3, [r3, #5]
 8011548:	2b03      	cmp	r3, #3
 801154a:	d10a      	bne.n	8011562 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	799b      	ldrb	r3, [r3, #6]
 8011550:	2b01      	cmp	r3, #1
 8011552:	d803      	bhi.n	801155c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8011554:	6878      	ldr	r0, [r7, #4]
 8011556:	f000 fcd9 	bl	8011f0c <dhcp_reboot>
}
 801155a:	e002      	b.n	8011562 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801155c:	6878      	ldr	r0, [r7, #4]
 801155e:	f000 fa21 	bl	80119a4 <dhcp_discover>
}
 8011562:	bf00      	nop
 8011564:	3710      	adds	r7, #16
 8011566:	46bd      	mov	sp, r7
 8011568:	bd80      	pop	{r7, pc}

0801156a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801156a:	b580      	push	{r7, lr}
 801156c:	b084      	sub	sp, #16
 801156e:	af00      	add	r7, sp, #0
 8011570:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011576:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	795b      	ldrb	r3, [r3, #5]
 801157c:	2b01      	cmp	r3, #1
 801157e:	d007      	beq.n	8011590 <dhcp_t1_timeout+0x26>
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	795b      	ldrb	r3, [r3, #5]
 8011584:	2b0a      	cmp	r3, #10
 8011586:	d003      	beq.n	8011590 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801158c:	2b05      	cmp	r3, #5
 801158e:	d116      	bne.n	80115be <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8011590:	6878      	ldr	r0, [r7, #4]
 8011592:	f000 fb83 	bl	8011c9c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	899b      	ldrh	r3, [r3, #12]
 801159a:	461a      	mov	r2, r3
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	8a5b      	ldrh	r3, [r3, #18]
 80115a0:	1ad3      	subs	r3, r2, r3
 80115a2:	2b01      	cmp	r3, #1
 80115a4:	dd0b      	ble.n	80115be <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	899b      	ldrh	r3, [r3, #12]
 80115aa:	461a      	mov	r2, r3
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	8a5b      	ldrh	r3, [r3, #18]
 80115b0:	1ad3      	subs	r3, r2, r3
 80115b2:	0fda      	lsrs	r2, r3, #31
 80115b4:	4413      	add	r3, r2
 80115b6:	105b      	asrs	r3, r3, #1
 80115b8:	b29a      	uxth	r2, r3
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	81da      	strh	r2, [r3, #14]
    }
  }
}
 80115be:	bf00      	nop
 80115c0:	3710      	adds	r7, #16
 80115c2:	46bd      	mov	sp, r7
 80115c4:	bd80      	pop	{r7, pc}

080115c6 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 80115c6:	b580      	push	{r7, lr}
 80115c8:	b084      	sub	sp, #16
 80115ca:	af00      	add	r7, sp, #0
 80115cc:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115d2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	795b      	ldrb	r3, [r3, #5]
 80115d8:	2b01      	cmp	r3, #1
 80115da:	d00b      	beq.n	80115f4 <dhcp_t2_timeout+0x2e>
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	795b      	ldrb	r3, [r3, #5]
 80115e0:	2b0a      	cmp	r3, #10
 80115e2:	d007      	beq.n	80115f4 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80115e8:	2b05      	cmp	r3, #5
 80115ea:	d003      	beq.n	80115f4 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	795b      	ldrb	r3, [r3, #5]
 80115f0:	2b04      	cmp	r3, #4
 80115f2:	d116      	bne.n	8011622 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80115f4:	6878      	ldr	r0, [r7, #4]
 80115f6:	f000 fbed 	bl	8011dd4 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	8a9b      	ldrh	r3, [r3, #20]
 80115fe:	461a      	mov	r2, r3
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	8a5b      	ldrh	r3, [r3, #18]
 8011604:	1ad3      	subs	r3, r2, r3
 8011606:	2b01      	cmp	r3, #1
 8011608:	dd0b      	ble.n	8011622 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	8a9b      	ldrh	r3, [r3, #20]
 801160e:	461a      	mov	r2, r3
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	8a5b      	ldrh	r3, [r3, #18]
 8011614:	1ad3      	subs	r3, r2, r3
 8011616:	0fda      	lsrs	r2, r3, #31
 8011618:	4413      	add	r3, r2
 801161a:	105b      	asrs	r3, r3, #1
 801161c:	b29a      	uxth	r2, r3
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8011622:	bf00      	nop
 8011624:	3710      	adds	r7, #16
 8011626:	46bd      	mov	sp, r7
 8011628:	bd80      	pop	{r7, pc}
	...

0801162c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 801162c:	b580      	push	{r7, lr}
 801162e:	b084      	sub	sp, #16
 8011630:	af00      	add	r7, sp, #0
 8011632:	6078      	str	r0, [r7, #4]
 8011634:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801163a:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	2200      	movs	r2, #0
 8011640:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	2200      	movs	r2, #0
 8011646:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8011648:	4b26      	ldr	r3, [pc, #152]	; (80116e4 <dhcp_handle_ack+0xb8>)
 801164a:	78db      	ldrb	r3, [r3, #3]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d003      	beq.n	8011658 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8011650:	4b25      	ldr	r3, [pc, #148]	; (80116e8 <dhcp_handle_ack+0xbc>)
 8011652:	68da      	ldr	r2, [r3, #12]
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8011658:	4b22      	ldr	r3, [pc, #136]	; (80116e4 <dhcp_handle_ack+0xb8>)
 801165a:	791b      	ldrb	r3, [r3, #4]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d004      	beq.n	801166a <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8011660:	4b21      	ldr	r3, [pc, #132]	; (80116e8 <dhcp_handle_ack+0xbc>)
 8011662:	691a      	ldr	r2, [r3, #16]
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	62da      	str	r2, [r3, #44]	; 0x2c
 8011668:	e004      	b.n	8011674 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801166e:	085a      	lsrs	r2, r3, #1
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8011674:	4b1b      	ldr	r3, [pc, #108]	; (80116e4 <dhcp_handle_ack+0xb8>)
 8011676:	795b      	ldrb	r3, [r3, #5]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d004      	beq.n	8011686 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801167c:	4b1a      	ldr	r3, [pc, #104]	; (80116e8 <dhcp_handle_ack+0xbc>)
 801167e:	695a      	ldr	r2, [r3, #20]
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	631a      	str	r2, [r3, #48]	; 0x30
 8011684:	e007      	b.n	8011696 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801168a:	4613      	mov	r3, r2
 801168c:	00db      	lsls	r3, r3, #3
 801168e:	1a9b      	subs	r3, r3, r2
 8011690:	08da      	lsrs	r2, r3, #3
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8011696:	683b      	ldr	r3, [r7, #0]
 8011698:	691a      	ldr	r2, [r3, #16]
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801169e:	4b11      	ldr	r3, [pc, #68]	; (80116e4 <dhcp_handle_ack+0xb8>)
 80116a0:	799b      	ldrb	r3, [r3, #6]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d00b      	beq.n	80116be <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80116a6:	4b10      	ldr	r3, [pc, #64]	; (80116e8 <dhcp_handle_ack+0xbc>)
 80116a8:	699b      	ldr	r3, [r3, #24]
 80116aa:	4618      	mov	r0, r3
 80116ac:	f7f7 fe7d 	bl	80093aa <lwip_htonl>
 80116b0:	4602      	mov	r2, r0
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	2201      	movs	r2, #1
 80116ba:	71da      	strb	r2, [r3, #7]
 80116bc:	e002      	b.n	80116c4 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	2200      	movs	r2, #0
 80116c2:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80116c4:	4b07      	ldr	r3, [pc, #28]	; (80116e4 <dhcp_handle_ack+0xb8>)
 80116c6:	79db      	ldrb	r3, [r3, #7]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d007      	beq.n	80116dc <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80116cc:	4b06      	ldr	r3, [pc, #24]	; (80116e8 <dhcp_handle_ack+0xbc>)
 80116ce:	69db      	ldr	r3, [r3, #28]
 80116d0:	4618      	mov	r0, r3
 80116d2:	f7f7 fe6a 	bl	80093aa <lwip_htonl>
 80116d6:	4602      	mov	r2, r0
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80116dc:	bf00      	nop
 80116de:	3710      	adds	r7, #16
 80116e0:	46bd      	mov	sp, r7
 80116e2:	bd80      	pop	{r7, pc}
 80116e4:	2000d3f8 	.word	0x2000d3f8
 80116e8:	2000d3d8 	.word	0x2000d3d8

080116ec <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 80116ec:	b580      	push	{r7, lr}
 80116ee:	b084      	sub	sp, #16
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d109      	bne.n	801170e <dhcp_start+0x22>
 80116fa:	4b37      	ldr	r3, [pc, #220]	; (80117d8 <dhcp_start+0xec>)
 80116fc:	f240 22e7 	movw	r2, #743	; 0x2e7
 8011700:	4936      	ldr	r1, [pc, #216]	; (80117dc <dhcp_start+0xf0>)
 8011702:	4837      	ldr	r0, [pc, #220]	; (80117e0 <dhcp_start+0xf4>)
 8011704:	f003 ff2c 	bl	8015560 <iprintf>
 8011708:	f06f 030f 	mvn.w	r3, #15
 801170c:	e060      	b.n	80117d0 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011714:	f003 0301 	and.w	r3, r3, #1
 8011718:	2b00      	cmp	r3, #0
 801171a:	d109      	bne.n	8011730 <dhcp_start+0x44>
 801171c:	4b2e      	ldr	r3, [pc, #184]	; (80117d8 <dhcp_start+0xec>)
 801171e:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8011722:	4930      	ldr	r1, [pc, #192]	; (80117e4 <dhcp_start+0xf8>)
 8011724:	482e      	ldr	r0, [pc, #184]	; (80117e0 <dhcp_start+0xf4>)
 8011726:	f003 ff1b 	bl	8015560 <iprintf>
 801172a:	f06f 030f 	mvn.w	r3, #15
 801172e:	e04f      	b.n	80117d0 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011734:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801173a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801173e:	d202      	bcs.n	8011746 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8011740:	f04f 33ff 	mov.w	r3, #4294967295
 8011744:	e044      	b.n	80117d0 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d10d      	bne.n	8011768 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801174c:	2034      	movs	r0, #52	; 0x34
 801174e:	f7f8 f94b 	bl	80099e8 <mem_malloc>
 8011752:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d102      	bne.n	8011760 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801175a:	f04f 33ff 	mov.w	r3, #4294967295
 801175e:	e037      	b.n	80117d0 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	68fa      	ldr	r2, [r7, #12]
 8011764:	625a      	str	r2, [r3, #36]	; 0x24
 8011766:	e005      	b.n	8011774 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	791b      	ldrb	r3, [r3, #4]
 801176c:	2b00      	cmp	r3, #0
 801176e:	d001      	beq.n	8011774 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8011770:	f7ff fc92 	bl	8011098 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8011774:	2234      	movs	r2, #52	; 0x34
 8011776:	2100      	movs	r1, #0
 8011778:	68f8      	ldr	r0, [r7, #12]
 801177a:	f003 fee9 	bl	8015550 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801177e:	f7ff fc39 	bl	8010ff4 <dhcp_inc_pcb_refcount>
 8011782:	4603      	mov	r3, r0
 8011784:	2b00      	cmp	r3, #0
 8011786:	d002      	beq.n	801178e <dhcp_start+0xa2>
    return ERR_MEM;
 8011788:	f04f 33ff 	mov.w	r3, #4294967295
 801178c:	e020      	b.n	80117d0 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	2201      	movs	r2, #1
 8011792:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801179a:	f003 0304 	and.w	r3, r3, #4
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d105      	bne.n	80117ae <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 80117a2:	2102      	movs	r1, #2
 80117a4:	68f8      	ldr	r0, [r7, #12]
 80117a6:	f000 fd01 	bl	80121ac <dhcp_set_state>
    return ERR_OK;
 80117aa:	2300      	movs	r3, #0
 80117ac:	e010      	b.n	80117d0 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80117ae:	6878      	ldr	r0, [r7, #4]
 80117b0:	f000 f8f8 	bl	80119a4 <dhcp_discover>
 80117b4:	4603      	mov	r3, r0
 80117b6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80117b8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d005      	beq.n	80117cc <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 80117c0:	6878      	ldr	r0, [r7, #4]
 80117c2:	f000 fc59 	bl	8012078 <dhcp_release_and_stop>
    return ERR_MEM;
 80117c6:	f04f 33ff 	mov.w	r3, #4294967295
 80117ca:	e001      	b.n	80117d0 <dhcp_start+0xe4>
  }
  return result;
 80117cc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80117d0:	4618      	mov	r0, r3
 80117d2:	3710      	adds	r7, #16
 80117d4:	46bd      	mov	sp, r7
 80117d6:	bd80      	pop	{r7, pc}
 80117d8:	08018a64 	.word	0x08018a64
 80117dc:	08018b48 	.word	0x08018b48
 80117e0:	08018ac4 	.word	0x08018ac4
 80117e4:	08018b8c 	.word	0x08018b8c

080117e8 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 80117e8:	b580      	push	{r7, lr}
 80117ea:	b084      	sub	sp, #16
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117f4:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d025      	beq.n	8011848 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	795b      	ldrb	r3, [r3, #5]
 8011800:	2b0a      	cmp	r3, #10
 8011802:	d008      	beq.n	8011816 <dhcp_network_changed+0x2e>
 8011804:	2b0a      	cmp	r3, #10
 8011806:	dc0d      	bgt.n	8011824 <dhcp_network_changed+0x3c>
 8011808:	2b00      	cmp	r3, #0
 801180a:	d01f      	beq.n	801184c <dhcp_network_changed+0x64>
 801180c:	2b00      	cmp	r3, #0
 801180e:	db09      	blt.n	8011824 <dhcp_network_changed+0x3c>
 8011810:	3b03      	subs	r3, #3
 8011812:	2b02      	cmp	r3, #2
 8011814:	d806      	bhi.n	8011824 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	2200      	movs	r2, #0
 801181a:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 801181c:	6878      	ldr	r0, [r7, #4]
 801181e:	f000 fb75 	bl	8011f0c <dhcp_reboot>
      break;
 8011822:	e014      	b.n	801184e <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	795b      	ldrb	r3, [r3, #5]
 8011828:	2b0c      	cmp	r3, #12
 801182a:	d906      	bls.n	801183a <dhcp_network_changed+0x52>
 801182c:	4b09      	ldr	r3, [pc, #36]	; (8011854 <dhcp_network_changed+0x6c>)
 801182e:	f240 326d 	movw	r2, #877	; 0x36d
 8011832:	4909      	ldr	r1, [pc, #36]	; (8011858 <dhcp_network_changed+0x70>)
 8011834:	4809      	ldr	r0, [pc, #36]	; (801185c <dhcp_network_changed+0x74>)
 8011836:	f003 fe93 	bl	8015560 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	2200      	movs	r2, #0
 801183e:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8011840:	6878      	ldr	r0, [r7, #4]
 8011842:	f000 f8af 	bl	80119a4 <dhcp_discover>
      break;
 8011846:	e002      	b.n	801184e <dhcp_network_changed+0x66>
    return;
 8011848:	bf00      	nop
 801184a:	e000      	b.n	801184e <dhcp_network_changed+0x66>
      break;
 801184c:	bf00      	nop
  }
}
 801184e:	3710      	adds	r7, #16
 8011850:	46bd      	mov	sp, r7
 8011852:	bd80      	pop	{r7, pc}
 8011854:	08018a64 	.word	0x08018a64
 8011858:	08018bb0 	.word	0x08018bb0
 801185c:	08018ac4 	.word	0x08018ac4

08011860 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b084      	sub	sp, #16
 8011864:	af00      	add	r7, sp, #0
 8011866:	6078      	str	r0, [r7, #4]
 8011868:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d107      	bne.n	8011880 <dhcp_arp_reply+0x20>
 8011870:	4b0e      	ldr	r3, [pc, #56]	; (80118ac <dhcp_arp_reply+0x4c>)
 8011872:	f240 328b 	movw	r2, #907	; 0x38b
 8011876:	490e      	ldr	r1, [pc, #56]	; (80118b0 <dhcp_arp_reply+0x50>)
 8011878:	480e      	ldr	r0, [pc, #56]	; (80118b4 <dhcp_arp_reply+0x54>)
 801187a:	f003 fe71 	bl	8015560 <iprintf>
 801187e:	e012      	b.n	80118a6 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011884:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	2b00      	cmp	r3, #0
 801188a:	d00c      	beq.n	80118a6 <dhcp_arp_reply+0x46>
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	795b      	ldrb	r3, [r3, #5]
 8011890:	2b08      	cmp	r3, #8
 8011892:	d108      	bne.n	80118a6 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8011894:	683b      	ldr	r3, [r7, #0]
 8011896:	681a      	ldr	r2, [r3, #0]
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	69db      	ldr	r3, [r3, #28]
 801189c:	429a      	cmp	r2, r3
 801189e:	d102      	bne.n	80118a6 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80118a0:	6878      	ldr	r0, [r7, #4]
 80118a2:	f000 f809 	bl	80118b8 <dhcp_decline>
    }
  }
}
 80118a6:	3710      	adds	r7, #16
 80118a8:	46bd      	mov	sp, r7
 80118aa:	bd80      	pop	{r7, pc}
 80118ac:	08018a64 	.word	0x08018a64
 80118b0:	08018b48 	.word	0x08018b48
 80118b4:	08018ac4 	.word	0x08018ac4

080118b8 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80118b8:	b5b0      	push	{r4, r5, r7, lr}
 80118ba:	b08a      	sub	sp, #40	; 0x28
 80118bc:	af02      	add	r7, sp, #8
 80118be:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118c4:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80118c6:	210c      	movs	r1, #12
 80118c8:	69b8      	ldr	r0, [r7, #24]
 80118ca:	f000 fc6f 	bl	80121ac <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80118ce:	f107 030c 	add.w	r3, r7, #12
 80118d2:	2204      	movs	r2, #4
 80118d4:	69b9      	ldr	r1, [r7, #24]
 80118d6:	6878      	ldr	r0, [r7, #4]
 80118d8:	f001 f8f4 	bl	8012ac4 <dhcp_create_msg>
 80118dc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80118de:	697b      	ldr	r3, [r7, #20]
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d035      	beq.n	8011950 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80118e4:	697b      	ldr	r3, [r7, #20]
 80118e6:	685b      	ldr	r3, [r3, #4]
 80118e8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80118ea:	89b8      	ldrh	r0, [r7, #12]
 80118ec:	693b      	ldr	r3, [r7, #16]
 80118ee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80118f2:	2304      	movs	r3, #4
 80118f4:	2232      	movs	r2, #50	; 0x32
 80118f6:	f000 fc73 	bl	80121e0 <dhcp_option>
 80118fa:	4603      	mov	r3, r0
 80118fc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80118fe:	89bc      	ldrh	r4, [r7, #12]
 8011900:	693b      	ldr	r3, [r7, #16]
 8011902:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8011906:	69bb      	ldr	r3, [r7, #24]
 8011908:	69db      	ldr	r3, [r3, #28]
 801190a:	4618      	mov	r0, r3
 801190c:	f7f7 fd4d 	bl	80093aa <lwip_htonl>
 8011910:	4603      	mov	r3, r0
 8011912:	461a      	mov	r2, r3
 8011914:	4629      	mov	r1, r5
 8011916:	4620      	mov	r0, r4
 8011918:	f000 fcee 	bl	80122f8 <dhcp_option_long>
 801191c:	4603      	mov	r3, r0
 801191e:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011920:	89b8      	ldrh	r0, [r7, #12]
 8011922:	693b      	ldr	r3, [r7, #16]
 8011924:	33f0      	adds	r3, #240	; 0xf0
 8011926:	697a      	ldr	r2, [r7, #20]
 8011928:	4619      	mov	r1, r3
 801192a:	f001 f9a1 	bl	8012c70 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801192e:	4b19      	ldr	r3, [pc, #100]	; (8011994 <dhcp_decline+0xdc>)
 8011930:	6818      	ldr	r0, [r3, #0]
 8011932:	4b19      	ldr	r3, [pc, #100]	; (8011998 <dhcp_decline+0xe0>)
 8011934:	9301      	str	r3, [sp, #4]
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	9300      	str	r3, [sp, #0]
 801193a:	2343      	movs	r3, #67	; 0x43
 801193c:	4a17      	ldr	r2, [pc, #92]	; (801199c <dhcp_decline+0xe4>)
 801193e:	6979      	ldr	r1, [r7, #20]
 8011940:	f7ff f8d2 	bl	8010ae8 <udp_sendto_if_src>
 8011944:	4603      	mov	r3, r0
 8011946:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8011948:	6978      	ldr	r0, [r7, #20]
 801194a:	f7f9 f917 	bl	800ab7c <pbuf_free>
 801194e:	e001      	b.n	8011954 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8011950:	23ff      	movs	r3, #255	; 0xff
 8011952:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8011954:	69bb      	ldr	r3, [r7, #24]
 8011956:	799b      	ldrb	r3, [r3, #6]
 8011958:	2bff      	cmp	r3, #255	; 0xff
 801195a:	d005      	beq.n	8011968 <dhcp_decline+0xb0>
    dhcp->tries++;
 801195c:	69bb      	ldr	r3, [r7, #24]
 801195e:	799b      	ldrb	r3, [r3, #6]
 8011960:	3301      	adds	r3, #1
 8011962:	b2da      	uxtb	r2, r3
 8011964:	69bb      	ldr	r3, [r7, #24]
 8011966:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8011968:	f242 7310 	movw	r3, #10000	; 0x2710
 801196c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801196e:	89fb      	ldrh	r3, [r7, #14]
 8011970:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011974:	4a0a      	ldr	r2, [pc, #40]	; (80119a0 <dhcp_decline+0xe8>)
 8011976:	fb82 1203 	smull	r1, r2, r2, r3
 801197a:	1152      	asrs	r2, r2, #5
 801197c:	17db      	asrs	r3, r3, #31
 801197e:	1ad3      	subs	r3, r2, r3
 8011980:	b29a      	uxth	r2, r3
 8011982:	69bb      	ldr	r3, [r7, #24]
 8011984:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011986:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801198a:	4618      	mov	r0, r3
 801198c:	3720      	adds	r7, #32
 801198e:	46bd      	mov	sp, r7
 8011990:	bdb0      	pop	{r4, r5, r7, pc}
 8011992:	bf00      	nop
 8011994:	2000d400 	.word	0x2000d400
 8011998:	08019630 	.word	0x08019630
 801199c:	08019634 	.word	0x08019634
 80119a0:	10624dd3 	.word	0x10624dd3

080119a4 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80119a4:	b580      	push	{r7, lr}
 80119a6:	b08a      	sub	sp, #40	; 0x28
 80119a8:	af02      	add	r7, sp, #8
 80119aa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119b0:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 80119b2:	2300      	movs	r3, #0
 80119b4:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80119b6:	69bb      	ldr	r3, [r7, #24]
 80119b8:	2200      	movs	r2, #0
 80119ba:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80119bc:	2106      	movs	r1, #6
 80119be:	69b8      	ldr	r0, [r7, #24]
 80119c0:	f000 fbf4 	bl	80121ac <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 80119c4:	f107 0308 	add.w	r3, r7, #8
 80119c8:	2201      	movs	r2, #1
 80119ca:	69b9      	ldr	r1, [r7, #24]
 80119cc:	6878      	ldr	r0, [r7, #4]
 80119ce:	f001 f879 	bl	8012ac4 <dhcp_create_msg>
 80119d2:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 80119d4:	693b      	ldr	r3, [r7, #16]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d04b      	beq.n	8011a72 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80119da:	693b      	ldr	r3, [r7, #16]
 80119dc:	685b      	ldr	r3, [r3, #4]
 80119de:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80119e0:	8938      	ldrh	r0, [r7, #8]
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80119e8:	2302      	movs	r3, #2
 80119ea:	2239      	movs	r2, #57	; 0x39
 80119ec:	f000 fbf8 	bl	80121e0 <dhcp_option>
 80119f0:	4603      	mov	r3, r0
 80119f2:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80119f4:	8938      	ldrh	r0, [r7, #8]
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011a00:	461a      	mov	r2, r3
 8011a02:	f000 fc47 	bl	8012294 <dhcp_option_short>
 8011a06:	4603      	mov	r3, r0
 8011a08:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011a0a:	8938      	ldrh	r0, [r7, #8]
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011a12:	2303      	movs	r3, #3
 8011a14:	2237      	movs	r2, #55	; 0x37
 8011a16:	f000 fbe3 	bl	80121e0 <dhcp_option>
 8011a1a:	4603      	mov	r3, r0
 8011a1c:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011a1e:	2300      	movs	r3, #0
 8011a20:	77fb      	strb	r3, [r7, #31]
 8011a22:	e00e      	b.n	8011a42 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011a24:	8938      	ldrh	r0, [r7, #8]
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011a2c:	7ffb      	ldrb	r3, [r7, #31]
 8011a2e:	4a29      	ldr	r2, [pc, #164]	; (8011ad4 <dhcp_discover+0x130>)
 8011a30:	5cd3      	ldrb	r3, [r2, r3]
 8011a32:	461a      	mov	r2, r3
 8011a34:	f000 fc08 	bl	8012248 <dhcp_option_byte>
 8011a38:	4603      	mov	r3, r0
 8011a3a:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011a3c:	7ffb      	ldrb	r3, [r7, #31]
 8011a3e:	3301      	adds	r3, #1
 8011a40:	77fb      	strb	r3, [r7, #31]
 8011a42:	7ffb      	ldrb	r3, [r7, #31]
 8011a44:	2b02      	cmp	r3, #2
 8011a46:	d9ed      	bls.n	8011a24 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011a48:	8938      	ldrh	r0, [r7, #8]
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	33f0      	adds	r3, #240	; 0xf0
 8011a4e:	693a      	ldr	r2, [r7, #16]
 8011a50:	4619      	mov	r1, r3
 8011a52:	f001 f90d 	bl	8012c70 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8011a56:	4b20      	ldr	r3, [pc, #128]	; (8011ad8 <dhcp_discover+0x134>)
 8011a58:	6818      	ldr	r0, [r3, #0]
 8011a5a:	4b20      	ldr	r3, [pc, #128]	; (8011adc <dhcp_discover+0x138>)
 8011a5c:	9301      	str	r3, [sp, #4]
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	9300      	str	r3, [sp, #0]
 8011a62:	2343      	movs	r3, #67	; 0x43
 8011a64:	4a1e      	ldr	r2, [pc, #120]	; (8011ae0 <dhcp_discover+0x13c>)
 8011a66:	6939      	ldr	r1, [r7, #16]
 8011a68:	f7ff f83e 	bl	8010ae8 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8011a6c:	6938      	ldr	r0, [r7, #16]
 8011a6e:	f7f9 f885 	bl	800ab7c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8011a72:	69bb      	ldr	r3, [r7, #24]
 8011a74:	799b      	ldrb	r3, [r3, #6]
 8011a76:	2bff      	cmp	r3, #255	; 0xff
 8011a78:	d005      	beq.n	8011a86 <dhcp_discover+0xe2>
    dhcp->tries++;
 8011a7a:	69bb      	ldr	r3, [r7, #24]
 8011a7c:	799b      	ldrb	r3, [r3, #6]
 8011a7e:	3301      	adds	r3, #1
 8011a80:	b2da      	uxtb	r2, r3
 8011a82:	69bb      	ldr	r3, [r7, #24]
 8011a84:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8011a86:	69bb      	ldr	r3, [r7, #24]
 8011a88:	799b      	ldrb	r3, [r3, #6]
 8011a8a:	2b05      	cmp	r3, #5
 8011a8c:	d80d      	bhi.n	8011aaa <dhcp_discover+0x106>
 8011a8e:	69bb      	ldr	r3, [r7, #24]
 8011a90:	799b      	ldrb	r3, [r3, #6]
 8011a92:	461a      	mov	r2, r3
 8011a94:	2301      	movs	r3, #1
 8011a96:	4093      	lsls	r3, r2
 8011a98:	b29b      	uxth	r3, r3
 8011a9a:	461a      	mov	r2, r3
 8011a9c:	0152      	lsls	r2, r2, #5
 8011a9e:	1ad2      	subs	r2, r2, r3
 8011aa0:	0092      	lsls	r2, r2, #2
 8011aa2:	4413      	add	r3, r2
 8011aa4:	00db      	lsls	r3, r3, #3
 8011aa6:	b29b      	uxth	r3, r3
 8011aa8:	e001      	b.n	8011aae <dhcp_discover+0x10a>
 8011aaa:	f64e 2360 	movw	r3, #60000	; 0xea60
 8011aae:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011ab0:	897b      	ldrh	r3, [r7, #10]
 8011ab2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011ab6:	4a0b      	ldr	r2, [pc, #44]	; (8011ae4 <dhcp_discover+0x140>)
 8011ab8:	fb82 1203 	smull	r1, r2, r2, r3
 8011abc:	1152      	asrs	r2, r2, #5
 8011abe:	17db      	asrs	r3, r3, #31
 8011ac0:	1ad3      	subs	r3, r2, r3
 8011ac2:	b29a      	uxth	r2, r3
 8011ac4:	69bb      	ldr	r3, [r7, #24]
 8011ac6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011ac8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011acc:	4618      	mov	r0, r3
 8011ace:	3720      	adds	r7, #32
 8011ad0:	46bd      	mov	sp, r7
 8011ad2:	bd80      	pop	{r7, pc}
 8011ad4:	20000030 	.word	0x20000030
 8011ad8:	2000d400 	.word	0x2000d400
 8011adc:	08019630 	.word	0x08019630
 8011ae0:	08019634 	.word	0x08019634
 8011ae4:	10624dd3 	.word	0x10624dd3

08011ae8 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8011ae8:	b580      	push	{r7, lr}
 8011aea:	b088      	sub	sp, #32
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d107      	bne.n	8011b06 <dhcp_bind+0x1e>
 8011af6:	4b64      	ldr	r3, [pc, #400]	; (8011c88 <dhcp_bind+0x1a0>)
 8011af8:	f240 4215 	movw	r2, #1045	; 0x415
 8011afc:	4963      	ldr	r1, [pc, #396]	; (8011c8c <dhcp_bind+0x1a4>)
 8011afe:	4864      	ldr	r0, [pc, #400]	; (8011c90 <dhcp_bind+0x1a8>)
 8011b00:	f003 fd2e 	bl	8015560 <iprintf>
 8011b04:	e0bc      	b.n	8011c80 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b0a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8011b0c:	69bb      	ldr	r3, [r7, #24]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d107      	bne.n	8011b22 <dhcp_bind+0x3a>
 8011b12:	4b5d      	ldr	r3, [pc, #372]	; (8011c88 <dhcp_bind+0x1a0>)
 8011b14:	f240 4217 	movw	r2, #1047	; 0x417
 8011b18:	495e      	ldr	r1, [pc, #376]	; (8011c94 <dhcp_bind+0x1ac>)
 8011b1a:	485d      	ldr	r0, [pc, #372]	; (8011c90 <dhcp_bind+0x1a8>)
 8011b1c:	f003 fd20 	bl	8015560 <iprintf>
 8011b20:	e0ae      	b.n	8011c80 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8011b22:	69bb      	ldr	r3, [r7, #24]
 8011b24:	2200      	movs	r2, #0
 8011b26:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8011b28:	69bb      	ldr	r3, [r7, #24]
 8011b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b30:	d019      	beq.n	8011b66 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8011b32:	69bb      	ldr	r3, [r7, #24]
 8011b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b36:	331e      	adds	r3, #30
 8011b38:	4a57      	ldr	r2, [pc, #348]	; (8011c98 <dhcp_bind+0x1b0>)
 8011b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8011b3e:	095b      	lsrs	r3, r3, #5
 8011b40:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8011b42:	69fb      	ldr	r3, [r7, #28]
 8011b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011b48:	d302      	bcc.n	8011b50 <dhcp_bind+0x68>
      timeout = 0xffff;
 8011b4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011b4e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8011b50:	69fb      	ldr	r3, [r7, #28]
 8011b52:	b29a      	uxth	r2, r3
 8011b54:	69bb      	ldr	r3, [r7, #24]
 8011b56:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8011b58:	69bb      	ldr	r3, [r7, #24]
 8011b5a:	8a9b      	ldrh	r3, [r3, #20]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d102      	bne.n	8011b66 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8011b60:	69bb      	ldr	r3, [r7, #24]
 8011b62:	2201      	movs	r2, #1
 8011b64:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8011b66:	69bb      	ldr	r3, [r7, #24]
 8011b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b6e:	d01d      	beq.n	8011bac <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8011b70:	69bb      	ldr	r3, [r7, #24]
 8011b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b74:	331e      	adds	r3, #30
 8011b76:	4a48      	ldr	r2, [pc, #288]	; (8011c98 <dhcp_bind+0x1b0>)
 8011b78:	fba2 2303 	umull	r2, r3, r2, r3
 8011b7c:	095b      	lsrs	r3, r3, #5
 8011b7e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8011b80:	69fb      	ldr	r3, [r7, #28]
 8011b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011b86:	d302      	bcc.n	8011b8e <dhcp_bind+0xa6>
      timeout = 0xffff;
 8011b88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011b8c:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8011b8e:	69fb      	ldr	r3, [r7, #28]
 8011b90:	b29a      	uxth	r2, r3
 8011b92:	69bb      	ldr	r3, [r7, #24]
 8011b94:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8011b96:	69bb      	ldr	r3, [r7, #24]
 8011b98:	895b      	ldrh	r3, [r3, #10]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d102      	bne.n	8011ba4 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8011b9e:	69bb      	ldr	r3, [r7, #24]
 8011ba0:	2201      	movs	r2, #1
 8011ba2:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8011ba4:	69bb      	ldr	r3, [r7, #24]
 8011ba6:	895a      	ldrh	r2, [r3, #10]
 8011ba8:	69bb      	ldr	r3, [r7, #24]
 8011baa:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8011bac:	69bb      	ldr	r3, [r7, #24]
 8011bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bb4:	d01d      	beq.n	8011bf2 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8011bb6:	69bb      	ldr	r3, [r7, #24]
 8011bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011bba:	331e      	adds	r3, #30
 8011bbc:	4a36      	ldr	r2, [pc, #216]	; (8011c98 <dhcp_bind+0x1b0>)
 8011bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8011bc2:	095b      	lsrs	r3, r3, #5
 8011bc4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8011bc6:	69fb      	ldr	r3, [r7, #28]
 8011bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011bcc:	d302      	bcc.n	8011bd4 <dhcp_bind+0xec>
      timeout = 0xffff;
 8011bce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011bd2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8011bd4:	69fb      	ldr	r3, [r7, #28]
 8011bd6:	b29a      	uxth	r2, r3
 8011bd8:	69bb      	ldr	r3, [r7, #24]
 8011bda:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8011bdc:	69bb      	ldr	r3, [r7, #24]
 8011bde:	899b      	ldrh	r3, [r3, #12]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d102      	bne.n	8011bea <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8011be4:	69bb      	ldr	r3, [r7, #24]
 8011be6:	2201      	movs	r2, #1
 8011be8:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8011bea:	69bb      	ldr	r3, [r7, #24]
 8011bec:	899a      	ldrh	r2, [r3, #12]
 8011bee:	69bb      	ldr	r3, [r7, #24]
 8011bf0:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8011bf2:	69bb      	ldr	r3, [r7, #24]
 8011bf4:	895a      	ldrh	r2, [r3, #10]
 8011bf6:	69bb      	ldr	r3, [r7, #24]
 8011bf8:	899b      	ldrh	r3, [r3, #12]
 8011bfa:	429a      	cmp	r2, r3
 8011bfc:	d306      	bcc.n	8011c0c <dhcp_bind+0x124>
 8011bfe:	69bb      	ldr	r3, [r7, #24]
 8011c00:	899b      	ldrh	r3, [r3, #12]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d002      	beq.n	8011c0c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8011c06:	69bb      	ldr	r3, [r7, #24]
 8011c08:	2200      	movs	r2, #0
 8011c0a:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8011c0c:	69bb      	ldr	r3, [r7, #24]
 8011c0e:	79db      	ldrb	r3, [r3, #7]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d003      	beq.n	8011c1c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8011c14:	69bb      	ldr	r3, [r7, #24]
 8011c16:	6a1b      	ldr	r3, [r3, #32]
 8011c18:	613b      	str	r3, [r7, #16]
 8011c1a:	e014      	b.n	8011c46 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8011c1c:	69bb      	ldr	r3, [r7, #24]
 8011c1e:	331c      	adds	r3, #28
 8011c20:	781b      	ldrb	r3, [r3, #0]
 8011c22:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8011c24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	db02      	blt.n	8011c32 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8011c2c:	23ff      	movs	r3, #255	; 0xff
 8011c2e:	613b      	str	r3, [r7, #16]
 8011c30:	e009      	b.n	8011c46 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8011c32:	7dfb      	ldrb	r3, [r7, #23]
 8011c34:	2bbf      	cmp	r3, #191	; 0xbf
 8011c36:	d903      	bls.n	8011c40 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8011c38:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8011c3c:	613b      	str	r3, [r7, #16]
 8011c3e:	e002      	b.n	8011c46 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8011c40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011c44:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8011c46:	69bb      	ldr	r3, [r7, #24]
 8011c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c4a:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d108      	bne.n	8011c64 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8011c52:	69bb      	ldr	r3, [r7, #24]
 8011c54:	69da      	ldr	r2, [r3, #28]
 8011c56:	693b      	ldr	r3, [r7, #16]
 8011c58:	4013      	ands	r3, r2
 8011c5a:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011c62:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8011c64:	210a      	movs	r1, #10
 8011c66:	69b8      	ldr	r0, [r7, #24]
 8011c68:	f000 faa0 	bl	80121ac <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8011c6c:	69bb      	ldr	r3, [r7, #24]
 8011c6e:	f103 011c 	add.w	r1, r3, #28
 8011c72:	f107 030c 	add.w	r3, r7, #12
 8011c76:	f107 0210 	add.w	r2, r7, #16
 8011c7a:	6878      	ldr	r0, [r7, #4]
 8011c7c:	f7f8 fa70 	bl	800a160 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8011c80:	3720      	adds	r7, #32
 8011c82:	46bd      	mov	sp, r7
 8011c84:	bd80      	pop	{r7, pc}
 8011c86:	bf00      	nop
 8011c88:	08018a64 	.word	0x08018a64
 8011c8c:	08018bc4 	.word	0x08018bc4
 8011c90:	08018ac4 	.word	0x08018ac4
 8011c94:	08018be0 	.word	0x08018be0
 8011c98:	88888889 	.word	0x88888889

08011c9c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8011c9c:	b580      	push	{r7, lr}
 8011c9e:	b08a      	sub	sp, #40	; 0x28
 8011ca0:	af02      	add	r7, sp, #8
 8011ca2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ca8:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8011caa:	2105      	movs	r1, #5
 8011cac:	69b8      	ldr	r0, [r7, #24]
 8011cae:	f000 fa7d 	bl	80121ac <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8011cb2:	f107 030c 	add.w	r3, r7, #12
 8011cb6:	2203      	movs	r2, #3
 8011cb8:	69b9      	ldr	r1, [r7, #24]
 8011cba:	6878      	ldr	r0, [r7, #4]
 8011cbc:	f000 ff02 	bl	8012ac4 <dhcp_create_msg>
 8011cc0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8011cc2:	697b      	ldr	r3, [r7, #20]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d04e      	beq.n	8011d66 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011cc8:	697b      	ldr	r3, [r7, #20]
 8011cca:	685b      	ldr	r3, [r3, #4]
 8011ccc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011cce:	89b8      	ldrh	r0, [r7, #12]
 8011cd0:	693b      	ldr	r3, [r7, #16]
 8011cd2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011cd6:	2302      	movs	r3, #2
 8011cd8:	2239      	movs	r2, #57	; 0x39
 8011cda:	f000 fa81 	bl	80121e0 <dhcp_option>
 8011cde:	4603      	mov	r3, r0
 8011ce0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8011ce2:	89b8      	ldrh	r0, [r7, #12]
 8011ce4:	693b      	ldr	r3, [r7, #16]
 8011ce6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011cee:	461a      	mov	r2, r3
 8011cf0:	f000 fad0 	bl	8012294 <dhcp_option_short>
 8011cf4:	4603      	mov	r3, r0
 8011cf6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011cf8:	89b8      	ldrh	r0, [r7, #12]
 8011cfa:	693b      	ldr	r3, [r7, #16]
 8011cfc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011d00:	2303      	movs	r3, #3
 8011d02:	2237      	movs	r2, #55	; 0x37
 8011d04:	f000 fa6c 	bl	80121e0 <dhcp_option>
 8011d08:	4603      	mov	r3, r0
 8011d0a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011d0c:	2300      	movs	r3, #0
 8011d0e:	77bb      	strb	r3, [r7, #30]
 8011d10:	e00e      	b.n	8011d30 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011d12:	89b8      	ldrh	r0, [r7, #12]
 8011d14:	693b      	ldr	r3, [r7, #16]
 8011d16:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011d1a:	7fbb      	ldrb	r3, [r7, #30]
 8011d1c:	4a2a      	ldr	r2, [pc, #168]	; (8011dc8 <dhcp_renew+0x12c>)
 8011d1e:	5cd3      	ldrb	r3, [r2, r3]
 8011d20:	461a      	mov	r2, r3
 8011d22:	f000 fa91 	bl	8012248 <dhcp_option_byte>
 8011d26:	4603      	mov	r3, r0
 8011d28:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011d2a:	7fbb      	ldrb	r3, [r7, #30]
 8011d2c:	3301      	adds	r3, #1
 8011d2e:	77bb      	strb	r3, [r7, #30]
 8011d30:	7fbb      	ldrb	r3, [r7, #30]
 8011d32:	2b02      	cmp	r3, #2
 8011d34:	d9ed      	bls.n	8011d12 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011d36:	89b8      	ldrh	r0, [r7, #12]
 8011d38:	693b      	ldr	r3, [r7, #16]
 8011d3a:	33f0      	adds	r3, #240	; 0xf0
 8011d3c:	697a      	ldr	r2, [r7, #20]
 8011d3e:	4619      	mov	r1, r3
 8011d40:	f000 ff96 	bl	8012c70 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8011d44:	4b21      	ldr	r3, [pc, #132]	; (8011dcc <dhcp_renew+0x130>)
 8011d46:	6818      	ldr	r0, [r3, #0]
 8011d48:	69bb      	ldr	r3, [r7, #24]
 8011d4a:	f103 0218 	add.w	r2, r3, #24
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	9300      	str	r3, [sp, #0]
 8011d52:	2343      	movs	r3, #67	; 0x43
 8011d54:	6979      	ldr	r1, [r7, #20]
 8011d56:	f7fe fe53 	bl	8010a00 <udp_sendto_if>
 8011d5a:	4603      	mov	r3, r0
 8011d5c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8011d5e:	6978      	ldr	r0, [r7, #20]
 8011d60:	f7f8 ff0c 	bl	800ab7c <pbuf_free>
 8011d64:	e001      	b.n	8011d6a <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8011d66:	23ff      	movs	r3, #255	; 0xff
 8011d68:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8011d6a:	69bb      	ldr	r3, [r7, #24]
 8011d6c:	799b      	ldrb	r3, [r3, #6]
 8011d6e:	2bff      	cmp	r3, #255	; 0xff
 8011d70:	d005      	beq.n	8011d7e <dhcp_renew+0xe2>
    dhcp->tries++;
 8011d72:	69bb      	ldr	r3, [r7, #24]
 8011d74:	799b      	ldrb	r3, [r3, #6]
 8011d76:	3301      	adds	r3, #1
 8011d78:	b2da      	uxtb	r2, r3
 8011d7a:	69bb      	ldr	r3, [r7, #24]
 8011d7c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8011d7e:	69bb      	ldr	r3, [r7, #24]
 8011d80:	799b      	ldrb	r3, [r3, #6]
 8011d82:	2b09      	cmp	r3, #9
 8011d84:	d80a      	bhi.n	8011d9c <dhcp_renew+0x100>
 8011d86:	69bb      	ldr	r3, [r7, #24]
 8011d88:	799b      	ldrb	r3, [r3, #6]
 8011d8a:	b29b      	uxth	r3, r3
 8011d8c:	461a      	mov	r2, r3
 8011d8e:	0152      	lsls	r2, r2, #5
 8011d90:	1ad2      	subs	r2, r2, r3
 8011d92:	0092      	lsls	r2, r2, #2
 8011d94:	4413      	add	r3, r2
 8011d96:	011b      	lsls	r3, r3, #4
 8011d98:	b29b      	uxth	r3, r3
 8011d9a:	e001      	b.n	8011da0 <dhcp_renew+0x104>
 8011d9c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8011da0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011da2:	89fb      	ldrh	r3, [r7, #14]
 8011da4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011da8:	4a09      	ldr	r2, [pc, #36]	; (8011dd0 <dhcp_renew+0x134>)
 8011daa:	fb82 1203 	smull	r1, r2, r2, r3
 8011dae:	1152      	asrs	r2, r2, #5
 8011db0:	17db      	asrs	r3, r3, #31
 8011db2:	1ad3      	subs	r3, r2, r3
 8011db4:	b29a      	uxth	r2, r3
 8011db6:	69bb      	ldr	r3, [r7, #24]
 8011db8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011dba:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	3720      	adds	r7, #32
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	bd80      	pop	{r7, pc}
 8011dc6:	bf00      	nop
 8011dc8:	20000030 	.word	0x20000030
 8011dcc:	2000d400 	.word	0x2000d400
 8011dd0:	10624dd3 	.word	0x10624dd3

08011dd4 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8011dd4:	b580      	push	{r7, lr}
 8011dd6:	b08a      	sub	sp, #40	; 0x28
 8011dd8:	af02      	add	r7, sp, #8
 8011dda:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011de0:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8011de2:	2104      	movs	r1, #4
 8011de4:	69b8      	ldr	r0, [r7, #24]
 8011de6:	f000 f9e1 	bl	80121ac <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8011dea:	f107 030c 	add.w	r3, r7, #12
 8011dee:	2203      	movs	r2, #3
 8011df0:	69b9      	ldr	r1, [r7, #24]
 8011df2:	6878      	ldr	r0, [r7, #4]
 8011df4:	f000 fe66 	bl	8012ac4 <dhcp_create_msg>
 8011df8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8011dfa:	697b      	ldr	r3, [r7, #20]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d04c      	beq.n	8011e9a <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011e00:	697b      	ldr	r3, [r7, #20]
 8011e02:	685b      	ldr	r3, [r3, #4]
 8011e04:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011e06:	89b8      	ldrh	r0, [r7, #12]
 8011e08:	693b      	ldr	r3, [r7, #16]
 8011e0a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011e0e:	2302      	movs	r3, #2
 8011e10:	2239      	movs	r2, #57	; 0x39
 8011e12:	f000 f9e5 	bl	80121e0 <dhcp_option>
 8011e16:	4603      	mov	r3, r0
 8011e18:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8011e1a:	89b8      	ldrh	r0, [r7, #12]
 8011e1c:	693b      	ldr	r3, [r7, #16]
 8011e1e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011e26:	461a      	mov	r2, r3
 8011e28:	f000 fa34 	bl	8012294 <dhcp_option_short>
 8011e2c:	4603      	mov	r3, r0
 8011e2e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011e30:	89b8      	ldrh	r0, [r7, #12]
 8011e32:	693b      	ldr	r3, [r7, #16]
 8011e34:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011e38:	2303      	movs	r3, #3
 8011e3a:	2237      	movs	r2, #55	; 0x37
 8011e3c:	f000 f9d0 	bl	80121e0 <dhcp_option>
 8011e40:	4603      	mov	r3, r0
 8011e42:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011e44:	2300      	movs	r3, #0
 8011e46:	77bb      	strb	r3, [r7, #30]
 8011e48:	e00e      	b.n	8011e68 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011e4a:	89b8      	ldrh	r0, [r7, #12]
 8011e4c:	693b      	ldr	r3, [r7, #16]
 8011e4e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011e52:	7fbb      	ldrb	r3, [r7, #30]
 8011e54:	4a29      	ldr	r2, [pc, #164]	; (8011efc <dhcp_rebind+0x128>)
 8011e56:	5cd3      	ldrb	r3, [r2, r3]
 8011e58:	461a      	mov	r2, r3
 8011e5a:	f000 f9f5 	bl	8012248 <dhcp_option_byte>
 8011e5e:	4603      	mov	r3, r0
 8011e60:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011e62:	7fbb      	ldrb	r3, [r7, #30]
 8011e64:	3301      	adds	r3, #1
 8011e66:	77bb      	strb	r3, [r7, #30]
 8011e68:	7fbb      	ldrb	r3, [r7, #30]
 8011e6a:	2b02      	cmp	r3, #2
 8011e6c:	d9ed      	bls.n	8011e4a <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011e6e:	89b8      	ldrh	r0, [r7, #12]
 8011e70:	693b      	ldr	r3, [r7, #16]
 8011e72:	33f0      	adds	r3, #240	; 0xf0
 8011e74:	697a      	ldr	r2, [r7, #20]
 8011e76:	4619      	mov	r1, r3
 8011e78:	f000 fefa 	bl	8012c70 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8011e7c:	4b20      	ldr	r3, [pc, #128]	; (8011f00 <dhcp_rebind+0x12c>)
 8011e7e:	6818      	ldr	r0, [r3, #0]
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	9300      	str	r3, [sp, #0]
 8011e84:	2343      	movs	r3, #67	; 0x43
 8011e86:	4a1f      	ldr	r2, [pc, #124]	; (8011f04 <dhcp_rebind+0x130>)
 8011e88:	6979      	ldr	r1, [r7, #20]
 8011e8a:	f7fe fdb9 	bl	8010a00 <udp_sendto_if>
 8011e8e:	4603      	mov	r3, r0
 8011e90:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8011e92:	6978      	ldr	r0, [r7, #20]
 8011e94:	f7f8 fe72 	bl	800ab7c <pbuf_free>
 8011e98:	e001      	b.n	8011e9e <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8011e9a:	23ff      	movs	r3, #255	; 0xff
 8011e9c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8011e9e:	69bb      	ldr	r3, [r7, #24]
 8011ea0:	799b      	ldrb	r3, [r3, #6]
 8011ea2:	2bff      	cmp	r3, #255	; 0xff
 8011ea4:	d005      	beq.n	8011eb2 <dhcp_rebind+0xde>
    dhcp->tries++;
 8011ea6:	69bb      	ldr	r3, [r7, #24]
 8011ea8:	799b      	ldrb	r3, [r3, #6]
 8011eaa:	3301      	adds	r3, #1
 8011eac:	b2da      	uxtb	r2, r3
 8011eae:	69bb      	ldr	r3, [r7, #24]
 8011eb0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8011eb2:	69bb      	ldr	r3, [r7, #24]
 8011eb4:	799b      	ldrb	r3, [r3, #6]
 8011eb6:	2b09      	cmp	r3, #9
 8011eb8:	d80a      	bhi.n	8011ed0 <dhcp_rebind+0xfc>
 8011eba:	69bb      	ldr	r3, [r7, #24]
 8011ebc:	799b      	ldrb	r3, [r3, #6]
 8011ebe:	b29b      	uxth	r3, r3
 8011ec0:	461a      	mov	r2, r3
 8011ec2:	0152      	lsls	r2, r2, #5
 8011ec4:	1ad2      	subs	r2, r2, r3
 8011ec6:	0092      	lsls	r2, r2, #2
 8011ec8:	4413      	add	r3, r2
 8011eca:	00db      	lsls	r3, r3, #3
 8011ecc:	b29b      	uxth	r3, r3
 8011ece:	e001      	b.n	8011ed4 <dhcp_rebind+0x100>
 8011ed0:	f242 7310 	movw	r3, #10000	; 0x2710
 8011ed4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011ed6:	89fb      	ldrh	r3, [r7, #14]
 8011ed8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011edc:	4a0a      	ldr	r2, [pc, #40]	; (8011f08 <dhcp_rebind+0x134>)
 8011ede:	fb82 1203 	smull	r1, r2, r2, r3
 8011ee2:	1152      	asrs	r2, r2, #5
 8011ee4:	17db      	asrs	r3, r3, #31
 8011ee6:	1ad3      	subs	r3, r2, r3
 8011ee8:	b29a      	uxth	r2, r3
 8011eea:	69bb      	ldr	r3, [r7, #24]
 8011eec:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011eee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	3720      	adds	r7, #32
 8011ef6:	46bd      	mov	sp, r7
 8011ef8:	bd80      	pop	{r7, pc}
 8011efa:	bf00      	nop
 8011efc:	20000030 	.word	0x20000030
 8011f00:	2000d400 	.word	0x2000d400
 8011f04:	08019634 	.word	0x08019634
 8011f08:	10624dd3 	.word	0x10624dd3

08011f0c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8011f0c:	b5b0      	push	{r4, r5, r7, lr}
 8011f0e:	b08a      	sub	sp, #40	; 0x28
 8011f10:	af02      	add	r7, sp, #8
 8011f12:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f18:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8011f1a:	2103      	movs	r1, #3
 8011f1c:	69b8      	ldr	r0, [r7, #24]
 8011f1e:	f000 f945 	bl	80121ac <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8011f22:	f107 030c 	add.w	r3, r7, #12
 8011f26:	2203      	movs	r2, #3
 8011f28:	69b9      	ldr	r1, [r7, #24]
 8011f2a:	6878      	ldr	r0, [r7, #4]
 8011f2c:	f000 fdca 	bl	8012ac4 <dhcp_create_msg>
 8011f30:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8011f32:	697b      	ldr	r3, [r7, #20]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d066      	beq.n	8012006 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011f38:	697b      	ldr	r3, [r7, #20]
 8011f3a:	685b      	ldr	r3, [r3, #4]
 8011f3c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011f3e:	89b8      	ldrh	r0, [r7, #12]
 8011f40:	693b      	ldr	r3, [r7, #16]
 8011f42:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011f46:	2302      	movs	r3, #2
 8011f48:	2239      	movs	r2, #57	; 0x39
 8011f4a:	f000 f949 	bl	80121e0 <dhcp_option>
 8011f4e:	4603      	mov	r3, r0
 8011f50:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8011f52:	89b8      	ldrh	r0, [r7, #12]
 8011f54:	693b      	ldr	r3, [r7, #16]
 8011f56:	33f0      	adds	r3, #240	; 0xf0
 8011f58:	f44f 7210 	mov.w	r2, #576	; 0x240
 8011f5c:	4619      	mov	r1, r3
 8011f5e:	f000 f999 	bl	8012294 <dhcp_option_short>
 8011f62:	4603      	mov	r3, r0
 8011f64:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8011f66:	89b8      	ldrh	r0, [r7, #12]
 8011f68:	693b      	ldr	r3, [r7, #16]
 8011f6a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011f6e:	2304      	movs	r3, #4
 8011f70:	2232      	movs	r2, #50	; 0x32
 8011f72:	f000 f935 	bl	80121e0 <dhcp_option>
 8011f76:	4603      	mov	r3, r0
 8011f78:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8011f7a:	89bc      	ldrh	r4, [r7, #12]
 8011f7c:	693b      	ldr	r3, [r7, #16]
 8011f7e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8011f82:	69bb      	ldr	r3, [r7, #24]
 8011f84:	69db      	ldr	r3, [r3, #28]
 8011f86:	4618      	mov	r0, r3
 8011f88:	f7f7 fa0f 	bl	80093aa <lwip_htonl>
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	461a      	mov	r2, r3
 8011f90:	4629      	mov	r1, r5
 8011f92:	4620      	mov	r0, r4
 8011f94:	f000 f9b0 	bl	80122f8 <dhcp_option_long>
 8011f98:	4603      	mov	r3, r0
 8011f9a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011f9c:	89b8      	ldrh	r0, [r7, #12]
 8011f9e:	693b      	ldr	r3, [r7, #16]
 8011fa0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011fa4:	2303      	movs	r3, #3
 8011fa6:	2237      	movs	r2, #55	; 0x37
 8011fa8:	f000 f91a 	bl	80121e0 <dhcp_option>
 8011fac:	4603      	mov	r3, r0
 8011fae:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011fb0:	2300      	movs	r3, #0
 8011fb2:	77bb      	strb	r3, [r7, #30]
 8011fb4:	e00e      	b.n	8011fd4 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011fb6:	89b8      	ldrh	r0, [r7, #12]
 8011fb8:	693b      	ldr	r3, [r7, #16]
 8011fba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011fbe:	7fbb      	ldrb	r3, [r7, #30]
 8011fc0:	4a29      	ldr	r2, [pc, #164]	; (8012068 <dhcp_reboot+0x15c>)
 8011fc2:	5cd3      	ldrb	r3, [r2, r3]
 8011fc4:	461a      	mov	r2, r3
 8011fc6:	f000 f93f 	bl	8012248 <dhcp_option_byte>
 8011fca:	4603      	mov	r3, r0
 8011fcc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011fce:	7fbb      	ldrb	r3, [r7, #30]
 8011fd0:	3301      	adds	r3, #1
 8011fd2:	77bb      	strb	r3, [r7, #30]
 8011fd4:	7fbb      	ldrb	r3, [r7, #30]
 8011fd6:	2b02      	cmp	r3, #2
 8011fd8:	d9ed      	bls.n	8011fb6 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011fda:	89b8      	ldrh	r0, [r7, #12]
 8011fdc:	693b      	ldr	r3, [r7, #16]
 8011fde:	33f0      	adds	r3, #240	; 0xf0
 8011fe0:	697a      	ldr	r2, [r7, #20]
 8011fe2:	4619      	mov	r1, r3
 8011fe4:	f000 fe44 	bl	8012c70 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8011fe8:	4b20      	ldr	r3, [pc, #128]	; (801206c <dhcp_reboot+0x160>)
 8011fea:	6818      	ldr	r0, [r3, #0]
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	9300      	str	r3, [sp, #0]
 8011ff0:	2343      	movs	r3, #67	; 0x43
 8011ff2:	4a1f      	ldr	r2, [pc, #124]	; (8012070 <dhcp_reboot+0x164>)
 8011ff4:	6979      	ldr	r1, [r7, #20]
 8011ff6:	f7fe fd03 	bl	8010a00 <udp_sendto_if>
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8011ffe:	6978      	ldr	r0, [r7, #20]
 8012000:	f7f8 fdbc 	bl	800ab7c <pbuf_free>
 8012004:	e001      	b.n	801200a <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012006:	23ff      	movs	r3, #255	; 0xff
 8012008:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801200a:	69bb      	ldr	r3, [r7, #24]
 801200c:	799b      	ldrb	r3, [r3, #6]
 801200e:	2bff      	cmp	r3, #255	; 0xff
 8012010:	d005      	beq.n	801201e <dhcp_reboot+0x112>
    dhcp->tries++;
 8012012:	69bb      	ldr	r3, [r7, #24]
 8012014:	799b      	ldrb	r3, [r3, #6]
 8012016:	3301      	adds	r3, #1
 8012018:	b2da      	uxtb	r2, r3
 801201a:	69bb      	ldr	r3, [r7, #24]
 801201c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801201e:	69bb      	ldr	r3, [r7, #24]
 8012020:	799b      	ldrb	r3, [r3, #6]
 8012022:	2b09      	cmp	r3, #9
 8012024:	d80a      	bhi.n	801203c <dhcp_reboot+0x130>
 8012026:	69bb      	ldr	r3, [r7, #24]
 8012028:	799b      	ldrb	r3, [r3, #6]
 801202a:	b29b      	uxth	r3, r3
 801202c:	461a      	mov	r2, r3
 801202e:	0152      	lsls	r2, r2, #5
 8012030:	1ad2      	subs	r2, r2, r3
 8012032:	0092      	lsls	r2, r2, #2
 8012034:	4413      	add	r3, r2
 8012036:	00db      	lsls	r3, r3, #3
 8012038:	b29b      	uxth	r3, r3
 801203a:	e001      	b.n	8012040 <dhcp_reboot+0x134>
 801203c:	f242 7310 	movw	r3, #10000	; 0x2710
 8012040:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012042:	89fb      	ldrh	r3, [r7, #14]
 8012044:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012048:	4a0a      	ldr	r2, [pc, #40]	; (8012074 <dhcp_reboot+0x168>)
 801204a:	fb82 1203 	smull	r1, r2, r2, r3
 801204e:	1152      	asrs	r2, r2, #5
 8012050:	17db      	asrs	r3, r3, #31
 8012052:	1ad3      	subs	r3, r2, r3
 8012054:	b29a      	uxth	r2, r3
 8012056:	69bb      	ldr	r3, [r7, #24]
 8012058:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801205a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801205e:	4618      	mov	r0, r3
 8012060:	3720      	adds	r7, #32
 8012062:	46bd      	mov	sp, r7
 8012064:	bdb0      	pop	{r4, r5, r7, pc}
 8012066:	bf00      	nop
 8012068:	20000030 	.word	0x20000030
 801206c:	2000d400 	.word	0x2000d400
 8012070:	08019634 	.word	0x08019634
 8012074:	10624dd3 	.word	0x10624dd3

08012078 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8012078:	b5b0      	push	{r4, r5, r7, lr}
 801207a:	b08a      	sub	sp, #40	; 0x28
 801207c:	af02      	add	r7, sp, #8
 801207e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012084:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8012086:	69fb      	ldr	r3, [r7, #28]
 8012088:	2b00      	cmp	r3, #0
 801208a:	f000 8084 	beq.w	8012196 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801208e:	69fb      	ldr	r3, [r7, #28]
 8012090:	795b      	ldrb	r3, [r3, #5]
 8012092:	2b00      	cmp	r3, #0
 8012094:	f000 8081 	beq.w	801219a <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8012098:	69fb      	ldr	r3, [r7, #28]
 801209a:	699b      	ldr	r3, [r3, #24]
 801209c:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801209e:	69fb      	ldr	r3, [r7, #28]
 80120a0:	2200      	movs	r2, #0
 80120a2:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80120a4:	69fb      	ldr	r3, [r7, #28]
 80120a6:	2200      	movs	r2, #0
 80120a8:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80120aa:	69fb      	ldr	r3, [r7, #28]
 80120ac:	2200      	movs	r2, #0
 80120ae:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80120b0:	69fb      	ldr	r3, [r7, #28]
 80120b2:	2200      	movs	r2, #0
 80120b4:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80120b6:	69fb      	ldr	r3, [r7, #28]
 80120b8:	2200      	movs	r2, #0
 80120ba:	631a      	str	r2, [r3, #48]	; 0x30
 80120bc:	69fb      	ldr	r3, [r7, #28]
 80120be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80120c0:	69fb      	ldr	r3, [r7, #28]
 80120c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80120c4:	69fb      	ldr	r3, [r7, #28]
 80120c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120c8:	69fb      	ldr	r3, [r7, #28]
 80120ca:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80120cc:	69fb      	ldr	r3, [r7, #28]
 80120ce:	2200      	movs	r2, #0
 80120d0:	829a      	strh	r2, [r3, #20]
 80120d2:	69fb      	ldr	r3, [r7, #28]
 80120d4:	8a9a      	ldrh	r2, [r3, #20]
 80120d6:	69fb      	ldr	r3, [r7, #28]
 80120d8:	825a      	strh	r2, [r3, #18]
 80120da:	69fb      	ldr	r3, [r7, #28]
 80120dc:	8a5a      	ldrh	r2, [r3, #18]
 80120de:	69fb      	ldr	r3, [r7, #28]
 80120e0:	821a      	strh	r2, [r3, #16]
 80120e2:	69fb      	ldr	r3, [r7, #28]
 80120e4:	8a1a      	ldrh	r2, [r3, #16]
 80120e6:	69fb      	ldr	r3, [r7, #28]
 80120e8:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 80120ea:	6878      	ldr	r0, [r7, #4]
 80120ec:	f000 fdee 	bl	8012ccc <dhcp_supplied_address>
 80120f0:	4603      	mov	r3, r0
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d03b      	beq.n	801216e <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80120f6:	f107 030e 	add.w	r3, r7, #14
 80120fa:	2207      	movs	r2, #7
 80120fc:	69f9      	ldr	r1, [r7, #28]
 80120fe:	6878      	ldr	r0, [r7, #4]
 8012100:	f000 fce0 	bl	8012ac4 <dhcp_create_msg>
 8012104:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8012106:	69bb      	ldr	r3, [r7, #24]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d030      	beq.n	801216e <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801210c:	69bb      	ldr	r3, [r7, #24]
 801210e:	685b      	ldr	r3, [r3, #4]
 8012110:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8012112:	89f8      	ldrh	r0, [r7, #14]
 8012114:	697b      	ldr	r3, [r7, #20]
 8012116:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801211a:	2304      	movs	r3, #4
 801211c:	2236      	movs	r2, #54	; 0x36
 801211e:	f000 f85f 	bl	80121e0 <dhcp_option>
 8012122:	4603      	mov	r3, r0
 8012124:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8012126:	89fc      	ldrh	r4, [r7, #14]
 8012128:	697b      	ldr	r3, [r7, #20]
 801212a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801212e:	693b      	ldr	r3, [r7, #16]
 8012130:	4618      	mov	r0, r3
 8012132:	f7f7 f93a 	bl	80093aa <lwip_htonl>
 8012136:	4603      	mov	r3, r0
 8012138:	461a      	mov	r2, r3
 801213a:	4629      	mov	r1, r5
 801213c:	4620      	mov	r0, r4
 801213e:	f000 f8db 	bl	80122f8 <dhcp_option_long>
 8012142:	4603      	mov	r3, r0
 8012144:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012146:	89f8      	ldrh	r0, [r7, #14]
 8012148:	697b      	ldr	r3, [r7, #20]
 801214a:	33f0      	adds	r3, #240	; 0xf0
 801214c:	69ba      	ldr	r2, [r7, #24]
 801214e:	4619      	mov	r1, r3
 8012150:	f000 fd8e 	bl	8012c70 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8012154:	4b13      	ldr	r3, [pc, #76]	; (80121a4 <dhcp_release_and_stop+0x12c>)
 8012156:	6818      	ldr	r0, [r3, #0]
 8012158:	f107 0210 	add.w	r2, r7, #16
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	9300      	str	r3, [sp, #0]
 8012160:	2343      	movs	r3, #67	; 0x43
 8012162:	69b9      	ldr	r1, [r7, #24]
 8012164:	f7fe fc4c 	bl	8010a00 <udp_sendto_if>
      pbuf_free(p_out);
 8012168:	69b8      	ldr	r0, [r7, #24]
 801216a:	f7f8 fd07 	bl	800ab7c <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801216e:	4b0e      	ldr	r3, [pc, #56]	; (80121a8 <dhcp_release_and_stop+0x130>)
 8012170:	4a0d      	ldr	r2, [pc, #52]	; (80121a8 <dhcp_release_and_stop+0x130>)
 8012172:	490d      	ldr	r1, [pc, #52]	; (80121a8 <dhcp_release_and_stop+0x130>)
 8012174:	6878      	ldr	r0, [r7, #4]
 8012176:	f7f7 fff3 	bl	800a160 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801217a:	2100      	movs	r1, #0
 801217c:	69f8      	ldr	r0, [r7, #28]
 801217e:	f000 f815 	bl	80121ac <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8012182:	69fb      	ldr	r3, [r7, #28]
 8012184:	791b      	ldrb	r3, [r3, #4]
 8012186:	2b00      	cmp	r3, #0
 8012188:	d008      	beq.n	801219c <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801218a:	f7fe ff85 	bl	8011098 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801218e:	69fb      	ldr	r3, [r7, #28]
 8012190:	2200      	movs	r2, #0
 8012192:	711a      	strb	r2, [r3, #4]
 8012194:	e002      	b.n	801219c <dhcp_release_and_stop+0x124>
    return;
 8012196:	bf00      	nop
 8012198:	e000      	b.n	801219c <dhcp_release_and_stop+0x124>
    return;
 801219a:	bf00      	nop
  }
}
 801219c:	3720      	adds	r7, #32
 801219e:	46bd      	mov	sp, r7
 80121a0:	bdb0      	pop	{r4, r5, r7, pc}
 80121a2:	bf00      	nop
 80121a4:	2000d400 	.word	0x2000d400
 80121a8:	08019630 	.word	0x08019630

080121ac <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 80121ac:	b480      	push	{r7}
 80121ae:	b083      	sub	sp, #12
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	6078      	str	r0, [r7, #4]
 80121b4:	460b      	mov	r3, r1
 80121b6:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	795b      	ldrb	r3, [r3, #5]
 80121bc:	78fa      	ldrb	r2, [r7, #3]
 80121be:	429a      	cmp	r2, r3
 80121c0:	d008      	beq.n	80121d4 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	78fa      	ldrb	r2, [r7, #3]
 80121c6:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	2200      	movs	r2, #0
 80121cc:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	2200      	movs	r2, #0
 80121d2:	811a      	strh	r2, [r3, #8]
  }
}
 80121d4:	bf00      	nop
 80121d6:	370c      	adds	r7, #12
 80121d8:	46bd      	mov	sp, r7
 80121da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121de:	4770      	bx	lr

080121e0 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b082      	sub	sp, #8
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	6039      	str	r1, [r7, #0]
 80121e8:	4611      	mov	r1, r2
 80121ea:	461a      	mov	r2, r3
 80121ec:	4603      	mov	r3, r0
 80121ee:	80fb      	strh	r3, [r7, #6]
 80121f0:	460b      	mov	r3, r1
 80121f2:	717b      	strb	r3, [r7, #5]
 80121f4:	4613      	mov	r3, r2
 80121f6:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80121f8:	88fa      	ldrh	r2, [r7, #6]
 80121fa:	793b      	ldrb	r3, [r7, #4]
 80121fc:	4413      	add	r3, r2
 80121fe:	3302      	adds	r3, #2
 8012200:	2b44      	cmp	r3, #68	; 0x44
 8012202:	d906      	bls.n	8012212 <dhcp_option+0x32>
 8012204:	4b0d      	ldr	r3, [pc, #52]	; (801223c <dhcp_option+0x5c>)
 8012206:	f240 529a 	movw	r2, #1434	; 0x59a
 801220a:	490d      	ldr	r1, [pc, #52]	; (8012240 <dhcp_option+0x60>)
 801220c:	480d      	ldr	r0, [pc, #52]	; (8012244 <dhcp_option+0x64>)
 801220e:	f003 f9a7 	bl	8015560 <iprintf>
  options[options_out_len++] = option_type;
 8012212:	88fb      	ldrh	r3, [r7, #6]
 8012214:	1c5a      	adds	r2, r3, #1
 8012216:	80fa      	strh	r2, [r7, #6]
 8012218:	461a      	mov	r2, r3
 801221a:	683b      	ldr	r3, [r7, #0]
 801221c:	4413      	add	r3, r2
 801221e:	797a      	ldrb	r2, [r7, #5]
 8012220:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8012222:	88fb      	ldrh	r3, [r7, #6]
 8012224:	1c5a      	adds	r2, r3, #1
 8012226:	80fa      	strh	r2, [r7, #6]
 8012228:	461a      	mov	r2, r3
 801222a:	683b      	ldr	r3, [r7, #0]
 801222c:	4413      	add	r3, r2
 801222e:	793a      	ldrb	r2, [r7, #4]
 8012230:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8012232:	88fb      	ldrh	r3, [r7, #6]
}
 8012234:	4618      	mov	r0, r3
 8012236:	3708      	adds	r7, #8
 8012238:	46bd      	mov	sp, r7
 801223a:	bd80      	pop	{r7, pc}
 801223c:	08018a64 	.word	0x08018a64
 8012240:	08018bf8 	.word	0x08018bf8
 8012244:	08018ac4 	.word	0x08018ac4

08012248 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b082      	sub	sp, #8
 801224c:	af00      	add	r7, sp, #0
 801224e:	4603      	mov	r3, r0
 8012250:	6039      	str	r1, [r7, #0]
 8012252:	80fb      	strh	r3, [r7, #6]
 8012254:	4613      	mov	r3, r2
 8012256:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8012258:	88fb      	ldrh	r3, [r7, #6]
 801225a:	2b43      	cmp	r3, #67	; 0x43
 801225c:	d906      	bls.n	801226c <dhcp_option_byte+0x24>
 801225e:	4b0a      	ldr	r3, [pc, #40]	; (8012288 <dhcp_option_byte+0x40>)
 8012260:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8012264:	4909      	ldr	r1, [pc, #36]	; (801228c <dhcp_option_byte+0x44>)
 8012266:	480a      	ldr	r0, [pc, #40]	; (8012290 <dhcp_option_byte+0x48>)
 8012268:	f003 f97a 	bl	8015560 <iprintf>
  options[options_out_len++] = value;
 801226c:	88fb      	ldrh	r3, [r7, #6]
 801226e:	1c5a      	adds	r2, r3, #1
 8012270:	80fa      	strh	r2, [r7, #6]
 8012272:	461a      	mov	r2, r3
 8012274:	683b      	ldr	r3, [r7, #0]
 8012276:	4413      	add	r3, r2
 8012278:	797a      	ldrb	r2, [r7, #5]
 801227a:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801227c:	88fb      	ldrh	r3, [r7, #6]
}
 801227e:	4618      	mov	r0, r3
 8012280:	3708      	adds	r7, #8
 8012282:	46bd      	mov	sp, r7
 8012284:	bd80      	pop	{r7, pc}
 8012286:	bf00      	nop
 8012288:	08018a64 	.word	0x08018a64
 801228c:	08018c3c 	.word	0x08018c3c
 8012290:	08018ac4 	.word	0x08018ac4

08012294 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8012294:	b580      	push	{r7, lr}
 8012296:	b082      	sub	sp, #8
 8012298:	af00      	add	r7, sp, #0
 801229a:	4603      	mov	r3, r0
 801229c:	6039      	str	r1, [r7, #0]
 801229e:	80fb      	strh	r3, [r7, #6]
 80122a0:	4613      	mov	r3, r2
 80122a2:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80122a4:	88fb      	ldrh	r3, [r7, #6]
 80122a6:	3302      	adds	r3, #2
 80122a8:	2b44      	cmp	r3, #68	; 0x44
 80122aa:	d906      	bls.n	80122ba <dhcp_option_short+0x26>
 80122ac:	4b0f      	ldr	r3, [pc, #60]	; (80122ec <dhcp_option_short+0x58>)
 80122ae:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80122b2:	490f      	ldr	r1, [pc, #60]	; (80122f0 <dhcp_option_short+0x5c>)
 80122b4:	480f      	ldr	r0, [pc, #60]	; (80122f4 <dhcp_option_short+0x60>)
 80122b6:	f003 f953 	bl	8015560 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80122ba:	88bb      	ldrh	r3, [r7, #4]
 80122bc:	0a1b      	lsrs	r3, r3, #8
 80122be:	b29a      	uxth	r2, r3
 80122c0:	88fb      	ldrh	r3, [r7, #6]
 80122c2:	1c59      	adds	r1, r3, #1
 80122c4:	80f9      	strh	r1, [r7, #6]
 80122c6:	4619      	mov	r1, r3
 80122c8:	683b      	ldr	r3, [r7, #0]
 80122ca:	440b      	add	r3, r1
 80122cc:	b2d2      	uxtb	r2, r2
 80122ce:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80122d0:	88fb      	ldrh	r3, [r7, #6]
 80122d2:	1c5a      	adds	r2, r3, #1
 80122d4:	80fa      	strh	r2, [r7, #6]
 80122d6:	461a      	mov	r2, r3
 80122d8:	683b      	ldr	r3, [r7, #0]
 80122da:	4413      	add	r3, r2
 80122dc:	88ba      	ldrh	r2, [r7, #4]
 80122de:	b2d2      	uxtb	r2, r2
 80122e0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80122e2:	88fb      	ldrh	r3, [r7, #6]
}
 80122e4:	4618      	mov	r0, r3
 80122e6:	3708      	adds	r7, #8
 80122e8:	46bd      	mov	sp, r7
 80122ea:	bd80      	pop	{r7, pc}
 80122ec:	08018a64 	.word	0x08018a64
 80122f0:	08018c74 	.word	0x08018c74
 80122f4:	08018ac4 	.word	0x08018ac4

080122f8 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80122f8:	b580      	push	{r7, lr}
 80122fa:	b084      	sub	sp, #16
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	4603      	mov	r3, r0
 8012300:	60b9      	str	r1, [r7, #8]
 8012302:	607a      	str	r2, [r7, #4]
 8012304:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8012306:	89fb      	ldrh	r3, [r7, #14]
 8012308:	3304      	adds	r3, #4
 801230a:	2b44      	cmp	r3, #68	; 0x44
 801230c:	d906      	bls.n	801231c <dhcp_option_long+0x24>
 801230e:	4b19      	ldr	r3, [pc, #100]	; (8012374 <dhcp_option_long+0x7c>)
 8012310:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8012314:	4918      	ldr	r1, [pc, #96]	; (8012378 <dhcp_option_long+0x80>)
 8012316:	4819      	ldr	r0, [pc, #100]	; (801237c <dhcp_option_long+0x84>)
 8012318:	f003 f922 	bl	8015560 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	0e1a      	lsrs	r2, r3, #24
 8012320:	89fb      	ldrh	r3, [r7, #14]
 8012322:	1c59      	adds	r1, r3, #1
 8012324:	81f9      	strh	r1, [r7, #14]
 8012326:	4619      	mov	r1, r3
 8012328:	68bb      	ldr	r3, [r7, #8]
 801232a:	440b      	add	r3, r1
 801232c:	b2d2      	uxtb	r2, r2
 801232e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	0c1a      	lsrs	r2, r3, #16
 8012334:	89fb      	ldrh	r3, [r7, #14]
 8012336:	1c59      	adds	r1, r3, #1
 8012338:	81f9      	strh	r1, [r7, #14]
 801233a:	4619      	mov	r1, r3
 801233c:	68bb      	ldr	r3, [r7, #8]
 801233e:	440b      	add	r3, r1
 8012340:	b2d2      	uxtb	r2, r2
 8012342:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	0a1a      	lsrs	r2, r3, #8
 8012348:	89fb      	ldrh	r3, [r7, #14]
 801234a:	1c59      	adds	r1, r3, #1
 801234c:	81f9      	strh	r1, [r7, #14]
 801234e:	4619      	mov	r1, r3
 8012350:	68bb      	ldr	r3, [r7, #8]
 8012352:	440b      	add	r3, r1
 8012354:	b2d2      	uxtb	r2, r2
 8012356:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8012358:	89fb      	ldrh	r3, [r7, #14]
 801235a:	1c5a      	adds	r2, r3, #1
 801235c:	81fa      	strh	r2, [r7, #14]
 801235e:	461a      	mov	r2, r3
 8012360:	68bb      	ldr	r3, [r7, #8]
 8012362:	4413      	add	r3, r2
 8012364:	687a      	ldr	r2, [r7, #4]
 8012366:	b2d2      	uxtb	r2, r2
 8012368:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801236a:	89fb      	ldrh	r3, [r7, #14]
}
 801236c:	4618      	mov	r0, r3
 801236e:	3710      	adds	r7, #16
 8012370:	46bd      	mov	sp, r7
 8012372:	bd80      	pop	{r7, pc}
 8012374:	08018a64 	.word	0x08018a64
 8012378:	08018cb0 	.word	0x08018cb0
 801237c:	08018ac4 	.word	0x08018ac4

08012380 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8012380:	b580      	push	{r7, lr}
 8012382:	b090      	sub	sp, #64	; 0x40
 8012384:	af00      	add	r7, sp, #0
 8012386:	6078      	str	r0, [r7, #4]
 8012388:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801238a:	2300      	movs	r3, #0
 801238c:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 801238e:	2300      	movs	r3, #0
 8012390:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8012392:	2208      	movs	r2, #8
 8012394:	2100      	movs	r1, #0
 8012396:	48b5      	ldr	r0, [pc, #724]	; (801266c <dhcp_parse_reply+0x2ec>)
 8012398:	f003 f8da 	bl	8015550 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	895b      	ldrh	r3, [r3, #10]
 80123a0:	2b2b      	cmp	r3, #43	; 0x2b
 80123a2:	d802      	bhi.n	80123aa <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 80123a4:	f06f 0301 	mvn.w	r3, #1
 80123a8:	e2a7      	b.n	80128fa <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	685b      	ldr	r3, [r3, #4]
 80123ae:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 80123b0:	23f0      	movs	r3, #240	; 0xf0
 80123b2:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	891b      	ldrh	r3, [r3, #8]
 80123b8:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80123be:	e00c      	b.n	80123da <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 80123c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123c2:	895b      	ldrh	r3, [r3, #10]
 80123c4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80123c6:	1ad3      	subs	r3, r2, r3
 80123c8:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80123ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123cc:	895b      	ldrh	r3, [r3, #10]
 80123ce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80123d0:	1ad3      	subs	r3, r2, r3
 80123d2:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 80123d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80123da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d004      	beq.n	80123ea <dhcp_parse_reply+0x6a>
 80123e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123e2:	895b      	ldrh	r3, [r3, #10]
 80123e4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80123e6:	429a      	cmp	r2, r3
 80123e8:	d2ea      	bcs.n	80123c0 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 80123ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d102      	bne.n	80123f6 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 80123f0:	f06f 0301 	mvn.w	r3, #1
 80123f4:	e281      	b.n	80128fa <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 80123f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80123f8:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 80123fa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80123fc:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 80123fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012400:	685b      	ldr	r3, [r3, #4]
 8012402:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8012404:	e239      	b.n	801287a <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 8012406:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012408:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801240a:	4413      	add	r3, r2
 801240c:	781b      	ldrb	r3, [r3, #0]
 801240e:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8012410:	2300      	movs	r3, #0
 8012412:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8012416:	f04f 33ff 	mov.w	r3, #4294967295
 801241a:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 801241c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801241e:	3302      	adds	r3, #2
 8012420:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8012422:	8bfa      	ldrh	r2, [r7, #30]
 8012424:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012426:	429a      	cmp	r2, r3
 8012428:	d202      	bcs.n	8012430 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801242a:	f06f 0301 	mvn.w	r3, #1
 801242e:	e264      	b.n	80128fa <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8012430:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012432:	3301      	adds	r3, #1
 8012434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012436:	8952      	ldrh	r2, [r2, #10]
 8012438:	4293      	cmp	r3, r2
 801243a:	da07      	bge.n	801244c <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 801243c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801243e:	3301      	adds	r3, #1
 8012440:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012442:	4413      	add	r3, r2
 8012444:	781b      	ldrb	r3, [r3, #0]
 8012446:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801244a:	e00b      	b.n	8012464 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801244c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	2b00      	cmp	r3, #0
 8012452:	d004      	beq.n	801245e <dhcp_parse_reply+0xde>
 8012454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	685b      	ldr	r3, [r3, #4]
 801245a:	781b      	ldrb	r3, [r3, #0]
 801245c:	e000      	b.n	8012460 <dhcp_parse_reply+0xe0>
 801245e:	2300      	movs	r3, #0
 8012460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8012464:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012468:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 801246c:	7dfb      	ldrb	r3, [r7, #23]
 801246e:	2b3b      	cmp	r3, #59	; 0x3b
 8012470:	f200 812c 	bhi.w	80126cc <dhcp_parse_reply+0x34c>
 8012474:	a201      	add	r2, pc, #4	; (adr r2, 801247c <dhcp_parse_reply+0xfc>)
 8012476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801247a:	bf00      	nop
 801247c:	0801256d 	.word	0x0801256d
 8012480:	0801257d 	.word	0x0801257d
 8012484:	080126cd 	.word	0x080126cd
 8012488:	0801259f 	.word	0x0801259f
 801248c:	080126cd 	.word	0x080126cd
 8012490:	080126cd 	.word	0x080126cd
 8012494:	080126cd 	.word	0x080126cd
 8012498:	080126cd 	.word	0x080126cd
 801249c:	080126cd 	.word	0x080126cd
 80124a0:	080126cd 	.word	0x080126cd
 80124a4:	080126cd 	.word	0x080126cd
 80124a8:	080126cd 	.word	0x080126cd
 80124ac:	080126cd 	.word	0x080126cd
 80124b0:	080126cd 	.word	0x080126cd
 80124b4:	080126cd 	.word	0x080126cd
 80124b8:	080126cd 	.word	0x080126cd
 80124bc:	080126cd 	.word	0x080126cd
 80124c0:	080126cd 	.word	0x080126cd
 80124c4:	080126cd 	.word	0x080126cd
 80124c8:	080126cd 	.word	0x080126cd
 80124cc:	080126cd 	.word	0x080126cd
 80124d0:	080126cd 	.word	0x080126cd
 80124d4:	080126cd 	.word	0x080126cd
 80124d8:	080126cd 	.word	0x080126cd
 80124dc:	080126cd 	.word	0x080126cd
 80124e0:	080126cd 	.word	0x080126cd
 80124e4:	080126cd 	.word	0x080126cd
 80124e8:	080126cd 	.word	0x080126cd
 80124ec:	080126cd 	.word	0x080126cd
 80124f0:	080126cd 	.word	0x080126cd
 80124f4:	080126cd 	.word	0x080126cd
 80124f8:	080126cd 	.word	0x080126cd
 80124fc:	080126cd 	.word	0x080126cd
 8012500:	080126cd 	.word	0x080126cd
 8012504:	080126cd 	.word	0x080126cd
 8012508:	080126cd 	.word	0x080126cd
 801250c:	080126cd 	.word	0x080126cd
 8012510:	080126cd 	.word	0x080126cd
 8012514:	080126cd 	.word	0x080126cd
 8012518:	080126cd 	.word	0x080126cd
 801251c:	080126cd 	.word	0x080126cd
 8012520:	080126cd 	.word	0x080126cd
 8012524:	080126cd 	.word	0x080126cd
 8012528:	080126cd 	.word	0x080126cd
 801252c:	080126cd 	.word	0x080126cd
 8012530:	080126cd 	.word	0x080126cd
 8012534:	080126cd 	.word	0x080126cd
 8012538:	080126cd 	.word	0x080126cd
 801253c:	080126cd 	.word	0x080126cd
 8012540:	080126cd 	.word	0x080126cd
 8012544:	080126cd 	.word	0x080126cd
 8012548:	080125cb 	.word	0x080125cb
 801254c:	080125ed 	.word	0x080125ed
 8012550:	08012629 	.word	0x08012629
 8012554:	0801264b 	.word	0x0801264b
 8012558:	080126cd 	.word	0x080126cd
 801255c:	080126cd 	.word	0x080126cd
 8012560:	080126cd 	.word	0x080126cd
 8012564:	08012689 	.word	0x08012689
 8012568:	080126ab 	.word	0x080126ab
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801256c:	2300      	movs	r3, #0
 801256e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012572:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012576:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 801257a:	e0ab      	b.n	80126d4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801257c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012580:	2b04      	cmp	r3, #4
 8012582:	d009      	beq.n	8012598 <dhcp_parse_reply+0x218>
 8012584:	4b3a      	ldr	r3, [pc, #232]	; (8012670 <dhcp_parse_reply+0x2f0>)
 8012586:	f240 622e 	movw	r2, #1582	; 0x62e
 801258a:	493a      	ldr	r1, [pc, #232]	; (8012674 <dhcp_parse_reply+0x2f4>)
 801258c:	483a      	ldr	r0, [pc, #232]	; (8012678 <dhcp_parse_reply+0x2f8>)
 801258e:	f002 ffe7 	bl	8015560 <iprintf>
 8012592:	f06f 0305 	mvn.w	r3, #5
 8012596:	e1b0      	b.n	80128fa <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8012598:	2306      	movs	r3, #6
 801259a:	623b      	str	r3, [r7, #32]
        break;
 801259c:	e09a      	b.n	80126d4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801259e:	2304      	movs	r3, #4
 80125a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80125a4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80125a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80125ac:	429a      	cmp	r2, r3
 80125ae:	d209      	bcs.n	80125c4 <dhcp_parse_reply+0x244>
 80125b0:	4b2f      	ldr	r3, [pc, #188]	; (8012670 <dhcp_parse_reply+0x2f0>)
 80125b2:	f240 6233 	movw	r2, #1587	; 0x633
 80125b6:	4931      	ldr	r1, [pc, #196]	; (801267c <dhcp_parse_reply+0x2fc>)
 80125b8:	482f      	ldr	r0, [pc, #188]	; (8012678 <dhcp_parse_reply+0x2f8>)
 80125ba:	f002 ffd1 	bl	8015560 <iprintf>
 80125be:	f06f 0305 	mvn.w	r3, #5
 80125c2:	e19a      	b.n	80128fa <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80125c4:	2307      	movs	r3, #7
 80125c6:	623b      	str	r3, [r7, #32]
        break;
 80125c8:	e084      	b.n	80126d4 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80125ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80125ce:	2b04      	cmp	r3, #4
 80125d0:	d009      	beq.n	80125e6 <dhcp_parse_reply+0x266>
 80125d2:	4b27      	ldr	r3, [pc, #156]	; (8012670 <dhcp_parse_reply+0x2f0>)
 80125d4:	f240 6241 	movw	r2, #1601	; 0x641
 80125d8:	4926      	ldr	r1, [pc, #152]	; (8012674 <dhcp_parse_reply+0x2f4>)
 80125da:	4827      	ldr	r0, [pc, #156]	; (8012678 <dhcp_parse_reply+0x2f8>)
 80125dc:	f002 ffc0 	bl	8015560 <iprintf>
 80125e0:	f06f 0305 	mvn.w	r3, #5
 80125e4:	e189      	b.n	80128fa <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80125e6:	2303      	movs	r3, #3
 80125e8:	623b      	str	r3, [r7, #32]
        break;
 80125ea:	e073      	b.n	80126d4 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80125ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80125f0:	2b01      	cmp	r3, #1
 80125f2:	d009      	beq.n	8012608 <dhcp_parse_reply+0x288>
 80125f4:	4b1e      	ldr	r3, [pc, #120]	; (8012670 <dhcp_parse_reply+0x2f0>)
 80125f6:	f240 624f 	movw	r2, #1615	; 0x64f
 80125fa:	4921      	ldr	r1, [pc, #132]	; (8012680 <dhcp_parse_reply+0x300>)
 80125fc:	481e      	ldr	r0, [pc, #120]	; (8012678 <dhcp_parse_reply+0x2f8>)
 80125fe:	f002 ffaf 	bl	8015560 <iprintf>
 8012602:	f06f 0305 	mvn.w	r3, #5
 8012606:	e178      	b.n	80128fa <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8012608:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801260a:	2bf0      	cmp	r3, #240	; 0xf0
 801260c:	d009      	beq.n	8012622 <dhcp_parse_reply+0x2a2>
 801260e:	4b18      	ldr	r3, [pc, #96]	; (8012670 <dhcp_parse_reply+0x2f0>)
 8012610:	f240 6251 	movw	r2, #1617	; 0x651
 8012614:	491b      	ldr	r1, [pc, #108]	; (8012684 <dhcp_parse_reply+0x304>)
 8012616:	4818      	ldr	r0, [pc, #96]	; (8012678 <dhcp_parse_reply+0x2f8>)
 8012618:	f002 ffa2 	bl	8015560 <iprintf>
 801261c:	f06f 0305 	mvn.w	r3, #5
 8012620:	e16b      	b.n	80128fa <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8012622:	2300      	movs	r3, #0
 8012624:	623b      	str	r3, [r7, #32]
        break;
 8012626:	e055      	b.n	80126d4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8012628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801262c:	2b01      	cmp	r3, #1
 801262e:	d009      	beq.n	8012644 <dhcp_parse_reply+0x2c4>
 8012630:	4b0f      	ldr	r3, [pc, #60]	; (8012670 <dhcp_parse_reply+0x2f0>)
 8012632:	f240 6255 	movw	r2, #1621	; 0x655
 8012636:	4912      	ldr	r1, [pc, #72]	; (8012680 <dhcp_parse_reply+0x300>)
 8012638:	480f      	ldr	r0, [pc, #60]	; (8012678 <dhcp_parse_reply+0x2f8>)
 801263a:	f002 ff91 	bl	8015560 <iprintf>
 801263e:	f06f 0305 	mvn.w	r3, #5
 8012642:	e15a      	b.n	80128fa <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8012644:	2301      	movs	r3, #1
 8012646:	623b      	str	r3, [r7, #32]
        break;
 8012648:	e044      	b.n	80126d4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801264a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801264e:	2b04      	cmp	r3, #4
 8012650:	d009      	beq.n	8012666 <dhcp_parse_reply+0x2e6>
 8012652:	4b07      	ldr	r3, [pc, #28]	; (8012670 <dhcp_parse_reply+0x2f0>)
 8012654:	f240 6259 	movw	r2, #1625	; 0x659
 8012658:	4906      	ldr	r1, [pc, #24]	; (8012674 <dhcp_parse_reply+0x2f4>)
 801265a:	4807      	ldr	r0, [pc, #28]	; (8012678 <dhcp_parse_reply+0x2f8>)
 801265c:	f002 ff80 	bl	8015560 <iprintf>
 8012660:	f06f 0305 	mvn.w	r3, #5
 8012664:	e149      	b.n	80128fa <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8012666:	2302      	movs	r3, #2
 8012668:	623b      	str	r3, [r7, #32]
        break;
 801266a:	e033      	b.n	80126d4 <dhcp_parse_reply+0x354>
 801266c:	2000d3f8 	.word	0x2000d3f8
 8012670:	08018a64 	.word	0x08018a64
 8012674:	08018cec 	.word	0x08018cec
 8012678:	08018ac4 	.word	0x08018ac4
 801267c:	08018cf8 	.word	0x08018cf8
 8012680:	08018d0c 	.word	0x08018d0c
 8012684:	08018d18 	.word	0x08018d18
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8012688:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801268c:	2b04      	cmp	r3, #4
 801268e:	d009      	beq.n	80126a4 <dhcp_parse_reply+0x324>
 8012690:	4b9c      	ldr	r3, [pc, #624]	; (8012904 <dhcp_parse_reply+0x584>)
 8012692:	f240 625d 	movw	r2, #1629	; 0x65d
 8012696:	499c      	ldr	r1, [pc, #624]	; (8012908 <dhcp_parse_reply+0x588>)
 8012698:	489c      	ldr	r0, [pc, #624]	; (801290c <dhcp_parse_reply+0x58c>)
 801269a:	f002 ff61 	bl	8015560 <iprintf>
 801269e:	f06f 0305 	mvn.w	r3, #5
 80126a2:	e12a      	b.n	80128fa <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 80126a4:	2304      	movs	r3, #4
 80126a6:	623b      	str	r3, [r7, #32]
        break;
 80126a8:	e014      	b.n	80126d4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80126aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80126ae:	2b04      	cmp	r3, #4
 80126b0:	d009      	beq.n	80126c6 <dhcp_parse_reply+0x346>
 80126b2:	4b94      	ldr	r3, [pc, #592]	; (8012904 <dhcp_parse_reply+0x584>)
 80126b4:	f240 6261 	movw	r2, #1633	; 0x661
 80126b8:	4993      	ldr	r1, [pc, #588]	; (8012908 <dhcp_parse_reply+0x588>)
 80126ba:	4894      	ldr	r0, [pc, #592]	; (801290c <dhcp_parse_reply+0x58c>)
 80126bc:	f002 ff50 	bl	8015560 <iprintf>
 80126c0:	f06f 0305 	mvn.w	r3, #5
 80126c4:	e119      	b.n	80128fa <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 80126c6:	2305      	movs	r3, #5
 80126c8:	623b      	str	r3, [r7, #32]
        break;
 80126ca:	e003      	b.n	80126d4 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 80126cc:	2300      	movs	r3, #0
 80126ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 80126d2:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 80126d4:	7dfb      	ldrb	r3, [r7, #23]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d103      	bne.n	80126e2 <dhcp_parse_reply+0x362>
      offset++;
 80126da:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80126dc:	3301      	adds	r3, #1
 80126de:	877b      	strh	r3, [r7, #58]	; 0x3a
 80126e0:	e0a1      	b.n	8012826 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 80126e2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80126e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80126e8:	4413      	add	r3, r2
 80126ea:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80126ee:	4293      	cmp	r3, r2
 80126f0:	dd02      	ble.n	80126f8 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 80126f2:	f06f 0301 	mvn.w	r3, #1
 80126f6:	e100      	b.n	80128fa <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 80126f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80126fc:	b29a      	uxth	r2, r3
 80126fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012700:	4413      	add	r3, r2
 8012702:	b29b      	uxth	r3, r3
 8012704:	3302      	adds	r3, #2
 8012706:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8012708:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801270c:	2b00      	cmp	r3, #0
 801270e:	f000 808a 	beq.w	8012826 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8012712:	2300      	movs	r3, #0
 8012714:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8012716:	6a3b      	ldr	r3, [r7, #32]
 8012718:	2b00      	cmp	r3, #0
 801271a:	db02      	blt.n	8012722 <dhcp_parse_reply+0x3a2>
 801271c:	6a3b      	ldr	r3, [r7, #32]
 801271e:	2b07      	cmp	r3, #7
 8012720:	dd06      	ble.n	8012730 <dhcp_parse_reply+0x3b0>
 8012722:	4b78      	ldr	r3, [pc, #480]	; (8012904 <dhcp_parse_reply+0x584>)
 8012724:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8012728:	4979      	ldr	r1, [pc, #484]	; (8012910 <dhcp_parse_reply+0x590>)
 801272a:	4878      	ldr	r0, [pc, #480]	; (801290c <dhcp_parse_reply+0x58c>)
 801272c:	f002 ff18 	bl	8015560 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8012730:	4a78      	ldr	r2, [pc, #480]	; (8012914 <dhcp_parse_reply+0x594>)
 8012732:	6a3b      	ldr	r3, [r7, #32]
 8012734:	4413      	add	r3, r2
 8012736:	781b      	ldrb	r3, [r3, #0]
 8012738:	2b00      	cmp	r3, #0
 801273a:	d174      	bne.n	8012826 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 801273c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012740:	2b04      	cmp	r3, #4
 8012742:	bf28      	it	cs
 8012744:	2304      	movcs	r3, #4
 8012746:	b2db      	uxtb	r3, r3
 8012748:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801274a:	8bfb      	ldrh	r3, [r7, #30]
 801274c:	8aba      	ldrh	r2, [r7, #20]
 801274e:	f107 0108 	add.w	r1, r7, #8
 8012752:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012754:	f7f8 fc18 	bl	800af88 <pbuf_copy_partial>
 8012758:	4603      	mov	r3, r0
 801275a:	461a      	mov	r2, r3
 801275c:	8abb      	ldrh	r3, [r7, #20]
 801275e:	4293      	cmp	r3, r2
 8012760:	d002      	beq.n	8012768 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8012762:	f06f 0301 	mvn.w	r3, #1
 8012766:	e0c8      	b.n	80128fa <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8012768:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801276c:	2b04      	cmp	r3, #4
 801276e:	d933      	bls.n	80127d8 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8012770:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012774:	f003 0303 	and.w	r3, r3, #3
 8012778:	b2db      	uxtb	r3, r3
 801277a:	2b00      	cmp	r3, #0
 801277c:	d009      	beq.n	8012792 <dhcp_parse_reply+0x412>
 801277e:	4b61      	ldr	r3, [pc, #388]	; (8012904 <dhcp_parse_reply+0x584>)
 8012780:	f240 6281 	movw	r2, #1665	; 0x681
 8012784:	4964      	ldr	r1, [pc, #400]	; (8012918 <dhcp_parse_reply+0x598>)
 8012786:	4861      	ldr	r0, [pc, #388]	; (801290c <dhcp_parse_reply+0x58c>)
 8012788:	f002 feea 	bl	8015560 <iprintf>
 801278c:	f06f 0305 	mvn.w	r3, #5
 8012790:	e0b3      	b.n	80128fa <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8012792:	4a60      	ldr	r2, [pc, #384]	; (8012914 <dhcp_parse_reply+0x594>)
 8012794:	6a3b      	ldr	r3, [r7, #32]
 8012796:	4413      	add	r3, r2
 8012798:	2201      	movs	r2, #1
 801279a:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801279c:	68bb      	ldr	r3, [r7, #8]
 801279e:	4618      	mov	r0, r3
 80127a0:	f7f6 fe03 	bl	80093aa <lwip_htonl>
 80127a4:	4602      	mov	r2, r0
 80127a6:	495d      	ldr	r1, [pc, #372]	; (801291c <dhcp_parse_reply+0x59c>)
 80127a8:	6a3b      	ldr	r3, [r7, #32]
 80127aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 80127ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80127b2:	3b04      	subs	r3, #4
 80127b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 80127b8:	8bfb      	ldrh	r3, [r7, #30]
 80127ba:	3304      	adds	r3, #4
 80127bc:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 80127be:	8a7a      	ldrh	r2, [r7, #18]
 80127c0:	8bfb      	ldrh	r3, [r7, #30]
 80127c2:	429a      	cmp	r2, r3
 80127c4:	d202      	bcs.n	80127cc <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 80127c6:	f06f 0301 	mvn.w	r3, #1
 80127ca:	e096      	b.n	80128fa <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 80127cc:	8a7b      	ldrh	r3, [r7, #18]
 80127ce:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 80127d0:	6a3b      	ldr	r3, [r7, #32]
 80127d2:	3301      	adds	r3, #1
 80127d4:	623b      	str	r3, [r7, #32]
            goto decode_next;
 80127d6:	e79e      	b.n	8012716 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 80127d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80127dc:	2b04      	cmp	r3, #4
 80127de:	d106      	bne.n	80127ee <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 80127e0:	68bb      	ldr	r3, [r7, #8]
 80127e2:	4618      	mov	r0, r3
 80127e4:	f7f6 fde1 	bl	80093aa <lwip_htonl>
 80127e8:	4603      	mov	r3, r0
 80127ea:	60bb      	str	r3, [r7, #8]
 80127ec:	e011      	b.n	8012812 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80127ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80127f2:	2b01      	cmp	r3, #1
 80127f4:	d009      	beq.n	801280a <dhcp_parse_reply+0x48a>
 80127f6:	4b43      	ldr	r3, [pc, #268]	; (8012904 <dhcp_parse_reply+0x584>)
 80127f8:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80127fc:	4948      	ldr	r1, [pc, #288]	; (8012920 <dhcp_parse_reply+0x5a0>)
 80127fe:	4843      	ldr	r0, [pc, #268]	; (801290c <dhcp_parse_reply+0x58c>)
 8012800:	f002 feae 	bl	8015560 <iprintf>
 8012804:	f06f 0305 	mvn.w	r3, #5
 8012808:	e077      	b.n	80128fa <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 801280a:	f107 0308 	add.w	r3, r7, #8
 801280e:	781b      	ldrb	r3, [r3, #0]
 8012810:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8012812:	4a40      	ldr	r2, [pc, #256]	; (8012914 <dhcp_parse_reply+0x594>)
 8012814:	6a3b      	ldr	r3, [r7, #32]
 8012816:	4413      	add	r3, r2
 8012818:	2201      	movs	r2, #1
 801281a:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801281c:	68ba      	ldr	r2, [r7, #8]
 801281e:	493f      	ldr	r1, [pc, #252]	; (801291c <dhcp_parse_reply+0x59c>)
 8012820:	6a3b      	ldr	r3, [r7, #32]
 8012822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8012826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012828:	895b      	ldrh	r3, [r3, #10]
 801282a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801282c:	429a      	cmp	r2, r3
 801282e:	d324      	bcc.n	801287a <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8012830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012832:	895b      	ldrh	r3, [r3, #10]
 8012834:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012836:	1ad3      	subs	r3, r2, r3
 8012838:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801283a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801283c:	895b      	ldrh	r3, [r3, #10]
 801283e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8012840:	1ad3      	subs	r3, r2, r3
 8012842:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8012844:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012846:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8012848:	429a      	cmp	r2, r3
 801284a:	d213      	bcs.n	8012874 <dhcp_parse_reply+0x4f4>
        q = q->next;
 801284c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8012852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012854:	2b00      	cmp	r3, #0
 8012856:	d109      	bne.n	801286c <dhcp_parse_reply+0x4ec>
 8012858:	4b2a      	ldr	r3, [pc, #168]	; (8012904 <dhcp_parse_reply+0x584>)
 801285a:	f240 629d 	movw	r2, #1693	; 0x69d
 801285e:	4931      	ldr	r1, [pc, #196]	; (8012924 <dhcp_parse_reply+0x5a4>)
 8012860:	482a      	ldr	r0, [pc, #168]	; (801290c <dhcp_parse_reply+0x58c>)
 8012862:	f002 fe7d 	bl	8015560 <iprintf>
 8012866:	f06f 0305 	mvn.w	r3, #5
 801286a:	e046      	b.n	80128fa <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 801286c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801286e:	685b      	ldr	r3, [r3, #4]
 8012870:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012872:	e002      	b.n	801287a <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8012874:	f06f 0301 	mvn.w	r3, #1
 8012878:	e03f      	b.n	80128fa <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801287a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801287c:	2b00      	cmp	r3, #0
 801287e:	d00a      	beq.n	8012896 <dhcp_parse_reply+0x516>
 8012880:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012882:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8012884:	429a      	cmp	r2, r3
 8012886:	d206      	bcs.n	8012896 <dhcp_parse_reply+0x516>
 8012888:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801288a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801288c:	4413      	add	r3, r2
 801288e:	781b      	ldrb	r3, [r3, #0]
 8012890:	2bff      	cmp	r3, #255	; 0xff
 8012892:	f47f adb8 	bne.w	8012406 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8012896:	4b1f      	ldr	r3, [pc, #124]	; (8012914 <dhcp_parse_reply+0x594>)
 8012898:	781b      	ldrb	r3, [r3, #0]
 801289a:	2b00      	cmp	r3, #0
 801289c:	d018      	beq.n	80128d0 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801289e:	4b1f      	ldr	r3, [pc, #124]	; (801291c <dhcp_parse_reply+0x59c>)
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80128a4:	4b1b      	ldr	r3, [pc, #108]	; (8012914 <dhcp_parse_reply+0x594>)
 80128a6:	2200      	movs	r2, #0
 80128a8:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	2b01      	cmp	r3, #1
 80128ae:	d102      	bne.n	80128b6 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 80128b0:	2301      	movs	r3, #1
 80128b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80128b4:	e00c      	b.n	80128d0 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	2b02      	cmp	r3, #2
 80128ba:	d102      	bne.n	80128c2 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 80128bc:	2301      	movs	r3, #1
 80128be:	62bb      	str	r3, [r7, #40]	; 0x28
 80128c0:	e006      	b.n	80128d0 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	2b03      	cmp	r3, #3
 80128c6:	d103      	bne.n	80128d0 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 80128c8:	2301      	movs	r3, #1
 80128ca:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 80128cc:	2301      	movs	r3, #1
 80128ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 80128d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d006      	beq.n	80128e4 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 80128d6:	2300      	movs	r3, #0
 80128d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 80128da:	236c      	movs	r3, #108	; 0x6c
 80128dc:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80128de:	23ec      	movs	r3, #236	; 0xec
 80128e0:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 80128e2:	e56a      	b.n	80123ba <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 80128e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d006      	beq.n	80128f8 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 80128ea:	2300      	movs	r3, #0
 80128ec:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 80128ee:	232c      	movs	r3, #44	; 0x2c
 80128f0:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80128f2:	236c      	movs	r3, #108	; 0x6c
 80128f4:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 80128f6:	e560      	b.n	80123ba <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80128f8:	2300      	movs	r3, #0
}
 80128fa:	4618      	mov	r0, r3
 80128fc:	3740      	adds	r7, #64	; 0x40
 80128fe:	46bd      	mov	sp, r7
 8012900:	bd80      	pop	{r7, pc}
 8012902:	bf00      	nop
 8012904:	08018a64 	.word	0x08018a64
 8012908:	08018cec 	.word	0x08018cec
 801290c:	08018ac4 	.word	0x08018ac4
 8012910:	08018d30 	.word	0x08018d30
 8012914:	2000d3f8 	.word	0x2000d3f8
 8012918:	08018d44 	.word	0x08018d44
 801291c:	2000d3d8 	.word	0x2000d3d8
 8012920:	08018d5c 	.word	0x08018d5c
 8012924:	08018d70 	.word	0x08018d70

08012928 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8012928:	b580      	push	{r7, lr}
 801292a:	b08a      	sub	sp, #40	; 0x28
 801292c:	af00      	add	r7, sp, #0
 801292e:	60f8      	str	r0, [r7, #12]
 8012930:	60b9      	str	r1, [r7, #8]
 8012932:	607a      	str	r2, [r7, #4]
 8012934:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8012936:	4b60      	ldr	r3, [pc, #384]	; (8012ab8 <dhcp_recv+0x190>)
 8012938:	685b      	ldr	r3, [r3, #4]
 801293a:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801293c:	6a3b      	ldr	r3, [r7, #32]
 801293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012940:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	685b      	ldr	r3, [r3, #4]
 8012946:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8012948:	69fb      	ldr	r3, [r7, #28]
 801294a:	2b00      	cmp	r3, #0
 801294c:	f000 809d 	beq.w	8012a8a <dhcp_recv+0x162>
 8012950:	69fb      	ldr	r3, [r7, #28]
 8012952:	791b      	ldrb	r3, [r3, #4]
 8012954:	2b00      	cmp	r3, #0
 8012956:	f000 8098 	beq.w	8012a8a <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	895b      	ldrh	r3, [r3, #10]
 801295e:	2b2b      	cmp	r3, #43	; 0x2b
 8012960:	f240 8095 	bls.w	8012a8e <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8012964:	69bb      	ldr	r3, [r7, #24]
 8012966:	781b      	ldrb	r3, [r3, #0]
 8012968:	2b02      	cmp	r3, #2
 801296a:	f040 8092 	bne.w	8012a92 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801296e:	2300      	movs	r3, #0
 8012970:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012974:	e012      	b.n	801299c <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8012976:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801297a:	6a3a      	ldr	r2, [r7, #32]
 801297c:	4413      	add	r3, r2
 801297e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8012982:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012986:	69b9      	ldr	r1, [r7, #24]
 8012988:	440b      	add	r3, r1
 801298a:	7f1b      	ldrb	r3, [r3, #28]
 801298c:	429a      	cmp	r2, r3
 801298e:	f040 8082 	bne.w	8012a96 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8012992:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012996:	3301      	adds	r3, #1
 8012998:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801299c:	6a3b      	ldr	r3, [r7, #32]
 801299e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80129a2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80129a6:	429a      	cmp	r2, r3
 80129a8:	d203      	bcs.n	80129b2 <dhcp_recv+0x8a>
 80129aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80129ae:	2b05      	cmp	r3, #5
 80129b0:	d9e1      	bls.n	8012976 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80129b2:	69bb      	ldr	r3, [r7, #24]
 80129b4:	685b      	ldr	r3, [r3, #4]
 80129b6:	4618      	mov	r0, r3
 80129b8:	f7f6 fcf7 	bl	80093aa <lwip_htonl>
 80129bc:	4602      	mov	r2, r0
 80129be:	69fb      	ldr	r3, [r7, #28]
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	429a      	cmp	r2, r3
 80129c4:	d169      	bne.n	8012a9a <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 80129c6:	69f9      	ldr	r1, [r7, #28]
 80129c8:	6878      	ldr	r0, [r7, #4]
 80129ca:	f7ff fcd9 	bl	8012380 <dhcp_parse_reply>
 80129ce:	4603      	mov	r3, r0
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d164      	bne.n	8012a9e <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80129d4:	4b39      	ldr	r3, [pc, #228]	; (8012abc <dhcp_recv+0x194>)
 80129d6:	785b      	ldrb	r3, [r3, #1]
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d062      	beq.n	8012aa2 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	685b      	ldr	r3, [r3, #4]
 80129e0:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80129e2:	4b37      	ldr	r3, [pc, #220]	; (8012ac0 <dhcp_recv+0x198>)
 80129e4:	685b      	ldr	r3, [r3, #4]
 80129e6:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80129e8:	7cfb      	ldrb	r3, [r7, #19]
 80129ea:	2b05      	cmp	r3, #5
 80129ec:	d12a      	bne.n	8012a44 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80129ee:	69fb      	ldr	r3, [r7, #28]
 80129f0:	795b      	ldrb	r3, [r3, #5]
 80129f2:	2b01      	cmp	r3, #1
 80129f4:	d112      	bne.n	8012a1c <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 80129f6:	6979      	ldr	r1, [r7, #20]
 80129f8:	6a38      	ldr	r0, [r7, #32]
 80129fa:	f7fe fe17 	bl	801162c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80129fe:	6a3b      	ldr	r3, [r7, #32]
 8012a00:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012a04:	f003 0308 	and.w	r3, r3, #8
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d003      	beq.n	8012a14 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8012a0c:	6a38      	ldr	r0, [r7, #32]
 8012a0e:	f7fe fb87 	bl	8011120 <dhcp_check>
 8012a12:	e049      	b.n	8012aa8 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8012a14:	6a38      	ldr	r0, [r7, #32]
 8012a16:	f7ff f867 	bl	8011ae8 <dhcp_bind>
 8012a1a:	e045      	b.n	8012aa8 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8012a1c:	69fb      	ldr	r3, [r7, #28]
 8012a1e:	795b      	ldrb	r3, [r3, #5]
 8012a20:	2b03      	cmp	r3, #3
 8012a22:	d007      	beq.n	8012a34 <dhcp_recv+0x10c>
 8012a24:	69fb      	ldr	r3, [r7, #28]
 8012a26:	795b      	ldrb	r3, [r3, #5]
 8012a28:	2b04      	cmp	r3, #4
 8012a2a:	d003      	beq.n	8012a34 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8012a2c:	69fb      	ldr	r3, [r7, #28]
 8012a2e:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8012a30:	2b05      	cmp	r3, #5
 8012a32:	d139      	bne.n	8012aa8 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8012a34:	6979      	ldr	r1, [r7, #20]
 8012a36:	6a38      	ldr	r0, [r7, #32]
 8012a38:	f7fe fdf8 	bl	801162c <dhcp_handle_ack>
      dhcp_bind(netif);
 8012a3c:	6a38      	ldr	r0, [r7, #32]
 8012a3e:	f7ff f853 	bl	8011ae8 <dhcp_bind>
 8012a42:	e031      	b.n	8012aa8 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8012a44:	7cfb      	ldrb	r3, [r7, #19]
 8012a46:	2b06      	cmp	r3, #6
 8012a48:	d113      	bne.n	8012a72 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8012a4a:	69fb      	ldr	r3, [r7, #28]
 8012a4c:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8012a4e:	2b03      	cmp	r3, #3
 8012a50:	d00b      	beq.n	8012a6a <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8012a52:	69fb      	ldr	r3, [r7, #28]
 8012a54:	795b      	ldrb	r3, [r3, #5]
 8012a56:	2b01      	cmp	r3, #1
 8012a58:	d007      	beq.n	8012a6a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8012a5a:	69fb      	ldr	r3, [r7, #28]
 8012a5c:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8012a5e:	2b04      	cmp	r3, #4
 8012a60:	d003      	beq.n	8012a6a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8012a62:	69fb      	ldr	r3, [r7, #28]
 8012a64:	795b      	ldrb	r3, [r3, #5]
 8012a66:	2b05      	cmp	r3, #5
 8012a68:	d103      	bne.n	8012a72 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8012a6a:	6a38      	ldr	r0, [r7, #32]
 8012a6c:	f7fe fb3e 	bl	80110ec <dhcp_handle_nak>
 8012a70:	e01a      	b.n	8012aa8 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8012a72:	7cfb      	ldrb	r3, [r7, #19]
 8012a74:	2b02      	cmp	r3, #2
 8012a76:	d116      	bne.n	8012aa6 <dhcp_recv+0x17e>
 8012a78:	69fb      	ldr	r3, [r7, #28]
 8012a7a:	795b      	ldrb	r3, [r3, #5]
 8012a7c:	2b06      	cmp	r3, #6
 8012a7e:	d112      	bne.n	8012aa6 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8012a80:	6979      	ldr	r1, [r7, #20]
 8012a82:	6a38      	ldr	r0, [r7, #32]
 8012a84:	f7fe fb80 	bl	8011188 <dhcp_handle_offer>
 8012a88:	e00e      	b.n	8012aa8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8012a8a:	bf00      	nop
 8012a8c:	e00c      	b.n	8012aa8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8012a8e:	bf00      	nop
 8012a90:	e00a      	b.n	8012aa8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8012a92:	bf00      	nop
 8012a94:	e008      	b.n	8012aa8 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8012a96:	bf00      	nop
 8012a98:	e006      	b.n	8012aa8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8012a9a:	bf00      	nop
 8012a9c:	e004      	b.n	8012aa8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8012a9e:	bf00      	nop
 8012aa0:	e002      	b.n	8012aa8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8012aa2:	bf00      	nop
 8012aa4:	e000      	b.n	8012aa8 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8012aa6:	bf00      	nop
  pbuf_free(p);
 8012aa8:	6878      	ldr	r0, [r7, #4]
 8012aaa:	f7f8 f867 	bl	800ab7c <pbuf_free>
}
 8012aae:	bf00      	nop
 8012ab0:	3728      	adds	r7, #40	; 0x28
 8012ab2:	46bd      	mov	sp, r7
 8012ab4:	bd80      	pop	{r7, pc}
 8012ab6:	bf00      	nop
 8012ab8:	20009c04 	.word	0x20009c04
 8012abc:	2000d3f8 	.word	0x2000d3f8
 8012ac0:	2000d3d8 	.word	0x2000d3d8

08012ac4 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8012ac4:	b580      	push	{r7, lr}
 8012ac6:	b088      	sub	sp, #32
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	60f8      	str	r0, [r7, #12]
 8012acc:	60b9      	str	r1, [r7, #8]
 8012ace:	603b      	str	r3, [r7, #0]
 8012ad0:	4613      	mov	r3, r2
 8012ad2:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d108      	bne.n	8012aec <dhcp_create_msg+0x28>
 8012ada:	4b5f      	ldr	r3, [pc, #380]	; (8012c58 <dhcp_create_msg+0x194>)
 8012adc:	f240 7269 	movw	r2, #1897	; 0x769
 8012ae0:	495e      	ldr	r1, [pc, #376]	; (8012c5c <dhcp_create_msg+0x198>)
 8012ae2:	485f      	ldr	r0, [pc, #380]	; (8012c60 <dhcp_create_msg+0x19c>)
 8012ae4:	f002 fd3c 	bl	8015560 <iprintf>
 8012ae8:	2300      	movs	r3, #0
 8012aea:	e0b1      	b.n	8012c50 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8012aec:	68bb      	ldr	r3, [r7, #8]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d108      	bne.n	8012b04 <dhcp_create_msg+0x40>
 8012af2:	4b59      	ldr	r3, [pc, #356]	; (8012c58 <dhcp_create_msg+0x194>)
 8012af4:	f240 726a 	movw	r2, #1898	; 0x76a
 8012af8:	495a      	ldr	r1, [pc, #360]	; (8012c64 <dhcp_create_msg+0x1a0>)
 8012afa:	4859      	ldr	r0, [pc, #356]	; (8012c60 <dhcp_create_msg+0x19c>)
 8012afc:	f002 fd30 	bl	8015560 <iprintf>
 8012b00:	2300      	movs	r3, #0
 8012b02:	e0a5      	b.n	8012c50 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8012b04:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012b08:	f44f 719a 	mov.w	r1, #308	; 0x134
 8012b0c:	2036      	movs	r0, #54	; 0x36
 8012b0e:	f7f7 fd51 	bl	800a5b4 <pbuf_alloc>
 8012b12:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8012b14:	69bb      	ldr	r3, [r7, #24]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d101      	bne.n	8012b1e <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8012b1a:	2300      	movs	r3, #0
 8012b1c:	e098      	b.n	8012c50 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8012b1e:	69bb      	ldr	r3, [r7, #24]
 8012b20:	895b      	ldrh	r3, [r3, #10]
 8012b22:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8012b26:	d206      	bcs.n	8012b36 <dhcp_create_msg+0x72>
 8012b28:	4b4b      	ldr	r3, [pc, #300]	; (8012c58 <dhcp_create_msg+0x194>)
 8012b2a:	f240 7271 	movw	r2, #1905	; 0x771
 8012b2e:	494e      	ldr	r1, [pc, #312]	; (8012c68 <dhcp_create_msg+0x1a4>)
 8012b30:	484b      	ldr	r0, [pc, #300]	; (8012c60 <dhcp_create_msg+0x19c>)
 8012b32:	f002 fd15 	bl	8015560 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8012b36:	79fb      	ldrb	r3, [r7, #7]
 8012b38:	2b03      	cmp	r3, #3
 8012b3a:	d103      	bne.n	8012b44 <dhcp_create_msg+0x80>
 8012b3c:	68bb      	ldr	r3, [r7, #8]
 8012b3e:	795b      	ldrb	r3, [r3, #5]
 8012b40:	2b03      	cmp	r3, #3
 8012b42:	d10d      	bne.n	8012b60 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8012b44:	68bb      	ldr	r3, [r7, #8]
 8012b46:	799b      	ldrb	r3, [r3, #6]
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d105      	bne.n	8012b58 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8012b4c:	f002 fd20 	bl	8015590 <rand>
 8012b50:	4603      	mov	r3, r0
 8012b52:	461a      	mov	r2, r3
 8012b54:	4b45      	ldr	r3, [pc, #276]	; (8012c6c <dhcp_create_msg+0x1a8>)
 8012b56:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8012b58:	4b44      	ldr	r3, [pc, #272]	; (8012c6c <dhcp_create_msg+0x1a8>)
 8012b5a:	681a      	ldr	r2, [r3, #0]
 8012b5c:	68bb      	ldr	r3, [r7, #8]
 8012b5e:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8012b60:	69bb      	ldr	r3, [r7, #24]
 8012b62:	685b      	ldr	r3, [r3, #4]
 8012b64:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8012b66:	f44f 729a 	mov.w	r2, #308	; 0x134
 8012b6a:	2100      	movs	r1, #0
 8012b6c:	6978      	ldr	r0, [r7, #20]
 8012b6e:	f002 fcef 	bl	8015550 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8012b72:	697b      	ldr	r3, [r7, #20]
 8012b74:	2201      	movs	r2, #1
 8012b76:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8012b78:	697b      	ldr	r3, [r7, #20]
 8012b7a:	2201      	movs	r2, #1
 8012b7c:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8012b84:	697b      	ldr	r3, [r7, #20]
 8012b86:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8012b88:	68bb      	ldr	r3, [r7, #8]
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	f7f6 fc0c 	bl	80093aa <lwip_htonl>
 8012b92:	4602      	mov	r2, r0
 8012b94:	697b      	ldr	r3, [r7, #20]
 8012b96:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8012b98:	79fb      	ldrb	r3, [r7, #7]
 8012b9a:	2b08      	cmp	r3, #8
 8012b9c:	d010      	beq.n	8012bc0 <dhcp_create_msg+0xfc>
 8012b9e:	79fb      	ldrb	r3, [r7, #7]
 8012ba0:	2b04      	cmp	r3, #4
 8012ba2:	d00d      	beq.n	8012bc0 <dhcp_create_msg+0xfc>
 8012ba4:	79fb      	ldrb	r3, [r7, #7]
 8012ba6:	2b07      	cmp	r3, #7
 8012ba8:	d00a      	beq.n	8012bc0 <dhcp_create_msg+0xfc>
 8012baa:	79fb      	ldrb	r3, [r7, #7]
 8012bac:	2b03      	cmp	r3, #3
 8012bae:	d10c      	bne.n	8012bca <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8012bb0:	68bb      	ldr	r3, [r7, #8]
 8012bb2:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8012bb4:	2b05      	cmp	r3, #5
 8012bb6:	d003      	beq.n	8012bc0 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8012bb8:	68bb      	ldr	r3, [r7, #8]
 8012bba:	795b      	ldrb	r3, [r3, #5]
 8012bbc:	2b04      	cmp	r3, #4
 8012bbe:	d104      	bne.n	8012bca <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	3304      	adds	r3, #4
 8012bc4:	681a      	ldr	r2, [r3, #0]
 8012bc6:	697b      	ldr	r3, [r7, #20]
 8012bc8:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8012bca:	2300      	movs	r3, #0
 8012bcc:	83fb      	strh	r3, [r7, #30]
 8012bce:	e00c      	b.n	8012bea <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8012bd0:	8bfa      	ldrh	r2, [r7, #30]
 8012bd2:	8bfb      	ldrh	r3, [r7, #30]
 8012bd4:	68f9      	ldr	r1, [r7, #12]
 8012bd6:	440a      	add	r2, r1
 8012bd8:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8012bdc:	697a      	ldr	r2, [r7, #20]
 8012bde:	4413      	add	r3, r2
 8012be0:	460a      	mov	r2, r1
 8012be2:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8012be4:	8bfb      	ldrh	r3, [r7, #30]
 8012be6:	3301      	adds	r3, #1
 8012be8:	83fb      	strh	r3, [r7, #30]
 8012bea:	8bfb      	ldrh	r3, [r7, #30]
 8012bec:	2b05      	cmp	r3, #5
 8012bee:	d9ef      	bls.n	8012bd0 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8012bf0:	697b      	ldr	r3, [r7, #20]
 8012bf2:	2200      	movs	r2, #0
 8012bf4:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8012bf8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8012bfc:	2200      	movs	r2, #0
 8012bfe:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8012c02:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8012c06:	2200      	movs	r2, #0
 8012c08:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8012c0c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8012c10:	2200      	movs	r2, #0
 8012c12:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8012c16:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8012c1a:	697b      	ldr	r3, [r7, #20]
 8012c1c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012c20:	2301      	movs	r3, #1
 8012c22:	2235      	movs	r2, #53	; 0x35
 8012c24:	2000      	movs	r0, #0
 8012c26:	f7ff fadb 	bl	80121e0 <dhcp_option>
 8012c2a:	4603      	mov	r3, r0
 8012c2c:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8012c2e:	697b      	ldr	r3, [r7, #20]
 8012c30:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012c34:	79fa      	ldrb	r2, [r7, #7]
 8012c36:	8a7b      	ldrh	r3, [r7, #18]
 8012c38:	4618      	mov	r0, r3
 8012c3a:	f7ff fb05 	bl	8012248 <dhcp_option_byte>
 8012c3e:	4603      	mov	r3, r0
 8012c40:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8012c42:	683b      	ldr	r3, [r7, #0]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d002      	beq.n	8012c4e <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8012c48:	683b      	ldr	r3, [r7, #0]
 8012c4a:	8a7a      	ldrh	r2, [r7, #18]
 8012c4c:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8012c4e:	69bb      	ldr	r3, [r7, #24]
}
 8012c50:	4618      	mov	r0, r3
 8012c52:	3720      	adds	r7, #32
 8012c54:	46bd      	mov	sp, r7
 8012c56:	bd80      	pop	{r7, pc}
 8012c58:	08018a64 	.word	0x08018a64
 8012c5c:	08018d84 	.word	0x08018d84
 8012c60:	08018ac4 	.word	0x08018ac4
 8012c64:	08018da4 	.word	0x08018da4
 8012c68:	08018dc4 	.word	0x08018dc4
 8012c6c:	2000d408 	.word	0x2000d408

08012c70 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8012c70:	b580      	push	{r7, lr}
 8012c72:	b084      	sub	sp, #16
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	4603      	mov	r3, r0
 8012c78:	60b9      	str	r1, [r7, #8]
 8012c7a:	607a      	str	r2, [r7, #4]
 8012c7c:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8012c7e:	89fb      	ldrh	r3, [r7, #14]
 8012c80:	1c5a      	adds	r2, r3, #1
 8012c82:	81fa      	strh	r2, [r7, #14]
 8012c84:	461a      	mov	r2, r3
 8012c86:	68bb      	ldr	r3, [r7, #8]
 8012c88:	4413      	add	r3, r2
 8012c8a:	22ff      	movs	r2, #255	; 0xff
 8012c8c:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8012c8e:	e007      	b.n	8012ca0 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8012c90:	89fb      	ldrh	r3, [r7, #14]
 8012c92:	1c5a      	adds	r2, r3, #1
 8012c94:	81fa      	strh	r2, [r7, #14]
 8012c96:	461a      	mov	r2, r3
 8012c98:	68bb      	ldr	r3, [r7, #8]
 8012c9a:	4413      	add	r3, r2
 8012c9c:	2200      	movs	r2, #0
 8012c9e:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8012ca0:	89fb      	ldrh	r3, [r7, #14]
 8012ca2:	2b43      	cmp	r3, #67	; 0x43
 8012ca4:	d904      	bls.n	8012cb0 <dhcp_option_trailer+0x40>
 8012ca6:	89fb      	ldrh	r3, [r7, #14]
 8012ca8:	f003 0303 	and.w	r3, r3, #3
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d002      	beq.n	8012cb6 <dhcp_option_trailer+0x46>
 8012cb0:	89fb      	ldrh	r3, [r7, #14]
 8012cb2:	2b43      	cmp	r3, #67	; 0x43
 8012cb4:	d9ec      	bls.n	8012c90 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8012cb6:	89fb      	ldrh	r3, [r7, #14]
 8012cb8:	33f0      	adds	r3, #240	; 0xf0
 8012cba:	b29b      	uxth	r3, r3
 8012cbc:	4619      	mov	r1, r3
 8012cbe:	6878      	ldr	r0, [r7, #4]
 8012cc0:	f7f7 fdd6 	bl	800a870 <pbuf_realloc>
}
 8012cc4:	bf00      	nop
 8012cc6:	3710      	adds	r7, #16
 8012cc8:	46bd      	mov	sp, r7
 8012cca:	bd80      	pop	{r7, pc}

08012ccc <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8012ccc:	b480      	push	{r7}
 8012cce:	b085      	sub	sp, #20
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d017      	beq.n	8012d0a <dhcp_supplied_address+0x3e>
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d013      	beq.n	8012d0a <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ce6:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	795b      	ldrb	r3, [r3, #5]
 8012cec:	2b0a      	cmp	r3, #10
 8012cee:	d007      	beq.n	8012d00 <dhcp_supplied_address+0x34>
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	795b      	ldrb	r3, [r3, #5]
 8012cf4:	2b05      	cmp	r3, #5
 8012cf6:	d003      	beq.n	8012d00 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8012cfc:	2b04      	cmp	r3, #4
 8012cfe:	d101      	bne.n	8012d04 <dhcp_supplied_address+0x38>
 8012d00:	2301      	movs	r3, #1
 8012d02:	e000      	b.n	8012d06 <dhcp_supplied_address+0x3a>
 8012d04:	2300      	movs	r3, #0
 8012d06:	b2db      	uxtb	r3, r3
 8012d08:	e000      	b.n	8012d0c <dhcp_supplied_address+0x40>
  }
  return 0;
 8012d0a:	2300      	movs	r3, #0
}
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	3714      	adds	r7, #20
 8012d10:	46bd      	mov	sp, r7
 8012d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d16:	4770      	bx	lr

08012d18 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8012d18:	b580      	push	{r7, lr}
 8012d1a:	b082      	sub	sp, #8
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8012d20:	4915      	ldr	r1, [pc, #84]	; (8012d78 <etharp_free_entry+0x60>)
 8012d22:	687a      	ldr	r2, [r7, #4]
 8012d24:	4613      	mov	r3, r2
 8012d26:	005b      	lsls	r3, r3, #1
 8012d28:	4413      	add	r3, r2
 8012d2a:	00db      	lsls	r3, r3, #3
 8012d2c:	440b      	add	r3, r1
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d013      	beq.n	8012d5c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8012d34:	4910      	ldr	r1, [pc, #64]	; (8012d78 <etharp_free_entry+0x60>)
 8012d36:	687a      	ldr	r2, [r7, #4]
 8012d38:	4613      	mov	r3, r2
 8012d3a:	005b      	lsls	r3, r3, #1
 8012d3c:	4413      	add	r3, r2
 8012d3e:	00db      	lsls	r3, r3, #3
 8012d40:	440b      	add	r3, r1
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	4618      	mov	r0, r3
 8012d46:	f7f7 ff19 	bl	800ab7c <pbuf_free>
    arp_table[i].q = NULL;
 8012d4a:	490b      	ldr	r1, [pc, #44]	; (8012d78 <etharp_free_entry+0x60>)
 8012d4c:	687a      	ldr	r2, [r7, #4]
 8012d4e:	4613      	mov	r3, r2
 8012d50:	005b      	lsls	r3, r3, #1
 8012d52:	4413      	add	r3, r2
 8012d54:	00db      	lsls	r3, r3, #3
 8012d56:	440b      	add	r3, r1
 8012d58:	2200      	movs	r2, #0
 8012d5a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8012d5c:	4906      	ldr	r1, [pc, #24]	; (8012d78 <etharp_free_entry+0x60>)
 8012d5e:	687a      	ldr	r2, [r7, #4]
 8012d60:	4613      	mov	r3, r2
 8012d62:	005b      	lsls	r3, r3, #1
 8012d64:	4413      	add	r3, r2
 8012d66:	00db      	lsls	r3, r3, #3
 8012d68:	440b      	add	r3, r1
 8012d6a:	3314      	adds	r3, #20
 8012d6c:	2200      	movs	r2, #0
 8012d6e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8012d70:	bf00      	nop
 8012d72:	3708      	adds	r7, #8
 8012d74:	46bd      	mov	sp, r7
 8012d76:	bd80      	pop	{r7, pc}
 8012d78:	2000d40c 	.word	0x2000d40c

08012d7c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8012d7c:	b580      	push	{r7, lr}
 8012d7e:	b082      	sub	sp, #8
 8012d80:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012d82:	2300      	movs	r3, #0
 8012d84:	607b      	str	r3, [r7, #4]
 8012d86:	e096      	b.n	8012eb6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8012d88:	494f      	ldr	r1, [pc, #316]	; (8012ec8 <etharp_tmr+0x14c>)
 8012d8a:	687a      	ldr	r2, [r7, #4]
 8012d8c:	4613      	mov	r3, r2
 8012d8e:	005b      	lsls	r3, r3, #1
 8012d90:	4413      	add	r3, r2
 8012d92:	00db      	lsls	r3, r3, #3
 8012d94:	440b      	add	r3, r1
 8012d96:	3314      	adds	r3, #20
 8012d98:	781b      	ldrb	r3, [r3, #0]
 8012d9a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8012d9c:	78fb      	ldrb	r3, [r7, #3]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	f000 8086 	beq.w	8012eb0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8012da4:	4948      	ldr	r1, [pc, #288]	; (8012ec8 <etharp_tmr+0x14c>)
 8012da6:	687a      	ldr	r2, [r7, #4]
 8012da8:	4613      	mov	r3, r2
 8012daa:	005b      	lsls	r3, r3, #1
 8012dac:	4413      	add	r3, r2
 8012dae:	00db      	lsls	r3, r3, #3
 8012db0:	440b      	add	r3, r1
 8012db2:	3312      	adds	r3, #18
 8012db4:	881b      	ldrh	r3, [r3, #0]
 8012db6:	3301      	adds	r3, #1
 8012db8:	b298      	uxth	r0, r3
 8012dba:	4943      	ldr	r1, [pc, #268]	; (8012ec8 <etharp_tmr+0x14c>)
 8012dbc:	687a      	ldr	r2, [r7, #4]
 8012dbe:	4613      	mov	r3, r2
 8012dc0:	005b      	lsls	r3, r3, #1
 8012dc2:	4413      	add	r3, r2
 8012dc4:	00db      	lsls	r3, r3, #3
 8012dc6:	440b      	add	r3, r1
 8012dc8:	3312      	adds	r3, #18
 8012dca:	4602      	mov	r2, r0
 8012dcc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012dce:	493e      	ldr	r1, [pc, #248]	; (8012ec8 <etharp_tmr+0x14c>)
 8012dd0:	687a      	ldr	r2, [r7, #4]
 8012dd2:	4613      	mov	r3, r2
 8012dd4:	005b      	lsls	r3, r3, #1
 8012dd6:	4413      	add	r3, r2
 8012dd8:	00db      	lsls	r3, r3, #3
 8012dda:	440b      	add	r3, r1
 8012ddc:	3312      	adds	r3, #18
 8012dde:	881b      	ldrh	r3, [r3, #0]
 8012de0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8012de4:	d215      	bcs.n	8012e12 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012de6:	4938      	ldr	r1, [pc, #224]	; (8012ec8 <etharp_tmr+0x14c>)
 8012de8:	687a      	ldr	r2, [r7, #4]
 8012dea:	4613      	mov	r3, r2
 8012dec:	005b      	lsls	r3, r3, #1
 8012dee:	4413      	add	r3, r2
 8012df0:	00db      	lsls	r3, r3, #3
 8012df2:	440b      	add	r3, r1
 8012df4:	3314      	adds	r3, #20
 8012df6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012df8:	2b01      	cmp	r3, #1
 8012dfa:	d10e      	bne.n	8012e1a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8012dfc:	4932      	ldr	r1, [pc, #200]	; (8012ec8 <etharp_tmr+0x14c>)
 8012dfe:	687a      	ldr	r2, [r7, #4]
 8012e00:	4613      	mov	r3, r2
 8012e02:	005b      	lsls	r3, r3, #1
 8012e04:	4413      	add	r3, r2
 8012e06:	00db      	lsls	r3, r3, #3
 8012e08:	440b      	add	r3, r1
 8012e0a:	3312      	adds	r3, #18
 8012e0c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012e0e:	2b04      	cmp	r3, #4
 8012e10:	d903      	bls.n	8012e1a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8012e12:	6878      	ldr	r0, [r7, #4]
 8012e14:	f7ff ff80 	bl	8012d18 <etharp_free_entry>
 8012e18:	e04a      	b.n	8012eb0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8012e1a:	492b      	ldr	r1, [pc, #172]	; (8012ec8 <etharp_tmr+0x14c>)
 8012e1c:	687a      	ldr	r2, [r7, #4]
 8012e1e:	4613      	mov	r3, r2
 8012e20:	005b      	lsls	r3, r3, #1
 8012e22:	4413      	add	r3, r2
 8012e24:	00db      	lsls	r3, r3, #3
 8012e26:	440b      	add	r3, r1
 8012e28:	3314      	adds	r3, #20
 8012e2a:	781b      	ldrb	r3, [r3, #0]
 8012e2c:	2b03      	cmp	r3, #3
 8012e2e:	d10a      	bne.n	8012e46 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8012e30:	4925      	ldr	r1, [pc, #148]	; (8012ec8 <etharp_tmr+0x14c>)
 8012e32:	687a      	ldr	r2, [r7, #4]
 8012e34:	4613      	mov	r3, r2
 8012e36:	005b      	lsls	r3, r3, #1
 8012e38:	4413      	add	r3, r2
 8012e3a:	00db      	lsls	r3, r3, #3
 8012e3c:	440b      	add	r3, r1
 8012e3e:	3314      	adds	r3, #20
 8012e40:	2204      	movs	r2, #4
 8012e42:	701a      	strb	r2, [r3, #0]
 8012e44:	e034      	b.n	8012eb0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8012e46:	4920      	ldr	r1, [pc, #128]	; (8012ec8 <etharp_tmr+0x14c>)
 8012e48:	687a      	ldr	r2, [r7, #4]
 8012e4a:	4613      	mov	r3, r2
 8012e4c:	005b      	lsls	r3, r3, #1
 8012e4e:	4413      	add	r3, r2
 8012e50:	00db      	lsls	r3, r3, #3
 8012e52:	440b      	add	r3, r1
 8012e54:	3314      	adds	r3, #20
 8012e56:	781b      	ldrb	r3, [r3, #0]
 8012e58:	2b04      	cmp	r3, #4
 8012e5a:	d10a      	bne.n	8012e72 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8012e5c:	491a      	ldr	r1, [pc, #104]	; (8012ec8 <etharp_tmr+0x14c>)
 8012e5e:	687a      	ldr	r2, [r7, #4]
 8012e60:	4613      	mov	r3, r2
 8012e62:	005b      	lsls	r3, r3, #1
 8012e64:	4413      	add	r3, r2
 8012e66:	00db      	lsls	r3, r3, #3
 8012e68:	440b      	add	r3, r1
 8012e6a:	3314      	adds	r3, #20
 8012e6c:	2202      	movs	r2, #2
 8012e6e:	701a      	strb	r2, [r3, #0]
 8012e70:	e01e      	b.n	8012eb0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012e72:	4915      	ldr	r1, [pc, #84]	; (8012ec8 <etharp_tmr+0x14c>)
 8012e74:	687a      	ldr	r2, [r7, #4]
 8012e76:	4613      	mov	r3, r2
 8012e78:	005b      	lsls	r3, r3, #1
 8012e7a:	4413      	add	r3, r2
 8012e7c:	00db      	lsls	r3, r3, #3
 8012e7e:	440b      	add	r3, r1
 8012e80:	3314      	adds	r3, #20
 8012e82:	781b      	ldrb	r3, [r3, #0]
 8012e84:	2b01      	cmp	r3, #1
 8012e86:	d113      	bne.n	8012eb0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8012e88:	490f      	ldr	r1, [pc, #60]	; (8012ec8 <etharp_tmr+0x14c>)
 8012e8a:	687a      	ldr	r2, [r7, #4]
 8012e8c:	4613      	mov	r3, r2
 8012e8e:	005b      	lsls	r3, r3, #1
 8012e90:	4413      	add	r3, r2
 8012e92:	00db      	lsls	r3, r3, #3
 8012e94:	440b      	add	r3, r1
 8012e96:	3308      	adds	r3, #8
 8012e98:	6818      	ldr	r0, [r3, #0]
 8012e9a:	687a      	ldr	r2, [r7, #4]
 8012e9c:	4613      	mov	r3, r2
 8012e9e:	005b      	lsls	r3, r3, #1
 8012ea0:	4413      	add	r3, r2
 8012ea2:	00db      	lsls	r3, r3, #3
 8012ea4:	4a08      	ldr	r2, [pc, #32]	; (8012ec8 <etharp_tmr+0x14c>)
 8012ea6:	4413      	add	r3, r2
 8012ea8:	3304      	adds	r3, #4
 8012eaa:	4619      	mov	r1, r3
 8012eac:	f000 fe72 	bl	8013b94 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	3301      	adds	r3, #1
 8012eb4:	607b      	str	r3, [r7, #4]
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	2b09      	cmp	r3, #9
 8012eba:	f77f af65 	ble.w	8012d88 <etharp_tmr+0xc>
      }
    }
  }
}
 8012ebe:	bf00      	nop
 8012ec0:	bf00      	nop
 8012ec2:	3708      	adds	r7, #8
 8012ec4:	46bd      	mov	sp, r7
 8012ec6:	bd80      	pop	{r7, pc}
 8012ec8:	2000d40c 	.word	0x2000d40c

08012ecc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8012ecc:	b580      	push	{r7, lr}
 8012ece:	b08a      	sub	sp, #40	; 0x28
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	60f8      	str	r0, [r7, #12]
 8012ed4:	460b      	mov	r3, r1
 8012ed6:	607a      	str	r2, [r7, #4]
 8012ed8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8012eda:	230a      	movs	r3, #10
 8012edc:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012ede:	230a      	movs	r3, #10
 8012ee0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8012ee2:	230a      	movs	r3, #10
 8012ee4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8012ee6:	2300      	movs	r3, #0
 8012ee8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8012eea:	230a      	movs	r3, #10
 8012eec:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8012eee:	2300      	movs	r3, #0
 8012ef0:	83bb      	strh	r3, [r7, #28]
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	837b      	strh	r3, [r7, #26]
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012efa:	2300      	movs	r3, #0
 8012efc:	843b      	strh	r3, [r7, #32]
 8012efe:	e0ae      	b.n	801305e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8012f00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012f04:	49a6      	ldr	r1, [pc, #664]	; (80131a0 <etharp_find_entry+0x2d4>)
 8012f06:	4613      	mov	r3, r2
 8012f08:	005b      	lsls	r3, r3, #1
 8012f0a:	4413      	add	r3, r2
 8012f0c:	00db      	lsls	r3, r3, #3
 8012f0e:	440b      	add	r3, r1
 8012f10:	3314      	adds	r3, #20
 8012f12:	781b      	ldrb	r3, [r3, #0]
 8012f14:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8012f16:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012f1a:	2b0a      	cmp	r3, #10
 8012f1c:	d105      	bne.n	8012f2a <etharp_find_entry+0x5e>
 8012f1e:	7dfb      	ldrb	r3, [r7, #23]
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d102      	bne.n	8012f2a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8012f24:	8c3b      	ldrh	r3, [r7, #32]
 8012f26:	847b      	strh	r3, [r7, #34]	; 0x22
 8012f28:	e095      	b.n	8013056 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8012f2a:	7dfb      	ldrb	r3, [r7, #23]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	f000 8092 	beq.w	8013056 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8012f32:	7dfb      	ldrb	r3, [r7, #23]
 8012f34:	2b01      	cmp	r3, #1
 8012f36:	d009      	beq.n	8012f4c <etharp_find_entry+0x80>
 8012f38:	7dfb      	ldrb	r3, [r7, #23]
 8012f3a:	2b01      	cmp	r3, #1
 8012f3c:	d806      	bhi.n	8012f4c <etharp_find_entry+0x80>
 8012f3e:	4b99      	ldr	r3, [pc, #612]	; (80131a4 <etharp_find_entry+0x2d8>)
 8012f40:	f240 1223 	movw	r2, #291	; 0x123
 8012f44:	4998      	ldr	r1, [pc, #608]	; (80131a8 <etharp_find_entry+0x2dc>)
 8012f46:	4899      	ldr	r0, [pc, #612]	; (80131ac <etharp_find_entry+0x2e0>)
 8012f48:	f002 fb0a 	bl	8015560 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d020      	beq.n	8012f94 <etharp_find_entry+0xc8>
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	6819      	ldr	r1, [r3, #0]
 8012f56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012f5a:	4891      	ldr	r0, [pc, #580]	; (80131a0 <etharp_find_entry+0x2d4>)
 8012f5c:	4613      	mov	r3, r2
 8012f5e:	005b      	lsls	r3, r3, #1
 8012f60:	4413      	add	r3, r2
 8012f62:	00db      	lsls	r3, r3, #3
 8012f64:	4403      	add	r3, r0
 8012f66:	3304      	adds	r3, #4
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	4299      	cmp	r1, r3
 8012f6c:	d112      	bne.n	8012f94 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d00c      	beq.n	8012f8e <etharp_find_entry+0xc2>
 8012f74:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012f78:	4989      	ldr	r1, [pc, #548]	; (80131a0 <etharp_find_entry+0x2d4>)
 8012f7a:	4613      	mov	r3, r2
 8012f7c:	005b      	lsls	r3, r3, #1
 8012f7e:	4413      	add	r3, r2
 8012f80:	00db      	lsls	r3, r3, #3
 8012f82:	440b      	add	r3, r1
 8012f84:	3308      	adds	r3, #8
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	687a      	ldr	r2, [r7, #4]
 8012f8a:	429a      	cmp	r2, r3
 8012f8c:	d102      	bne.n	8012f94 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8012f8e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012f92:	e100      	b.n	8013196 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8012f94:	7dfb      	ldrb	r3, [r7, #23]
 8012f96:	2b01      	cmp	r3, #1
 8012f98:	d140      	bne.n	801301c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8012f9a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012f9e:	4980      	ldr	r1, [pc, #512]	; (80131a0 <etharp_find_entry+0x2d4>)
 8012fa0:	4613      	mov	r3, r2
 8012fa2:	005b      	lsls	r3, r3, #1
 8012fa4:	4413      	add	r3, r2
 8012fa6:	00db      	lsls	r3, r3, #3
 8012fa8:	440b      	add	r3, r1
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d01a      	beq.n	8012fe6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8012fb0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012fb4:	497a      	ldr	r1, [pc, #488]	; (80131a0 <etharp_find_entry+0x2d4>)
 8012fb6:	4613      	mov	r3, r2
 8012fb8:	005b      	lsls	r3, r3, #1
 8012fba:	4413      	add	r3, r2
 8012fbc:	00db      	lsls	r3, r3, #3
 8012fbe:	440b      	add	r3, r1
 8012fc0:	3312      	adds	r3, #18
 8012fc2:	881b      	ldrh	r3, [r3, #0]
 8012fc4:	8bba      	ldrh	r2, [r7, #28]
 8012fc6:	429a      	cmp	r2, r3
 8012fc8:	d845      	bhi.n	8013056 <etharp_find_entry+0x18a>
            old_queue = i;
 8012fca:	8c3b      	ldrh	r3, [r7, #32]
 8012fcc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8012fce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012fd2:	4973      	ldr	r1, [pc, #460]	; (80131a0 <etharp_find_entry+0x2d4>)
 8012fd4:	4613      	mov	r3, r2
 8012fd6:	005b      	lsls	r3, r3, #1
 8012fd8:	4413      	add	r3, r2
 8012fda:	00db      	lsls	r3, r3, #3
 8012fdc:	440b      	add	r3, r1
 8012fde:	3312      	adds	r3, #18
 8012fe0:	881b      	ldrh	r3, [r3, #0]
 8012fe2:	83bb      	strh	r3, [r7, #28]
 8012fe4:	e037      	b.n	8013056 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8012fe6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012fea:	496d      	ldr	r1, [pc, #436]	; (80131a0 <etharp_find_entry+0x2d4>)
 8012fec:	4613      	mov	r3, r2
 8012fee:	005b      	lsls	r3, r3, #1
 8012ff0:	4413      	add	r3, r2
 8012ff2:	00db      	lsls	r3, r3, #3
 8012ff4:	440b      	add	r3, r1
 8012ff6:	3312      	adds	r3, #18
 8012ff8:	881b      	ldrh	r3, [r3, #0]
 8012ffa:	8b7a      	ldrh	r2, [r7, #26]
 8012ffc:	429a      	cmp	r2, r3
 8012ffe:	d82a      	bhi.n	8013056 <etharp_find_entry+0x18a>
            old_pending = i;
 8013000:	8c3b      	ldrh	r3, [r7, #32]
 8013002:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8013004:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013008:	4965      	ldr	r1, [pc, #404]	; (80131a0 <etharp_find_entry+0x2d4>)
 801300a:	4613      	mov	r3, r2
 801300c:	005b      	lsls	r3, r3, #1
 801300e:	4413      	add	r3, r2
 8013010:	00db      	lsls	r3, r3, #3
 8013012:	440b      	add	r3, r1
 8013014:	3312      	adds	r3, #18
 8013016:	881b      	ldrh	r3, [r3, #0]
 8013018:	837b      	strh	r3, [r7, #26]
 801301a:	e01c      	b.n	8013056 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801301c:	7dfb      	ldrb	r3, [r7, #23]
 801301e:	2b01      	cmp	r3, #1
 8013020:	d919      	bls.n	8013056 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8013022:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013026:	495e      	ldr	r1, [pc, #376]	; (80131a0 <etharp_find_entry+0x2d4>)
 8013028:	4613      	mov	r3, r2
 801302a:	005b      	lsls	r3, r3, #1
 801302c:	4413      	add	r3, r2
 801302e:	00db      	lsls	r3, r3, #3
 8013030:	440b      	add	r3, r1
 8013032:	3312      	adds	r3, #18
 8013034:	881b      	ldrh	r3, [r3, #0]
 8013036:	8b3a      	ldrh	r2, [r7, #24]
 8013038:	429a      	cmp	r2, r3
 801303a:	d80c      	bhi.n	8013056 <etharp_find_entry+0x18a>
            old_stable = i;
 801303c:	8c3b      	ldrh	r3, [r7, #32]
 801303e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8013040:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013044:	4956      	ldr	r1, [pc, #344]	; (80131a0 <etharp_find_entry+0x2d4>)
 8013046:	4613      	mov	r3, r2
 8013048:	005b      	lsls	r3, r3, #1
 801304a:	4413      	add	r3, r2
 801304c:	00db      	lsls	r3, r3, #3
 801304e:	440b      	add	r3, r1
 8013050:	3312      	adds	r3, #18
 8013052:	881b      	ldrh	r3, [r3, #0]
 8013054:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013056:	8c3b      	ldrh	r3, [r7, #32]
 8013058:	3301      	adds	r3, #1
 801305a:	b29b      	uxth	r3, r3
 801305c:	843b      	strh	r3, [r7, #32]
 801305e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013062:	2b09      	cmp	r3, #9
 8013064:	f77f af4c 	ble.w	8012f00 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8013068:	7afb      	ldrb	r3, [r7, #11]
 801306a:	f003 0302 	and.w	r3, r3, #2
 801306e:	2b00      	cmp	r3, #0
 8013070:	d108      	bne.n	8013084 <etharp_find_entry+0x1b8>
 8013072:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013076:	2b0a      	cmp	r3, #10
 8013078:	d107      	bne.n	801308a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801307a:	7afb      	ldrb	r3, [r7, #11]
 801307c:	f003 0301 	and.w	r3, r3, #1
 8013080:	2b00      	cmp	r3, #0
 8013082:	d102      	bne.n	801308a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8013084:	f04f 33ff 	mov.w	r3, #4294967295
 8013088:	e085      	b.n	8013196 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801308a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801308e:	2b09      	cmp	r3, #9
 8013090:	dc02      	bgt.n	8013098 <etharp_find_entry+0x1cc>
    i = empty;
 8013092:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013094:	843b      	strh	r3, [r7, #32]
 8013096:	e039      	b.n	801310c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8013098:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801309c:	2b09      	cmp	r3, #9
 801309e:	dc14      	bgt.n	80130ca <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80130a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80130a2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80130a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80130a8:	493d      	ldr	r1, [pc, #244]	; (80131a0 <etharp_find_entry+0x2d4>)
 80130aa:	4613      	mov	r3, r2
 80130ac:	005b      	lsls	r3, r3, #1
 80130ae:	4413      	add	r3, r2
 80130b0:	00db      	lsls	r3, r3, #3
 80130b2:	440b      	add	r3, r1
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d018      	beq.n	80130ec <etharp_find_entry+0x220>
 80130ba:	4b3a      	ldr	r3, [pc, #232]	; (80131a4 <etharp_find_entry+0x2d8>)
 80130bc:	f240 126d 	movw	r2, #365	; 0x16d
 80130c0:	493b      	ldr	r1, [pc, #236]	; (80131b0 <etharp_find_entry+0x2e4>)
 80130c2:	483a      	ldr	r0, [pc, #232]	; (80131ac <etharp_find_entry+0x2e0>)
 80130c4:	f002 fa4c 	bl	8015560 <iprintf>
 80130c8:	e010      	b.n	80130ec <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80130ca:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80130ce:	2b09      	cmp	r3, #9
 80130d0:	dc02      	bgt.n	80130d8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80130d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80130d4:	843b      	strh	r3, [r7, #32]
 80130d6:	e009      	b.n	80130ec <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80130d8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80130dc:	2b09      	cmp	r3, #9
 80130de:	dc02      	bgt.n	80130e6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80130e0:	8bfb      	ldrh	r3, [r7, #30]
 80130e2:	843b      	strh	r3, [r7, #32]
 80130e4:	e002      	b.n	80130ec <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80130e6:	f04f 33ff 	mov.w	r3, #4294967295
 80130ea:	e054      	b.n	8013196 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80130ec:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80130f0:	2b09      	cmp	r3, #9
 80130f2:	dd06      	ble.n	8013102 <etharp_find_entry+0x236>
 80130f4:	4b2b      	ldr	r3, [pc, #172]	; (80131a4 <etharp_find_entry+0x2d8>)
 80130f6:	f240 127f 	movw	r2, #383	; 0x17f
 80130fa:	492e      	ldr	r1, [pc, #184]	; (80131b4 <etharp_find_entry+0x2e8>)
 80130fc:	482b      	ldr	r0, [pc, #172]	; (80131ac <etharp_find_entry+0x2e0>)
 80130fe:	f002 fa2f 	bl	8015560 <iprintf>
    etharp_free_entry(i);
 8013102:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013106:	4618      	mov	r0, r3
 8013108:	f7ff fe06 	bl	8012d18 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801310c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013110:	2b09      	cmp	r3, #9
 8013112:	dd06      	ble.n	8013122 <etharp_find_entry+0x256>
 8013114:	4b23      	ldr	r3, [pc, #140]	; (80131a4 <etharp_find_entry+0x2d8>)
 8013116:	f240 1283 	movw	r2, #387	; 0x183
 801311a:	4926      	ldr	r1, [pc, #152]	; (80131b4 <etharp_find_entry+0x2e8>)
 801311c:	4823      	ldr	r0, [pc, #140]	; (80131ac <etharp_find_entry+0x2e0>)
 801311e:	f002 fa1f 	bl	8015560 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8013122:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013126:	491e      	ldr	r1, [pc, #120]	; (80131a0 <etharp_find_entry+0x2d4>)
 8013128:	4613      	mov	r3, r2
 801312a:	005b      	lsls	r3, r3, #1
 801312c:	4413      	add	r3, r2
 801312e:	00db      	lsls	r3, r3, #3
 8013130:	440b      	add	r3, r1
 8013132:	3314      	adds	r3, #20
 8013134:	781b      	ldrb	r3, [r3, #0]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d006      	beq.n	8013148 <etharp_find_entry+0x27c>
 801313a:	4b1a      	ldr	r3, [pc, #104]	; (80131a4 <etharp_find_entry+0x2d8>)
 801313c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8013140:	491d      	ldr	r1, [pc, #116]	; (80131b8 <etharp_find_entry+0x2ec>)
 8013142:	481a      	ldr	r0, [pc, #104]	; (80131ac <etharp_find_entry+0x2e0>)
 8013144:	f002 fa0c 	bl	8015560 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d00b      	beq.n	8013166 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801314e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	6819      	ldr	r1, [r3, #0]
 8013156:	4812      	ldr	r0, [pc, #72]	; (80131a0 <etharp_find_entry+0x2d4>)
 8013158:	4613      	mov	r3, r2
 801315a:	005b      	lsls	r3, r3, #1
 801315c:	4413      	add	r3, r2
 801315e:	00db      	lsls	r3, r3, #3
 8013160:	4403      	add	r3, r0
 8013162:	3304      	adds	r3, #4
 8013164:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8013166:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801316a:	490d      	ldr	r1, [pc, #52]	; (80131a0 <etharp_find_entry+0x2d4>)
 801316c:	4613      	mov	r3, r2
 801316e:	005b      	lsls	r3, r3, #1
 8013170:	4413      	add	r3, r2
 8013172:	00db      	lsls	r3, r3, #3
 8013174:	440b      	add	r3, r1
 8013176:	3312      	adds	r3, #18
 8013178:	2200      	movs	r2, #0
 801317a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801317c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013180:	4907      	ldr	r1, [pc, #28]	; (80131a0 <etharp_find_entry+0x2d4>)
 8013182:	4613      	mov	r3, r2
 8013184:	005b      	lsls	r3, r3, #1
 8013186:	4413      	add	r3, r2
 8013188:	00db      	lsls	r3, r3, #3
 801318a:	440b      	add	r3, r1
 801318c:	3308      	adds	r3, #8
 801318e:	687a      	ldr	r2, [r7, #4]
 8013190:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8013192:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8013196:	4618      	mov	r0, r3
 8013198:	3728      	adds	r7, #40	; 0x28
 801319a:	46bd      	mov	sp, r7
 801319c:	bd80      	pop	{r7, pc}
 801319e:	bf00      	nop
 80131a0:	2000d40c 	.word	0x2000d40c
 80131a4:	08018e04 	.word	0x08018e04
 80131a8:	08018e3c 	.word	0x08018e3c
 80131ac:	08018e7c 	.word	0x08018e7c
 80131b0:	08018ea4 	.word	0x08018ea4
 80131b4:	08018ebc 	.word	0x08018ebc
 80131b8:	08018ed0 	.word	0x08018ed0

080131bc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80131bc:	b580      	push	{r7, lr}
 80131be:	b088      	sub	sp, #32
 80131c0:	af02      	add	r7, sp, #8
 80131c2:	60f8      	str	r0, [r7, #12]
 80131c4:	60b9      	str	r1, [r7, #8]
 80131c6:	607a      	str	r2, [r7, #4]
 80131c8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80131d0:	2b06      	cmp	r3, #6
 80131d2:	d006      	beq.n	80131e2 <etharp_update_arp_entry+0x26>
 80131d4:	4b48      	ldr	r3, [pc, #288]	; (80132f8 <etharp_update_arp_entry+0x13c>)
 80131d6:	f240 12a9 	movw	r2, #425	; 0x1a9
 80131da:	4948      	ldr	r1, [pc, #288]	; (80132fc <etharp_update_arp_entry+0x140>)
 80131dc:	4848      	ldr	r0, [pc, #288]	; (8013300 <etharp_update_arp_entry+0x144>)
 80131de:	f002 f9bf 	bl	8015560 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80131e2:	68bb      	ldr	r3, [r7, #8]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d012      	beq.n	801320e <etharp_update_arp_entry+0x52>
 80131e8:	68bb      	ldr	r3, [r7, #8]
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d00e      	beq.n	801320e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80131f0:	68bb      	ldr	r3, [r7, #8]
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	68f9      	ldr	r1, [r7, #12]
 80131f6:	4618      	mov	r0, r3
 80131f8:	f001 f920 	bl	801443c <ip4_addr_isbroadcast_u32>
 80131fc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d105      	bne.n	801320e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8013202:	68bb      	ldr	r3, [r7, #8]
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801320a:	2be0      	cmp	r3, #224	; 0xe0
 801320c:	d102      	bne.n	8013214 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801320e:	f06f 030f 	mvn.w	r3, #15
 8013212:	e06c      	b.n	80132ee <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8013214:	78fb      	ldrb	r3, [r7, #3]
 8013216:	68fa      	ldr	r2, [r7, #12]
 8013218:	4619      	mov	r1, r3
 801321a:	68b8      	ldr	r0, [r7, #8]
 801321c:	f7ff fe56 	bl	8012ecc <etharp_find_entry>
 8013220:	4603      	mov	r3, r0
 8013222:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8013224:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013228:	2b00      	cmp	r3, #0
 801322a:	da02      	bge.n	8013232 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801322c:	8afb      	ldrh	r3, [r7, #22]
 801322e:	b25b      	sxtb	r3, r3
 8013230:	e05d      	b.n	80132ee <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8013232:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013236:	4933      	ldr	r1, [pc, #204]	; (8013304 <etharp_update_arp_entry+0x148>)
 8013238:	4613      	mov	r3, r2
 801323a:	005b      	lsls	r3, r3, #1
 801323c:	4413      	add	r3, r2
 801323e:	00db      	lsls	r3, r3, #3
 8013240:	440b      	add	r3, r1
 8013242:	3314      	adds	r3, #20
 8013244:	2202      	movs	r2, #2
 8013246:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8013248:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801324c:	492d      	ldr	r1, [pc, #180]	; (8013304 <etharp_update_arp_entry+0x148>)
 801324e:	4613      	mov	r3, r2
 8013250:	005b      	lsls	r3, r3, #1
 8013252:	4413      	add	r3, r2
 8013254:	00db      	lsls	r3, r3, #3
 8013256:	440b      	add	r3, r1
 8013258:	3308      	adds	r3, #8
 801325a:	68fa      	ldr	r2, [r7, #12]
 801325c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801325e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013262:	4613      	mov	r3, r2
 8013264:	005b      	lsls	r3, r3, #1
 8013266:	4413      	add	r3, r2
 8013268:	00db      	lsls	r3, r3, #3
 801326a:	3308      	adds	r3, #8
 801326c:	4a25      	ldr	r2, [pc, #148]	; (8013304 <etharp_update_arp_entry+0x148>)
 801326e:	4413      	add	r3, r2
 8013270:	3304      	adds	r3, #4
 8013272:	2206      	movs	r2, #6
 8013274:	6879      	ldr	r1, [r7, #4]
 8013276:	4618      	mov	r0, r3
 8013278:	f002 f95c 	bl	8015534 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801327c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013280:	4920      	ldr	r1, [pc, #128]	; (8013304 <etharp_update_arp_entry+0x148>)
 8013282:	4613      	mov	r3, r2
 8013284:	005b      	lsls	r3, r3, #1
 8013286:	4413      	add	r3, r2
 8013288:	00db      	lsls	r3, r3, #3
 801328a:	440b      	add	r3, r1
 801328c:	3312      	adds	r3, #18
 801328e:	2200      	movs	r2, #0
 8013290:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8013292:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013296:	491b      	ldr	r1, [pc, #108]	; (8013304 <etharp_update_arp_entry+0x148>)
 8013298:	4613      	mov	r3, r2
 801329a:	005b      	lsls	r3, r3, #1
 801329c:	4413      	add	r3, r2
 801329e:	00db      	lsls	r3, r3, #3
 80132a0:	440b      	add	r3, r1
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d021      	beq.n	80132ec <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80132a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80132ac:	4915      	ldr	r1, [pc, #84]	; (8013304 <etharp_update_arp_entry+0x148>)
 80132ae:	4613      	mov	r3, r2
 80132b0:	005b      	lsls	r3, r3, #1
 80132b2:	4413      	add	r3, r2
 80132b4:	00db      	lsls	r3, r3, #3
 80132b6:	440b      	add	r3, r1
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80132bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80132c0:	4910      	ldr	r1, [pc, #64]	; (8013304 <etharp_update_arp_entry+0x148>)
 80132c2:	4613      	mov	r3, r2
 80132c4:	005b      	lsls	r3, r3, #1
 80132c6:	4413      	add	r3, r2
 80132c8:	00db      	lsls	r3, r3, #3
 80132ca:	440b      	add	r3, r1
 80132cc:	2200      	movs	r2, #0
 80132ce:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80132d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80132da:	9300      	str	r3, [sp, #0]
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	6939      	ldr	r1, [r7, #16]
 80132e0:	68f8      	ldr	r0, [r7, #12]
 80132e2:	f001 ffb9 	bl	8015258 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80132e6:	6938      	ldr	r0, [r7, #16]
 80132e8:	f7f7 fc48 	bl	800ab7c <pbuf_free>
  }
  return ERR_OK;
 80132ec:	2300      	movs	r3, #0
}
 80132ee:	4618      	mov	r0, r3
 80132f0:	3718      	adds	r7, #24
 80132f2:	46bd      	mov	sp, r7
 80132f4:	bd80      	pop	{r7, pc}
 80132f6:	bf00      	nop
 80132f8:	08018e04 	.word	0x08018e04
 80132fc:	08018efc 	.word	0x08018efc
 8013300:	08018e7c 	.word	0x08018e7c
 8013304:	2000d40c 	.word	0x2000d40c

08013308 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8013308:	b580      	push	{r7, lr}
 801330a:	b084      	sub	sp, #16
 801330c:	af00      	add	r7, sp, #0
 801330e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013310:	2300      	movs	r3, #0
 8013312:	60fb      	str	r3, [r7, #12]
 8013314:	e01e      	b.n	8013354 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8013316:	4913      	ldr	r1, [pc, #76]	; (8013364 <etharp_cleanup_netif+0x5c>)
 8013318:	68fa      	ldr	r2, [r7, #12]
 801331a:	4613      	mov	r3, r2
 801331c:	005b      	lsls	r3, r3, #1
 801331e:	4413      	add	r3, r2
 8013320:	00db      	lsls	r3, r3, #3
 8013322:	440b      	add	r3, r1
 8013324:	3314      	adds	r3, #20
 8013326:	781b      	ldrb	r3, [r3, #0]
 8013328:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801332a:	7afb      	ldrb	r3, [r7, #11]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d00e      	beq.n	801334e <etharp_cleanup_netif+0x46>
 8013330:	490c      	ldr	r1, [pc, #48]	; (8013364 <etharp_cleanup_netif+0x5c>)
 8013332:	68fa      	ldr	r2, [r7, #12]
 8013334:	4613      	mov	r3, r2
 8013336:	005b      	lsls	r3, r3, #1
 8013338:	4413      	add	r3, r2
 801333a:	00db      	lsls	r3, r3, #3
 801333c:	440b      	add	r3, r1
 801333e:	3308      	adds	r3, #8
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	687a      	ldr	r2, [r7, #4]
 8013344:	429a      	cmp	r2, r3
 8013346:	d102      	bne.n	801334e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8013348:	68f8      	ldr	r0, [r7, #12]
 801334a:	f7ff fce5 	bl	8012d18 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	3301      	adds	r3, #1
 8013352:	60fb      	str	r3, [r7, #12]
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	2b09      	cmp	r3, #9
 8013358:	dddd      	ble.n	8013316 <etharp_cleanup_netif+0xe>
    }
  }
}
 801335a:	bf00      	nop
 801335c:	bf00      	nop
 801335e:	3710      	adds	r7, #16
 8013360:	46bd      	mov	sp, r7
 8013362:	bd80      	pop	{r7, pc}
 8013364:	2000d40c 	.word	0x2000d40c

08013368 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8013368:	b5b0      	push	{r4, r5, r7, lr}
 801336a:	b08a      	sub	sp, #40	; 0x28
 801336c:	af04      	add	r7, sp, #16
 801336e:	6078      	str	r0, [r7, #4]
 8013370:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013372:	683b      	ldr	r3, [r7, #0]
 8013374:	2b00      	cmp	r3, #0
 8013376:	d107      	bne.n	8013388 <etharp_input+0x20>
 8013378:	4b3f      	ldr	r3, [pc, #252]	; (8013478 <etharp_input+0x110>)
 801337a:	f240 228a 	movw	r2, #650	; 0x28a
 801337e:	493f      	ldr	r1, [pc, #252]	; (801347c <etharp_input+0x114>)
 8013380:	483f      	ldr	r0, [pc, #252]	; (8013480 <etharp_input+0x118>)
 8013382:	f002 f8ed 	bl	8015560 <iprintf>
 8013386:	e074      	b.n	8013472 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	685b      	ldr	r3, [r3, #4]
 801338c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801338e:	693b      	ldr	r3, [r7, #16]
 8013390:	881b      	ldrh	r3, [r3, #0]
 8013392:	b29b      	uxth	r3, r3
 8013394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013398:	d10c      	bne.n	80133b4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801339a:	693b      	ldr	r3, [r7, #16]
 801339c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801339e:	2b06      	cmp	r3, #6
 80133a0:	d108      	bne.n	80133b4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80133a2:	693b      	ldr	r3, [r7, #16]
 80133a4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80133a6:	2b04      	cmp	r3, #4
 80133a8:	d104      	bne.n	80133b4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80133aa:	693b      	ldr	r3, [r7, #16]
 80133ac:	885b      	ldrh	r3, [r3, #2]
 80133ae:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80133b0:	2b08      	cmp	r3, #8
 80133b2:	d003      	beq.n	80133bc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80133b4:	6878      	ldr	r0, [r7, #4]
 80133b6:	f7f7 fbe1 	bl	800ab7c <pbuf_free>
    return;
 80133ba:	e05a      	b.n	8013472 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80133bc:	693b      	ldr	r3, [r7, #16]
 80133be:	330e      	adds	r3, #14
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80133c4:	693b      	ldr	r3, [r7, #16]
 80133c6:	3318      	adds	r3, #24
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80133cc:	683b      	ldr	r3, [r7, #0]
 80133ce:	3304      	adds	r3, #4
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d102      	bne.n	80133dc <etharp_input+0x74>
    for_us = 0;
 80133d6:	2300      	movs	r3, #0
 80133d8:	75fb      	strb	r3, [r7, #23]
 80133da:	e009      	b.n	80133f0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80133dc:	68ba      	ldr	r2, [r7, #8]
 80133de:	683b      	ldr	r3, [r7, #0]
 80133e0:	3304      	adds	r3, #4
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	429a      	cmp	r2, r3
 80133e6:	bf0c      	ite	eq
 80133e8:	2301      	moveq	r3, #1
 80133ea:	2300      	movne	r3, #0
 80133ec:	b2db      	uxtb	r3, r3
 80133ee:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80133f0:	693b      	ldr	r3, [r7, #16]
 80133f2:	f103 0208 	add.w	r2, r3, #8
 80133f6:	7dfb      	ldrb	r3, [r7, #23]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d001      	beq.n	8013400 <etharp_input+0x98>
 80133fc:	2301      	movs	r3, #1
 80133fe:	e000      	b.n	8013402 <etharp_input+0x9a>
 8013400:	2302      	movs	r3, #2
 8013402:	f107 010c 	add.w	r1, r7, #12
 8013406:	6838      	ldr	r0, [r7, #0]
 8013408:	f7ff fed8 	bl	80131bc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801340c:	693b      	ldr	r3, [r7, #16]
 801340e:	88db      	ldrh	r3, [r3, #6]
 8013410:	b29b      	uxth	r3, r3
 8013412:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013416:	d003      	beq.n	8013420 <etharp_input+0xb8>
 8013418:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801341c:	d01e      	beq.n	801345c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801341e:	e025      	b.n	801346c <etharp_input+0x104>
      if (for_us) {
 8013420:	7dfb      	ldrb	r3, [r7, #23]
 8013422:	2b00      	cmp	r3, #0
 8013424:	d021      	beq.n	801346a <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8013426:	683b      	ldr	r3, [r7, #0]
 8013428:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801342c:	693b      	ldr	r3, [r7, #16]
 801342e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8013432:	683b      	ldr	r3, [r7, #0]
 8013434:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8013438:	683b      	ldr	r3, [r7, #0]
 801343a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801343c:	693a      	ldr	r2, [r7, #16]
 801343e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8013440:	2102      	movs	r1, #2
 8013442:	9103      	str	r1, [sp, #12]
 8013444:	f107 010c 	add.w	r1, r7, #12
 8013448:	9102      	str	r1, [sp, #8]
 801344a:	9201      	str	r2, [sp, #4]
 801344c:	9300      	str	r3, [sp, #0]
 801344e:	462b      	mov	r3, r5
 8013450:	4622      	mov	r2, r4
 8013452:	4601      	mov	r1, r0
 8013454:	6838      	ldr	r0, [r7, #0]
 8013456:	f000 faef 	bl	8013a38 <etharp_raw>
      break;
 801345a:	e006      	b.n	801346a <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801345c:	f107 030c 	add.w	r3, r7, #12
 8013460:	4619      	mov	r1, r3
 8013462:	6838      	ldr	r0, [r7, #0]
 8013464:	f7fe f9fc 	bl	8011860 <dhcp_arp_reply>
      break;
 8013468:	e000      	b.n	801346c <etharp_input+0x104>
      break;
 801346a:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801346c:	6878      	ldr	r0, [r7, #4]
 801346e:	f7f7 fb85 	bl	800ab7c <pbuf_free>
}
 8013472:	3718      	adds	r7, #24
 8013474:	46bd      	mov	sp, r7
 8013476:	bdb0      	pop	{r4, r5, r7, pc}
 8013478:	08018e04 	.word	0x08018e04
 801347c:	08018f54 	.word	0x08018f54
 8013480:	08018e7c 	.word	0x08018e7c

08013484 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8013484:	b580      	push	{r7, lr}
 8013486:	b086      	sub	sp, #24
 8013488:	af02      	add	r7, sp, #8
 801348a:	60f8      	str	r0, [r7, #12]
 801348c:	60b9      	str	r1, [r7, #8]
 801348e:	4613      	mov	r3, r2
 8013490:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8013492:	79fa      	ldrb	r2, [r7, #7]
 8013494:	4944      	ldr	r1, [pc, #272]	; (80135a8 <etharp_output_to_arp_index+0x124>)
 8013496:	4613      	mov	r3, r2
 8013498:	005b      	lsls	r3, r3, #1
 801349a:	4413      	add	r3, r2
 801349c:	00db      	lsls	r3, r3, #3
 801349e:	440b      	add	r3, r1
 80134a0:	3314      	adds	r3, #20
 80134a2:	781b      	ldrb	r3, [r3, #0]
 80134a4:	2b01      	cmp	r3, #1
 80134a6:	d806      	bhi.n	80134b6 <etharp_output_to_arp_index+0x32>
 80134a8:	4b40      	ldr	r3, [pc, #256]	; (80135ac <etharp_output_to_arp_index+0x128>)
 80134aa:	f240 22ee 	movw	r2, #750	; 0x2ee
 80134ae:	4940      	ldr	r1, [pc, #256]	; (80135b0 <etharp_output_to_arp_index+0x12c>)
 80134b0:	4840      	ldr	r0, [pc, #256]	; (80135b4 <etharp_output_to_arp_index+0x130>)
 80134b2:	f002 f855 	bl	8015560 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80134b6:	79fa      	ldrb	r2, [r7, #7]
 80134b8:	493b      	ldr	r1, [pc, #236]	; (80135a8 <etharp_output_to_arp_index+0x124>)
 80134ba:	4613      	mov	r3, r2
 80134bc:	005b      	lsls	r3, r3, #1
 80134be:	4413      	add	r3, r2
 80134c0:	00db      	lsls	r3, r3, #3
 80134c2:	440b      	add	r3, r1
 80134c4:	3314      	adds	r3, #20
 80134c6:	781b      	ldrb	r3, [r3, #0]
 80134c8:	2b02      	cmp	r3, #2
 80134ca:	d153      	bne.n	8013574 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80134cc:	79fa      	ldrb	r2, [r7, #7]
 80134ce:	4936      	ldr	r1, [pc, #216]	; (80135a8 <etharp_output_to_arp_index+0x124>)
 80134d0:	4613      	mov	r3, r2
 80134d2:	005b      	lsls	r3, r3, #1
 80134d4:	4413      	add	r3, r2
 80134d6:	00db      	lsls	r3, r3, #3
 80134d8:	440b      	add	r3, r1
 80134da:	3312      	adds	r3, #18
 80134dc:	881b      	ldrh	r3, [r3, #0]
 80134de:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80134e2:	d919      	bls.n	8013518 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80134e4:	79fa      	ldrb	r2, [r7, #7]
 80134e6:	4613      	mov	r3, r2
 80134e8:	005b      	lsls	r3, r3, #1
 80134ea:	4413      	add	r3, r2
 80134ec:	00db      	lsls	r3, r3, #3
 80134ee:	4a2e      	ldr	r2, [pc, #184]	; (80135a8 <etharp_output_to_arp_index+0x124>)
 80134f0:	4413      	add	r3, r2
 80134f2:	3304      	adds	r3, #4
 80134f4:	4619      	mov	r1, r3
 80134f6:	68f8      	ldr	r0, [r7, #12]
 80134f8:	f000 fb4c 	bl	8013b94 <etharp_request>
 80134fc:	4603      	mov	r3, r0
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d138      	bne.n	8013574 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013502:	79fa      	ldrb	r2, [r7, #7]
 8013504:	4928      	ldr	r1, [pc, #160]	; (80135a8 <etharp_output_to_arp_index+0x124>)
 8013506:	4613      	mov	r3, r2
 8013508:	005b      	lsls	r3, r3, #1
 801350a:	4413      	add	r3, r2
 801350c:	00db      	lsls	r3, r3, #3
 801350e:	440b      	add	r3, r1
 8013510:	3314      	adds	r3, #20
 8013512:	2203      	movs	r2, #3
 8013514:	701a      	strb	r2, [r3, #0]
 8013516:	e02d      	b.n	8013574 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8013518:	79fa      	ldrb	r2, [r7, #7]
 801351a:	4923      	ldr	r1, [pc, #140]	; (80135a8 <etharp_output_to_arp_index+0x124>)
 801351c:	4613      	mov	r3, r2
 801351e:	005b      	lsls	r3, r3, #1
 8013520:	4413      	add	r3, r2
 8013522:	00db      	lsls	r3, r3, #3
 8013524:	440b      	add	r3, r1
 8013526:	3312      	adds	r3, #18
 8013528:	881b      	ldrh	r3, [r3, #0]
 801352a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801352e:	d321      	bcc.n	8013574 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013530:	79fa      	ldrb	r2, [r7, #7]
 8013532:	4613      	mov	r3, r2
 8013534:	005b      	lsls	r3, r3, #1
 8013536:	4413      	add	r3, r2
 8013538:	00db      	lsls	r3, r3, #3
 801353a:	4a1b      	ldr	r2, [pc, #108]	; (80135a8 <etharp_output_to_arp_index+0x124>)
 801353c:	4413      	add	r3, r2
 801353e:	1d19      	adds	r1, r3, #4
 8013540:	79fa      	ldrb	r2, [r7, #7]
 8013542:	4613      	mov	r3, r2
 8013544:	005b      	lsls	r3, r3, #1
 8013546:	4413      	add	r3, r2
 8013548:	00db      	lsls	r3, r3, #3
 801354a:	3308      	adds	r3, #8
 801354c:	4a16      	ldr	r2, [pc, #88]	; (80135a8 <etharp_output_to_arp_index+0x124>)
 801354e:	4413      	add	r3, r2
 8013550:	3304      	adds	r3, #4
 8013552:	461a      	mov	r2, r3
 8013554:	68f8      	ldr	r0, [r7, #12]
 8013556:	f000 fafb 	bl	8013b50 <etharp_request_dst>
 801355a:	4603      	mov	r3, r0
 801355c:	2b00      	cmp	r3, #0
 801355e:	d109      	bne.n	8013574 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013560:	79fa      	ldrb	r2, [r7, #7]
 8013562:	4911      	ldr	r1, [pc, #68]	; (80135a8 <etharp_output_to_arp_index+0x124>)
 8013564:	4613      	mov	r3, r2
 8013566:	005b      	lsls	r3, r3, #1
 8013568:	4413      	add	r3, r2
 801356a:	00db      	lsls	r3, r3, #3
 801356c:	440b      	add	r3, r1
 801356e:	3314      	adds	r3, #20
 8013570:	2203      	movs	r2, #3
 8013572:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801357a:	79fa      	ldrb	r2, [r7, #7]
 801357c:	4613      	mov	r3, r2
 801357e:	005b      	lsls	r3, r3, #1
 8013580:	4413      	add	r3, r2
 8013582:	00db      	lsls	r3, r3, #3
 8013584:	3308      	adds	r3, #8
 8013586:	4a08      	ldr	r2, [pc, #32]	; (80135a8 <etharp_output_to_arp_index+0x124>)
 8013588:	4413      	add	r3, r2
 801358a:	3304      	adds	r3, #4
 801358c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013590:	9200      	str	r2, [sp, #0]
 8013592:	460a      	mov	r2, r1
 8013594:	68b9      	ldr	r1, [r7, #8]
 8013596:	68f8      	ldr	r0, [r7, #12]
 8013598:	f001 fe5e 	bl	8015258 <ethernet_output>
 801359c:	4603      	mov	r3, r0
}
 801359e:	4618      	mov	r0, r3
 80135a0:	3710      	adds	r7, #16
 80135a2:	46bd      	mov	sp, r7
 80135a4:	bd80      	pop	{r7, pc}
 80135a6:	bf00      	nop
 80135a8:	2000d40c 	.word	0x2000d40c
 80135ac:	08018e04 	.word	0x08018e04
 80135b0:	08018f74 	.word	0x08018f74
 80135b4:	08018e7c 	.word	0x08018e7c

080135b8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80135b8:	b580      	push	{r7, lr}
 80135ba:	b08a      	sub	sp, #40	; 0x28
 80135bc:	af02      	add	r7, sp, #8
 80135be:	60f8      	str	r0, [r7, #12]
 80135c0:	60b9      	str	r1, [r7, #8]
 80135c2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d106      	bne.n	80135dc <etharp_output+0x24>
 80135ce:	4b73      	ldr	r3, [pc, #460]	; (801379c <etharp_output+0x1e4>)
 80135d0:	f240 321e 	movw	r2, #798	; 0x31e
 80135d4:	4972      	ldr	r1, [pc, #456]	; (80137a0 <etharp_output+0x1e8>)
 80135d6:	4873      	ldr	r0, [pc, #460]	; (80137a4 <etharp_output+0x1ec>)
 80135d8:	f001 ffc2 	bl	8015560 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80135dc:	68bb      	ldr	r3, [r7, #8]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d106      	bne.n	80135f0 <etharp_output+0x38>
 80135e2:	4b6e      	ldr	r3, [pc, #440]	; (801379c <etharp_output+0x1e4>)
 80135e4:	f240 321f 	movw	r2, #799	; 0x31f
 80135e8:	496f      	ldr	r1, [pc, #444]	; (80137a8 <etharp_output+0x1f0>)
 80135ea:	486e      	ldr	r0, [pc, #440]	; (80137a4 <etharp_output+0x1ec>)
 80135ec:	f001 ffb8 	bl	8015560 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d106      	bne.n	8013604 <etharp_output+0x4c>
 80135f6:	4b69      	ldr	r3, [pc, #420]	; (801379c <etharp_output+0x1e4>)
 80135f8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80135fc:	496b      	ldr	r1, [pc, #428]	; (80137ac <etharp_output+0x1f4>)
 80135fe:	4869      	ldr	r0, [pc, #420]	; (80137a4 <etharp_output+0x1ec>)
 8013600:	f001 ffae 	bl	8015560 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	68f9      	ldr	r1, [r7, #12]
 801360a:	4618      	mov	r0, r3
 801360c:	f000 ff16 	bl	801443c <ip4_addr_isbroadcast_u32>
 8013610:	4603      	mov	r3, r0
 8013612:	2b00      	cmp	r3, #0
 8013614:	d002      	beq.n	801361c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8013616:	4b66      	ldr	r3, [pc, #408]	; (80137b0 <etharp_output+0x1f8>)
 8013618:	61fb      	str	r3, [r7, #28]
 801361a:	e0af      	b.n	801377c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013624:	2be0      	cmp	r3, #224	; 0xe0
 8013626:	d118      	bne.n	801365a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8013628:	2301      	movs	r3, #1
 801362a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801362c:	2300      	movs	r3, #0
 801362e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8013630:	235e      	movs	r3, #94	; 0x5e
 8013632:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	3301      	adds	r3, #1
 8013638:	781b      	ldrb	r3, [r3, #0]
 801363a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801363e:	b2db      	uxtb	r3, r3
 8013640:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	3302      	adds	r3, #2
 8013646:	781b      	ldrb	r3, [r3, #0]
 8013648:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	3303      	adds	r3, #3
 801364e:	781b      	ldrb	r3, [r3, #0]
 8013650:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8013652:	f107 0310 	add.w	r3, r7, #16
 8013656:	61fb      	str	r3, [r7, #28]
 8013658:	e090      	b.n	801377c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	681a      	ldr	r2, [r3, #0]
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	3304      	adds	r3, #4
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	405a      	eors	r2, r3
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	3308      	adds	r3, #8
 801366a:	681b      	ldr	r3, [r3, #0]
 801366c:	4013      	ands	r3, r2
 801366e:	2b00      	cmp	r3, #0
 8013670:	d012      	beq.n	8013698 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013678:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801367c:	4293      	cmp	r3, r2
 801367e:	d00b      	beq.n	8013698 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	330c      	adds	r3, #12
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	2b00      	cmp	r3, #0
 8013688:	d003      	beq.n	8013692 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	330c      	adds	r3, #12
 801368e:	61bb      	str	r3, [r7, #24]
 8013690:	e002      	b.n	8013698 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8013692:	f06f 0303 	mvn.w	r3, #3
 8013696:	e07d      	b.n	8013794 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013698:	4b46      	ldr	r3, [pc, #280]	; (80137b4 <etharp_output+0x1fc>)
 801369a:	781b      	ldrb	r3, [r3, #0]
 801369c:	4619      	mov	r1, r3
 801369e:	4a46      	ldr	r2, [pc, #280]	; (80137b8 <etharp_output+0x200>)
 80136a0:	460b      	mov	r3, r1
 80136a2:	005b      	lsls	r3, r3, #1
 80136a4:	440b      	add	r3, r1
 80136a6:	00db      	lsls	r3, r3, #3
 80136a8:	4413      	add	r3, r2
 80136aa:	3314      	adds	r3, #20
 80136ac:	781b      	ldrb	r3, [r3, #0]
 80136ae:	2b01      	cmp	r3, #1
 80136b0:	d925      	bls.n	80136fe <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80136b2:	4b40      	ldr	r3, [pc, #256]	; (80137b4 <etharp_output+0x1fc>)
 80136b4:	781b      	ldrb	r3, [r3, #0]
 80136b6:	4619      	mov	r1, r3
 80136b8:	4a3f      	ldr	r2, [pc, #252]	; (80137b8 <etharp_output+0x200>)
 80136ba:	460b      	mov	r3, r1
 80136bc:	005b      	lsls	r3, r3, #1
 80136be:	440b      	add	r3, r1
 80136c0:	00db      	lsls	r3, r3, #3
 80136c2:	4413      	add	r3, r2
 80136c4:	3308      	adds	r3, #8
 80136c6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80136c8:	68fa      	ldr	r2, [r7, #12]
 80136ca:	429a      	cmp	r2, r3
 80136cc:	d117      	bne.n	80136fe <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80136ce:	69bb      	ldr	r3, [r7, #24]
 80136d0:	681a      	ldr	r2, [r3, #0]
 80136d2:	4b38      	ldr	r3, [pc, #224]	; (80137b4 <etharp_output+0x1fc>)
 80136d4:	781b      	ldrb	r3, [r3, #0]
 80136d6:	4618      	mov	r0, r3
 80136d8:	4937      	ldr	r1, [pc, #220]	; (80137b8 <etharp_output+0x200>)
 80136da:	4603      	mov	r3, r0
 80136dc:	005b      	lsls	r3, r3, #1
 80136de:	4403      	add	r3, r0
 80136e0:	00db      	lsls	r3, r3, #3
 80136e2:	440b      	add	r3, r1
 80136e4:	3304      	adds	r3, #4
 80136e6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80136e8:	429a      	cmp	r2, r3
 80136ea:	d108      	bne.n	80136fe <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80136ec:	4b31      	ldr	r3, [pc, #196]	; (80137b4 <etharp_output+0x1fc>)
 80136ee:	781b      	ldrb	r3, [r3, #0]
 80136f0:	461a      	mov	r2, r3
 80136f2:	68b9      	ldr	r1, [r7, #8]
 80136f4:	68f8      	ldr	r0, [r7, #12]
 80136f6:	f7ff fec5 	bl	8013484 <etharp_output_to_arp_index>
 80136fa:	4603      	mov	r3, r0
 80136fc:	e04a      	b.n	8013794 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80136fe:	2300      	movs	r3, #0
 8013700:	75fb      	strb	r3, [r7, #23]
 8013702:	e031      	b.n	8013768 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013704:	7dfa      	ldrb	r2, [r7, #23]
 8013706:	492c      	ldr	r1, [pc, #176]	; (80137b8 <etharp_output+0x200>)
 8013708:	4613      	mov	r3, r2
 801370a:	005b      	lsls	r3, r3, #1
 801370c:	4413      	add	r3, r2
 801370e:	00db      	lsls	r3, r3, #3
 8013710:	440b      	add	r3, r1
 8013712:	3314      	adds	r3, #20
 8013714:	781b      	ldrb	r3, [r3, #0]
 8013716:	2b01      	cmp	r3, #1
 8013718:	d923      	bls.n	8013762 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801371a:	7dfa      	ldrb	r2, [r7, #23]
 801371c:	4926      	ldr	r1, [pc, #152]	; (80137b8 <etharp_output+0x200>)
 801371e:	4613      	mov	r3, r2
 8013720:	005b      	lsls	r3, r3, #1
 8013722:	4413      	add	r3, r2
 8013724:	00db      	lsls	r3, r3, #3
 8013726:	440b      	add	r3, r1
 8013728:	3308      	adds	r3, #8
 801372a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801372c:	68fa      	ldr	r2, [r7, #12]
 801372e:	429a      	cmp	r2, r3
 8013730:	d117      	bne.n	8013762 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8013732:	69bb      	ldr	r3, [r7, #24]
 8013734:	6819      	ldr	r1, [r3, #0]
 8013736:	7dfa      	ldrb	r2, [r7, #23]
 8013738:	481f      	ldr	r0, [pc, #124]	; (80137b8 <etharp_output+0x200>)
 801373a:	4613      	mov	r3, r2
 801373c:	005b      	lsls	r3, r3, #1
 801373e:	4413      	add	r3, r2
 8013740:	00db      	lsls	r3, r3, #3
 8013742:	4403      	add	r3, r0
 8013744:	3304      	adds	r3, #4
 8013746:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8013748:	4299      	cmp	r1, r3
 801374a:	d10a      	bne.n	8013762 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801374c:	4a19      	ldr	r2, [pc, #100]	; (80137b4 <etharp_output+0x1fc>)
 801374e:	7dfb      	ldrb	r3, [r7, #23]
 8013750:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8013752:	7dfb      	ldrb	r3, [r7, #23]
 8013754:	461a      	mov	r2, r3
 8013756:	68b9      	ldr	r1, [r7, #8]
 8013758:	68f8      	ldr	r0, [r7, #12]
 801375a:	f7ff fe93 	bl	8013484 <etharp_output_to_arp_index>
 801375e:	4603      	mov	r3, r0
 8013760:	e018      	b.n	8013794 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013762:	7dfb      	ldrb	r3, [r7, #23]
 8013764:	3301      	adds	r3, #1
 8013766:	75fb      	strb	r3, [r7, #23]
 8013768:	7dfb      	ldrb	r3, [r7, #23]
 801376a:	2b09      	cmp	r3, #9
 801376c:	d9ca      	bls.n	8013704 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801376e:	68ba      	ldr	r2, [r7, #8]
 8013770:	69b9      	ldr	r1, [r7, #24]
 8013772:	68f8      	ldr	r0, [r7, #12]
 8013774:	f000 f822 	bl	80137bc <etharp_query>
 8013778:	4603      	mov	r3, r0
 801377a:	e00b      	b.n	8013794 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8013782:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013786:	9300      	str	r3, [sp, #0]
 8013788:	69fb      	ldr	r3, [r7, #28]
 801378a:	68b9      	ldr	r1, [r7, #8]
 801378c:	68f8      	ldr	r0, [r7, #12]
 801378e:	f001 fd63 	bl	8015258 <ethernet_output>
 8013792:	4603      	mov	r3, r0
}
 8013794:	4618      	mov	r0, r3
 8013796:	3720      	adds	r7, #32
 8013798:	46bd      	mov	sp, r7
 801379a:	bd80      	pop	{r7, pc}
 801379c:	08018e04 	.word	0x08018e04
 80137a0:	08018f54 	.word	0x08018f54
 80137a4:	08018e7c 	.word	0x08018e7c
 80137a8:	08018fa4 	.word	0x08018fa4
 80137ac:	08018f44 	.word	0x08018f44
 80137b0:	08019638 	.word	0x08019638
 80137b4:	2000d4fc 	.word	0x2000d4fc
 80137b8:	2000d40c 	.word	0x2000d40c

080137bc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80137bc:	b580      	push	{r7, lr}
 80137be:	b08c      	sub	sp, #48	; 0x30
 80137c0:	af02      	add	r7, sp, #8
 80137c2:	60f8      	str	r0, [r7, #12]
 80137c4:	60b9      	str	r1, [r7, #8]
 80137c6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	332a      	adds	r3, #42	; 0x2a
 80137cc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80137ce:	23ff      	movs	r3, #255	; 0xff
 80137d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80137d4:	2300      	movs	r3, #0
 80137d6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80137d8:	68bb      	ldr	r3, [r7, #8]
 80137da:	681b      	ldr	r3, [r3, #0]
 80137dc:	68f9      	ldr	r1, [r7, #12]
 80137de:	4618      	mov	r0, r3
 80137e0:	f000 fe2c 	bl	801443c <ip4_addr_isbroadcast_u32>
 80137e4:	4603      	mov	r3, r0
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d10c      	bne.n	8013804 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80137ea:	68bb      	ldr	r3, [r7, #8]
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80137f2:	2be0      	cmp	r3, #224	; 0xe0
 80137f4:	d006      	beq.n	8013804 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80137f6:	68bb      	ldr	r3, [r7, #8]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d003      	beq.n	8013804 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80137fc:	68bb      	ldr	r3, [r7, #8]
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	2b00      	cmp	r3, #0
 8013802:	d102      	bne.n	801380a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013804:	f06f 030f 	mvn.w	r3, #15
 8013808:	e101      	b.n	8013a0e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801380a:	68fa      	ldr	r2, [r7, #12]
 801380c:	2101      	movs	r1, #1
 801380e:	68b8      	ldr	r0, [r7, #8]
 8013810:	f7ff fb5c 	bl	8012ecc <etharp_find_entry>
 8013814:	4603      	mov	r3, r0
 8013816:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8013818:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801381c:	2b00      	cmp	r3, #0
 801381e:	da02      	bge.n	8013826 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8013820:	8a7b      	ldrh	r3, [r7, #18]
 8013822:	b25b      	sxtb	r3, r3
 8013824:	e0f3      	b.n	8013a0e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8013826:	8a7b      	ldrh	r3, [r7, #18]
 8013828:	2b7e      	cmp	r3, #126	; 0x7e
 801382a:	d906      	bls.n	801383a <etharp_query+0x7e>
 801382c:	4b7a      	ldr	r3, [pc, #488]	; (8013a18 <etharp_query+0x25c>)
 801382e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8013832:	497a      	ldr	r1, [pc, #488]	; (8013a1c <etharp_query+0x260>)
 8013834:	487a      	ldr	r0, [pc, #488]	; (8013a20 <etharp_query+0x264>)
 8013836:	f001 fe93 	bl	8015560 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801383a:	8a7b      	ldrh	r3, [r7, #18]
 801383c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801383e:	7c7a      	ldrb	r2, [r7, #17]
 8013840:	4978      	ldr	r1, [pc, #480]	; (8013a24 <etharp_query+0x268>)
 8013842:	4613      	mov	r3, r2
 8013844:	005b      	lsls	r3, r3, #1
 8013846:	4413      	add	r3, r2
 8013848:	00db      	lsls	r3, r3, #3
 801384a:	440b      	add	r3, r1
 801384c:	3314      	adds	r3, #20
 801384e:	781b      	ldrb	r3, [r3, #0]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d115      	bne.n	8013880 <etharp_query+0xc4>
    is_new_entry = 1;
 8013854:	2301      	movs	r3, #1
 8013856:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8013858:	7c7a      	ldrb	r2, [r7, #17]
 801385a:	4972      	ldr	r1, [pc, #456]	; (8013a24 <etharp_query+0x268>)
 801385c:	4613      	mov	r3, r2
 801385e:	005b      	lsls	r3, r3, #1
 8013860:	4413      	add	r3, r2
 8013862:	00db      	lsls	r3, r3, #3
 8013864:	440b      	add	r3, r1
 8013866:	3314      	adds	r3, #20
 8013868:	2201      	movs	r2, #1
 801386a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801386c:	7c7a      	ldrb	r2, [r7, #17]
 801386e:	496d      	ldr	r1, [pc, #436]	; (8013a24 <etharp_query+0x268>)
 8013870:	4613      	mov	r3, r2
 8013872:	005b      	lsls	r3, r3, #1
 8013874:	4413      	add	r3, r2
 8013876:	00db      	lsls	r3, r3, #3
 8013878:	440b      	add	r3, r1
 801387a:	3308      	adds	r3, #8
 801387c:	68fa      	ldr	r2, [r7, #12]
 801387e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8013880:	7c7a      	ldrb	r2, [r7, #17]
 8013882:	4968      	ldr	r1, [pc, #416]	; (8013a24 <etharp_query+0x268>)
 8013884:	4613      	mov	r3, r2
 8013886:	005b      	lsls	r3, r3, #1
 8013888:	4413      	add	r3, r2
 801388a:	00db      	lsls	r3, r3, #3
 801388c:	440b      	add	r3, r1
 801388e:	3314      	adds	r3, #20
 8013890:	781b      	ldrb	r3, [r3, #0]
 8013892:	2b01      	cmp	r3, #1
 8013894:	d011      	beq.n	80138ba <etharp_query+0xfe>
 8013896:	7c7a      	ldrb	r2, [r7, #17]
 8013898:	4962      	ldr	r1, [pc, #392]	; (8013a24 <etharp_query+0x268>)
 801389a:	4613      	mov	r3, r2
 801389c:	005b      	lsls	r3, r3, #1
 801389e:	4413      	add	r3, r2
 80138a0:	00db      	lsls	r3, r3, #3
 80138a2:	440b      	add	r3, r1
 80138a4:	3314      	adds	r3, #20
 80138a6:	781b      	ldrb	r3, [r3, #0]
 80138a8:	2b01      	cmp	r3, #1
 80138aa:	d806      	bhi.n	80138ba <etharp_query+0xfe>
 80138ac:	4b5a      	ldr	r3, [pc, #360]	; (8013a18 <etharp_query+0x25c>)
 80138ae:	f240 32cd 	movw	r2, #973	; 0x3cd
 80138b2:	495d      	ldr	r1, [pc, #372]	; (8013a28 <etharp_query+0x26c>)
 80138b4:	485a      	ldr	r0, [pc, #360]	; (8013a20 <etharp_query+0x264>)
 80138b6:	f001 fe53 	bl	8015560 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80138ba:	6a3b      	ldr	r3, [r7, #32]
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d102      	bne.n	80138c6 <etharp_query+0x10a>
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d10c      	bne.n	80138e0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80138c6:	68b9      	ldr	r1, [r7, #8]
 80138c8:	68f8      	ldr	r0, [r7, #12]
 80138ca:	f000 f963 	bl	8013b94 <etharp_request>
 80138ce:	4603      	mov	r3, r0
 80138d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d102      	bne.n	80138e0 <etharp_query+0x124>
      return result;
 80138da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80138de:	e096      	b.n	8013a0e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d106      	bne.n	80138f4 <etharp_query+0x138>
 80138e6:	4b4c      	ldr	r3, [pc, #304]	; (8013a18 <etharp_query+0x25c>)
 80138e8:	f240 32e1 	movw	r2, #993	; 0x3e1
 80138ec:	494f      	ldr	r1, [pc, #316]	; (8013a2c <etharp_query+0x270>)
 80138ee:	484c      	ldr	r0, [pc, #304]	; (8013a20 <etharp_query+0x264>)
 80138f0:	f001 fe36 	bl	8015560 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80138f4:	7c7a      	ldrb	r2, [r7, #17]
 80138f6:	494b      	ldr	r1, [pc, #300]	; (8013a24 <etharp_query+0x268>)
 80138f8:	4613      	mov	r3, r2
 80138fa:	005b      	lsls	r3, r3, #1
 80138fc:	4413      	add	r3, r2
 80138fe:	00db      	lsls	r3, r3, #3
 8013900:	440b      	add	r3, r1
 8013902:	3314      	adds	r3, #20
 8013904:	781b      	ldrb	r3, [r3, #0]
 8013906:	2b01      	cmp	r3, #1
 8013908:	d917      	bls.n	801393a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801390a:	4a49      	ldr	r2, [pc, #292]	; (8013a30 <etharp_query+0x274>)
 801390c:	7c7b      	ldrb	r3, [r7, #17]
 801390e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8013910:	7c7a      	ldrb	r2, [r7, #17]
 8013912:	4613      	mov	r3, r2
 8013914:	005b      	lsls	r3, r3, #1
 8013916:	4413      	add	r3, r2
 8013918:	00db      	lsls	r3, r3, #3
 801391a:	3308      	adds	r3, #8
 801391c:	4a41      	ldr	r2, [pc, #260]	; (8013a24 <etharp_query+0x268>)
 801391e:	4413      	add	r3, r2
 8013920:	3304      	adds	r3, #4
 8013922:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013926:	9200      	str	r2, [sp, #0]
 8013928:	697a      	ldr	r2, [r7, #20]
 801392a:	6879      	ldr	r1, [r7, #4]
 801392c:	68f8      	ldr	r0, [r7, #12]
 801392e:	f001 fc93 	bl	8015258 <ethernet_output>
 8013932:	4603      	mov	r3, r0
 8013934:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013938:	e067      	b.n	8013a0a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801393a:	7c7a      	ldrb	r2, [r7, #17]
 801393c:	4939      	ldr	r1, [pc, #228]	; (8013a24 <etharp_query+0x268>)
 801393e:	4613      	mov	r3, r2
 8013940:	005b      	lsls	r3, r3, #1
 8013942:	4413      	add	r3, r2
 8013944:	00db      	lsls	r3, r3, #3
 8013946:	440b      	add	r3, r1
 8013948:	3314      	adds	r3, #20
 801394a:	781b      	ldrb	r3, [r3, #0]
 801394c:	2b01      	cmp	r3, #1
 801394e:	d15c      	bne.n	8013a0a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8013950:	2300      	movs	r3, #0
 8013952:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013958:	e01c      	b.n	8013994 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801395a:	69fb      	ldr	r3, [r7, #28]
 801395c:	895a      	ldrh	r2, [r3, #10]
 801395e:	69fb      	ldr	r3, [r7, #28]
 8013960:	891b      	ldrh	r3, [r3, #8]
 8013962:	429a      	cmp	r2, r3
 8013964:	d10a      	bne.n	801397c <etharp_query+0x1c0>
 8013966:	69fb      	ldr	r3, [r7, #28]
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	2b00      	cmp	r3, #0
 801396c:	d006      	beq.n	801397c <etharp_query+0x1c0>
 801396e:	4b2a      	ldr	r3, [pc, #168]	; (8013a18 <etharp_query+0x25c>)
 8013970:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8013974:	492f      	ldr	r1, [pc, #188]	; (8013a34 <etharp_query+0x278>)
 8013976:	482a      	ldr	r0, [pc, #168]	; (8013a20 <etharp_query+0x264>)
 8013978:	f001 fdf2 	bl	8015560 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801397c:	69fb      	ldr	r3, [r7, #28]
 801397e:	7b1b      	ldrb	r3, [r3, #12]
 8013980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013984:	2b00      	cmp	r3, #0
 8013986:	d002      	beq.n	801398e <etharp_query+0x1d2>
        copy_needed = 1;
 8013988:	2301      	movs	r3, #1
 801398a:	61bb      	str	r3, [r7, #24]
        break;
 801398c:	e005      	b.n	801399a <etharp_query+0x1de>
      }
      p = p->next;
 801398e:	69fb      	ldr	r3, [r7, #28]
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013994:	69fb      	ldr	r3, [r7, #28]
 8013996:	2b00      	cmp	r3, #0
 8013998:	d1df      	bne.n	801395a <etharp_query+0x19e>
    }
    if (copy_needed) {
 801399a:	69bb      	ldr	r3, [r7, #24]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d007      	beq.n	80139b0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80139a0:	687a      	ldr	r2, [r7, #4]
 80139a2:	f44f 7120 	mov.w	r1, #640	; 0x280
 80139a6:	200e      	movs	r0, #14
 80139a8:	f7f7 fb60 	bl	800b06c <pbuf_clone>
 80139ac:	61f8      	str	r0, [r7, #28]
 80139ae:	e004      	b.n	80139ba <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80139b4:	69f8      	ldr	r0, [r7, #28]
 80139b6:	f7f7 f987 	bl	800acc8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80139ba:	69fb      	ldr	r3, [r7, #28]
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d021      	beq.n	8013a04 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80139c0:	7c7a      	ldrb	r2, [r7, #17]
 80139c2:	4918      	ldr	r1, [pc, #96]	; (8013a24 <etharp_query+0x268>)
 80139c4:	4613      	mov	r3, r2
 80139c6:	005b      	lsls	r3, r3, #1
 80139c8:	4413      	add	r3, r2
 80139ca:	00db      	lsls	r3, r3, #3
 80139cc:	440b      	add	r3, r1
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d00a      	beq.n	80139ea <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80139d4:	7c7a      	ldrb	r2, [r7, #17]
 80139d6:	4913      	ldr	r1, [pc, #76]	; (8013a24 <etharp_query+0x268>)
 80139d8:	4613      	mov	r3, r2
 80139da:	005b      	lsls	r3, r3, #1
 80139dc:	4413      	add	r3, r2
 80139de:	00db      	lsls	r3, r3, #3
 80139e0:	440b      	add	r3, r1
 80139e2:	681b      	ldr	r3, [r3, #0]
 80139e4:	4618      	mov	r0, r3
 80139e6:	f7f7 f8c9 	bl	800ab7c <pbuf_free>
      }
      arp_table[i].q = p;
 80139ea:	7c7a      	ldrb	r2, [r7, #17]
 80139ec:	490d      	ldr	r1, [pc, #52]	; (8013a24 <etharp_query+0x268>)
 80139ee:	4613      	mov	r3, r2
 80139f0:	005b      	lsls	r3, r3, #1
 80139f2:	4413      	add	r3, r2
 80139f4:	00db      	lsls	r3, r3, #3
 80139f6:	440b      	add	r3, r1
 80139f8:	69fa      	ldr	r2, [r7, #28]
 80139fa:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80139fc:	2300      	movs	r3, #0
 80139fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013a02:	e002      	b.n	8013a0a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8013a04:	23ff      	movs	r3, #255	; 0xff
 8013a06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8013a0a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8013a0e:	4618      	mov	r0, r3
 8013a10:	3728      	adds	r7, #40	; 0x28
 8013a12:	46bd      	mov	sp, r7
 8013a14:	bd80      	pop	{r7, pc}
 8013a16:	bf00      	nop
 8013a18:	08018e04 	.word	0x08018e04
 8013a1c:	08018fb0 	.word	0x08018fb0
 8013a20:	08018e7c 	.word	0x08018e7c
 8013a24:	2000d40c 	.word	0x2000d40c
 8013a28:	08018fc0 	.word	0x08018fc0
 8013a2c:	08018fa4 	.word	0x08018fa4
 8013a30:	2000d4fc 	.word	0x2000d4fc
 8013a34:	08018fe8 	.word	0x08018fe8

08013a38 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8013a38:	b580      	push	{r7, lr}
 8013a3a:	b08a      	sub	sp, #40	; 0x28
 8013a3c:	af02      	add	r7, sp, #8
 8013a3e:	60f8      	str	r0, [r7, #12]
 8013a40:	60b9      	str	r1, [r7, #8]
 8013a42:	607a      	str	r2, [r7, #4]
 8013a44:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8013a46:	2300      	movs	r3, #0
 8013a48:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d106      	bne.n	8013a5e <etharp_raw+0x26>
 8013a50:	4b3a      	ldr	r3, [pc, #232]	; (8013b3c <etharp_raw+0x104>)
 8013a52:	f240 4257 	movw	r2, #1111	; 0x457
 8013a56:	493a      	ldr	r1, [pc, #232]	; (8013b40 <etharp_raw+0x108>)
 8013a58:	483a      	ldr	r0, [pc, #232]	; (8013b44 <etharp_raw+0x10c>)
 8013a5a:	f001 fd81 	bl	8015560 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8013a5e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013a62:	211c      	movs	r1, #28
 8013a64:	200e      	movs	r0, #14
 8013a66:	f7f6 fda5 	bl	800a5b4 <pbuf_alloc>
 8013a6a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8013a6c:	69bb      	ldr	r3, [r7, #24]
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d102      	bne.n	8013a78 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8013a72:	f04f 33ff 	mov.w	r3, #4294967295
 8013a76:	e05d      	b.n	8013b34 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8013a78:	69bb      	ldr	r3, [r7, #24]
 8013a7a:	895b      	ldrh	r3, [r3, #10]
 8013a7c:	2b1b      	cmp	r3, #27
 8013a7e:	d806      	bhi.n	8013a8e <etharp_raw+0x56>
 8013a80:	4b2e      	ldr	r3, [pc, #184]	; (8013b3c <etharp_raw+0x104>)
 8013a82:	f240 4262 	movw	r2, #1122	; 0x462
 8013a86:	4930      	ldr	r1, [pc, #192]	; (8013b48 <etharp_raw+0x110>)
 8013a88:	482e      	ldr	r0, [pc, #184]	; (8013b44 <etharp_raw+0x10c>)
 8013a8a:	f001 fd69 	bl	8015560 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8013a8e:	69bb      	ldr	r3, [r7, #24]
 8013a90:	685b      	ldr	r3, [r3, #4]
 8013a92:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8013a94:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013a96:	4618      	mov	r0, r3
 8013a98:	f7f5 fc72 	bl	8009380 <lwip_htons>
 8013a9c:	4603      	mov	r3, r0
 8013a9e:	461a      	mov	r2, r3
 8013aa0:	697b      	ldr	r3, [r7, #20]
 8013aa2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8013aa4:	68fb      	ldr	r3, [r7, #12]
 8013aa6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013aaa:	2b06      	cmp	r3, #6
 8013aac:	d006      	beq.n	8013abc <etharp_raw+0x84>
 8013aae:	4b23      	ldr	r3, [pc, #140]	; (8013b3c <etharp_raw+0x104>)
 8013ab0:	f240 4269 	movw	r2, #1129	; 0x469
 8013ab4:	4925      	ldr	r1, [pc, #148]	; (8013b4c <etharp_raw+0x114>)
 8013ab6:	4823      	ldr	r0, [pc, #140]	; (8013b44 <etharp_raw+0x10c>)
 8013ab8:	f001 fd52 	bl	8015560 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8013abc:	697b      	ldr	r3, [r7, #20]
 8013abe:	3308      	adds	r3, #8
 8013ac0:	2206      	movs	r2, #6
 8013ac2:	6839      	ldr	r1, [r7, #0]
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	f001 fd35 	bl	8015534 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8013aca:	697b      	ldr	r3, [r7, #20]
 8013acc:	3312      	adds	r3, #18
 8013ace:	2206      	movs	r2, #6
 8013ad0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	f001 fd2e 	bl	8015534 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8013ad8:	697b      	ldr	r3, [r7, #20]
 8013ada:	330e      	adds	r3, #14
 8013adc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013ade:	6812      	ldr	r2, [r2, #0]
 8013ae0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8013ae2:	697b      	ldr	r3, [r7, #20]
 8013ae4:	3318      	adds	r3, #24
 8013ae6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013ae8:	6812      	ldr	r2, [r2, #0]
 8013aea:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8013aec:	697b      	ldr	r3, [r7, #20]
 8013aee:	2200      	movs	r2, #0
 8013af0:	701a      	strb	r2, [r3, #0]
 8013af2:	2200      	movs	r2, #0
 8013af4:	f042 0201 	orr.w	r2, r2, #1
 8013af8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8013afa:	697b      	ldr	r3, [r7, #20]
 8013afc:	2200      	movs	r2, #0
 8013afe:	f042 0208 	orr.w	r2, r2, #8
 8013b02:	709a      	strb	r2, [r3, #2]
 8013b04:	2200      	movs	r2, #0
 8013b06:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8013b08:	697b      	ldr	r3, [r7, #20]
 8013b0a:	2206      	movs	r2, #6
 8013b0c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8013b0e:	697b      	ldr	r3, [r7, #20]
 8013b10:	2204      	movs	r2, #4
 8013b12:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8013b14:	f640 0306 	movw	r3, #2054	; 0x806
 8013b18:	9300      	str	r3, [sp, #0]
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	68ba      	ldr	r2, [r7, #8]
 8013b1e:	69b9      	ldr	r1, [r7, #24]
 8013b20:	68f8      	ldr	r0, [r7, #12]
 8013b22:	f001 fb99 	bl	8015258 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8013b26:	69b8      	ldr	r0, [r7, #24]
 8013b28:	f7f7 f828 	bl	800ab7c <pbuf_free>
  p = NULL;
 8013b2c:	2300      	movs	r3, #0
 8013b2e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8013b30:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013b34:	4618      	mov	r0, r3
 8013b36:	3720      	adds	r7, #32
 8013b38:	46bd      	mov	sp, r7
 8013b3a:	bd80      	pop	{r7, pc}
 8013b3c:	08018e04 	.word	0x08018e04
 8013b40:	08018f54 	.word	0x08018f54
 8013b44:	08018e7c 	.word	0x08018e7c
 8013b48:	08019004 	.word	0x08019004
 8013b4c:	08019038 	.word	0x08019038

08013b50 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8013b50:	b580      	push	{r7, lr}
 8013b52:	b088      	sub	sp, #32
 8013b54:	af04      	add	r7, sp, #16
 8013b56:	60f8      	str	r0, [r7, #12]
 8013b58:	60b9      	str	r1, [r7, #8]
 8013b5a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013b6c:	2201      	movs	r2, #1
 8013b6e:	9203      	str	r2, [sp, #12]
 8013b70:	68ba      	ldr	r2, [r7, #8]
 8013b72:	9202      	str	r2, [sp, #8]
 8013b74:	4a06      	ldr	r2, [pc, #24]	; (8013b90 <etharp_request_dst+0x40>)
 8013b76:	9201      	str	r2, [sp, #4]
 8013b78:	9300      	str	r3, [sp, #0]
 8013b7a:	4603      	mov	r3, r0
 8013b7c:	687a      	ldr	r2, [r7, #4]
 8013b7e:	68f8      	ldr	r0, [r7, #12]
 8013b80:	f7ff ff5a 	bl	8013a38 <etharp_raw>
 8013b84:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8013b86:	4618      	mov	r0, r3
 8013b88:	3710      	adds	r7, #16
 8013b8a:	46bd      	mov	sp, r7
 8013b8c:	bd80      	pop	{r7, pc}
 8013b8e:	bf00      	nop
 8013b90:	08019640 	.word	0x08019640

08013b94 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8013b94:	b580      	push	{r7, lr}
 8013b96:	b082      	sub	sp, #8
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	6078      	str	r0, [r7, #4]
 8013b9c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8013b9e:	4a05      	ldr	r2, [pc, #20]	; (8013bb4 <etharp_request+0x20>)
 8013ba0:	6839      	ldr	r1, [r7, #0]
 8013ba2:	6878      	ldr	r0, [r7, #4]
 8013ba4:	f7ff ffd4 	bl	8013b50 <etharp_request_dst>
 8013ba8:	4603      	mov	r3, r0
}
 8013baa:	4618      	mov	r0, r3
 8013bac:	3708      	adds	r7, #8
 8013bae:	46bd      	mov	sp, r7
 8013bb0:	bd80      	pop	{r7, pc}
 8013bb2:	bf00      	nop
 8013bb4:	08019638 	.word	0x08019638

08013bb8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8013bb8:	b580      	push	{r7, lr}
 8013bba:	b08e      	sub	sp, #56	; 0x38
 8013bbc:	af04      	add	r7, sp, #16
 8013bbe:	6078      	str	r0, [r7, #4]
 8013bc0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8013bc2:	4b79      	ldr	r3, [pc, #484]	; (8013da8 <icmp_input+0x1f0>)
 8013bc4:	689b      	ldr	r3, [r3, #8]
 8013bc6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8013bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bca:	781b      	ldrb	r3, [r3, #0]
 8013bcc:	f003 030f 	and.w	r3, r3, #15
 8013bd0:	b2db      	uxtb	r3, r3
 8013bd2:	009b      	lsls	r3, r3, #2
 8013bd4:	b2db      	uxtb	r3, r3
 8013bd6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8013bd8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013bda:	2b13      	cmp	r3, #19
 8013bdc:	f240 80cd 	bls.w	8013d7a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	895b      	ldrh	r3, [r3, #10]
 8013be4:	2b03      	cmp	r3, #3
 8013be6:	f240 80ca 	bls.w	8013d7e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	685b      	ldr	r3, [r3, #4]
 8013bee:	781b      	ldrb	r3, [r3, #0]
 8013bf0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8013bf4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	f000 80b7 	beq.w	8013d6c <icmp_input+0x1b4>
 8013bfe:	2b08      	cmp	r3, #8
 8013c00:	f040 80b7 	bne.w	8013d72 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8013c04:	4b69      	ldr	r3, [pc, #420]	; (8013dac <icmp_input+0x1f4>)
 8013c06:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013c08:	4b67      	ldr	r3, [pc, #412]	; (8013da8 <icmp_input+0x1f0>)
 8013c0a:	695b      	ldr	r3, [r3, #20]
 8013c0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013c10:	2be0      	cmp	r3, #224	; 0xe0
 8013c12:	f000 80bb 	beq.w	8013d8c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8013c16:	4b64      	ldr	r3, [pc, #400]	; (8013da8 <icmp_input+0x1f0>)
 8013c18:	695b      	ldr	r3, [r3, #20]
 8013c1a:	4a63      	ldr	r2, [pc, #396]	; (8013da8 <icmp_input+0x1f0>)
 8013c1c:	6812      	ldr	r2, [r2, #0]
 8013c1e:	4611      	mov	r1, r2
 8013c20:	4618      	mov	r0, r3
 8013c22:	f000 fc0b 	bl	801443c <ip4_addr_isbroadcast_u32>
 8013c26:	4603      	mov	r3, r0
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	f040 80b1 	bne.w	8013d90 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	891b      	ldrh	r3, [r3, #8]
 8013c32:	2b07      	cmp	r3, #7
 8013c34:	f240 80a5 	bls.w	8013d82 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013c38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013c3a:	330e      	adds	r3, #14
 8013c3c:	4619      	mov	r1, r3
 8013c3e:	6878      	ldr	r0, [r7, #4]
 8013c40:	f7f6 ff06 	bl	800aa50 <pbuf_add_header>
 8013c44:	4603      	mov	r3, r0
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d04b      	beq.n	8013ce2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	891a      	ldrh	r2, [r3, #8]
 8013c4e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013c50:	4413      	add	r3, r2
 8013c52:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	891b      	ldrh	r3, [r3, #8]
 8013c58:	8b7a      	ldrh	r2, [r7, #26]
 8013c5a:	429a      	cmp	r2, r3
 8013c5c:	f0c0 809a 	bcc.w	8013d94 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8013c60:	8b7b      	ldrh	r3, [r7, #26]
 8013c62:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013c66:	4619      	mov	r1, r3
 8013c68:	200e      	movs	r0, #14
 8013c6a:	f7f6 fca3 	bl	800a5b4 <pbuf_alloc>
 8013c6e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8013c70:	697b      	ldr	r3, [r7, #20]
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	f000 8090 	beq.w	8013d98 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8013c78:	697b      	ldr	r3, [r7, #20]
 8013c7a:	895b      	ldrh	r3, [r3, #10]
 8013c7c:	461a      	mov	r2, r3
 8013c7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013c80:	3308      	adds	r3, #8
 8013c82:	429a      	cmp	r2, r3
 8013c84:	d203      	bcs.n	8013c8e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8013c86:	6978      	ldr	r0, [r7, #20]
 8013c88:	f7f6 ff78 	bl	800ab7c <pbuf_free>
          goto icmperr;
 8013c8c:	e085      	b.n	8013d9a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8013c8e:	697b      	ldr	r3, [r7, #20]
 8013c90:	685b      	ldr	r3, [r3, #4]
 8013c92:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013c94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013c96:	4618      	mov	r0, r3
 8013c98:	f001 fc4c 	bl	8015534 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8013c9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013c9e:	4619      	mov	r1, r3
 8013ca0:	6978      	ldr	r0, [r7, #20]
 8013ca2:	f7f6 fee5 	bl	800aa70 <pbuf_remove_header>
 8013ca6:	4603      	mov	r3, r0
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d009      	beq.n	8013cc0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8013cac:	4b40      	ldr	r3, [pc, #256]	; (8013db0 <icmp_input+0x1f8>)
 8013cae:	22b6      	movs	r2, #182	; 0xb6
 8013cb0:	4940      	ldr	r1, [pc, #256]	; (8013db4 <icmp_input+0x1fc>)
 8013cb2:	4841      	ldr	r0, [pc, #260]	; (8013db8 <icmp_input+0x200>)
 8013cb4:	f001 fc54 	bl	8015560 <iprintf>
          pbuf_free(r);
 8013cb8:	6978      	ldr	r0, [r7, #20]
 8013cba:	f7f6 ff5f 	bl	800ab7c <pbuf_free>
          goto icmperr;
 8013cbe:	e06c      	b.n	8013d9a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8013cc0:	6879      	ldr	r1, [r7, #4]
 8013cc2:	6978      	ldr	r0, [r7, #20]
 8013cc4:	f7f7 f88e 	bl	800ade4 <pbuf_copy>
 8013cc8:	4603      	mov	r3, r0
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d003      	beq.n	8013cd6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8013cce:	6978      	ldr	r0, [r7, #20]
 8013cd0:	f7f6 ff54 	bl	800ab7c <pbuf_free>
          goto icmperr;
 8013cd4:	e061      	b.n	8013d9a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8013cd6:	6878      	ldr	r0, [r7, #4]
 8013cd8:	f7f6 ff50 	bl	800ab7c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8013cdc:	697b      	ldr	r3, [r7, #20]
 8013cde:	607b      	str	r3, [r7, #4]
 8013ce0:	e00f      	b.n	8013d02 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013ce2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013ce4:	330e      	adds	r3, #14
 8013ce6:	4619      	mov	r1, r3
 8013ce8:	6878      	ldr	r0, [r7, #4]
 8013cea:	f7f6 fec1 	bl	800aa70 <pbuf_remove_header>
 8013cee:	4603      	mov	r3, r0
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d006      	beq.n	8013d02 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8013cf4:	4b2e      	ldr	r3, [pc, #184]	; (8013db0 <icmp_input+0x1f8>)
 8013cf6:	22c7      	movs	r2, #199	; 0xc7
 8013cf8:	4930      	ldr	r1, [pc, #192]	; (8013dbc <icmp_input+0x204>)
 8013cfa:	482f      	ldr	r0, [pc, #188]	; (8013db8 <icmp_input+0x200>)
 8013cfc:	f001 fc30 	bl	8015560 <iprintf>
          goto icmperr;
 8013d00:	e04b      	b.n	8013d9a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	685b      	ldr	r3, [r3, #4]
 8013d06:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8013d08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013d0a:	4619      	mov	r1, r3
 8013d0c:	6878      	ldr	r0, [r7, #4]
 8013d0e:	f7f6 fe9f 	bl	800aa50 <pbuf_add_header>
 8013d12:	4603      	mov	r3, r0
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d12b      	bne.n	8013d70 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	685b      	ldr	r3, [r3, #4]
 8013d1c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8013d1e:	69fb      	ldr	r3, [r7, #28]
 8013d20:	681a      	ldr	r2, [r3, #0]
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8013d26:	4b20      	ldr	r3, [pc, #128]	; (8013da8 <icmp_input+0x1f0>)
 8013d28:	691a      	ldr	r2, [r3, #16]
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8013d2e:	693b      	ldr	r3, [r7, #16]
 8013d30:	2200      	movs	r2, #0
 8013d32:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8013d34:	693b      	ldr	r3, [r7, #16]
 8013d36:	2200      	movs	r2, #0
 8013d38:	709a      	strb	r2, [r3, #2]
 8013d3a:	2200      	movs	r2, #0
 8013d3c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	22ff      	movs	r2, #255	; 0xff
 8013d42:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	2200      	movs	r2, #0
 8013d48:	729a      	strb	r2, [r3, #10]
 8013d4a:	2200      	movs	r2, #0
 8013d4c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8013d4e:	683b      	ldr	r3, [r7, #0]
 8013d50:	9302      	str	r3, [sp, #8]
 8013d52:	2301      	movs	r3, #1
 8013d54:	9301      	str	r3, [sp, #4]
 8013d56:	2300      	movs	r3, #0
 8013d58:	9300      	str	r3, [sp, #0]
 8013d5a:	23ff      	movs	r3, #255	; 0xff
 8013d5c:	2200      	movs	r2, #0
 8013d5e:	69f9      	ldr	r1, [r7, #28]
 8013d60:	6878      	ldr	r0, [r7, #4]
 8013d62:	f000 fa93 	bl	801428c <ip4_output_if>
 8013d66:	4603      	mov	r3, r0
 8013d68:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8013d6a:	e001      	b.n	8013d70 <icmp_input+0x1b8>
      break;
 8013d6c:	bf00      	nop
 8013d6e:	e000      	b.n	8013d72 <icmp_input+0x1ba>
      break;
 8013d70:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8013d72:	6878      	ldr	r0, [r7, #4]
 8013d74:	f7f6 ff02 	bl	800ab7c <pbuf_free>
  return;
 8013d78:	e013      	b.n	8013da2 <icmp_input+0x1ea>
    goto lenerr;
 8013d7a:	bf00      	nop
 8013d7c:	e002      	b.n	8013d84 <icmp_input+0x1cc>
    goto lenerr;
 8013d7e:	bf00      	nop
 8013d80:	e000      	b.n	8013d84 <icmp_input+0x1cc>
        goto lenerr;
 8013d82:	bf00      	nop
lenerr:
  pbuf_free(p);
 8013d84:	6878      	ldr	r0, [r7, #4]
 8013d86:	f7f6 fef9 	bl	800ab7c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013d8a:	e00a      	b.n	8013da2 <icmp_input+0x1ea>
        goto icmperr;
 8013d8c:	bf00      	nop
 8013d8e:	e004      	b.n	8013d9a <icmp_input+0x1e2>
        goto icmperr;
 8013d90:	bf00      	nop
 8013d92:	e002      	b.n	8013d9a <icmp_input+0x1e2>
          goto icmperr;
 8013d94:	bf00      	nop
 8013d96:	e000      	b.n	8013d9a <icmp_input+0x1e2>
          goto icmperr;
 8013d98:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8013d9a:	6878      	ldr	r0, [r7, #4]
 8013d9c:	f7f6 feee 	bl	800ab7c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013da0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8013da2:	3728      	adds	r7, #40	; 0x28
 8013da4:	46bd      	mov	sp, r7
 8013da6:	bd80      	pop	{r7, pc}
 8013da8:	20009c04 	.word	0x20009c04
 8013dac:	20009c18 	.word	0x20009c18
 8013db0:	0801907c 	.word	0x0801907c
 8013db4:	080190b4 	.word	0x080190b4
 8013db8:	080190ec 	.word	0x080190ec
 8013dbc:	08019114 	.word	0x08019114

08013dc0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8013dc0:	b580      	push	{r7, lr}
 8013dc2:	b082      	sub	sp, #8
 8013dc4:	af00      	add	r7, sp, #0
 8013dc6:	6078      	str	r0, [r7, #4]
 8013dc8:	460b      	mov	r3, r1
 8013dca:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8013dcc:	78fb      	ldrb	r3, [r7, #3]
 8013dce:	461a      	mov	r2, r3
 8013dd0:	2103      	movs	r1, #3
 8013dd2:	6878      	ldr	r0, [r7, #4]
 8013dd4:	f000 f814 	bl	8013e00 <icmp_send_response>
}
 8013dd8:	bf00      	nop
 8013dda:	3708      	adds	r7, #8
 8013ddc:	46bd      	mov	sp, r7
 8013dde:	bd80      	pop	{r7, pc}

08013de0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b082      	sub	sp, #8
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	6078      	str	r0, [r7, #4]
 8013de8:	460b      	mov	r3, r1
 8013dea:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8013dec:	78fb      	ldrb	r3, [r7, #3]
 8013dee:	461a      	mov	r2, r3
 8013df0:	210b      	movs	r1, #11
 8013df2:	6878      	ldr	r0, [r7, #4]
 8013df4:	f000 f804 	bl	8013e00 <icmp_send_response>
}
 8013df8:	bf00      	nop
 8013dfa:	3708      	adds	r7, #8
 8013dfc:	46bd      	mov	sp, r7
 8013dfe:	bd80      	pop	{r7, pc}

08013e00 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013e00:	b580      	push	{r7, lr}
 8013e02:	b08c      	sub	sp, #48	; 0x30
 8013e04:	af04      	add	r7, sp, #16
 8013e06:	6078      	str	r0, [r7, #4]
 8013e08:	460b      	mov	r3, r1
 8013e0a:	70fb      	strb	r3, [r7, #3]
 8013e0c:	4613      	mov	r3, r2
 8013e0e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013e10:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013e14:	2124      	movs	r1, #36	; 0x24
 8013e16:	2022      	movs	r0, #34	; 0x22
 8013e18:	f7f6 fbcc 	bl	800a5b4 <pbuf_alloc>
 8013e1c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8013e1e:	69fb      	ldr	r3, [r7, #28]
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d04c      	beq.n	8013ebe <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8013e24:	69fb      	ldr	r3, [r7, #28]
 8013e26:	895b      	ldrh	r3, [r3, #10]
 8013e28:	2b23      	cmp	r3, #35	; 0x23
 8013e2a:	d806      	bhi.n	8013e3a <icmp_send_response+0x3a>
 8013e2c:	4b26      	ldr	r3, [pc, #152]	; (8013ec8 <icmp_send_response+0xc8>)
 8013e2e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8013e32:	4926      	ldr	r1, [pc, #152]	; (8013ecc <icmp_send_response+0xcc>)
 8013e34:	4826      	ldr	r0, [pc, #152]	; (8013ed0 <icmp_send_response+0xd0>)
 8013e36:	f001 fb93 	bl	8015560 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	685b      	ldr	r3, [r3, #4]
 8013e3e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8013e40:	69fb      	ldr	r3, [r7, #28]
 8013e42:	685b      	ldr	r3, [r3, #4]
 8013e44:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8013e46:	697b      	ldr	r3, [r7, #20]
 8013e48:	78fa      	ldrb	r2, [r7, #3]
 8013e4a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8013e4c:	697b      	ldr	r3, [r7, #20]
 8013e4e:	78ba      	ldrb	r2, [r7, #2]
 8013e50:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8013e52:	697b      	ldr	r3, [r7, #20]
 8013e54:	2200      	movs	r2, #0
 8013e56:	711a      	strb	r2, [r3, #4]
 8013e58:	2200      	movs	r2, #0
 8013e5a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8013e5c:	697b      	ldr	r3, [r7, #20]
 8013e5e:	2200      	movs	r2, #0
 8013e60:	719a      	strb	r2, [r3, #6]
 8013e62:	2200      	movs	r2, #0
 8013e64:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8013e66:	69fb      	ldr	r3, [r7, #28]
 8013e68:	685b      	ldr	r3, [r3, #4]
 8013e6a:	f103 0008 	add.w	r0, r3, #8
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	685b      	ldr	r3, [r3, #4]
 8013e72:	221c      	movs	r2, #28
 8013e74:	4619      	mov	r1, r3
 8013e76:	f001 fb5d 	bl	8015534 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8013e7a:	69bb      	ldr	r3, [r7, #24]
 8013e7c:	68db      	ldr	r3, [r3, #12]
 8013e7e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8013e80:	f107 030c 	add.w	r3, r7, #12
 8013e84:	4618      	mov	r0, r3
 8013e86:	f000 f825 	bl	8013ed4 <ip4_route>
 8013e8a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8013e8c:	693b      	ldr	r3, [r7, #16]
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d011      	beq.n	8013eb6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8013e92:	697b      	ldr	r3, [r7, #20]
 8013e94:	2200      	movs	r2, #0
 8013e96:	709a      	strb	r2, [r3, #2]
 8013e98:	2200      	movs	r2, #0
 8013e9a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8013e9c:	f107 020c 	add.w	r2, r7, #12
 8013ea0:	693b      	ldr	r3, [r7, #16]
 8013ea2:	9302      	str	r3, [sp, #8]
 8013ea4:	2301      	movs	r3, #1
 8013ea6:	9301      	str	r3, [sp, #4]
 8013ea8:	2300      	movs	r3, #0
 8013eaa:	9300      	str	r3, [sp, #0]
 8013eac:	23ff      	movs	r3, #255	; 0xff
 8013eae:	2100      	movs	r1, #0
 8013eb0:	69f8      	ldr	r0, [r7, #28]
 8013eb2:	f000 f9eb 	bl	801428c <ip4_output_if>
  }
  pbuf_free(q);
 8013eb6:	69f8      	ldr	r0, [r7, #28]
 8013eb8:	f7f6 fe60 	bl	800ab7c <pbuf_free>
 8013ebc:	e000      	b.n	8013ec0 <icmp_send_response+0xc0>
    return;
 8013ebe:	bf00      	nop
}
 8013ec0:	3720      	adds	r7, #32
 8013ec2:	46bd      	mov	sp, r7
 8013ec4:	bd80      	pop	{r7, pc}
 8013ec6:	bf00      	nop
 8013ec8:	0801907c 	.word	0x0801907c
 8013ecc:	08019148 	.word	0x08019148
 8013ed0:	080190ec 	.word	0x080190ec

08013ed4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8013ed4:	b480      	push	{r7}
 8013ed6:	b085      	sub	sp, #20
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8013edc:	4b33      	ldr	r3, [pc, #204]	; (8013fac <ip4_route+0xd8>)
 8013ede:	681b      	ldr	r3, [r3, #0]
 8013ee0:	60fb      	str	r3, [r7, #12]
 8013ee2:	e036      	b.n	8013f52 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013eea:	f003 0301 	and.w	r3, r3, #1
 8013eee:	b2db      	uxtb	r3, r3
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d02b      	beq.n	8013f4c <ip4_route+0x78>
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013efa:	089b      	lsrs	r3, r3, #2
 8013efc:	f003 0301 	and.w	r3, r3, #1
 8013f00:	b2db      	uxtb	r3, r3
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d022      	beq.n	8013f4c <ip4_route+0x78>
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	3304      	adds	r3, #4
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d01d      	beq.n	8013f4c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	681a      	ldr	r2, [r3, #0]
 8013f14:	68fb      	ldr	r3, [r7, #12]
 8013f16:	3304      	adds	r3, #4
 8013f18:	681b      	ldr	r3, [r3, #0]
 8013f1a:	405a      	eors	r2, r3
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	3308      	adds	r3, #8
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	4013      	ands	r3, r2
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d101      	bne.n	8013f2c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	e038      	b.n	8013f9e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013f32:	f003 0302 	and.w	r3, r3, #2
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d108      	bne.n	8013f4c <ip4_route+0x78>
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	681a      	ldr	r2, [r3, #0]
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	330c      	adds	r3, #12
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	429a      	cmp	r2, r3
 8013f46:	d101      	bne.n	8013f4c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	e028      	b.n	8013f9e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	60fb      	str	r3, [r7, #12]
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d1c5      	bne.n	8013ee4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013f58:	4b15      	ldr	r3, [pc, #84]	; (8013fb0 <ip4_route+0xdc>)
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d01a      	beq.n	8013f96 <ip4_route+0xc2>
 8013f60:	4b13      	ldr	r3, [pc, #76]	; (8013fb0 <ip4_route+0xdc>)
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013f68:	f003 0301 	and.w	r3, r3, #1
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d012      	beq.n	8013f96 <ip4_route+0xc2>
 8013f70:	4b0f      	ldr	r3, [pc, #60]	; (8013fb0 <ip4_route+0xdc>)
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013f78:	f003 0304 	and.w	r3, r3, #4
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d00a      	beq.n	8013f96 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013f80:	4b0b      	ldr	r3, [pc, #44]	; (8013fb0 <ip4_route+0xdc>)
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	3304      	adds	r3, #4
 8013f86:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d004      	beq.n	8013f96 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	b2db      	uxtb	r3, r3
 8013f92:	2b7f      	cmp	r3, #127	; 0x7f
 8013f94:	d101      	bne.n	8013f9a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8013f96:	2300      	movs	r3, #0
 8013f98:	e001      	b.n	8013f9e <ip4_route+0xca>
  }

  return netif_default;
 8013f9a:	4b05      	ldr	r3, [pc, #20]	; (8013fb0 <ip4_route+0xdc>)
 8013f9c:	681b      	ldr	r3, [r3, #0]
}
 8013f9e:	4618      	mov	r0, r3
 8013fa0:	3714      	adds	r7, #20
 8013fa2:	46bd      	mov	sp, r7
 8013fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fa8:	4770      	bx	lr
 8013faa:	bf00      	nop
 8013fac:	2000d36c 	.word	0x2000d36c
 8013fb0:	2000d370 	.word	0x2000d370

08013fb4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8013fb4:	b580      	push	{r7, lr}
 8013fb6:	b082      	sub	sp, #8
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013fc2:	f003 0301 	and.w	r3, r3, #1
 8013fc6:	b2db      	uxtb	r3, r3
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d016      	beq.n	8013ffa <ip4_input_accept+0x46>
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	3304      	adds	r3, #4
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d011      	beq.n	8013ffa <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013fd6:	4b0b      	ldr	r3, [pc, #44]	; (8014004 <ip4_input_accept+0x50>)
 8013fd8:	695a      	ldr	r2, [r3, #20]
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	3304      	adds	r3, #4
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	429a      	cmp	r2, r3
 8013fe2:	d008      	beq.n	8013ff6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8013fe4:	4b07      	ldr	r3, [pc, #28]	; (8014004 <ip4_input_accept+0x50>)
 8013fe6:	695b      	ldr	r3, [r3, #20]
 8013fe8:	6879      	ldr	r1, [r7, #4]
 8013fea:	4618      	mov	r0, r3
 8013fec:	f000 fa26 	bl	801443c <ip4_addr_isbroadcast_u32>
 8013ff0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d001      	beq.n	8013ffa <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8013ff6:	2301      	movs	r3, #1
 8013ff8:	e000      	b.n	8013ffc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8013ffa:	2300      	movs	r3, #0
}
 8013ffc:	4618      	mov	r0, r3
 8013ffe:	3708      	adds	r7, #8
 8014000:	46bd      	mov	sp, r7
 8014002:	bd80      	pop	{r7, pc}
 8014004:	20009c04 	.word	0x20009c04

08014008 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014008:	b580      	push	{r7, lr}
 801400a:	b088      	sub	sp, #32
 801400c:	af00      	add	r7, sp, #0
 801400e:	6078      	str	r0, [r7, #4]
 8014010:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8014012:	2301      	movs	r3, #1
 8014014:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	685b      	ldr	r3, [r3, #4]
 801401a:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801401c:	69fb      	ldr	r3, [r7, #28]
 801401e:	781b      	ldrb	r3, [r3, #0]
 8014020:	091b      	lsrs	r3, r3, #4
 8014022:	b2db      	uxtb	r3, r3
 8014024:	2b04      	cmp	r3, #4
 8014026:	d004      	beq.n	8014032 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8014028:	6878      	ldr	r0, [r7, #4]
 801402a:	f7f6 fda7 	bl	800ab7c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801402e:	2300      	movs	r3, #0
 8014030:	e123      	b.n	801427a <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8014032:	69fb      	ldr	r3, [r7, #28]
 8014034:	781b      	ldrb	r3, [r3, #0]
 8014036:	f003 030f 	and.w	r3, r3, #15
 801403a:	b2db      	uxtb	r3, r3
 801403c:	009b      	lsls	r3, r3, #2
 801403e:	b2db      	uxtb	r3, r3
 8014040:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8014042:	69fb      	ldr	r3, [r7, #28]
 8014044:	885b      	ldrh	r3, [r3, #2]
 8014046:	b29b      	uxth	r3, r3
 8014048:	4618      	mov	r0, r3
 801404a:	f7f5 f999 	bl	8009380 <lwip_htons>
 801404e:	4603      	mov	r3, r0
 8014050:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	891b      	ldrh	r3, [r3, #8]
 8014056:	8a3a      	ldrh	r2, [r7, #16]
 8014058:	429a      	cmp	r2, r3
 801405a:	d204      	bcs.n	8014066 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801405c:	8a3b      	ldrh	r3, [r7, #16]
 801405e:	4619      	mov	r1, r3
 8014060:	6878      	ldr	r0, [r7, #4]
 8014062:	f7f6 fc05 	bl	800a870 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	895b      	ldrh	r3, [r3, #10]
 801406a:	8a7a      	ldrh	r2, [r7, #18]
 801406c:	429a      	cmp	r2, r3
 801406e:	d807      	bhi.n	8014080 <ip4_input+0x78>
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	891b      	ldrh	r3, [r3, #8]
 8014074:	8a3a      	ldrh	r2, [r7, #16]
 8014076:	429a      	cmp	r2, r3
 8014078:	d802      	bhi.n	8014080 <ip4_input+0x78>
 801407a:	8a7b      	ldrh	r3, [r7, #18]
 801407c:	2b13      	cmp	r3, #19
 801407e:	d804      	bhi.n	801408a <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8014080:	6878      	ldr	r0, [r7, #4]
 8014082:	f7f6 fd7b 	bl	800ab7c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8014086:	2300      	movs	r3, #0
 8014088:	e0f7      	b.n	801427a <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801408a:	69fb      	ldr	r3, [r7, #28]
 801408c:	691b      	ldr	r3, [r3, #16]
 801408e:	4a7d      	ldr	r2, [pc, #500]	; (8014284 <ip4_input+0x27c>)
 8014090:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8014092:	69fb      	ldr	r3, [r7, #28]
 8014094:	68db      	ldr	r3, [r3, #12]
 8014096:	4a7b      	ldr	r2, [pc, #492]	; (8014284 <ip4_input+0x27c>)
 8014098:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801409a:	4b7a      	ldr	r3, [pc, #488]	; (8014284 <ip4_input+0x27c>)
 801409c:	695b      	ldr	r3, [r3, #20]
 801409e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80140a2:	2be0      	cmp	r3, #224	; 0xe0
 80140a4:	d112      	bne.n	80140cc <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80140a6:	683b      	ldr	r3, [r7, #0]
 80140a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80140ac:	f003 0301 	and.w	r3, r3, #1
 80140b0:	b2db      	uxtb	r3, r3
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d007      	beq.n	80140c6 <ip4_input+0xbe>
 80140b6:	683b      	ldr	r3, [r7, #0]
 80140b8:	3304      	adds	r3, #4
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d002      	beq.n	80140c6 <ip4_input+0xbe>
      netif = inp;
 80140c0:	683b      	ldr	r3, [r7, #0]
 80140c2:	61bb      	str	r3, [r7, #24]
 80140c4:	e02a      	b.n	801411c <ip4_input+0x114>
    } else {
      netif = NULL;
 80140c6:	2300      	movs	r3, #0
 80140c8:	61bb      	str	r3, [r7, #24]
 80140ca:	e027      	b.n	801411c <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80140cc:	6838      	ldr	r0, [r7, #0]
 80140ce:	f7ff ff71 	bl	8013fb4 <ip4_input_accept>
 80140d2:	4603      	mov	r3, r0
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d002      	beq.n	80140de <ip4_input+0xd6>
      netif = inp;
 80140d8:	683b      	ldr	r3, [r7, #0]
 80140da:	61bb      	str	r3, [r7, #24]
 80140dc:	e01e      	b.n	801411c <ip4_input+0x114>
    } else {
      netif = NULL;
 80140de:	2300      	movs	r3, #0
 80140e0:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80140e2:	4b68      	ldr	r3, [pc, #416]	; (8014284 <ip4_input+0x27c>)
 80140e4:	695b      	ldr	r3, [r3, #20]
 80140e6:	b2db      	uxtb	r3, r3
 80140e8:	2b7f      	cmp	r3, #127	; 0x7f
 80140ea:	d017      	beq.n	801411c <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80140ec:	4b66      	ldr	r3, [pc, #408]	; (8014288 <ip4_input+0x280>)
 80140ee:	681b      	ldr	r3, [r3, #0]
 80140f0:	61bb      	str	r3, [r7, #24]
 80140f2:	e00e      	b.n	8014112 <ip4_input+0x10a>
          if (netif == inp) {
 80140f4:	69ba      	ldr	r2, [r7, #24]
 80140f6:	683b      	ldr	r3, [r7, #0]
 80140f8:	429a      	cmp	r2, r3
 80140fa:	d006      	beq.n	801410a <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80140fc:	69b8      	ldr	r0, [r7, #24]
 80140fe:	f7ff ff59 	bl	8013fb4 <ip4_input_accept>
 8014102:	4603      	mov	r3, r0
 8014104:	2b00      	cmp	r3, #0
 8014106:	d108      	bne.n	801411a <ip4_input+0x112>
 8014108:	e000      	b.n	801410c <ip4_input+0x104>
            continue;
 801410a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801410c:	69bb      	ldr	r3, [r7, #24]
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	61bb      	str	r3, [r7, #24]
 8014112:	69bb      	ldr	r3, [r7, #24]
 8014114:	2b00      	cmp	r3, #0
 8014116:	d1ed      	bne.n	80140f4 <ip4_input+0xec>
 8014118:	e000      	b.n	801411c <ip4_input+0x114>
            break;
 801411a:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801411c:	69bb      	ldr	r3, [r7, #24]
 801411e:	2b00      	cmp	r3, #0
 8014120:	d111      	bne.n	8014146 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8014122:	69fb      	ldr	r3, [r7, #28]
 8014124:	7a5b      	ldrb	r3, [r3, #9]
 8014126:	2b11      	cmp	r3, #17
 8014128:	d10d      	bne.n	8014146 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801412a:	8a7b      	ldrh	r3, [r7, #18]
 801412c:	69fa      	ldr	r2, [r7, #28]
 801412e:	4413      	add	r3, r2
 8014130:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8014132:	68fb      	ldr	r3, [r7, #12]
 8014134:	885b      	ldrh	r3, [r3, #2]
 8014136:	b29b      	uxth	r3, r3
 8014138:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801413c:	d103      	bne.n	8014146 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801413e:	683b      	ldr	r3, [r7, #0]
 8014140:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8014142:	2300      	movs	r3, #0
 8014144:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8014146:	697b      	ldr	r3, [r7, #20]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d017      	beq.n	801417c <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801414c:	4b4d      	ldr	r3, [pc, #308]	; (8014284 <ip4_input+0x27c>)
 801414e:	691b      	ldr	r3, [r3, #16]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d013      	beq.n	801417c <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014154:	4b4b      	ldr	r3, [pc, #300]	; (8014284 <ip4_input+0x27c>)
 8014156:	691b      	ldr	r3, [r3, #16]
 8014158:	6839      	ldr	r1, [r7, #0]
 801415a:	4618      	mov	r0, r3
 801415c:	f000 f96e 	bl	801443c <ip4_addr_isbroadcast_u32>
 8014160:	4603      	mov	r3, r0
 8014162:	2b00      	cmp	r3, #0
 8014164:	d105      	bne.n	8014172 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8014166:	4b47      	ldr	r3, [pc, #284]	; (8014284 <ip4_input+0x27c>)
 8014168:	691b      	ldr	r3, [r3, #16]
 801416a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801416e:	2be0      	cmp	r3, #224	; 0xe0
 8014170:	d104      	bne.n	801417c <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8014172:	6878      	ldr	r0, [r7, #4]
 8014174:	f7f6 fd02 	bl	800ab7c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8014178:	2300      	movs	r3, #0
 801417a:	e07e      	b.n	801427a <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801417c:	69bb      	ldr	r3, [r7, #24]
 801417e:	2b00      	cmp	r3, #0
 8014180:	d104      	bne.n	801418c <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8014182:	6878      	ldr	r0, [r7, #4]
 8014184:	f7f6 fcfa 	bl	800ab7c <pbuf_free>
    return ERR_OK;
 8014188:	2300      	movs	r3, #0
 801418a:	e076      	b.n	801427a <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801418c:	69fb      	ldr	r3, [r7, #28]
 801418e:	88db      	ldrh	r3, [r3, #6]
 8014190:	b29b      	uxth	r3, r3
 8014192:	461a      	mov	r2, r3
 8014194:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8014198:	4013      	ands	r3, r2
 801419a:	2b00      	cmp	r3, #0
 801419c:	d00b      	beq.n	80141b6 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801419e:	6878      	ldr	r0, [r7, #4]
 80141a0:	f000 fc92 	bl	8014ac8 <ip4_reass>
 80141a4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d101      	bne.n	80141b0 <ip4_input+0x1a8>
      return ERR_OK;
 80141ac:	2300      	movs	r3, #0
 80141ae:	e064      	b.n	801427a <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	685b      	ldr	r3, [r3, #4]
 80141b4:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80141b6:	4a33      	ldr	r2, [pc, #204]	; (8014284 <ip4_input+0x27c>)
 80141b8:	69bb      	ldr	r3, [r7, #24]
 80141ba:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80141bc:	4a31      	ldr	r2, [pc, #196]	; (8014284 <ip4_input+0x27c>)
 80141be:	683b      	ldr	r3, [r7, #0]
 80141c0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80141c2:	4a30      	ldr	r2, [pc, #192]	; (8014284 <ip4_input+0x27c>)
 80141c4:	69fb      	ldr	r3, [r7, #28]
 80141c6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80141c8:	69fb      	ldr	r3, [r7, #28]
 80141ca:	781b      	ldrb	r3, [r3, #0]
 80141cc:	f003 030f 	and.w	r3, r3, #15
 80141d0:	b2db      	uxtb	r3, r3
 80141d2:	009b      	lsls	r3, r3, #2
 80141d4:	b2db      	uxtb	r3, r3
 80141d6:	b29a      	uxth	r2, r3
 80141d8:	4b2a      	ldr	r3, [pc, #168]	; (8014284 <ip4_input+0x27c>)
 80141da:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80141dc:	8a7b      	ldrh	r3, [r7, #18]
 80141de:	4619      	mov	r1, r3
 80141e0:	6878      	ldr	r0, [r7, #4]
 80141e2:	f7f6 fc45 	bl	800aa70 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80141e6:	69fb      	ldr	r3, [r7, #28]
 80141e8:	7a5b      	ldrb	r3, [r3, #9]
 80141ea:	2b11      	cmp	r3, #17
 80141ec:	d006      	beq.n	80141fc <ip4_input+0x1f4>
 80141ee:	2b11      	cmp	r3, #17
 80141f0:	dc13      	bgt.n	801421a <ip4_input+0x212>
 80141f2:	2b01      	cmp	r3, #1
 80141f4:	d00c      	beq.n	8014210 <ip4_input+0x208>
 80141f6:	2b06      	cmp	r3, #6
 80141f8:	d005      	beq.n	8014206 <ip4_input+0x1fe>
 80141fa:	e00e      	b.n	801421a <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80141fc:	6839      	ldr	r1, [r7, #0]
 80141fe:	6878      	ldr	r0, [r7, #4]
 8014200:	f7fc faea 	bl	80107d8 <udp_input>
        break;
 8014204:	e026      	b.n	8014254 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8014206:	6839      	ldr	r1, [r7, #0]
 8014208:	6878      	ldr	r0, [r7, #4]
 801420a:	f7f8 fafb 	bl	800c804 <tcp_input>
        break;
 801420e:	e021      	b.n	8014254 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8014210:	6839      	ldr	r1, [r7, #0]
 8014212:	6878      	ldr	r0, [r7, #4]
 8014214:	f7ff fcd0 	bl	8013bb8 <icmp_input>
        break;
 8014218:	e01c      	b.n	8014254 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801421a:	4b1a      	ldr	r3, [pc, #104]	; (8014284 <ip4_input+0x27c>)
 801421c:	695b      	ldr	r3, [r3, #20]
 801421e:	69b9      	ldr	r1, [r7, #24]
 8014220:	4618      	mov	r0, r3
 8014222:	f000 f90b 	bl	801443c <ip4_addr_isbroadcast_u32>
 8014226:	4603      	mov	r3, r0
 8014228:	2b00      	cmp	r3, #0
 801422a:	d10f      	bne.n	801424c <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801422c:	4b15      	ldr	r3, [pc, #84]	; (8014284 <ip4_input+0x27c>)
 801422e:	695b      	ldr	r3, [r3, #20]
 8014230:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014234:	2be0      	cmp	r3, #224	; 0xe0
 8014236:	d009      	beq.n	801424c <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8014238:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801423c:	4619      	mov	r1, r3
 801423e:	6878      	ldr	r0, [r7, #4]
 8014240:	f7f6 fc89 	bl	800ab56 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8014244:	2102      	movs	r1, #2
 8014246:	6878      	ldr	r0, [r7, #4]
 8014248:	f7ff fdba 	bl	8013dc0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801424c:	6878      	ldr	r0, [r7, #4]
 801424e:	f7f6 fc95 	bl	800ab7c <pbuf_free>
        break;
 8014252:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8014254:	4b0b      	ldr	r3, [pc, #44]	; (8014284 <ip4_input+0x27c>)
 8014256:	2200      	movs	r2, #0
 8014258:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801425a:	4b0a      	ldr	r3, [pc, #40]	; (8014284 <ip4_input+0x27c>)
 801425c:	2200      	movs	r2, #0
 801425e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8014260:	4b08      	ldr	r3, [pc, #32]	; (8014284 <ip4_input+0x27c>)
 8014262:	2200      	movs	r2, #0
 8014264:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8014266:	4b07      	ldr	r3, [pc, #28]	; (8014284 <ip4_input+0x27c>)
 8014268:	2200      	movs	r2, #0
 801426a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801426c:	4b05      	ldr	r3, [pc, #20]	; (8014284 <ip4_input+0x27c>)
 801426e:	2200      	movs	r2, #0
 8014270:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8014272:	4b04      	ldr	r3, [pc, #16]	; (8014284 <ip4_input+0x27c>)
 8014274:	2200      	movs	r2, #0
 8014276:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8014278:	2300      	movs	r3, #0
}
 801427a:	4618      	mov	r0, r3
 801427c:	3720      	adds	r7, #32
 801427e:	46bd      	mov	sp, r7
 8014280:	bd80      	pop	{r7, pc}
 8014282:	bf00      	nop
 8014284:	20009c04 	.word	0x20009c04
 8014288:	2000d36c 	.word	0x2000d36c

0801428c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801428c:	b580      	push	{r7, lr}
 801428e:	b08a      	sub	sp, #40	; 0x28
 8014290:	af04      	add	r7, sp, #16
 8014292:	60f8      	str	r0, [r7, #12]
 8014294:	60b9      	str	r1, [r7, #8]
 8014296:	607a      	str	r2, [r7, #4]
 8014298:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801429a:	68bb      	ldr	r3, [r7, #8]
 801429c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d009      	beq.n	80142b8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80142a4:	68bb      	ldr	r3, [r7, #8]
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d003      	beq.n	80142b2 <ip4_output_if+0x26>
 80142aa:	68bb      	ldr	r3, [r7, #8]
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d102      	bne.n	80142b8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80142b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142b4:	3304      	adds	r3, #4
 80142b6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80142b8:	78fa      	ldrb	r2, [r7, #3]
 80142ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142bc:	9302      	str	r3, [sp, #8]
 80142be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80142c2:	9301      	str	r3, [sp, #4]
 80142c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80142c8:	9300      	str	r3, [sp, #0]
 80142ca:	4613      	mov	r3, r2
 80142cc:	687a      	ldr	r2, [r7, #4]
 80142ce:	6979      	ldr	r1, [r7, #20]
 80142d0:	68f8      	ldr	r0, [r7, #12]
 80142d2:	f000 f805 	bl	80142e0 <ip4_output_if_src>
 80142d6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80142d8:	4618      	mov	r0, r3
 80142da:	3718      	adds	r7, #24
 80142dc:	46bd      	mov	sp, r7
 80142de:	bd80      	pop	{r7, pc}

080142e0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b088      	sub	sp, #32
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	60f8      	str	r0, [r7, #12]
 80142e8:	60b9      	str	r1, [r7, #8]
 80142ea:	607a      	str	r2, [r7, #4]
 80142ec:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	7b9b      	ldrb	r3, [r3, #14]
 80142f2:	2b01      	cmp	r3, #1
 80142f4:	d006      	beq.n	8014304 <ip4_output_if_src+0x24>
 80142f6:	4b4b      	ldr	r3, [pc, #300]	; (8014424 <ip4_output_if_src+0x144>)
 80142f8:	f44f 7255 	mov.w	r2, #852	; 0x354
 80142fc:	494a      	ldr	r1, [pc, #296]	; (8014428 <ip4_output_if_src+0x148>)
 80142fe:	484b      	ldr	r0, [pc, #300]	; (801442c <ip4_output_if_src+0x14c>)
 8014300:	f001 f92e 	bl	8015560 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	2b00      	cmp	r3, #0
 8014308:	d060      	beq.n	80143cc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801430a:	2314      	movs	r3, #20
 801430c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801430e:	2114      	movs	r1, #20
 8014310:	68f8      	ldr	r0, [r7, #12]
 8014312:	f7f6 fb9d 	bl	800aa50 <pbuf_add_header>
 8014316:	4603      	mov	r3, r0
 8014318:	2b00      	cmp	r3, #0
 801431a:	d002      	beq.n	8014322 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801431c:	f06f 0301 	mvn.w	r3, #1
 8014320:	e07c      	b.n	801441c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8014322:	68fb      	ldr	r3, [r7, #12]
 8014324:	685b      	ldr	r3, [r3, #4]
 8014326:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8014328:	68fb      	ldr	r3, [r7, #12]
 801432a:	895b      	ldrh	r3, [r3, #10]
 801432c:	2b13      	cmp	r3, #19
 801432e:	d806      	bhi.n	801433e <ip4_output_if_src+0x5e>
 8014330:	4b3c      	ldr	r3, [pc, #240]	; (8014424 <ip4_output_if_src+0x144>)
 8014332:	f44f 7262 	mov.w	r2, #904	; 0x388
 8014336:	493e      	ldr	r1, [pc, #248]	; (8014430 <ip4_output_if_src+0x150>)
 8014338:	483c      	ldr	r0, [pc, #240]	; (801442c <ip4_output_if_src+0x14c>)
 801433a:	f001 f911 	bl	8015560 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801433e:	69fb      	ldr	r3, [r7, #28]
 8014340:	78fa      	ldrb	r2, [r7, #3]
 8014342:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8014344:	69fb      	ldr	r3, [r7, #28]
 8014346:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801434a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	681a      	ldr	r2, [r3, #0]
 8014350:	69fb      	ldr	r3, [r7, #28]
 8014352:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8014354:	8b7b      	ldrh	r3, [r7, #26]
 8014356:	089b      	lsrs	r3, r3, #2
 8014358:	b29b      	uxth	r3, r3
 801435a:	b2db      	uxtb	r3, r3
 801435c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014360:	b2da      	uxtb	r2, r3
 8014362:	69fb      	ldr	r3, [r7, #28]
 8014364:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8014366:	69fb      	ldr	r3, [r7, #28]
 8014368:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801436c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801436e:	68fb      	ldr	r3, [r7, #12]
 8014370:	891b      	ldrh	r3, [r3, #8]
 8014372:	4618      	mov	r0, r3
 8014374:	f7f5 f804 	bl	8009380 <lwip_htons>
 8014378:	4603      	mov	r3, r0
 801437a:	461a      	mov	r2, r3
 801437c:	69fb      	ldr	r3, [r7, #28]
 801437e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8014380:	69fb      	ldr	r3, [r7, #28]
 8014382:	2200      	movs	r2, #0
 8014384:	719a      	strb	r2, [r3, #6]
 8014386:	2200      	movs	r2, #0
 8014388:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801438a:	4b2a      	ldr	r3, [pc, #168]	; (8014434 <ip4_output_if_src+0x154>)
 801438c:	881b      	ldrh	r3, [r3, #0]
 801438e:	4618      	mov	r0, r3
 8014390:	f7f4 fff6 	bl	8009380 <lwip_htons>
 8014394:	4603      	mov	r3, r0
 8014396:	461a      	mov	r2, r3
 8014398:	69fb      	ldr	r3, [r7, #28]
 801439a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801439c:	4b25      	ldr	r3, [pc, #148]	; (8014434 <ip4_output_if_src+0x154>)
 801439e:	881b      	ldrh	r3, [r3, #0]
 80143a0:	3301      	adds	r3, #1
 80143a2:	b29a      	uxth	r2, r3
 80143a4:	4b23      	ldr	r3, [pc, #140]	; (8014434 <ip4_output_if_src+0x154>)
 80143a6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80143a8:	68bb      	ldr	r3, [r7, #8]
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d104      	bne.n	80143b8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80143ae:	4b22      	ldr	r3, [pc, #136]	; (8014438 <ip4_output_if_src+0x158>)
 80143b0:	681a      	ldr	r2, [r3, #0]
 80143b2:	69fb      	ldr	r3, [r7, #28]
 80143b4:	60da      	str	r2, [r3, #12]
 80143b6:	e003      	b.n	80143c0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80143b8:	68bb      	ldr	r3, [r7, #8]
 80143ba:	681a      	ldr	r2, [r3, #0]
 80143bc:	69fb      	ldr	r3, [r7, #28]
 80143be:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80143c0:	69fb      	ldr	r3, [r7, #28]
 80143c2:	2200      	movs	r2, #0
 80143c4:	729a      	strb	r2, [r3, #10]
 80143c6:	2200      	movs	r2, #0
 80143c8:	72da      	strb	r2, [r3, #11]
 80143ca:	e00f      	b.n	80143ec <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80143cc:	68fb      	ldr	r3, [r7, #12]
 80143ce:	895b      	ldrh	r3, [r3, #10]
 80143d0:	2b13      	cmp	r3, #19
 80143d2:	d802      	bhi.n	80143da <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80143d4:	f06f 0301 	mvn.w	r3, #1
 80143d8:	e020      	b.n	801441c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80143da:	68fb      	ldr	r3, [r7, #12]
 80143dc:	685b      	ldr	r3, [r3, #4]
 80143de:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80143e0:	69fb      	ldr	r3, [r7, #28]
 80143e2:	691b      	ldr	r3, [r3, #16]
 80143e4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80143e6:	f107 0314 	add.w	r3, r7, #20
 80143ea:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80143ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d00c      	beq.n	801440e <ip4_output_if_src+0x12e>
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	891a      	ldrh	r2, [r3, #8]
 80143f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80143fc:	429a      	cmp	r2, r3
 80143fe:	d906      	bls.n	801440e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8014400:	687a      	ldr	r2, [r7, #4]
 8014402:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014404:	68f8      	ldr	r0, [r7, #12]
 8014406:	f000 fd53 	bl	8014eb0 <ip4_frag>
 801440a:	4603      	mov	r3, r0
 801440c:	e006      	b.n	801441c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801440e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014410:	695b      	ldr	r3, [r3, #20]
 8014412:	687a      	ldr	r2, [r7, #4]
 8014414:	68f9      	ldr	r1, [r7, #12]
 8014416:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014418:	4798      	blx	r3
 801441a:	4603      	mov	r3, r0
}
 801441c:	4618      	mov	r0, r3
 801441e:	3720      	adds	r7, #32
 8014420:	46bd      	mov	sp, r7
 8014422:	bd80      	pop	{r7, pc}
 8014424:	08019174 	.word	0x08019174
 8014428:	080191a8 	.word	0x080191a8
 801442c:	080191b4 	.word	0x080191b4
 8014430:	080191dc 	.word	0x080191dc
 8014434:	2000d4fe 	.word	0x2000d4fe
 8014438:	08019630 	.word	0x08019630

0801443c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801443c:	b480      	push	{r7}
 801443e:	b085      	sub	sp, #20
 8014440:	af00      	add	r7, sp, #0
 8014442:	6078      	str	r0, [r7, #4]
 8014444:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014450:	d002      	beq.n	8014458 <ip4_addr_isbroadcast_u32+0x1c>
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	2b00      	cmp	r3, #0
 8014456:	d101      	bne.n	801445c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8014458:	2301      	movs	r3, #1
 801445a:	e02a      	b.n	80144b2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801445c:	683b      	ldr	r3, [r7, #0]
 801445e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014462:	f003 0302 	and.w	r3, r3, #2
 8014466:	2b00      	cmp	r3, #0
 8014468:	d101      	bne.n	801446e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801446a:	2300      	movs	r3, #0
 801446c:	e021      	b.n	80144b2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801446e:	683b      	ldr	r3, [r7, #0]
 8014470:	3304      	adds	r3, #4
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	687a      	ldr	r2, [r7, #4]
 8014476:	429a      	cmp	r2, r3
 8014478:	d101      	bne.n	801447e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801447a:	2300      	movs	r3, #0
 801447c:	e019      	b.n	80144b2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801447e:	68fa      	ldr	r2, [r7, #12]
 8014480:	683b      	ldr	r3, [r7, #0]
 8014482:	3304      	adds	r3, #4
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	405a      	eors	r2, r3
 8014488:	683b      	ldr	r3, [r7, #0]
 801448a:	3308      	adds	r3, #8
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	4013      	ands	r3, r2
 8014490:	2b00      	cmp	r3, #0
 8014492:	d10d      	bne.n	80144b0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014494:	683b      	ldr	r3, [r7, #0]
 8014496:	3308      	adds	r3, #8
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	43da      	mvns	r2, r3
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80144a0:	683b      	ldr	r3, [r7, #0]
 80144a2:	3308      	adds	r3, #8
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80144a8:	429a      	cmp	r2, r3
 80144aa:	d101      	bne.n	80144b0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80144ac:	2301      	movs	r3, #1
 80144ae:	e000      	b.n	80144b2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80144b0:	2300      	movs	r3, #0
  }
}
 80144b2:	4618      	mov	r0, r3
 80144b4:	3714      	adds	r7, #20
 80144b6:	46bd      	mov	sp, r7
 80144b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144bc:	4770      	bx	lr
	...

080144c0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80144c0:	b580      	push	{r7, lr}
 80144c2:	b084      	sub	sp, #16
 80144c4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80144c6:	2300      	movs	r3, #0
 80144c8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80144ca:	4b12      	ldr	r3, [pc, #72]	; (8014514 <ip_reass_tmr+0x54>)
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80144d0:	e018      	b.n	8014504 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80144d2:	68fb      	ldr	r3, [r7, #12]
 80144d4:	7fdb      	ldrb	r3, [r3, #31]
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d00b      	beq.n	80144f2 <ip_reass_tmr+0x32>
      r->timer--;
 80144da:	68fb      	ldr	r3, [r7, #12]
 80144dc:	7fdb      	ldrb	r3, [r3, #31]
 80144de:	3b01      	subs	r3, #1
 80144e0:	b2da      	uxtb	r2, r3
 80144e2:	68fb      	ldr	r3, [r7, #12]
 80144e4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80144e6:	68fb      	ldr	r3, [r7, #12]
 80144e8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	60fb      	str	r3, [r7, #12]
 80144f0:	e008      	b.n	8014504 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80144fc:	68b9      	ldr	r1, [r7, #8]
 80144fe:	6878      	ldr	r0, [r7, #4]
 8014500:	f000 f80a 	bl	8014518 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	2b00      	cmp	r3, #0
 8014508:	d1e3      	bne.n	80144d2 <ip_reass_tmr+0x12>
    }
  }
}
 801450a:	bf00      	nop
 801450c:	bf00      	nop
 801450e:	3710      	adds	r7, #16
 8014510:	46bd      	mov	sp, r7
 8014512:	bd80      	pop	{r7, pc}
 8014514:	2000d500 	.word	0x2000d500

08014518 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014518:	b580      	push	{r7, lr}
 801451a:	b088      	sub	sp, #32
 801451c:	af00      	add	r7, sp, #0
 801451e:	6078      	str	r0, [r7, #4]
 8014520:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8014522:	2300      	movs	r3, #0
 8014524:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8014526:	683a      	ldr	r2, [r7, #0]
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	429a      	cmp	r2, r3
 801452c:	d105      	bne.n	801453a <ip_reass_free_complete_datagram+0x22>
 801452e:	4b45      	ldr	r3, [pc, #276]	; (8014644 <ip_reass_free_complete_datagram+0x12c>)
 8014530:	22ab      	movs	r2, #171	; 0xab
 8014532:	4945      	ldr	r1, [pc, #276]	; (8014648 <ip_reass_free_complete_datagram+0x130>)
 8014534:	4845      	ldr	r0, [pc, #276]	; (801464c <ip_reass_free_complete_datagram+0x134>)
 8014536:	f001 f813 	bl	8015560 <iprintf>
  if (prev != NULL) {
 801453a:	683b      	ldr	r3, [r7, #0]
 801453c:	2b00      	cmp	r3, #0
 801453e:	d00a      	beq.n	8014556 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8014540:	683b      	ldr	r3, [r7, #0]
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	687a      	ldr	r2, [r7, #4]
 8014546:	429a      	cmp	r2, r3
 8014548:	d005      	beq.n	8014556 <ip_reass_free_complete_datagram+0x3e>
 801454a:	4b3e      	ldr	r3, [pc, #248]	; (8014644 <ip_reass_free_complete_datagram+0x12c>)
 801454c:	22ad      	movs	r2, #173	; 0xad
 801454e:	4940      	ldr	r1, [pc, #256]	; (8014650 <ip_reass_free_complete_datagram+0x138>)
 8014550:	483e      	ldr	r0, [pc, #248]	; (801464c <ip_reass_free_complete_datagram+0x134>)
 8014552:	f001 f805 	bl	8015560 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	685b      	ldr	r3, [r3, #4]
 801455a:	685b      	ldr	r3, [r3, #4]
 801455c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801455e:	697b      	ldr	r3, [r7, #20]
 8014560:	889b      	ldrh	r3, [r3, #4]
 8014562:	b29b      	uxth	r3, r3
 8014564:	2b00      	cmp	r3, #0
 8014566:	d12a      	bne.n	80145be <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	685b      	ldr	r3, [r3, #4]
 801456c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801456e:	697b      	ldr	r3, [r7, #20]
 8014570:	681a      	ldr	r2, [r3, #0]
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8014576:	69bb      	ldr	r3, [r7, #24]
 8014578:	6858      	ldr	r0, [r3, #4]
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	3308      	adds	r3, #8
 801457e:	2214      	movs	r2, #20
 8014580:	4619      	mov	r1, r3
 8014582:	f000 ffd7 	bl	8015534 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8014586:	2101      	movs	r1, #1
 8014588:	69b8      	ldr	r0, [r7, #24]
 801458a:	f7ff fc29 	bl	8013de0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801458e:	69b8      	ldr	r0, [r7, #24]
 8014590:	f7f6 fb82 	bl	800ac98 <pbuf_clen>
 8014594:	4603      	mov	r3, r0
 8014596:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014598:	8bfa      	ldrh	r2, [r7, #30]
 801459a:	8a7b      	ldrh	r3, [r7, #18]
 801459c:	4413      	add	r3, r2
 801459e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80145a2:	db05      	blt.n	80145b0 <ip_reass_free_complete_datagram+0x98>
 80145a4:	4b27      	ldr	r3, [pc, #156]	; (8014644 <ip_reass_free_complete_datagram+0x12c>)
 80145a6:	22bc      	movs	r2, #188	; 0xbc
 80145a8:	492a      	ldr	r1, [pc, #168]	; (8014654 <ip_reass_free_complete_datagram+0x13c>)
 80145aa:	4828      	ldr	r0, [pc, #160]	; (801464c <ip_reass_free_complete_datagram+0x134>)
 80145ac:	f000 ffd8 	bl	8015560 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80145b0:	8bfa      	ldrh	r2, [r7, #30]
 80145b2:	8a7b      	ldrh	r3, [r7, #18]
 80145b4:	4413      	add	r3, r2
 80145b6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80145b8:	69b8      	ldr	r0, [r7, #24]
 80145ba:	f7f6 fadf 	bl	800ab7c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	685b      	ldr	r3, [r3, #4]
 80145c2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80145c4:	e01f      	b.n	8014606 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80145c6:	69bb      	ldr	r3, [r7, #24]
 80145c8:	685b      	ldr	r3, [r3, #4]
 80145ca:	617b      	str	r3, [r7, #20]
    pcur = p;
 80145cc:	69bb      	ldr	r3, [r7, #24]
 80145ce:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80145d0:	697b      	ldr	r3, [r7, #20]
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80145d6:	68f8      	ldr	r0, [r7, #12]
 80145d8:	f7f6 fb5e 	bl	800ac98 <pbuf_clen>
 80145dc:	4603      	mov	r3, r0
 80145de:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80145e0:	8bfa      	ldrh	r2, [r7, #30]
 80145e2:	8a7b      	ldrh	r3, [r7, #18]
 80145e4:	4413      	add	r3, r2
 80145e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80145ea:	db05      	blt.n	80145f8 <ip_reass_free_complete_datagram+0xe0>
 80145ec:	4b15      	ldr	r3, [pc, #84]	; (8014644 <ip_reass_free_complete_datagram+0x12c>)
 80145ee:	22cc      	movs	r2, #204	; 0xcc
 80145f0:	4918      	ldr	r1, [pc, #96]	; (8014654 <ip_reass_free_complete_datagram+0x13c>)
 80145f2:	4816      	ldr	r0, [pc, #88]	; (801464c <ip_reass_free_complete_datagram+0x134>)
 80145f4:	f000 ffb4 	bl	8015560 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80145f8:	8bfa      	ldrh	r2, [r7, #30]
 80145fa:	8a7b      	ldrh	r3, [r7, #18]
 80145fc:	4413      	add	r3, r2
 80145fe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8014600:	68f8      	ldr	r0, [r7, #12]
 8014602:	f7f6 fabb 	bl	800ab7c <pbuf_free>
  while (p != NULL) {
 8014606:	69bb      	ldr	r3, [r7, #24]
 8014608:	2b00      	cmp	r3, #0
 801460a:	d1dc      	bne.n	80145c6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801460c:	6839      	ldr	r1, [r7, #0]
 801460e:	6878      	ldr	r0, [r7, #4]
 8014610:	f000 f8c2 	bl	8014798 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8014614:	4b10      	ldr	r3, [pc, #64]	; (8014658 <ip_reass_free_complete_datagram+0x140>)
 8014616:	881b      	ldrh	r3, [r3, #0]
 8014618:	8bfa      	ldrh	r2, [r7, #30]
 801461a:	429a      	cmp	r2, r3
 801461c:	d905      	bls.n	801462a <ip_reass_free_complete_datagram+0x112>
 801461e:	4b09      	ldr	r3, [pc, #36]	; (8014644 <ip_reass_free_complete_datagram+0x12c>)
 8014620:	22d2      	movs	r2, #210	; 0xd2
 8014622:	490e      	ldr	r1, [pc, #56]	; (801465c <ip_reass_free_complete_datagram+0x144>)
 8014624:	4809      	ldr	r0, [pc, #36]	; (801464c <ip_reass_free_complete_datagram+0x134>)
 8014626:	f000 ff9b 	bl	8015560 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801462a:	4b0b      	ldr	r3, [pc, #44]	; (8014658 <ip_reass_free_complete_datagram+0x140>)
 801462c:	881a      	ldrh	r2, [r3, #0]
 801462e:	8bfb      	ldrh	r3, [r7, #30]
 8014630:	1ad3      	subs	r3, r2, r3
 8014632:	b29a      	uxth	r2, r3
 8014634:	4b08      	ldr	r3, [pc, #32]	; (8014658 <ip_reass_free_complete_datagram+0x140>)
 8014636:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8014638:	8bfb      	ldrh	r3, [r7, #30]
}
 801463a:	4618      	mov	r0, r3
 801463c:	3720      	adds	r7, #32
 801463e:	46bd      	mov	sp, r7
 8014640:	bd80      	pop	{r7, pc}
 8014642:	bf00      	nop
 8014644:	0801920c 	.word	0x0801920c
 8014648:	08019248 	.word	0x08019248
 801464c:	08019254 	.word	0x08019254
 8014650:	0801927c 	.word	0x0801927c
 8014654:	08019290 	.word	0x08019290
 8014658:	2000d504 	.word	0x2000d504
 801465c:	080192b0 	.word	0x080192b0

08014660 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8014660:	b580      	push	{r7, lr}
 8014662:	b08a      	sub	sp, #40	; 0x28
 8014664:	af00      	add	r7, sp, #0
 8014666:	6078      	str	r0, [r7, #4]
 8014668:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801466a:	2300      	movs	r3, #0
 801466c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801466e:	2300      	movs	r3, #0
 8014670:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8014672:	2300      	movs	r3, #0
 8014674:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8014676:	2300      	movs	r3, #0
 8014678:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801467a:	2300      	movs	r3, #0
 801467c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801467e:	4b28      	ldr	r3, [pc, #160]	; (8014720 <ip_reass_remove_oldest_datagram+0xc0>)
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014684:	e030      	b.n	80146e8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8014686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014688:	695a      	ldr	r2, [r3, #20]
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	68db      	ldr	r3, [r3, #12]
 801468e:	429a      	cmp	r2, r3
 8014690:	d10c      	bne.n	80146ac <ip_reass_remove_oldest_datagram+0x4c>
 8014692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014694:	699a      	ldr	r2, [r3, #24]
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	691b      	ldr	r3, [r3, #16]
 801469a:	429a      	cmp	r2, r3
 801469c:	d106      	bne.n	80146ac <ip_reass_remove_oldest_datagram+0x4c>
 801469e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146a0:	899a      	ldrh	r2, [r3, #12]
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	889b      	ldrh	r3, [r3, #4]
 80146a6:	b29b      	uxth	r3, r3
 80146a8:	429a      	cmp	r2, r3
 80146aa:	d014      	beq.n	80146d6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80146ac:	693b      	ldr	r3, [r7, #16]
 80146ae:	3301      	adds	r3, #1
 80146b0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80146b2:	6a3b      	ldr	r3, [r7, #32]
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d104      	bne.n	80146c2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80146b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146ba:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80146bc:	69fb      	ldr	r3, [r7, #28]
 80146be:	61bb      	str	r3, [r7, #24]
 80146c0:	e009      	b.n	80146d6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80146c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146c4:	7fda      	ldrb	r2, [r3, #31]
 80146c6:	6a3b      	ldr	r3, [r7, #32]
 80146c8:	7fdb      	ldrb	r3, [r3, #31]
 80146ca:	429a      	cmp	r2, r3
 80146cc:	d803      	bhi.n	80146d6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80146ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146d0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80146d2:	69fb      	ldr	r3, [r7, #28]
 80146d4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80146d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d001      	beq.n	80146e2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80146de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146e0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80146e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80146e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d1cb      	bne.n	8014686 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80146ee:	6a3b      	ldr	r3, [r7, #32]
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d008      	beq.n	8014706 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80146f4:	69b9      	ldr	r1, [r7, #24]
 80146f6:	6a38      	ldr	r0, [r7, #32]
 80146f8:	f7ff ff0e 	bl	8014518 <ip_reass_free_complete_datagram>
 80146fc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80146fe:	697a      	ldr	r2, [r7, #20]
 8014700:	68fb      	ldr	r3, [r7, #12]
 8014702:	4413      	add	r3, r2
 8014704:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8014706:	697a      	ldr	r2, [r7, #20]
 8014708:	683b      	ldr	r3, [r7, #0]
 801470a:	429a      	cmp	r2, r3
 801470c:	da02      	bge.n	8014714 <ip_reass_remove_oldest_datagram+0xb4>
 801470e:	693b      	ldr	r3, [r7, #16]
 8014710:	2b01      	cmp	r3, #1
 8014712:	dcac      	bgt.n	801466e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8014714:	697b      	ldr	r3, [r7, #20]
}
 8014716:	4618      	mov	r0, r3
 8014718:	3728      	adds	r7, #40	; 0x28
 801471a:	46bd      	mov	sp, r7
 801471c:	bd80      	pop	{r7, pc}
 801471e:	bf00      	nop
 8014720:	2000d500 	.word	0x2000d500

08014724 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8014724:	b580      	push	{r7, lr}
 8014726:	b084      	sub	sp, #16
 8014728:	af00      	add	r7, sp, #0
 801472a:	6078      	str	r0, [r7, #4]
 801472c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801472e:	2004      	movs	r0, #4
 8014730:	f7f5 fafe 	bl	8009d30 <memp_malloc>
 8014734:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8014736:	68fb      	ldr	r3, [r7, #12]
 8014738:	2b00      	cmp	r3, #0
 801473a:	d110      	bne.n	801475e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801473c:	6839      	ldr	r1, [r7, #0]
 801473e:	6878      	ldr	r0, [r7, #4]
 8014740:	f7ff ff8e 	bl	8014660 <ip_reass_remove_oldest_datagram>
 8014744:	4602      	mov	r2, r0
 8014746:	683b      	ldr	r3, [r7, #0]
 8014748:	4293      	cmp	r3, r2
 801474a:	dc03      	bgt.n	8014754 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801474c:	2004      	movs	r0, #4
 801474e:	f7f5 faef 	bl	8009d30 <memp_malloc>
 8014752:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8014754:	68fb      	ldr	r3, [r7, #12]
 8014756:	2b00      	cmp	r3, #0
 8014758:	d101      	bne.n	801475e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801475a:	2300      	movs	r3, #0
 801475c:	e016      	b.n	801478c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801475e:	2220      	movs	r2, #32
 8014760:	2100      	movs	r1, #0
 8014762:	68f8      	ldr	r0, [r7, #12]
 8014764:	f000 fef4 	bl	8015550 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8014768:	68fb      	ldr	r3, [r7, #12]
 801476a:	220f      	movs	r2, #15
 801476c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801476e:	4b09      	ldr	r3, [pc, #36]	; (8014794 <ip_reass_enqueue_new_datagram+0x70>)
 8014770:	681a      	ldr	r2, [r3, #0]
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8014776:	4a07      	ldr	r2, [pc, #28]	; (8014794 <ip_reass_enqueue_new_datagram+0x70>)
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	3308      	adds	r3, #8
 8014780:	2214      	movs	r2, #20
 8014782:	6879      	ldr	r1, [r7, #4]
 8014784:	4618      	mov	r0, r3
 8014786:	f000 fed5 	bl	8015534 <memcpy>
  return ipr;
 801478a:	68fb      	ldr	r3, [r7, #12]
}
 801478c:	4618      	mov	r0, r3
 801478e:	3710      	adds	r7, #16
 8014790:	46bd      	mov	sp, r7
 8014792:	bd80      	pop	{r7, pc}
 8014794:	2000d500 	.word	0x2000d500

08014798 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014798:	b580      	push	{r7, lr}
 801479a:	b082      	sub	sp, #8
 801479c:	af00      	add	r7, sp, #0
 801479e:	6078      	str	r0, [r7, #4]
 80147a0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80147a2:	4b10      	ldr	r3, [pc, #64]	; (80147e4 <ip_reass_dequeue_datagram+0x4c>)
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	687a      	ldr	r2, [r7, #4]
 80147a8:	429a      	cmp	r2, r3
 80147aa:	d104      	bne.n	80147b6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	4a0c      	ldr	r2, [pc, #48]	; (80147e4 <ip_reass_dequeue_datagram+0x4c>)
 80147b2:	6013      	str	r3, [r2, #0]
 80147b4:	e00d      	b.n	80147d2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80147b6:	683b      	ldr	r3, [r7, #0]
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d106      	bne.n	80147ca <ip_reass_dequeue_datagram+0x32>
 80147bc:	4b0a      	ldr	r3, [pc, #40]	; (80147e8 <ip_reass_dequeue_datagram+0x50>)
 80147be:	f240 1245 	movw	r2, #325	; 0x145
 80147c2:	490a      	ldr	r1, [pc, #40]	; (80147ec <ip_reass_dequeue_datagram+0x54>)
 80147c4:	480a      	ldr	r0, [pc, #40]	; (80147f0 <ip_reass_dequeue_datagram+0x58>)
 80147c6:	f000 fecb 	bl	8015560 <iprintf>
    prev->next = ipr->next;
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	681a      	ldr	r2, [r3, #0]
 80147ce:	683b      	ldr	r3, [r7, #0]
 80147d0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80147d2:	6879      	ldr	r1, [r7, #4]
 80147d4:	2004      	movs	r0, #4
 80147d6:	f7f5 fb21 	bl	8009e1c <memp_free>
}
 80147da:	bf00      	nop
 80147dc:	3708      	adds	r7, #8
 80147de:	46bd      	mov	sp, r7
 80147e0:	bd80      	pop	{r7, pc}
 80147e2:	bf00      	nop
 80147e4:	2000d500 	.word	0x2000d500
 80147e8:	0801920c 	.word	0x0801920c
 80147ec:	080192d4 	.word	0x080192d4
 80147f0:	08019254 	.word	0x08019254

080147f4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80147f4:	b580      	push	{r7, lr}
 80147f6:	b08c      	sub	sp, #48	; 0x30
 80147f8:	af00      	add	r7, sp, #0
 80147fa:	60f8      	str	r0, [r7, #12]
 80147fc:	60b9      	str	r1, [r7, #8]
 80147fe:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8014800:	2300      	movs	r3, #0
 8014802:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8014804:	2301      	movs	r3, #1
 8014806:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8014808:	68bb      	ldr	r3, [r7, #8]
 801480a:	685b      	ldr	r3, [r3, #4]
 801480c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801480e:	69fb      	ldr	r3, [r7, #28]
 8014810:	885b      	ldrh	r3, [r3, #2]
 8014812:	b29b      	uxth	r3, r3
 8014814:	4618      	mov	r0, r3
 8014816:	f7f4 fdb3 	bl	8009380 <lwip_htons>
 801481a:	4603      	mov	r3, r0
 801481c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801481e:	69fb      	ldr	r3, [r7, #28]
 8014820:	781b      	ldrb	r3, [r3, #0]
 8014822:	f003 030f 	and.w	r3, r3, #15
 8014826:	b2db      	uxtb	r3, r3
 8014828:	009b      	lsls	r3, r3, #2
 801482a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801482c:	7e7b      	ldrb	r3, [r7, #25]
 801482e:	b29b      	uxth	r3, r3
 8014830:	8b7a      	ldrh	r2, [r7, #26]
 8014832:	429a      	cmp	r2, r3
 8014834:	d202      	bcs.n	801483c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014836:	f04f 33ff 	mov.w	r3, #4294967295
 801483a:	e135      	b.n	8014aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801483c:	7e7b      	ldrb	r3, [r7, #25]
 801483e:	b29b      	uxth	r3, r3
 8014840:	8b7a      	ldrh	r2, [r7, #26]
 8014842:	1ad3      	subs	r3, r2, r3
 8014844:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8014846:	69fb      	ldr	r3, [r7, #28]
 8014848:	88db      	ldrh	r3, [r3, #6]
 801484a:	b29b      	uxth	r3, r3
 801484c:	4618      	mov	r0, r3
 801484e:	f7f4 fd97 	bl	8009380 <lwip_htons>
 8014852:	4603      	mov	r3, r0
 8014854:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014858:	b29b      	uxth	r3, r3
 801485a:	00db      	lsls	r3, r3, #3
 801485c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801485e:	68bb      	ldr	r3, [r7, #8]
 8014860:	685b      	ldr	r3, [r3, #4]
 8014862:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8014864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014866:	2200      	movs	r2, #0
 8014868:	701a      	strb	r2, [r3, #0]
 801486a:	2200      	movs	r2, #0
 801486c:	705a      	strb	r2, [r3, #1]
 801486e:	2200      	movs	r2, #0
 8014870:	709a      	strb	r2, [r3, #2]
 8014872:	2200      	movs	r2, #0
 8014874:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8014876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014878:	8afa      	ldrh	r2, [r7, #22]
 801487a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801487c:	8afa      	ldrh	r2, [r7, #22]
 801487e:	8b7b      	ldrh	r3, [r7, #26]
 8014880:	4413      	add	r3, r2
 8014882:	b29a      	uxth	r2, r3
 8014884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014886:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8014888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801488a:	88db      	ldrh	r3, [r3, #6]
 801488c:	b29b      	uxth	r3, r3
 801488e:	8afa      	ldrh	r2, [r7, #22]
 8014890:	429a      	cmp	r2, r3
 8014892:	d902      	bls.n	801489a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014894:	f04f 33ff 	mov.w	r3, #4294967295
 8014898:	e106      	b.n	8014aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	685b      	ldr	r3, [r3, #4]
 801489e:	627b      	str	r3, [r7, #36]	; 0x24
 80148a0:	e068      	b.n	8014974 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80148a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148a4:	685b      	ldr	r3, [r3, #4]
 80148a6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80148a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148aa:	889b      	ldrh	r3, [r3, #4]
 80148ac:	b29a      	uxth	r2, r3
 80148ae:	693b      	ldr	r3, [r7, #16]
 80148b0:	889b      	ldrh	r3, [r3, #4]
 80148b2:	b29b      	uxth	r3, r3
 80148b4:	429a      	cmp	r2, r3
 80148b6:	d235      	bcs.n	8014924 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80148b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80148bc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80148be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d020      	beq.n	8014906 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80148c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148c6:	889b      	ldrh	r3, [r3, #4]
 80148c8:	b29a      	uxth	r2, r3
 80148ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148cc:	88db      	ldrh	r3, [r3, #6]
 80148ce:	b29b      	uxth	r3, r3
 80148d0:	429a      	cmp	r2, r3
 80148d2:	d307      	bcc.n	80148e4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80148d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148d6:	88db      	ldrh	r3, [r3, #6]
 80148d8:	b29a      	uxth	r2, r3
 80148da:	693b      	ldr	r3, [r7, #16]
 80148dc:	889b      	ldrh	r3, [r3, #4]
 80148de:	b29b      	uxth	r3, r3
 80148e0:	429a      	cmp	r2, r3
 80148e2:	d902      	bls.n	80148ea <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80148e4:	f04f 33ff 	mov.w	r3, #4294967295
 80148e8:	e0de      	b.n	8014aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80148ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148ec:	68ba      	ldr	r2, [r7, #8]
 80148ee:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80148f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148f2:	88db      	ldrh	r3, [r3, #6]
 80148f4:	b29a      	uxth	r2, r3
 80148f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148f8:	889b      	ldrh	r3, [r3, #4]
 80148fa:	b29b      	uxth	r3, r3
 80148fc:	429a      	cmp	r2, r3
 80148fe:	d03d      	beq.n	801497c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014900:	2300      	movs	r3, #0
 8014902:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8014904:	e03a      	b.n	801497c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8014906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014908:	88db      	ldrh	r3, [r3, #6]
 801490a:	b29a      	uxth	r2, r3
 801490c:	693b      	ldr	r3, [r7, #16]
 801490e:	889b      	ldrh	r3, [r3, #4]
 8014910:	b29b      	uxth	r3, r3
 8014912:	429a      	cmp	r2, r3
 8014914:	d902      	bls.n	801491c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014916:	f04f 33ff 	mov.w	r3, #4294967295
 801491a:	e0c5      	b.n	8014aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	68ba      	ldr	r2, [r7, #8]
 8014920:	605a      	str	r2, [r3, #4]
      break;
 8014922:	e02b      	b.n	801497c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8014924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014926:	889b      	ldrh	r3, [r3, #4]
 8014928:	b29a      	uxth	r2, r3
 801492a:	693b      	ldr	r3, [r7, #16]
 801492c:	889b      	ldrh	r3, [r3, #4]
 801492e:	b29b      	uxth	r3, r3
 8014930:	429a      	cmp	r2, r3
 8014932:	d102      	bne.n	801493a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014934:	f04f 33ff 	mov.w	r3, #4294967295
 8014938:	e0b6      	b.n	8014aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801493a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801493c:	889b      	ldrh	r3, [r3, #4]
 801493e:	b29a      	uxth	r2, r3
 8014940:	693b      	ldr	r3, [r7, #16]
 8014942:	88db      	ldrh	r3, [r3, #6]
 8014944:	b29b      	uxth	r3, r3
 8014946:	429a      	cmp	r2, r3
 8014948:	d202      	bcs.n	8014950 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801494a:	f04f 33ff 	mov.w	r3, #4294967295
 801494e:	e0ab      	b.n	8014aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8014950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014952:	2b00      	cmp	r3, #0
 8014954:	d009      	beq.n	801496a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8014956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014958:	88db      	ldrh	r3, [r3, #6]
 801495a:	b29a      	uxth	r2, r3
 801495c:	693b      	ldr	r3, [r7, #16]
 801495e:	889b      	ldrh	r3, [r3, #4]
 8014960:	b29b      	uxth	r3, r3
 8014962:	429a      	cmp	r2, r3
 8014964:	d001      	beq.n	801496a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014966:	2300      	movs	r3, #0
 8014968:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801496a:	693b      	ldr	r3, [r7, #16]
 801496c:	681b      	ldr	r3, [r3, #0]
 801496e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8014970:	693b      	ldr	r3, [r7, #16]
 8014972:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8014974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014976:	2b00      	cmp	r3, #0
 8014978:	d193      	bne.n	80148a2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801497a:	e000      	b.n	801497e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801497c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014980:	2b00      	cmp	r3, #0
 8014982:	d12d      	bne.n	80149e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8014984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014986:	2b00      	cmp	r3, #0
 8014988:	d01c      	beq.n	80149c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801498a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801498c:	88db      	ldrh	r3, [r3, #6]
 801498e:	b29a      	uxth	r2, r3
 8014990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014992:	889b      	ldrh	r3, [r3, #4]
 8014994:	b29b      	uxth	r3, r3
 8014996:	429a      	cmp	r2, r3
 8014998:	d906      	bls.n	80149a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801499a:	4b45      	ldr	r3, [pc, #276]	; (8014ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801499c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80149a0:	4944      	ldr	r1, [pc, #272]	; (8014ab4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80149a2:	4845      	ldr	r0, [pc, #276]	; (8014ab8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80149a4:	f000 fddc 	bl	8015560 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80149a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149aa:	68ba      	ldr	r2, [r7, #8]
 80149ac:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80149ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149b0:	88db      	ldrh	r3, [r3, #6]
 80149b2:	b29a      	uxth	r2, r3
 80149b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149b6:	889b      	ldrh	r3, [r3, #4]
 80149b8:	b29b      	uxth	r3, r3
 80149ba:	429a      	cmp	r2, r3
 80149bc:	d010      	beq.n	80149e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80149be:	2300      	movs	r3, #0
 80149c0:	623b      	str	r3, [r7, #32]
 80149c2:	e00d      	b.n	80149e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	685b      	ldr	r3, [r3, #4]
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d006      	beq.n	80149da <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80149cc:	4b38      	ldr	r3, [pc, #224]	; (8014ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80149ce:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80149d2:	493a      	ldr	r1, [pc, #232]	; (8014abc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80149d4:	4838      	ldr	r0, [pc, #224]	; (8014ab8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80149d6:	f000 fdc3 	bl	8015560 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	68ba      	ldr	r2, [r7, #8]
 80149de:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d105      	bne.n	80149f2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	7f9b      	ldrb	r3, [r3, #30]
 80149ea:	f003 0301 	and.w	r3, r3, #1
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d059      	beq.n	8014aa6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80149f2:	6a3b      	ldr	r3, [r7, #32]
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d04f      	beq.n	8014a98 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	685b      	ldr	r3, [r3, #4]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d006      	beq.n	8014a0e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	685b      	ldr	r3, [r3, #4]
 8014a04:	685b      	ldr	r3, [r3, #4]
 8014a06:	889b      	ldrh	r3, [r3, #4]
 8014a08:	b29b      	uxth	r3, r3
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d002      	beq.n	8014a14 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8014a0e:	2300      	movs	r3, #0
 8014a10:	623b      	str	r3, [r7, #32]
 8014a12:	e041      	b.n	8014a98 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8014a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a16:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8014a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a1a:	681b      	ldr	r3, [r3, #0]
 8014a1c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014a1e:	e012      	b.n	8014a46 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8014a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a22:	685b      	ldr	r3, [r3, #4]
 8014a24:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8014a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a28:	88db      	ldrh	r3, [r3, #6]
 8014a2a:	b29a      	uxth	r2, r3
 8014a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a2e:	889b      	ldrh	r3, [r3, #4]
 8014a30:	b29b      	uxth	r3, r3
 8014a32:	429a      	cmp	r2, r3
 8014a34:	d002      	beq.n	8014a3c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8014a36:	2300      	movs	r3, #0
 8014a38:	623b      	str	r3, [r7, #32]
            break;
 8014a3a:	e007      	b.n	8014a4c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8014a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a3e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8014a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a42:	681b      	ldr	r3, [r3, #0]
 8014a44:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d1e9      	bne.n	8014a20 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8014a4c:	6a3b      	ldr	r3, [r7, #32]
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d022      	beq.n	8014a98 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8014a52:	68fb      	ldr	r3, [r7, #12]
 8014a54:	685b      	ldr	r3, [r3, #4]
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d106      	bne.n	8014a68 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8014a5a:	4b15      	ldr	r3, [pc, #84]	; (8014ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014a5c:	f240 12df 	movw	r2, #479	; 0x1df
 8014a60:	4917      	ldr	r1, [pc, #92]	; (8014ac0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014a62:	4815      	ldr	r0, [pc, #84]	; (8014ab8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014a64:	f000 fd7c 	bl	8015560 <iprintf>
          LWIP_ASSERT("sanity check",
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	685b      	ldr	r3, [r3, #4]
 8014a6c:	685b      	ldr	r3, [r3, #4]
 8014a6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014a70:	429a      	cmp	r2, r3
 8014a72:	d106      	bne.n	8014a82 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8014a74:	4b0e      	ldr	r3, [pc, #56]	; (8014ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014a76:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8014a7a:	4911      	ldr	r1, [pc, #68]	; (8014ac0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014a7c:	480e      	ldr	r0, [pc, #56]	; (8014ab8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014a7e:	f000 fd6f 	bl	8015560 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8014a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a84:	681b      	ldr	r3, [r3, #0]
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d006      	beq.n	8014a98 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8014a8a:	4b09      	ldr	r3, [pc, #36]	; (8014ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014a8c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8014a90:	490c      	ldr	r1, [pc, #48]	; (8014ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8014a92:	4809      	ldr	r0, [pc, #36]	; (8014ab8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014a94:	f000 fd64 	bl	8015560 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8014a98:	6a3b      	ldr	r3, [r7, #32]
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	bf14      	ite	ne
 8014a9e:	2301      	movne	r3, #1
 8014aa0:	2300      	moveq	r3, #0
 8014aa2:	b2db      	uxtb	r3, r3
 8014aa4:	e000      	b.n	8014aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8014aa6:	2300      	movs	r3, #0
}
 8014aa8:	4618      	mov	r0, r3
 8014aaa:	3730      	adds	r7, #48	; 0x30
 8014aac:	46bd      	mov	sp, r7
 8014aae:	bd80      	pop	{r7, pc}
 8014ab0:	0801920c 	.word	0x0801920c
 8014ab4:	080192f0 	.word	0x080192f0
 8014ab8:	08019254 	.word	0x08019254
 8014abc:	08019310 	.word	0x08019310
 8014ac0:	08019348 	.word	0x08019348
 8014ac4:	08019358 	.word	0x08019358

08014ac8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8014ac8:	b580      	push	{r7, lr}
 8014aca:	b08e      	sub	sp, #56	; 0x38
 8014acc:	af00      	add	r7, sp, #0
 8014ace:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	685b      	ldr	r3, [r3, #4]
 8014ad4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8014ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ad8:	781b      	ldrb	r3, [r3, #0]
 8014ada:	f003 030f 	and.w	r3, r3, #15
 8014ade:	b2db      	uxtb	r3, r3
 8014ae0:	009b      	lsls	r3, r3, #2
 8014ae2:	b2db      	uxtb	r3, r3
 8014ae4:	2b14      	cmp	r3, #20
 8014ae6:	f040 8171 	bne.w	8014dcc <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8014aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014aec:	88db      	ldrh	r3, [r3, #6]
 8014aee:	b29b      	uxth	r3, r3
 8014af0:	4618      	mov	r0, r3
 8014af2:	f7f4 fc45 	bl	8009380 <lwip_htons>
 8014af6:	4603      	mov	r3, r0
 8014af8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014afc:	b29b      	uxth	r3, r3
 8014afe:	00db      	lsls	r3, r3, #3
 8014b00:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b04:	885b      	ldrh	r3, [r3, #2]
 8014b06:	b29b      	uxth	r3, r3
 8014b08:	4618      	mov	r0, r3
 8014b0a:	f7f4 fc39 	bl	8009380 <lwip_htons>
 8014b0e:	4603      	mov	r3, r0
 8014b10:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8014b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b14:	781b      	ldrb	r3, [r3, #0]
 8014b16:	f003 030f 	and.w	r3, r3, #15
 8014b1a:	b2db      	uxtb	r3, r3
 8014b1c:	009b      	lsls	r3, r3, #2
 8014b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8014b22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014b26:	b29b      	uxth	r3, r3
 8014b28:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014b2a:	429a      	cmp	r2, r3
 8014b2c:	f0c0 8150 	bcc.w	8014dd0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8014b30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014b34:	b29b      	uxth	r3, r3
 8014b36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014b38:	1ad3      	subs	r3, r2, r3
 8014b3a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8014b3c:	6878      	ldr	r0, [r7, #4]
 8014b3e:	f7f6 f8ab 	bl	800ac98 <pbuf_clen>
 8014b42:	4603      	mov	r3, r0
 8014b44:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8014b46:	4b8c      	ldr	r3, [pc, #560]	; (8014d78 <ip4_reass+0x2b0>)
 8014b48:	881b      	ldrh	r3, [r3, #0]
 8014b4a:	461a      	mov	r2, r3
 8014b4c:	8c3b      	ldrh	r3, [r7, #32]
 8014b4e:	4413      	add	r3, r2
 8014b50:	2b0a      	cmp	r3, #10
 8014b52:	dd10      	ble.n	8014b76 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014b54:	8c3b      	ldrh	r3, [r7, #32]
 8014b56:	4619      	mov	r1, r3
 8014b58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014b5a:	f7ff fd81 	bl	8014660 <ip_reass_remove_oldest_datagram>
 8014b5e:	4603      	mov	r3, r0
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	f000 8137 	beq.w	8014dd4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8014b66:	4b84      	ldr	r3, [pc, #528]	; (8014d78 <ip4_reass+0x2b0>)
 8014b68:	881b      	ldrh	r3, [r3, #0]
 8014b6a:	461a      	mov	r2, r3
 8014b6c:	8c3b      	ldrh	r3, [r7, #32]
 8014b6e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014b70:	2b0a      	cmp	r3, #10
 8014b72:	f300 812f 	bgt.w	8014dd4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014b76:	4b81      	ldr	r3, [pc, #516]	; (8014d7c <ip4_reass+0x2b4>)
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	633b      	str	r3, [r7, #48]	; 0x30
 8014b7c:	e015      	b.n	8014baa <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8014b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b80:	695a      	ldr	r2, [r3, #20]
 8014b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b84:	68db      	ldr	r3, [r3, #12]
 8014b86:	429a      	cmp	r2, r3
 8014b88:	d10c      	bne.n	8014ba4 <ip4_reass+0xdc>
 8014b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b8c:	699a      	ldr	r2, [r3, #24]
 8014b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b90:	691b      	ldr	r3, [r3, #16]
 8014b92:	429a      	cmp	r2, r3
 8014b94:	d106      	bne.n	8014ba4 <ip4_reass+0xdc>
 8014b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b98:	899a      	ldrh	r2, [r3, #12]
 8014b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b9c:	889b      	ldrh	r3, [r3, #4]
 8014b9e:	b29b      	uxth	r3, r3
 8014ba0:	429a      	cmp	r2, r3
 8014ba2:	d006      	beq.n	8014bb2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	633b      	str	r3, [r7, #48]	; 0x30
 8014baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d1e6      	bne.n	8014b7e <ip4_reass+0xb6>
 8014bb0:	e000      	b.n	8014bb4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8014bb2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8014bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d109      	bne.n	8014bce <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8014bba:	8c3b      	ldrh	r3, [r7, #32]
 8014bbc:	4619      	mov	r1, r3
 8014bbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014bc0:	f7ff fdb0 	bl	8014724 <ip_reass_enqueue_new_datagram>
 8014bc4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8014bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d11c      	bne.n	8014c06 <ip4_reass+0x13e>
      goto nullreturn;
 8014bcc:	e105      	b.n	8014dda <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bd0:	88db      	ldrh	r3, [r3, #6]
 8014bd2:	b29b      	uxth	r3, r3
 8014bd4:	4618      	mov	r0, r3
 8014bd6:	f7f4 fbd3 	bl	8009380 <lwip_htons>
 8014bda:	4603      	mov	r3, r0
 8014bdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d110      	bne.n	8014c06 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8014be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014be6:	89db      	ldrh	r3, [r3, #14]
 8014be8:	4618      	mov	r0, r3
 8014bea:	f7f4 fbc9 	bl	8009380 <lwip_htons>
 8014bee:	4603      	mov	r3, r0
 8014bf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d006      	beq.n	8014c06 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8014bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bfa:	3308      	adds	r3, #8
 8014bfc:	2214      	movs	r2, #20
 8014bfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014c00:	4618      	mov	r0, r3
 8014c02:	f000 fc97 	bl	8015534 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8014c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c08:	88db      	ldrh	r3, [r3, #6]
 8014c0a:	b29b      	uxth	r3, r3
 8014c0c:	f003 0320 	and.w	r3, r3, #32
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	bf0c      	ite	eq
 8014c14:	2301      	moveq	r3, #1
 8014c16:	2300      	movne	r3, #0
 8014c18:	b2db      	uxtb	r3, r3
 8014c1a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8014c1c:	69fb      	ldr	r3, [r7, #28]
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d00e      	beq.n	8014c40 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8014c22:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014c24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014c26:	4413      	add	r3, r2
 8014c28:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8014c2a:	8b7a      	ldrh	r2, [r7, #26]
 8014c2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014c2e:	429a      	cmp	r2, r3
 8014c30:	f0c0 80a0 	bcc.w	8014d74 <ip4_reass+0x2ac>
 8014c34:	8b7b      	ldrh	r3, [r7, #26]
 8014c36:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8014c3a:	4293      	cmp	r3, r2
 8014c3c:	f200 809a 	bhi.w	8014d74 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8014c40:	69fa      	ldr	r2, [r7, #28]
 8014c42:	6879      	ldr	r1, [r7, #4]
 8014c44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014c46:	f7ff fdd5 	bl	80147f4 <ip_reass_chain_frag_into_datagram_and_validate>
 8014c4a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8014c4c:	697b      	ldr	r3, [r7, #20]
 8014c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c52:	f000 809b 	beq.w	8014d8c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8014c56:	4b48      	ldr	r3, [pc, #288]	; (8014d78 <ip4_reass+0x2b0>)
 8014c58:	881a      	ldrh	r2, [r3, #0]
 8014c5a:	8c3b      	ldrh	r3, [r7, #32]
 8014c5c:	4413      	add	r3, r2
 8014c5e:	b29a      	uxth	r2, r3
 8014c60:	4b45      	ldr	r3, [pc, #276]	; (8014d78 <ip4_reass+0x2b0>)
 8014c62:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8014c64:	69fb      	ldr	r3, [r7, #28]
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d00d      	beq.n	8014c86 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8014c6a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014c6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014c6e:	4413      	add	r3, r2
 8014c70:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8014c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c74:	8a7a      	ldrh	r2, [r7, #18]
 8014c76:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8014c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c7a:	7f9b      	ldrb	r3, [r3, #30]
 8014c7c:	f043 0301 	orr.w	r3, r3, #1
 8014c80:	b2da      	uxtb	r2, r3
 8014c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c84:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8014c86:	697b      	ldr	r3, [r7, #20]
 8014c88:	2b01      	cmp	r3, #1
 8014c8a:	d171      	bne.n	8014d70 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8014c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c8e:	8b9b      	ldrh	r3, [r3, #28]
 8014c90:	3314      	adds	r3, #20
 8014c92:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8014c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c96:	685b      	ldr	r3, [r3, #4]
 8014c98:	685b      	ldr	r3, [r3, #4]
 8014c9a:	681b      	ldr	r3, [r3, #0]
 8014c9c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8014c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ca0:	685b      	ldr	r3, [r3, #4]
 8014ca2:	685b      	ldr	r3, [r3, #4]
 8014ca4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8014ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ca8:	3308      	adds	r3, #8
 8014caa:	2214      	movs	r2, #20
 8014cac:	4619      	mov	r1, r3
 8014cae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014cb0:	f000 fc40 	bl	8015534 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8014cb4:	8a3b      	ldrh	r3, [r7, #16]
 8014cb6:	4618      	mov	r0, r3
 8014cb8:	f7f4 fb62 	bl	8009380 <lwip_htons>
 8014cbc:	4603      	mov	r3, r0
 8014cbe:	461a      	mov	r2, r3
 8014cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cc2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8014cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cc6:	2200      	movs	r2, #0
 8014cc8:	719a      	strb	r2, [r3, #6]
 8014cca:	2200      	movs	r2, #0
 8014ccc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8014cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cd0:	2200      	movs	r2, #0
 8014cd2:	729a      	strb	r2, [r3, #10]
 8014cd4:	2200      	movs	r2, #0
 8014cd6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8014cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cda:	685b      	ldr	r3, [r3, #4]
 8014cdc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8014cde:	e00d      	b.n	8014cfc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8014ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ce2:	685b      	ldr	r3, [r3, #4]
 8014ce4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8014ce6:	2114      	movs	r1, #20
 8014ce8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014cea:	f7f5 fec1 	bl	800aa70 <pbuf_remove_header>
      pbuf_cat(p, r);
 8014cee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014cf0:	6878      	ldr	r0, [r7, #4]
 8014cf2:	f7f6 f811 	bl	800ad18 <pbuf_cat>
      r = iprh->next_pbuf;
 8014cf6:	68fb      	ldr	r3, [r7, #12]
 8014cf8:	681b      	ldr	r3, [r3, #0]
 8014cfa:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8014cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d1ee      	bne.n	8014ce0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8014d02:	4b1e      	ldr	r3, [pc, #120]	; (8014d7c <ip4_reass+0x2b4>)
 8014d04:	681b      	ldr	r3, [r3, #0]
 8014d06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014d08:	429a      	cmp	r2, r3
 8014d0a:	d102      	bne.n	8014d12 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8014d0c:	2300      	movs	r3, #0
 8014d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014d10:	e010      	b.n	8014d34 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014d12:	4b1a      	ldr	r3, [pc, #104]	; (8014d7c <ip4_reass+0x2b4>)
 8014d14:	681b      	ldr	r3, [r3, #0]
 8014d16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014d18:	e007      	b.n	8014d2a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8014d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014d20:	429a      	cmp	r2, r3
 8014d22:	d006      	beq.n	8014d32 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d26:	681b      	ldr	r3, [r3, #0]
 8014d28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d1f4      	bne.n	8014d1a <ip4_reass+0x252>
 8014d30:	e000      	b.n	8014d34 <ip4_reass+0x26c>
          break;
 8014d32:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8014d34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014d36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014d38:	f7ff fd2e 	bl	8014798 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8014d3c:	6878      	ldr	r0, [r7, #4]
 8014d3e:	f7f5 ffab 	bl	800ac98 <pbuf_clen>
 8014d42:	4603      	mov	r3, r0
 8014d44:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8014d46:	4b0c      	ldr	r3, [pc, #48]	; (8014d78 <ip4_reass+0x2b0>)
 8014d48:	881b      	ldrh	r3, [r3, #0]
 8014d4a:	8c3a      	ldrh	r2, [r7, #32]
 8014d4c:	429a      	cmp	r2, r3
 8014d4e:	d906      	bls.n	8014d5e <ip4_reass+0x296>
 8014d50:	4b0b      	ldr	r3, [pc, #44]	; (8014d80 <ip4_reass+0x2b8>)
 8014d52:	f240 229b 	movw	r2, #667	; 0x29b
 8014d56:	490b      	ldr	r1, [pc, #44]	; (8014d84 <ip4_reass+0x2bc>)
 8014d58:	480b      	ldr	r0, [pc, #44]	; (8014d88 <ip4_reass+0x2c0>)
 8014d5a:	f000 fc01 	bl	8015560 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8014d5e:	4b06      	ldr	r3, [pc, #24]	; (8014d78 <ip4_reass+0x2b0>)
 8014d60:	881a      	ldrh	r2, [r3, #0]
 8014d62:	8c3b      	ldrh	r3, [r7, #32]
 8014d64:	1ad3      	subs	r3, r2, r3
 8014d66:	b29a      	uxth	r2, r3
 8014d68:	4b03      	ldr	r3, [pc, #12]	; (8014d78 <ip4_reass+0x2b0>)
 8014d6a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	e038      	b.n	8014de2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8014d70:	2300      	movs	r3, #0
 8014d72:	e036      	b.n	8014de2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8014d74:	bf00      	nop
 8014d76:	e00a      	b.n	8014d8e <ip4_reass+0x2c6>
 8014d78:	2000d504 	.word	0x2000d504
 8014d7c:	2000d500 	.word	0x2000d500
 8014d80:	0801920c 	.word	0x0801920c
 8014d84:	0801937c 	.word	0x0801937c
 8014d88:	08019254 	.word	0x08019254
    goto nullreturn_ipr;
 8014d8c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8014d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d106      	bne.n	8014da2 <ip4_reass+0x2da>
 8014d94:	4b15      	ldr	r3, [pc, #84]	; (8014dec <ip4_reass+0x324>)
 8014d96:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8014d9a:	4915      	ldr	r1, [pc, #84]	; (8014df0 <ip4_reass+0x328>)
 8014d9c:	4815      	ldr	r0, [pc, #84]	; (8014df4 <ip4_reass+0x32c>)
 8014d9e:	f000 fbdf 	bl	8015560 <iprintf>
  if (ipr->p == NULL) {
 8014da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014da4:	685b      	ldr	r3, [r3, #4]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d116      	bne.n	8014dd8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8014daa:	4b13      	ldr	r3, [pc, #76]	; (8014df8 <ip4_reass+0x330>)
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014db0:	429a      	cmp	r2, r3
 8014db2:	d006      	beq.n	8014dc2 <ip4_reass+0x2fa>
 8014db4:	4b0d      	ldr	r3, [pc, #52]	; (8014dec <ip4_reass+0x324>)
 8014db6:	f240 22ab 	movw	r2, #683	; 0x2ab
 8014dba:	4910      	ldr	r1, [pc, #64]	; (8014dfc <ip4_reass+0x334>)
 8014dbc:	480d      	ldr	r0, [pc, #52]	; (8014df4 <ip4_reass+0x32c>)
 8014dbe:	f000 fbcf 	bl	8015560 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8014dc2:	2100      	movs	r1, #0
 8014dc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014dc6:	f7ff fce7 	bl	8014798 <ip_reass_dequeue_datagram>
 8014dca:	e006      	b.n	8014dda <ip4_reass+0x312>
    goto nullreturn;
 8014dcc:	bf00      	nop
 8014dce:	e004      	b.n	8014dda <ip4_reass+0x312>
    goto nullreturn;
 8014dd0:	bf00      	nop
 8014dd2:	e002      	b.n	8014dda <ip4_reass+0x312>
      goto nullreturn;
 8014dd4:	bf00      	nop
 8014dd6:	e000      	b.n	8014dda <ip4_reass+0x312>
  }

nullreturn:
 8014dd8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8014dda:	6878      	ldr	r0, [r7, #4]
 8014ddc:	f7f5 fece 	bl	800ab7c <pbuf_free>
  return NULL;
 8014de0:	2300      	movs	r3, #0
}
 8014de2:	4618      	mov	r0, r3
 8014de4:	3738      	adds	r7, #56	; 0x38
 8014de6:	46bd      	mov	sp, r7
 8014de8:	bd80      	pop	{r7, pc}
 8014dea:	bf00      	nop
 8014dec:	0801920c 	.word	0x0801920c
 8014df0:	08019398 	.word	0x08019398
 8014df4:	08019254 	.word	0x08019254
 8014df8:	2000d500 	.word	0x2000d500
 8014dfc:	080193a4 	.word	0x080193a4

08014e00 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8014e00:	b580      	push	{r7, lr}
 8014e02:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8014e04:	2005      	movs	r0, #5
 8014e06:	f7f4 ff93 	bl	8009d30 <memp_malloc>
 8014e0a:	4603      	mov	r3, r0
}
 8014e0c:	4618      	mov	r0, r3
 8014e0e:	bd80      	pop	{r7, pc}

08014e10 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8014e10:	b580      	push	{r7, lr}
 8014e12:	b082      	sub	sp, #8
 8014e14:	af00      	add	r7, sp, #0
 8014e16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d106      	bne.n	8014e2c <ip_frag_free_pbuf_custom_ref+0x1c>
 8014e1e:	4b07      	ldr	r3, [pc, #28]	; (8014e3c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8014e20:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8014e24:	4906      	ldr	r1, [pc, #24]	; (8014e40 <ip_frag_free_pbuf_custom_ref+0x30>)
 8014e26:	4807      	ldr	r0, [pc, #28]	; (8014e44 <ip_frag_free_pbuf_custom_ref+0x34>)
 8014e28:	f000 fb9a 	bl	8015560 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8014e2c:	6879      	ldr	r1, [r7, #4]
 8014e2e:	2005      	movs	r0, #5
 8014e30:	f7f4 fff4 	bl	8009e1c <memp_free>
}
 8014e34:	bf00      	nop
 8014e36:	3708      	adds	r7, #8
 8014e38:	46bd      	mov	sp, r7
 8014e3a:	bd80      	pop	{r7, pc}
 8014e3c:	0801920c 	.word	0x0801920c
 8014e40:	080193c4 	.word	0x080193c4
 8014e44:	08019254 	.word	0x08019254

08014e48 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014e48:	b580      	push	{r7, lr}
 8014e4a:	b084      	sub	sp, #16
 8014e4c:	af00      	add	r7, sp, #0
 8014e4e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8014e54:	68fb      	ldr	r3, [r7, #12]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d106      	bne.n	8014e68 <ipfrag_free_pbuf_custom+0x20>
 8014e5a:	4b11      	ldr	r3, [pc, #68]	; (8014ea0 <ipfrag_free_pbuf_custom+0x58>)
 8014e5c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8014e60:	4910      	ldr	r1, [pc, #64]	; (8014ea4 <ipfrag_free_pbuf_custom+0x5c>)
 8014e62:	4811      	ldr	r0, [pc, #68]	; (8014ea8 <ipfrag_free_pbuf_custom+0x60>)
 8014e64:	f000 fb7c 	bl	8015560 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014e68:	68fa      	ldr	r2, [r7, #12]
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	429a      	cmp	r2, r3
 8014e6e:	d006      	beq.n	8014e7e <ipfrag_free_pbuf_custom+0x36>
 8014e70:	4b0b      	ldr	r3, [pc, #44]	; (8014ea0 <ipfrag_free_pbuf_custom+0x58>)
 8014e72:	f240 22cf 	movw	r2, #719	; 0x2cf
 8014e76:	490d      	ldr	r1, [pc, #52]	; (8014eac <ipfrag_free_pbuf_custom+0x64>)
 8014e78:	480b      	ldr	r0, [pc, #44]	; (8014ea8 <ipfrag_free_pbuf_custom+0x60>)
 8014e7a:	f000 fb71 	bl	8015560 <iprintf>
  if (pcr->original != NULL) {
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	695b      	ldr	r3, [r3, #20]
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d004      	beq.n	8014e90 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8014e86:	68fb      	ldr	r3, [r7, #12]
 8014e88:	695b      	ldr	r3, [r3, #20]
 8014e8a:	4618      	mov	r0, r3
 8014e8c:	f7f5 fe76 	bl	800ab7c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8014e90:	68f8      	ldr	r0, [r7, #12]
 8014e92:	f7ff ffbd 	bl	8014e10 <ip_frag_free_pbuf_custom_ref>
}
 8014e96:	bf00      	nop
 8014e98:	3710      	adds	r7, #16
 8014e9a:	46bd      	mov	sp, r7
 8014e9c:	bd80      	pop	{r7, pc}
 8014e9e:	bf00      	nop
 8014ea0:	0801920c 	.word	0x0801920c
 8014ea4:	080193d0 	.word	0x080193d0
 8014ea8:	08019254 	.word	0x08019254
 8014eac:	080193dc 	.word	0x080193dc

08014eb0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8014eb0:	b580      	push	{r7, lr}
 8014eb2:	b094      	sub	sp, #80	; 0x50
 8014eb4:	af02      	add	r7, sp, #8
 8014eb6:	60f8      	str	r0, [r7, #12]
 8014eb8:	60b9      	str	r1, [r7, #8]
 8014eba:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8014ebc:	2300      	movs	r3, #0
 8014ebe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8014ec2:	68bb      	ldr	r3, [r7, #8]
 8014ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014ec6:	3b14      	subs	r3, #20
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	da00      	bge.n	8014ece <ip4_frag+0x1e>
 8014ecc:	3307      	adds	r3, #7
 8014ece:	10db      	asrs	r3, r3, #3
 8014ed0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8014ed2:	2314      	movs	r3, #20
 8014ed4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	685b      	ldr	r3, [r3, #4]
 8014eda:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8014edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ede:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8014ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ee2:	781b      	ldrb	r3, [r3, #0]
 8014ee4:	f003 030f 	and.w	r3, r3, #15
 8014ee8:	b2db      	uxtb	r3, r3
 8014eea:	009b      	lsls	r3, r3, #2
 8014eec:	b2db      	uxtb	r3, r3
 8014eee:	2b14      	cmp	r3, #20
 8014ef0:	d002      	beq.n	8014ef8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8014ef2:	f06f 0305 	mvn.w	r3, #5
 8014ef6:	e110      	b.n	801511a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	895b      	ldrh	r3, [r3, #10]
 8014efc:	2b13      	cmp	r3, #19
 8014efe:	d809      	bhi.n	8014f14 <ip4_frag+0x64>
 8014f00:	4b88      	ldr	r3, [pc, #544]	; (8015124 <ip4_frag+0x274>)
 8014f02:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8014f06:	4988      	ldr	r1, [pc, #544]	; (8015128 <ip4_frag+0x278>)
 8014f08:	4888      	ldr	r0, [pc, #544]	; (801512c <ip4_frag+0x27c>)
 8014f0a:	f000 fb29 	bl	8015560 <iprintf>
 8014f0e:	f06f 0305 	mvn.w	r3, #5
 8014f12:	e102      	b.n	801511a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8014f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f16:	88db      	ldrh	r3, [r3, #6]
 8014f18:	b29b      	uxth	r3, r3
 8014f1a:	4618      	mov	r0, r3
 8014f1c:	f7f4 fa30 	bl	8009380 <lwip_htons>
 8014f20:	4603      	mov	r3, r0
 8014f22:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8014f24:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014f26:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014f2a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8014f2e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014f30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014f34:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8014f36:	68fb      	ldr	r3, [r7, #12]
 8014f38:	891b      	ldrh	r3, [r3, #8]
 8014f3a:	3b14      	subs	r3, #20
 8014f3c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8014f40:	e0e1      	b.n	8015106 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8014f42:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014f44:	00db      	lsls	r3, r3, #3
 8014f46:	b29b      	uxth	r3, r3
 8014f48:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014f4c:	4293      	cmp	r3, r2
 8014f4e:	bf28      	it	cs
 8014f50:	4613      	movcs	r3, r2
 8014f52:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8014f54:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014f58:	2114      	movs	r1, #20
 8014f5a:	200e      	movs	r0, #14
 8014f5c:	f7f5 fb2a 	bl	800a5b4 <pbuf_alloc>
 8014f60:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8014f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	f000 80d5 	beq.w	8015114 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8014f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f6c:	895b      	ldrh	r3, [r3, #10]
 8014f6e:	2b13      	cmp	r3, #19
 8014f70:	d806      	bhi.n	8014f80 <ip4_frag+0xd0>
 8014f72:	4b6c      	ldr	r3, [pc, #432]	; (8015124 <ip4_frag+0x274>)
 8014f74:	f44f 7249 	mov.w	r2, #804	; 0x324
 8014f78:	496d      	ldr	r1, [pc, #436]	; (8015130 <ip4_frag+0x280>)
 8014f7a:	486c      	ldr	r0, [pc, #432]	; (801512c <ip4_frag+0x27c>)
 8014f7c:	f000 faf0 	bl	8015560 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8014f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f82:	685b      	ldr	r3, [r3, #4]
 8014f84:	2214      	movs	r2, #20
 8014f86:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014f88:	4618      	mov	r0, r3
 8014f8a:	f000 fad3 	bl	8015534 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8014f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f90:	685b      	ldr	r3, [r3, #4]
 8014f92:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8014f94:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014f96:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8014f9a:	e064      	b.n	8015066 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	895a      	ldrh	r2, [r3, #10]
 8014fa0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014fa2:	1ad3      	subs	r3, r2, r3
 8014fa4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	895b      	ldrh	r3, [r3, #10]
 8014faa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014fac:	429a      	cmp	r2, r3
 8014fae:	d906      	bls.n	8014fbe <ip4_frag+0x10e>
 8014fb0:	4b5c      	ldr	r3, [pc, #368]	; (8015124 <ip4_frag+0x274>)
 8014fb2:	f240 322d 	movw	r2, #813	; 0x32d
 8014fb6:	495f      	ldr	r1, [pc, #380]	; (8015134 <ip4_frag+0x284>)
 8014fb8:	485c      	ldr	r0, [pc, #368]	; (801512c <ip4_frag+0x27c>)
 8014fba:	f000 fad1 	bl	8015560 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8014fbe:	8bfa      	ldrh	r2, [r7, #30]
 8014fc0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014fc4:	4293      	cmp	r3, r2
 8014fc6:	bf28      	it	cs
 8014fc8:	4613      	movcs	r3, r2
 8014fca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8014fce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d105      	bne.n	8014fe2 <ip4_frag+0x132>
        poff = 0;
 8014fd6:	2300      	movs	r3, #0
 8014fd8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	60fb      	str	r3, [r7, #12]
        continue;
 8014fe0:	e041      	b.n	8015066 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8014fe2:	f7ff ff0d 	bl	8014e00 <ip_frag_alloc_pbuf_custom_ref>
 8014fe6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8014fe8:	69bb      	ldr	r3, [r7, #24]
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d103      	bne.n	8014ff6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8014fee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014ff0:	f7f5 fdc4 	bl	800ab7c <pbuf_free>
        goto memerr;
 8014ff4:	e08f      	b.n	8015116 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014ff6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014ffc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014ffe:	4413      	add	r3, r2
 8015000:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8015004:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8015008:	9201      	str	r2, [sp, #4]
 801500a:	9300      	str	r3, [sp, #0]
 801500c:	4603      	mov	r3, r0
 801500e:	2241      	movs	r2, #65	; 0x41
 8015010:	2000      	movs	r0, #0
 8015012:	f7f5 fbf9 	bl	800a808 <pbuf_alloced_custom>
 8015016:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8015018:	697b      	ldr	r3, [r7, #20]
 801501a:	2b00      	cmp	r3, #0
 801501c:	d106      	bne.n	801502c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801501e:	69b8      	ldr	r0, [r7, #24]
 8015020:	f7ff fef6 	bl	8014e10 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015024:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015026:	f7f5 fda9 	bl	800ab7c <pbuf_free>
        goto memerr;
 801502a:	e074      	b.n	8015116 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801502c:	68f8      	ldr	r0, [r7, #12]
 801502e:	f7f5 fe4b 	bl	800acc8 <pbuf_ref>
      pcr->original = p;
 8015032:	69bb      	ldr	r3, [r7, #24]
 8015034:	68fa      	ldr	r2, [r7, #12]
 8015036:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015038:	69bb      	ldr	r3, [r7, #24]
 801503a:	4a3f      	ldr	r2, [pc, #252]	; (8015138 <ip4_frag+0x288>)
 801503c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801503e:	6979      	ldr	r1, [r7, #20]
 8015040:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015042:	f7f5 fe69 	bl	800ad18 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8015046:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801504a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801504e:	1ad3      	subs	r3, r2, r3
 8015050:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8015054:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015058:	2b00      	cmp	r3, #0
 801505a:	d004      	beq.n	8015066 <ip4_frag+0x1b6>
        poff = 0;
 801505c:	2300      	movs	r3, #0
 801505e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8015066:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801506a:	2b00      	cmp	r3, #0
 801506c:	d196      	bne.n	8014f9c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801506e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015070:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015074:	4413      	add	r3, r2
 8015076:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8015078:	68bb      	ldr	r3, [r7, #8]
 801507a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801507c:	f1a3 0213 	sub.w	r2, r3, #19
 8015080:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015084:	429a      	cmp	r2, r3
 8015086:	bfcc      	ite	gt
 8015088:	2301      	movgt	r3, #1
 801508a:	2300      	movle	r3, #0
 801508c:	b2db      	uxtb	r3, r3
 801508e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8015090:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015094:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015098:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801509a:	6a3b      	ldr	r3, [r7, #32]
 801509c:	2b00      	cmp	r3, #0
 801509e:	d002      	beq.n	80150a6 <ip4_frag+0x1f6>
 80150a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d003      	beq.n	80150ae <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80150a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80150a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80150ac:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80150ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80150b0:	4618      	mov	r0, r3
 80150b2:	f7f4 f965 	bl	8009380 <lwip_htons>
 80150b6:	4603      	mov	r3, r0
 80150b8:	461a      	mov	r2, r3
 80150ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150bc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80150be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80150c0:	3314      	adds	r3, #20
 80150c2:	b29b      	uxth	r3, r3
 80150c4:	4618      	mov	r0, r3
 80150c6:	f7f4 f95b 	bl	8009380 <lwip_htons>
 80150ca:	4603      	mov	r3, r0
 80150cc:	461a      	mov	r2, r3
 80150ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150d0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80150d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150d4:	2200      	movs	r2, #0
 80150d6:	729a      	strb	r2, [r3, #10]
 80150d8:	2200      	movs	r2, #0
 80150da:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80150dc:	68bb      	ldr	r3, [r7, #8]
 80150de:	695b      	ldr	r3, [r3, #20]
 80150e0:	687a      	ldr	r2, [r7, #4]
 80150e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80150e4:	68b8      	ldr	r0, [r7, #8]
 80150e6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80150e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80150ea:	f7f5 fd47 	bl	800ab7c <pbuf_free>
    left = (u16_t)(left - fragsize);
 80150ee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80150f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80150f4:	1ad3      	subs	r3, r2, r3
 80150f6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80150fa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80150fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015100:	4413      	add	r3, r2
 8015102:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8015106:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801510a:	2b00      	cmp	r3, #0
 801510c:	f47f af19 	bne.w	8014f42 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8015110:	2300      	movs	r3, #0
 8015112:	e002      	b.n	801511a <ip4_frag+0x26a>
      goto memerr;
 8015114:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8015116:	f04f 33ff 	mov.w	r3, #4294967295
}
 801511a:	4618      	mov	r0, r3
 801511c:	3748      	adds	r7, #72	; 0x48
 801511e:	46bd      	mov	sp, r7
 8015120:	bd80      	pop	{r7, pc}
 8015122:	bf00      	nop
 8015124:	0801920c 	.word	0x0801920c
 8015128:	080193e8 	.word	0x080193e8
 801512c:	08019254 	.word	0x08019254
 8015130:	08019404 	.word	0x08019404
 8015134:	08019424 	.word	0x08019424
 8015138:	08014e49 	.word	0x08014e49

0801513c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801513c:	b580      	push	{r7, lr}
 801513e:	b086      	sub	sp, #24
 8015140:	af00      	add	r7, sp, #0
 8015142:	6078      	str	r0, [r7, #4]
 8015144:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8015146:	230e      	movs	r3, #14
 8015148:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	895b      	ldrh	r3, [r3, #10]
 801514e:	2b0e      	cmp	r3, #14
 8015150:	d96e      	bls.n	8015230 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	7bdb      	ldrb	r3, [r3, #15]
 8015156:	2b00      	cmp	r3, #0
 8015158:	d106      	bne.n	8015168 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801515a:	683b      	ldr	r3, [r7, #0]
 801515c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015160:	3301      	adds	r3, #1
 8015162:	b2da      	uxtb	r2, r3
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	685b      	ldr	r3, [r3, #4]
 801516c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801516e:	693b      	ldr	r3, [r7, #16]
 8015170:	7b1a      	ldrb	r2, [r3, #12]
 8015172:	7b5b      	ldrb	r3, [r3, #13]
 8015174:	021b      	lsls	r3, r3, #8
 8015176:	4313      	orrs	r3, r2
 8015178:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801517a:	693b      	ldr	r3, [r7, #16]
 801517c:	781b      	ldrb	r3, [r3, #0]
 801517e:	f003 0301 	and.w	r3, r3, #1
 8015182:	2b00      	cmp	r3, #0
 8015184:	d023      	beq.n	80151ce <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8015186:	693b      	ldr	r3, [r7, #16]
 8015188:	781b      	ldrb	r3, [r3, #0]
 801518a:	2b01      	cmp	r3, #1
 801518c:	d10f      	bne.n	80151ae <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801518e:	693b      	ldr	r3, [r7, #16]
 8015190:	785b      	ldrb	r3, [r3, #1]
 8015192:	2b00      	cmp	r3, #0
 8015194:	d11b      	bne.n	80151ce <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8015196:	693b      	ldr	r3, [r7, #16]
 8015198:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801519a:	2b5e      	cmp	r3, #94	; 0x5e
 801519c:	d117      	bne.n	80151ce <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	7b5b      	ldrb	r3, [r3, #13]
 80151a2:	f043 0310 	orr.w	r3, r3, #16
 80151a6:	b2da      	uxtb	r2, r3
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	735a      	strb	r2, [r3, #13]
 80151ac:	e00f      	b.n	80151ce <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80151ae:	693b      	ldr	r3, [r7, #16]
 80151b0:	2206      	movs	r2, #6
 80151b2:	4928      	ldr	r1, [pc, #160]	; (8015254 <ethernet_input+0x118>)
 80151b4:	4618      	mov	r0, r3
 80151b6:	f000 f9ad 	bl	8015514 <memcmp>
 80151ba:	4603      	mov	r3, r0
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d106      	bne.n	80151ce <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	7b5b      	ldrb	r3, [r3, #13]
 80151c4:	f043 0308 	orr.w	r3, r3, #8
 80151c8:	b2da      	uxtb	r2, r3
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80151ce:	89fb      	ldrh	r3, [r7, #14]
 80151d0:	2b08      	cmp	r3, #8
 80151d2:	d003      	beq.n	80151dc <ethernet_input+0xa0>
 80151d4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80151d8:	d014      	beq.n	8015204 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80151da:	e032      	b.n	8015242 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80151dc:	683b      	ldr	r3, [r7, #0]
 80151de:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80151e2:	f003 0308 	and.w	r3, r3, #8
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	d024      	beq.n	8015234 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80151ea:	8afb      	ldrh	r3, [r7, #22]
 80151ec:	4619      	mov	r1, r3
 80151ee:	6878      	ldr	r0, [r7, #4]
 80151f0:	f7f5 fc3e 	bl	800aa70 <pbuf_remove_header>
 80151f4:	4603      	mov	r3, r0
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d11e      	bne.n	8015238 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80151fa:	6839      	ldr	r1, [r7, #0]
 80151fc:	6878      	ldr	r0, [r7, #4]
 80151fe:	f7fe ff03 	bl	8014008 <ip4_input>
      break;
 8015202:	e013      	b.n	801522c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015204:	683b      	ldr	r3, [r7, #0]
 8015206:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801520a:	f003 0308 	and.w	r3, r3, #8
 801520e:	2b00      	cmp	r3, #0
 8015210:	d014      	beq.n	801523c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015212:	8afb      	ldrh	r3, [r7, #22]
 8015214:	4619      	mov	r1, r3
 8015216:	6878      	ldr	r0, [r7, #4]
 8015218:	f7f5 fc2a 	bl	800aa70 <pbuf_remove_header>
 801521c:	4603      	mov	r3, r0
 801521e:	2b00      	cmp	r3, #0
 8015220:	d10e      	bne.n	8015240 <ethernet_input+0x104>
        etharp_input(p, netif);
 8015222:	6839      	ldr	r1, [r7, #0]
 8015224:	6878      	ldr	r0, [r7, #4]
 8015226:	f7fe f89f 	bl	8013368 <etharp_input>
      break;
 801522a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801522c:	2300      	movs	r3, #0
 801522e:	e00c      	b.n	801524a <ethernet_input+0x10e>
    goto free_and_return;
 8015230:	bf00      	nop
 8015232:	e006      	b.n	8015242 <ethernet_input+0x106>
        goto free_and_return;
 8015234:	bf00      	nop
 8015236:	e004      	b.n	8015242 <ethernet_input+0x106>
        goto free_and_return;
 8015238:	bf00      	nop
 801523a:	e002      	b.n	8015242 <ethernet_input+0x106>
        goto free_and_return;
 801523c:	bf00      	nop
 801523e:	e000      	b.n	8015242 <ethernet_input+0x106>
        goto free_and_return;
 8015240:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8015242:	6878      	ldr	r0, [r7, #4]
 8015244:	f7f5 fc9a 	bl	800ab7c <pbuf_free>
  return ERR_OK;
 8015248:	2300      	movs	r3, #0
}
 801524a:	4618      	mov	r0, r3
 801524c:	3718      	adds	r7, #24
 801524e:	46bd      	mov	sp, r7
 8015250:	bd80      	pop	{r7, pc}
 8015252:	bf00      	nop
 8015254:	08019638 	.word	0x08019638

08015258 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8015258:	b580      	push	{r7, lr}
 801525a:	b086      	sub	sp, #24
 801525c:	af00      	add	r7, sp, #0
 801525e:	60f8      	str	r0, [r7, #12]
 8015260:	60b9      	str	r1, [r7, #8]
 8015262:	607a      	str	r2, [r7, #4]
 8015264:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8015266:	8c3b      	ldrh	r3, [r7, #32]
 8015268:	4618      	mov	r0, r3
 801526a:	f7f4 f889 	bl	8009380 <lwip_htons>
 801526e:	4603      	mov	r3, r0
 8015270:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8015272:	210e      	movs	r1, #14
 8015274:	68b8      	ldr	r0, [r7, #8]
 8015276:	f7f5 fbeb 	bl	800aa50 <pbuf_add_header>
 801527a:	4603      	mov	r3, r0
 801527c:	2b00      	cmp	r3, #0
 801527e:	d125      	bne.n	80152cc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8015280:	68bb      	ldr	r3, [r7, #8]
 8015282:	685b      	ldr	r3, [r3, #4]
 8015284:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8015286:	693b      	ldr	r3, [r7, #16]
 8015288:	8afa      	ldrh	r2, [r7, #22]
 801528a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801528c:	693b      	ldr	r3, [r7, #16]
 801528e:	2206      	movs	r2, #6
 8015290:	6839      	ldr	r1, [r7, #0]
 8015292:	4618      	mov	r0, r3
 8015294:	f000 f94e 	bl	8015534 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8015298:	693b      	ldr	r3, [r7, #16]
 801529a:	3306      	adds	r3, #6
 801529c:	2206      	movs	r2, #6
 801529e:	6879      	ldr	r1, [r7, #4]
 80152a0:	4618      	mov	r0, r3
 80152a2:	f000 f947 	bl	8015534 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80152ac:	2b06      	cmp	r3, #6
 80152ae:	d006      	beq.n	80152be <ethernet_output+0x66>
 80152b0:	4b0a      	ldr	r3, [pc, #40]	; (80152dc <ethernet_output+0x84>)
 80152b2:	f44f 7299 	mov.w	r2, #306	; 0x132
 80152b6:	490a      	ldr	r1, [pc, #40]	; (80152e0 <ethernet_output+0x88>)
 80152b8:	480a      	ldr	r0, [pc, #40]	; (80152e4 <ethernet_output+0x8c>)
 80152ba:	f000 f951 	bl	8015560 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	699b      	ldr	r3, [r3, #24]
 80152c2:	68b9      	ldr	r1, [r7, #8]
 80152c4:	68f8      	ldr	r0, [r7, #12]
 80152c6:	4798      	blx	r3
 80152c8:	4603      	mov	r3, r0
 80152ca:	e002      	b.n	80152d2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80152cc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80152ce:	f06f 0301 	mvn.w	r3, #1
}
 80152d2:	4618      	mov	r0, r3
 80152d4:	3718      	adds	r7, #24
 80152d6:	46bd      	mov	sp, r7
 80152d8:	bd80      	pop	{r7, pc}
 80152da:	bf00      	nop
 80152dc:	08019434 	.word	0x08019434
 80152e0:	0801946c 	.word	0x0801946c
 80152e4:	080194a0 	.word	0x080194a0

080152e8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80152e8:	b580      	push	{r7, lr}
 80152ea:	b082      	sub	sp, #8
 80152ec:	af00      	add	r7, sp, #0
 80152ee:	6078      	str	r0, [r7, #4]
 80152f0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 80152f2:	683b      	ldr	r3, [r7, #0]
 80152f4:	2200      	movs	r2, #0
 80152f6:	2104      	movs	r1, #4
 80152f8:	4618      	mov	r0, r3
 80152fa:	f7f0 fc1f 	bl	8005b3c <osMessageQueueNew>
 80152fe:	4602      	mov	r2, r0
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	681b      	ldr	r3, [r3, #0]
 8015308:	2b00      	cmp	r3, #0
 801530a:	d102      	bne.n	8015312 <sys_mbox_new+0x2a>
    return ERR_MEM;
 801530c:	f04f 33ff 	mov.w	r3, #4294967295
 8015310:	e000      	b.n	8015314 <sys_mbox_new+0x2c>

  return ERR_OK;
 8015312:	2300      	movs	r3, #0
}
 8015314:	4618      	mov	r0, r3
 8015316:	3708      	adds	r7, #8
 8015318:	46bd      	mov	sp, r7
 801531a:	bd80      	pop	{r7, pc}

0801531c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801531c:	b580      	push	{r7, lr}
 801531e:	b084      	sub	sp, #16
 8015320:	af00      	add	r7, sp, #0
 8015322:	6078      	str	r0, [r7, #4]
 8015324:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	6818      	ldr	r0, [r3, #0]
 801532a:	4639      	mov	r1, r7
 801532c:	2300      	movs	r3, #0
 801532e:	2200      	movs	r2, #0
 8015330:	f7f0 fc78 	bl	8005c24 <osMessageQueuePut>
 8015334:	4603      	mov	r3, r0
 8015336:	2b00      	cmp	r3, #0
 8015338:	d102      	bne.n	8015340 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801533a:	2300      	movs	r3, #0
 801533c:	73fb      	strb	r3, [r7, #15]
 801533e:	e001      	b.n	8015344 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8015340:	23ff      	movs	r3, #255	; 0xff
 8015342:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8015344:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015348:	4618      	mov	r0, r3
 801534a:	3710      	adds	r7, #16
 801534c:	46bd      	mov	sp, r7
 801534e:	bd80      	pop	{r7, pc}

08015350 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8015350:	b580      	push	{r7, lr}
 8015352:	b086      	sub	sp, #24
 8015354:	af00      	add	r7, sp, #0
 8015356:	60f8      	str	r0, [r7, #12]
 8015358:	60b9      	str	r1, [r7, #8]
 801535a:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801535c:	f7f0 f8fe 	bl	800555c <osKernelGetTickCount>
 8015360:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	2b00      	cmp	r3, #0
 8015366:	d013      	beq.n	8015390 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	6818      	ldr	r0, [r3, #0]
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	2200      	movs	r2, #0
 8015370:	68b9      	ldr	r1, [r7, #8]
 8015372:	f7f0 fcb7 	bl	8005ce4 <osMessageQueueGet>
 8015376:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8015378:	693b      	ldr	r3, [r7, #16]
 801537a:	2b00      	cmp	r3, #0
 801537c:	d105      	bne.n	801538a <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801537e:	f7f0 f8ed 	bl	800555c <osKernelGetTickCount>
 8015382:	4602      	mov	r2, r0
 8015384:	697b      	ldr	r3, [r7, #20]
 8015386:	1ad3      	subs	r3, r2, r3
 8015388:	e00f      	b.n	80153aa <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801538a:	f04f 33ff 	mov.w	r3, #4294967295
 801538e:	e00c      	b.n	80153aa <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	6818      	ldr	r0, [r3, #0]
 8015394:	f04f 33ff 	mov.w	r3, #4294967295
 8015398:	2200      	movs	r2, #0
 801539a:	68b9      	ldr	r1, [r7, #8]
 801539c:	f7f0 fca2 	bl	8005ce4 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 80153a0:	f7f0 f8dc 	bl	800555c <osKernelGetTickCount>
 80153a4:	4602      	mov	r2, r0
 80153a6:	697b      	ldr	r3, [r7, #20]
 80153a8:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80153aa:	4618      	mov	r0, r3
 80153ac:	3718      	adds	r7, #24
 80153ae:	46bd      	mov	sp, r7
 80153b0:	bd80      	pop	{r7, pc}

080153b2 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80153b2:	b480      	push	{r7}
 80153b4:	b083      	sub	sp, #12
 80153b6:	af00      	add	r7, sp, #0
 80153b8:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	681b      	ldr	r3, [r3, #0]
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d101      	bne.n	80153c6 <sys_mbox_valid+0x14>
    return 0;
 80153c2:	2300      	movs	r3, #0
 80153c4:	e000      	b.n	80153c8 <sys_mbox_valid+0x16>
  else
    return 1;
 80153c6:	2301      	movs	r3, #1
}
 80153c8:	4618      	mov	r0, r3
 80153ca:	370c      	adds	r7, #12
 80153cc:	46bd      	mov	sp, r7
 80153ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d2:	4770      	bx	lr

080153d4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80153d4:	b580      	push	{r7, lr}
 80153d6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 80153d8:	2000      	movs	r0, #0
 80153da:	f7f0 f981 	bl	80056e0 <osMutexNew>
 80153de:	4603      	mov	r3, r0
 80153e0:	4a01      	ldr	r2, [pc, #4]	; (80153e8 <sys_init+0x14>)
 80153e2:	6013      	str	r3, [r2, #0]
#endif
}
 80153e4:	bf00      	nop
 80153e6:	bd80      	pop	{r7, pc}
 80153e8:	2000d50c 	.word	0x2000d50c

080153ec <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80153ec:	b580      	push	{r7, lr}
 80153ee:	b082      	sub	sp, #8
 80153f0:	af00      	add	r7, sp, #0
 80153f2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 80153f4:	2000      	movs	r0, #0
 80153f6:	f7f0 f973 	bl	80056e0 <osMutexNew>
 80153fa:	4602      	mov	r2, r0
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	681b      	ldr	r3, [r3, #0]
 8015404:	2b00      	cmp	r3, #0
 8015406:	d102      	bne.n	801540e <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8015408:	f04f 33ff 	mov.w	r3, #4294967295
 801540c:	e000      	b.n	8015410 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801540e:	2300      	movs	r3, #0
}
 8015410:	4618      	mov	r0, r3
 8015412:	3708      	adds	r7, #8
 8015414:	46bd      	mov	sp, r7
 8015416:	bd80      	pop	{r7, pc}

08015418 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8015418:	b580      	push	{r7, lr}
 801541a:	b082      	sub	sp, #8
 801541c:	af00      	add	r7, sp, #0
 801541e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	f04f 31ff 	mov.w	r1, #4294967295
 8015428:	4618      	mov	r0, r3
 801542a:	f7f0 f9df 	bl	80057ec <osMutexAcquire>
#endif
}
 801542e:	bf00      	nop
 8015430:	3708      	adds	r7, #8
 8015432:	46bd      	mov	sp, r7
 8015434:	bd80      	pop	{r7, pc}

08015436 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8015436:	b580      	push	{r7, lr}
 8015438:	b082      	sub	sp, #8
 801543a:	af00      	add	r7, sp, #0
 801543c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	681b      	ldr	r3, [r3, #0]
 8015442:	4618      	mov	r0, r3
 8015444:	f7f0 fa1d 	bl	8005882 <osMutexRelease>
}
 8015448:	bf00      	nop
 801544a:	3708      	adds	r7, #8
 801544c:	46bd      	mov	sp, r7
 801544e:	bd80      	pop	{r7, pc}

08015450 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8015450:	b580      	push	{r7, lr}
 8015452:	b08e      	sub	sp, #56	; 0x38
 8015454:	af00      	add	r7, sp, #0
 8015456:	60f8      	str	r0, [r7, #12]
 8015458:	60b9      	str	r1, [r7, #8]
 801545a:	607a      	str	r2, [r7, #4]
 801545c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801545e:	f107 0314 	add.w	r3, r7, #20
 8015462:	2224      	movs	r2, #36	; 0x24
 8015464:	2100      	movs	r1, #0
 8015466:	4618      	mov	r0, r3
 8015468:	f000 f872 	bl	8015550 <memset>
 801546c:	68fb      	ldr	r3, [r7, #12]
 801546e:	617b      	str	r3, [r7, #20]
 8015470:	683b      	ldr	r3, [r7, #0]
 8015472:	62bb      	str	r3, [r7, #40]	; 0x28
 8015474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015476:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8015478:	f107 0314 	add.w	r3, r7, #20
 801547c:	461a      	mov	r2, r3
 801547e:	6879      	ldr	r1, [r7, #4]
 8015480:	68b8      	ldr	r0, [r7, #8]
 8015482:	f7f0 f880 	bl	8005586 <osThreadNew>
 8015486:	4603      	mov	r3, r0
#endif
}
 8015488:	4618      	mov	r0, r3
 801548a:	3738      	adds	r7, #56	; 0x38
 801548c:	46bd      	mov	sp, r7
 801548e:	bd80      	pop	{r7, pc}

08015490 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8015490:	b580      	push	{r7, lr}
 8015492:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8015494:	4b04      	ldr	r3, [pc, #16]	; (80154a8 <sys_arch_protect+0x18>)
 8015496:	681b      	ldr	r3, [r3, #0]
 8015498:	f04f 31ff 	mov.w	r1, #4294967295
 801549c:	4618      	mov	r0, r3
 801549e:	f7f0 f9a5 	bl	80057ec <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 80154a2:	2301      	movs	r3, #1
}
 80154a4:	4618      	mov	r0, r3
 80154a6:	bd80      	pop	{r7, pc}
 80154a8:	2000d50c 	.word	0x2000d50c

080154ac <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80154ac:	b580      	push	{r7, lr}
 80154ae:	b082      	sub	sp, #8
 80154b0:	af00      	add	r7, sp, #0
 80154b2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80154b4:	4b04      	ldr	r3, [pc, #16]	; (80154c8 <sys_arch_unprotect+0x1c>)
 80154b6:	681b      	ldr	r3, [r3, #0]
 80154b8:	4618      	mov	r0, r3
 80154ba:	f7f0 f9e2 	bl	8005882 <osMutexRelease>
}
 80154be:	bf00      	nop
 80154c0:	3708      	adds	r7, #8
 80154c2:	46bd      	mov	sp, r7
 80154c4:	bd80      	pop	{r7, pc}
 80154c6:	bf00      	nop
 80154c8:	2000d50c 	.word	0x2000d50c

080154cc <__libc_init_array>:
 80154cc:	b570      	push	{r4, r5, r6, lr}
 80154ce:	4d0d      	ldr	r5, [pc, #52]	; (8015504 <__libc_init_array+0x38>)
 80154d0:	4c0d      	ldr	r4, [pc, #52]	; (8015508 <__libc_init_array+0x3c>)
 80154d2:	1b64      	subs	r4, r4, r5
 80154d4:	10a4      	asrs	r4, r4, #2
 80154d6:	2600      	movs	r6, #0
 80154d8:	42a6      	cmp	r6, r4
 80154da:	d109      	bne.n	80154f0 <__libc_init_array+0x24>
 80154dc:	4d0b      	ldr	r5, [pc, #44]	; (801550c <__libc_init_array+0x40>)
 80154de:	4c0c      	ldr	r4, [pc, #48]	; (8015510 <__libc_init_array+0x44>)
 80154e0:	f001 f88e 	bl	8016600 <_init>
 80154e4:	1b64      	subs	r4, r4, r5
 80154e6:	10a4      	asrs	r4, r4, #2
 80154e8:	2600      	movs	r6, #0
 80154ea:	42a6      	cmp	r6, r4
 80154ec:	d105      	bne.n	80154fa <__libc_init_array+0x2e>
 80154ee:	bd70      	pop	{r4, r5, r6, pc}
 80154f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80154f4:	4798      	blx	r3
 80154f6:	3601      	adds	r6, #1
 80154f8:	e7ee      	b.n	80154d8 <__libc_init_array+0xc>
 80154fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80154fe:	4798      	blx	r3
 8015500:	3601      	adds	r6, #1
 8015502:	e7f2      	b.n	80154ea <__libc_init_array+0x1e>
 8015504:	08019798 	.word	0x08019798
 8015508:	08019798 	.word	0x08019798
 801550c:	08019798 	.word	0x08019798
 8015510:	0801979c 	.word	0x0801979c

08015514 <memcmp>:
 8015514:	b510      	push	{r4, lr}
 8015516:	3901      	subs	r1, #1
 8015518:	4402      	add	r2, r0
 801551a:	4290      	cmp	r0, r2
 801551c:	d101      	bne.n	8015522 <memcmp+0xe>
 801551e:	2000      	movs	r0, #0
 8015520:	e005      	b.n	801552e <memcmp+0x1a>
 8015522:	7803      	ldrb	r3, [r0, #0]
 8015524:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015528:	42a3      	cmp	r3, r4
 801552a:	d001      	beq.n	8015530 <memcmp+0x1c>
 801552c:	1b18      	subs	r0, r3, r4
 801552e:	bd10      	pop	{r4, pc}
 8015530:	3001      	adds	r0, #1
 8015532:	e7f2      	b.n	801551a <memcmp+0x6>

08015534 <memcpy>:
 8015534:	440a      	add	r2, r1
 8015536:	4291      	cmp	r1, r2
 8015538:	f100 33ff 	add.w	r3, r0, #4294967295
 801553c:	d100      	bne.n	8015540 <memcpy+0xc>
 801553e:	4770      	bx	lr
 8015540:	b510      	push	{r4, lr}
 8015542:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015546:	f803 4f01 	strb.w	r4, [r3, #1]!
 801554a:	4291      	cmp	r1, r2
 801554c:	d1f9      	bne.n	8015542 <memcpy+0xe>
 801554e:	bd10      	pop	{r4, pc}

08015550 <memset>:
 8015550:	4402      	add	r2, r0
 8015552:	4603      	mov	r3, r0
 8015554:	4293      	cmp	r3, r2
 8015556:	d100      	bne.n	801555a <memset+0xa>
 8015558:	4770      	bx	lr
 801555a:	f803 1b01 	strb.w	r1, [r3], #1
 801555e:	e7f9      	b.n	8015554 <memset+0x4>

08015560 <iprintf>:
 8015560:	b40f      	push	{r0, r1, r2, r3}
 8015562:	4b0a      	ldr	r3, [pc, #40]	; (801558c <iprintf+0x2c>)
 8015564:	b513      	push	{r0, r1, r4, lr}
 8015566:	681c      	ldr	r4, [r3, #0]
 8015568:	b124      	cbz	r4, 8015574 <iprintf+0x14>
 801556a:	69a3      	ldr	r3, [r4, #24]
 801556c:	b913      	cbnz	r3, 8015574 <iprintf+0x14>
 801556e:	4620      	mov	r0, r4
 8015570:	f000 f8c2 	bl	80156f8 <__sinit>
 8015574:	ab05      	add	r3, sp, #20
 8015576:	9a04      	ldr	r2, [sp, #16]
 8015578:	68a1      	ldr	r1, [r4, #8]
 801557a:	9301      	str	r3, [sp, #4]
 801557c:	4620      	mov	r0, r4
 801557e:	f000 fa7f 	bl	8015a80 <_vfiprintf_r>
 8015582:	b002      	add	sp, #8
 8015584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015588:	b004      	add	sp, #16
 801558a:	4770      	bx	lr
 801558c:	20000034 	.word	0x20000034

08015590 <rand>:
 8015590:	4b16      	ldr	r3, [pc, #88]	; (80155ec <rand+0x5c>)
 8015592:	b510      	push	{r4, lr}
 8015594:	681c      	ldr	r4, [r3, #0]
 8015596:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015598:	b9b3      	cbnz	r3, 80155c8 <rand+0x38>
 801559a:	2018      	movs	r0, #24
 801559c:	f000 f95e 	bl	801585c <malloc>
 80155a0:	63a0      	str	r0, [r4, #56]	; 0x38
 80155a2:	b928      	cbnz	r0, 80155b0 <rand+0x20>
 80155a4:	4602      	mov	r2, r0
 80155a6:	4b12      	ldr	r3, [pc, #72]	; (80155f0 <rand+0x60>)
 80155a8:	4812      	ldr	r0, [pc, #72]	; (80155f4 <rand+0x64>)
 80155aa:	214e      	movs	r1, #78	; 0x4e
 80155ac:	f000 f82e 	bl	801560c <__assert_func>
 80155b0:	4a11      	ldr	r2, [pc, #68]	; (80155f8 <rand+0x68>)
 80155b2:	4b12      	ldr	r3, [pc, #72]	; (80155fc <rand+0x6c>)
 80155b4:	e9c0 2300 	strd	r2, r3, [r0]
 80155b8:	4b11      	ldr	r3, [pc, #68]	; (8015600 <rand+0x70>)
 80155ba:	6083      	str	r3, [r0, #8]
 80155bc:	230b      	movs	r3, #11
 80155be:	8183      	strh	r3, [r0, #12]
 80155c0:	2201      	movs	r2, #1
 80155c2:	2300      	movs	r3, #0
 80155c4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80155c8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80155ca:	4a0e      	ldr	r2, [pc, #56]	; (8015604 <rand+0x74>)
 80155cc:	6920      	ldr	r0, [r4, #16]
 80155ce:	6963      	ldr	r3, [r4, #20]
 80155d0:	490d      	ldr	r1, [pc, #52]	; (8015608 <rand+0x78>)
 80155d2:	4342      	muls	r2, r0
 80155d4:	fb01 2203 	mla	r2, r1, r3, r2
 80155d8:	fba0 0101 	umull	r0, r1, r0, r1
 80155dc:	1c43      	adds	r3, r0, #1
 80155de:	eb42 0001 	adc.w	r0, r2, r1
 80155e2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80155e6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80155ea:	bd10      	pop	{r4, pc}
 80155ec:	20000034 	.word	0x20000034
 80155f0:	0801964c 	.word	0x0801964c
 80155f4:	08019663 	.word	0x08019663
 80155f8:	abcd330e 	.word	0xabcd330e
 80155fc:	e66d1234 	.word	0xe66d1234
 8015600:	0005deec 	.word	0x0005deec
 8015604:	5851f42d 	.word	0x5851f42d
 8015608:	4c957f2d 	.word	0x4c957f2d

0801560c <__assert_func>:
 801560c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801560e:	4614      	mov	r4, r2
 8015610:	461a      	mov	r2, r3
 8015612:	4b09      	ldr	r3, [pc, #36]	; (8015638 <__assert_func+0x2c>)
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	4605      	mov	r5, r0
 8015618:	68d8      	ldr	r0, [r3, #12]
 801561a:	b14c      	cbz	r4, 8015630 <__assert_func+0x24>
 801561c:	4b07      	ldr	r3, [pc, #28]	; (801563c <__assert_func+0x30>)
 801561e:	9100      	str	r1, [sp, #0]
 8015620:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015624:	4906      	ldr	r1, [pc, #24]	; (8015640 <__assert_func+0x34>)
 8015626:	462b      	mov	r3, r5
 8015628:	f000 f8e4 	bl	80157f4 <fiprintf>
 801562c:	f000 fe12 	bl	8016254 <abort>
 8015630:	4b04      	ldr	r3, [pc, #16]	; (8015644 <__assert_func+0x38>)
 8015632:	461c      	mov	r4, r3
 8015634:	e7f3      	b.n	801561e <__assert_func+0x12>
 8015636:	bf00      	nop
 8015638:	20000034 	.word	0x20000034
 801563c:	080196be 	.word	0x080196be
 8015640:	080196cb 	.word	0x080196cb
 8015644:	080196f9 	.word	0x080196f9

08015648 <std>:
 8015648:	2300      	movs	r3, #0
 801564a:	b510      	push	{r4, lr}
 801564c:	4604      	mov	r4, r0
 801564e:	e9c0 3300 	strd	r3, r3, [r0]
 8015652:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015656:	6083      	str	r3, [r0, #8]
 8015658:	8181      	strh	r1, [r0, #12]
 801565a:	6643      	str	r3, [r0, #100]	; 0x64
 801565c:	81c2      	strh	r2, [r0, #14]
 801565e:	6183      	str	r3, [r0, #24]
 8015660:	4619      	mov	r1, r3
 8015662:	2208      	movs	r2, #8
 8015664:	305c      	adds	r0, #92	; 0x5c
 8015666:	f7ff ff73 	bl	8015550 <memset>
 801566a:	4b05      	ldr	r3, [pc, #20]	; (8015680 <std+0x38>)
 801566c:	6263      	str	r3, [r4, #36]	; 0x24
 801566e:	4b05      	ldr	r3, [pc, #20]	; (8015684 <std+0x3c>)
 8015670:	62a3      	str	r3, [r4, #40]	; 0x28
 8015672:	4b05      	ldr	r3, [pc, #20]	; (8015688 <std+0x40>)
 8015674:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015676:	4b05      	ldr	r3, [pc, #20]	; (801568c <std+0x44>)
 8015678:	6224      	str	r4, [r4, #32]
 801567a:	6323      	str	r3, [r4, #48]	; 0x30
 801567c:	bd10      	pop	{r4, pc}
 801567e:	bf00      	nop
 8015680:	08016029 	.word	0x08016029
 8015684:	0801604b 	.word	0x0801604b
 8015688:	08016083 	.word	0x08016083
 801568c:	080160a7 	.word	0x080160a7

08015690 <_cleanup_r>:
 8015690:	4901      	ldr	r1, [pc, #4]	; (8015698 <_cleanup_r+0x8>)
 8015692:	f000 b8c1 	b.w	8015818 <_fwalk_reent>
 8015696:	bf00      	nop
 8015698:	08016391 	.word	0x08016391

0801569c <__sfmoreglue>:
 801569c:	b570      	push	{r4, r5, r6, lr}
 801569e:	2268      	movs	r2, #104	; 0x68
 80156a0:	1e4d      	subs	r5, r1, #1
 80156a2:	4355      	muls	r5, r2
 80156a4:	460e      	mov	r6, r1
 80156a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80156aa:	f000 f94b 	bl	8015944 <_malloc_r>
 80156ae:	4604      	mov	r4, r0
 80156b0:	b140      	cbz	r0, 80156c4 <__sfmoreglue+0x28>
 80156b2:	2100      	movs	r1, #0
 80156b4:	e9c0 1600 	strd	r1, r6, [r0]
 80156b8:	300c      	adds	r0, #12
 80156ba:	60a0      	str	r0, [r4, #8]
 80156bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80156c0:	f7ff ff46 	bl	8015550 <memset>
 80156c4:	4620      	mov	r0, r4
 80156c6:	bd70      	pop	{r4, r5, r6, pc}

080156c8 <__sfp_lock_acquire>:
 80156c8:	4801      	ldr	r0, [pc, #4]	; (80156d0 <__sfp_lock_acquire+0x8>)
 80156ca:	f000 b8c5 	b.w	8015858 <__retarget_lock_acquire_recursive>
 80156ce:	bf00      	nop
 80156d0:	2000d511 	.word	0x2000d511

080156d4 <__sfp_lock_release>:
 80156d4:	4801      	ldr	r0, [pc, #4]	; (80156dc <__sfp_lock_release+0x8>)
 80156d6:	f000 b8c0 	b.w	801585a <__retarget_lock_release_recursive>
 80156da:	bf00      	nop
 80156dc:	2000d511 	.word	0x2000d511

080156e0 <__sinit_lock_acquire>:
 80156e0:	4801      	ldr	r0, [pc, #4]	; (80156e8 <__sinit_lock_acquire+0x8>)
 80156e2:	f000 b8b9 	b.w	8015858 <__retarget_lock_acquire_recursive>
 80156e6:	bf00      	nop
 80156e8:	2000d512 	.word	0x2000d512

080156ec <__sinit_lock_release>:
 80156ec:	4801      	ldr	r0, [pc, #4]	; (80156f4 <__sinit_lock_release+0x8>)
 80156ee:	f000 b8b4 	b.w	801585a <__retarget_lock_release_recursive>
 80156f2:	bf00      	nop
 80156f4:	2000d512 	.word	0x2000d512

080156f8 <__sinit>:
 80156f8:	b510      	push	{r4, lr}
 80156fa:	4604      	mov	r4, r0
 80156fc:	f7ff fff0 	bl	80156e0 <__sinit_lock_acquire>
 8015700:	69a3      	ldr	r3, [r4, #24]
 8015702:	b11b      	cbz	r3, 801570c <__sinit+0x14>
 8015704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015708:	f7ff bff0 	b.w	80156ec <__sinit_lock_release>
 801570c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015710:	6523      	str	r3, [r4, #80]	; 0x50
 8015712:	4b13      	ldr	r3, [pc, #76]	; (8015760 <__sinit+0x68>)
 8015714:	4a13      	ldr	r2, [pc, #76]	; (8015764 <__sinit+0x6c>)
 8015716:	681b      	ldr	r3, [r3, #0]
 8015718:	62a2      	str	r2, [r4, #40]	; 0x28
 801571a:	42a3      	cmp	r3, r4
 801571c:	bf04      	itt	eq
 801571e:	2301      	moveq	r3, #1
 8015720:	61a3      	streq	r3, [r4, #24]
 8015722:	4620      	mov	r0, r4
 8015724:	f000 f820 	bl	8015768 <__sfp>
 8015728:	6060      	str	r0, [r4, #4]
 801572a:	4620      	mov	r0, r4
 801572c:	f000 f81c 	bl	8015768 <__sfp>
 8015730:	60a0      	str	r0, [r4, #8]
 8015732:	4620      	mov	r0, r4
 8015734:	f000 f818 	bl	8015768 <__sfp>
 8015738:	2200      	movs	r2, #0
 801573a:	60e0      	str	r0, [r4, #12]
 801573c:	2104      	movs	r1, #4
 801573e:	6860      	ldr	r0, [r4, #4]
 8015740:	f7ff ff82 	bl	8015648 <std>
 8015744:	68a0      	ldr	r0, [r4, #8]
 8015746:	2201      	movs	r2, #1
 8015748:	2109      	movs	r1, #9
 801574a:	f7ff ff7d 	bl	8015648 <std>
 801574e:	68e0      	ldr	r0, [r4, #12]
 8015750:	2202      	movs	r2, #2
 8015752:	2112      	movs	r1, #18
 8015754:	f7ff ff78 	bl	8015648 <std>
 8015758:	2301      	movs	r3, #1
 801575a:	61a3      	str	r3, [r4, #24]
 801575c:	e7d2      	b.n	8015704 <__sinit+0xc>
 801575e:	bf00      	nop
 8015760:	08019648 	.word	0x08019648
 8015764:	08015691 	.word	0x08015691

08015768 <__sfp>:
 8015768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801576a:	4607      	mov	r7, r0
 801576c:	f7ff ffac 	bl	80156c8 <__sfp_lock_acquire>
 8015770:	4b1e      	ldr	r3, [pc, #120]	; (80157ec <__sfp+0x84>)
 8015772:	681e      	ldr	r6, [r3, #0]
 8015774:	69b3      	ldr	r3, [r6, #24]
 8015776:	b913      	cbnz	r3, 801577e <__sfp+0x16>
 8015778:	4630      	mov	r0, r6
 801577a:	f7ff ffbd 	bl	80156f8 <__sinit>
 801577e:	3648      	adds	r6, #72	; 0x48
 8015780:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015784:	3b01      	subs	r3, #1
 8015786:	d503      	bpl.n	8015790 <__sfp+0x28>
 8015788:	6833      	ldr	r3, [r6, #0]
 801578a:	b30b      	cbz	r3, 80157d0 <__sfp+0x68>
 801578c:	6836      	ldr	r6, [r6, #0]
 801578e:	e7f7      	b.n	8015780 <__sfp+0x18>
 8015790:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015794:	b9d5      	cbnz	r5, 80157cc <__sfp+0x64>
 8015796:	4b16      	ldr	r3, [pc, #88]	; (80157f0 <__sfp+0x88>)
 8015798:	60e3      	str	r3, [r4, #12]
 801579a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801579e:	6665      	str	r5, [r4, #100]	; 0x64
 80157a0:	f000 f859 	bl	8015856 <__retarget_lock_init_recursive>
 80157a4:	f7ff ff96 	bl	80156d4 <__sfp_lock_release>
 80157a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80157ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80157b0:	6025      	str	r5, [r4, #0]
 80157b2:	61a5      	str	r5, [r4, #24]
 80157b4:	2208      	movs	r2, #8
 80157b6:	4629      	mov	r1, r5
 80157b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80157bc:	f7ff fec8 	bl	8015550 <memset>
 80157c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80157c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80157c8:	4620      	mov	r0, r4
 80157ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80157cc:	3468      	adds	r4, #104	; 0x68
 80157ce:	e7d9      	b.n	8015784 <__sfp+0x1c>
 80157d0:	2104      	movs	r1, #4
 80157d2:	4638      	mov	r0, r7
 80157d4:	f7ff ff62 	bl	801569c <__sfmoreglue>
 80157d8:	4604      	mov	r4, r0
 80157da:	6030      	str	r0, [r6, #0]
 80157dc:	2800      	cmp	r0, #0
 80157de:	d1d5      	bne.n	801578c <__sfp+0x24>
 80157e0:	f7ff ff78 	bl	80156d4 <__sfp_lock_release>
 80157e4:	230c      	movs	r3, #12
 80157e6:	603b      	str	r3, [r7, #0]
 80157e8:	e7ee      	b.n	80157c8 <__sfp+0x60>
 80157ea:	bf00      	nop
 80157ec:	08019648 	.word	0x08019648
 80157f0:	ffff0001 	.word	0xffff0001

080157f4 <fiprintf>:
 80157f4:	b40e      	push	{r1, r2, r3}
 80157f6:	b503      	push	{r0, r1, lr}
 80157f8:	4601      	mov	r1, r0
 80157fa:	ab03      	add	r3, sp, #12
 80157fc:	4805      	ldr	r0, [pc, #20]	; (8015814 <fiprintf+0x20>)
 80157fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8015802:	6800      	ldr	r0, [r0, #0]
 8015804:	9301      	str	r3, [sp, #4]
 8015806:	f000 f93b 	bl	8015a80 <_vfiprintf_r>
 801580a:	b002      	add	sp, #8
 801580c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015810:	b003      	add	sp, #12
 8015812:	4770      	bx	lr
 8015814:	20000034 	.word	0x20000034

08015818 <_fwalk_reent>:
 8015818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801581c:	4606      	mov	r6, r0
 801581e:	4688      	mov	r8, r1
 8015820:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015824:	2700      	movs	r7, #0
 8015826:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801582a:	f1b9 0901 	subs.w	r9, r9, #1
 801582e:	d505      	bpl.n	801583c <_fwalk_reent+0x24>
 8015830:	6824      	ldr	r4, [r4, #0]
 8015832:	2c00      	cmp	r4, #0
 8015834:	d1f7      	bne.n	8015826 <_fwalk_reent+0xe>
 8015836:	4638      	mov	r0, r7
 8015838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801583c:	89ab      	ldrh	r3, [r5, #12]
 801583e:	2b01      	cmp	r3, #1
 8015840:	d907      	bls.n	8015852 <_fwalk_reent+0x3a>
 8015842:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015846:	3301      	adds	r3, #1
 8015848:	d003      	beq.n	8015852 <_fwalk_reent+0x3a>
 801584a:	4629      	mov	r1, r5
 801584c:	4630      	mov	r0, r6
 801584e:	47c0      	blx	r8
 8015850:	4307      	orrs	r7, r0
 8015852:	3568      	adds	r5, #104	; 0x68
 8015854:	e7e9      	b.n	801582a <_fwalk_reent+0x12>

08015856 <__retarget_lock_init_recursive>:
 8015856:	4770      	bx	lr

08015858 <__retarget_lock_acquire_recursive>:
 8015858:	4770      	bx	lr

0801585a <__retarget_lock_release_recursive>:
 801585a:	4770      	bx	lr

0801585c <malloc>:
 801585c:	4b02      	ldr	r3, [pc, #8]	; (8015868 <malloc+0xc>)
 801585e:	4601      	mov	r1, r0
 8015860:	6818      	ldr	r0, [r3, #0]
 8015862:	f000 b86f 	b.w	8015944 <_malloc_r>
 8015866:	bf00      	nop
 8015868:	20000034 	.word	0x20000034

0801586c <_free_r>:
 801586c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801586e:	2900      	cmp	r1, #0
 8015870:	d044      	beq.n	80158fc <_free_r+0x90>
 8015872:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015876:	9001      	str	r0, [sp, #4]
 8015878:	2b00      	cmp	r3, #0
 801587a:	f1a1 0404 	sub.w	r4, r1, #4
 801587e:	bfb8      	it	lt
 8015880:	18e4      	addlt	r4, r4, r3
 8015882:	f000 fe39 	bl	80164f8 <__malloc_lock>
 8015886:	4a1e      	ldr	r2, [pc, #120]	; (8015900 <_free_r+0x94>)
 8015888:	9801      	ldr	r0, [sp, #4]
 801588a:	6813      	ldr	r3, [r2, #0]
 801588c:	b933      	cbnz	r3, 801589c <_free_r+0x30>
 801588e:	6063      	str	r3, [r4, #4]
 8015890:	6014      	str	r4, [r2, #0]
 8015892:	b003      	add	sp, #12
 8015894:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015898:	f000 be34 	b.w	8016504 <__malloc_unlock>
 801589c:	42a3      	cmp	r3, r4
 801589e:	d908      	bls.n	80158b2 <_free_r+0x46>
 80158a0:	6825      	ldr	r5, [r4, #0]
 80158a2:	1961      	adds	r1, r4, r5
 80158a4:	428b      	cmp	r3, r1
 80158a6:	bf01      	itttt	eq
 80158a8:	6819      	ldreq	r1, [r3, #0]
 80158aa:	685b      	ldreq	r3, [r3, #4]
 80158ac:	1949      	addeq	r1, r1, r5
 80158ae:	6021      	streq	r1, [r4, #0]
 80158b0:	e7ed      	b.n	801588e <_free_r+0x22>
 80158b2:	461a      	mov	r2, r3
 80158b4:	685b      	ldr	r3, [r3, #4]
 80158b6:	b10b      	cbz	r3, 80158bc <_free_r+0x50>
 80158b8:	42a3      	cmp	r3, r4
 80158ba:	d9fa      	bls.n	80158b2 <_free_r+0x46>
 80158bc:	6811      	ldr	r1, [r2, #0]
 80158be:	1855      	adds	r5, r2, r1
 80158c0:	42a5      	cmp	r5, r4
 80158c2:	d10b      	bne.n	80158dc <_free_r+0x70>
 80158c4:	6824      	ldr	r4, [r4, #0]
 80158c6:	4421      	add	r1, r4
 80158c8:	1854      	adds	r4, r2, r1
 80158ca:	42a3      	cmp	r3, r4
 80158cc:	6011      	str	r1, [r2, #0]
 80158ce:	d1e0      	bne.n	8015892 <_free_r+0x26>
 80158d0:	681c      	ldr	r4, [r3, #0]
 80158d2:	685b      	ldr	r3, [r3, #4]
 80158d4:	6053      	str	r3, [r2, #4]
 80158d6:	4421      	add	r1, r4
 80158d8:	6011      	str	r1, [r2, #0]
 80158da:	e7da      	b.n	8015892 <_free_r+0x26>
 80158dc:	d902      	bls.n	80158e4 <_free_r+0x78>
 80158de:	230c      	movs	r3, #12
 80158e0:	6003      	str	r3, [r0, #0]
 80158e2:	e7d6      	b.n	8015892 <_free_r+0x26>
 80158e4:	6825      	ldr	r5, [r4, #0]
 80158e6:	1961      	adds	r1, r4, r5
 80158e8:	428b      	cmp	r3, r1
 80158ea:	bf04      	itt	eq
 80158ec:	6819      	ldreq	r1, [r3, #0]
 80158ee:	685b      	ldreq	r3, [r3, #4]
 80158f0:	6063      	str	r3, [r4, #4]
 80158f2:	bf04      	itt	eq
 80158f4:	1949      	addeq	r1, r1, r5
 80158f6:	6021      	streq	r1, [r4, #0]
 80158f8:	6054      	str	r4, [r2, #4]
 80158fa:	e7ca      	b.n	8015892 <_free_r+0x26>
 80158fc:	b003      	add	sp, #12
 80158fe:	bd30      	pop	{r4, r5, pc}
 8015900:	2000d514 	.word	0x2000d514

08015904 <sbrk_aligned>:
 8015904:	b570      	push	{r4, r5, r6, lr}
 8015906:	4e0e      	ldr	r6, [pc, #56]	; (8015940 <sbrk_aligned+0x3c>)
 8015908:	460c      	mov	r4, r1
 801590a:	6831      	ldr	r1, [r6, #0]
 801590c:	4605      	mov	r5, r0
 801590e:	b911      	cbnz	r1, 8015916 <sbrk_aligned+0x12>
 8015910:	f000 fb7a 	bl	8016008 <_sbrk_r>
 8015914:	6030      	str	r0, [r6, #0]
 8015916:	4621      	mov	r1, r4
 8015918:	4628      	mov	r0, r5
 801591a:	f000 fb75 	bl	8016008 <_sbrk_r>
 801591e:	1c43      	adds	r3, r0, #1
 8015920:	d00a      	beq.n	8015938 <sbrk_aligned+0x34>
 8015922:	1cc4      	adds	r4, r0, #3
 8015924:	f024 0403 	bic.w	r4, r4, #3
 8015928:	42a0      	cmp	r0, r4
 801592a:	d007      	beq.n	801593c <sbrk_aligned+0x38>
 801592c:	1a21      	subs	r1, r4, r0
 801592e:	4628      	mov	r0, r5
 8015930:	f000 fb6a 	bl	8016008 <_sbrk_r>
 8015934:	3001      	adds	r0, #1
 8015936:	d101      	bne.n	801593c <sbrk_aligned+0x38>
 8015938:	f04f 34ff 	mov.w	r4, #4294967295
 801593c:	4620      	mov	r0, r4
 801593e:	bd70      	pop	{r4, r5, r6, pc}
 8015940:	2000d518 	.word	0x2000d518

08015944 <_malloc_r>:
 8015944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015948:	1ccd      	adds	r5, r1, #3
 801594a:	f025 0503 	bic.w	r5, r5, #3
 801594e:	3508      	adds	r5, #8
 8015950:	2d0c      	cmp	r5, #12
 8015952:	bf38      	it	cc
 8015954:	250c      	movcc	r5, #12
 8015956:	2d00      	cmp	r5, #0
 8015958:	4607      	mov	r7, r0
 801595a:	db01      	blt.n	8015960 <_malloc_r+0x1c>
 801595c:	42a9      	cmp	r1, r5
 801595e:	d905      	bls.n	801596c <_malloc_r+0x28>
 8015960:	230c      	movs	r3, #12
 8015962:	603b      	str	r3, [r7, #0]
 8015964:	2600      	movs	r6, #0
 8015966:	4630      	mov	r0, r6
 8015968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801596c:	4e2e      	ldr	r6, [pc, #184]	; (8015a28 <_malloc_r+0xe4>)
 801596e:	f000 fdc3 	bl	80164f8 <__malloc_lock>
 8015972:	6833      	ldr	r3, [r6, #0]
 8015974:	461c      	mov	r4, r3
 8015976:	bb34      	cbnz	r4, 80159c6 <_malloc_r+0x82>
 8015978:	4629      	mov	r1, r5
 801597a:	4638      	mov	r0, r7
 801597c:	f7ff ffc2 	bl	8015904 <sbrk_aligned>
 8015980:	1c43      	adds	r3, r0, #1
 8015982:	4604      	mov	r4, r0
 8015984:	d14d      	bne.n	8015a22 <_malloc_r+0xde>
 8015986:	6834      	ldr	r4, [r6, #0]
 8015988:	4626      	mov	r6, r4
 801598a:	2e00      	cmp	r6, #0
 801598c:	d140      	bne.n	8015a10 <_malloc_r+0xcc>
 801598e:	6823      	ldr	r3, [r4, #0]
 8015990:	4631      	mov	r1, r6
 8015992:	4638      	mov	r0, r7
 8015994:	eb04 0803 	add.w	r8, r4, r3
 8015998:	f000 fb36 	bl	8016008 <_sbrk_r>
 801599c:	4580      	cmp	r8, r0
 801599e:	d13a      	bne.n	8015a16 <_malloc_r+0xd2>
 80159a0:	6821      	ldr	r1, [r4, #0]
 80159a2:	3503      	adds	r5, #3
 80159a4:	1a6d      	subs	r5, r5, r1
 80159a6:	f025 0503 	bic.w	r5, r5, #3
 80159aa:	3508      	adds	r5, #8
 80159ac:	2d0c      	cmp	r5, #12
 80159ae:	bf38      	it	cc
 80159b0:	250c      	movcc	r5, #12
 80159b2:	4629      	mov	r1, r5
 80159b4:	4638      	mov	r0, r7
 80159b6:	f7ff ffa5 	bl	8015904 <sbrk_aligned>
 80159ba:	3001      	adds	r0, #1
 80159bc:	d02b      	beq.n	8015a16 <_malloc_r+0xd2>
 80159be:	6823      	ldr	r3, [r4, #0]
 80159c0:	442b      	add	r3, r5
 80159c2:	6023      	str	r3, [r4, #0]
 80159c4:	e00e      	b.n	80159e4 <_malloc_r+0xa0>
 80159c6:	6822      	ldr	r2, [r4, #0]
 80159c8:	1b52      	subs	r2, r2, r5
 80159ca:	d41e      	bmi.n	8015a0a <_malloc_r+0xc6>
 80159cc:	2a0b      	cmp	r2, #11
 80159ce:	d916      	bls.n	80159fe <_malloc_r+0xba>
 80159d0:	1961      	adds	r1, r4, r5
 80159d2:	42a3      	cmp	r3, r4
 80159d4:	6025      	str	r5, [r4, #0]
 80159d6:	bf18      	it	ne
 80159d8:	6059      	strne	r1, [r3, #4]
 80159da:	6863      	ldr	r3, [r4, #4]
 80159dc:	bf08      	it	eq
 80159de:	6031      	streq	r1, [r6, #0]
 80159e0:	5162      	str	r2, [r4, r5]
 80159e2:	604b      	str	r3, [r1, #4]
 80159e4:	4638      	mov	r0, r7
 80159e6:	f104 060b 	add.w	r6, r4, #11
 80159ea:	f000 fd8b 	bl	8016504 <__malloc_unlock>
 80159ee:	f026 0607 	bic.w	r6, r6, #7
 80159f2:	1d23      	adds	r3, r4, #4
 80159f4:	1af2      	subs	r2, r6, r3
 80159f6:	d0b6      	beq.n	8015966 <_malloc_r+0x22>
 80159f8:	1b9b      	subs	r3, r3, r6
 80159fa:	50a3      	str	r3, [r4, r2]
 80159fc:	e7b3      	b.n	8015966 <_malloc_r+0x22>
 80159fe:	6862      	ldr	r2, [r4, #4]
 8015a00:	42a3      	cmp	r3, r4
 8015a02:	bf0c      	ite	eq
 8015a04:	6032      	streq	r2, [r6, #0]
 8015a06:	605a      	strne	r2, [r3, #4]
 8015a08:	e7ec      	b.n	80159e4 <_malloc_r+0xa0>
 8015a0a:	4623      	mov	r3, r4
 8015a0c:	6864      	ldr	r4, [r4, #4]
 8015a0e:	e7b2      	b.n	8015976 <_malloc_r+0x32>
 8015a10:	4634      	mov	r4, r6
 8015a12:	6876      	ldr	r6, [r6, #4]
 8015a14:	e7b9      	b.n	801598a <_malloc_r+0x46>
 8015a16:	230c      	movs	r3, #12
 8015a18:	603b      	str	r3, [r7, #0]
 8015a1a:	4638      	mov	r0, r7
 8015a1c:	f000 fd72 	bl	8016504 <__malloc_unlock>
 8015a20:	e7a1      	b.n	8015966 <_malloc_r+0x22>
 8015a22:	6025      	str	r5, [r4, #0]
 8015a24:	e7de      	b.n	80159e4 <_malloc_r+0xa0>
 8015a26:	bf00      	nop
 8015a28:	2000d514 	.word	0x2000d514

08015a2c <__sfputc_r>:
 8015a2c:	6893      	ldr	r3, [r2, #8]
 8015a2e:	3b01      	subs	r3, #1
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	b410      	push	{r4}
 8015a34:	6093      	str	r3, [r2, #8]
 8015a36:	da08      	bge.n	8015a4a <__sfputc_r+0x1e>
 8015a38:	6994      	ldr	r4, [r2, #24]
 8015a3a:	42a3      	cmp	r3, r4
 8015a3c:	db01      	blt.n	8015a42 <__sfputc_r+0x16>
 8015a3e:	290a      	cmp	r1, #10
 8015a40:	d103      	bne.n	8015a4a <__sfputc_r+0x1e>
 8015a42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015a46:	f000 bb33 	b.w	80160b0 <__swbuf_r>
 8015a4a:	6813      	ldr	r3, [r2, #0]
 8015a4c:	1c58      	adds	r0, r3, #1
 8015a4e:	6010      	str	r0, [r2, #0]
 8015a50:	7019      	strb	r1, [r3, #0]
 8015a52:	4608      	mov	r0, r1
 8015a54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015a58:	4770      	bx	lr

08015a5a <__sfputs_r>:
 8015a5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a5c:	4606      	mov	r6, r0
 8015a5e:	460f      	mov	r7, r1
 8015a60:	4614      	mov	r4, r2
 8015a62:	18d5      	adds	r5, r2, r3
 8015a64:	42ac      	cmp	r4, r5
 8015a66:	d101      	bne.n	8015a6c <__sfputs_r+0x12>
 8015a68:	2000      	movs	r0, #0
 8015a6a:	e007      	b.n	8015a7c <__sfputs_r+0x22>
 8015a6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015a70:	463a      	mov	r2, r7
 8015a72:	4630      	mov	r0, r6
 8015a74:	f7ff ffda 	bl	8015a2c <__sfputc_r>
 8015a78:	1c43      	adds	r3, r0, #1
 8015a7a:	d1f3      	bne.n	8015a64 <__sfputs_r+0xa>
 8015a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015a80 <_vfiprintf_r>:
 8015a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a84:	460d      	mov	r5, r1
 8015a86:	b09d      	sub	sp, #116	; 0x74
 8015a88:	4614      	mov	r4, r2
 8015a8a:	4698      	mov	r8, r3
 8015a8c:	4606      	mov	r6, r0
 8015a8e:	b118      	cbz	r0, 8015a98 <_vfiprintf_r+0x18>
 8015a90:	6983      	ldr	r3, [r0, #24]
 8015a92:	b90b      	cbnz	r3, 8015a98 <_vfiprintf_r+0x18>
 8015a94:	f7ff fe30 	bl	80156f8 <__sinit>
 8015a98:	4b89      	ldr	r3, [pc, #548]	; (8015cc0 <_vfiprintf_r+0x240>)
 8015a9a:	429d      	cmp	r5, r3
 8015a9c:	d11b      	bne.n	8015ad6 <_vfiprintf_r+0x56>
 8015a9e:	6875      	ldr	r5, [r6, #4]
 8015aa0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015aa2:	07d9      	lsls	r1, r3, #31
 8015aa4:	d405      	bmi.n	8015ab2 <_vfiprintf_r+0x32>
 8015aa6:	89ab      	ldrh	r3, [r5, #12]
 8015aa8:	059a      	lsls	r2, r3, #22
 8015aaa:	d402      	bmi.n	8015ab2 <_vfiprintf_r+0x32>
 8015aac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015aae:	f7ff fed3 	bl	8015858 <__retarget_lock_acquire_recursive>
 8015ab2:	89ab      	ldrh	r3, [r5, #12]
 8015ab4:	071b      	lsls	r3, r3, #28
 8015ab6:	d501      	bpl.n	8015abc <_vfiprintf_r+0x3c>
 8015ab8:	692b      	ldr	r3, [r5, #16]
 8015aba:	b9eb      	cbnz	r3, 8015af8 <_vfiprintf_r+0x78>
 8015abc:	4629      	mov	r1, r5
 8015abe:	4630      	mov	r0, r6
 8015ac0:	f000 fb5a 	bl	8016178 <__swsetup_r>
 8015ac4:	b1c0      	cbz	r0, 8015af8 <_vfiprintf_r+0x78>
 8015ac6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015ac8:	07dc      	lsls	r4, r3, #31
 8015aca:	d50e      	bpl.n	8015aea <_vfiprintf_r+0x6a>
 8015acc:	f04f 30ff 	mov.w	r0, #4294967295
 8015ad0:	b01d      	add	sp, #116	; 0x74
 8015ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ad6:	4b7b      	ldr	r3, [pc, #492]	; (8015cc4 <_vfiprintf_r+0x244>)
 8015ad8:	429d      	cmp	r5, r3
 8015ada:	d101      	bne.n	8015ae0 <_vfiprintf_r+0x60>
 8015adc:	68b5      	ldr	r5, [r6, #8]
 8015ade:	e7df      	b.n	8015aa0 <_vfiprintf_r+0x20>
 8015ae0:	4b79      	ldr	r3, [pc, #484]	; (8015cc8 <_vfiprintf_r+0x248>)
 8015ae2:	429d      	cmp	r5, r3
 8015ae4:	bf08      	it	eq
 8015ae6:	68f5      	ldreq	r5, [r6, #12]
 8015ae8:	e7da      	b.n	8015aa0 <_vfiprintf_r+0x20>
 8015aea:	89ab      	ldrh	r3, [r5, #12]
 8015aec:	0598      	lsls	r0, r3, #22
 8015aee:	d4ed      	bmi.n	8015acc <_vfiprintf_r+0x4c>
 8015af0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015af2:	f7ff feb2 	bl	801585a <__retarget_lock_release_recursive>
 8015af6:	e7e9      	b.n	8015acc <_vfiprintf_r+0x4c>
 8015af8:	2300      	movs	r3, #0
 8015afa:	9309      	str	r3, [sp, #36]	; 0x24
 8015afc:	2320      	movs	r3, #32
 8015afe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015b02:	f8cd 800c 	str.w	r8, [sp, #12]
 8015b06:	2330      	movs	r3, #48	; 0x30
 8015b08:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015ccc <_vfiprintf_r+0x24c>
 8015b0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015b10:	f04f 0901 	mov.w	r9, #1
 8015b14:	4623      	mov	r3, r4
 8015b16:	469a      	mov	sl, r3
 8015b18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015b1c:	b10a      	cbz	r2, 8015b22 <_vfiprintf_r+0xa2>
 8015b1e:	2a25      	cmp	r2, #37	; 0x25
 8015b20:	d1f9      	bne.n	8015b16 <_vfiprintf_r+0x96>
 8015b22:	ebba 0b04 	subs.w	fp, sl, r4
 8015b26:	d00b      	beq.n	8015b40 <_vfiprintf_r+0xc0>
 8015b28:	465b      	mov	r3, fp
 8015b2a:	4622      	mov	r2, r4
 8015b2c:	4629      	mov	r1, r5
 8015b2e:	4630      	mov	r0, r6
 8015b30:	f7ff ff93 	bl	8015a5a <__sfputs_r>
 8015b34:	3001      	adds	r0, #1
 8015b36:	f000 80aa 	beq.w	8015c8e <_vfiprintf_r+0x20e>
 8015b3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015b3c:	445a      	add	r2, fp
 8015b3e:	9209      	str	r2, [sp, #36]	; 0x24
 8015b40:	f89a 3000 	ldrb.w	r3, [sl]
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	f000 80a2 	beq.w	8015c8e <_vfiprintf_r+0x20e>
 8015b4a:	2300      	movs	r3, #0
 8015b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8015b50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015b54:	f10a 0a01 	add.w	sl, sl, #1
 8015b58:	9304      	str	r3, [sp, #16]
 8015b5a:	9307      	str	r3, [sp, #28]
 8015b5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015b60:	931a      	str	r3, [sp, #104]	; 0x68
 8015b62:	4654      	mov	r4, sl
 8015b64:	2205      	movs	r2, #5
 8015b66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015b6a:	4858      	ldr	r0, [pc, #352]	; (8015ccc <_vfiprintf_r+0x24c>)
 8015b6c:	f7ea fb40 	bl	80001f0 <memchr>
 8015b70:	9a04      	ldr	r2, [sp, #16]
 8015b72:	b9d8      	cbnz	r0, 8015bac <_vfiprintf_r+0x12c>
 8015b74:	06d1      	lsls	r1, r2, #27
 8015b76:	bf44      	itt	mi
 8015b78:	2320      	movmi	r3, #32
 8015b7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015b7e:	0713      	lsls	r3, r2, #28
 8015b80:	bf44      	itt	mi
 8015b82:	232b      	movmi	r3, #43	; 0x2b
 8015b84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015b88:	f89a 3000 	ldrb.w	r3, [sl]
 8015b8c:	2b2a      	cmp	r3, #42	; 0x2a
 8015b8e:	d015      	beq.n	8015bbc <_vfiprintf_r+0x13c>
 8015b90:	9a07      	ldr	r2, [sp, #28]
 8015b92:	4654      	mov	r4, sl
 8015b94:	2000      	movs	r0, #0
 8015b96:	f04f 0c0a 	mov.w	ip, #10
 8015b9a:	4621      	mov	r1, r4
 8015b9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015ba0:	3b30      	subs	r3, #48	; 0x30
 8015ba2:	2b09      	cmp	r3, #9
 8015ba4:	d94e      	bls.n	8015c44 <_vfiprintf_r+0x1c4>
 8015ba6:	b1b0      	cbz	r0, 8015bd6 <_vfiprintf_r+0x156>
 8015ba8:	9207      	str	r2, [sp, #28]
 8015baa:	e014      	b.n	8015bd6 <_vfiprintf_r+0x156>
 8015bac:	eba0 0308 	sub.w	r3, r0, r8
 8015bb0:	fa09 f303 	lsl.w	r3, r9, r3
 8015bb4:	4313      	orrs	r3, r2
 8015bb6:	9304      	str	r3, [sp, #16]
 8015bb8:	46a2      	mov	sl, r4
 8015bba:	e7d2      	b.n	8015b62 <_vfiprintf_r+0xe2>
 8015bbc:	9b03      	ldr	r3, [sp, #12]
 8015bbe:	1d19      	adds	r1, r3, #4
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	9103      	str	r1, [sp, #12]
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	bfbb      	ittet	lt
 8015bc8:	425b      	neglt	r3, r3
 8015bca:	f042 0202 	orrlt.w	r2, r2, #2
 8015bce:	9307      	strge	r3, [sp, #28]
 8015bd0:	9307      	strlt	r3, [sp, #28]
 8015bd2:	bfb8      	it	lt
 8015bd4:	9204      	strlt	r2, [sp, #16]
 8015bd6:	7823      	ldrb	r3, [r4, #0]
 8015bd8:	2b2e      	cmp	r3, #46	; 0x2e
 8015bda:	d10c      	bne.n	8015bf6 <_vfiprintf_r+0x176>
 8015bdc:	7863      	ldrb	r3, [r4, #1]
 8015bde:	2b2a      	cmp	r3, #42	; 0x2a
 8015be0:	d135      	bne.n	8015c4e <_vfiprintf_r+0x1ce>
 8015be2:	9b03      	ldr	r3, [sp, #12]
 8015be4:	1d1a      	adds	r2, r3, #4
 8015be6:	681b      	ldr	r3, [r3, #0]
 8015be8:	9203      	str	r2, [sp, #12]
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	bfb8      	it	lt
 8015bee:	f04f 33ff 	movlt.w	r3, #4294967295
 8015bf2:	3402      	adds	r4, #2
 8015bf4:	9305      	str	r3, [sp, #20]
 8015bf6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015cdc <_vfiprintf_r+0x25c>
 8015bfa:	7821      	ldrb	r1, [r4, #0]
 8015bfc:	2203      	movs	r2, #3
 8015bfe:	4650      	mov	r0, sl
 8015c00:	f7ea faf6 	bl	80001f0 <memchr>
 8015c04:	b140      	cbz	r0, 8015c18 <_vfiprintf_r+0x198>
 8015c06:	2340      	movs	r3, #64	; 0x40
 8015c08:	eba0 000a 	sub.w	r0, r0, sl
 8015c0c:	fa03 f000 	lsl.w	r0, r3, r0
 8015c10:	9b04      	ldr	r3, [sp, #16]
 8015c12:	4303      	orrs	r3, r0
 8015c14:	3401      	adds	r4, #1
 8015c16:	9304      	str	r3, [sp, #16]
 8015c18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015c1c:	482c      	ldr	r0, [pc, #176]	; (8015cd0 <_vfiprintf_r+0x250>)
 8015c1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015c22:	2206      	movs	r2, #6
 8015c24:	f7ea fae4 	bl	80001f0 <memchr>
 8015c28:	2800      	cmp	r0, #0
 8015c2a:	d03f      	beq.n	8015cac <_vfiprintf_r+0x22c>
 8015c2c:	4b29      	ldr	r3, [pc, #164]	; (8015cd4 <_vfiprintf_r+0x254>)
 8015c2e:	bb1b      	cbnz	r3, 8015c78 <_vfiprintf_r+0x1f8>
 8015c30:	9b03      	ldr	r3, [sp, #12]
 8015c32:	3307      	adds	r3, #7
 8015c34:	f023 0307 	bic.w	r3, r3, #7
 8015c38:	3308      	adds	r3, #8
 8015c3a:	9303      	str	r3, [sp, #12]
 8015c3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c3e:	443b      	add	r3, r7
 8015c40:	9309      	str	r3, [sp, #36]	; 0x24
 8015c42:	e767      	b.n	8015b14 <_vfiprintf_r+0x94>
 8015c44:	fb0c 3202 	mla	r2, ip, r2, r3
 8015c48:	460c      	mov	r4, r1
 8015c4a:	2001      	movs	r0, #1
 8015c4c:	e7a5      	b.n	8015b9a <_vfiprintf_r+0x11a>
 8015c4e:	2300      	movs	r3, #0
 8015c50:	3401      	adds	r4, #1
 8015c52:	9305      	str	r3, [sp, #20]
 8015c54:	4619      	mov	r1, r3
 8015c56:	f04f 0c0a 	mov.w	ip, #10
 8015c5a:	4620      	mov	r0, r4
 8015c5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015c60:	3a30      	subs	r2, #48	; 0x30
 8015c62:	2a09      	cmp	r2, #9
 8015c64:	d903      	bls.n	8015c6e <_vfiprintf_r+0x1ee>
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d0c5      	beq.n	8015bf6 <_vfiprintf_r+0x176>
 8015c6a:	9105      	str	r1, [sp, #20]
 8015c6c:	e7c3      	b.n	8015bf6 <_vfiprintf_r+0x176>
 8015c6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8015c72:	4604      	mov	r4, r0
 8015c74:	2301      	movs	r3, #1
 8015c76:	e7f0      	b.n	8015c5a <_vfiprintf_r+0x1da>
 8015c78:	ab03      	add	r3, sp, #12
 8015c7a:	9300      	str	r3, [sp, #0]
 8015c7c:	462a      	mov	r2, r5
 8015c7e:	4b16      	ldr	r3, [pc, #88]	; (8015cd8 <_vfiprintf_r+0x258>)
 8015c80:	a904      	add	r1, sp, #16
 8015c82:	4630      	mov	r0, r6
 8015c84:	f3af 8000 	nop.w
 8015c88:	4607      	mov	r7, r0
 8015c8a:	1c78      	adds	r0, r7, #1
 8015c8c:	d1d6      	bne.n	8015c3c <_vfiprintf_r+0x1bc>
 8015c8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015c90:	07d9      	lsls	r1, r3, #31
 8015c92:	d405      	bmi.n	8015ca0 <_vfiprintf_r+0x220>
 8015c94:	89ab      	ldrh	r3, [r5, #12]
 8015c96:	059a      	lsls	r2, r3, #22
 8015c98:	d402      	bmi.n	8015ca0 <_vfiprintf_r+0x220>
 8015c9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015c9c:	f7ff fddd 	bl	801585a <__retarget_lock_release_recursive>
 8015ca0:	89ab      	ldrh	r3, [r5, #12]
 8015ca2:	065b      	lsls	r3, r3, #25
 8015ca4:	f53f af12 	bmi.w	8015acc <_vfiprintf_r+0x4c>
 8015ca8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015caa:	e711      	b.n	8015ad0 <_vfiprintf_r+0x50>
 8015cac:	ab03      	add	r3, sp, #12
 8015cae:	9300      	str	r3, [sp, #0]
 8015cb0:	462a      	mov	r2, r5
 8015cb2:	4b09      	ldr	r3, [pc, #36]	; (8015cd8 <_vfiprintf_r+0x258>)
 8015cb4:	a904      	add	r1, sp, #16
 8015cb6:	4630      	mov	r0, r6
 8015cb8:	f000 f880 	bl	8015dbc <_printf_i>
 8015cbc:	e7e4      	b.n	8015c88 <_vfiprintf_r+0x208>
 8015cbe:	bf00      	nop
 8015cc0:	0801971c 	.word	0x0801971c
 8015cc4:	0801973c 	.word	0x0801973c
 8015cc8:	080196fc 	.word	0x080196fc
 8015ccc:	0801975c 	.word	0x0801975c
 8015cd0:	08019766 	.word	0x08019766
 8015cd4:	00000000 	.word	0x00000000
 8015cd8:	08015a5b 	.word	0x08015a5b
 8015cdc:	08019762 	.word	0x08019762

08015ce0 <_printf_common>:
 8015ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ce4:	4616      	mov	r6, r2
 8015ce6:	4699      	mov	r9, r3
 8015ce8:	688a      	ldr	r2, [r1, #8]
 8015cea:	690b      	ldr	r3, [r1, #16]
 8015cec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015cf0:	4293      	cmp	r3, r2
 8015cf2:	bfb8      	it	lt
 8015cf4:	4613      	movlt	r3, r2
 8015cf6:	6033      	str	r3, [r6, #0]
 8015cf8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015cfc:	4607      	mov	r7, r0
 8015cfe:	460c      	mov	r4, r1
 8015d00:	b10a      	cbz	r2, 8015d06 <_printf_common+0x26>
 8015d02:	3301      	adds	r3, #1
 8015d04:	6033      	str	r3, [r6, #0]
 8015d06:	6823      	ldr	r3, [r4, #0]
 8015d08:	0699      	lsls	r1, r3, #26
 8015d0a:	bf42      	ittt	mi
 8015d0c:	6833      	ldrmi	r3, [r6, #0]
 8015d0e:	3302      	addmi	r3, #2
 8015d10:	6033      	strmi	r3, [r6, #0]
 8015d12:	6825      	ldr	r5, [r4, #0]
 8015d14:	f015 0506 	ands.w	r5, r5, #6
 8015d18:	d106      	bne.n	8015d28 <_printf_common+0x48>
 8015d1a:	f104 0a19 	add.w	sl, r4, #25
 8015d1e:	68e3      	ldr	r3, [r4, #12]
 8015d20:	6832      	ldr	r2, [r6, #0]
 8015d22:	1a9b      	subs	r3, r3, r2
 8015d24:	42ab      	cmp	r3, r5
 8015d26:	dc26      	bgt.n	8015d76 <_printf_common+0x96>
 8015d28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015d2c:	1e13      	subs	r3, r2, #0
 8015d2e:	6822      	ldr	r2, [r4, #0]
 8015d30:	bf18      	it	ne
 8015d32:	2301      	movne	r3, #1
 8015d34:	0692      	lsls	r2, r2, #26
 8015d36:	d42b      	bmi.n	8015d90 <_printf_common+0xb0>
 8015d38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015d3c:	4649      	mov	r1, r9
 8015d3e:	4638      	mov	r0, r7
 8015d40:	47c0      	blx	r8
 8015d42:	3001      	adds	r0, #1
 8015d44:	d01e      	beq.n	8015d84 <_printf_common+0xa4>
 8015d46:	6823      	ldr	r3, [r4, #0]
 8015d48:	68e5      	ldr	r5, [r4, #12]
 8015d4a:	6832      	ldr	r2, [r6, #0]
 8015d4c:	f003 0306 	and.w	r3, r3, #6
 8015d50:	2b04      	cmp	r3, #4
 8015d52:	bf08      	it	eq
 8015d54:	1aad      	subeq	r5, r5, r2
 8015d56:	68a3      	ldr	r3, [r4, #8]
 8015d58:	6922      	ldr	r2, [r4, #16]
 8015d5a:	bf0c      	ite	eq
 8015d5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015d60:	2500      	movne	r5, #0
 8015d62:	4293      	cmp	r3, r2
 8015d64:	bfc4      	itt	gt
 8015d66:	1a9b      	subgt	r3, r3, r2
 8015d68:	18ed      	addgt	r5, r5, r3
 8015d6a:	2600      	movs	r6, #0
 8015d6c:	341a      	adds	r4, #26
 8015d6e:	42b5      	cmp	r5, r6
 8015d70:	d11a      	bne.n	8015da8 <_printf_common+0xc8>
 8015d72:	2000      	movs	r0, #0
 8015d74:	e008      	b.n	8015d88 <_printf_common+0xa8>
 8015d76:	2301      	movs	r3, #1
 8015d78:	4652      	mov	r2, sl
 8015d7a:	4649      	mov	r1, r9
 8015d7c:	4638      	mov	r0, r7
 8015d7e:	47c0      	blx	r8
 8015d80:	3001      	adds	r0, #1
 8015d82:	d103      	bne.n	8015d8c <_printf_common+0xac>
 8015d84:	f04f 30ff 	mov.w	r0, #4294967295
 8015d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d8c:	3501      	adds	r5, #1
 8015d8e:	e7c6      	b.n	8015d1e <_printf_common+0x3e>
 8015d90:	18e1      	adds	r1, r4, r3
 8015d92:	1c5a      	adds	r2, r3, #1
 8015d94:	2030      	movs	r0, #48	; 0x30
 8015d96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015d9a:	4422      	add	r2, r4
 8015d9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015da0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015da4:	3302      	adds	r3, #2
 8015da6:	e7c7      	b.n	8015d38 <_printf_common+0x58>
 8015da8:	2301      	movs	r3, #1
 8015daa:	4622      	mov	r2, r4
 8015dac:	4649      	mov	r1, r9
 8015dae:	4638      	mov	r0, r7
 8015db0:	47c0      	blx	r8
 8015db2:	3001      	adds	r0, #1
 8015db4:	d0e6      	beq.n	8015d84 <_printf_common+0xa4>
 8015db6:	3601      	adds	r6, #1
 8015db8:	e7d9      	b.n	8015d6e <_printf_common+0x8e>
	...

08015dbc <_printf_i>:
 8015dbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015dc0:	7e0f      	ldrb	r7, [r1, #24]
 8015dc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015dc4:	2f78      	cmp	r7, #120	; 0x78
 8015dc6:	4691      	mov	r9, r2
 8015dc8:	4680      	mov	r8, r0
 8015dca:	460c      	mov	r4, r1
 8015dcc:	469a      	mov	sl, r3
 8015dce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015dd2:	d807      	bhi.n	8015de4 <_printf_i+0x28>
 8015dd4:	2f62      	cmp	r7, #98	; 0x62
 8015dd6:	d80a      	bhi.n	8015dee <_printf_i+0x32>
 8015dd8:	2f00      	cmp	r7, #0
 8015dda:	f000 80d8 	beq.w	8015f8e <_printf_i+0x1d2>
 8015dde:	2f58      	cmp	r7, #88	; 0x58
 8015de0:	f000 80a3 	beq.w	8015f2a <_printf_i+0x16e>
 8015de4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015de8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015dec:	e03a      	b.n	8015e64 <_printf_i+0xa8>
 8015dee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015df2:	2b15      	cmp	r3, #21
 8015df4:	d8f6      	bhi.n	8015de4 <_printf_i+0x28>
 8015df6:	a101      	add	r1, pc, #4	; (adr r1, 8015dfc <_printf_i+0x40>)
 8015df8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015dfc:	08015e55 	.word	0x08015e55
 8015e00:	08015e69 	.word	0x08015e69
 8015e04:	08015de5 	.word	0x08015de5
 8015e08:	08015de5 	.word	0x08015de5
 8015e0c:	08015de5 	.word	0x08015de5
 8015e10:	08015de5 	.word	0x08015de5
 8015e14:	08015e69 	.word	0x08015e69
 8015e18:	08015de5 	.word	0x08015de5
 8015e1c:	08015de5 	.word	0x08015de5
 8015e20:	08015de5 	.word	0x08015de5
 8015e24:	08015de5 	.word	0x08015de5
 8015e28:	08015f75 	.word	0x08015f75
 8015e2c:	08015e99 	.word	0x08015e99
 8015e30:	08015f57 	.word	0x08015f57
 8015e34:	08015de5 	.word	0x08015de5
 8015e38:	08015de5 	.word	0x08015de5
 8015e3c:	08015f97 	.word	0x08015f97
 8015e40:	08015de5 	.word	0x08015de5
 8015e44:	08015e99 	.word	0x08015e99
 8015e48:	08015de5 	.word	0x08015de5
 8015e4c:	08015de5 	.word	0x08015de5
 8015e50:	08015f5f 	.word	0x08015f5f
 8015e54:	682b      	ldr	r3, [r5, #0]
 8015e56:	1d1a      	adds	r2, r3, #4
 8015e58:	681b      	ldr	r3, [r3, #0]
 8015e5a:	602a      	str	r2, [r5, #0]
 8015e5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015e60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015e64:	2301      	movs	r3, #1
 8015e66:	e0a3      	b.n	8015fb0 <_printf_i+0x1f4>
 8015e68:	6820      	ldr	r0, [r4, #0]
 8015e6a:	6829      	ldr	r1, [r5, #0]
 8015e6c:	0606      	lsls	r6, r0, #24
 8015e6e:	f101 0304 	add.w	r3, r1, #4
 8015e72:	d50a      	bpl.n	8015e8a <_printf_i+0xce>
 8015e74:	680e      	ldr	r6, [r1, #0]
 8015e76:	602b      	str	r3, [r5, #0]
 8015e78:	2e00      	cmp	r6, #0
 8015e7a:	da03      	bge.n	8015e84 <_printf_i+0xc8>
 8015e7c:	232d      	movs	r3, #45	; 0x2d
 8015e7e:	4276      	negs	r6, r6
 8015e80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015e84:	485e      	ldr	r0, [pc, #376]	; (8016000 <_printf_i+0x244>)
 8015e86:	230a      	movs	r3, #10
 8015e88:	e019      	b.n	8015ebe <_printf_i+0x102>
 8015e8a:	680e      	ldr	r6, [r1, #0]
 8015e8c:	602b      	str	r3, [r5, #0]
 8015e8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015e92:	bf18      	it	ne
 8015e94:	b236      	sxthne	r6, r6
 8015e96:	e7ef      	b.n	8015e78 <_printf_i+0xbc>
 8015e98:	682b      	ldr	r3, [r5, #0]
 8015e9a:	6820      	ldr	r0, [r4, #0]
 8015e9c:	1d19      	adds	r1, r3, #4
 8015e9e:	6029      	str	r1, [r5, #0]
 8015ea0:	0601      	lsls	r1, r0, #24
 8015ea2:	d501      	bpl.n	8015ea8 <_printf_i+0xec>
 8015ea4:	681e      	ldr	r6, [r3, #0]
 8015ea6:	e002      	b.n	8015eae <_printf_i+0xf2>
 8015ea8:	0646      	lsls	r6, r0, #25
 8015eaa:	d5fb      	bpl.n	8015ea4 <_printf_i+0xe8>
 8015eac:	881e      	ldrh	r6, [r3, #0]
 8015eae:	4854      	ldr	r0, [pc, #336]	; (8016000 <_printf_i+0x244>)
 8015eb0:	2f6f      	cmp	r7, #111	; 0x6f
 8015eb2:	bf0c      	ite	eq
 8015eb4:	2308      	moveq	r3, #8
 8015eb6:	230a      	movne	r3, #10
 8015eb8:	2100      	movs	r1, #0
 8015eba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015ebe:	6865      	ldr	r5, [r4, #4]
 8015ec0:	60a5      	str	r5, [r4, #8]
 8015ec2:	2d00      	cmp	r5, #0
 8015ec4:	bfa2      	ittt	ge
 8015ec6:	6821      	ldrge	r1, [r4, #0]
 8015ec8:	f021 0104 	bicge.w	r1, r1, #4
 8015ecc:	6021      	strge	r1, [r4, #0]
 8015ece:	b90e      	cbnz	r6, 8015ed4 <_printf_i+0x118>
 8015ed0:	2d00      	cmp	r5, #0
 8015ed2:	d04d      	beq.n	8015f70 <_printf_i+0x1b4>
 8015ed4:	4615      	mov	r5, r2
 8015ed6:	fbb6 f1f3 	udiv	r1, r6, r3
 8015eda:	fb03 6711 	mls	r7, r3, r1, r6
 8015ede:	5dc7      	ldrb	r7, [r0, r7]
 8015ee0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015ee4:	4637      	mov	r7, r6
 8015ee6:	42bb      	cmp	r3, r7
 8015ee8:	460e      	mov	r6, r1
 8015eea:	d9f4      	bls.n	8015ed6 <_printf_i+0x11a>
 8015eec:	2b08      	cmp	r3, #8
 8015eee:	d10b      	bne.n	8015f08 <_printf_i+0x14c>
 8015ef0:	6823      	ldr	r3, [r4, #0]
 8015ef2:	07de      	lsls	r6, r3, #31
 8015ef4:	d508      	bpl.n	8015f08 <_printf_i+0x14c>
 8015ef6:	6923      	ldr	r3, [r4, #16]
 8015ef8:	6861      	ldr	r1, [r4, #4]
 8015efa:	4299      	cmp	r1, r3
 8015efc:	bfde      	ittt	le
 8015efe:	2330      	movle	r3, #48	; 0x30
 8015f00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015f04:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015f08:	1b52      	subs	r2, r2, r5
 8015f0a:	6122      	str	r2, [r4, #16]
 8015f0c:	f8cd a000 	str.w	sl, [sp]
 8015f10:	464b      	mov	r3, r9
 8015f12:	aa03      	add	r2, sp, #12
 8015f14:	4621      	mov	r1, r4
 8015f16:	4640      	mov	r0, r8
 8015f18:	f7ff fee2 	bl	8015ce0 <_printf_common>
 8015f1c:	3001      	adds	r0, #1
 8015f1e:	d14c      	bne.n	8015fba <_printf_i+0x1fe>
 8015f20:	f04f 30ff 	mov.w	r0, #4294967295
 8015f24:	b004      	add	sp, #16
 8015f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f2a:	4835      	ldr	r0, [pc, #212]	; (8016000 <_printf_i+0x244>)
 8015f2c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015f30:	6829      	ldr	r1, [r5, #0]
 8015f32:	6823      	ldr	r3, [r4, #0]
 8015f34:	f851 6b04 	ldr.w	r6, [r1], #4
 8015f38:	6029      	str	r1, [r5, #0]
 8015f3a:	061d      	lsls	r5, r3, #24
 8015f3c:	d514      	bpl.n	8015f68 <_printf_i+0x1ac>
 8015f3e:	07df      	lsls	r7, r3, #31
 8015f40:	bf44      	itt	mi
 8015f42:	f043 0320 	orrmi.w	r3, r3, #32
 8015f46:	6023      	strmi	r3, [r4, #0]
 8015f48:	b91e      	cbnz	r6, 8015f52 <_printf_i+0x196>
 8015f4a:	6823      	ldr	r3, [r4, #0]
 8015f4c:	f023 0320 	bic.w	r3, r3, #32
 8015f50:	6023      	str	r3, [r4, #0]
 8015f52:	2310      	movs	r3, #16
 8015f54:	e7b0      	b.n	8015eb8 <_printf_i+0xfc>
 8015f56:	6823      	ldr	r3, [r4, #0]
 8015f58:	f043 0320 	orr.w	r3, r3, #32
 8015f5c:	6023      	str	r3, [r4, #0]
 8015f5e:	2378      	movs	r3, #120	; 0x78
 8015f60:	4828      	ldr	r0, [pc, #160]	; (8016004 <_printf_i+0x248>)
 8015f62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015f66:	e7e3      	b.n	8015f30 <_printf_i+0x174>
 8015f68:	0659      	lsls	r1, r3, #25
 8015f6a:	bf48      	it	mi
 8015f6c:	b2b6      	uxthmi	r6, r6
 8015f6e:	e7e6      	b.n	8015f3e <_printf_i+0x182>
 8015f70:	4615      	mov	r5, r2
 8015f72:	e7bb      	b.n	8015eec <_printf_i+0x130>
 8015f74:	682b      	ldr	r3, [r5, #0]
 8015f76:	6826      	ldr	r6, [r4, #0]
 8015f78:	6961      	ldr	r1, [r4, #20]
 8015f7a:	1d18      	adds	r0, r3, #4
 8015f7c:	6028      	str	r0, [r5, #0]
 8015f7e:	0635      	lsls	r5, r6, #24
 8015f80:	681b      	ldr	r3, [r3, #0]
 8015f82:	d501      	bpl.n	8015f88 <_printf_i+0x1cc>
 8015f84:	6019      	str	r1, [r3, #0]
 8015f86:	e002      	b.n	8015f8e <_printf_i+0x1d2>
 8015f88:	0670      	lsls	r0, r6, #25
 8015f8a:	d5fb      	bpl.n	8015f84 <_printf_i+0x1c8>
 8015f8c:	8019      	strh	r1, [r3, #0]
 8015f8e:	2300      	movs	r3, #0
 8015f90:	6123      	str	r3, [r4, #16]
 8015f92:	4615      	mov	r5, r2
 8015f94:	e7ba      	b.n	8015f0c <_printf_i+0x150>
 8015f96:	682b      	ldr	r3, [r5, #0]
 8015f98:	1d1a      	adds	r2, r3, #4
 8015f9a:	602a      	str	r2, [r5, #0]
 8015f9c:	681d      	ldr	r5, [r3, #0]
 8015f9e:	6862      	ldr	r2, [r4, #4]
 8015fa0:	2100      	movs	r1, #0
 8015fa2:	4628      	mov	r0, r5
 8015fa4:	f7ea f924 	bl	80001f0 <memchr>
 8015fa8:	b108      	cbz	r0, 8015fae <_printf_i+0x1f2>
 8015faa:	1b40      	subs	r0, r0, r5
 8015fac:	6060      	str	r0, [r4, #4]
 8015fae:	6863      	ldr	r3, [r4, #4]
 8015fb0:	6123      	str	r3, [r4, #16]
 8015fb2:	2300      	movs	r3, #0
 8015fb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015fb8:	e7a8      	b.n	8015f0c <_printf_i+0x150>
 8015fba:	6923      	ldr	r3, [r4, #16]
 8015fbc:	462a      	mov	r2, r5
 8015fbe:	4649      	mov	r1, r9
 8015fc0:	4640      	mov	r0, r8
 8015fc2:	47d0      	blx	sl
 8015fc4:	3001      	adds	r0, #1
 8015fc6:	d0ab      	beq.n	8015f20 <_printf_i+0x164>
 8015fc8:	6823      	ldr	r3, [r4, #0]
 8015fca:	079b      	lsls	r3, r3, #30
 8015fcc:	d413      	bmi.n	8015ff6 <_printf_i+0x23a>
 8015fce:	68e0      	ldr	r0, [r4, #12]
 8015fd0:	9b03      	ldr	r3, [sp, #12]
 8015fd2:	4298      	cmp	r0, r3
 8015fd4:	bfb8      	it	lt
 8015fd6:	4618      	movlt	r0, r3
 8015fd8:	e7a4      	b.n	8015f24 <_printf_i+0x168>
 8015fda:	2301      	movs	r3, #1
 8015fdc:	4632      	mov	r2, r6
 8015fde:	4649      	mov	r1, r9
 8015fe0:	4640      	mov	r0, r8
 8015fe2:	47d0      	blx	sl
 8015fe4:	3001      	adds	r0, #1
 8015fe6:	d09b      	beq.n	8015f20 <_printf_i+0x164>
 8015fe8:	3501      	adds	r5, #1
 8015fea:	68e3      	ldr	r3, [r4, #12]
 8015fec:	9903      	ldr	r1, [sp, #12]
 8015fee:	1a5b      	subs	r3, r3, r1
 8015ff0:	42ab      	cmp	r3, r5
 8015ff2:	dcf2      	bgt.n	8015fda <_printf_i+0x21e>
 8015ff4:	e7eb      	b.n	8015fce <_printf_i+0x212>
 8015ff6:	2500      	movs	r5, #0
 8015ff8:	f104 0619 	add.w	r6, r4, #25
 8015ffc:	e7f5      	b.n	8015fea <_printf_i+0x22e>
 8015ffe:	bf00      	nop
 8016000:	0801976d 	.word	0x0801976d
 8016004:	0801977e 	.word	0x0801977e

08016008 <_sbrk_r>:
 8016008:	b538      	push	{r3, r4, r5, lr}
 801600a:	4d06      	ldr	r5, [pc, #24]	; (8016024 <_sbrk_r+0x1c>)
 801600c:	2300      	movs	r3, #0
 801600e:	4604      	mov	r4, r0
 8016010:	4608      	mov	r0, r1
 8016012:	602b      	str	r3, [r5, #0]
 8016014:	f7ea fe62 	bl	8000cdc <_sbrk>
 8016018:	1c43      	adds	r3, r0, #1
 801601a:	d102      	bne.n	8016022 <_sbrk_r+0x1a>
 801601c:	682b      	ldr	r3, [r5, #0]
 801601e:	b103      	cbz	r3, 8016022 <_sbrk_r+0x1a>
 8016020:	6023      	str	r3, [r4, #0]
 8016022:	bd38      	pop	{r3, r4, r5, pc}
 8016024:	2000d508 	.word	0x2000d508

08016028 <__sread>:
 8016028:	b510      	push	{r4, lr}
 801602a:	460c      	mov	r4, r1
 801602c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016030:	f000 fa6e 	bl	8016510 <_read_r>
 8016034:	2800      	cmp	r0, #0
 8016036:	bfab      	itete	ge
 8016038:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801603a:	89a3      	ldrhlt	r3, [r4, #12]
 801603c:	181b      	addge	r3, r3, r0
 801603e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016042:	bfac      	ite	ge
 8016044:	6563      	strge	r3, [r4, #84]	; 0x54
 8016046:	81a3      	strhlt	r3, [r4, #12]
 8016048:	bd10      	pop	{r4, pc}

0801604a <__swrite>:
 801604a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801604e:	461f      	mov	r7, r3
 8016050:	898b      	ldrh	r3, [r1, #12]
 8016052:	05db      	lsls	r3, r3, #23
 8016054:	4605      	mov	r5, r0
 8016056:	460c      	mov	r4, r1
 8016058:	4616      	mov	r6, r2
 801605a:	d505      	bpl.n	8016068 <__swrite+0x1e>
 801605c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016060:	2302      	movs	r3, #2
 8016062:	2200      	movs	r2, #0
 8016064:	f000 f9d0 	bl	8016408 <_lseek_r>
 8016068:	89a3      	ldrh	r3, [r4, #12]
 801606a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801606e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016072:	81a3      	strh	r3, [r4, #12]
 8016074:	4632      	mov	r2, r6
 8016076:	463b      	mov	r3, r7
 8016078:	4628      	mov	r0, r5
 801607a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801607e:	f000 b869 	b.w	8016154 <_write_r>

08016082 <__sseek>:
 8016082:	b510      	push	{r4, lr}
 8016084:	460c      	mov	r4, r1
 8016086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801608a:	f000 f9bd 	bl	8016408 <_lseek_r>
 801608e:	1c43      	adds	r3, r0, #1
 8016090:	89a3      	ldrh	r3, [r4, #12]
 8016092:	bf15      	itete	ne
 8016094:	6560      	strne	r0, [r4, #84]	; 0x54
 8016096:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801609a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801609e:	81a3      	strheq	r3, [r4, #12]
 80160a0:	bf18      	it	ne
 80160a2:	81a3      	strhne	r3, [r4, #12]
 80160a4:	bd10      	pop	{r4, pc}

080160a6 <__sclose>:
 80160a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80160aa:	f000 b8db 	b.w	8016264 <_close_r>
	...

080160b0 <__swbuf_r>:
 80160b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160b2:	460e      	mov	r6, r1
 80160b4:	4614      	mov	r4, r2
 80160b6:	4605      	mov	r5, r0
 80160b8:	b118      	cbz	r0, 80160c2 <__swbuf_r+0x12>
 80160ba:	6983      	ldr	r3, [r0, #24]
 80160bc:	b90b      	cbnz	r3, 80160c2 <__swbuf_r+0x12>
 80160be:	f7ff fb1b 	bl	80156f8 <__sinit>
 80160c2:	4b21      	ldr	r3, [pc, #132]	; (8016148 <__swbuf_r+0x98>)
 80160c4:	429c      	cmp	r4, r3
 80160c6:	d12b      	bne.n	8016120 <__swbuf_r+0x70>
 80160c8:	686c      	ldr	r4, [r5, #4]
 80160ca:	69a3      	ldr	r3, [r4, #24]
 80160cc:	60a3      	str	r3, [r4, #8]
 80160ce:	89a3      	ldrh	r3, [r4, #12]
 80160d0:	071a      	lsls	r2, r3, #28
 80160d2:	d52f      	bpl.n	8016134 <__swbuf_r+0x84>
 80160d4:	6923      	ldr	r3, [r4, #16]
 80160d6:	b36b      	cbz	r3, 8016134 <__swbuf_r+0x84>
 80160d8:	6923      	ldr	r3, [r4, #16]
 80160da:	6820      	ldr	r0, [r4, #0]
 80160dc:	1ac0      	subs	r0, r0, r3
 80160de:	6963      	ldr	r3, [r4, #20]
 80160e0:	b2f6      	uxtb	r6, r6
 80160e2:	4283      	cmp	r3, r0
 80160e4:	4637      	mov	r7, r6
 80160e6:	dc04      	bgt.n	80160f2 <__swbuf_r+0x42>
 80160e8:	4621      	mov	r1, r4
 80160ea:	4628      	mov	r0, r5
 80160ec:	f000 f950 	bl	8016390 <_fflush_r>
 80160f0:	bb30      	cbnz	r0, 8016140 <__swbuf_r+0x90>
 80160f2:	68a3      	ldr	r3, [r4, #8]
 80160f4:	3b01      	subs	r3, #1
 80160f6:	60a3      	str	r3, [r4, #8]
 80160f8:	6823      	ldr	r3, [r4, #0]
 80160fa:	1c5a      	adds	r2, r3, #1
 80160fc:	6022      	str	r2, [r4, #0]
 80160fe:	701e      	strb	r6, [r3, #0]
 8016100:	6963      	ldr	r3, [r4, #20]
 8016102:	3001      	adds	r0, #1
 8016104:	4283      	cmp	r3, r0
 8016106:	d004      	beq.n	8016112 <__swbuf_r+0x62>
 8016108:	89a3      	ldrh	r3, [r4, #12]
 801610a:	07db      	lsls	r3, r3, #31
 801610c:	d506      	bpl.n	801611c <__swbuf_r+0x6c>
 801610e:	2e0a      	cmp	r6, #10
 8016110:	d104      	bne.n	801611c <__swbuf_r+0x6c>
 8016112:	4621      	mov	r1, r4
 8016114:	4628      	mov	r0, r5
 8016116:	f000 f93b 	bl	8016390 <_fflush_r>
 801611a:	b988      	cbnz	r0, 8016140 <__swbuf_r+0x90>
 801611c:	4638      	mov	r0, r7
 801611e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016120:	4b0a      	ldr	r3, [pc, #40]	; (801614c <__swbuf_r+0x9c>)
 8016122:	429c      	cmp	r4, r3
 8016124:	d101      	bne.n	801612a <__swbuf_r+0x7a>
 8016126:	68ac      	ldr	r4, [r5, #8]
 8016128:	e7cf      	b.n	80160ca <__swbuf_r+0x1a>
 801612a:	4b09      	ldr	r3, [pc, #36]	; (8016150 <__swbuf_r+0xa0>)
 801612c:	429c      	cmp	r4, r3
 801612e:	bf08      	it	eq
 8016130:	68ec      	ldreq	r4, [r5, #12]
 8016132:	e7ca      	b.n	80160ca <__swbuf_r+0x1a>
 8016134:	4621      	mov	r1, r4
 8016136:	4628      	mov	r0, r5
 8016138:	f000 f81e 	bl	8016178 <__swsetup_r>
 801613c:	2800      	cmp	r0, #0
 801613e:	d0cb      	beq.n	80160d8 <__swbuf_r+0x28>
 8016140:	f04f 37ff 	mov.w	r7, #4294967295
 8016144:	e7ea      	b.n	801611c <__swbuf_r+0x6c>
 8016146:	bf00      	nop
 8016148:	0801971c 	.word	0x0801971c
 801614c:	0801973c 	.word	0x0801973c
 8016150:	080196fc 	.word	0x080196fc

08016154 <_write_r>:
 8016154:	b538      	push	{r3, r4, r5, lr}
 8016156:	4d07      	ldr	r5, [pc, #28]	; (8016174 <_write_r+0x20>)
 8016158:	4604      	mov	r4, r0
 801615a:	4608      	mov	r0, r1
 801615c:	4611      	mov	r1, r2
 801615e:	2200      	movs	r2, #0
 8016160:	602a      	str	r2, [r5, #0]
 8016162:	461a      	mov	r2, r3
 8016164:	f7ea fd69 	bl	8000c3a <_write>
 8016168:	1c43      	adds	r3, r0, #1
 801616a:	d102      	bne.n	8016172 <_write_r+0x1e>
 801616c:	682b      	ldr	r3, [r5, #0]
 801616e:	b103      	cbz	r3, 8016172 <_write_r+0x1e>
 8016170:	6023      	str	r3, [r4, #0]
 8016172:	bd38      	pop	{r3, r4, r5, pc}
 8016174:	2000d508 	.word	0x2000d508

08016178 <__swsetup_r>:
 8016178:	4b32      	ldr	r3, [pc, #200]	; (8016244 <__swsetup_r+0xcc>)
 801617a:	b570      	push	{r4, r5, r6, lr}
 801617c:	681d      	ldr	r5, [r3, #0]
 801617e:	4606      	mov	r6, r0
 8016180:	460c      	mov	r4, r1
 8016182:	b125      	cbz	r5, 801618e <__swsetup_r+0x16>
 8016184:	69ab      	ldr	r3, [r5, #24]
 8016186:	b913      	cbnz	r3, 801618e <__swsetup_r+0x16>
 8016188:	4628      	mov	r0, r5
 801618a:	f7ff fab5 	bl	80156f8 <__sinit>
 801618e:	4b2e      	ldr	r3, [pc, #184]	; (8016248 <__swsetup_r+0xd0>)
 8016190:	429c      	cmp	r4, r3
 8016192:	d10f      	bne.n	80161b4 <__swsetup_r+0x3c>
 8016194:	686c      	ldr	r4, [r5, #4]
 8016196:	89a3      	ldrh	r3, [r4, #12]
 8016198:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801619c:	0719      	lsls	r1, r3, #28
 801619e:	d42c      	bmi.n	80161fa <__swsetup_r+0x82>
 80161a0:	06dd      	lsls	r5, r3, #27
 80161a2:	d411      	bmi.n	80161c8 <__swsetup_r+0x50>
 80161a4:	2309      	movs	r3, #9
 80161a6:	6033      	str	r3, [r6, #0]
 80161a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80161ac:	81a3      	strh	r3, [r4, #12]
 80161ae:	f04f 30ff 	mov.w	r0, #4294967295
 80161b2:	e03e      	b.n	8016232 <__swsetup_r+0xba>
 80161b4:	4b25      	ldr	r3, [pc, #148]	; (801624c <__swsetup_r+0xd4>)
 80161b6:	429c      	cmp	r4, r3
 80161b8:	d101      	bne.n	80161be <__swsetup_r+0x46>
 80161ba:	68ac      	ldr	r4, [r5, #8]
 80161bc:	e7eb      	b.n	8016196 <__swsetup_r+0x1e>
 80161be:	4b24      	ldr	r3, [pc, #144]	; (8016250 <__swsetup_r+0xd8>)
 80161c0:	429c      	cmp	r4, r3
 80161c2:	bf08      	it	eq
 80161c4:	68ec      	ldreq	r4, [r5, #12]
 80161c6:	e7e6      	b.n	8016196 <__swsetup_r+0x1e>
 80161c8:	0758      	lsls	r0, r3, #29
 80161ca:	d512      	bpl.n	80161f2 <__swsetup_r+0x7a>
 80161cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80161ce:	b141      	cbz	r1, 80161e2 <__swsetup_r+0x6a>
 80161d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80161d4:	4299      	cmp	r1, r3
 80161d6:	d002      	beq.n	80161de <__swsetup_r+0x66>
 80161d8:	4630      	mov	r0, r6
 80161da:	f7ff fb47 	bl	801586c <_free_r>
 80161de:	2300      	movs	r3, #0
 80161e0:	6363      	str	r3, [r4, #52]	; 0x34
 80161e2:	89a3      	ldrh	r3, [r4, #12]
 80161e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80161e8:	81a3      	strh	r3, [r4, #12]
 80161ea:	2300      	movs	r3, #0
 80161ec:	6063      	str	r3, [r4, #4]
 80161ee:	6923      	ldr	r3, [r4, #16]
 80161f0:	6023      	str	r3, [r4, #0]
 80161f2:	89a3      	ldrh	r3, [r4, #12]
 80161f4:	f043 0308 	orr.w	r3, r3, #8
 80161f8:	81a3      	strh	r3, [r4, #12]
 80161fa:	6923      	ldr	r3, [r4, #16]
 80161fc:	b94b      	cbnz	r3, 8016212 <__swsetup_r+0x9a>
 80161fe:	89a3      	ldrh	r3, [r4, #12]
 8016200:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016208:	d003      	beq.n	8016212 <__swsetup_r+0x9a>
 801620a:	4621      	mov	r1, r4
 801620c:	4630      	mov	r0, r6
 801620e:	f000 f933 	bl	8016478 <__smakebuf_r>
 8016212:	89a0      	ldrh	r0, [r4, #12]
 8016214:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016218:	f010 0301 	ands.w	r3, r0, #1
 801621c:	d00a      	beq.n	8016234 <__swsetup_r+0xbc>
 801621e:	2300      	movs	r3, #0
 8016220:	60a3      	str	r3, [r4, #8]
 8016222:	6963      	ldr	r3, [r4, #20]
 8016224:	425b      	negs	r3, r3
 8016226:	61a3      	str	r3, [r4, #24]
 8016228:	6923      	ldr	r3, [r4, #16]
 801622a:	b943      	cbnz	r3, 801623e <__swsetup_r+0xc6>
 801622c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016230:	d1ba      	bne.n	80161a8 <__swsetup_r+0x30>
 8016232:	bd70      	pop	{r4, r5, r6, pc}
 8016234:	0781      	lsls	r1, r0, #30
 8016236:	bf58      	it	pl
 8016238:	6963      	ldrpl	r3, [r4, #20]
 801623a:	60a3      	str	r3, [r4, #8]
 801623c:	e7f4      	b.n	8016228 <__swsetup_r+0xb0>
 801623e:	2000      	movs	r0, #0
 8016240:	e7f7      	b.n	8016232 <__swsetup_r+0xba>
 8016242:	bf00      	nop
 8016244:	20000034 	.word	0x20000034
 8016248:	0801971c 	.word	0x0801971c
 801624c:	0801973c 	.word	0x0801973c
 8016250:	080196fc 	.word	0x080196fc

08016254 <abort>:
 8016254:	b508      	push	{r3, lr}
 8016256:	2006      	movs	r0, #6
 8016258:	f000 f994 	bl	8016584 <raise>
 801625c:	2001      	movs	r0, #1
 801625e:	f7ea fcc5 	bl	8000bec <_exit>
	...

08016264 <_close_r>:
 8016264:	b538      	push	{r3, r4, r5, lr}
 8016266:	4d06      	ldr	r5, [pc, #24]	; (8016280 <_close_r+0x1c>)
 8016268:	2300      	movs	r3, #0
 801626a:	4604      	mov	r4, r0
 801626c:	4608      	mov	r0, r1
 801626e:	602b      	str	r3, [r5, #0]
 8016270:	f7ea fcff 	bl	8000c72 <_close>
 8016274:	1c43      	adds	r3, r0, #1
 8016276:	d102      	bne.n	801627e <_close_r+0x1a>
 8016278:	682b      	ldr	r3, [r5, #0]
 801627a:	b103      	cbz	r3, 801627e <_close_r+0x1a>
 801627c:	6023      	str	r3, [r4, #0]
 801627e:	bd38      	pop	{r3, r4, r5, pc}
 8016280:	2000d508 	.word	0x2000d508

08016284 <__sflush_r>:
 8016284:	898a      	ldrh	r2, [r1, #12]
 8016286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801628a:	4605      	mov	r5, r0
 801628c:	0710      	lsls	r0, r2, #28
 801628e:	460c      	mov	r4, r1
 8016290:	d458      	bmi.n	8016344 <__sflush_r+0xc0>
 8016292:	684b      	ldr	r3, [r1, #4]
 8016294:	2b00      	cmp	r3, #0
 8016296:	dc05      	bgt.n	80162a4 <__sflush_r+0x20>
 8016298:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801629a:	2b00      	cmp	r3, #0
 801629c:	dc02      	bgt.n	80162a4 <__sflush_r+0x20>
 801629e:	2000      	movs	r0, #0
 80162a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80162a6:	2e00      	cmp	r6, #0
 80162a8:	d0f9      	beq.n	801629e <__sflush_r+0x1a>
 80162aa:	2300      	movs	r3, #0
 80162ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80162b0:	682f      	ldr	r7, [r5, #0]
 80162b2:	602b      	str	r3, [r5, #0]
 80162b4:	d032      	beq.n	801631c <__sflush_r+0x98>
 80162b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80162b8:	89a3      	ldrh	r3, [r4, #12]
 80162ba:	075a      	lsls	r2, r3, #29
 80162bc:	d505      	bpl.n	80162ca <__sflush_r+0x46>
 80162be:	6863      	ldr	r3, [r4, #4]
 80162c0:	1ac0      	subs	r0, r0, r3
 80162c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80162c4:	b10b      	cbz	r3, 80162ca <__sflush_r+0x46>
 80162c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80162c8:	1ac0      	subs	r0, r0, r3
 80162ca:	2300      	movs	r3, #0
 80162cc:	4602      	mov	r2, r0
 80162ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80162d0:	6a21      	ldr	r1, [r4, #32]
 80162d2:	4628      	mov	r0, r5
 80162d4:	47b0      	blx	r6
 80162d6:	1c43      	adds	r3, r0, #1
 80162d8:	89a3      	ldrh	r3, [r4, #12]
 80162da:	d106      	bne.n	80162ea <__sflush_r+0x66>
 80162dc:	6829      	ldr	r1, [r5, #0]
 80162de:	291d      	cmp	r1, #29
 80162e0:	d82c      	bhi.n	801633c <__sflush_r+0xb8>
 80162e2:	4a2a      	ldr	r2, [pc, #168]	; (801638c <__sflush_r+0x108>)
 80162e4:	40ca      	lsrs	r2, r1
 80162e6:	07d6      	lsls	r6, r2, #31
 80162e8:	d528      	bpl.n	801633c <__sflush_r+0xb8>
 80162ea:	2200      	movs	r2, #0
 80162ec:	6062      	str	r2, [r4, #4]
 80162ee:	04d9      	lsls	r1, r3, #19
 80162f0:	6922      	ldr	r2, [r4, #16]
 80162f2:	6022      	str	r2, [r4, #0]
 80162f4:	d504      	bpl.n	8016300 <__sflush_r+0x7c>
 80162f6:	1c42      	adds	r2, r0, #1
 80162f8:	d101      	bne.n	80162fe <__sflush_r+0x7a>
 80162fa:	682b      	ldr	r3, [r5, #0]
 80162fc:	b903      	cbnz	r3, 8016300 <__sflush_r+0x7c>
 80162fe:	6560      	str	r0, [r4, #84]	; 0x54
 8016300:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016302:	602f      	str	r7, [r5, #0]
 8016304:	2900      	cmp	r1, #0
 8016306:	d0ca      	beq.n	801629e <__sflush_r+0x1a>
 8016308:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801630c:	4299      	cmp	r1, r3
 801630e:	d002      	beq.n	8016316 <__sflush_r+0x92>
 8016310:	4628      	mov	r0, r5
 8016312:	f7ff faab 	bl	801586c <_free_r>
 8016316:	2000      	movs	r0, #0
 8016318:	6360      	str	r0, [r4, #52]	; 0x34
 801631a:	e7c1      	b.n	80162a0 <__sflush_r+0x1c>
 801631c:	6a21      	ldr	r1, [r4, #32]
 801631e:	2301      	movs	r3, #1
 8016320:	4628      	mov	r0, r5
 8016322:	47b0      	blx	r6
 8016324:	1c41      	adds	r1, r0, #1
 8016326:	d1c7      	bne.n	80162b8 <__sflush_r+0x34>
 8016328:	682b      	ldr	r3, [r5, #0]
 801632a:	2b00      	cmp	r3, #0
 801632c:	d0c4      	beq.n	80162b8 <__sflush_r+0x34>
 801632e:	2b1d      	cmp	r3, #29
 8016330:	d001      	beq.n	8016336 <__sflush_r+0xb2>
 8016332:	2b16      	cmp	r3, #22
 8016334:	d101      	bne.n	801633a <__sflush_r+0xb6>
 8016336:	602f      	str	r7, [r5, #0]
 8016338:	e7b1      	b.n	801629e <__sflush_r+0x1a>
 801633a:	89a3      	ldrh	r3, [r4, #12]
 801633c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016340:	81a3      	strh	r3, [r4, #12]
 8016342:	e7ad      	b.n	80162a0 <__sflush_r+0x1c>
 8016344:	690f      	ldr	r7, [r1, #16]
 8016346:	2f00      	cmp	r7, #0
 8016348:	d0a9      	beq.n	801629e <__sflush_r+0x1a>
 801634a:	0793      	lsls	r3, r2, #30
 801634c:	680e      	ldr	r6, [r1, #0]
 801634e:	bf08      	it	eq
 8016350:	694b      	ldreq	r3, [r1, #20]
 8016352:	600f      	str	r7, [r1, #0]
 8016354:	bf18      	it	ne
 8016356:	2300      	movne	r3, #0
 8016358:	eba6 0807 	sub.w	r8, r6, r7
 801635c:	608b      	str	r3, [r1, #8]
 801635e:	f1b8 0f00 	cmp.w	r8, #0
 8016362:	dd9c      	ble.n	801629e <__sflush_r+0x1a>
 8016364:	6a21      	ldr	r1, [r4, #32]
 8016366:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016368:	4643      	mov	r3, r8
 801636a:	463a      	mov	r2, r7
 801636c:	4628      	mov	r0, r5
 801636e:	47b0      	blx	r6
 8016370:	2800      	cmp	r0, #0
 8016372:	dc06      	bgt.n	8016382 <__sflush_r+0xfe>
 8016374:	89a3      	ldrh	r3, [r4, #12]
 8016376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801637a:	81a3      	strh	r3, [r4, #12]
 801637c:	f04f 30ff 	mov.w	r0, #4294967295
 8016380:	e78e      	b.n	80162a0 <__sflush_r+0x1c>
 8016382:	4407      	add	r7, r0
 8016384:	eba8 0800 	sub.w	r8, r8, r0
 8016388:	e7e9      	b.n	801635e <__sflush_r+0xda>
 801638a:	bf00      	nop
 801638c:	20400001 	.word	0x20400001

08016390 <_fflush_r>:
 8016390:	b538      	push	{r3, r4, r5, lr}
 8016392:	690b      	ldr	r3, [r1, #16]
 8016394:	4605      	mov	r5, r0
 8016396:	460c      	mov	r4, r1
 8016398:	b913      	cbnz	r3, 80163a0 <_fflush_r+0x10>
 801639a:	2500      	movs	r5, #0
 801639c:	4628      	mov	r0, r5
 801639e:	bd38      	pop	{r3, r4, r5, pc}
 80163a0:	b118      	cbz	r0, 80163aa <_fflush_r+0x1a>
 80163a2:	6983      	ldr	r3, [r0, #24]
 80163a4:	b90b      	cbnz	r3, 80163aa <_fflush_r+0x1a>
 80163a6:	f7ff f9a7 	bl	80156f8 <__sinit>
 80163aa:	4b14      	ldr	r3, [pc, #80]	; (80163fc <_fflush_r+0x6c>)
 80163ac:	429c      	cmp	r4, r3
 80163ae:	d11b      	bne.n	80163e8 <_fflush_r+0x58>
 80163b0:	686c      	ldr	r4, [r5, #4]
 80163b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d0ef      	beq.n	801639a <_fflush_r+0xa>
 80163ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80163bc:	07d0      	lsls	r0, r2, #31
 80163be:	d404      	bmi.n	80163ca <_fflush_r+0x3a>
 80163c0:	0599      	lsls	r1, r3, #22
 80163c2:	d402      	bmi.n	80163ca <_fflush_r+0x3a>
 80163c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80163c6:	f7ff fa47 	bl	8015858 <__retarget_lock_acquire_recursive>
 80163ca:	4628      	mov	r0, r5
 80163cc:	4621      	mov	r1, r4
 80163ce:	f7ff ff59 	bl	8016284 <__sflush_r>
 80163d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80163d4:	07da      	lsls	r2, r3, #31
 80163d6:	4605      	mov	r5, r0
 80163d8:	d4e0      	bmi.n	801639c <_fflush_r+0xc>
 80163da:	89a3      	ldrh	r3, [r4, #12]
 80163dc:	059b      	lsls	r3, r3, #22
 80163de:	d4dd      	bmi.n	801639c <_fflush_r+0xc>
 80163e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80163e2:	f7ff fa3a 	bl	801585a <__retarget_lock_release_recursive>
 80163e6:	e7d9      	b.n	801639c <_fflush_r+0xc>
 80163e8:	4b05      	ldr	r3, [pc, #20]	; (8016400 <_fflush_r+0x70>)
 80163ea:	429c      	cmp	r4, r3
 80163ec:	d101      	bne.n	80163f2 <_fflush_r+0x62>
 80163ee:	68ac      	ldr	r4, [r5, #8]
 80163f0:	e7df      	b.n	80163b2 <_fflush_r+0x22>
 80163f2:	4b04      	ldr	r3, [pc, #16]	; (8016404 <_fflush_r+0x74>)
 80163f4:	429c      	cmp	r4, r3
 80163f6:	bf08      	it	eq
 80163f8:	68ec      	ldreq	r4, [r5, #12]
 80163fa:	e7da      	b.n	80163b2 <_fflush_r+0x22>
 80163fc:	0801971c 	.word	0x0801971c
 8016400:	0801973c 	.word	0x0801973c
 8016404:	080196fc 	.word	0x080196fc

08016408 <_lseek_r>:
 8016408:	b538      	push	{r3, r4, r5, lr}
 801640a:	4d07      	ldr	r5, [pc, #28]	; (8016428 <_lseek_r+0x20>)
 801640c:	4604      	mov	r4, r0
 801640e:	4608      	mov	r0, r1
 8016410:	4611      	mov	r1, r2
 8016412:	2200      	movs	r2, #0
 8016414:	602a      	str	r2, [r5, #0]
 8016416:	461a      	mov	r2, r3
 8016418:	f7ea fc52 	bl	8000cc0 <_lseek>
 801641c:	1c43      	adds	r3, r0, #1
 801641e:	d102      	bne.n	8016426 <_lseek_r+0x1e>
 8016420:	682b      	ldr	r3, [r5, #0]
 8016422:	b103      	cbz	r3, 8016426 <_lseek_r+0x1e>
 8016424:	6023      	str	r3, [r4, #0]
 8016426:	bd38      	pop	{r3, r4, r5, pc}
 8016428:	2000d508 	.word	0x2000d508

0801642c <__swhatbuf_r>:
 801642c:	b570      	push	{r4, r5, r6, lr}
 801642e:	460e      	mov	r6, r1
 8016430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016434:	2900      	cmp	r1, #0
 8016436:	b096      	sub	sp, #88	; 0x58
 8016438:	4614      	mov	r4, r2
 801643a:	461d      	mov	r5, r3
 801643c:	da08      	bge.n	8016450 <__swhatbuf_r+0x24>
 801643e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016442:	2200      	movs	r2, #0
 8016444:	602a      	str	r2, [r5, #0]
 8016446:	061a      	lsls	r2, r3, #24
 8016448:	d410      	bmi.n	801646c <__swhatbuf_r+0x40>
 801644a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801644e:	e00e      	b.n	801646e <__swhatbuf_r+0x42>
 8016450:	466a      	mov	r2, sp
 8016452:	f000 f8b3 	bl	80165bc <_fstat_r>
 8016456:	2800      	cmp	r0, #0
 8016458:	dbf1      	blt.n	801643e <__swhatbuf_r+0x12>
 801645a:	9a01      	ldr	r2, [sp, #4]
 801645c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016460:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016464:	425a      	negs	r2, r3
 8016466:	415a      	adcs	r2, r3
 8016468:	602a      	str	r2, [r5, #0]
 801646a:	e7ee      	b.n	801644a <__swhatbuf_r+0x1e>
 801646c:	2340      	movs	r3, #64	; 0x40
 801646e:	2000      	movs	r0, #0
 8016470:	6023      	str	r3, [r4, #0]
 8016472:	b016      	add	sp, #88	; 0x58
 8016474:	bd70      	pop	{r4, r5, r6, pc}
	...

08016478 <__smakebuf_r>:
 8016478:	898b      	ldrh	r3, [r1, #12]
 801647a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801647c:	079d      	lsls	r5, r3, #30
 801647e:	4606      	mov	r6, r0
 8016480:	460c      	mov	r4, r1
 8016482:	d507      	bpl.n	8016494 <__smakebuf_r+0x1c>
 8016484:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016488:	6023      	str	r3, [r4, #0]
 801648a:	6123      	str	r3, [r4, #16]
 801648c:	2301      	movs	r3, #1
 801648e:	6163      	str	r3, [r4, #20]
 8016490:	b002      	add	sp, #8
 8016492:	bd70      	pop	{r4, r5, r6, pc}
 8016494:	ab01      	add	r3, sp, #4
 8016496:	466a      	mov	r2, sp
 8016498:	f7ff ffc8 	bl	801642c <__swhatbuf_r>
 801649c:	9900      	ldr	r1, [sp, #0]
 801649e:	4605      	mov	r5, r0
 80164a0:	4630      	mov	r0, r6
 80164a2:	f7ff fa4f 	bl	8015944 <_malloc_r>
 80164a6:	b948      	cbnz	r0, 80164bc <__smakebuf_r+0x44>
 80164a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80164ac:	059a      	lsls	r2, r3, #22
 80164ae:	d4ef      	bmi.n	8016490 <__smakebuf_r+0x18>
 80164b0:	f023 0303 	bic.w	r3, r3, #3
 80164b4:	f043 0302 	orr.w	r3, r3, #2
 80164b8:	81a3      	strh	r3, [r4, #12]
 80164ba:	e7e3      	b.n	8016484 <__smakebuf_r+0xc>
 80164bc:	4b0d      	ldr	r3, [pc, #52]	; (80164f4 <__smakebuf_r+0x7c>)
 80164be:	62b3      	str	r3, [r6, #40]	; 0x28
 80164c0:	89a3      	ldrh	r3, [r4, #12]
 80164c2:	6020      	str	r0, [r4, #0]
 80164c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80164c8:	81a3      	strh	r3, [r4, #12]
 80164ca:	9b00      	ldr	r3, [sp, #0]
 80164cc:	6163      	str	r3, [r4, #20]
 80164ce:	9b01      	ldr	r3, [sp, #4]
 80164d0:	6120      	str	r0, [r4, #16]
 80164d2:	b15b      	cbz	r3, 80164ec <__smakebuf_r+0x74>
 80164d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80164d8:	4630      	mov	r0, r6
 80164da:	f000 f881 	bl	80165e0 <_isatty_r>
 80164de:	b128      	cbz	r0, 80164ec <__smakebuf_r+0x74>
 80164e0:	89a3      	ldrh	r3, [r4, #12]
 80164e2:	f023 0303 	bic.w	r3, r3, #3
 80164e6:	f043 0301 	orr.w	r3, r3, #1
 80164ea:	81a3      	strh	r3, [r4, #12]
 80164ec:	89a0      	ldrh	r0, [r4, #12]
 80164ee:	4305      	orrs	r5, r0
 80164f0:	81a5      	strh	r5, [r4, #12]
 80164f2:	e7cd      	b.n	8016490 <__smakebuf_r+0x18>
 80164f4:	08015691 	.word	0x08015691

080164f8 <__malloc_lock>:
 80164f8:	4801      	ldr	r0, [pc, #4]	; (8016500 <__malloc_lock+0x8>)
 80164fa:	f7ff b9ad 	b.w	8015858 <__retarget_lock_acquire_recursive>
 80164fe:	bf00      	nop
 8016500:	2000d510 	.word	0x2000d510

08016504 <__malloc_unlock>:
 8016504:	4801      	ldr	r0, [pc, #4]	; (801650c <__malloc_unlock+0x8>)
 8016506:	f7ff b9a8 	b.w	801585a <__retarget_lock_release_recursive>
 801650a:	bf00      	nop
 801650c:	2000d510 	.word	0x2000d510

08016510 <_read_r>:
 8016510:	b538      	push	{r3, r4, r5, lr}
 8016512:	4d07      	ldr	r5, [pc, #28]	; (8016530 <_read_r+0x20>)
 8016514:	4604      	mov	r4, r0
 8016516:	4608      	mov	r0, r1
 8016518:	4611      	mov	r1, r2
 801651a:	2200      	movs	r2, #0
 801651c:	602a      	str	r2, [r5, #0]
 801651e:	461a      	mov	r2, r3
 8016520:	f7ea fb6e 	bl	8000c00 <_read>
 8016524:	1c43      	adds	r3, r0, #1
 8016526:	d102      	bne.n	801652e <_read_r+0x1e>
 8016528:	682b      	ldr	r3, [r5, #0]
 801652a:	b103      	cbz	r3, 801652e <_read_r+0x1e>
 801652c:	6023      	str	r3, [r4, #0]
 801652e:	bd38      	pop	{r3, r4, r5, pc}
 8016530:	2000d508 	.word	0x2000d508

08016534 <_raise_r>:
 8016534:	291f      	cmp	r1, #31
 8016536:	b538      	push	{r3, r4, r5, lr}
 8016538:	4604      	mov	r4, r0
 801653a:	460d      	mov	r5, r1
 801653c:	d904      	bls.n	8016548 <_raise_r+0x14>
 801653e:	2316      	movs	r3, #22
 8016540:	6003      	str	r3, [r0, #0]
 8016542:	f04f 30ff 	mov.w	r0, #4294967295
 8016546:	bd38      	pop	{r3, r4, r5, pc}
 8016548:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801654a:	b112      	cbz	r2, 8016552 <_raise_r+0x1e>
 801654c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016550:	b94b      	cbnz	r3, 8016566 <_raise_r+0x32>
 8016552:	4620      	mov	r0, r4
 8016554:	f000 f830 	bl	80165b8 <_getpid_r>
 8016558:	462a      	mov	r2, r5
 801655a:	4601      	mov	r1, r0
 801655c:	4620      	mov	r0, r4
 801655e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016562:	f000 b817 	b.w	8016594 <_kill_r>
 8016566:	2b01      	cmp	r3, #1
 8016568:	d00a      	beq.n	8016580 <_raise_r+0x4c>
 801656a:	1c59      	adds	r1, r3, #1
 801656c:	d103      	bne.n	8016576 <_raise_r+0x42>
 801656e:	2316      	movs	r3, #22
 8016570:	6003      	str	r3, [r0, #0]
 8016572:	2001      	movs	r0, #1
 8016574:	e7e7      	b.n	8016546 <_raise_r+0x12>
 8016576:	2400      	movs	r4, #0
 8016578:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801657c:	4628      	mov	r0, r5
 801657e:	4798      	blx	r3
 8016580:	2000      	movs	r0, #0
 8016582:	e7e0      	b.n	8016546 <_raise_r+0x12>

08016584 <raise>:
 8016584:	4b02      	ldr	r3, [pc, #8]	; (8016590 <raise+0xc>)
 8016586:	4601      	mov	r1, r0
 8016588:	6818      	ldr	r0, [r3, #0]
 801658a:	f7ff bfd3 	b.w	8016534 <_raise_r>
 801658e:	bf00      	nop
 8016590:	20000034 	.word	0x20000034

08016594 <_kill_r>:
 8016594:	b538      	push	{r3, r4, r5, lr}
 8016596:	4d07      	ldr	r5, [pc, #28]	; (80165b4 <_kill_r+0x20>)
 8016598:	2300      	movs	r3, #0
 801659a:	4604      	mov	r4, r0
 801659c:	4608      	mov	r0, r1
 801659e:	4611      	mov	r1, r2
 80165a0:	602b      	str	r3, [r5, #0]
 80165a2:	f7ea fb11 	bl	8000bc8 <_kill>
 80165a6:	1c43      	adds	r3, r0, #1
 80165a8:	d102      	bne.n	80165b0 <_kill_r+0x1c>
 80165aa:	682b      	ldr	r3, [r5, #0]
 80165ac:	b103      	cbz	r3, 80165b0 <_kill_r+0x1c>
 80165ae:	6023      	str	r3, [r4, #0]
 80165b0:	bd38      	pop	{r3, r4, r5, pc}
 80165b2:	bf00      	nop
 80165b4:	2000d508 	.word	0x2000d508

080165b8 <_getpid_r>:
 80165b8:	f7ea bafe 	b.w	8000bb8 <_getpid>

080165bc <_fstat_r>:
 80165bc:	b538      	push	{r3, r4, r5, lr}
 80165be:	4d07      	ldr	r5, [pc, #28]	; (80165dc <_fstat_r+0x20>)
 80165c0:	2300      	movs	r3, #0
 80165c2:	4604      	mov	r4, r0
 80165c4:	4608      	mov	r0, r1
 80165c6:	4611      	mov	r1, r2
 80165c8:	602b      	str	r3, [r5, #0]
 80165ca:	f7ea fb5e 	bl	8000c8a <_fstat>
 80165ce:	1c43      	adds	r3, r0, #1
 80165d0:	d102      	bne.n	80165d8 <_fstat_r+0x1c>
 80165d2:	682b      	ldr	r3, [r5, #0]
 80165d4:	b103      	cbz	r3, 80165d8 <_fstat_r+0x1c>
 80165d6:	6023      	str	r3, [r4, #0]
 80165d8:	bd38      	pop	{r3, r4, r5, pc}
 80165da:	bf00      	nop
 80165dc:	2000d508 	.word	0x2000d508

080165e0 <_isatty_r>:
 80165e0:	b538      	push	{r3, r4, r5, lr}
 80165e2:	4d06      	ldr	r5, [pc, #24]	; (80165fc <_isatty_r+0x1c>)
 80165e4:	2300      	movs	r3, #0
 80165e6:	4604      	mov	r4, r0
 80165e8:	4608      	mov	r0, r1
 80165ea:	602b      	str	r3, [r5, #0]
 80165ec:	f7ea fb5d 	bl	8000caa <_isatty>
 80165f0:	1c43      	adds	r3, r0, #1
 80165f2:	d102      	bne.n	80165fa <_isatty_r+0x1a>
 80165f4:	682b      	ldr	r3, [r5, #0]
 80165f6:	b103      	cbz	r3, 80165fa <_isatty_r+0x1a>
 80165f8:	6023      	str	r3, [r4, #0]
 80165fa:	bd38      	pop	{r3, r4, r5, pc}
 80165fc:	2000d508 	.word	0x2000d508

08016600 <_init>:
 8016600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016602:	bf00      	nop
 8016604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016606:	bc08      	pop	{r3}
 8016608:	469e      	mov	lr, r3
 801660a:	4770      	bx	lr

0801660c <_fini>:
 801660c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801660e:	bf00      	nop
 8016610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016612:	bc08      	pop	{r3}
 8016614:	469e      	mov	lr, r3
 8016616:	4770      	bx	lr
