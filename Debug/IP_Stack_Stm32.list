
IP_Stack_Stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018218  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000053c0  080183c8  080183c8  000283c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d788  0801d788  000300dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801d788  0801d788  0002d788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d790  0801d790  000300dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d790  0801d790  0002d790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d794  0801d794  0002d794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  0801d798  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300dc  2**0
                  CONTENTS
 10 .bss          0000dac0  200000dc  200000dc  000300dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000db9c  2000db9c  000300dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00030e85  00000000  00000000  0003010c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007816  00000000  00000000  00060f91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002398  00000000  00000000  000687a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002280  00000000  00000000  0006ab40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00012616  00000000  00000000  0006cdc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003616d  00000000  00000000  0007f3d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fe1c7  00000000  00000000  000b5543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b370a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009d70  00000000  00000000  001b375c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000dc 	.word	0x200000dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080183b0 	.word	0x080183b0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000e0 	.word	0x200000e0
 80001ec:	080183b0 	.word	0x080183b0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a8:	f000 fd8a 	bl	80010c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f820 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 f90c 	bl	80007cc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005b4:	f000 f8b2 	bl	800071c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005b8:	f000 f8da 	bl	8000770 <MX_USB_OTG_FS_PCD_Init>
  MX_USART1_SMARTCARD_Init();
 80005bc:	f000 f882 	bl	80006c4 <MX_USART1_SMARTCARD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005c0:	f005 f8a0 	bl	8005704 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  printf("Hello World\n");
 80005c4:	4806      	ldr	r0, [pc, #24]	; (80005e0 <main+0x3c>)
 80005c6:	f016 fe6b 	bl	80172a0 <puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005ca:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <main+0x40>)
 80005cc:	2100      	movs	r1, #0
 80005ce:	4806      	ldr	r0, [pc, #24]	; (80005e8 <main+0x44>)
 80005d0:	f005 f8f7 	bl	80057c2 <osThreadNew>
 80005d4:	4603      	mov	r3, r0
 80005d6:	4a05      	ldr	r2, [pc, #20]	; (80005ec <main+0x48>)
 80005d8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005da:	f005 f8b7 	bl	800574c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005de:	e7fe      	b.n	80005de <main+0x3a>
 80005e0:	080183d4 	.word	0x080183d4
 80005e4:	0801d454 	.word	0x0801d454
 80005e8:	0800094d 	.word	0x0800094d
 80005ec:	20000698 	.word	0x20000698

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	; 0x50
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	2230      	movs	r2, #48	; 0x30
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f016 fdaa 	bl	8017158 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	4b28      	ldr	r3, [pc, #160]	; (80006bc <SystemClock_Config+0xcc>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	4a27      	ldr	r2, [pc, #156]	; (80006bc <SystemClock_Config+0xcc>)
 800061e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000622:	6413      	str	r3, [r2, #64]	; 0x40
 8000624:	4b25      	ldr	r3, [pc, #148]	; (80006bc <SystemClock_Config+0xcc>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	4b22      	ldr	r3, [pc, #136]	; (80006c0 <SystemClock_Config+0xd0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a21      	ldr	r2, [pc, #132]	; (80006c0 <SystemClock_Config+0xd0>)
 800063a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b1f      	ldr	r3, [pc, #124]	; (80006c0 <SystemClock_Config+0xd0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800064c:	2301      	movs	r3, #1
 800064e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000650:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000654:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000656:	2302      	movs	r3, #2
 8000658:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800065e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000660:	2304      	movs	r3, #4
 8000662:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000664:	23a8      	movs	r3, #168	; 0xa8
 8000666:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000668:	2302      	movs	r3, #2
 800066a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800066c:	2307      	movs	r3, #7
 800066e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 0320 	add.w	r3, r7, #32
 8000674:	4618      	mov	r0, r3
 8000676:	f002 fc5d 	bl	8002f34 <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000680:	f000 f96e 	bl	8000960 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000688:	2302      	movs	r3, #2
 800068a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000690:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000694:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2105      	movs	r1, #5
 80006a2:	4618      	mov	r0, r3
 80006a4:	f002 febe 	bl	8003424 <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ae:	f000 f957 	bl	8000960 <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3750      	adds	r7, #80	; 0x50
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40007000 	.word	0x40007000

080006c4 <MX_USART1_SMARTCARD_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_SMARTCARD_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  hsc1.Instance = USART1;
 80006c8:	4b12      	ldr	r3, [pc, #72]	; (8000714 <MX_USART1_SMARTCARD_Init+0x50>)
 80006ca:	4a13      	ldr	r2, [pc, #76]	; (8000718 <MX_USART1_SMARTCARD_Init+0x54>)
 80006cc:	601a      	str	r2, [r3, #0]
  hsc1.Init.BaudRate = 115200;
 80006ce:	4b11      	ldr	r3, [pc, #68]	; (8000714 <MX_USART1_SMARTCARD_Init+0x50>)
 80006d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d4:	605a      	str	r2, [r3, #4]
  hsc1.Init.WordLength = SMARTCARD_WORDLENGTH_9B;
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <MX_USART1_SMARTCARD_Init+0x50>)
 80006d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006dc:	609a      	str	r2, [r3, #8]
  hsc1.Init.StopBits = SMARTCARD_STOPBITS_1_5;
 80006de:	4b0d      	ldr	r3, [pc, #52]	; (8000714 <MX_USART1_SMARTCARD_Init+0x50>)
 80006e0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80006e4:	60da      	str	r2, [r3, #12]
  hsc1.Init.Parity = SMARTCARD_PARITY_EVEN;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <MX_USART1_SMARTCARD_Init+0x50>)
 80006e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006ec:	611a      	str	r2, [r3, #16]
  hsc1.Init.Mode = SMARTCARD_MODE_TX_RX;
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_USART1_SMARTCARD_Init+0x50>)
 80006f0:	220c      	movs	r2, #12
 80006f2:	615a      	str	r2, [r3, #20]
  hsc1.Init.GuardTime = 0;
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <MX_USART1_SMARTCARD_Init+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	629a      	str	r2, [r3, #40]	; 0x28
  hsc1.Init.NACKState = SMARTCARD_NACK_DISABLE;
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_USART1_SMARTCARD_Init+0x50>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SMARTCARD_Init(&hsc1) != HAL_OK)
 8000700:	4804      	ldr	r0, [pc, #16]	; (8000714 <MX_USART1_SMARTCARD_Init+0x50>)
 8000702:	f003 f8af 	bl	8003864 <HAL_SMARTCARD_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_USART1_SMARTCARD_Init+0x4c>
  {
    Error_Handler();
 800070c:	f000 f928 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	200000f8 	.word	0x200000f8
 8000718:	40011000 	.word	0x40011000

0800071c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_USART3_UART_Init+0x4c>)
 8000722:	4a12      	ldr	r2, [pc, #72]	; (800076c <MX_USART3_UART_Init+0x50>)
 8000724:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <MX_USART3_UART_Init+0x4c>)
 8000728:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800072c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_USART3_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_USART3_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <MX_USART3_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_USART3_UART_Init+0x4c>)
 8000742:	220c      	movs	r2, #12
 8000744:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <MX_USART3_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_USART3_UART_Init+0x4c>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_USART3_UART_Init+0x4c>)
 8000754:	f003 fbae 	bl	8003eb4 <HAL_UART_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800075e:	f000 f8ff 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000148 	.word	0x20000148
 800076c:	40004800 	.word	0x40004800

08000770 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000774:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000776:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800077a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077e:	2204      	movs	r2, #4
 8000780:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000784:	2202      	movs	r2, #2
 8000786:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000790:	2202      	movs	r2, #2
 8000792:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000796:	2201      	movs	r2, #1
 8000798:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b4:	f002 faa1 	bl	8002cfa <HAL_PCD_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007be:	f000 f8cf 	bl	8000960 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	2000018c 	.word	0x2000018c

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08c      	sub	sp, #48	; 0x30
 80007d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	61bb      	str	r3, [r7, #24]
 80007e6:	4b4c      	ldr	r3, [pc, #304]	; (8000918 <MX_GPIO_Init+0x14c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a4b      	ldr	r2, [pc, #300]	; (8000918 <MX_GPIO_Init+0x14c>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b49      	ldr	r3, [pc, #292]	; (8000918 <MX_GPIO_Init+0x14c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	61bb      	str	r3, [r7, #24]
 80007fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
 8000802:	4b45      	ldr	r3, [pc, #276]	; (8000918 <MX_GPIO_Init+0x14c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a44      	ldr	r2, [pc, #272]	; (8000918 <MX_GPIO_Init+0x14c>)
 8000808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b42      	ldr	r3, [pc, #264]	; (8000918 <MX_GPIO_Init+0x14c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
 800081e:	4b3e      	ldr	r3, [pc, #248]	; (8000918 <MX_GPIO_Init+0x14c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a3d      	ldr	r2, [pc, #244]	; (8000918 <MX_GPIO_Init+0x14c>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b3b      	ldr	r3, [pc, #236]	; (8000918 <MX_GPIO_Init+0x14c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	4b37      	ldr	r3, [pc, #220]	; (8000918 <MX_GPIO_Init+0x14c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a36      	ldr	r2, [pc, #216]	; (8000918 <MX_GPIO_Init+0x14c>)
 8000840:	f043 0302 	orr.w	r3, r3, #2
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b34      	ldr	r3, [pc, #208]	; (8000918 <MX_GPIO_Init+0x14c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0302 	and.w	r3, r3, #2
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	4b30      	ldr	r3, [pc, #192]	; (8000918 <MX_GPIO_Init+0x14c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a2f      	ldr	r2, [pc, #188]	; (8000918 <MX_GPIO_Init+0x14c>)
 800085c:	f043 0308 	orr.w	r3, r3, #8
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b2d      	ldr	r3, [pc, #180]	; (8000918 <MX_GPIO_Init+0x14c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0308 	and.w	r3, r3, #8
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b29      	ldr	r3, [pc, #164]	; (8000918 <MX_GPIO_Init+0x14c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a28      	ldr	r2, [pc, #160]	; (8000918 <MX_GPIO_Init+0x14c>)
 8000878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b26      	ldr	r3, [pc, #152]	; (8000918 <MX_GPIO_Init+0x14c>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000890:	4822      	ldr	r0, [pc, #136]	; (800091c <MX_GPIO_Init+0x150>)
 8000892:	f002 fa19 	bl	8002cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	2140      	movs	r1, #64	; 0x40
 800089a:	4821      	ldr	r0, [pc, #132]	; (8000920 <MX_GPIO_Init+0x154>)
 800089c:	f002 fa14 	bl	8002cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	481b      	ldr	r0, [pc, #108]	; (8000924 <MX_GPIO_Init+0x158>)
 80008b8:	f002 f85a 	bl	8002970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|LD2_Pin;
 80008bc:	f244 0381 	movw	r3, #16513	; 0x4081
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	4811      	ldr	r0, [pc, #68]	; (800091c <MX_GPIO_Init+0x150>)
 80008d6:	f002 f84b 	bl	8002970 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008da:	2340      	movs	r3, #64	; 0x40
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008de:	2301      	movs	r3, #1
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	480b      	ldr	r0, [pc, #44]	; (8000920 <MX_GPIO_Init+0x154>)
 80008f2:	f002 f83d 	bl	8002970 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008f6:	2380      	movs	r3, #128	; 0x80
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fa:	2300      	movs	r3, #0
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_GPIO_Init+0x154>)
 800090a:	f002 f831 	bl	8002970 <HAL_GPIO_Init>

}
 800090e:	bf00      	nop
 8000910:	3730      	adds	r7, #48	; 0x30
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40023800 	.word	0x40023800
 800091c:	40020400 	.word	0x40020400
 8000920:	40021800 	.word	0x40021800
 8000924:	40020800 	.word	0x40020800

08000928 <__io_putchar>:

/* USER CODE BEGIN 4 */

int __io_putchar(int ch) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit( & huart3, (uint8_t * ) & ch, 1, 0xFFFF);
 8000930:	1d39      	adds	r1, r7, #4
 8000932:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000936:	2201      	movs	r2, #1
 8000938:	4803      	ldr	r0, [pc, #12]	; (8000948 <__io_putchar+0x20>)
 800093a:	f003 fb08 	bl	8003f4e <HAL_UART_Transmit>
    return ch;
 800093e:	687b      	ldr	r3, [r7, #4]
}
 8000940:	4618      	mov	r0, r3
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000148 	.word	0x20000148

0800094c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000954:	f004 f972 	bl	8004c3c <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000958:	2001      	movs	r0, #1
 800095a:	f004 ffc4 	bl	80058e6 <osDelay>
 800095e:	e7fb      	b.n	8000958 <StartDefaultTask+0xc>

08000960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000964:	b672      	cpsid	i
}
 8000966:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000968:	e7fe      	b.n	8000968 <Error_Handler+0x8>
	...

0800096c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <HAL_MspInit+0x54>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097a:	4a11      	ldr	r2, [pc, #68]	; (80009c0 <HAL_MspInit+0x54>)
 800097c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000980:	6453      	str	r3, [r2, #68]	; 0x44
 8000982:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <HAL_MspInit+0x54>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <HAL_MspInit+0x54>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000996:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <HAL_MspInit+0x54>)
 8000998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099c:	6413      	str	r3, [r2, #64]	; 0x40
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <HAL_MspInit+0x54>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	210f      	movs	r1, #15
 80009ae:	f06f 0001 	mvn.w	r0, #1
 80009b2:	f000 fcf6 	bl	80013a2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800

080009c4 <HAL_SMARTCARD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmartcard: SMARTCARD handle pointer
* @retval None
*/
void HAL_SMARTCARD_MspInit(SMARTCARD_HandleTypeDef* hsmartcard)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08a      	sub	sp, #40	; 0x28
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
  if(hsmartcard->Instance==USART1)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a19      	ldr	r2, [pc, #100]	; (8000a48 <HAL_SMARTCARD_MspInit+0x84>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d12b      	bne.n	8000a3e <HAL_SMARTCARD_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
 80009ea:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <HAL_SMARTCARD_MspInit+0x88>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ee:	4a17      	ldr	r2, [pc, #92]	; (8000a4c <HAL_SMARTCARD_MspInit+0x88>)
 80009f0:	f043 0310 	orr.w	r3, r3, #16
 80009f4:	6453      	str	r3, [r2, #68]	; 0x44
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <HAL_SMARTCARD_MspInit+0x88>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fa:	f003 0310 	and.w	r3, r3, #16
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <HAL_SMARTCARD_MspInit+0x88>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a10      	ldr	r2, [pc, #64]	; (8000a4c <HAL_SMARTCARD_MspInit+0x88>)
 8000a0c:	f043 0302 	orr.w	r3, r3, #2
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <HAL_SMARTCARD_MspInit+0x88>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0302 	and.w	r3, r3, #2
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a1e:	2340      	movs	r3, #64	; 0x40
 8000a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a22:	2312      	movs	r3, #18
 8000a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a2e:	2307      	movs	r3, #7
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	4619      	mov	r1, r3
 8000a38:	4805      	ldr	r0, [pc, #20]	; (8000a50 <HAL_SMARTCARD_MspInit+0x8c>)
 8000a3a:	f001 ff99 	bl	8002970 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a3e:	bf00      	nop
 8000a40:	3728      	adds	r7, #40	; 0x28
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40011000 	.word	0x40011000
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40020400 	.word	0x40020400

08000a54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	; 0x28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a19      	ldr	r2, [pc, #100]	; (8000ad8 <HAL_UART_MspInit+0x84>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d12c      	bne.n	8000ad0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	4b18      	ldr	r3, [pc, #96]	; (8000adc <HAL_UART_MspInit+0x88>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	4a17      	ldr	r2, [pc, #92]	; (8000adc <HAL_UART_MspInit+0x88>)
 8000a80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a84:	6413      	str	r3, [r2, #64]	; 0x40
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <HAL_UART_MspInit+0x88>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <HAL_UART_MspInit+0x88>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a10      	ldr	r2, [pc, #64]	; (8000adc <HAL_UART_MspInit+0x88>)
 8000a9c:	f043 0308 	orr.w	r3, r3, #8
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <HAL_UART_MspInit+0x88>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0308 	and.w	r3, r3, #8
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000aae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abc:	2303      	movs	r3, #3
 8000abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ac0:	2307      	movs	r3, #7
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <HAL_UART_MspInit+0x8c>)
 8000acc:	f001 ff50 	bl	8002970 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ad0:	bf00      	nop
 8000ad2:	3728      	adds	r7, #40	; 0x28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40004800 	.word	0x40004800
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40020c00 	.word	0x40020c00

08000ae4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	; 0x28
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b04:	d13f      	bne.n	8000b86 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	4b21      	ldr	r3, [pc, #132]	; (8000b90 <HAL_PCD_MspInit+0xac>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a20      	ldr	r2, [pc, #128]	; (8000b90 <HAL_PCD_MspInit+0xac>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b1e      	ldr	r3, [pc, #120]	; (8000b90 <HAL_PCD_MspInit+0xac>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b22:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b30:	2303      	movs	r3, #3
 8000b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b34:	230a      	movs	r3, #10
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4815      	ldr	r0, [pc, #84]	; (8000b94 <HAL_PCD_MspInit+0xb0>)
 8000b40:	f001 ff16 	bl	8002970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	480e      	ldr	r0, [pc, #56]	; (8000b94 <HAL_PCD_MspInit+0xb0>)
 8000b5a:	f001 ff09 	bl	8002970 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_PCD_MspInit+0xac>)
 8000b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b62:	4a0b      	ldr	r2, [pc, #44]	; (8000b90 <HAL_PCD_MspInit+0xac>)
 8000b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b68:	6353      	str	r3, [r2, #52]	; 0x34
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <HAL_PCD_MspInit+0xac>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b72:	4a07      	ldr	r2, [pc, #28]	; (8000b90 <HAL_PCD_MspInit+0xac>)
 8000b74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b78:	6453      	str	r3, [r2, #68]	; 0x44
 8000b7a:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <HAL_PCD_MspInit+0xac>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000b86:	bf00      	nop
 8000b88:	3728      	adds	r7, #40	; 0x28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020000 	.word	0x40020000

08000b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <NMI_Handler+0x4>

08000b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <HardFault_Handler+0x4>

08000ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <MemManage_Handler+0x4>

08000baa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <BusFault_Handler+0x4>

08000bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <UsageFault_Handler+0x4>

08000bb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc8:	f000 facc 	bl	8001164 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000bcc:	f007 f9f2 	bl	8007fb4 <xTaskGetSchedulerState>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d001      	beq.n	8000bda <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000bd6:	f008 f8d7 	bl	8008d88 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000be4:	4802      	ldr	r0, [pc, #8]	; (8000bf0 <ETH_IRQHandler+0x10>)
 8000be6:	f000 ffed 	bl	8001bc4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200051e0 	.word	0x200051e0

08000bf4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
	return 1;
 8000bf8:	2301      	movs	r3, #1
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <_kill>:

int _kill(int pid, int sig)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c0e:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <_kill+0x20>)
 8000c10:	2216      	movs	r2, #22
 8000c12:	601a      	str	r2, [r3, #0]
	return -1;
 8000c14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	2000db88 	.word	0x2000db88

08000c28 <_exit>:

void _exit (int status)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c30:	f04f 31ff 	mov.w	r1, #4294967295
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f7ff ffe5 	bl	8000c04 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c3a:	e7fe      	b.n	8000c3a <_exit+0x12>

08000c3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
 8000c4c:	e00a      	b.n	8000c64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c4e:	f3af 8000 	nop.w
 8000c52:	4601      	mov	r1, r0
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	1c5a      	adds	r2, r3, #1
 8000c58:	60ba      	str	r2, [r7, #8]
 8000c5a:	b2ca      	uxtb	r2, r1
 8000c5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	3301      	adds	r3, #1
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	697a      	ldr	r2, [r7, #20]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	dbf0      	blt.n	8000c4e <_read+0x12>
	}

return len;
 8000c6c:	687b      	ldr	r3, [r7, #4]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b086      	sub	sp, #24
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	60f8      	str	r0, [r7, #12]
 8000c7e:	60b9      	str	r1, [r7, #8]
 8000c80:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
 8000c86:	e009      	b.n	8000c9c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	1c5a      	adds	r2, r3, #1
 8000c8c:	60ba      	str	r2, [r7, #8]
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff fe49 	bl	8000928 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	697a      	ldr	r2, [r7, #20]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	dbf1      	blt.n	8000c88 <_write+0x12>
	}
	return len;
 8000ca4:	687b      	ldr	r3, [r7, #4]
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3718      	adds	r7, #24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <_close>:

int _close(int file)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	b083      	sub	sp, #12
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
	return -1;
 8000cb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b083      	sub	sp, #12
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
 8000cce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cd6:	605a      	str	r2, [r3, #4]
	return 0;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <_isatty>:

int _isatty(int file)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b083      	sub	sp, #12
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
	return 1;
 8000cee:	2301      	movs	r3, #1
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
	return 0;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3714      	adds	r7, #20
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
	...

08000d18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b087      	sub	sp, #28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d20:	4a14      	ldr	r2, [pc, #80]	; (8000d74 <_sbrk+0x5c>)
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <_sbrk+0x60>)
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d2c:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <_sbrk+0x64>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d102      	bne.n	8000d3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <_sbrk+0x64>)
 8000d36:	4a12      	ldr	r2, [pc, #72]	; (8000d80 <_sbrk+0x68>)
 8000d38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <_sbrk+0x64>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d205      	bcs.n	8000d54 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000d48:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <_sbrk+0x6c>)
 8000d4a:	220c      	movs	r2, #12
 8000d4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d52:	e009      	b.n	8000d68 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <_sbrk+0x64>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d5a:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <_sbrk+0x64>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	4a06      	ldr	r2, [pc, #24]	; (8000d7c <_sbrk+0x64>)
 8000d64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d66:	68fb      	ldr	r3, [r7, #12]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	371c      	adds	r7, #28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	20030000 	.word	0x20030000
 8000d78:	00000400 	.word	0x00000400
 8000d7c:	2000069c 	.word	0x2000069c
 8000d80:	2000dba0 	.word	0x2000dba0
 8000d84:	2000db88 	.word	0x2000db88

08000d88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <SystemInit+0x20>)
 8000d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d92:	4a05      	ldr	r2, [pc, #20]	; (8000da8 <SystemInit+0x20>)
 8000d94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000dac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db0:	480d      	ldr	r0, [pc, #52]	; (8000de8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000db2:	490e      	ldr	r1, [pc, #56]	; (8000dec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000db4:	4a0e      	ldr	r2, [pc, #56]	; (8000df0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db8:	e002      	b.n	8000dc0 <LoopCopyDataInit>

08000dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dbe:	3304      	adds	r3, #4

08000dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc4:	d3f9      	bcc.n	8000dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc6:	4a0b      	ldr	r2, [pc, #44]	; (8000df4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dc8:	4c0b      	ldr	r4, [pc, #44]	; (8000df8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dcc:	e001      	b.n	8000dd2 <LoopFillZerobss>

08000dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd0:	3204      	adds	r2, #4

08000dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd4:	d3fb      	bcc.n	8000dce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dd6:	f7ff ffd7 	bl	8000d88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dda:	f016 f97b 	bl	80170d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dde:	f7ff fbe1 	bl	80005a4 <main>
  bx  lr    
 8000de2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000de4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dec:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8000df0:	0801d798 	.word	0x0801d798
  ldr r2, =_sbss
 8000df4:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 8000df8:	2000db9c 	.word	0x2000db9c

08000dfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dfc:	e7fe      	b.n	8000dfc <ADC_IRQHandler>

08000dfe <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	b083      	sub	sp, #12
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
 8000e06:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d00b      	beq.n	8000e26 <LAN8742_RegisterBusIO+0x28>
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	68db      	ldr	r3, [r3, #12]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d007      	beq.n	8000e26 <LAN8742_RegisterBusIO+0x28>
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d003      	beq.n	8000e26 <LAN8742_RegisterBusIO+0x28>
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	691b      	ldr	r3, [r3, #16]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d102      	bne.n	8000e2c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2a:	e014      	b.n	8000e56 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685a      	ldr	r2, [r3, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	68da      	ldr	r2, [r3, #12]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	689a      	ldr	r2, [r3, #8]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	691a      	ldr	r2, [r3, #16]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b086      	sub	sp, #24
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d17c      	bne.n	8000f7c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d002      	beq.n	8000e90 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2220      	movs	r2, #32
 8000e94:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
 8000e9a:	e01c      	b.n	8000ed6 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	695b      	ldr	r3, [r3, #20]
 8000ea0:	f107 0208 	add.w	r2, r7, #8
 8000ea4:	2112      	movs	r1, #18
 8000ea6:	6978      	ldr	r0, [r7, #20]
 8000ea8:	4798      	blx	r3
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	da03      	bge.n	8000eb8 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000eb0:	f06f 0304 	mvn.w	r3, #4
 8000eb4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000eb6:	e00b      	b.n	8000ed0 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	f003 031f 	and.w	r3, r3, #31
 8000ebe:	697a      	ldr	r2, [r7, #20]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d105      	bne.n	8000ed0 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	697a      	ldr	r2, [r7, #20]
 8000ec8:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
         break;
 8000ece:	e005      	b.n	8000edc <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	617b      	str	r3, [r7, #20]
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	2b1f      	cmp	r3, #31
 8000eda:	d9df      	bls.n	8000e9c <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b1f      	cmp	r3, #31
 8000ee2:	d902      	bls.n	8000eea <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000ee4:	f06f 0302 	mvn.w	r3, #2
 8000ee8:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d145      	bne.n	8000f7c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	691b      	ldr	r3, [r3, #16]
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	6810      	ldr	r0, [r2, #0]
 8000ef8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000efc:	2100      	movs	r1, #0
 8000efe:	4798      	blx	r3
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	db37      	blt.n	8000f76 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	6810      	ldr	r0, [r2, #0]
 8000f0e:	f107 0208 	add.w	r2, r7, #8
 8000f12:	2100      	movs	r1, #0
 8000f14:	4798      	blx	r3
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	db28      	blt.n	8000f6e <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	4798      	blx	r3
 8000f22:	4603      	mov	r3, r0
 8000f24:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000f26:	e01c      	b.n	8000f62 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	4798      	blx	r3
 8000f2e:	4603      	mov	r3, r0
 8000f30:	461a      	mov	r2, r3
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f3a:	d80e      	bhi.n	8000f5a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	695b      	ldr	r3, [r3, #20]
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	6810      	ldr	r0, [r2, #0]
 8000f44:	f107 0208 	add.w	r2, r7, #8
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4798      	blx	r3
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	da07      	bge.n	8000f62 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000f52:	f06f 0304 	mvn.w	r3, #4
 8000f56:	613b      	str	r3, [r7, #16]
                 break;
 8000f58:	e010      	b.n	8000f7c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000f5a:	f06f 0301 	mvn.w	r3, #1
 8000f5e:	613b      	str	r3, [r7, #16]
               break;
 8000f60:	e00c      	b.n	8000f7c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d1dd      	bne.n	8000f28 <LAN8742_Init+0xc6>
 8000f6c:	e006      	b.n	8000f7c <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000f6e:	f06f 0304 	mvn.w	r3, #4
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	e002      	b.n	8000f7c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000f76:	f06f 0303 	mvn.w	r3, #3
 8000f7a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d112      	bne.n	8000fa8 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	699b      	ldr	r3, [r3, #24]
 8000f86:	4798      	blx	r3
 8000f88:	4603      	mov	r3, r0
 8000f8a:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000f8c:	bf00      	nop
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	4798      	blx	r3
 8000f94:	4603      	mov	r3, r0
 8000f96:	461a      	mov	r2, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000fa0:	d9f5      	bls.n	8000f8e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000fa8:	693b      	ldr	r3, [r7, #16]
 }
 8000faa:	4618      	mov	r0, r3
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b084      	sub	sp, #16
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	6810      	ldr	r0, [r2, #0]
 8000fc6:	f107 020c 	add.w	r2, r7, #12
 8000fca:	2101      	movs	r1, #1
 8000fcc:	4798      	blx	r3
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	da02      	bge.n	8000fda <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000fd4:	f06f 0304 	mvn.w	r3, #4
 8000fd8:	e06e      	b.n	80010b8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	6810      	ldr	r0, [r2, #0]
 8000fe2:	f107 020c 	add.w	r2, r7, #12
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	4798      	blx	r3
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	da02      	bge.n	8000ff6 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000ff0:	f06f 0304 	mvn.w	r3, #4
 8000ff4:	e060      	b.n	80010b8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	f003 0304 	and.w	r3, r3, #4
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d101      	bne.n	8001004 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001000:	2301      	movs	r3, #1
 8001002:	e059      	b.n	80010b8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	695b      	ldr	r3, [r3, #20]
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	6810      	ldr	r0, [r2, #0]
 800100c:	f107 020c 	add.w	r2, r7, #12
 8001010:	2100      	movs	r1, #0
 8001012:	4798      	blx	r3
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	da02      	bge.n	8001020 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800101a:	f06f 0304 	mvn.w	r3, #4
 800101e:	e04b      	b.n	80010b8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d11b      	bne.n	8001062 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d006      	beq.n	8001042 <LAN8742_GetLinkState+0x90>
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800103e:	2302      	movs	r3, #2
 8001040:	e03a      	b.n	80010b8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800104c:	2303      	movs	r3, #3
 800104e:	e033      	b.n	80010b8 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800105a:	2304      	movs	r3, #4
 800105c:	e02c      	b.n	80010b8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800105e:	2305      	movs	r3, #5
 8001060:	e02a      	b.n	80010b8 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	6810      	ldr	r0, [r2, #0]
 800106a:	f107 020c 	add.w	r2, r7, #12
 800106e:	211f      	movs	r1, #31
 8001070:	4798      	blx	r3
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	da02      	bge.n	800107e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001078:	f06f 0304 	mvn.w	r3, #4
 800107c:	e01c      	b.n	80010b8 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d101      	bne.n	800108c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001088:	2306      	movs	r3, #6
 800108a:	e015      	b.n	80010b8 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f003 031c 	and.w	r3, r3, #28
 8001092:	2b18      	cmp	r3, #24
 8001094:	d101      	bne.n	800109a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001096:	2302      	movs	r3, #2
 8001098:	e00e      	b.n	80010b8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f003 031c 	and.w	r3, r3, #28
 80010a0:	2b08      	cmp	r3, #8
 80010a2:	d101      	bne.n	80010a8 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e007      	b.n	80010b8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f003 031c 	and.w	r3, r3, #28
 80010ae:	2b14      	cmp	r3, #20
 80010b0:	d101      	bne.n	80010b6 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80010b2:	2304      	movs	r3, #4
 80010b4:	e000      	b.n	80010b8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80010b6:	2305      	movs	r3, #5
    }				
  }
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010c4:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <HAL_Init+0x40>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a0d      	ldr	r2, [pc, #52]	; (8001100 <HAL_Init+0x40>)
 80010ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010d0:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <HAL_Init+0x40>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a0a      	ldr	r2, [pc, #40]	; (8001100 <HAL_Init+0x40>)
 80010d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <HAL_Init+0x40>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a07      	ldr	r2, [pc, #28]	; (8001100 <HAL_Init+0x40>)
 80010e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e8:	2003      	movs	r0, #3
 80010ea:	f000 f94f 	bl	800138c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ee:	200f      	movs	r0, #15
 80010f0:	f000 f808 	bl	8001104 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f4:	f7ff fc3a 	bl	800096c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40023c00 	.word	0x40023c00

08001104 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800110c:	4b12      	ldr	r3, [pc, #72]	; (8001158 <HAL_InitTick+0x54>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <HAL_InitTick+0x58>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	4619      	mov	r1, r3
 8001116:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111a:	fbb3 f3f1 	udiv	r3, r3, r1
 800111e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001122:	4618      	mov	r0, r3
 8001124:	f000 f967 	bl	80013f6 <HAL_SYSTICK_Config>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e00e      	b.n	8001150 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b0f      	cmp	r3, #15
 8001136:	d80a      	bhi.n	800114e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001138:	2200      	movs	r2, #0
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	f04f 30ff 	mov.w	r0, #4294967295
 8001140:	f000 f92f 	bl	80013a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001144:	4a06      	ldr	r2, [pc, #24]	; (8001160 <HAL_InitTick+0x5c>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800114a:	2300      	movs	r3, #0
 800114c:	e000      	b.n	8001150 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
}
 8001150:	4618      	mov	r0, r3
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000000 	.word	0x20000000
 800115c:	20000008 	.word	0x20000008
 8001160:	20000004 	.word	0x20000004

08001164 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_IncTick+0x20>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	461a      	mov	r2, r3
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <HAL_IncTick+0x24>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4413      	add	r3, r2
 8001174:	4a04      	ldr	r2, [pc, #16]	; (8001188 <HAL_IncTick+0x24>)
 8001176:	6013      	str	r3, [r2, #0]
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20000008 	.word	0x20000008
 8001188:	200006a0 	.word	0x200006a0

0800118c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return uwTick;
 8001190:	4b03      	ldr	r3, [pc, #12]	; (80011a0 <HAL_GetTick+0x14>)
 8001192:	681b      	ldr	r3, [r3, #0]
}
 8001194:	4618      	mov	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	200006a0 	.word	0x200006a0

080011a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011ac:	f7ff ffee 	bl	800118c <HAL_GetTick>
 80011b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011bc:	d005      	beq.n	80011ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011be:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <HAL_Delay+0x44>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	461a      	mov	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4413      	add	r3, r2
 80011c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011ca:	bf00      	nop
 80011cc:	f7ff ffde 	bl	800118c <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d8f7      	bhi.n	80011cc <HAL_Delay+0x28>
  {
  }
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000008 	.word	0x20000008

080011ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <__NVIC_SetPriorityGrouping+0x44>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001208:	4013      	ands	r3, r2
 800120a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001214:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800121c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800121e:	4a04      	ldr	r2, [pc, #16]	; (8001230 <__NVIC_SetPriorityGrouping+0x44>)
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	60d3      	str	r3, [r2, #12]
}
 8001224:	bf00      	nop
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001238:	4b04      	ldr	r3, [pc, #16]	; (800124c <__NVIC_GetPriorityGrouping+0x18>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	0a1b      	lsrs	r3, r3, #8
 800123e:	f003 0307 	and.w	r3, r3, #7
}
 8001242:	4618      	mov	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	2b00      	cmp	r3, #0
 8001260:	db0b      	blt.n	800127a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	f003 021f 	and.w	r2, r3, #31
 8001268:	4907      	ldr	r1, [pc, #28]	; (8001288 <__NVIC_EnableIRQ+0x38>)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	095b      	lsrs	r3, r3, #5
 8001270:	2001      	movs	r0, #1
 8001272:	fa00 f202 	lsl.w	r2, r0, r2
 8001276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000e100 	.word	0xe000e100

0800128c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	6039      	str	r1, [r7, #0]
 8001296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129c:	2b00      	cmp	r3, #0
 800129e:	db0a      	blt.n	80012b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	490c      	ldr	r1, [pc, #48]	; (80012d8 <__NVIC_SetPriority+0x4c>)
 80012a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012aa:	0112      	lsls	r2, r2, #4
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	440b      	add	r3, r1
 80012b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b4:	e00a      	b.n	80012cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	4908      	ldr	r1, [pc, #32]	; (80012dc <__NVIC_SetPriority+0x50>)
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	f003 030f 	and.w	r3, r3, #15
 80012c2:	3b04      	subs	r3, #4
 80012c4:	0112      	lsls	r2, r2, #4
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	440b      	add	r3, r1
 80012ca:	761a      	strb	r2, [r3, #24]
}
 80012cc:	bf00      	nop
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000e100 	.word	0xe000e100
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b089      	sub	sp, #36	; 0x24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	f1c3 0307 	rsb	r3, r3, #7
 80012fa:	2b04      	cmp	r3, #4
 80012fc:	bf28      	it	cs
 80012fe:	2304      	movcs	r3, #4
 8001300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3304      	adds	r3, #4
 8001306:	2b06      	cmp	r3, #6
 8001308:	d902      	bls.n	8001310 <NVIC_EncodePriority+0x30>
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3b03      	subs	r3, #3
 800130e:	e000      	b.n	8001312 <NVIC_EncodePriority+0x32>
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001314:	f04f 32ff 	mov.w	r2, #4294967295
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43da      	mvns	r2, r3
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	401a      	ands	r2, r3
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001328:	f04f 31ff 	mov.w	r1, #4294967295
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	fa01 f303 	lsl.w	r3, r1, r3
 8001332:	43d9      	mvns	r1, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001338:	4313      	orrs	r3, r2
         );
}
 800133a:	4618      	mov	r0, r3
 800133c:	3724      	adds	r7, #36	; 0x24
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3b01      	subs	r3, #1
 8001354:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001358:	d301      	bcc.n	800135e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800135a:	2301      	movs	r3, #1
 800135c:	e00f      	b.n	800137e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800135e:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <SysTick_Config+0x40>)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3b01      	subs	r3, #1
 8001364:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001366:	210f      	movs	r1, #15
 8001368:	f04f 30ff 	mov.w	r0, #4294967295
 800136c:	f7ff ff8e 	bl	800128c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <SysTick_Config+0x40>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001376:	4b04      	ldr	r3, [pc, #16]	; (8001388 <SysTick_Config+0x40>)
 8001378:	2207      	movs	r2, #7
 800137a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	e000e010 	.word	0xe000e010

0800138c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f7ff ff29 	bl	80011ec <__NVIC_SetPriorityGrouping>
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b086      	sub	sp, #24
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	4603      	mov	r3, r0
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
 80013ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013b4:	f7ff ff3e 	bl	8001234 <__NVIC_GetPriorityGrouping>
 80013b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	68b9      	ldr	r1, [r7, #8]
 80013be:	6978      	ldr	r0, [r7, #20]
 80013c0:	f7ff ff8e 	bl	80012e0 <NVIC_EncodePriority>
 80013c4:	4602      	mov	r2, r0
 80013c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ca:	4611      	mov	r1, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff5d 	bl	800128c <__NVIC_SetPriority>
}
 80013d2:	bf00      	nop
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	4603      	mov	r3, r0
 80013e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff31 	bl	8001250 <__NVIC_EnableIRQ>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff ffa2 	bl	8001348 <SysTick_Config>
 8001404:	4603      	mov	r3, r0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e06c      	b.n	80014fc <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001428:	2b00      	cmp	r3, #0
 800142a:	d106      	bne.n	800143a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2223      	movs	r2, #35	; 0x23
 8001430:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f003 ff0b 	bl	8005250 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	4b31      	ldr	r3, [pc, #196]	; (8001504 <HAL_ETH_Init+0xf4>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	4a30      	ldr	r2, [pc, #192]	; (8001504 <HAL_ETH_Init+0xf4>)
 8001444:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001448:	6453      	str	r3, [r2, #68]	; 0x44
 800144a:	4b2e      	ldr	r3, [pc, #184]	; (8001504 <HAL_ETH_Init+0xf4>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001456:	4b2c      	ldr	r3, [pc, #176]	; (8001508 <HAL_ETH_Init+0xf8>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	4a2b      	ldr	r2, [pc, #172]	; (8001508 <HAL_ETH_Init+0xf8>)
 800145c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001460:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001462:	4b29      	ldr	r3, [pc, #164]	; (8001508 <HAL_ETH_Init+0xf8>)
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	4927      	ldr	r1, [pc, #156]	; (8001508 <HAL_ETH_Init+0xf8>)
 800146c:	4313      	orrs	r3, r2
 800146e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001470:	4b25      	ldr	r3, [pc, #148]	; (8001508 <HAL_ETH_Init+0xf8>)
 8001472:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	6812      	ldr	r2, [r2, #0]
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800148a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800148c:	f7ff fe7e 	bl	800118c <HAL_GetTick>
 8001490:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001492:	e011      	b.n	80014b8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001494:	f7ff fe7a 	bl	800118c <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014a2:	d909      	bls.n	80014b8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2204      	movs	r2, #4
 80014a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	22e0      	movs	r2, #224	; 0xe0
 80014b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e021      	b.n	80014fc <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1e4      	bne.n	8001494 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f000 ffaa 	bl	8002424 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f001 f851 	bl	8002578 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f001 f8a7 	bl	800262a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	461a      	mov	r2, r3
 80014e2:	2100      	movs	r1, #0
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f001 f80f 	bl	8002508 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2210      	movs	r2, #16
 80014f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40023800 	.word	0x40023800
 8001508:	40013800 	.word	0x40013800

0800150c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800151a:	2b10      	cmp	r3, #16
 800151c:	d150      	bne.n	80015c0 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2223      	movs	r2, #35	; 0x23
 8001522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2204      	movs	r2, #4
 800152a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f000 fa79 	bl	8001a24 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f042 0208 	orr.w	r2, r2, #8
 8001540:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800154a:	2001      	movs	r0, #1
 800154c:	f7ff fe2a 	bl	80011a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f042 0204 	orr.w	r2, r2, #4
 8001566:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001570:	2001      	movs	r0, #1
 8001572:	f7ff fe17 	bl	80011a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f000 fdf1 	bl	8002166 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	6812      	ldr	r2, [r2, #0]
 8001592:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001596:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800159a:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	6812      	ldr	r2, [r2, #0]
 80015aa:	f043 0302 	orr.w	r3, r3, #2
 80015ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015b2:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2223      	movs	r2, #35	; 0x23
 80015b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80015bc:	2300      	movs	r3, #0
 80015be:	e000      	b.n	80015c2 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
  }
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b084      	sub	sp, #16
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015d8:	2b10      	cmp	r3, #16
 80015da:	d17f      	bne.n	80016dc <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2223      	movs	r2, #35	; 0x23
 80015e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 80015f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	6812      	ldr	r2, [r2, #0]
 8001606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800160a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800160e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8001622:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2204      	movs	r2, #4
 800162a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 f9f9 	bl	8001a24 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f042 0208 	orr.w	r2, r2, #8
 8001640:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800164a:	2001      	movs	r0, #1
 800164c:	f7ff fdaa 	bl	80011a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f042 0204 	orr.w	r2, r2, #4
 8001666:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001670:	2001      	movs	r0, #1
 8001672:	f7ff fd97 	bl	80011a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 fd71 	bl	8002166 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	6812      	ldr	r2, [r2, #0]
 8001692:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001696:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800169a:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	6812      	ldr	r2, [r2, #0]
 80016aa:	f043 0302 	orr.w	r3, r3, #2
 80016ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016b2:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	6812      	ldr	r2, [r2, #0]
 80016c2:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 80016c6:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 80016ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016ce:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2223      	movs	r2, #35	; 0x23
 80016d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 80016d8:	2300      	movs	r3, #0
 80016da:	e000      	b.n	80016de <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
  }
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b086      	sub	sp, #24
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016f4:	2b23      	cmp	r3, #35	; 0x23
 80016f6:	d170      	bne.n	80017da <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2223      	movs	r2, #35	; 0x23
 80016fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6812      	ldr	r2, [r2, #0]
 800170e:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 8001712:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 8001716:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800171a:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	6812      	ldr	r2, [r2, #0]
 800172a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800172e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001732:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	6812      	ldr	r2, [r2, #0]
 8001742:	f023 0302 	bic.w	r3, r3, #2
 8001746:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800174a:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 0204 	bic.w	r2, r2, #4
 800175a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001764:	2001      	movs	r0, #1
 8001766:	f7ff fd1d 	bl	80011a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 fcf7 	bl	8002166 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 0208 	bic.w	r2, r2, #8
 8001786:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001790:	2001      	movs	r0, #1
 8001792:	f7ff fd07 	bl	80011a4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
 80017a2:	e00e      	b.n	80017c2 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	3212      	adds	r2, #18
 80017aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ae:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	3301      	adds	r3, #1
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	2b03      	cmp	r3, #3
 80017c6:	d9ed      	bls.n	80017a4 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2210      	movs	r2, #16
 80017d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80017d6:	2300      	movs	r3, #0
 80017d8:	e000      	b.n	80017dc <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
  }
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d109      	bne.n	8001808 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017fa:	f043 0201 	orr.w	r2, r3, #1
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e045      	b.n	8001894 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800180e:	2b23      	cmp	r3, #35	; 0x23
 8001810:	d13f      	bne.n	8001892 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800181a:	2201      	movs	r2, #1
 800181c:	6839      	ldr	r1, [r7, #0]
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f000 ff70 	bl	8002704 <ETH_Prepare_Tx_Descriptors>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d009      	beq.n	800183e <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001830:	f043 0202 	orr.w	r2, r3, #2
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e02a      	b.n	8001894 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800183e:	f3bf 8f4f 	dsb	sy
}
 8001842:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001848:	1c5a      	adds	r2, r3, #1
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	629a      	str	r2, [r3, #40]	; 0x28
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001852:	2b03      	cmp	r3, #3
 8001854:	d904      	bls.n	8001860 <HAL_ETH_Transmit_IT+0x7c>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185a:	1f1a      	subs	r2, r3, #4
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00d      	beq.n	800188e <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800187a:	461a      	mov	r2, r3
 800187c:	2304      	movs	r3, #4
 800187e:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001888:	461a      	mov	r2, r3
 800188a:	2300      	movs	r3, #0
 800188c:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 800188e:	2300      	movs	r3, #0
 8001890:	e000      	b.n	8001894 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
  }
}
 8001894:	4618      	mov	r0, r3
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b088      	sub	sp, #32
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80018aa:	2300      	movs	r3, #0
 80018ac:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d109      	bne.n	80018c8 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ba:	f043 0201 	orr.w	r2, r3, #1
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e0a8      	b.n	8001a1a <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018ce:	2b23      	cmp	r3, #35	; 0x23
 80018d0:	d001      	beq.n	80018d6 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e0a1      	b.n	8001a1a <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018da:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	69fa      	ldr	r2, [r7, #28]
 80018e0:	3212      	adds	r2, #18
 80018e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e6:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018ec:	f1c3 0304 	rsb	r3, r3, #4
 80018f0:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80018f2:	e06a      	b.n	80019ca <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d007      	beq.n	8001910 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	699a      	ldr	r2, [r3, #24]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	69da      	ldr	r2, [r3, #28]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001918:	2b00      	cmp	r3, #0
 800191a:	d103      	bne.n	8001924 <HAL_ETH_ReadData+0x88>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001920:	2b00      	cmp	r3, #0
 8001922:	d040      	beq.n	80019a6 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800192c:	2b00      	cmp	r3, #0
 800192e:	d005      	beq.n	800193c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194a:	2b00      	cmp	r3, #0
 800194c:	d00c      	beq.n	8001968 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	0c1b      	lsrs	r3, r3, #16
 8001954:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001958:	3b04      	subs	r3, #4
 800195a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001964:	2301      	movs	r3, #1
 8001966:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001980:	461a      	mov	r2, r3
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	b29b      	uxth	r3, r3
 8001986:	f003 fe3d 	bl	8005604 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800198e:	1c5a      	adds	r2, r3, #1
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	441a      	add	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	2200      	movs	r2, #0
 80019a4:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	3301      	adds	r3, #1
 80019aa:	61fb      	str	r3, [r7, #28]
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d902      	bls.n	80019b8 <HAL_ETH_ReadData+0x11c>
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	3b04      	subs	r3, #4
 80019b6:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	69fa      	ldr	r2, [r7, #28]
 80019bc:	3212      	adds	r2, #18
 80019be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019c2:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	3301      	adds	r3, #1
 80019c8:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	db06      	blt.n	80019e0 <HAL_ETH_ReadData+0x144>
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d202      	bcs.n	80019e0 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80019da:	7bfb      	ldrb	r3, [r7, #15]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d089      	beq.n	80018f4 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	441a      	add	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d002      	beq.n	80019fa <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 f815 	bl	8001a24 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69fa      	ldr	r2, [r7, #28]
 80019fe:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001a00:	7bfb      	ldrb	r3, [r7, #15]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d108      	bne.n	8001a18 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001a14:	2300      	movs	r3, #0
 8001a16:	e000      	b.n	8001a1a <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3720      	adds	r7, #32
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b088      	sub	sp, #32
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001a30:	2301      	movs	r3, #1
 8001a32:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a38:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69fa      	ldr	r2, [r7, #28]
 8001a3e:	3212      	adds	r2, #18
 8001a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a44:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a4a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001a4c:	e040      	b.n	8001ad0 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d112      	bne.n	8001a7c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001a56:	f107 030c 	add.w	r3, r7, #12
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f003 fda2 	bl	80055a4 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d102      	bne.n	8001a6c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	74fb      	strb	r3, [r7, #19]
 8001a6a:	e007      	b.n	8001a7c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	461a      	mov	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001a7c:	7cfb      	ldrb	r3, [r7, #19]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d026      	beq.n	8001ad0 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d103      	bne.n	8001a92 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	4a1e      	ldr	r2, [pc, #120]	; (8001b08 <ETH_UpdateDescriptor+0xe4>)
 8001a8e:	605a      	str	r2, [r3, #4]
 8001a90:	e003      	b.n	8001a9a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001a98:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001a9a:	f3bf 8f5f 	dmb	sy
}
 8001a9e:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	61fb      	str	r3, [r7, #28]
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	d902      	bls.n	8001abe <ETH_UpdateDescriptor+0x9a>
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	3b04      	subs	r3, #4
 8001abc:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69fa      	ldr	r2, [r7, #28]
 8001ac2:	3212      	adds	r2, #18
 8001ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac8:	617b      	str	r3, [r7, #20]
      desccount--;
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	3b01      	subs	r3, #1
 8001ace:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d002      	beq.n	8001adc <ETH_UpdateDescriptor+0xb8>
 8001ad6:	7cfb      	ldrb	r3, [r7, #19]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1b8      	bne.n	8001a4e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d00c      	beq.n	8001b00 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aee:	461a      	mov	r2, r3
 8001af0:	2300      	movs	r3, #0
 8001af2:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69fa      	ldr	r2, [r7, #28]
 8001af8:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001b00:	bf00      	nop
 8001b02:	3720      	adds	r7, #32
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	800045f8 	.word	0x800045f8

08001b0c <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3318      	adds	r3, #24
 8001b18:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1e:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b24:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001b26:	2301      	movs	r3, #1
 8001b28:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001b2a:	e03f      	b.n	8001bac <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	3304      	adds	r3, #4
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d106      	bne.n	8001b54 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	f003 0303 	and.w	r3, r3, #3
 8001b4e:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001b54:	7bbb      	ldrb	r3, [r7, #14]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d028      	beq.n	8001bac <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68d9      	ldr	r1, [r3, #12]
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4613      	mov	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	440b      	add	r3, r1
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	db1b      	blt.n	8001ba8 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001b70:	68ba      	ldr	r2, [r7, #8]
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	3304      	adds	r3, #4
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f003 fd81 	bl	8005684 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001b82:	68ba      	ldr	r2, [r7, #8]
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	3304      	adds	r3, #4
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	3301      	adds	r3, #1
 8001b94:	f003 0303 	and.w	r3, r3, #3
 8001b98:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ba6:	e001      	b.n	8001bac <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d002      	beq.n	8001bb8 <HAL_ETH_ReleaseTxPacket+0xac>
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1b9      	bne.n	8001b2c <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3718      	adds	r7, #24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bda:	2b40      	cmp	r3, #64	; 0x40
 8001bdc:	d112      	bne.n	8001c04 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bec:	2b40      	cmp	r3, #64	; 0x40
 8001bee:	d109      	bne.n	8001c04 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4b50      	ldr	r3, [pc, #320]	; (8001d3c <HAL_ETH_IRQHandler+0x178>)
 8001bfc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f003 f888 	bl	8004d14 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d113      	bne.n	8001c3e <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d10a      	bne.n	8001c3e <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c30:	461a      	mov	r2, r3
 8001c32:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001c36:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f003 f87b 	bl	8004d34 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c50:	d14c      	bne.n	8001cec <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c5a:	69db      	ldr	r3, [r3, #28]
 8001c5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c64:	d142      	bne.n	8001cec <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c6c:	f043 0208 	orr.w	r2, r3, #8
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c7e:	695b      	ldr	r3, [r3, #20]
 8001c80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c88:	d11a      	bne.n	8001cc0 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c92:	695a      	ldr	r2, [r3, #20]
 8001c94:	4b2a      	ldr	r3, [pc, #168]	; (8001d40 <HAL_ETH_IRQHandler+0x17c>)
 8001c96:	4013      	ands	r3, r2
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ca6:	69db      	ldr	r3, [r3, #28]
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	6812      	ldr	r2, [r2, #0]
 8001cac:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001cb0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cb4:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	22e0      	movs	r2, #224	; 0xe0
 8001cba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001cbe:	e012      	b.n	8001ce6 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cc8:	695a      	ldr	r2, [r3, #20]
 8001cca:	f248 6380 	movw	r3, #34432	; 0x8680
 8001cce:	4013      	ands	r3, r2
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cde:	461a      	mov	r2, r3
 8001ce0:	f248 6380 	movw	r3, #34432	; 0x8680
 8001ce4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f003 f834 	bl	8004d54 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf2:	f003 0308 	and.w	r3, r3, #8
 8001cf6:	2b08      	cmp	r3, #8
 8001cf8:	d10e      	bne.n	8001d18 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d00:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f81c 	bl	8001d48 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001d18:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <HAL_ETH_IRQHandler+0x180>)
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d006      	beq.n	8001d32 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001d24:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <HAL_ETH_IRQHandler+0x180>)
 8001d26:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001d2a:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 f815 	bl	8001d5c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	00010040 	.word	0x00010040
 8001d40:	007e2000 	.word	0x007e2000
 8001d44:	40013c00 	.word	0x40013c00

08001d48 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
 8001d7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	f003 031c 	and.w	r3, r3, #28
 8001d8c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	02db      	lsls	r3, r3, #11
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	019b      	lsls	r3, r3, #6
 8001d9e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	f023 0302 	bic.w	r3, r3, #2
 8001dae:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001dc0:	f7ff f9e4 	bl	800118c <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dc6:	e00d      	b.n	8001de4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001dc8:	f7ff f9e0 	bl	800118c <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd6:	d301      	bcc.n	8001ddc <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e010      	b.n	8001dfe <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1ec      	bne.n	8001dc8 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	695b      	ldr	r3, [r3, #20]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	461a      	mov	r2, r3
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3718      	adds	r7, #24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b086      	sub	sp, #24
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	60f8      	str	r0, [r7, #12]
 8001e0e:	60b9      	str	r1, [r7, #8]
 8001e10:	607a      	str	r2, [r7, #4]
 8001e12:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	f003 031c 	and.w	r3, r3, #28
 8001e22:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	02db      	lsls	r3, r3, #11
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	019b      	lsls	r3, r3, #6
 8001e34:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	f043 0302 	orr.w	r3, r3, #2
 8001e44:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e60:	f7ff f994 	bl	800118c <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e66:	e00d      	b.n	8001e84 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001e68:	f7ff f990 	bl	800118c <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e76:	d301      	bcc.n	8001e7c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e009      	b.n	8001e90 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1ec      	bne.n	8001e68 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d101      	bne.n	8001eac <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e0d9      	b.n	8002060 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0310 	and.w	r3, r3, #16
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	bf14      	ite	ne
 8001eba:	2301      	movne	r3, #1
 8001ebc:	2300      	moveq	r3, #0
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	bf0c      	ite	eq
 8001ee4:	2301      	moveq	r3, #1
 8001ee6:	2300      	movne	r3, #0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	461a      	mov	r2, r3
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	bf14      	ite	ne
 8001f00:	2301      	movne	r3, #1
 8001f02:	2300      	moveq	r3, #0
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	bf0c      	ite	eq
 8001f1a:	2301      	moveq	r3, #1
 8001f1c:	2300      	movne	r3, #0
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	461a      	mov	r2, r3
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	bf14      	ite	ne
 8001f34:	2301      	movne	r3, #1
 8001f36:	2300      	moveq	r3, #0
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	bf0c      	ite	eq
 8001f6a:	2301      	moveq	r3, #1
 8001f6c:	2300      	movne	r3, #0
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	461a      	mov	r2, r3
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	bf0c      	ite	eq
 8001f84:	2301      	moveq	r3, #1
 8001f86:	2300      	movne	r3, #0
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	bf14      	ite	ne
 8001f9e:	2301      	movne	r3, #1
 8001fa0:	2300      	moveq	r3, #0
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	bf14      	ite	ne
 8001fc6:	2301      	movne	r3, #1
 8001fc8:	2300      	moveq	r3, #0
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	461a      	mov	r2, r3
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	bf14      	ite	ne
 8001fe0:	2301      	movne	r3, #1
 8001fe2:	2300      	moveq	r3, #0
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	bf0c      	ite	eq
 8001ffc:	2301      	moveq	r3, #1
 8001ffe:	2300      	movne	r3, #0
 8002000:	b2db      	uxtb	r3, r3
 8002002:	461a      	mov	r2, r3
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	0c1b      	lsrs	r3, r3, #16
 8002020:	b29a      	uxth	r2, r3
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b00      	cmp	r3, #0
 8002032:	bf14      	ite	ne
 8002034:	2301      	movne	r3, #1
 8002036:	2300      	moveq	r3, #0
 8002038:	b2db      	uxtb	r3, r3
 800203a:	461a      	mov	r2, r3
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800204c:	2b00      	cmp	r3, #0
 800204e:	bf14      	ite	ne
 8002050:	2301      	movne	r3, #1
 8002052:	2300      	moveq	r3, #0
 8002054:	b2db      	uxtb	r3, r3
 8002056:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e00b      	b.n	8002098 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002086:	2b10      	cmp	r3, #16
 8002088:	d105      	bne.n	8002096 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800208a:	6839      	ldr	r1, [r7, #0]
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f88f 	bl	80021b0 <ETH_SetMACConfig>

    return HAL_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	e000      	b.n	8002098 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
  }
}
 8002098:	4618      	mov	r0, r3
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f023 031c 	bic.w	r3, r3, #28
 80020b6:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80020b8:	f001 fba0 	bl	80037fc <HAL_RCC_GetHCLKFreq>
 80020bc:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	4a1d      	ldr	r2, [pc, #116]	; (8002138 <HAL_ETH_SetMDIOClockRange+0x98>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d908      	bls.n	80020d8 <HAL_ETH_SetMDIOClockRange+0x38>
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	4a1c      	ldr	r2, [pc, #112]	; (800213c <HAL_ETH_SetMDIOClockRange+0x9c>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d804      	bhi.n	80020d8 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f043 0308 	orr.w	r3, r3, #8
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	e027      	b.n	8002128 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	4a18      	ldr	r2, [pc, #96]	; (800213c <HAL_ETH_SetMDIOClockRange+0x9c>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d908      	bls.n	80020f2 <HAL_ETH_SetMDIOClockRange+0x52>
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	4a17      	ldr	r2, [pc, #92]	; (8002140 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d204      	bcs.n	80020f2 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f043 030c 	orr.w	r3, r3, #12
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	e01a      	b.n	8002128 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	4a12      	ldr	r2, [pc, #72]	; (8002140 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d303      	bcc.n	8002102 <HAL_ETH_SetMDIOClockRange+0x62>
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	4a11      	ldr	r2, [pc, #68]	; (8002144 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d911      	bls.n	8002126 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	4a0f      	ldr	r2, [pc, #60]	; (8002144 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d908      	bls.n	800211c <HAL_ETH_SetMDIOClockRange+0x7c>
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	4a0e      	ldr	r2, [pc, #56]	; (8002148 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d804      	bhi.n	800211c <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f043 0304 	orr.w	r3, r3, #4
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	e005      	b.n	8002128 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f043 0310 	orr.w	r3, r3, #16
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	e000      	b.n	8002128 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002126:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	611a      	str	r2, [r3, #16]
}
 8002130:	bf00      	nop
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	01312cff 	.word	0x01312cff
 800213c:	02160ebf 	.word	0x02160ebf
 8002140:	03938700 	.word	0x03938700
 8002144:	05f5e0ff 	.word	0x05f5e0ff
 8002148:	08f0d17f 	.word	0x08f0d17f

0800214c <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b084      	sub	sp, #16
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800216e:	2300      	movs	r3, #0
 8002170:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6812      	ldr	r2, [r2, #0]
 8002180:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002184:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002188:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002196:	2001      	movs	r0, #1
 8002198:	f7ff f804 	bl	80011a4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80021a6:	6193      	str	r3, [r2, #24]
}
 80021a8:	bf00      	nop
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	4b51      	ldr	r3, [pc, #324]	; (800230c <ETH_SetMACConfig+0x15c>)
 80021c6:	4013      	ands	r3, r2
 80021c8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	7c1b      	ldrb	r3, [r3, #16]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d102      	bne.n	80021d8 <ETH_SetMACConfig+0x28>
 80021d2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80021d6:	e000      	b.n	80021da <ETH_SetMACConfig+0x2a>
 80021d8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	7c5b      	ldrb	r3, [r3, #17]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d102      	bne.n	80021e8 <ETH_SetMACConfig+0x38>
 80021e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021e6:	e000      	b.n	80021ea <ETH_SetMACConfig+0x3a>
 80021e8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80021ea:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80021f0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	7fdb      	ldrb	r3, [r3, #31]
 80021f6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80021f8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80021fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	7f92      	ldrb	r2, [r2, #30]
 8002204:	2a00      	cmp	r2, #0
 8002206:	d102      	bne.n	800220e <ETH_SetMACConfig+0x5e>
 8002208:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800220c:	e000      	b.n	8002210 <ETH_SetMACConfig+0x60>
 800220e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002210:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	7f1b      	ldrb	r3, [r3, #28]
 8002216:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002218:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800221e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	791b      	ldrb	r3, [r3, #4]
 8002224:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002226:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800222e:	2a00      	cmp	r2, #0
 8002230:	d102      	bne.n	8002238 <ETH_SetMACConfig+0x88>
 8002232:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002236:	e000      	b.n	800223a <ETH_SetMACConfig+0x8a>
 8002238:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800223a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	7bdb      	ldrb	r3, [r3, #15]
 8002240:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002242:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002248:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002250:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002252:	4313      	orrs	r3, r2
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	4313      	orrs	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800226a:	2001      	movs	r0, #1
 800226c:	f7fe ff9a 	bl	80011a4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002286:	4013      	ands	r3, r2
 8002288:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800228e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002296:	2a00      	cmp	r2, #0
 8002298:	d101      	bne.n	800229e <ETH_SetMACConfig+0xee>
 800229a:	2280      	movs	r2, #128	; 0x80
 800229c:	e000      	b.n	80022a0 <ETH_SetMACConfig+0xf0>
 800229e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80022a0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80022a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80022ae:	2a01      	cmp	r2, #1
 80022b0:	d101      	bne.n	80022b6 <ETH_SetMACConfig+0x106>
 80022b2:	2208      	movs	r2, #8
 80022b4:	e000      	b.n	80022b8 <ETH_SetMACConfig+0x108>
 80022b6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80022b8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80022c0:	2a01      	cmp	r2, #1
 80022c2:	d101      	bne.n	80022c8 <ETH_SetMACConfig+0x118>
 80022c4:	2204      	movs	r2, #4
 80022c6:	e000      	b.n	80022ca <ETH_SetMACConfig+0x11a>
 80022c8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80022ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80022d2:	2a01      	cmp	r2, #1
 80022d4:	d101      	bne.n	80022da <ETH_SetMACConfig+0x12a>
 80022d6:	2202      	movs	r2, #2
 80022d8:	e000      	b.n	80022dc <ETH_SetMACConfig+0x12c>
 80022da:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80022dc:	4313      	orrs	r3, r2
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022f4:	2001      	movs	r0, #1
 80022f6:	f7fe ff55 	bl	80011a4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	619a      	str	r2, [r3, #24]
}
 8002302:	bf00      	nop
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	ff20810f 	.word	0xff20810f

08002310 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	4b3d      	ldr	r3, [pc, #244]	; (8002420 <ETH_SetDMAConfig+0x110>)
 800232a:	4013      	ands	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	7b1b      	ldrb	r3, [r3, #12]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d102      	bne.n	800233c <ETH_SetDMAConfig+0x2c>
 8002336:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800233a:	e000      	b.n	800233e <ETH_SetDMAConfig+0x2e>
 800233c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	7b5b      	ldrb	r3, [r3, #13]
 8002342:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002344:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	7f52      	ldrb	r2, [r2, #29]
 800234a:	2a00      	cmp	r2, #0
 800234c:	d102      	bne.n	8002354 <ETH_SetDMAConfig+0x44>
 800234e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002352:	e000      	b.n	8002356 <ETH_SetDMAConfig+0x46>
 8002354:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002356:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	7b9b      	ldrb	r3, [r3, #14]
 800235c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800235e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002364:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	7f1b      	ldrb	r3, [r3, #28]
 800236a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800236c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	7f9b      	ldrb	r3, [r3, #30]
 8002372:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002374:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800237a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002382:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002384:	4313      	orrs	r3, r2
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	4313      	orrs	r3, r2
 800238a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002394:	461a      	mov	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023a6:	2001      	movs	r0, #1
 80023a8:	f7fe fefc 	bl	80011a4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023b4:	461a      	mov	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	791b      	ldrb	r3, [r3, #4]
 80023be:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80023c4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80023ca:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80023d0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80023d8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80023da:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80023e2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80023e8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6812      	ldr	r2, [r2, #0]
 80023ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023f6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002404:	2001      	movs	r0, #1
 8002406:	f7fe fecd 	bl	80011a4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002412:	461a      	mov	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6013      	str	r3, [r2, #0]
}
 8002418:	bf00      	nop
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	f8de3f23 	.word	0xf8de3f23

08002424 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b0a6      	sub	sp, #152	; 0x98
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800242c:	2301      	movs	r3, #1
 800242e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002432:	2301      	movs	r3, #1
 8002434:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002438:	2300      	movs	r3, #0
 800243a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800243c:	2300      	movs	r3, #0
 800243e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002442:	2301      	movs	r3, #1
 8002444:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002448:	2300      	movs	r3, #0
 800244a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800244e:	2301      	movs	r3, #1
 8002450:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002454:	2300      	movs	r3, #0
 8002456:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800245a:	2300      	movs	r3, #0
 800245c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002460:	2300      	movs	r3, #0
 8002462:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002464:	2300      	movs	r3, #0
 8002466:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800246a:	2300      	movs	r3, #0
 800246c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800246e:	2300      	movs	r3, #0
 8002470:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002474:	2300      	movs	r3, #0
 8002476:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800247a:	2300      	movs	r3, #0
 800247c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002480:	2300      	movs	r3, #0
 8002482:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002486:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800248a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800248c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002490:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002492:	2300      	movs	r3, #0
 8002494:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002498:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800249c:	4619      	mov	r1, r3
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7ff fe86 	bl	80021b0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80024a4:	2301      	movs	r3, #1
 80024a6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80024a8:	2301      	movs	r3, #1
 80024aa:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80024ac:	2301      	movs	r3, #1
 80024ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80024b2:	2301      	movs	r3, #1
 80024b4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80024ba:	2300      	movs	r3, #0
 80024bc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80024c6:	2300      	movs	r3, #0
 80024c8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80024ca:	2301      	movs	r3, #1
 80024cc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80024d0:	2301      	movs	r3, #1
 80024d2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80024d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024d8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80024da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024de:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80024e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024e4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80024e6:	2301      	movs	r3, #1
 80024e8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80024f0:	2300      	movs	r3, #0
 80024f2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80024f4:	f107 0308 	add.w	r3, r7, #8
 80024f8:	4619      	mov	r1, r3
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7ff ff08 	bl	8002310 <ETH_SetDMAConfig>
}
 8002500:	bf00      	nop
 8002502:	3798      	adds	r7, #152	; 0x98
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002508:	b480      	push	{r7}
 800250a:	b087      	sub	sp, #28
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3305      	adds	r3, #5
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	021b      	lsls	r3, r3, #8
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	3204      	adds	r2, #4
 8002520:	7812      	ldrb	r2, [r2, #0]
 8002522:	4313      	orrs	r3, r2
 8002524:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	4b11      	ldr	r3, [pc, #68]	; (8002570 <ETH_MACAddressConfig+0x68>)
 800252a:	4413      	add	r3, r2
 800252c:	461a      	mov	r2, r3
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	3303      	adds	r3, #3
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	061a      	lsls	r2, r3, #24
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	3302      	adds	r3, #2
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	041b      	lsls	r3, r3, #16
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3301      	adds	r3, #1
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	021b      	lsls	r3, r3, #8
 800254c:	4313      	orrs	r3, r2
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	7812      	ldrb	r2, [r2, #0]
 8002552:	4313      	orrs	r3, r2
 8002554:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	4b06      	ldr	r3, [pc, #24]	; (8002574 <ETH_MACAddressConfig+0x6c>)
 800255a:	4413      	add	r3, r2
 800255c:	461a      	mov	r2, r3
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	6013      	str	r3, [r2, #0]
}
 8002562:	bf00      	nop
 8002564:	371c      	adds	r7, #28
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	40028040 	.word	0x40028040
 8002574:	40028044 	.word	0x40028044

08002578 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002580:	2300      	movs	r3, #0
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	e03e      	b.n	8002604 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68d9      	ldr	r1, [r3, #12]
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	440b      	add	r3, r1
 8002596:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	2200      	movs	r2, #0
 80025a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	2200      	movs	r2, #0
 80025a8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	2200      	movs	r2, #0
 80025ae:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80025b0:	68b9      	ldr	r1, [r7, #8]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	3206      	adds	r2, #6
 80025b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d80c      	bhi.n	80025e8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68d9      	ldr	r1, [r3, #12]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	1c5a      	adds	r2, r3, #1
 80025d6:	4613      	mov	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4413      	add	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	440b      	add	r3, r1
 80025e0:	461a      	mov	r2, r3
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	60da      	str	r2, [r3, #12]
 80025e6:	e004      	b.n	80025f2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	461a      	mov	r2, r3
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	3301      	adds	r3, #1
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2b03      	cmp	r3, #3
 8002608:	d9bd      	bls.n	8002586 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68da      	ldr	r2, [r3, #12]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800261c:	611a      	str	r2, [r3, #16]
}
 800261e:	bf00      	nop
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800262a:	b480      	push	{r7}
 800262c:	b085      	sub	sp, #20
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	e046      	b.n	80026c6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6919      	ldr	r1, [r3, #16]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	4613      	mov	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	440b      	add	r3, r1
 8002648:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	2200      	movs	r2, #0
 8002654:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	2200      	movs	r2, #0
 800265a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	2200      	movs	r2, #0
 8002660:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	2200      	movs	r2, #0
 8002666:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2200      	movs	r2, #0
 800266c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002674:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	f244 52f8 	movw	r2, #17912	; 0x45f8
 800267c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800268a:	68b9      	ldr	r1, [r7, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	3212      	adds	r2, #18
 8002692:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2b02      	cmp	r3, #2
 800269a:	d80c      	bhi.n	80026b6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6919      	ldr	r1, [r3, #16]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	1c5a      	adds	r2, r3, #1
 80026a4:	4613      	mov	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	440b      	add	r3, r1
 80026ae:	461a      	mov	r2, r3
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	60da      	str	r2, [r3, #12]
 80026b4:	e004      	b.n	80026c0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	461a      	mov	r2, r3
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	3301      	adds	r3, #1
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2b03      	cmp	r3, #3
 80026ca:	d9b5      	bls.n	8002638 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691a      	ldr	r2, [r3, #16]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026f6:	60da      	str	r2, [r3, #12]
}
 80026f8:	bf00      	nop
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002704:	b480      	push	{r7}
 8002706:	b08d      	sub	sp, #52	; 0x34
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	3318      	adds	r3, #24
 8002714:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002722:	2300      	movs	r3, #0
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800272a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800272e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002736:	2300      	movs	r3, #0
 8002738:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800273a:	6a3b      	ldr	r3, [r7, #32]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002742:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002746:	d007      	beq.n	8002758 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274c:	3304      	adds	r3, #4
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002758:	2302      	movs	r3, #2
 800275a:	e103      	b.n	8002964 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	3301      	adds	r3, #1
 8002760:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	461a      	mov	r2, r3
 8002768:	6a3b      	ldr	r3, [r7, #32]
 800276a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800276c:	6a3b      	ldr	r3, [r7, #32]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002774:	f023 031f 	bic.w	r3, r3, #31
 8002778:	69fa      	ldr	r2, [r7, #28]
 800277a:	6852      	ldr	r2, [r2, #4]
 800277c:	431a      	orrs	r2, r3
 800277e:	6a3b      	ldr	r3, [r7, #32]
 8002780:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d008      	beq.n	80027a0 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	431a      	orrs	r2, r3
 800279c:	6a3b      	ldr	r3, [r7, #32]
 800279e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0320 	and.w	r3, r3, #32
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d008      	beq.n	80027be <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80027ac:	6a3b      	ldr	r3, [r7, #32]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	431a      	orrs	r2, r3
 80027ba:	6a3b      	ldr	r3, [r7, #32]
 80027bc:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0304 	and.w	r3, r3, #4
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d005      	beq.n	80027d6 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80027d2:	6a3b      	ldr	r3, [r7, #32]
 80027d4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80027d6:	6a3b      	ldr	r3, [r7, #32]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80027de:	6a3b      	ldr	r3, [r7, #32]
 80027e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80027e2:	f3bf 8f5f 	dmb	sy
}
 80027e6:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80027e8:	6a3b      	ldr	r3, [r7, #32]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80027f0:	6a3b      	ldr	r3, [r7, #32]
 80027f2:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80027f4:	e084      	b.n	8002900 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d006      	beq.n	8002816 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002808:	6a3b      	ldr	r3, [r7, #32]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	e005      	b.n	8002822 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800281e:	6a3b      	ldr	r3, [r7, #32]
 8002820:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002824:	3301      	adds	r3, #1
 8002826:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282a:	2b03      	cmp	r3, #3
 800282c:	d902      	bls.n	8002834 <ETH_Prepare_Tx_Descriptors+0x130>
 800282e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002830:	3b04      	subs	r3, #4
 8002832:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800283c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800283e:	6a3b      	ldr	r3, [r7, #32]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800284a:	6a3b      	ldr	r3, [r7, #32]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002852:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002856:	d007      	beq.n	8002868 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285c:	3304      	adds	r3, #4
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d029      	beq.n	80028bc <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002874:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002876:	2300      	movs	r3, #0
 8002878:	62bb      	str	r3, [r7, #40]	; 0x28
 800287a:	e019      	b.n	80028b0 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 800287c:	f3bf 8f5f 	dmb	sy
}
 8002880:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800288a:	6a3b      	ldr	r3, [r7, #32]
 800288c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800288e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002890:	3301      	adds	r3, #1
 8002892:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002896:	2b03      	cmp	r3, #3
 8002898:	d902      	bls.n	80028a0 <ETH_Prepare_Tx_Descriptors+0x19c>
 800289a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289c:	3b04      	subs	r3, #4
 800289e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028a8:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80028aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ac:	3301      	adds	r3, #1
 80028ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80028b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d3e1      	bcc.n	800287c <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 80028b8:	2302      	movs	r3, #2
 80028ba:	e053      	b.n	8002964 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	3301      	adds	r3, #1
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	461a      	mov	r2, r3
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80028d2:	6a3b      	ldr	r3, [r7, #32]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80028da:	f023 031f 	bic.w	r3, r3, #31
 80028de:	69fa      	ldr	r2, [r7, #28]
 80028e0:	6852      	ldr	r2, [r2, #4]
 80028e2:	431a      	orrs	r2, r3
 80028e4:	6a3b      	ldr	r3, [r7, #32]
 80028e6:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	3301      	adds	r3, #1
 80028ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80028ee:	f3bf 8f5f 	dmb	sy
}
 80028f2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80028f4:	6a3b      	ldr	r3, [r7, #32]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80028fc:	6a3b      	ldr	r3, [r7, #32]
 80028fe:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	f47f af76 	bne.w	80027f6 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d006      	beq.n	800291e <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002910:	6a3b      	ldr	r3, [r7, #32]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002918:	6a3b      	ldr	r3, [r7, #32]
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	e005      	b.n	800292a <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002932:	6a3b      	ldr	r3, [r7, #32]
 8002934:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800293a:	6979      	ldr	r1, [r7, #20]
 800293c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800293e:	3304      	adds	r3, #4
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	440b      	add	r3, r1
 8002944:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800294a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800294c:	b672      	cpsid	i
}
 800294e:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	4413      	add	r3, r2
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800295e:	b662      	cpsie	i
}
 8002960:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3734      	adds	r7, #52	; 0x34
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002970:	b480      	push	{r7}
 8002972:	b089      	sub	sp, #36	; 0x24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800297e:	2300      	movs	r3, #0
 8002980:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002982:	2300      	movs	r3, #0
 8002984:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002986:	2300      	movs	r3, #0
 8002988:	61fb      	str	r3, [r7, #28]
 800298a:	e177      	b.n	8002c7c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800298c:	2201      	movs	r2, #1
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	4013      	ands	r3, r2
 800299e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	f040 8166 	bne.w	8002c76 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d005      	beq.n	80029c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d130      	bne.n	8002a24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	2203      	movs	r2, #3
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	43db      	mvns	r3, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4013      	ands	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029f8:	2201      	movs	r2, #1
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	43db      	mvns	r3, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4013      	ands	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	091b      	lsrs	r3, r3, #4
 8002a0e:	f003 0201 	and.w	r2, r3, #1
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f003 0303 	and.w	r3, r3, #3
 8002a2c:	2b03      	cmp	r3, #3
 8002a2e:	d017      	beq.n	8002a60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	2203      	movs	r2, #3
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f003 0303 	and.w	r3, r3, #3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d123      	bne.n	8002ab4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	08da      	lsrs	r2, r3, #3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3208      	adds	r2, #8
 8002a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	220f      	movs	r2, #15
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	691a      	ldr	r2, [r3, #16]
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	08da      	lsrs	r2, r3, #3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3208      	adds	r2, #8
 8002aae:	69b9      	ldr	r1, [r7, #24]
 8002ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	2203      	movs	r2, #3
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 0203 	and.w	r2, r3, #3
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 80c0 	beq.w	8002c76 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	60fb      	str	r3, [r7, #12]
 8002afa:	4b66      	ldr	r3, [pc, #408]	; (8002c94 <HAL_GPIO_Init+0x324>)
 8002afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afe:	4a65      	ldr	r2, [pc, #404]	; (8002c94 <HAL_GPIO_Init+0x324>)
 8002b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b04:	6453      	str	r3, [r2, #68]	; 0x44
 8002b06:	4b63      	ldr	r3, [pc, #396]	; (8002c94 <HAL_GPIO_Init+0x324>)
 8002b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b12:	4a61      	ldr	r2, [pc, #388]	; (8002c98 <HAL_GPIO_Init+0x328>)
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	089b      	lsrs	r3, r3, #2
 8002b18:	3302      	adds	r3, #2
 8002b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	220f      	movs	r2, #15
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4013      	ands	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a58      	ldr	r2, [pc, #352]	; (8002c9c <HAL_GPIO_Init+0x32c>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d037      	beq.n	8002bae <HAL_GPIO_Init+0x23e>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a57      	ldr	r2, [pc, #348]	; (8002ca0 <HAL_GPIO_Init+0x330>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d031      	beq.n	8002baa <HAL_GPIO_Init+0x23a>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a56      	ldr	r2, [pc, #344]	; (8002ca4 <HAL_GPIO_Init+0x334>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d02b      	beq.n	8002ba6 <HAL_GPIO_Init+0x236>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a55      	ldr	r2, [pc, #340]	; (8002ca8 <HAL_GPIO_Init+0x338>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d025      	beq.n	8002ba2 <HAL_GPIO_Init+0x232>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a54      	ldr	r2, [pc, #336]	; (8002cac <HAL_GPIO_Init+0x33c>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d01f      	beq.n	8002b9e <HAL_GPIO_Init+0x22e>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a53      	ldr	r2, [pc, #332]	; (8002cb0 <HAL_GPIO_Init+0x340>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d019      	beq.n	8002b9a <HAL_GPIO_Init+0x22a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a52      	ldr	r2, [pc, #328]	; (8002cb4 <HAL_GPIO_Init+0x344>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d013      	beq.n	8002b96 <HAL_GPIO_Init+0x226>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a51      	ldr	r2, [pc, #324]	; (8002cb8 <HAL_GPIO_Init+0x348>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d00d      	beq.n	8002b92 <HAL_GPIO_Init+0x222>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a50      	ldr	r2, [pc, #320]	; (8002cbc <HAL_GPIO_Init+0x34c>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d007      	beq.n	8002b8e <HAL_GPIO_Init+0x21e>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a4f      	ldr	r2, [pc, #316]	; (8002cc0 <HAL_GPIO_Init+0x350>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d101      	bne.n	8002b8a <HAL_GPIO_Init+0x21a>
 8002b86:	2309      	movs	r3, #9
 8002b88:	e012      	b.n	8002bb0 <HAL_GPIO_Init+0x240>
 8002b8a:	230a      	movs	r3, #10
 8002b8c:	e010      	b.n	8002bb0 <HAL_GPIO_Init+0x240>
 8002b8e:	2308      	movs	r3, #8
 8002b90:	e00e      	b.n	8002bb0 <HAL_GPIO_Init+0x240>
 8002b92:	2307      	movs	r3, #7
 8002b94:	e00c      	b.n	8002bb0 <HAL_GPIO_Init+0x240>
 8002b96:	2306      	movs	r3, #6
 8002b98:	e00a      	b.n	8002bb0 <HAL_GPIO_Init+0x240>
 8002b9a:	2305      	movs	r3, #5
 8002b9c:	e008      	b.n	8002bb0 <HAL_GPIO_Init+0x240>
 8002b9e:	2304      	movs	r3, #4
 8002ba0:	e006      	b.n	8002bb0 <HAL_GPIO_Init+0x240>
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e004      	b.n	8002bb0 <HAL_GPIO_Init+0x240>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e002      	b.n	8002bb0 <HAL_GPIO_Init+0x240>
 8002baa:	2301      	movs	r3, #1
 8002bac:	e000      	b.n	8002bb0 <HAL_GPIO_Init+0x240>
 8002bae:	2300      	movs	r3, #0
 8002bb0:	69fa      	ldr	r2, [r7, #28]
 8002bb2:	f002 0203 	and.w	r2, r2, #3
 8002bb6:	0092      	lsls	r2, r2, #2
 8002bb8:	4093      	lsls	r3, r2
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bc0:	4935      	ldr	r1, [pc, #212]	; (8002c98 <HAL_GPIO_Init+0x328>)
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	089b      	lsrs	r3, r3, #2
 8002bc6:	3302      	adds	r3, #2
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bce:	4b3d      	ldr	r3, [pc, #244]	; (8002cc4 <HAL_GPIO_Init+0x354>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bf2:	4a34      	ldr	r2, [pc, #208]	; (8002cc4 <HAL_GPIO_Init+0x354>)
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bf8:	4b32      	ldr	r3, [pc, #200]	; (8002cc4 <HAL_GPIO_Init+0x354>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	43db      	mvns	r3, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4013      	ands	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d003      	beq.n	8002c1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c1c:	4a29      	ldr	r2, [pc, #164]	; (8002cc4 <HAL_GPIO_Init+0x354>)
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c22:	4b28      	ldr	r3, [pc, #160]	; (8002cc4 <HAL_GPIO_Init+0x354>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c46:	4a1f      	ldr	r2, [pc, #124]	; (8002cc4 <HAL_GPIO_Init+0x354>)
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c4c:	4b1d      	ldr	r3, [pc, #116]	; (8002cc4 <HAL_GPIO_Init+0x354>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	43db      	mvns	r3, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d003      	beq.n	8002c70 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c70:	4a14      	ldr	r2, [pc, #80]	; (8002cc4 <HAL_GPIO_Init+0x354>)
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	61fb      	str	r3, [r7, #28]
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	2b0f      	cmp	r3, #15
 8002c80:	f67f ae84 	bls.w	800298c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c84:	bf00      	nop
 8002c86:	bf00      	nop
 8002c88:	3724      	adds	r7, #36	; 0x24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	40023800 	.word	0x40023800
 8002c98:	40013800 	.word	0x40013800
 8002c9c:	40020000 	.word	0x40020000
 8002ca0:	40020400 	.word	0x40020400
 8002ca4:	40020800 	.word	0x40020800
 8002ca8:	40020c00 	.word	0x40020c00
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	40021400 	.word	0x40021400
 8002cb4:	40021800 	.word	0x40021800
 8002cb8:	40021c00 	.word	0x40021c00
 8002cbc:	40022000 	.word	0x40022000
 8002cc0:	40022400 	.word	0x40022400
 8002cc4:	40013c00 	.word	0x40013c00

08002cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	807b      	strh	r3, [r7, #2]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cd8:	787b      	ldrb	r3, [r7, #1]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cde:	887a      	ldrh	r2, [r7, #2]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ce4:	e003      	b.n	8002cee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ce6:	887b      	ldrh	r3, [r7, #2]
 8002ce8:	041a      	lsls	r2, r3, #16
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	619a      	str	r2, [r3, #24]
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002cfa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cfc:	b08f      	sub	sp, #60	; 0x3c
 8002cfe:	af0a      	add	r7, sp, #40	; 0x28
 8002d00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e10f      	b.n	8002f2c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d106      	bne.n	8002d2c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7fd fedc 	bl	8000ae4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2203      	movs	r2, #3
 8002d30:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d102      	bne.n	8002d46 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f001 fcd5 	bl	80046fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	603b      	str	r3, [r7, #0]
 8002d56:	687e      	ldr	r6, [r7, #4]
 8002d58:	466d      	mov	r5, sp
 8002d5a:	f106 0410 	add.w	r4, r6, #16
 8002d5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d6a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d6e:	1d33      	adds	r3, r6, #4
 8002d70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d72:	6838      	ldr	r0, [r7, #0]
 8002d74:	f001 fc60 	bl	8004638 <USB_CoreInit>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d005      	beq.n	8002d8a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2202      	movs	r2, #2
 8002d82:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e0d0      	b.n	8002f2c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2100      	movs	r1, #0
 8002d90:	4618      	mov	r0, r3
 8002d92:	f001 fcc3 	bl	800471c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d96:	2300      	movs	r3, #0
 8002d98:	73fb      	strb	r3, [r7, #15]
 8002d9a:	e04a      	b.n	8002e32 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d9c:	7bfa      	ldrb	r2, [r7, #15]
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	4613      	mov	r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	4413      	add	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	333d      	adds	r3, #61	; 0x3d
 8002dac:	2201      	movs	r2, #1
 8002dae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002db0:	7bfa      	ldrb	r2, [r7, #15]
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	4613      	mov	r3, r2
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	4413      	add	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	333c      	adds	r3, #60	; 0x3c
 8002dc0:	7bfa      	ldrb	r2, [r7, #15]
 8002dc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002dc4:	7bfa      	ldrb	r2, [r7, #15]
 8002dc6:	7bfb      	ldrb	r3, [r7, #15]
 8002dc8:	b298      	uxth	r0, r3
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	3344      	adds	r3, #68	; 0x44
 8002dd8:	4602      	mov	r2, r0
 8002dda:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ddc:	7bfa      	ldrb	r2, [r7, #15]
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	4613      	mov	r3, r2
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	4413      	add	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	440b      	add	r3, r1
 8002dea:	3340      	adds	r3, #64	; 0x40
 8002dec:	2200      	movs	r2, #0
 8002dee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002df0:	7bfa      	ldrb	r2, [r7, #15]
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	4613      	mov	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	4413      	add	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	3348      	adds	r3, #72	; 0x48
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e04:	7bfa      	ldrb	r2, [r7, #15]
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	4413      	add	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	334c      	adds	r3, #76	; 0x4c
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e18:	7bfa      	ldrb	r2, [r7, #15]
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	4413      	add	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	3354      	adds	r3, #84	; 0x54
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	73fb      	strb	r3, [r7, #15]
 8002e32:	7bfa      	ldrb	r2, [r7, #15]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d3af      	bcc.n	8002d9c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	73fb      	strb	r3, [r7, #15]
 8002e40:	e044      	b.n	8002ecc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e42:	7bfa      	ldrb	r2, [r7, #15]
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	4413      	add	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	440b      	add	r3, r1
 8002e50:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002e54:	2200      	movs	r2, #0
 8002e56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e58:	7bfa      	ldrb	r2, [r7, #15]
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	4413      	add	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	440b      	add	r3, r1
 8002e66:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002e6a:	7bfa      	ldrb	r2, [r7, #15]
 8002e6c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e6e:	7bfa      	ldrb	r2, [r7, #15]
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	4613      	mov	r3, r2
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	4413      	add	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	440b      	add	r3, r1
 8002e7c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002e80:	2200      	movs	r2, #0
 8002e82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e84:	7bfa      	ldrb	r2, [r7, #15]
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	4413      	add	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	440b      	add	r3, r1
 8002e92:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002e96:	2200      	movs	r2, #0
 8002e98:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e9a:	7bfa      	ldrb	r2, [r7, #15]
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002eb0:	7bfa      	ldrb	r2, [r7, #15]
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	4413      	add	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ec6:	7bfb      	ldrb	r3, [r7, #15]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	73fb      	strb	r3, [r7, #15]
 8002ecc:	7bfa      	ldrb	r2, [r7, #15]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d3b5      	bcc.n	8002e42 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	603b      	str	r3, [r7, #0]
 8002edc:	687e      	ldr	r6, [r7, #4]
 8002ede:	466d      	mov	r5, sp
 8002ee0:	f106 0410 	add.w	r4, r6, #16
 8002ee4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ee6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ee8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eec:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ef0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ef4:	1d33      	adds	r3, r6, #4
 8002ef6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ef8:	6838      	ldr	r0, [r7, #0]
 8002efa:	f001 fc5b 	bl	80047b4 <USB_DevInit>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d005      	beq.n	8002f10 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e00d      	b.n	8002f2c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f001 fe26 	bl	8004b76 <USB_DevDisconnect>

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e267      	b.n	8003416 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d075      	beq.n	800303e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f52:	4b88      	ldr	r3, [pc, #544]	; (8003174 <HAL_RCC_OscConfig+0x240>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 030c 	and.w	r3, r3, #12
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	d00c      	beq.n	8002f78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f5e:	4b85      	ldr	r3, [pc, #532]	; (8003174 <HAL_RCC_OscConfig+0x240>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f66:	2b08      	cmp	r3, #8
 8002f68:	d112      	bne.n	8002f90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f6a:	4b82      	ldr	r3, [pc, #520]	; (8003174 <HAL_RCC_OscConfig+0x240>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f76:	d10b      	bne.n	8002f90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f78:	4b7e      	ldr	r3, [pc, #504]	; (8003174 <HAL_RCC_OscConfig+0x240>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d05b      	beq.n	800303c <HAL_RCC_OscConfig+0x108>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d157      	bne.n	800303c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e242      	b.n	8003416 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f98:	d106      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x74>
 8002f9a:	4b76      	ldr	r3, [pc, #472]	; (8003174 <HAL_RCC_OscConfig+0x240>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a75      	ldr	r2, [pc, #468]	; (8003174 <HAL_RCC_OscConfig+0x240>)
 8002fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa4:	6013      	str	r3, [r2, #0]
 8002fa6:	e01d      	b.n	8002fe4 <HAL_RCC_OscConfig+0xb0>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fb0:	d10c      	bne.n	8002fcc <HAL_RCC_OscConfig+0x98>
 8002fb2:	4b70      	ldr	r3, [pc, #448]	; (8003174 <HAL_RCC_OscConfig+0x240>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a6f      	ldr	r2, [pc, #444]	; (8003174 <HAL_RCC_OscConfig+0x240>)
 8002fb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fbc:	6013      	str	r3, [r2, #0]
 8002fbe:	4b6d      	ldr	r3, [pc, #436]	; (8003174 <HAL_RCC_OscConfig+0x240>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a6c      	ldr	r2, [pc, #432]	; (8003174 <HAL_RCC_OscConfig+0x240>)
 8002fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc8:	6013      	str	r3, [r2, #0]
 8002fca:	e00b      	b.n	8002fe4 <HAL_RCC_OscConfig+0xb0>
 8002fcc:	4b69      	ldr	r3, [pc, #420]	; (8003174 <HAL_RCC_OscConfig+0x240>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a68      	ldr	r2, [pc, #416]	; (8003174 <HAL_RCC_OscConfig+0x240>)
 8002fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fd6:	6013      	str	r3, [r2, #0]
 8002fd8:	4b66      	ldr	r3, [pc, #408]	; (8003174 <HAL_RCC_OscConfig+0x240>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a65      	ldr	r2, [pc, #404]	; (8003174 <HAL_RCC_OscConfig+0x240>)
 8002fde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fe2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d013      	beq.n	8003014 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fec:	f7fe f8ce 	bl	800118c <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ff4:	f7fe f8ca 	bl	800118c <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b64      	cmp	r3, #100	; 0x64
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e207      	b.n	8003416 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003006:	4b5b      	ldr	r3, [pc, #364]	; (8003174 <HAL_RCC_OscConfig+0x240>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0f0      	beq.n	8002ff4 <HAL_RCC_OscConfig+0xc0>
 8003012:	e014      	b.n	800303e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003014:	f7fe f8ba 	bl	800118c <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800301c:	f7fe f8b6 	bl	800118c <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b64      	cmp	r3, #100	; 0x64
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e1f3      	b.n	8003416 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800302e:	4b51      	ldr	r3, [pc, #324]	; (8003174 <HAL_RCC_OscConfig+0x240>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f0      	bne.n	800301c <HAL_RCC_OscConfig+0xe8>
 800303a:	e000      	b.n	800303e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800303c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d063      	beq.n	8003112 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800304a:	4b4a      	ldr	r3, [pc, #296]	; (8003174 <HAL_RCC_OscConfig+0x240>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 030c 	and.w	r3, r3, #12
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00b      	beq.n	800306e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003056:	4b47      	ldr	r3, [pc, #284]	; (8003174 <HAL_RCC_OscConfig+0x240>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800305e:	2b08      	cmp	r3, #8
 8003060:	d11c      	bne.n	800309c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003062:	4b44      	ldr	r3, [pc, #272]	; (8003174 <HAL_RCC_OscConfig+0x240>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d116      	bne.n	800309c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800306e:	4b41      	ldr	r3, [pc, #260]	; (8003174 <HAL_RCC_OscConfig+0x240>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d005      	beq.n	8003086 <HAL_RCC_OscConfig+0x152>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d001      	beq.n	8003086 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e1c7      	b.n	8003416 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003086:	4b3b      	ldr	r3, [pc, #236]	; (8003174 <HAL_RCC_OscConfig+0x240>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	4937      	ldr	r1, [pc, #220]	; (8003174 <HAL_RCC_OscConfig+0x240>)
 8003096:	4313      	orrs	r3, r2
 8003098:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800309a:	e03a      	b.n	8003112 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d020      	beq.n	80030e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030a4:	4b34      	ldr	r3, [pc, #208]	; (8003178 <HAL_RCC_OscConfig+0x244>)
 80030a6:	2201      	movs	r2, #1
 80030a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030aa:	f7fe f86f 	bl	800118c <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b0:	e008      	b.n	80030c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030b2:	f7fe f86b 	bl	800118c <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e1a8      	b.n	8003416 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c4:	4b2b      	ldr	r3, [pc, #172]	; (8003174 <HAL_RCC_OscConfig+0x240>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0f0      	beq.n	80030b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d0:	4b28      	ldr	r3, [pc, #160]	; (8003174 <HAL_RCC_OscConfig+0x240>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	4925      	ldr	r1, [pc, #148]	; (8003174 <HAL_RCC_OscConfig+0x240>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	600b      	str	r3, [r1, #0]
 80030e4:	e015      	b.n	8003112 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030e6:	4b24      	ldr	r3, [pc, #144]	; (8003178 <HAL_RCC_OscConfig+0x244>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ec:	f7fe f84e 	bl	800118c <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030f4:	f7fe f84a 	bl	800118c <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e187      	b.n	8003416 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003106:	4b1b      	ldr	r3, [pc, #108]	; (8003174 <HAL_RCC_OscConfig+0x240>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f0      	bne.n	80030f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0308 	and.w	r3, r3, #8
 800311a:	2b00      	cmp	r3, #0
 800311c:	d036      	beq.n	800318c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d016      	beq.n	8003154 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003126:	4b15      	ldr	r3, [pc, #84]	; (800317c <HAL_RCC_OscConfig+0x248>)
 8003128:	2201      	movs	r2, #1
 800312a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800312c:	f7fe f82e 	bl	800118c <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003134:	f7fe f82a 	bl	800118c <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e167      	b.n	8003416 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003146:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <HAL_RCC_OscConfig+0x240>)
 8003148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0f0      	beq.n	8003134 <HAL_RCC_OscConfig+0x200>
 8003152:	e01b      	b.n	800318c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003154:	4b09      	ldr	r3, [pc, #36]	; (800317c <HAL_RCC_OscConfig+0x248>)
 8003156:	2200      	movs	r2, #0
 8003158:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800315a:	f7fe f817 	bl	800118c <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003160:	e00e      	b.n	8003180 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003162:	f7fe f813 	bl	800118c <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d907      	bls.n	8003180 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e150      	b.n	8003416 <HAL_RCC_OscConfig+0x4e2>
 8003174:	40023800 	.word	0x40023800
 8003178:	42470000 	.word	0x42470000
 800317c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003180:	4b88      	ldr	r3, [pc, #544]	; (80033a4 <HAL_RCC_OscConfig+0x470>)
 8003182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1ea      	bne.n	8003162 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 8097 	beq.w	80032c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800319a:	2300      	movs	r3, #0
 800319c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800319e:	4b81      	ldr	r3, [pc, #516]	; (80033a4 <HAL_RCC_OscConfig+0x470>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10f      	bne.n	80031ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031aa:	2300      	movs	r3, #0
 80031ac:	60bb      	str	r3, [r7, #8]
 80031ae:	4b7d      	ldr	r3, [pc, #500]	; (80033a4 <HAL_RCC_OscConfig+0x470>)
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	4a7c      	ldr	r2, [pc, #496]	; (80033a4 <HAL_RCC_OscConfig+0x470>)
 80031b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b8:	6413      	str	r3, [r2, #64]	; 0x40
 80031ba:	4b7a      	ldr	r3, [pc, #488]	; (80033a4 <HAL_RCC_OscConfig+0x470>)
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c2:	60bb      	str	r3, [r7, #8]
 80031c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031c6:	2301      	movs	r3, #1
 80031c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ca:	4b77      	ldr	r3, [pc, #476]	; (80033a8 <HAL_RCC_OscConfig+0x474>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d118      	bne.n	8003208 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031d6:	4b74      	ldr	r3, [pc, #464]	; (80033a8 <HAL_RCC_OscConfig+0x474>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a73      	ldr	r2, [pc, #460]	; (80033a8 <HAL_RCC_OscConfig+0x474>)
 80031dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031e2:	f7fd ffd3 	bl	800118c <HAL_GetTick>
 80031e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e8:	e008      	b.n	80031fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ea:	f7fd ffcf 	bl	800118c <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e10c      	b.n	8003416 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031fc:	4b6a      	ldr	r3, [pc, #424]	; (80033a8 <HAL_RCC_OscConfig+0x474>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003204:	2b00      	cmp	r3, #0
 8003206:	d0f0      	beq.n	80031ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d106      	bne.n	800321e <HAL_RCC_OscConfig+0x2ea>
 8003210:	4b64      	ldr	r3, [pc, #400]	; (80033a4 <HAL_RCC_OscConfig+0x470>)
 8003212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003214:	4a63      	ldr	r2, [pc, #396]	; (80033a4 <HAL_RCC_OscConfig+0x470>)
 8003216:	f043 0301 	orr.w	r3, r3, #1
 800321a:	6713      	str	r3, [r2, #112]	; 0x70
 800321c:	e01c      	b.n	8003258 <HAL_RCC_OscConfig+0x324>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	2b05      	cmp	r3, #5
 8003224:	d10c      	bne.n	8003240 <HAL_RCC_OscConfig+0x30c>
 8003226:	4b5f      	ldr	r3, [pc, #380]	; (80033a4 <HAL_RCC_OscConfig+0x470>)
 8003228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322a:	4a5e      	ldr	r2, [pc, #376]	; (80033a4 <HAL_RCC_OscConfig+0x470>)
 800322c:	f043 0304 	orr.w	r3, r3, #4
 8003230:	6713      	str	r3, [r2, #112]	; 0x70
 8003232:	4b5c      	ldr	r3, [pc, #368]	; (80033a4 <HAL_RCC_OscConfig+0x470>)
 8003234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003236:	4a5b      	ldr	r2, [pc, #364]	; (80033a4 <HAL_RCC_OscConfig+0x470>)
 8003238:	f043 0301 	orr.w	r3, r3, #1
 800323c:	6713      	str	r3, [r2, #112]	; 0x70
 800323e:	e00b      	b.n	8003258 <HAL_RCC_OscConfig+0x324>
 8003240:	4b58      	ldr	r3, [pc, #352]	; (80033a4 <HAL_RCC_OscConfig+0x470>)
 8003242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003244:	4a57      	ldr	r2, [pc, #348]	; (80033a4 <HAL_RCC_OscConfig+0x470>)
 8003246:	f023 0301 	bic.w	r3, r3, #1
 800324a:	6713      	str	r3, [r2, #112]	; 0x70
 800324c:	4b55      	ldr	r3, [pc, #340]	; (80033a4 <HAL_RCC_OscConfig+0x470>)
 800324e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003250:	4a54      	ldr	r2, [pc, #336]	; (80033a4 <HAL_RCC_OscConfig+0x470>)
 8003252:	f023 0304 	bic.w	r3, r3, #4
 8003256:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d015      	beq.n	800328c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003260:	f7fd ff94 	bl	800118c <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003266:	e00a      	b.n	800327e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003268:	f7fd ff90 	bl	800118c <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	f241 3288 	movw	r2, #5000	; 0x1388
 8003276:	4293      	cmp	r3, r2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e0cb      	b.n	8003416 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800327e:	4b49      	ldr	r3, [pc, #292]	; (80033a4 <HAL_RCC_OscConfig+0x470>)
 8003280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0ee      	beq.n	8003268 <HAL_RCC_OscConfig+0x334>
 800328a:	e014      	b.n	80032b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800328c:	f7fd ff7e 	bl	800118c <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003292:	e00a      	b.n	80032aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003294:	f7fd ff7a 	bl	800118c <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e0b5      	b.n	8003416 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032aa:	4b3e      	ldr	r3, [pc, #248]	; (80033a4 <HAL_RCC_OscConfig+0x470>)
 80032ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1ee      	bne.n	8003294 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032b6:	7dfb      	ldrb	r3, [r7, #23]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d105      	bne.n	80032c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032bc:	4b39      	ldr	r3, [pc, #228]	; (80033a4 <HAL_RCC_OscConfig+0x470>)
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	4a38      	ldr	r2, [pc, #224]	; (80033a4 <HAL_RCC_OscConfig+0x470>)
 80032c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 80a1 	beq.w	8003414 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032d2:	4b34      	ldr	r3, [pc, #208]	; (80033a4 <HAL_RCC_OscConfig+0x470>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 030c 	and.w	r3, r3, #12
 80032da:	2b08      	cmp	r3, #8
 80032dc:	d05c      	beq.n	8003398 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d141      	bne.n	800336a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e6:	4b31      	ldr	r3, [pc, #196]	; (80033ac <HAL_RCC_OscConfig+0x478>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ec:	f7fd ff4e 	bl	800118c <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032f4:	f7fd ff4a 	bl	800118c <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e087      	b.n	8003416 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003306:	4b27      	ldr	r3, [pc, #156]	; (80033a4 <HAL_RCC_OscConfig+0x470>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f0      	bne.n	80032f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	69da      	ldr	r2, [r3, #28]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	019b      	lsls	r3, r3, #6
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003328:	085b      	lsrs	r3, r3, #1
 800332a:	3b01      	subs	r3, #1
 800332c:	041b      	lsls	r3, r3, #16
 800332e:	431a      	orrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003334:	061b      	lsls	r3, r3, #24
 8003336:	491b      	ldr	r1, [pc, #108]	; (80033a4 <HAL_RCC_OscConfig+0x470>)
 8003338:	4313      	orrs	r3, r2
 800333a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800333c:	4b1b      	ldr	r3, [pc, #108]	; (80033ac <HAL_RCC_OscConfig+0x478>)
 800333e:	2201      	movs	r2, #1
 8003340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003342:	f7fd ff23 	bl	800118c <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800334a:	f7fd ff1f 	bl	800118c <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e05c      	b.n	8003416 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800335c:	4b11      	ldr	r3, [pc, #68]	; (80033a4 <HAL_RCC_OscConfig+0x470>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0f0      	beq.n	800334a <HAL_RCC_OscConfig+0x416>
 8003368:	e054      	b.n	8003414 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800336a:	4b10      	ldr	r3, [pc, #64]	; (80033ac <HAL_RCC_OscConfig+0x478>)
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003370:	f7fd ff0c 	bl	800118c <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003378:	f7fd ff08 	bl	800118c <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e045      	b.n	8003416 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800338a:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <HAL_RCC_OscConfig+0x470>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1f0      	bne.n	8003378 <HAL_RCC_OscConfig+0x444>
 8003396:	e03d      	b.n	8003414 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d107      	bne.n	80033b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e038      	b.n	8003416 <HAL_RCC_OscConfig+0x4e2>
 80033a4:	40023800 	.word	0x40023800
 80033a8:	40007000 	.word	0x40007000
 80033ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033b0:	4b1b      	ldr	r3, [pc, #108]	; (8003420 <HAL_RCC_OscConfig+0x4ec>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d028      	beq.n	8003410 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d121      	bne.n	8003410 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d11a      	bne.n	8003410 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033e0:	4013      	ands	r3, r2
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d111      	bne.n	8003410 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f6:	085b      	lsrs	r3, r3, #1
 80033f8:	3b01      	subs	r3, #1
 80033fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d107      	bne.n	8003410 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800340c:	429a      	cmp	r2, r3
 800340e:	d001      	beq.n	8003414 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e000      	b.n	8003416 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3718      	adds	r7, #24
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	40023800 	.word	0x40023800

08003424 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e0cc      	b.n	80035d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003438:	4b68      	ldr	r3, [pc, #416]	; (80035dc <HAL_RCC_ClockConfig+0x1b8>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 030f 	and.w	r3, r3, #15
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d90c      	bls.n	8003460 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003446:	4b65      	ldr	r3, [pc, #404]	; (80035dc <HAL_RCC_ClockConfig+0x1b8>)
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	b2d2      	uxtb	r2, r2
 800344c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800344e:	4b63      	ldr	r3, [pc, #396]	; (80035dc <HAL_RCC_ClockConfig+0x1b8>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 030f 	and.w	r3, r3, #15
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	429a      	cmp	r2, r3
 800345a:	d001      	beq.n	8003460 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e0b8      	b.n	80035d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d020      	beq.n	80034ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	d005      	beq.n	8003484 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003478:	4b59      	ldr	r3, [pc, #356]	; (80035e0 <HAL_RCC_ClockConfig+0x1bc>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	4a58      	ldr	r2, [pc, #352]	; (80035e0 <HAL_RCC_ClockConfig+0x1bc>)
 800347e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003482:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b00      	cmp	r3, #0
 800348e:	d005      	beq.n	800349c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003490:	4b53      	ldr	r3, [pc, #332]	; (80035e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	4a52      	ldr	r2, [pc, #328]	; (80035e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003496:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800349a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800349c:	4b50      	ldr	r3, [pc, #320]	; (80035e0 <HAL_RCC_ClockConfig+0x1bc>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	494d      	ldr	r1, [pc, #308]	; (80035e0 <HAL_RCC_ClockConfig+0x1bc>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d044      	beq.n	8003544 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d107      	bne.n	80034d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c2:	4b47      	ldr	r3, [pc, #284]	; (80035e0 <HAL_RCC_ClockConfig+0x1bc>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d119      	bne.n	8003502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e07f      	b.n	80035d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d003      	beq.n	80034e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034de:	2b03      	cmp	r3, #3
 80034e0:	d107      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034e2:	4b3f      	ldr	r3, [pc, #252]	; (80035e0 <HAL_RCC_ClockConfig+0x1bc>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d109      	bne.n	8003502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e06f      	b.n	80035d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f2:	4b3b      	ldr	r3, [pc, #236]	; (80035e0 <HAL_RCC_ClockConfig+0x1bc>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e067      	b.n	80035d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003502:	4b37      	ldr	r3, [pc, #220]	; (80035e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f023 0203 	bic.w	r2, r3, #3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	4934      	ldr	r1, [pc, #208]	; (80035e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003510:	4313      	orrs	r3, r2
 8003512:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003514:	f7fd fe3a 	bl	800118c <HAL_GetTick>
 8003518:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800351a:	e00a      	b.n	8003532 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800351c:	f7fd fe36 	bl	800118c <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	f241 3288 	movw	r2, #5000	; 0x1388
 800352a:	4293      	cmp	r3, r2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e04f      	b.n	80035d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003532:	4b2b      	ldr	r3, [pc, #172]	; (80035e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 020c 	and.w	r2, r3, #12
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	429a      	cmp	r2, r3
 8003542:	d1eb      	bne.n	800351c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003544:	4b25      	ldr	r3, [pc, #148]	; (80035dc <HAL_RCC_ClockConfig+0x1b8>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 030f 	and.w	r3, r3, #15
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d20c      	bcs.n	800356c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003552:	4b22      	ldr	r3, [pc, #136]	; (80035dc <HAL_RCC_ClockConfig+0x1b8>)
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	b2d2      	uxtb	r2, r2
 8003558:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800355a:	4b20      	ldr	r3, [pc, #128]	; (80035dc <HAL_RCC_ClockConfig+0x1b8>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	429a      	cmp	r2, r3
 8003566:	d001      	beq.n	800356c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e032      	b.n	80035d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0304 	and.w	r3, r3, #4
 8003574:	2b00      	cmp	r3, #0
 8003576:	d008      	beq.n	800358a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003578:	4b19      	ldr	r3, [pc, #100]	; (80035e0 <HAL_RCC_ClockConfig+0x1bc>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	4916      	ldr	r1, [pc, #88]	; (80035e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003586:	4313      	orrs	r3, r2
 8003588:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b00      	cmp	r3, #0
 8003594:	d009      	beq.n	80035aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003596:	4b12      	ldr	r3, [pc, #72]	; (80035e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	490e      	ldr	r1, [pc, #56]	; (80035e0 <HAL_RCC_ClockConfig+0x1bc>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035aa:	f000 f821 	bl	80035f0 <HAL_RCC_GetSysClockFreq>
 80035ae:	4602      	mov	r2, r0
 80035b0:	4b0b      	ldr	r3, [pc, #44]	; (80035e0 <HAL_RCC_ClockConfig+0x1bc>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	091b      	lsrs	r3, r3, #4
 80035b6:	f003 030f 	and.w	r3, r3, #15
 80035ba:	490a      	ldr	r1, [pc, #40]	; (80035e4 <HAL_RCC_ClockConfig+0x1c0>)
 80035bc:	5ccb      	ldrb	r3, [r1, r3]
 80035be:	fa22 f303 	lsr.w	r3, r2, r3
 80035c2:	4a09      	ldr	r2, [pc, #36]	; (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 80035c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035c6:	4b09      	ldr	r3, [pc, #36]	; (80035ec <HAL_RCC_ClockConfig+0x1c8>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7fd fd9a 	bl	8001104 <HAL_InitTick>

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	40023c00 	.word	0x40023c00
 80035e0:	40023800 	.word	0x40023800
 80035e4:	0801d478 	.word	0x0801d478
 80035e8:	20000000 	.word	0x20000000
 80035ec:	20000004 	.word	0x20000004

080035f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035f4:	b094      	sub	sp, #80	; 0x50
 80035f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035f8:	2300      	movs	r3, #0
 80035fa:	647b      	str	r3, [r7, #68]	; 0x44
 80035fc:	2300      	movs	r3, #0
 80035fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003600:	2300      	movs	r3, #0
 8003602:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003604:	2300      	movs	r3, #0
 8003606:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003608:	4b79      	ldr	r3, [pc, #484]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f003 030c 	and.w	r3, r3, #12
 8003610:	2b08      	cmp	r3, #8
 8003612:	d00d      	beq.n	8003630 <HAL_RCC_GetSysClockFreq+0x40>
 8003614:	2b08      	cmp	r3, #8
 8003616:	f200 80e1 	bhi.w	80037dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800361a:	2b00      	cmp	r3, #0
 800361c:	d002      	beq.n	8003624 <HAL_RCC_GetSysClockFreq+0x34>
 800361e:	2b04      	cmp	r3, #4
 8003620:	d003      	beq.n	800362a <HAL_RCC_GetSysClockFreq+0x3a>
 8003622:	e0db      	b.n	80037dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003624:	4b73      	ldr	r3, [pc, #460]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003626:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003628:	e0db      	b.n	80037e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800362a:	4b73      	ldr	r3, [pc, #460]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800362c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800362e:	e0d8      	b.n	80037e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003630:	4b6f      	ldr	r3, [pc, #444]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003638:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800363a:	4b6d      	ldr	r3, [pc, #436]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d063      	beq.n	800370e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003646:	4b6a      	ldr	r3, [pc, #424]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	099b      	lsrs	r3, r3, #6
 800364c:	2200      	movs	r2, #0
 800364e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003650:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003658:	633b      	str	r3, [r7, #48]	; 0x30
 800365a:	2300      	movs	r3, #0
 800365c:	637b      	str	r3, [r7, #52]	; 0x34
 800365e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003662:	4622      	mov	r2, r4
 8003664:	462b      	mov	r3, r5
 8003666:	f04f 0000 	mov.w	r0, #0
 800366a:	f04f 0100 	mov.w	r1, #0
 800366e:	0159      	lsls	r1, r3, #5
 8003670:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003674:	0150      	lsls	r0, r2, #5
 8003676:	4602      	mov	r2, r0
 8003678:	460b      	mov	r3, r1
 800367a:	4621      	mov	r1, r4
 800367c:	1a51      	subs	r1, r2, r1
 800367e:	6139      	str	r1, [r7, #16]
 8003680:	4629      	mov	r1, r5
 8003682:	eb63 0301 	sbc.w	r3, r3, r1
 8003686:	617b      	str	r3, [r7, #20]
 8003688:	f04f 0200 	mov.w	r2, #0
 800368c:	f04f 0300 	mov.w	r3, #0
 8003690:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003694:	4659      	mov	r1, fp
 8003696:	018b      	lsls	r3, r1, #6
 8003698:	4651      	mov	r1, sl
 800369a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800369e:	4651      	mov	r1, sl
 80036a0:	018a      	lsls	r2, r1, #6
 80036a2:	4651      	mov	r1, sl
 80036a4:	ebb2 0801 	subs.w	r8, r2, r1
 80036a8:	4659      	mov	r1, fp
 80036aa:	eb63 0901 	sbc.w	r9, r3, r1
 80036ae:	f04f 0200 	mov.w	r2, #0
 80036b2:	f04f 0300 	mov.w	r3, #0
 80036b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036c2:	4690      	mov	r8, r2
 80036c4:	4699      	mov	r9, r3
 80036c6:	4623      	mov	r3, r4
 80036c8:	eb18 0303 	adds.w	r3, r8, r3
 80036cc:	60bb      	str	r3, [r7, #8]
 80036ce:	462b      	mov	r3, r5
 80036d0:	eb49 0303 	adc.w	r3, r9, r3
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	f04f 0200 	mov.w	r2, #0
 80036da:	f04f 0300 	mov.w	r3, #0
 80036de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036e2:	4629      	mov	r1, r5
 80036e4:	024b      	lsls	r3, r1, #9
 80036e6:	4621      	mov	r1, r4
 80036e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036ec:	4621      	mov	r1, r4
 80036ee:	024a      	lsls	r2, r1, #9
 80036f0:	4610      	mov	r0, r2
 80036f2:	4619      	mov	r1, r3
 80036f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036f6:	2200      	movs	r2, #0
 80036f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80036fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003700:	f7fc fdce 	bl	80002a0 <__aeabi_uldivmod>
 8003704:	4602      	mov	r2, r0
 8003706:	460b      	mov	r3, r1
 8003708:	4613      	mov	r3, r2
 800370a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800370c:	e058      	b.n	80037c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800370e:	4b38      	ldr	r3, [pc, #224]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	099b      	lsrs	r3, r3, #6
 8003714:	2200      	movs	r2, #0
 8003716:	4618      	mov	r0, r3
 8003718:	4611      	mov	r1, r2
 800371a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800371e:	623b      	str	r3, [r7, #32]
 8003720:	2300      	movs	r3, #0
 8003722:	627b      	str	r3, [r7, #36]	; 0x24
 8003724:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003728:	4642      	mov	r2, r8
 800372a:	464b      	mov	r3, r9
 800372c:	f04f 0000 	mov.w	r0, #0
 8003730:	f04f 0100 	mov.w	r1, #0
 8003734:	0159      	lsls	r1, r3, #5
 8003736:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800373a:	0150      	lsls	r0, r2, #5
 800373c:	4602      	mov	r2, r0
 800373e:	460b      	mov	r3, r1
 8003740:	4641      	mov	r1, r8
 8003742:	ebb2 0a01 	subs.w	sl, r2, r1
 8003746:	4649      	mov	r1, r9
 8003748:	eb63 0b01 	sbc.w	fp, r3, r1
 800374c:	f04f 0200 	mov.w	r2, #0
 8003750:	f04f 0300 	mov.w	r3, #0
 8003754:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003758:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800375c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003760:	ebb2 040a 	subs.w	r4, r2, sl
 8003764:	eb63 050b 	sbc.w	r5, r3, fp
 8003768:	f04f 0200 	mov.w	r2, #0
 800376c:	f04f 0300 	mov.w	r3, #0
 8003770:	00eb      	lsls	r3, r5, #3
 8003772:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003776:	00e2      	lsls	r2, r4, #3
 8003778:	4614      	mov	r4, r2
 800377a:	461d      	mov	r5, r3
 800377c:	4643      	mov	r3, r8
 800377e:	18e3      	adds	r3, r4, r3
 8003780:	603b      	str	r3, [r7, #0]
 8003782:	464b      	mov	r3, r9
 8003784:	eb45 0303 	adc.w	r3, r5, r3
 8003788:	607b      	str	r3, [r7, #4]
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	f04f 0300 	mov.w	r3, #0
 8003792:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003796:	4629      	mov	r1, r5
 8003798:	028b      	lsls	r3, r1, #10
 800379a:	4621      	mov	r1, r4
 800379c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037a0:	4621      	mov	r1, r4
 80037a2:	028a      	lsls	r2, r1, #10
 80037a4:	4610      	mov	r0, r2
 80037a6:	4619      	mov	r1, r3
 80037a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037aa:	2200      	movs	r2, #0
 80037ac:	61bb      	str	r3, [r7, #24]
 80037ae:	61fa      	str	r2, [r7, #28]
 80037b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037b4:	f7fc fd74 	bl	80002a0 <__aeabi_uldivmod>
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	4613      	mov	r3, r2
 80037be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037c0:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	0c1b      	lsrs	r3, r3, #16
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	3301      	adds	r3, #1
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80037d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80037d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037da:	e002      	b.n	80037e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037dc:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80037de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3750      	adds	r7, #80	; 0x50
 80037e8:	46bd      	mov	sp, r7
 80037ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037ee:	bf00      	nop
 80037f0:	40023800 	.word	0x40023800
 80037f4:	00f42400 	.word	0x00f42400
 80037f8:	007a1200 	.word	0x007a1200

080037fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003800:	4b03      	ldr	r3, [pc, #12]	; (8003810 <HAL_RCC_GetHCLKFreq+0x14>)
 8003802:	681b      	ldr	r3, [r3, #0]
}
 8003804:	4618      	mov	r0, r3
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	20000000 	.word	0x20000000

08003814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003818:	f7ff fff0 	bl	80037fc <HAL_RCC_GetHCLKFreq>
 800381c:	4602      	mov	r2, r0
 800381e:	4b05      	ldr	r3, [pc, #20]	; (8003834 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	0a9b      	lsrs	r3, r3, #10
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	4903      	ldr	r1, [pc, #12]	; (8003838 <HAL_RCC_GetPCLK1Freq+0x24>)
 800382a:	5ccb      	ldrb	r3, [r1, r3]
 800382c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003830:	4618      	mov	r0, r3
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40023800 	.word	0x40023800
 8003838:	0801d488 	.word	0x0801d488

0800383c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003840:	f7ff ffdc 	bl	80037fc <HAL_RCC_GetHCLKFreq>
 8003844:	4602      	mov	r2, r0
 8003846:	4b05      	ldr	r3, [pc, #20]	; (800385c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	0b5b      	lsrs	r3, r3, #13
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	4903      	ldr	r1, [pc, #12]	; (8003860 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003852:	5ccb      	ldrb	r3, [r1, r3]
 8003854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003858:	4618      	mov	r0, r3
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40023800 	.word	0x40023800
 8003860:	0801d488 	.word	0x0801d488

08003864 <HAL_SMARTCARD_Init>:
  * @param  hsc    Pointer to a SMARTCARD_HandleTypeDef structure that contains
  *                the configuration information for SMARTCARD module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMARTCARD_Init(SMARTCARD_HandleTypeDef *hsc)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  /* Check the SMARTCARD handle allocation */
  if(hsc == NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_SMARTCARD_Init+0x12>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e071      	b.n	800395a <HAL_SMARTCARD_Init+0xf6>

  /* Check the parameters */
  assert_param(IS_SMARTCARD_INSTANCE(hsc->Instance));
  assert_param(IS_SMARTCARD_NACK_STATE(hsc->Init.NACKState));

  if(hsc->gState == HAL_SMARTCARD_STATE_RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d106      	bne.n	8003890 <HAL_SMARTCARD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsc->Lock = HAL_UNLOCKED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsc->MspInitCallback(hsc);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_SMARTCARD_MspInit(hsc);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7fd f89a 	bl	80009c4 <HAL_SMARTCARD_MspInit>
#endif /* USE_HAL_SMARTCARD_REGISTER_CALLBACKS */
  }

  hsc->gState = HAL_SMARTCARD_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2224      	movs	r2, #36	; 0x24
 8003894:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Set the Prescaler */
  MODIFY_REG(hsc->Instance->GTPR, USART_GTPR_PSC, hsc->Init.Prescaler);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	619a      	str	r2, [r3, #24]

  /* Set the Guard Time */
  MODIFY_REG(hsc->Instance->GTPR, USART_GTPR_GT, ((hsc->Init.GuardTime)<<8U));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038bc:	021a      	lsls	r2, r3, #8
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	619a      	str	r2, [r3, #24]

  /* Set the Smartcard Communication parameters */
  SMARTCARD_SetConfig(hsc);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f84c 	bl	8003964 <SMARTCARD_SetConfig>

  /* In SmartCard mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(hsc->Instance->CR2, USART_CR2_LINEN);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	691a      	ldr	r2, [r3, #16]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038da:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(hsc->Instance->CR3, (USART_CR3_IREN | USART_CR3_HDSEL));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	695a      	ldr	r2, [r3, #20]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 020a 	bic.w	r2, r2, #10
 80038ea:	615a      	str	r2, [r3, #20]

  /* Enable the SMARTCARD Parity Error Interrupt */
  SET_BIT(hsc->Instance->CR1, USART_CR1_PEIE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038fa:	60da      	str	r2, [r3, #12]

  /* Enable the SMARTCARD Framing Error Interrupt */
  SET_BIT(hsc->Instance->CR3, USART_CR3_EIE);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695a      	ldr	r2, [r3, #20]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 0201 	orr.w	r2, r2, #1
 800390a:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_SMARTCARD_ENABLE(hsc);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68da      	ldr	r2, [r3, #12]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800391a:	60da      	str	r2, [r3, #12]

  /* Configure the Smartcard NACK state */
  MODIFY_REG(hsc->Instance->CR3, USART_CR3_NACK, hsc->Init.NACKState);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	f023 0110 	bic.w	r1, r3, #16
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	615a      	str	r2, [r3, #20]

  /* Enable the SC mode by setting the SCEN bit in the CR3 register */
  hsc->Instance->CR3 |= (USART_CR3_SCEN);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	695a      	ldr	r2, [r3, #20]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f042 0220 	orr.w	r2, r2, #32
 8003940:	615a      	str	r2, [r3, #20]

  /* Initialize the SMARTCARD state*/
  hsc->ErrorCode = HAL_SMARTCARD_ERROR_NONE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	64da      	str	r2, [r3, #76]	; 0x4c
  hsc->gState= HAL_SMARTCARD_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2220      	movs	r2, #32
 800394c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  hsc->RxState= HAL_SMARTCARD_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2220      	movs	r2, #32
 8003954:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
	...

08003964 <SMARTCARD_SetConfig>:
  * @param  hsc    Pointer to a SMARTCARD_HandleTypeDef structure that contains
  *                the configuration information for SMARTCARD module.
  * @retval None
  */
static void SMARTCARD_SetConfig(SMARTCARD_HandleTypeDef *hsc)
{
 8003964:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003968:	b0ba      	sub	sp, #232	; 0xe8
 800396a:	af00      	add	r7, sp, #0
 800396c:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
  uint32_t tmpreg = 0x00U;
 8003970:	2300      	movs	r3, #0
 8003972:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  assert_param(IS_SMARTCARD_MODE(hsc->Init.Mode));
  assert_param(IS_SMARTCARD_NACK_STATE(hsc->Init.NACKState));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(hsc->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8003976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68d9      	ldr	r1, [r3, #12]
 800397e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	f021 030c 	bic.w	r3, r1, #12
 8003988:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = hsc->Instance->CR2;
 800398a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL));
 8003996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800399a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800399e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  /* Configure the SMARTCARD Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to hsc->Init.CLKPolarity value */
  /* Set CPHA bit according to hsc->Init.CLKPhase value */
  /* Set LBCL bit according to hsc->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to hsc->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CR2_CLKEN | hsc->Init.CLKPolarity |
 80039a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039a6:	699a      	ldr	r2, [r3, #24]
                      hsc->Init.CLKPhase| hsc->Init.CLKLastBit | hsc->Init.StopBits);
 80039a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039ac:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CR2_CLKEN | hsc->Init.CLKPolarity |
 80039ae:	431a      	orrs	r2, r3
                      hsc->Init.CLKPhase| hsc->Init.CLKLastBit | hsc->Init.StopBits);
 80039b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	431a      	orrs	r2, r3
 80039b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039bc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CR2_CLKEN | hsc->Init.CLKPolarity |
 80039be:	431a      	orrs	r2, r3
 80039c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039c4:	4313      	orrs	r3, r2
 80039c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80039ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  /* Write to USART CR2 */
  WRITE_REG(hsc->Instance->CR2, (uint32_t)tmpreg);
 80039ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039d8:	6113      	str	r3, [r2, #16]

  tmpreg = hsc->Instance->CR2;
 80039da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80039e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80039ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

  /* Set Stop Bits: Set STOP[13:12] bits according to hsc->Init.StopBits value */
  tmpreg |= (uint32_t)(hsc->Init.StopBits);
 80039f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039f6:	68da      	ldr	r2, [r3, #12]
 80039f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

  /* Write to USART CR2 */
  WRITE_REG(hsc->Instance->CR2, (uint32_t)tmpreg);
 8003a02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a0c:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = hsc->Instance->CR1;
 8003a0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8003a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a1e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003a22:	f023 030c 	bic.w	r3, r3, #12
 8003a26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

  /* Configure the SMARTCARD Word Length, Parity and mode:
     Set the M bits according to hsc->Init.WordLength value
     Set PCE and PS bits according to hsc->Init.Parity value
     Set TE and RE bits according to hsc->Init.Mode value */
  tmpreg |= (uint32_t)hsc->Init.WordLength | hsc->Init.Parity | hsc->Init.Mode;
 8003a2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	431a      	orrs	r2, r3
 8003a38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a44:	4313      	orrs	r3, r2
 8003a46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

  /* Write to USART CR1 */
  WRITE_REG(hsc->Instance->CR1, (uint32_t)tmpreg);
 8003a4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a54:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(hsc->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8003a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6959      	ldr	r1, [r3, #20]
 8003a5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 8003a68:	6153      	str	r3, [r2, #20]

  /*-------------------------- USART BRR Configuration -----------------------*/
#if defined(USART6)
  if((hsc->Instance == USART1) || (hsc->Instance == USART6))
 8003a6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	4b8c      	ldr	r3, [pc, #560]	; (8003ca4 <SMARTCARD_SetConfig+0x340>)
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d006      	beq.n	8003a84 <SMARTCARD_SetConfig+0x120>
 8003a76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	4b8a      	ldr	r3, [pc, #552]	; (8003ca8 <SMARTCARD_SetConfig+0x344>)
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	f040 8116 	bne.w	8003cb0 <SMARTCARD_SetConfig+0x34c>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a84:	f7ff feda 	bl	800383c <HAL_RCC_GetPCLK2Freq>
 8003a88:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
    hsc->Instance->BRR = SMARTCARD_BRR(pclk, hsc->Init.BaudRate);
 8003a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a90:	2200      	movs	r2, #0
 8003a92:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a96:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a9a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003a9e:	4622      	mov	r2, r4
 8003aa0:	462b      	mov	r3, r5
 8003aa2:	1891      	adds	r1, r2, r2
 8003aa4:	6439      	str	r1, [r7, #64]	; 0x40
 8003aa6:	415b      	adcs	r3, r3
 8003aa8:	647b      	str	r3, [r7, #68]	; 0x44
 8003aaa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003aae:	4621      	mov	r1, r4
 8003ab0:	eb12 0801 	adds.w	r8, r2, r1
 8003ab4:	4629      	mov	r1, r5
 8003ab6:	eb43 0901 	adc.w	r9, r3, r1
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	f04f 0300 	mov.w	r3, #0
 8003ac2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ac6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003aca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ace:	4690      	mov	r8, r2
 8003ad0:	4699      	mov	r9, r3
 8003ad2:	4623      	mov	r3, r4
 8003ad4:	eb18 0303 	adds.w	r3, r8, r3
 8003ad8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003adc:	462b      	mov	r3, r5
 8003ade:	eb49 0303 	adc.w	r3, r9, r3
 8003ae2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003ae6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003af2:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003af6:	f04f 0200 	mov.w	r2, #0
 8003afa:	f04f 0300 	mov.w	r3, #0
 8003afe:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 8003b02:	4629      	mov	r1, r5
 8003b04:	008b      	lsls	r3, r1, #2
 8003b06:	4621      	mov	r1, r4
 8003b08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b0c:	4621      	mov	r1, r4
 8003b0e:	008a      	lsls	r2, r1, #2
 8003b10:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003b14:	f7fc fbc4 	bl	80002a0 <__aeabi_uldivmod>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4b63      	ldr	r3, [pc, #396]	; (8003cac <SMARTCARD_SetConfig+0x348>)
 8003b1e:	fba3 2302 	umull	r2, r3, r3, r2
 8003b22:	095b      	lsrs	r3, r3, #5
 8003b24:	011c      	lsls	r4, r3, #4
 8003b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003b34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003b38:	4642      	mov	r2, r8
 8003b3a:	464b      	mov	r3, r9
 8003b3c:	1891      	adds	r1, r2, r2
 8003b3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b40:	415b      	adcs	r3, r3
 8003b42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b48:	4641      	mov	r1, r8
 8003b4a:	1851      	adds	r1, r2, r1
 8003b4c:	6339      	str	r1, [r7, #48]	; 0x30
 8003b4e:	4649      	mov	r1, r9
 8003b50:	414b      	adcs	r3, r1
 8003b52:	637b      	str	r3, [r7, #52]	; 0x34
 8003b54:	f04f 0200 	mov.w	r2, #0
 8003b58:	f04f 0300 	mov.w	r3, #0
 8003b5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b60:	4659      	mov	r1, fp
 8003b62:	00cb      	lsls	r3, r1, #3
 8003b64:	4651      	mov	r1, sl
 8003b66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b6a:	4651      	mov	r1, sl
 8003b6c:	00ca      	lsls	r2, r1, #3
 8003b6e:	4610      	mov	r0, r2
 8003b70:	4619      	mov	r1, r3
 8003b72:	4603      	mov	r3, r0
 8003b74:	4642      	mov	r2, r8
 8003b76:	189b      	adds	r3, r3, r2
 8003b78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b7c:	464b      	mov	r3, r9
 8003b7e:	460a      	mov	r2, r1
 8003b80:	eb42 0303 	adc.w	r3, r2, r3
 8003b84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b98:	f04f 0200 	mov.w	r2, #0
 8003b9c:	f04f 0300 	mov.w	r3, #0
 8003ba0:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8003ba4:	4649      	mov	r1, r9
 8003ba6:	008b      	lsls	r3, r1, #2
 8003ba8:	4641      	mov	r1, r8
 8003baa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bae:	4641      	mov	r1, r8
 8003bb0:	008a      	lsls	r2, r1, #2
 8003bb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003bb6:	f7fc fb73 	bl	80002a0 <__aeabi_uldivmod>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	4b3b      	ldr	r3, [pc, #236]	; (8003cac <SMARTCARD_SetConfig+0x348>)
 8003bc0:	fba3 1302 	umull	r1, r3, r3, r2
 8003bc4:	095b      	lsrs	r3, r3, #5
 8003bc6:	2164      	movs	r1, #100	; 0x64
 8003bc8:	fb01 f303 	mul.w	r3, r1, r3
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	011b      	lsls	r3, r3, #4
 8003bd0:	3332      	adds	r3, #50	; 0x32
 8003bd2:	4a36      	ldr	r2, [pc, #216]	; (8003cac <SMARTCARD_SetConfig+0x348>)
 8003bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd8:	095b      	lsrs	r3, r3, #5
 8003bda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bde:	441c      	add	r4, r3
 8003be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003be4:	2200      	movs	r2, #0
 8003be6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003bea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003bee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003bf2:	4642      	mov	r2, r8
 8003bf4:	464b      	mov	r3, r9
 8003bf6:	1891      	adds	r1, r2, r2
 8003bf8:	62b9      	str	r1, [r7, #40]	; 0x28
 8003bfa:	415b      	adcs	r3, r3
 8003bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c02:	4641      	mov	r1, r8
 8003c04:	1851      	adds	r1, r2, r1
 8003c06:	6239      	str	r1, [r7, #32]
 8003c08:	4649      	mov	r1, r9
 8003c0a:	414b      	adcs	r3, r1
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c0e:	f04f 0200 	mov.w	r2, #0
 8003c12:	f04f 0300 	mov.w	r3, #0
 8003c16:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 8003c1a:	4659      	mov	r1, fp
 8003c1c:	00cb      	lsls	r3, r1, #3
 8003c1e:	4651      	mov	r1, sl
 8003c20:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c24:	4651      	mov	r1, sl
 8003c26:	00ca      	lsls	r2, r1, #3
 8003c28:	4610      	mov	r0, r2
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	4642      	mov	r2, r8
 8003c30:	189b      	adds	r3, r3, r2
 8003c32:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c36:	464b      	mov	r3, r9
 8003c38:	460a      	mov	r2, r1
 8003c3a:	eb42 0303 	adc.w	r3, r2, r3
 8003c3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c52:	f04f 0200 	mov.w	r2, #0
 8003c56:	f04f 0300 	mov.w	r3, #0
 8003c5a:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8003c5e:	4649      	mov	r1, r9
 8003c60:	008b      	lsls	r3, r1, #2
 8003c62:	4641      	mov	r1, r8
 8003c64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c68:	4641      	mov	r1, r8
 8003c6a:	008a      	lsls	r2, r1, #2
 8003c6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c70:	f7fc fb16 	bl	80002a0 <__aeabi_uldivmod>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	4b0c      	ldr	r3, [pc, #48]	; (8003cac <SMARTCARD_SetConfig+0x348>)
 8003c7a:	fba3 1302 	umull	r1, r3, r3, r2
 8003c7e:	095b      	lsrs	r3, r3, #5
 8003c80:	2164      	movs	r1, #100	; 0x64
 8003c82:	fb01 f303 	mul.w	r3, r1, r3
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	011b      	lsls	r3, r3, #4
 8003c8a:	3332      	adds	r3, #50	; 0x32
 8003c8c:	4a07      	ldr	r2, [pc, #28]	; (8003cac <SMARTCARD_SetConfig+0x348>)
 8003c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c92:	095b      	lsrs	r3, r3, #5
 8003c94:	f003 020f 	and.w	r2, r3, #15
 8003c98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4422      	add	r2, r4
 8003ca0:	609a      	str	r2, [r3, #8]
 8003ca2:	e0ff      	b.n	8003ea4 <SMARTCARD_SetConfig+0x540>
 8003ca4:	40011000 	.word	0x40011000
 8003ca8:	40011400 	.word	0x40011400
 8003cac:	51eb851f 	.word	0x51eb851f
    hsc->Instance->BRR = SMARTCARD_BRR(pclk, hsc->Init.BaudRate);
  }
#endif /* USART6 */
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003cb0:	f7ff fdb0 	bl	8003814 <HAL_RCC_GetPCLK1Freq>
 8003cb4:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
    hsc->Instance->BRR = SMARTCARD_BRR(pclk, hsc->Init.BaudRate);
 8003cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003cc2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003cc6:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003cca:	4642      	mov	r2, r8
 8003ccc:	464b      	mov	r3, r9
 8003cce:	1891      	adds	r1, r2, r2
 8003cd0:	61b9      	str	r1, [r7, #24]
 8003cd2:	415b      	adcs	r3, r3
 8003cd4:	61fb      	str	r3, [r7, #28]
 8003cd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cda:	4641      	mov	r1, r8
 8003cdc:	1854      	adds	r4, r2, r1
 8003cde:	4649      	mov	r1, r9
 8003ce0:	eb43 0501 	adc.w	r5, r3, r1
 8003ce4:	f04f 0200 	mov.w	r2, #0
 8003ce8:	f04f 0300 	mov.w	r3, #0
 8003cec:	00eb      	lsls	r3, r5, #3
 8003cee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cf2:	00e2      	lsls	r2, r4, #3
 8003cf4:	4614      	mov	r4, r2
 8003cf6:	461d      	mov	r5, r3
 8003cf8:	4643      	mov	r3, r8
 8003cfa:	18e3      	adds	r3, r4, r3
 8003cfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d00:	464b      	mov	r3, r9
 8003d02:	eb45 0303 	adc.w	r3, r5, r3
 8003d06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d14:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003d16:	f04f 0200 	mov.w	r2, #0
 8003d1a:	f04f 0300 	mov.w	r3, #0
 8003d1e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003d22:	4629      	mov	r1, r5
 8003d24:	008b      	lsls	r3, r1, #2
 8003d26:	4621      	mov	r1, r4
 8003d28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d2c:	4621      	mov	r1, r4
 8003d2e:	008a      	lsls	r2, r1, #2
 8003d30:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003d34:	f7fc fab4 	bl	80002a0 <__aeabi_uldivmod>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	4b5c      	ldr	r3, [pc, #368]	; (8003eb0 <SMARTCARD_SetConfig+0x54c>)
 8003d3e:	fba3 2302 	umull	r2, r3, r3, r2
 8003d42:	095b      	lsrs	r3, r3, #5
 8003d44:	011c      	lsls	r4, r3, #4
 8003d46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	673b      	str	r3, [r7, #112]	; 0x70
 8003d4e:	677a      	str	r2, [r7, #116]	; 0x74
 8003d50:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d54:	4642      	mov	r2, r8
 8003d56:	464b      	mov	r3, r9
 8003d58:	1891      	adds	r1, r2, r2
 8003d5a:	6139      	str	r1, [r7, #16]
 8003d5c:	415b      	adcs	r3, r3
 8003d5e:	617b      	str	r3, [r7, #20]
 8003d60:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003d64:	4641      	mov	r1, r8
 8003d66:	eb12 0a01 	adds.w	sl, r2, r1
 8003d6a:	4649      	mov	r1, r9
 8003d6c:	eb43 0b01 	adc.w	fp, r3, r1
 8003d70:	f04f 0200 	mov.w	r2, #0
 8003d74:	f04f 0300 	mov.w	r3, #0
 8003d78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d84:	4692      	mov	sl, r2
 8003d86:	469b      	mov	fp, r3
 8003d88:	4643      	mov	r3, r8
 8003d8a:	eb1a 0303 	adds.w	r3, sl, r3
 8003d8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d90:	464b      	mov	r3, r9
 8003d92:	eb4b 0303 	adc.w	r3, fp, r3
 8003d96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	663b      	str	r3, [r7, #96]	; 0x60
 8003da2:	667a      	str	r2, [r7, #100]	; 0x64
 8003da4:	f04f 0200 	mov.w	r2, #0
 8003da8:	f04f 0300 	mov.w	r3, #0
 8003dac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003db0:	4649      	mov	r1, r9
 8003db2:	008b      	lsls	r3, r1, #2
 8003db4:	4641      	mov	r1, r8
 8003db6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dba:	4641      	mov	r1, r8
 8003dbc:	008a      	lsls	r2, r1, #2
 8003dbe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003dc2:	f7fc fa6d 	bl	80002a0 <__aeabi_uldivmod>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	460b      	mov	r3, r1
 8003dca:	4b39      	ldr	r3, [pc, #228]	; (8003eb0 <SMARTCARD_SetConfig+0x54c>)
 8003dcc:	fba3 1302 	umull	r1, r3, r3, r2
 8003dd0:	095b      	lsrs	r3, r3, #5
 8003dd2:	2164      	movs	r1, #100	; 0x64
 8003dd4:	fb01 f303 	mul.w	r3, r1, r3
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	011b      	lsls	r3, r3, #4
 8003ddc:	3332      	adds	r3, #50	; 0x32
 8003dde:	4a34      	ldr	r2, [pc, #208]	; (8003eb0 <SMARTCARD_SetConfig+0x54c>)
 8003de0:	fba2 2303 	umull	r2, r3, r2, r3
 8003de4:	095b      	lsrs	r3, r3, #5
 8003de6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dea:	441c      	add	r4, r3
 8003dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003df0:	2200      	movs	r2, #0
 8003df2:	65bb      	str	r3, [r7, #88]	; 0x58
 8003df4:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003df6:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 8003dfa:	4642      	mov	r2, r8
 8003dfc:	464b      	mov	r3, r9
 8003dfe:	1891      	adds	r1, r2, r2
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	415b      	adcs	r3, r3
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e0a:	4641      	mov	r1, r8
 8003e0c:	1851      	adds	r1, r2, r1
 8003e0e:	6039      	str	r1, [r7, #0]
 8003e10:	4649      	mov	r1, r9
 8003e12:	414b      	adcs	r3, r1
 8003e14:	607b      	str	r3, [r7, #4]
 8003e16:	f04f 0200 	mov.w	r2, #0
 8003e1a:	f04f 0300 	mov.w	r3, #0
 8003e1e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e22:	4659      	mov	r1, fp
 8003e24:	00cb      	lsls	r3, r1, #3
 8003e26:	4651      	mov	r1, sl
 8003e28:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e2c:	4651      	mov	r1, sl
 8003e2e:	00ca      	lsls	r2, r1, #3
 8003e30:	4610      	mov	r0, r2
 8003e32:	4619      	mov	r1, r3
 8003e34:	4603      	mov	r3, r0
 8003e36:	4642      	mov	r2, r8
 8003e38:	189b      	adds	r3, r3, r2
 8003e3a:	653b      	str	r3, [r7, #80]	; 0x50
 8003e3c:	464b      	mov	r3, r9
 8003e3e:	460a      	mov	r2, r1
 8003e40:	eb42 0303 	adc.w	r3, r2, r3
 8003e44:	657b      	str	r3, [r7, #84]	; 0x54
 8003e46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e50:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003e52:	f04f 0200 	mov.w	r2, #0
 8003e56:	f04f 0300 	mov.w	r3, #0
 8003e5a:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8003e5e:	4649      	mov	r1, r9
 8003e60:	008b      	lsls	r3, r1, #2
 8003e62:	4641      	mov	r1, r8
 8003e64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e68:	4641      	mov	r1, r8
 8003e6a:	008a      	lsls	r2, r1, #2
 8003e6c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003e70:	f7fc fa16 	bl	80002a0 <__aeabi_uldivmod>
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	4b0d      	ldr	r3, [pc, #52]	; (8003eb0 <SMARTCARD_SetConfig+0x54c>)
 8003e7a:	fba3 1302 	umull	r1, r3, r3, r2
 8003e7e:	095b      	lsrs	r3, r3, #5
 8003e80:	2164      	movs	r1, #100	; 0x64
 8003e82:	fb01 f303 	mul.w	r3, r1, r3
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	011b      	lsls	r3, r3, #4
 8003e8a:	3332      	adds	r3, #50	; 0x32
 8003e8c:	4a08      	ldr	r2, [pc, #32]	; (8003eb0 <SMARTCARD_SetConfig+0x54c>)
 8003e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e92:	095b      	lsrs	r3, r3, #5
 8003e94:	f003 020f 	and.w	r2, r3, #15
 8003e98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4422      	add	r2, r4
 8003ea0:	609a      	str	r2, [r3, #8]
  }
}
 8003ea2:	bf00      	nop
 8003ea4:	bf00      	nop
 8003ea6:	37e8      	adds	r7, #232	; 0xe8
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eae:	bf00      	nop
 8003eb0:	51eb851f 	.word	0x51eb851f

08003eb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e03f      	b.n	8003f46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d106      	bne.n	8003ee0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7fc fdba 	bl	8000a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2224      	movs	r2, #36	; 0x24
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68da      	ldr	r2, [r3, #12]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ef6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 f929 	bl	8004150 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	691a      	ldr	r2, [r3, #16]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	695a      	ldr	r2, [r3, #20]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68da      	ldr	r2, [r3, #12]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2220      	movs	r2, #32
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b08a      	sub	sp, #40	; 0x28
 8003f52:	af02      	add	r7, sp, #8
 8003f54:	60f8      	str	r0, [r7, #12]
 8003f56:	60b9      	str	r1, [r7, #8]
 8003f58:	603b      	str	r3, [r7, #0]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b20      	cmp	r3, #32
 8003f6c:	d17c      	bne.n	8004068 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d002      	beq.n	8003f7a <HAL_UART_Transmit+0x2c>
 8003f74:	88fb      	ldrh	r3, [r7, #6]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e075      	b.n	800406a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d101      	bne.n	8003f8c <HAL_UART_Transmit+0x3e>
 8003f88:	2302      	movs	r3, #2
 8003f8a:	e06e      	b.n	800406a <HAL_UART_Transmit+0x11c>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2221      	movs	r2, #33	; 0x21
 8003f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fa2:	f7fd f8f3 	bl	800118c <HAL_GetTick>
 8003fa6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	88fa      	ldrh	r2, [r7, #6]
 8003fac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	88fa      	ldrh	r2, [r7, #6]
 8003fb2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fbc:	d108      	bne.n	8003fd0 <HAL_UART_Transmit+0x82>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d104      	bne.n	8003fd0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	61bb      	str	r3, [r7, #24]
 8003fce:	e003      	b.n	8003fd8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003fe0:	e02a      	b.n	8004038 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	2180      	movs	r1, #128	; 0x80
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f000 f840 	bl	8004072 <UART_WaitOnFlagUntilTimeout>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e036      	b.n	800406a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10b      	bne.n	800401a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	881b      	ldrh	r3, [r3, #0]
 8004006:	461a      	mov	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004010:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	3302      	adds	r3, #2
 8004016:	61bb      	str	r3, [r7, #24]
 8004018:	e007      	b.n	800402a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	781a      	ldrb	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	3301      	adds	r3, #1
 8004028:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800402e:	b29b      	uxth	r3, r3
 8004030:	3b01      	subs	r3, #1
 8004032:	b29a      	uxth	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800403c:	b29b      	uxth	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1cf      	bne.n	8003fe2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2200      	movs	r2, #0
 800404a:	2140      	movs	r1, #64	; 0x40
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f000 f810 	bl	8004072 <UART_WaitOnFlagUntilTimeout>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e006      	b.n	800406a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2220      	movs	r2, #32
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004064:	2300      	movs	r3, #0
 8004066:	e000      	b.n	800406a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004068:	2302      	movs	r3, #2
  }
}
 800406a:	4618      	mov	r0, r3
 800406c:	3720      	adds	r7, #32
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b090      	sub	sp, #64	; 0x40
 8004076:	af00      	add	r7, sp, #0
 8004078:	60f8      	str	r0, [r7, #12]
 800407a:	60b9      	str	r1, [r7, #8]
 800407c:	603b      	str	r3, [r7, #0]
 800407e:	4613      	mov	r3, r2
 8004080:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004082:	e050      	b.n	8004126 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004084:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408a:	d04c      	beq.n	8004126 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800408c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800408e:	2b00      	cmp	r3, #0
 8004090:	d007      	beq.n	80040a2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004092:	f7fd f87b 	bl	800118c <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800409e:	429a      	cmp	r2, r3
 80040a0:	d241      	bcs.n	8004126 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	330c      	adds	r3, #12
 80040a8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ac:	e853 3f00 	ldrex	r3, [r3]
 80040b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	330c      	adds	r3, #12
 80040c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040c2:	637a      	str	r2, [r7, #52]	; 0x34
 80040c4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040ca:	e841 2300 	strex	r3, r2, [r1]
 80040ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1e5      	bne.n	80040a2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3314      	adds	r3, #20
 80040dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	e853 3f00 	ldrex	r3, [r3]
 80040e4:	613b      	str	r3, [r7, #16]
   return(result);
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f023 0301 	bic.w	r3, r3, #1
 80040ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	3314      	adds	r3, #20
 80040f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040f6:	623a      	str	r2, [r7, #32]
 80040f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fa:	69f9      	ldr	r1, [r7, #28]
 80040fc:	6a3a      	ldr	r2, [r7, #32]
 80040fe:	e841 2300 	strex	r3, r2, [r1]
 8004102:	61bb      	str	r3, [r7, #24]
   return(result);
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1e5      	bne.n	80040d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2220      	movs	r2, #32
 800410e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2220      	movs	r2, #32
 8004116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e00f      	b.n	8004146 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	4013      	ands	r3, r2
 8004130:	68ba      	ldr	r2, [r7, #8]
 8004132:	429a      	cmp	r2, r3
 8004134:	bf0c      	ite	eq
 8004136:	2301      	moveq	r3, #1
 8004138:	2300      	movne	r3, #0
 800413a:	b2db      	uxtb	r3, r3
 800413c:	461a      	mov	r2, r3
 800413e:	79fb      	ldrb	r3, [r7, #7]
 8004140:	429a      	cmp	r2, r3
 8004142:	d09f      	beq.n	8004084 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3740      	adds	r7, #64	; 0x40
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
	...

08004150 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004150:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004154:	b0c0      	sub	sp, #256	; 0x100
 8004156:	af00      	add	r7, sp, #0
 8004158:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800415c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800416c:	68d9      	ldr	r1, [r3, #12]
 800416e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	ea40 0301 	orr.w	r3, r0, r1
 8004178:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800417a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800417e:	689a      	ldr	r2, [r3, #8]
 8004180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	431a      	orrs	r2, r3
 8004188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	431a      	orrs	r2, r3
 8004190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004194:	69db      	ldr	r3, [r3, #28]
 8004196:	4313      	orrs	r3, r2
 8004198:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800419c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80041a8:	f021 010c 	bic.w	r1, r1, #12
 80041ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80041b6:	430b      	orrs	r3, r1
 80041b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80041c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ca:	6999      	ldr	r1, [r3, #24]
 80041cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	ea40 0301 	orr.w	r3, r0, r1
 80041d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	4b8f      	ldr	r3, [pc, #572]	; (800441c <UART_SetConfig+0x2cc>)
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d005      	beq.n	80041f0 <UART_SetConfig+0xa0>
 80041e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	4b8d      	ldr	r3, [pc, #564]	; (8004420 <UART_SetConfig+0x2d0>)
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d104      	bne.n	80041fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041f0:	f7ff fb24 	bl	800383c <HAL_RCC_GetPCLK2Freq>
 80041f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80041f8:	e003      	b.n	8004202 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041fa:	f7ff fb0b 	bl	8003814 <HAL_RCC_GetPCLK1Freq>
 80041fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800420c:	f040 810c 	bne.w	8004428 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004210:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004214:	2200      	movs	r2, #0
 8004216:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800421a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800421e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004222:	4622      	mov	r2, r4
 8004224:	462b      	mov	r3, r5
 8004226:	1891      	adds	r1, r2, r2
 8004228:	65b9      	str	r1, [r7, #88]	; 0x58
 800422a:	415b      	adcs	r3, r3
 800422c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800422e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004232:	4621      	mov	r1, r4
 8004234:	eb12 0801 	adds.w	r8, r2, r1
 8004238:	4629      	mov	r1, r5
 800423a:	eb43 0901 	adc.w	r9, r3, r1
 800423e:	f04f 0200 	mov.w	r2, #0
 8004242:	f04f 0300 	mov.w	r3, #0
 8004246:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800424a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800424e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004252:	4690      	mov	r8, r2
 8004254:	4699      	mov	r9, r3
 8004256:	4623      	mov	r3, r4
 8004258:	eb18 0303 	adds.w	r3, r8, r3
 800425c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004260:	462b      	mov	r3, r5
 8004262:	eb49 0303 	adc.w	r3, r9, r3
 8004266:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800426a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004276:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800427a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800427e:	460b      	mov	r3, r1
 8004280:	18db      	adds	r3, r3, r3
 8004282:	653b      	str	r3, [r7, #80]	; 0x50
 8004284:	4613      	mov	r3, r2
 8004286:	eb42 0303 	adc.w	r3, r2, r3
 800428a:	657b      	str	r3, [r7, #84]	; 0x54
 800428c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004290:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004294:	f7fc f804 	bl	80002a0 <__aeabi_uldivmod>
 8004298:	4602      	mov	r2, r0
 800429a:	460b      	mov	r3, r1
 800429c:	4b61      	ldr	r3, [pc, #388]	; (8004424 <UART_SetConfig+0x2d4>)
 800429e:	fba3 2302 	umull	r2, r3, r3, r2
 80042a2:	095b      	lsrs	r3, r3, #5
 80042a4:	011c      	lsls	r4, r3, #4
 80042a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042aa:	2200      	movs	r2, #0
 80042ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80042b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80042b8:	4642      	mov	r2, r8
 80042ba:	464b      	mov	r3, r9
 80042bc:	1891      	adds	r1, r2, r2
 80042be:	64b9      	str	r1, [r7, #72]	; 0x48
 80042c0:	415b      	adcs	r3, r3
 80042c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80042c8:	4641      	mov	r1, r8
 80042ca:	eb12 0a01 	adds.w	sl, r2, r1
 80042ce:	4649      	mov	r1, r9
 80042d0:	eb43 0b01 	adc.w	fp, r3, r1
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	f04f 0300 	mov.w	r3, #0
 80042dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042e8:	4692      	mov	sl, r2
 80042ea:	469b      	mov	fp, r3
 80042ec:	4643      	mov	r3, r8
 80042ee:	eb1a 0303 	adds.w	r3, sl, r3
 80042f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042f6:	464b      	mov	r3, r9
 80042f8:	eb4b 0303 	adc.w	r3, fp, r3
 80042fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800430c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004310:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004314:	460b      	mov	r3, r1
 8004316:	18db      	adds	r3, r3, r3
 8004318:	643b      	str	r3, [r7, #64]	; 0x40
 800431a:	4613      	mov	r3, r2
 800431c:	eb42 0303 	adc.w	r3, r2, r3
 8004320:	647b      	str	r3, [r7, #68]	; 0x44
 8004322:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004326:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800432a:	f7fb ffb9 	bl	80002a0 <__aeabi_uldivmod>
 800432e:	4602      	mov	r2, r0
 8004330:	460b      	mov	r3, r1
 8004332:	4611      	mov	r1, r2
 8004334:	4b3b      	ldr	r3, [pc, #236]	; (8004424 <UART_SetConfig+0x2d4>)
 8004336:	fba3 2301 	umull	r2, r3, r3, r1
 800433a:	095b      	lsrs	r3, r3, #5
 800433c:	2264      	movs	r2, #100	; 0x64
 800433e:	fb02 f303 	mul.w	r3, r2, r3
 8004342:	1acb      	subs	r3, r1, r3
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800434a:	4b36      	ldr	r3, [pc, #216]	; (8004424 <UART_SetConfig+0x2d4>)
 800434c:	fba3 2302 	umull	r2, r3, r3, r2
 8004350:	095b      	lsrs	r3, r3, #5
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004358:	441c      	add	r4, r3
 800435a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800435e:	2200      	movs	r2, #0
 8004360:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004364:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004368:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800436c:	4642      	mov	r2, r8
 800436e:	464b      	mov	r3, r9
 8004370:	1891      	adds	r1, r2, r2
 8004372:	63b9      	str	r1, [r7, #56]	; 0x38
 8004374:	415b      	adcs	r3, r3
 8004376:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004378:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800437c:	4641      	mov	r1, r8
 800437e:	1851      	adds	r1, r2, r1
 8004380:	6339      	str	r1, [r7, #48]	; 0x30
 8004382:	4649      	mov	r1, r9
 8004384:	414b      	adcs	r3, r1
 8004386:	637b      	str	r3, [r7, #52]	; 0x34
 8004388:	f04f 0200 	mov.w	r2, #0
 800438c:	f04f 0300 	mov.w	r3, #0
 8004390:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004394:	4659      	mov	r1, fp
 8004396:	00cb      	lsls	r3, r1, #3
 8004398:	4651      	mov	r1, sl
 800439a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800439e:	4651      	mov	r1, sl
 80043a0:	00ca      	lsls	r2, r1, #3
 80043a2:	4610      	mov	r0, r2
 80043a4:	4619      	mov	r1, r3
 80043a6:	4603      	mov	r3, r0
 80043a8:	4642      	mov	r2, r8
 80043aa:	189b      	adds	r3, r3, r2
 80043ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043b0:	464b      	mov	r3, r9
 80043b2:	460a      	mov	r2, r1
 80043b4:	eb42 0303 	adc.w	r3, r2, r3
 80043b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80043c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80043cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80043d0:	460b      	mov	r3, r1
 80043d2:	18db      	adds	r3, r3, r3
 80043d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80043d6:	4613      	mov	r3, r2
 80043d8:	eb42 0303 	adc.w	r3, r2, r3
 80043dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80043e6:	f7fb ff5b 	bl	80002a0 <__aeabi_uldivmod>
 80043ea:	4602      	mov	r2, r0
 80043ec:	460b      	mov	r3, r1
 80043ee:	4b0d      	ldr	r3, [pc, #52]	; (8004424 <UART_SetConfig+0x2d4>)
 80043f0:	fba3 1302 	umull	r1, r3, r3, r2
 80043f4:	095b      	lsrs	r3, r3, #5
 80043f6:	2164      	movs	r1, #100	; 0x64
 80043f8:	fb01 f303 	mul.w	r3, r1, r3
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	00db      	lsls	r3, r3, #3
 8004400:	3332      	adds	r3, #50	; 0x32
 8004402:	4a08      	ldr	r2, [pc, #32]	; (8004424 <UART_SetConfig+0x2d4>)
 8004404:	fba2 2303 	umull	r2, r3, r2, r3
 8004408:	095b      	lsrs	r3, r3, #5
 800440a:	f003 0207 	and.w	r2, r3, #7
 800440e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4422      	add	r2, r4
 8004416:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004418:	e105      	b.n	8004626 <UART_SetConfig+0x4d6>
 800441a:	bf00      	nop
 800441c:	40011000 	.word	0x40011000
 8004420:	40011400 	.word	0x40011400
 8004424:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004428:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800442c:	2200      	movs	r2, #0
 800442e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004432:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004436:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800443a:	4642      	mov	r2, r8
 800443c:	464b      	mov	r3, r9
 800443e:	1891      	adds	r1, r2, r2
 8004440:	6239      	str	r1, [r7, #32]
 8004442:	415b      	adcs	r3, r3
 8004444:	627b      	str	r3, [r7, #36]	; 0x24
 8004446:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800444a:	4641      	mov	r1, r8
 800444c:	1854      	adds	r4, r2, r1
 800444e:	4649      	mov	r1, r9
 8004450:	eb43 0501 	adc.w	r5, r3, r1
 8004454:	f04f 0200 	mov.w	r2, #0
 8004458:	f04f 0300 	mov.w	r3, #0
 800445c:	00eb      	lsls	r3, r5, #3
 800445e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004462:	00e2      	lsls	r2, r4, #3
 8004464:	4614      	mov	r4, r2
 8004466:	461d      	mov	r5, r3
 8004468:	4643      	mov	r3, r8
 800446a:	18e3      	adds	r3, r4, r3
 800446c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004470:	464b      	mov	r3, r9
 8004472:	eb45 0303 	adc.w	r3, r5, r3
 8004476:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800447a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004486:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800448a:	f04f 0200 	mov.w	r2, #0
 800448e:	f04f 0300 	mov.w	r3, #0
 8004492:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004496:	4629      	mov	r1, r5
 8004498:	008b      	lsls	r3, r1, #2
 800449a:	4621      	mov	r1, r4
 800449c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044a0:	4621      	mov	r1, r4
 80044a2:	008a      	lsls	r2, r1, #2
 80044a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80044a8:	f7fb fefa 	bl	80002a0 <__aeabi_uldivmod>
 80044ac:	4602      	mov	r2, r0
 80044ae:	460b      	mov	r3, r1
 80044b0:	4b60      	ldr	r3, [pc, #384]	; (8004634 <UART_SetConfig+0x4e4>)
 80044b2:	fba3 2302 	umull	r2, r3, r3, r2
 80044b6:	095b      	lsrs	r3, r3, #5
 80044b8:	011c      	lsls	r4, r3, #4
 80044ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044be:	2200      	movs	r2, #0
 80044c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80044c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80044c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80044cc:	4642      	mov	r2, r8
 80044ce:	464b      	mov	r3, r9
 80044d0:	1891      	adds	r1, r2, r2
 80044d2:	61b9      	str	r1, [r7, #24]
 80044d4:	415b      	adcs	r3, r3
 80044d6:	61fb      	str	r3, [r7, #28]
 80044d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044dc:	4641      	mov	r1, r8
 80044de:	1851      	adds	r1, r2, r1
 80044e0:	6139      	str	r1, [r7, #16]
 80044e2:	4649      	mov	r1, r9
 80044e4:	414b      	adcs	r3, r1
 80044e6:	617b      	str	r3, [r7, #20]
 80044e8:	f04f 0200 	mov.w	r2, #0
 80044ec:	f04f 0300 	mov.w	r3, #0
 80044f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044f4:	4659      	mov	r1, fp
 80044f6:	00cb      	lsls	r3, r1, #3
 80044f8:	4651      	mov	r1, sl
 80044fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044fe:	4651      	mov	r1, sl
 8004500:	00ca      	lsls	r2, r1, #3
 8004502:	4610      	mov	r0, r2
 8004504:	4619      	mov	r1, r3
 8004506:	4603      	mov	r3, r0
 8004508:	4642      	mov	r2, r8
 800450a:	189b      	adds	r3, r3, r2
 800450c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004510:	464b      	mov	r3, r9
 8004512:	460a      	mov	r2, r1
 8004514:	eb42 0303 	adc.w	r3, r2, r3
 8004518:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800451c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	67bb      	str	r3, [r7, #120]	; 0x78
 8004526:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004528:	f04f 0200 	mov.w	r2, #0
 800452c:	f04f 0300 	mov.w	r3, #0
 8004530:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004534:	4649      	mov	r1, r9
 8004536:	008b      	lsls	r3, r1, #2
 8004538:	4641      	mov	r1, r8
 800453a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800453e:	4641      	mov	r1, r8
 8004540:	008a      	lsls	r2, r1, #2
 8004542:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004546:	f7fb feab 	bl	80002a0 <__aeabi_uldivmod>
 800454a:	4602      	mov	r2, r0
 800454c:	460b      	mov	r3, r1
 800454e:	4b39      	ldr	r3, [pc, #228]	; (8004634 <UART_SetConfig+0x4e4>)
 8004550:	fba3 1302 	umull	r1, r3, r3, r2
 8004554:	095b      	lsrs	r3, r3, #5
 8004556:	2164      	movs	r1, #100	; 0x64
 8004558:	fb01 f303 	mul.w	r3, r1, r3
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	011b      	lsls	r3, r3, #4
 8004560:	3332      	adds	r3, #50	; 0x32
 8004562:	4a34      	ldr	r2, [pc, #208]	; (8004634 <UART_SetConfig+0x4e4>)
 8004564:	fba2 2303 	umull	r2, r3, r2, r3
 8004568:	095b      	lsrs	r3, r3, #5
 800456a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800456e:	441c      	add	r4, r3
 8004570:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004574:	2200      	movs	r2, #0
 8004576:	673b      	str	r3, [r7, #112]	; 0x70
 8004578:	677a      	str	r2, [r7, #116]	; 0x74
 800457a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800457e:	4642      	mov	r2, r8
 8004580:	464b      	mov	r3, r9
 8004582:	1891      	adds	r1, r2, r2
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	415b      	adcs	r3, r3
 8004588:	60fb      	str	r3, [r7, #12]
 800458a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800458e:	4641      	mov	r1, r8
 8004590:	1851      	adds	r1, r2, r1
 8004592:	6039      	str	r1, [r7, #0]
 8004594:	4649      	mov	r1, r9
 8004596:	414b      	adcs	r3, r1
 8004598:	607b      	str	r3, [r7, #4]
 800459a:	f04f 0200 	mov.w	r2, #0
 800459e:	f04f 0300 	mov.w	r3, #0
 80045a2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80045a6:	4659      	mov	r1, fp
 80045a8:	00cb      	lsls	r3, r1, #3
 80045aa:	4651      	mov	r1, sl
 80045ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045b0:	4651      	mov	r1, sl
 80045b2:	00ca      	lsls	r2, r1, #3
 80045b4:	4610      	mov	r0, r2
 80045b6:	4619      	mov	r1, r3
 80045b8:	4603      	mov	r3, r0
 80045ba:	4642      	mov	r2, r8
 80045bc:	189b      	adds	r3, r3, r2
 80045be:	66bb      	str	r3, [r7, #104]	; 0x68
 80045c0:	464b      	mov	r3, r9
 80045c2:	460a      	mov	r2, r1
 80045c4:	eb42 0303 	adc.w	r3, r2, r3
 80045c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	663b      	str	r3, [r7, #96]	; 0x60
 80045d4:	667a      	str	r2, [r7, #100]	; 0x64
 80045d6:	f04f 0200 	mov.w	r2, #0
 80045da:	f04f 0300 	mov.w	r3, #0
 80045de:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80045e2:	4649      	mov	r1, r9
 80045e4:	008b      	lsls	r3, r1, #2
 80045e6:	4641      	mov	r1, r8
 80045e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045ec:	4641      	mov	r1, r8
 80045ee:	008a      	lsls	r2, r1, #2
 80045f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80045f4:	f7fb fe54 	bl	80002a0 <__aeabi_uldivmod>
 80045f8:	4602      	mov	r2, r0
 80045fa:	460b      	mov	r3, r1
 80045fc:	4b0d      	ldr	r3, [pc, #52]	; (8004634 <UART_SetConfig+0x4e4>)
 80045fe:	fba3 1302 	umull	r1, r3, r3, r2
 8004602:	095b      	lsrs	r3, r3, #5
 8004604:	2164      	movs	r1, #100	; 0x64
 8004606:	fb01 f303 	mul.w	r3, r1, r3
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	011b      	lsls	r3, r3, #4
 800460e:	3332      	adds	r3, #50	; 0x32
 8004610:	4a08      	ldr	r2, [pc, #32]	; (8004634 <UART_SetConfig+0x4e4>)
 8004612:	fba2 2303 	umull	r2, r3, r2, r3
 8004616:	095b      	lsrs	r3, r3, #5
 8004618:	f003 020f 	and.w	r2, r3, #15
 800461c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4422      	add	r2, r4
 8004624:	609a      	str	r2, [r3, #8]
}
 8004626:	bf00      	nop
 8004628:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800462c:	46bd      	mov	sp, r7
 800462e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004632:	bf00      	nop
 8004634:	51eb851f 	.word	0x51eb851f

08004638 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004638:	b084      	sub	sp, #16
 800463a:	b580      	push	{r7, lr}
 800463c:	b084      	sub	sp, #16
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
 8004642:	f107 001c 	add.w	r0, r7, #28
 8004646:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800464a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464c:	2b01      	cmp	r3, #1
 800464e:	d122      	bne.n	8004696 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004654:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004664:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800467a:	2b01      	cmp	r3, #1
 800467c:	d105      	bne.n	800468a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 faa2 	bl	8004bd4 <USB_CoreReset>
 8004690:	4603      	mov	r3, r0
 8004692:	73fb      	strb	r3, [r7, #15]
 8004694:	e01a      	b.n	80046cc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 fa96 	bl	8004bd4 <USB_CoreReset>
 80046a8:	4603      	mov	r3, r0
 80046aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80046ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d106      	bne.n	80046c0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	639a      	str	r2, [r3, #56]	; 0x38
 80046be:	e005      	b.n	80046cc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80046cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d10b      	bne.n	80046ea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f043 0206 	orr.w	r2, r3, #6
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f043 0220 	orr.w	r2, r3, #32
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80046ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046f6:	b004      	add	sp, #16
 80046f8:	4770      	bx	lr

080046fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b083      	sub	sp, #12
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f023 0201 	bic.w	r2, r3, #1
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	460b      	mov	r3, r1
 8004726:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004728:	2300      	movs	r3, #0
 800472a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004738:	78fb      	ldrb	r3, [r7, #3]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d115      	bne.n	800476a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800474a:	2001      	movs	r0, #1
 800474c:	f7fc fd2a 	bl	80011a4 <HAL_Delay>
      ms++;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	3301      	adds	r3, #1
 8004754:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 fa2e 	bl	8004bb8 <USB_GetMode>
 800475c:	4603      	mov	r3, r0
 800475e:	2b01      	cmp	r3, #1
 8004760:	d01e      	beq.n	80047a0 <USB_SetCurrentMode+0x84>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2b31      	cmp	r3, #49	; 0x31
 8004766:	d9f0      	bls.n	800474a <USB_SetCurrentMode+0x2e>
 8004768:	e01a      	b.n	80047a0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800476a:	78fb      	ldrb	r3, [r7, #3]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d115      	bne.n	800479c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800477c:	2001      	movs	r0, #1
 800477e:	f7fc fd11 	bl	80011a4 <HAL_Delay>
      ms++;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	3301      	adds	r3, #1
 8004786:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 fa15 	bl	8004bb8 <USB_GetMode>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d005      	beq.n	80047a0 <USB_SetCurrentMode+0x84>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2b31      	cmp	r3, #49	; 0x31
 8004798:	d9f0      	bls.n	800477c <USB_SetCurrentMode+0x60>
 800479a:	e001      	b.n	80047a0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e005      	b.n	80047ac <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2b32      	cmp	r3, #50	; 0x32
 80047a4:	d101      	bne.n	80047aa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e000      	b.n	80047ac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047b4:	b084      	sub	sp, #16
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b086      	sub	sp, #24
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
 80047be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80047c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80047c6:	2300      	movs	r3, #0
 80047c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80047ce:	2300      	movs	r3, #0
 80047d0:	613b      	str	r3, [r7, #16]
 80047d2:	e009      	b.n	80047e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	3340      	adds	r3, #64	; 0x40
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4413      	add	r3, r2
 80047de:	2200      	movs	r2, #0
 80047e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	3301      	adds	r3, #1
 80047e6:	613b      	str	r3, [r7, #16]
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	2b0e      	cmp	r3, #14
 80047ec:	d9f2      	bls.n	80047d4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80047ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d11c      	bne.n	800482e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004802:	f043 0302 	orr.w	r3, r3, #2
 8004806:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004818:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004824:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	639a      	str	r2, [r3, #56]	; 0x38
 800482c:	e00b      	b.n	8004846 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004832:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800484c:	461a      	mov	r2, r3
 800484e:	2300      	movs	r3, #0
 8004850:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004858:	4619      	mov	r1, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004860:	461a      	mov	r2, r3
 8004862:	680b      	ldr	r3, [r1, #0]
 8004864:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004868:	2b01      	cmp	r3, #1
 800486a:	d10c      	bne.n	8004886 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800486c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486e:	2b00      	cmp	r3, #0
 8004870:	d104      	bne.n	800487c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004872:	2100      	movs	r1, #0
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 f965 	bl	8004b44 <USB_SetDevSpeed>
 800487a:	e008      	b.n	800488e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800487c:	2101      	movs	r1, #1
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 f960 	bl	8004b44 <USB_SetDevSpeed>
 8004884:	e003      	b.n	800488e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004886:	2103      	movs	r1, #3
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 f95b 	bl	8004b44 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800488e:	2110      	movs	r1, #16
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 f8f3 	bl	8004a7c <USB_FlushTxFifo>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d001      	beq.n	80048a0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 f91f 	bl	8004ae4 <USB_FlushRxFifo>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048b6:	461a      	mov	r2, r3
 80048b8:	2300      	movs	r3, #0
 80048ba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048c2:	461a      	mov	r2, r3
 80048c4:	2300      	movs	r3, #0
 80048c6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ce:	461a      	mov	r2, r3
 80048d0:	2300      	movs	r3, #0
 80048d2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048d4:	2300      	movs	r3, #0
 80048d6:	613b      	str	r3, [r7, #16]
 80048d8:	e043      	b.n	8004962 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048f0:	d118      	bne.n	8004924 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10a      	bne.n	800490e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004904:	461a      	mov	r2, r3
 8004906:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800490a:	6013      	str	r3, [r2, #0]
 800490c:	e013      	b.n	8004936 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	015a      	lsls	r2, r3, #5
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	4413      	add	r3, r2
 8004916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800491a:	461a      	mov	r2, r3
 800491c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004920:	6013      	str	r3, [r2, #0]
 8004922:	e008      	b.n	8004936 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	015a      	lsls	r2, r3, #5
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	4413      	add	r3, r2
 800492c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004930:	461a      	mov	r2, r3
 8004932:	2300      	movs	r3, #0
 8004934:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	015a      	lsls	r2, r3, #5
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	4413      	add	r3, r2
 800493e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004942:	461a      	mov	r2, r3
 8004944:	2300      	movs	r3, #0
 8004946:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4413      	add	r3, r2
 8004950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004954:	461a      	mov	r2, r3
 8004956:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800495a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	3301      	adds	r3, #1
 8004960:	613b      	str	r3, [r7, #16]
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	429a      	cmp	r2, r3
 8004968:	d3b7      	bcc.n	80048da <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800496a:	2300      	movs	r3, #0
 800496c:	613b      	str	r3, [r7, #16]
 800496e:	e043      	b.n	80049f8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	015a      	lsls	r2, r3, #5
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4413      	add	r3, r2
 8004978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004982:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004986:	d118      	bne.n	80049ba <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10a      	bne.n	80049a4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	015a      	lsls	r2, r3, #5
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	4413      	add	r3, r2
 8004996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800499a:	461a      	mov	r2, r3
 800499c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049a0:	6013      	str	r3, [r2, #0]
 80049a2:	e013      	b.n	80049cc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	015a      	lsls	r2, r3, #5
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	4413      	add	r3, r2
 80049ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b0:	461a      	mov	r2, r3
 80049b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049b6:	6013      	str	r3, [r2, #0]
 80049b8:	e008      	b.n	80049cc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	015a      	lsls	r2, r3, #5
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	4413      	add	r3, r2
 80049c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c6:	461a      	mov	r2, r3
 80049c8:	2300      	movs	r3, #0
 80049ca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	015a      	lsls	r2, r3, #5
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	4413      	add	r3, r2
 80049d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d8:	461a      	mov	r2, r3
 80049da:	2300      	movs	r3, #0
 80049dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ea:	461a      	mov	r2, r3
 80049ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	3301      	adds	r3, #1
 80049f6:	613b      	str	r3, [r7, #16]
 80049f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d3b7      	bcc.n	8004970 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a12:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004a20:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d105      	bne.n	8004a34 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	f043 0210 	orr.w	r2, r3, #16
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	699a      	ldr	r2, [r3, #24]
 8004a38:	4b0f      	ldr	r3, [pc, #60]	; (8004a78 <USB_DevInit+0x2c4>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d005      	beq.n	8004a52 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	f043 0208 	orr.w	r2, r3, #8
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d107      	bne.n	8004a68 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a60:	f043 0304 	orr.w	r3, r3, #4
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3718      	adds	r7, #24
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a74:	b004      	add	sp, #16
 8004a76:	4770      	bx	lr
 8004a78:	803c3800 	.word	0x803c3800

08004a7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004a86:	2300      	movs	r3, #0
 8004a88:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4a13      	ldr	r2, [pc, #76]	; (8004ae0 <USB_FlushTxFifo+0x64>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d901      	bls.n	8004a9c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e01b      	b.n	8004ad4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	daf2      	bge.n	8004a8a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	019b      	lsls	r3, r3, #6
 8004aac:	f043 0220 	orr.w	r2, r3, #32
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	4a08      	ldr	r2, [pc, #32]	; (8004ae0 <USB_FlushTxFifo+0x64>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d901      	bls.n	8004ac6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e006      	b.n	8004ad4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	f003 0320 	and.w	r3, r3, #32
 8004ace:	2b20      	cmp	r3, #32
 8004ad0:	d0f0      	beq.n	8004ab4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3714      	adds	r7, #20
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr
 8004ae0:	00030d40 	.word	0x00030d40

08004ae4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004aec:	2300      	movs	r3, #0
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	3301      	adds	r3, #1
 8004af4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	4a11      	ldr	r2, [pc, #68]	; (8004b40 <USB_FlushRxFifo+0x5c>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d901      	bls.n	8004b02 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e018      	b.n	8004b34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	daf2      	bge.n	8004af0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2210      	movs	r2, #16
 8004b12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	3301      	adds	r3, #1
 8004b18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	4a08      	ldr	r2, [pc, #32]	; (8004b40 <USB_FlushRxFifo+0x5c>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d901      	bls.n	8004b26 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e006      	b.n	8004b34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	f003 0310 	and.w	r3, r3, #16
 8004b2e:	2b10      	cmp	r3, #16
 8004b30:	d0f0      	beq.n	8004b14 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr
 8004b40:	00030d40 	.word	0x00030d40

08004b44 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	78fb      	ldrb	r3, [r7, #3]
 8004b5e:	68f9      	ldr	r1, [r7, #12]
 8004b60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b64:	4313      	orrs	r3, r2
 8004b66:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3714      	adds	r7, #20
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b085      	sub	sp, #20
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b90:	f023 0303 	bic.w	r3, r3, #3
 8004b94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ba4:	f043 0302 	orr.w	r3, r3, #2
 8004ba8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	f003 0301 	and.w	r3, r3, #1
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	3301      	adds	r3, #1
 8004be4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	4a13      	ldr	r2, [pc, #76]	; (8004c38 <USB_CoreReset+0x64>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d901      	bls.n	8004bf2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e01b      	b.n	8004c2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	daf2      	bge.n	8004be0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	f043 0201 	orr.w	r2, r3, #1
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4a09      	ldr	r2, [pc, #36]	; (8004c38 <USB_CoreReset+0x64>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d901      	bls.n	8004c1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e006      	b.n	8004c2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d0f0      	beq.n	8004c0a <USB_CoreReset+0x36>

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	00030d40 	.word	0x00030d40

08004c3c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004c42:	2100      	movs	r1, #0
 8004c44:	2000      	movs	r0, #0
 8004c46:	f004 fc91 	bl	800956c <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8004c4a:	4b23      	ldr	r3, [pc, #140]	; (8004cd8 <MX_LWIP_Init+0x9c>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8004c50:	4b22      	ldr	r3, [pc, #136]	; (8004cdc <MX_LWIP_Init+0xa0>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8004c56:	4b22      	ldr	r3, [pc, #136]	; (8004ce0 <MX_LWIP_Init+0xa4>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004c5c:	4b21      	ldr	r3, [pc, #132]	; (8004ce4 <MX_LWIP_Init+0xa8>)
 8004c5e:	9302      	str	r3, [sp, #8]
 8004c60:	4b21      	ldr	r3, [pc, #132]	; (8004ce8 <MX_LWIP_Init+0xac>)
 8004c62:	9301      	str	r3, [sp, #4]
 8004c64:	2300      	movs	r3, #0
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	4b1d      	ldr	r3, [pc, #116]	; (8004ce0 <MX_LWIP_Init+0xa4>)
 8004c6a:	4a1c      	ldr	r2, [pc, #112]	; (8004cdc <MX_LWIP_Init+0xa0>)
 8004c6c:	491a      	ldr	r1, [pc, #104]	; (8004cd8 <MX_LWIP_Init+0x9c>)
 8004c6e:	481f      	ldr	r0, [pc, #124]	; (8004cec <MX_LWIP_Init+0xb0>)
 8004c70:	f005 fd34 	bl	800a6dc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004c74:	481d      	ldr	r0, [pc, #116]	; (8004cec <MX_LWIP_Init+0xb0>)
 8004c76:	f005 ffcd 	bl	800ac14 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004c7a:	4b1c      	ldr	r3, [pc, #112]	; (8004cec <MX_LWIP_Init+0xb0>)
 8004c7c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004c80:	089b      	lsrs	r3, r3, #2
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d003      	beq.n	8004c94 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004c8c:	4817      	ldr	r0, [pc, #92]	; (8004cec <MX_LWIP_Init+0xb0>)
 8004c8e:	f005 ffe5 	bl	800ac5c <netif_set_up>
 8004c92:	e002      	b.n	8004c9a <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004c94:	4815      	ldr	r0, [pc, #84]	; (8004cec <MX_LWIP_Init+0xb0>)
 8004c96:	f006 f84d 	bl	800ad34 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004c9a:	4915      	ldr	r1, [pc, #84]	; (8004cf0 <MX_LWIP_Init+0xb4>)
 8004c9c:	4813      	ldr	r0, [pc, #76]	; (8004cec <MX_LWIP_Init+0xb0>)
 8004c9e:	f006 f8e3 	bl	800ae68 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004ca2:	2224      	movs	r2, #36	; 0x24
 8004ca4:	2100      	movs	r1, #0
 8004ca6:	4813      	ldr	r0, [pc, #76]	; (8004cf4 <MX_LWIP_Init+0xb8>)
 8004ca8:	f012 fa56 	bl	8017158 <memset>
  attributes.name = "EthLink";
 8004cac:	4b11      	ldr	r3, [pc, #68]	; (8004cf4 <MX_LWIP_Init+0xb8>)
 8004cae:	4a12      	ldr	r2, [pc, #72]	; (8004cf8 <MX_LWIP_Init+0xbc>)
 8004cb0:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004cb2:	4b10      	ldr	r3, [pc, #64]	; (8004cf4 <MX_LWIP_Init+0xb8>)
 8004cb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cb8:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8004cba:	4b0e      	ldr	r3, [pc, #56]	; (8004cf4 <MX_LWIP_Init+0xb8>)
 8004cbc:	2210      	movs	r2, #16
 8004cbe:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8004cc0:	4a0c      	ldr	r2, [pc, #48]	; (8004cf4 <MX_LWIP_Init+0xb8>)
 8004cc2:	490a      	ldr	r1, [pc, #40]	; (8004cec <MX_LWIP_Init+0xb0>)
 8004cc4:	480d      	ldr	r0, [pc, #52]	; (8004cfc <MX_LWIP_Init+0xc0>)
 8004cc6:	f000 fd7c 	bl	80057c2 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8004cca:	4808      	ldr	r0, [pc, #32]	; (8004cec <MX_LWIP_Init+0xb0>)
 8004ccc:	f00d fcfe 	bl	80126cc <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004cd0:	bf00      	nop
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	200006dc 	.word	0x200006dc
 8004cdc:	200006e0 	.word	0x200006e0
 8004ce0:	200006e4 	.word	0x200006e4
 8004ce4:	080094a9 	.word	0x080094a9
 8004ce8:	080051a5 	.word	0x080051a5
 8004cec:	200006a4 	.word	0x200006a4
 8004cf0:	08004d01 	.word	0x08004d01
 8004cf4:	200006e8 	.word	0x200006e8
 8004cf8:	080183e0 	.word	0x080183e0
 8004cfc:	08005489 	.word	0x08005489

08004d00 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8004d1c:	4b04      	ldr	r3, [pc, #16]	; (8004d30 <HAL_ETH_RxCpltCallback+0x1c>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f000 ffe5 	bl	8005cf0 <osSemaphoreRelease>
}
 8004d26:	bf00      	nop
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	200051d8 	.word	0x200051d8

08004d34 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8004d3c:	4b04      	ldr	r3, [pc, #16]	; (8004d50 <HAL_ETH_TxCpltCallback+0x1c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4618      	mov	r0, r3
 8004d42:	f000 ffd5 	bl	8005cf0 <osSemaphoreRelease>
}
 8004d46:	bf00      	nop
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	200051dc 	.word	0x200051dc

08004d54 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f7fd f9f5 	bl	800214c <HAL_ETH_GetDMAError>
 8004d62:	4603      	mov	r3, r0
 8004d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d68:	2b80      	cmp	r3, #128	; 0x80
 8004d6a:	d104      	bne.n	8004d76 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8004d6c:	4b04      	ldr	r3, [pc, #16]	; (8004d80 <HAL_ETH_ErrorCallback+0x2c>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f000 ffbd 	bl	8005cf0 <osSemaphoreRelease>
  }
}
 8004d76:	bf00      	nop
 8004d78:	3708      	adds	r7, #8
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	200051d8 	.word	0x200051d8

08004d84 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b0aa      	sub	sp, #168	; 0xa8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8004d92:	2300      	movs	r3, #0
 8004d94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8004d9e:	f107 0310 	add.w	r3, r7, #16
 8004da2:	2264      	movs	r2, #100	; 0x64
 8004da4:	2100      	movs	r1, #0
 8004da6:	4618      	mov	r0, r3
 8004da8:	f012 f9d6 	bl	8017158 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004dac:	4b85      	ldr	r3, [pc, #532]	; (8004fc4 <low_level_init+0x240>)
 8004dae:	4a86      	ldr	r2, [pc, #536]	; (8004fc8 <low_level_init+0x244>)
 8004db0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004db2:	2300      	movs	r3, #0
 8004db4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004db6:	2380      	movs	r3, #128	; 0x80
 8004db8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004dba:	23e1      	movs	r3, #225	; 0xe1
 8004dbc:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0xAA;
 8004dc2:	23aa      	movs	r3, #170	; 0xaa
 8004dc4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x02;
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004dca:	4a7e      	ldr	r2, [pc, #504]	; (8004fc4 <low_level_init+0x240>)
 8004dcc:	f107 0308 	add.w	r3, r7, #8
 8004dd0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004dd2:	4b7c      	ldr	r3, [pc, #496]	; (8004fc4 <low_level_init+0x240>)
 8004dd4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004dd8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004dda:	4b7a      	ldr	r3, [pc, #488]	; (8004fc4 <low_level_init+0x240>)
 8004ddc:	4a7b      	ldr	r2, [pc, #492]	; (8004fcc <low_level_init+0x248>)
 8004dde:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004de0:	4b78      	ldr	r3, [pc, #480]	; (8004fc4 <low_level_init+0x240>)
 8004de2:	4a7b      	ldr	r2, [pc, #492]	; (8004fd0 <low_level_init+0x24c>)
 8004de4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004de6:	4b77      	ldr	r3, [pc, #476]	; (8004fc4 <low_level_init+0x240>)
 8004de8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004dec:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004dee:	4875      	ldr	r0, [pc, #468]	; (8004fc4 <low_level_init+0x240>)
 8004df0:	f7fc fb0e 	bl	8001410 <HAL_ETH_Init>
 8004df4:	4603      	mov	r3, r0
 8004df6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004dfa:	2238      	movs	r2, #56	; 0x38
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	4875      	ldr	r0, [pc, #468]	; (8004fd4 <low_level_init+0x250>)
 8004e00:	f012 f9aa 	bl	8017158 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004e04:	4b73      	ldr	r3, [pc, #460]	; (8004fd4 <low_level_init+0x250>)
 8004e06:	2221      	movs	r2, #33	; 0x21
 8004e08:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004e0a:	4b72      	ldr	r3, [pc, #456]	; (8004fd4 <low_level_init+0x250>)
 8004e0c:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8004e10:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004e12:	4b70      	ldr	r3, [pc, #448]	; (8004fd4 <low_level_init+0x250>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004e18:	486f      	ldr	r0, [pc, #444]	; (8004fd8 <low_level_init+0x254>)
 8004e1a:	f005 fb19 	bl	800a450 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2206      	movs	r2, #6
 8004e22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004e26:	4b67      	ldr	r3, [pc, #412]	; (8004fc4 <low_level_init+0x240>)
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	781a      	ldrb	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004e32:	4b64      	ldr	r3, [pc, #400]	; (8004fc4 <low_level_init+0x240>)
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	785a      	ldrb	r2, [r3, #1]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004e3e:	4b61      	ldr	r3, [pc, #388]	; (8004fc4 <low_level_init+0x240>)
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	789a      	ldrb	r2, [r3, #2]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004e4a:	4b5e      	ldr	r3, [pc, #376]	; (8004fc4 <low_level_init+0x240>)
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	78da      	ldrb	r2, [r3, #3]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004e56:	4b5b      	ldr	r3, [pc, #364]	; (8004fc4 <low_level_init+0x240>)
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	791a      	ldrb	r2, [r3, #4]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004e62:	4b58      	ldr	r3, [pc, #352]	; (8004fc4 <low_level_init+0x240>)
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	795a      	ldrb	r2, [r3, #5]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004e74:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004e7c:	f043 030a 	orr.w	r3, r3, #10
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8004e88:	2200      	movs	r2, #0
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	2001      	movs	r0, #1
 8004e8e:	f000 fe53 	bl	8005b38 <osSemaphoreNew>
 8004e92:	4603      	mov	r3, r0
 8004e94:	4a51      	ldr	r2, [pc, #324]	; (8004fdc <low_level_init+0x258>)
 8004e96:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8004e98:	2200      	movs	r2, #0
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	2001      	movs	r0, #1
 8004e9e:	f000 fe4b 	bl	8005b38 <osSemaphoreNew>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	4a4e      	ldr	r2, [pc, #312]	; (8004fe0 <low_level_init+0x25c>)
 8004ea6:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004ea8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004eac:	2224      	movs	r2, #36	; 0x24
 8004eae:	2100      	movs	r1, #0
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f012 f951 	bl	8017158 <memset>
  attributes.name = "EthIf";
 8004eb6:	4b4b      	ldr	r3, [pc, #300]	; (8004fe4 <low_level_init+0x260>)
 8004eb8:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004eba:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8004ebe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 8004ec2:	2330      	movs	r3, #48	; 0x30
 8004ec4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8004ec8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004ecc:	461a      	mov	r2, r3
 8004ece:	6879      	ldr	r1, [r7, #4]
 8004ed0:	4845      	ldr	r0, [pc, #276]	; (8004fe8 <low_level_init+0x264>)
 8004ed2:	f000 fc76 	bl	80057c2 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004ed6:	4945      	ldr	r1, [pc, #276]	; (8004fec <low_level_init+0x268>)
 8004ed8:	4845      	ldr	r0, [pc, #276]	; (8004ff0 <low_level_init+0x26c>)
 8004eda:	f7fb ff90 	bl	8000dfe <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8004ede:	4844      	ldr	r0, [pc, #272]	; (8004ff0 <low_level_init+0x26c>)
 8004ee0:	f7fb ffbf 	bl	8000e62 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8004ee4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d164      	bne.n	8004fb6 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004eec:	4840      	ldr	r0, [pc, #256]	; (8004ff0 <low_level_init+0x26c>)
 8004eee:	f7fc f860 	bl	8000fb2 <LAN8742_GetLinkState>
 8004ef2:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8004ef6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	dc06      	bgt.n	8004f0c <low_level_init+0x188>
    {
      netif_set_link_down(netif);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f005 ff82 	bl	800ae08 <netif_set_link_down>
      netif_set_down(netif);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f005 ff15 	bl	800ad34 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004f0a:	e056      	b.n	8004fba <low_level_init+0x236>
      switch (PHYLinkState)
 8004f0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f10:	3b02      	subs	r3, #2
 8004f12:	2b03      	cmp	r3, #3
 8004f14:	d82a      	bhi.n	8004f6c <low_level_init+0x1e8>
 8004f16:	a201      	add	r2, pc, #4	; (adr r2, 8004f1c <low_level_init+0x198>)
 8004f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f1c:	08004f2d 	.word	0x08004f2d
 8004f20:	08004f3f 	.word	0x08004f3f
 8004f24:	08004f4f 	.word	0x08004f4f
 8004f28:	08004f5f 	.word	0x08004f5f
        duplex = ETH_FULLDUPLEX_MODE;
 8004f2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004f30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8004f34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f38:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8004f3c:	e01f      	b.n	8004f7e <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8004f44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8004f4c:	e017      	b.n	8004f7e <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8004f4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004f52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8004f56:	2300      	movs	r3, #0
 8004f58:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8004f5c:	e00f      	b.n	8004f7e <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8004f64:	2300      	movs	r3, #0
 8004f66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8004f6a:	e008      	b.n	8004f7e <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8004f6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004f70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8004f74:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8004f7c:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004f7e:	f107 0310 	add.w	r3, r7, #16
 8004f82:	4619      	mov	r1, r3
 8004f84:	480f      	ldr	r0, [pc, #60]	; (8004fc4 <low_level_init+0x240>)
 8004f86:	f7fc ff87 	bl	8001e98 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8004f8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004f8e:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 8004f90:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004f96:	f107 0310 	add.w	r3, r7, #16
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	4809      	ldr	r0, [pc, #36]	; (8004fc4 <low_level_init+0x240>)
 8004f9e:	f7fd f865 	bl	800206c <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8004fa2:	4808      	ldr	r0, [pc, #32]	; (8004fc4 <low_level_init+0x240>)
 8004fa4:	f7fc fb11 	bl	80015ca <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f005 fe57 	bl	800ac5c <netif_set_up>
    netif_set_link_up(netif);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f005 fef2 	bl	800ad98 <netif_set_link_up>
}
 8004fb4:	e001      	b.n	8004fba <low_level_init+0x236>
    Error_Handler();
 8004fb6:	f7fb fcd3 	bl	8000960 <Error_Handler>
}
 8004fba:	bf00      	nop
 8004fbc:	37a8      	adds	r7, #168	; 0xa8
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	200051e0 	.word	0x200051e0
 8004fc8:	40028000 	.word	0x40028000
 8004fcc:	20005138 	.word	0x20005138
 8004fd0:	20005098 	.word	0x20005098
 8004fd4:	20005290 	.word	0x20005290
 8004fd8:	0801d490 	.word	0x0801d490
 8004fdc:	200051d8 	.word	0x200051d8
 8004fe0:	200051dc 	.word	0x200051dc
 8004fe4:	08018400 	.word	0x08018400
 8004fe8:	08005151 	.word	0x08005151
 8004fec:	2000000c 	.word	0x2000000c
 8004ff0:	200052c8 	.word	0x200052c8

08004ff4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b092      	sub	sp, #72	; 0x48
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004ffe:	2300      	movs	r3, #0
 8005000:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8005002:	2300      	movs	r3, #0
 8005004:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8005006:	2300      	movs	r3, #0
 8005008:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800500c:	f107 030c 	add.w	r3, r7, #12
 8005010:	2230      	movs	r2, #48	; 0x30
 8005012:	2100      	movs	r1, #0
 8005014:	4618      	mov	r0, r3
 8005016:	f012 f89f 	bl	8017158 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800501a:	f107 030c 	add.w	r3, r7, #12
 800501e:	2230      	movs	r2, #48	; 0x30
 8005020:	2100      	movs	r1, #0
 8005022:	4618      	mov	r0, r3
 8005024:	f012 f898 	bl	8017158 <memset>

  for(q = p; q != NULL; q = q->next)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	643b      	str	r3, [r7, #64]	; 0x40
 800502c:	e045      	b.n	80050ba <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800502e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005030:	2b03      	cmp	r3, #3
 8005032:	d902      	bls.n	800503a <low_level_output+0x46>
      return ERR_IF;
 8005034:	f06f 030b 	mvn.w	r3, #11
 8005038:	e065      	b.n	8005106 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 800503a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800503c:	6859      	ldr	r1, [r3, #4]
 800503e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005040:	4613      	mov	r3, r2
 8005042:	005b      	lsls	r3, r3, #1
 8005044:	4413      	add	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	3348      	adds	r3, #72	; 0x48
 800504a:	443b      	add	r3, r7
 800504c:	3b3c      	subs	r3, #60	; 0x3c
 800504e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005052:	895b      	ldrh	r3, [r3, #10]
 8005054:	4619      	mov	r1, r3
 8005056:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005058:	4613      	mov	r3, r2
 800505a:	005b      	lsls	r3, r3, #1
 800505c:	4413      	add	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	3348      	adds	r3, #72	; 0x48
 8005062:	443b      	add	r3, r7
 8005064:	3b38      	subs	r3, #56	; 0x38
 8005066:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005068:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800506a:	2b00      	cmp	r3, #0
 800506c:	d011      	beq.n	8005092 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800506e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005070:	1e5a      	subs	r2, r3, #1
 8005072:	f107 000c 	add.w	r0, r7, #12
 8005076:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005078:	460b      	mov	r3, r1
 800507a:	005b      	lsls	r3, r3, #1
 800507c:	440b      	add	r3, r1
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	18c1      	adds	r1, r0, r3
 8005082:	4613      	mov	r3, r2
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	4413      	add	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	3348      	adds	r3, #72	; 0x48
 800508c:	443b      	add	r3, r7
 800508e:	3b34      	subs	r3, #52	; 0x34
 8005090:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d109      	bne.n	80050ae <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800509a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800509c:	4613      	mov	r3, r2
 800509e:	005b      	lsls	r3, r3, #1
 80050a0:	4413      	add	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	3348      	adds	r3, #72	; 0x48
 80050a6:	443b      	add	r3, r7
 80050a8:	3b34      	subs	r3, #52	; 0x34
 80050aa:	2200      	movs	r2, #0
 80050ac:	601a      	str	r2, [r3, #0]
    }

    i++;
 80050ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050b0:	3301      	adds	r3, #1
 80050b2:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80050b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	643b      	str	r3, [r7, #64]	; 0x40
 80050ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1b6      	bne.n	800502e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	891b      	ldrh	r3, [r3, #8]
 80050c4:	461a      	mov	r2, r3
 80050c6:	4b12      	ldr	r3, [pc, #72]	; (8005110 <low_level_output+0x11c>)
 80050c8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80050ca:	4a11      	ldr	r2, [pc, #68]	; (8005110 <low_level_output+0x11c>)
 80050cc:	f107 030c 	add.w	r3, r7, #12
 80050d0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80050d2:	4a0f      	ldr	r2, [pc, #60]	; (8005110 <low_level_output+0x11c>)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 80050d8:	6838      	ldr	r0, [r7, #0]
 80050da:	f006 fb19 	bl	800b710 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 80050de:	490c      	ldr	r1, [pc, #48]	; (8005110 <low_level_output+0x11c>)
 80050e0:	480c      	ldr	r0, [pc, #48]	; (8005114 <low_level_output+0x120>)
 80050e2:	f7fc fb7f 	bl	80017e4 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 80050e6:	bf00      	nop
 80050e8:	4b0b      	ldr	r3, [pc, #44]	; (8005118 <low_level_output+0x124>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f04f 31ff 	mov.w	r1, #4294967295
 80050f0:	4618      	mov	r0, r3
 80050f2:	f000 fdab 	bl	8005c4c <osSemaphoreAcquire>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1f5      	bne.n	80050e8 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 80050fc:	4805      	ldr	r0, [pc, #20]	; (8005114 <low_level_output+0x120>)
 80050fe:	f7fc fd05 	bl	8001b0c <HAL_ETH_ReleaseTxPacket>

  return errval;
 8005102:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005106:	4618      	mov	r0, r3
 8005108:	3748      	adds	r7, #72	; 0x48
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	20005290 	.word	0x20005290
 8005114:	200051e0 	.word	0x200051e0
 8005118:	200051dc 	.word	0x200051dc

0800511c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005124:	2300      	movs	r3, #0
 8005126:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005128:	4b07      	ldr	r3, [pc, #28]	; (8005148 <low_level_input+0x2c>)
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d105      	bne.n	800513c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005130:	f107 030c 	add.w	r3, r7, #12
 8005134:	4619      	mov	r1, r3
 8005136:	4805      	ldr	r0, [pc, #20]	; (800514c <low_level_input+0x30>)
 8005138:	f7fc fbb0 	bl	800189c <HAL_ETH_ReadData>
  }

  return p;
 800513c:	68fb      	ldr	r3, [r7, #12]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	20005094 	.word	0x20005094
 800514c:	200051e0 	.word	0x200051e0

08005150 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005158:	2300      	movs	r3, #0
 800515a:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005160:	4b0f      	ldr	r3, [pc, #60]	; (80051a0 <ethernetif_input+0x50>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f04f 31ff 	mov.w	r1, #4294967295
 8005168:	4618      	mov	r0, r3
 800516a:	f000 fd6f 	bl	8005c4c <osSemaphoreAcquire>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1f5      	bne.n	8005160 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8005174:	68b8      	ldr	r0, [r7, #8]
 8005176:	f7ff ffd1 	bl	800511c <low_level_input>
 800517a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00a      	beq.n	8005198 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	68b9      	ldr	r1, [r7, #8]
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	4798      	blx	r3
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d002      	beq.n	8005198 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f006 fa16 	bl	800b5c4 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1ea      	bne.n	8005174 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800519e:	e7df      	b.n	8005160 <ethernetif_input+0x10>
 80051a0:	200051d8 	.word	0x200051d8

080051a4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d106      	bne.n	80051c0 <ethernetif_init+0x1c>
 80051b2:	4b0e      	ldr	r3, [pc, #56]	; (80051ec <ethernetif_init+0x48>)
 80051b4:	f240 12e5 	movw	r2, #485	; 0x1e5
 80051b8:	490d      	ldr	r1, [pc, #52]	; (80051f0 <ethernetif_init+0x4c>)
 80051ba:	480e      	ldr	r0, [pc, #56]	; (80051f4 <ethernetif_init+0x50>)
 80051bc:	f011 ffd4 	bl	8017168 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2273      	movs	r2, #115	; 0x73
 80051c4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2274      	movs	r2, #116	; 0x74
 80051cc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a09      	ldr	r2, [pc, #36]	; (80051f8 <ethernetif_init+0x54>)
 80051d4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a08      	ldr	r2, [pc, #32]	; (80051fc <ethernetif_init+0x58>)
 80051da:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f7ff fdd1 	bl	8004d84 <low_level_init>

  return ERR_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3708      	adds	r7, #8
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	08018408 	.word	0x08018408
 80051f0:	08018424 	.word	0x08018424
 80051f4:	08018434 	.word	0x08018434
 80051f8:	08014bc5 	.word	0x08014bc5
 80051fc:	08004ff5 	.word	0x08004ff5

08005200 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800520c:	68f9      	ldr	r1, [r7, #12]
 800520e:	4809      	ldr	r0, [pc, #36]	; (8005234 <pbuf_free_custom+0x34>)
 8005210:	f005 fa0e 	bl	800a630 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005214:	4b08      	ldr	r3, [pc, #32]	; (8005238 <pbuf_free_custom+0x38>)
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d107      	bne.n	800522c <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800521c:	4b06      	ldr	r3, [pc, #24]	; (8005238 <pbuf_free_custom+0x38>)
 800521e:	2200      	movs	r2, #0
 8005220:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8005222:	4b06      	ldr	r3, [pc, #24]	; (800523c <pbuf_free_custom+0x3c>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4618      	mov	r0, r3
 8005228:	f000 fd62 	bl	8005cf0 <osSemaphoreRelease>
  }
}
 800522c:	bf00      	nop
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	0801d490 	.word	0x0801d490
 8005238:	20005094 	.word	0x20005094
 800523c:	200051d8 	.word	0x200051d8

08005240 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005244:	f7fb ffa2 	bl	800118c <HAL_GetTick>
 8005248:	4603      	mov	r3, r0
}
 800524a:	4618      	mov	r0, r3
 800524c:	bd80      	pop	{r7, pc}
	...

08005250 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b08e      	sub	sp, #56	; 0x38
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005258:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800525c:	2200      	movs	r2, #0
 800525e:	601a      	str	r2, [r3, #0]
 8005260:	605a      	str	r2, [r3, #4]
 8005262:	609a      	str	r2, [r3, #8]
 8005264:	60da      	str	r2, [r3, #12]
 8005266:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a59      	ldr	r2, [pc, #356]	; (80053d4 <HAL_ETH_MspInit+0x184>)
 800526e:	4293      	cmp	r3, r2
 8005270:	f040 80ac 	bne.w	80053cc <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005274:	2300      	movs	r3, #0
 8005276:	623b      	str	r3, [r7, #32]
 8005278:	4b57      	ldr	r3, [pc, #348]	; (80053d8 <HAL_ETH_MspInit+0x188>)
 800527a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527c:	4a56      	ldr	r2, [pc, #344]	; (80053d8 <HAL_ETH_MspInit+0x188>)
 800527e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005282:	6313      	str	r3, [r2, #48]	; 0x30
 8005284:	4b54      	ldr	r3, [pc, #336]	; (80053d8 <HAL_ETH_MspInit+0x188>)
 8005286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800528c:	623b      	str	r3, [r7, #32]
 800528e:	6a3b      	ldr	r3, [r7, #32]
 8005290:	2300      	movs	r3, #0
 8005292:	61fb      	str	r3, [r7, #28]
 8005294:	4b50      	ldr	r3, [pc, #320]	; (80053d8 <HAL_ETH_MspInit+0x188>)
 8005296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005298:	4a4f      	ldr	r2, [pc, #316]	; (80053d8 <HAL_ETH_MspInit+0x188>)
 800529a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800529e:	6313      	str	r3, [r2, #48]	; 0x30
 80052a0:	4b4d      	ldr	r3, [pc, #308]	; (80053d8 <HAL_ETH_MspInit+0x188>)
 80052a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052a8:	61fb      	str	r3, [r7, #28]
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	2300      	movs	r3, #0
 80052ae:	61bb      	str	r3, [r7, #24]
 80052b0:	4b49      	ldr	r3, [pc, #292]	; (80053d8 <HAL_ETH_MspInit+0x188>)
 80052b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b4:	4a48      	ldr	r2, [pc, #288]	; (80053d8 <HAL_ETH_MspInit+0x188>)
 80052b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052ba:	6313      	str	r3, [r2, #48]	; 0x30
 80052bc:	4b46      	ldr	r3, [pc, #280]	; (80053d8 <HAL_ETH_MspInit+0x188>)
 80052be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052c4:	61bb      	str	r3, [r7, #24]
 80052c6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80052c8:	2300      	movs	r3, #0
 80052ca:	617b      	str	r3, [r7, #20]
 80052cc:	4b42      	ldr	r3, [pc, #264]	; (80053d8 <HAL_ETH_MspInit+0x188>)
 80052ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d0:	4a41      	ldr	r2, [pc, #260]	; (80053d8 <HAL_ETH_MspInit+0x188>)
 80052d2:	f043 0304 	orr.w	r3, r3, #4
 80052d6:	6313      	str	r3, [r2, #48]	; 0x30
 80052d8:	4b3f      	ldr	r3, [pc, #252]	; (80053d8 <HAL_ETH_MspInit+0x188>)
 80052da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052dc:	f003 0304 	and.w	r3, r3, #4
 80052e0:	617b      	str	r3, [r7, #20]
 80052e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052e4:	2300      	movs	r3, #0
 80052e6:	613b      	str	r3, [r7, #16]
 80052e8:	4b3b      	ldr	r3, [pc, #236]	; (80053d8 <HAL_ETH_MspInit+0x188>)
 80052ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ec:	4a3a      	ldr	r2, [pc, #232]	; (80053d8 <HAL_ETH_MspInit+0x188>)
 80052ee:	f043 0301 	orr.w	r3, r3, #1
 80052f2:	6313      	str	r3, [r2, #48]	; 0x30
 80052f4:	4b38      	ldr	r3, [pc, #224]	; (80053d8 <HAL_ETH_MspInit+0x188>)
 80052f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f8:	f003 0301 	and.w	r3, r3, #1
 80052fc:	613b      	str	r3, [r7, #16]
 80052fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005300:	2300      	movs	r3, #0
 8005302:	60fb      	str	r3, [r7, #12]
 8005304:	4b34      	ldr	r3, [pc, #208]	; (80053d8 <HAL_ETH_MspInit+0x188>)
 8005306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005308:	4a33      	ldr	r2, [pc, #204]	; (80053d8 <HAL_ETH_MspInit+0x188>)
 800530a:	f043 0302 	orr.w	r3, r3, #2
 800530e:	6313      	str	r3, [r2, #48]	; 0x30
 8005310:	4b31      	ldr	r3, [pc, #196]	; (80053d8 <HAL_ETH_MspInit+0x188>)
 8005312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	60fb      	str	r3, [r7, #12]
 800531a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800531c:	2300      	movs	r3, #0
 800531e:	60bb      	str	r3, [r7, #8]
 8005320:	4b2d      	ldr	r3, [pc, #180]	; (80053d8 <HAL_ETH_MspInit+0x188>)
 8005322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005324:	4a2c      	ldr	r2, [pc, #176]	; (80053d8 <HAL_ETH_MspInit+0x188>)
 8005326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800532a:	6313      	str	r3, [r2, #48]	; 0x30
 800532c:	4b2a      	ldr	r3, [pc, #168]	; (80053d8 <HAL_ETH_MspInit+0x188>)
 800532e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005334:	60bb      	str	r3, [r7, #8]
 8005336:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005338:	2332      	movs	r3, #50	; 0x32
 800533a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800533c:	2302      	movs	r3, #2
 800533e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005340:	2300      	movs	r3, #0
 8005342:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005344:	2303      	movs	r3, #3
 8005346:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005348:	230b      	movs	r3, #11
 800534a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800534c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005350:	4619      	mov	r1, r3
 8005352:	4822      	ldr	r0, [pc, #136]	; (80053dc <HAL_ETH_MspInit+0x18c>)
 8005354:	f7fd fb0c 	bl	8002970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005358:	2386      	movs	r3, #134	; 0x86
 800535a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800535c:	2302      	movs	r3, #2
 800535e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005360:	2300      	movs	r3, #0
 8005362:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005364:	2303      	movs	r3, #3
 8005366:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005368:	230b      	movs	r3, #11
 800536a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800536c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005370:	4619      	mov	r1, r3
 8005372:	481b      	ldr	r0, [pc, #108]	; (80053e0 <HAL_ETH_MspInit+0x190>)
 8005374:	f7fd fafc 	bl	8002970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005378:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800537c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800537e:	2302      	movs	r3, #2
 8005380:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005382:	2300      	movs	r3, #0
 8005384:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005386:	2303      	movs	r3, #3
 8005388:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800538a:	230b      	movs	r3, #11
 800538c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800538e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005392:	4619      	mov	r1, r3
 8005394:	4813      	ldr	r0, [pc, #76]	; (80053e4 <HAL_ETH_MspInit+0x194>)
 8005396:	f7fd faeb 	bl	8002970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800539a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800539e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053a0:	2302      	movs	r3, #2
 80053a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053a4:	2300      	movs	r3, #0
 80053a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053a8:	2303      	movs	r3, #3
 80053aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80053ac:	230b      	movs	r3, #11
 80053ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80053b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053b4:	4619      	mov	r1, r3
 80053b6:	480c      	ldr	r0, [pc, #48]	; (80053e8 <HAL_ETH_MspInit+0x198>)
 80053b8:	f7fd fada 	bl	8002970 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80053bc:	2200      	movs	r2, #0
 80053be:	2105      	movs	r1, #5
 80053c0:	203d      	movs	r0, #61	; 0x3d
 80053c2:	f7fb ffee 	bl	80013a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80053c6:	203d      	movs	r0, #61	; 0x3d
 80053c8:	f7fc f807 	bl	80013da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80053cc:	bf00      	nop
 80053ce:	3738      	adds	r7, #56	; 0x38
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	40028000 	.word	0x40028000
 80053d8:	40023800 	.word	0x40023800
 80053dc:	40020800 	.word	0x40020800
 80053e0:	40020000 	.word	0x40020000
 80053e4:	40020400 	.word	0x40020400
 80053e8:	40021800 	.word	0x40021800

080053ec <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80053f0:	4802      	ldr	r0, [pc, #8]	; (80053fc <ETH_PHY_IO_Init+0x10>)
 80053f2:	f7fc fe55 	bl	80020a0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	200051e0 	.word	0x200051e0

08005400 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005400:	b480      	push	{r7}
 8005402:	af00      	add	r7, sp, #0
  return 0;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	68f9      	ldr	r1, [r7, #12]
 8005422:	4807      	ldr	r0, [pc, #28]	; (8005440 <ETH_PHY_IO_ReadReg+0x30>)
 8005424:	f7fc fca4 	bl	8001d70 <HAL_ETH_ReadPHYRegister>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800542e:	f04f 33ff 	mov.w	r3, #4294967295
 8005432:	e000      	b.n	8005436 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	200051e0 	.word	0x200051e0

08005444 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	68f9      	ldr	r1, [r7, #12]
 8005456:	4807      	ldr	r0, [pc, #28]	; (8005474 <ETH_PHY_IO_WriteReg+0x30>)
 8005458:	f7fc fcd5 	bl	8001e06 <HAL_ETH_WritePHYRegister>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d002      	beq.n	8005468 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8005462:	f04f 33ff 	mov.w	r3, #4294967295
 8005466:	e000      	b.n	800546a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	200051e0 	.word	0x200051e0

08005478 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800547c:	f7fb fe86 	bl	800118c <HAL_GetTick>
 8005480:	4603      	mov	r3, r0
}
 8005482:	4618      	mov	r0, r3
 8005484:	bd80      	pop	{r7, pc}
	...

08005488 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b0a0      	sub	sp, #128	; 0x80
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005490:	f107 0308 	add.w	r3, r7, #8
 8005494:	2264      	movs	r2, #100	; 0x64
 8005496:	2100      	movs	r1, #0
 8005498:	4618      	mov	r0, r3
 800549a:	f011 fe5d 	bl	8017158 <memset>
  int32_t PHYLinkState = 0;
 800549e:	2300      	movs	r3, #0
 80054a0:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80054a2:	2300      	movs	r3, #0
 80054a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80054a6:	2300      	movs	r3, #0
 80054a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80054aa:	2300      	movs	r3, #0
 80054ac:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80054b2:	483a      	ldr	r0, [pc, #232]	; (800559c <ethernet_link_thread+0x114>)
 80054b4:	f7fb fd7d 	bl	8000fb2 <LAN8742_GetLinkState>
 80054b8:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80054ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054bc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80054c0:	089b      	lsrs	r3, r3, #2
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00c      	beq.n	80054e6 <ethernet_link_thread+0x5e>
 80054cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	dc09      	bgt.n	80054e6 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 80054d2:	4833      	ldr	r0, [pc, #204]	; (80055a0 <ethernet_link_thread+0x118>)
 80054d4:	f7fc f907 	bl	80016e6 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80054d8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80054da:	f005 fc2b 	bl	800ad34 <netif_set_down>
    netif_set_link_down(netif);
 80054de:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80054e0:	f005 fc92 	bl	800ae08 <netif_set_link_down>
 80054e4:	e055      	b.n	8005592 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80054e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054e8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80054ec:	f003 0304 	and.w	r3, r3, #4
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d14e      	bne.n	8005592 <ethernet_link_thread+0x10a>
 80054f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	dd4b      	ble.n	8005592 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 80054fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054fc:	3b02      	subs	r3, #2
 80054fe:	2b03      	cmp	r3, #3
 8005500:	d82a      	bhi.n	8005558 <ethernet_link_thread+0xd0>
 8005502:	a201      	add	r2, pc, #4	; (adr r2, 8005508 <ethernet_link_thread+0x80>)
 8005504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005508:	08005519 	.word	0x08005519
 800550c:	0800552b 	.word	0x0800552b
 8005510:	0800553b 	.word	0x0800553b
 8005514:	0800554b 	.word	0x0800554b
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005518:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800551c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800551e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005522:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005524:	2301      	movs	r3, #1
 8005526:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005528:	e017      	b.n	800555a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800552a:	2300      	movs	r3, #0
 800552c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800552e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005532:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005534:	2301      	movs	r3, #1
 8005536:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005538:	e00f      	b.n	800555a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800553a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800553e:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005540:	2300      	movs	r3, #0
 8005542:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005544:	2301      	movs	r3, #1
 8005546:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005548:	e007      	b.n	800555a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800554a:	2300      	movs	r3, #0
 800554c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800554e:	2300      	movs	r3, #0
 8005550:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005552:	2301      	movs	r3, #1
 8005554:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005556:	e000      	b.n	800555a <ethernet_link_thread+0xd2>
    default:
      break;
 8005558:	bf00      	nop
    }

    if(linkchanged)
 800555a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800555c:	2b00      	cmp	r3, #0
 800555e:	d018      	beq.n	8005592 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005560:	f107 0308 	add.w	r3, r7, #8
 8005564:	4619      	mov	r1, r3
 8005566:	480e      	ldr	r0, [pc, #56]	; (80055a0 <ethernet_link_thread+0x118>)
 8005568:	f7fc fc96 	bl	8001e98 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800556c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800556e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8005570:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005572:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005574:	f107 0308 	add.w	r3, r7, #8
 8005578:	4619      	mov	r1, r3
 800557a:	4809      	ldr	r0, [pc, #36]	; (80055a0 <ethernet_link_thread+0x118>)
 800557c:	f7fc fd76 	bl	800206c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8005580:	4807      	ldr	r0, [pc, #28]	; (80055a0 <ethernet_link_thread+0x118>)
 8005582:	f7fb ffc3 	bl	800150c <HAL_ETH_Start>
      netif_set_up(netif);
 8005586:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005588:	f005 fb68 	bl	800ac5c <netif_set_up>
      netif_set_link_up(netif);
 800558c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800558e:	f005 fc03 	bl	800ad98 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8005592:	2064      	movs	r0, #100	; 0x64
 8005594:	f000 f9a7 	bl	80058e6 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005598:	e78b      	b.n	80054b2 <ethernet_link_thread+0x2a>
 800559a:	bf00      	nop
 800559c:	200052c8 	.word	0x200052c8
 80055a0:	200051e0 	.word	0x200051e0

080055a4 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b086      	sub	sp, #24
 80055a8:	af02      	add	r7, sp, #8
 80055aa:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80055ac:	4812      	ldr	r0, [pc, #72]	; (80055f8 <HAL_ETH_RxAllocateCallback+0x54>)
 80055ae:	f004 ffcb 	bl	800a548 <memp_malloc_pool>
 80055b2:	60f8      	str	r0, [r7, #12]
  if (p)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d014      	beq.n	80055e4 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f103 0220 	add.w	r2, r3, #32
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4a0d      	ldr	r2, [pc, #52]	; (80055fc <HAL_ETH_RxAllocateCallback+0x58>)
 80055c8:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80055d2:	9201      	str	r2, [sp, #4]
 80055d4:	9300      	str	r3, [sp, #0]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2241      	movs	r2, #65	; 0x41
 80055da:	2100      	movs	r1, #0
 80055dc:	2000      	movs	r0, #0
 80055de:	f005 fe37 	bl	800b250 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80055e2:	e005      	b.n	80055f0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80055e4:	4b06      	ldr	r3, [pc, #24]	; (8005600 <HAL_ETH_RxAllocateCallback+0x5c>)
 80055e6:	2201      	movs	r2, #1
 80055e8:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	601a      	str	r2, [r3, #0]
}
 80055f0:	bf00      	nop
 80055f2:	3710      	adds	r7, #16
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	0801d490 	.word	0x0801d490
 80055fc:	08005201 	.word	0x08005201
 8005600:	20005094 	.word	0x20005094

08005604 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005604:	b480      	push	{r7}
 8005606:	b089      	sub	sp, #36	; 0x24
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
 8005610:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800561a:	2300      	movs	r3, #0
 800561c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	3b20      	subs	r3, #32
 8005622:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	2200      	movs	r2, #0
 8005628:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	2200      	movs	r2, #0
 800562e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	887a      	ldrh	r2, [r7, #2]
 8005634:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d103      	bne.n	8005646 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	69fa      	ldr	r2, [r7, #28]
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	e003      	b.n	800564e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	69fa      	ldr	r2, [r7, #28]
 800564c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	69fa      	ldr	r2, [r7, #28]
 8005652:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	61fb      	str	r3, [r7, #28]
 800565a:	e009      	b.n	8005670 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	891a      	ldrh	r2, [r3, #8]
 8005660:	887b      	ldrh	r3, [r7, #2]
 8005662:	4413      	add	r3, r2
 8005664:	b29a      	uxth	r2, r3
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	61fb      	str	r3, [r7, #28]
 8005670:	69fb      	ldr	r3, [r7, #28]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1f2      	bne.n	800565c <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005676:	bf00      	nop
 8005678:	bf00      	nop
 800567a:	3724      	adds	r7, #36	; 0x24
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f005 ff99 	bl	800b5c4 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8005692:	bf00      	nop
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
	...

0800569c <__NVIC_SetPriority>:
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	4603      	mov	r3, r0
 80056a4:	6039      	str	r1, [r7, #0]
 80056a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	db0a      	blt.n	80056c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	b2da      	uxtb	r2, r3
 80056b4:	490c      	ldr	r1, [pc, #48]	; (80056e8 <__NVIC_SetPriority+0x4c>)
 80056b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056ba:	0112      	lsls	r2, r2, #4
 80056bc:	b2d2      	uxtb	r2, r2
 80056be:	440b      	add	r3, r1
 80056c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80056c4:	e00a      	b.n	80056dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	b2da      	uxtb	r2, r3
 80056ca:	4908      	ldr	r1, [pc, #32]	; (80056ec <__NVIC_SetPriority+0x50>)
 80056cc:	79fb      	ldrb	r3, [r7, #7]
 80056ce:	f003 030f 	and.w	r3, r3, #15
 80056d2:	3b04      	subs	r3, #4
 80056d4:	0112      	lsls	r2, r2, #4
 80056d6:	b2d2      	uxtb	r2, r2
 80056d8:	440b      	add	r3, r1
 80056da:	761a      	strb	r2, [r3, #24]
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	e000e100 	.word	0xe000e100
 80056ec:	e000ed00 	.word	0xe000ed00

080056f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80056f0:	b580      	push	{r7, lr}
 80056f2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80056f4:	2100      	movs	r1, #0
 80056f6:	f06f 0004 	mvn.w	r0, #4
 80056fa:	f7ff ffcf 	bl	800569c <__NVIC_SetPriority>
#endif
}
 80056fe:	bf00      	nop
 8005700:	bd80      	pop	{r7, pc}
	...

08005704 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800570a:	f3ef 8305 	mrs	r3, IPSR
 800570e:	603b      	str	r3, [r7, #0]
  return(result);
 8005710:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005716:	f06f 0305 	mvn.w	r3, #5
 800571a:	607b      	str	r3, [r7, #4]
 800571c:	e00c      	b.n	8005738 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800571e:	4b0a      	ldr	r3, [pc, #40]	; (8005748 <osKernelInitialize+0x44>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d105      	bne.n	8005732 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005726:	4b08      	ldr	r3, [pc, #32]	; (8005748 <osKernelInitialize+0x44>)
 8005728:	2201      	movs	r2, #1
 800572a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800572c:	2300      	movs	r3, #0
 800572e:	607b      	str	r3, [r7, #4]
 8005730:	e002      	b.n	8005738 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005732:	f04f 33ff 	mov.w	r3, #4294967295
 8005736:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005738:	687b      	ldr	r3, [r7, #4]
}
 800573a:	4618      	mov	r0, r3
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	200052e8 	.word	0x200052e8

0800574c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005752:	f3ef 8305 	mrs	r3, IPSR
 8005756:	603b      	str	r3, [r7, #0]
  return(result);
 8005758:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800575a:	2b00      	cmp	r3, #0
 800575c:	d003      	beq.n	8005766 <osKernelStart+0x1a>
    stat = osErrorISR;
 800575e:	f06f 0305 	mvn.w	r3, #5
 8005762:	607b      	str	r3, [r7, #4]
 8005764:	e010      	b.n	8005788 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005766:	4b0b      	ldr	r3, [pc, #44]	; (8005794 <osKernelStart+0x48>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d109      	bne.n	8005782 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800576e:	f7ff ffbf 	bl	80056f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005772:	4b08      	ldr	r3, [pc, #32]	; (8005794 <osKernelStart+0x48>)
 8005774:	2202      	movs	r2, #2
 8005776:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005778:	f001 ffb2 	bl	80076e0 <vTaskStartScheduler>
      stat = osOK;
 800577c:	2300      	movs	r3, #0
 800577e:	607b      	str	r3, [r7, #4]
 8005780:	e002      	b.n	8005788 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005782:	f04f 33ff 	mov.w	r3, #4294967295
 8005786:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005788:	687b      	ldr	r3, [r7, #4]
}
 800578a:	4618      	mov	r0, r3
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	200052e8 	.word	0x200052e8

08005798 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800579e:	f3ef 8305 	mrs	r3, IPSR
 80057a2:	603b      	str	r3, [r7, #0]
  return(result);
 80057a4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80057aa:	f002 f8bb 	bl	8007924 <xTaskGetTickCountFromISR>
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	e002      	b.n	80057b8 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80057b2:	f002 f8a7 	bl	8007904 <xTaskGetTickCount>
 80057b6:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80057b8:	687b      	ldr	r3, [r7, #4]
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3708      	adds	r7, #8
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b08e      	sub	sp, #56	; 0x38
 80057c6:	af04      	add	r7, sp, #16
 80057c8:	60f8      	str	r0, [r7, #12]
 80057ca:	60b9      	str	r1, [r7, #8]
 80057cc:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80057ce:	2300      	movs	r3, #0
 80057d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057d2:	f3ef 8305 	mrs	r3, IPSR
 80057d6:	617b      	str	r3, [r7, #20]
  return(result);
 80057d8:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d17e      	bne.n	80058dc <osThreadNew+0x11a>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d07b      	beq.n	80058dc <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80057e4:	2380      	movs	r3, #128	; 0x80
 80057e6:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80057e8:	2318      	movs	r3, #24
 80057ea:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80057ec:	2300      	movs	r3, #0
 80057ee:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80057f0:	f04f 33ff 	mov.w	r3, #4294967295
 80057f4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d045      	beq.n	8005888 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d002      	beq.n	800580a <osThreadNew+0x48>
        name = attr->name;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d002      	beq.n	8005818 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d008      	beq.n	8005830 <osThreadNew+0x6e>
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	2b38      	cmp	r3, #56	; 0x38
 8005822:	d805      	bhi.n	8005830 <osThreadNew+0x6e>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	2b00      	cmp	r3, #0
 800582e:	d001      	beq.n	8005834 <osThreadNew+0x72>
        return (NULL);
 8005830:	2300      	movs	r3, #0
 8005832:	e054      	b.n	80058de <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d003      	beq.n	8005844 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	695b      	ldr	r3, [r3, #20]
 8005840:	089b      	lsrs	r3, r3, #2
 8005842:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00e      	beq.n	800586a <osThreadNew+0xa8>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	2b5b      	cmp	r3, #91	; 0x5b
 8005852:	d90a      	bls.n	800586a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005858:	2b00      	cmp	r3, #0
 800585a:	d006      	beq.n	800586a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	695b      	ldr	r3, [r3, #20]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d002      	beq.n	800586a <osThreadNew+0xa8>
        mem = 1;
 8005864:	2301      	movs	r3, #1
 8005866:	61bb      	str	r3, [r7, #24]
 8005868:	e010      	b.n	800588c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10c      	bne.n	800588c <osThreadNew+0xca>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d108      	bne.n	800588c <osThreadNew+0xca>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d104      	bne.n	800588c <osThreadNew+0xca>
          mem = 0;
 8005882:	2300      	movs	r3, #0
 8005884:	61bb      	str	r3, [r7, #24]
 8005886:	e001      	b.n	800588c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005888:	2300      	movs	r3, #0
 800588a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d110      	bne.n	80058b4 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800589a:	9202      	str	r2, [sp, #8]
 800589c:	9301      	str	r3, [sp, #4]
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	9300      	str	r3, [sp, #0]
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	6a3a      	ldr	r2, [r7, #32]
 80058a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f001 fd43 	bl	8007334 <xTaskCreateStatic>
 80058ae:	4603      	mov	r3, r0
 80058b0:	613b      	str	r3, [r7, #16]
 80058b2:	e013      	b.n	80058dc <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d110      	bne.n	80058dc <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80058ba:	6a3b      	ldr	r3, [r7, #32]
 80058bc:	b29a      	uxth	r2, r3
 80058be:	f107 0310 	add.w	r3, r7, #16
 80058c2:	9301      	str	r3, [sp, #4]
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f001 fd8e 	bl	80073ee <xTaskCreate>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d001      	beq.n	80058dc <osThreadNew+0x11a>
            hTask = NULL;
 80058d8:	2300      	movs	r3, #0
 80058da:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80058dc:	693b      	ldr	r3, [r7, #16]
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3728      	adds	r7, #40	; 0x28
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b084      	sub	sp, #16
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058ee:	f3ef 8305 	mrs	r3, IPSR
 80058f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80058f4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <osDelay+0x1c>
    stat = osErrorISR;
 80058fa:	f06f 0305 	mvn.w	r3, #5
 80058fe:	60fb      	str	r3, [r7, #12]
 8005900:	e007      	b.n	8005912 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005902:	2300      	movs	r3, #0
 8005904:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d002      	beq.n	8005912 <osDelay+0x2c>
      vTaskDelay(ticks);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f001 feb3 	bl	8007678 <vTaskDelay>
    }
  }

  return (stat);
 8005912:	68fb      	ldr	r3, [r7, #12]
}
 8005914:	4618      	mov	r0, r3
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800591c:	b580      	push	{r7, lr}
 800591e:	b088      	sub	sp, #32
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005924:	2300      	movs	r3, #0
 8005926:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005928:	f3ef 8305 	mrs	r3, IPSR
 800592c:	60bb      	str	r3, [r7, #8]
  return(result);
 800592e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005930:	2b00      	cmp	r3, #0
 8005932:	d174      	bne.n	8005a1e <osMutexNew+0x102>
    if (attr != NULL) {
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d003      	beq.n	8005942 <osMutexNew+0x26>
      type = attr->attr_bits;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	61bb      	str	r3, [r7, #24]
 8005940:	e001      	b.n	8005946 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005942:	2300      	movs	r3, #0
 8005944:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	f003 0301 	and.w	r3, r3, #1
 800594c:	2b00      	cmp	r3, #0
 800594e:	d002      	beq.n	8005956 <osMutexNew+0x3a>
      rmtx = 1U;
 8005950:	2301      	movs	r3, #1
 8005952:	617b      	str	r3, [r7, #20]
 8005954:	e001      	b.n	800595a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005956:	2300      	movs	r3, #0
 8005958:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	f003 0308 	and.w	r3, r3, #8
 8005960:	2b00      	cmp	r3, #0
 8005962:	d15c      	bne.n	8005a1e <osMutexNew+0x102>
      mem = -1;
 8005964:	f04f 33ff 	mov.w	r3, #4294967295
 8005968:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d015      	beq.n	800599c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d006      	beq.n	8005986 <osMutexNew+0x6a>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	2b4f      	cmp	r3, #79	; 0x4f
 800597e:	d902      	bls.n	8005986 <osMutexNew+0x6a>
          mem = 1;
 8005980:	2301      	movs	r3, #1
 8005982:	613b      	str	r3, [r7, #16]
 8005984:	e00c      	b.n	80059a0 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d108      	bne.n	80059a0 <osMutexNew+0x84>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d104      	bne.n	80059a0 <osMutexNew+0x84>
            mem = 0;
 8005996:	2300      	movs	r3, #0
 8005998:	613b      	str	r3, [r7, #16]
 800599a:	e001      	b.n	80059a0 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800599c:	2300      	movs	r3, #0
 800599e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d112      	bne.n	80059cc <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d007      	beq.n	80059bc <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	4619      	mov	r1, r3
 80059b2:	2004      	movs	r0, #4
 80059b4:	f000 fd69 	bl	800648a <xQueueCreateMutexStatic>
 80059b8:	61f8      	str	r0, [r7, #28]
 80059ba:	e016      	b.n	80059ea <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	4619      	mov	r1, r3
 80059c2:	2001      	movs	r0, #1
 80059c4:	f000 fd61 	bl	800648a <xQueueCreateMutexStatic>
 80059c8:	61f8      	str	r0, [r7, #28]
 80059ca:	e00e      	b.n	80059ea <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10b      	bne.n	80059ea <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d004      	beq.n	80059e2 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80059d8:	2004      	movs	r0, #4
 80059da:	f000 fd3e 	bl	800645a <xQueueCreateMutex>
 80059de:	61f8      	str	r0, [r7, #28]
 80059e0:	e003      	b.n	80059ea <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80059e2:	2001      	movs	r0, #1
 80059e4:	f000 fd39 	bl	800645a <xQueueCreateMutex>
 80059e8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00c      	beq.n	8005a0a <osMutexNew+0xee>
        if (attr != NULL) {
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <osMutexNew+0xe2>
          name = attr->name;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	60fb      	str	r3, [r7, #12]
 80059fc:	e001      	b.n	8005a02 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80059fe:	2300      	movs	r3, #0
 8005a00:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005a02:	68f9      	ldr	r1, [r7, #12]
 8005a04:	69f8      	ldr	r0, [r7, #28]
 8005a06:	f001 fc0d 	bl	8007224 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d006      	beq.n	8005a1e <osMutexNew+0x102>
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	f043 0301 	orr.w	r3, r3, #1
 8005a1c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005a1e:	69fb      	ldr	r3, [r7, #28]
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3720      	adds	r7, #32
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b086      	sub	sp, #24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f023 0301 	bic.w	r3, r3, #1
 8005a38:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f003 0301 	and.w	r3, r3, #1
 8005a40:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005a42:	2300      	movs	r3, #0
 8005a44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a46:	f3ef 8305 	mrs	r3, IPSR
 8005a4a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a4c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005a52:	f06f 0305 	mvn.w	r3, #5
 8005a56:	617b      	str	r3, [r7, #20]
 8005a58:	e02c      	b.n	8005ab4 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d103      	bne.n	8005a68 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005a60:	f06f 0303 	mvn.w	r3, #3
 8005a64:	617b      	str	r3, [r7, #20]
 8005a66:	e025      	b.n	8005ab4 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d011      	beq.n	8005a92 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005a6e:	6839      	ldr	r1, [r7, #0]
 8005a70:	6938      	ldr	r0, [r7, #16]
 8005a72:	f000 fd59 	bl	8006528 <xQueueTakeMutexRecursive>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d01b      	beq.n	8005ab4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005a82:	f06f 0301 	mvn.w	r3, #1
 8005a86:	617b      	str	r3, [r7, #20]
 8005a88:	e014      	b.n	8005ab4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005a8a:	f06f 0302 	mvn.w	r3, #2
 8005a8e:	617b      	str	r3, [r7, #20]
 8005a90:	e010      	b.n	8005ab4 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005a92:	6839      	ldr	r1, [r7, #0]
 8005a94:	6938      	ldr	r0, [r7, #16]
 8005a96:	f001 f8ed 	bl	8006c74 <xQueueSemaphoreTake>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d009      	beq.n	8005ab4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d003      	beq.n	8005aae <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005aa6:	f06f 0301 	mvn.w	r3, #1
 8005aaa:	617b      	str	r3, [r7, #20]
 8005aac:	e002      	b.n	8005ab4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005aae:	f06f 0302 	mvn.w	r3, #2
 8005ab2:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005ab4:	697b      	ldr	r3, [r7, #20]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3718      	adds	r7, #24
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b086      	sub	sp, #24
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f023 0301 	bic.w	r3, r3, #1
 8005acc:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ada:	f3ef 8305 	mrs	r3, IPSR
 8005ade:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ae0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d003      	beq.n	8005aee <osMutexRelease+0x30>
    stat = osErrorISR;
 8005ae6:	f06f 0305 	mvn.w	r3, #5
 8005aea:	617b      	str	r3, [r7, #20]
 8005aec:	e01f      	b.n	8005b2e <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d103      	bne.n	8005afc <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005af4:	f06f 0303 	mvn.w	r3, #3
 8005af8:	617b      	str	r3, [r7, #20]
 8005afa:	e018      	b.n	8005b2e <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d009      	beq.n	8005b16 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005b02:	6938      	ldr	r0, [r7, #16]
 8005b04:	f000 fcdc 	bl	80064c0 <xQueueGiveMutexRecursive>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d00f      	beq.n	8005b2e <osMutexRelease+0x70>
        stat = osErrorResource;
 8005b0e:	f06f 0302 	mvn.w	r3, #2
 8005b12:	617b      	str	r3, [r7, #20]
 8005b14:	e00b      	b.n	8005b2e <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005b16:	2300      	movs	r3, #0
 8005b18:	2200      	movs	r2, #0
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	6938      	ldr	r0, [r7, #16]
 8005b1e:	f000 fda3 	bl	8006668 <xQueueGenericSend>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d002      	beq.n	8005b2e <osMutexRelease+0x70>
        stat = osErrorResource;
 8005b28:	f06f 0302 	mvn.w	r3, #2
 8005b2c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005b2e:	697b      	ldr	r3, [r7, #20]
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3718      	adds	r7, #24
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b08a      	sub	sp, #40	; 0x28
 8005b3c:	af02      	add	r7, sp, #8
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005b44:	2300      	movs	r3, #0
 8005b46:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b48:	f3ef 8305 	mrs	r3, IPSR
 8005b4c:	613b      	str	r3, [r7, #16]
  return(result);
 8005b4e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d175      	bne.n	8005c40 <osSemaphoreNew+0x108>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d072      	beq.n	8005c40 <osSemaphoreNew+0x108>
 8005b5a:	68ba      	ldr	r2, [r7, #8]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d86e      	bhi.n	8005c40 <osSemaphoreNew+0x108>
    mem = -1;
 8005b62:	f04f 33ff 	mov.w	r3, #4294967295
 8005b66:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d015      	beq.n	8005b9a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d006      	beq.n	8005b84 <osSemaphoreNew+0x4c>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	2b4f      	cmp	r3, #79	; 0x4f
 8005b7c:	d902      	bls.n	8005b84 <osSemaphoreNew+0x4c>
        mem = 1;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	61bb      	str	r3, [r7, #24]
 8005b82:	e00c      	b.n	8005b9e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d108      	bne.n	8005b9e <osSemaphoreNew+0x66>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d104      	bne.n	8005b9e <osSemaphoreNew+0x66>
          mem = 0;
 8005b94:	2300      	movs	r3, #0
 8005b96:	61bb      	str	r3, [r7, #24]
 8005b98:	e001      	b.n	8005b9e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba4:	d04c      	beq.n	8005c40 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d128      	bne.n	8005bfe <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d10a      	bne.n	8005bc8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	2203      	movs	r2, #3
 8005bb8:	9200      	str	r2, [sp, #0]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	2001      	movs	r0, #1
 8005bc0:	f000 fb5c 	bl	800627c <xQueueGenericCreateStatic>
 8005bc4:	61f8      	str	r0, [r7, #28]
 8005bc6:	e005      	b.n	8005bd4 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005bc8:	2203      	movs	r2, #3
 8005bca:	2100      	movs	r1, #0
 8005bcc:	2001      	movs	r0, #1
 8005bce:	f000 fbcd 	bl	800636c <xQueueGenericCreate>
 8005bd2:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d022      	beq.n	8005c20 <osSemaphoreNew+0xe8>
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d01f      	beq.n	8005c20 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005be0:	2300      	movs	r3, #0
 8005be2:	2200      	movs	r2, #0
 8005be4:	2100      	movs	r1, #0
 8005be6:	69f8      	ldr	r0, [r7, #28]
 8005be8:	f000 fd3e 	bl	8006668 <xQueueGenericSend>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d016      	beq.n	8005c20 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005bf2:	69f8      	ldr	r0, [r7, #28]
 8005bf4:	f001 f9ca 	bl	8006f8c <vQueueDelete>
            hSemaphore = NULL;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	61fb      	str	r3, [r7, #28]
 8005bfc:	e010      	b.n	8005c20 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d108      	bne.n	8005c16 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	461a      	mov	r2, r3
 8005c0a:	68b9      	ldr	r1, [r7, #8]
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f000 fcc1 	bl	8006594 <xQueueCreateCountingSemaphoreStatic>
 8005c12:	61f8      	str	r0, [r7, #28]
 8005c14:	e004      	b.n	8005c20 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005c16:	68b9      	ldr	r1, [r7, #8]
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f000 fcf2 	bl	8006602 <xQueueCreateCountingSemaphore>
 8005c1e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00c      	beq.n	8005c40 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d003      	beq.n	8005c34 <osSemaphoreNew+0xfc>
          name = attr->name;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	617b      	str	r3, [r7, #20]
 8005c32:	e001      	b.n	8005c38 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005c34:	2300      	movs	r3, #0
 8005c36:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005c38:	6979      	ldr	r1, [r7, #20]
 8005c3a:	69f8      	ldr	r0, [r7, #28]
 8005c3c:	f001 faf2 	bl	8007224 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005c40:	69fb      	ldr	r3, [r7, #28]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3720      	adds	r7, #32
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
	...

08005c4c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b086      	sub	sp, #24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d103      	bne.n	8005c6c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005c64:	f06f 0303 	mvn.w	r3, #3
 8005c68:	617b      	str	r3, [r7, #20]
 8005c6a:	e039      	b.n	8005ce0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c6c:	f3ef 8305 	mrs	r3, IPSR
 8005c70:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c72:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d022      	beq.n	8005cbe <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d003      	beq.n	8005c86 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005c7e:	f06f 0303 	mvn.w	r3, #3
 8005c82:	617b      	str	r3, [r7, #20]
 8005c84:	e02c      	b.n	8005ce0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005c86:	2300      	movs	r3, #0
 8005c88:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005c8a:	f107 0308 	add.w	r3, r7, #8
 8005c8e:	461a      	mov	r2, r3
 8005c90:	2100      	movs	r1, #0
 8005c92:	6938      	ldr	r0, [r7, #16]
 8005c94:	f001 f8fa 	bl	8006e8c <xQueueReceiveFromISR>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d003      	beq.n	8005ca6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005c9e:	f06f 0302 	mvn.w	r3, #2
 8005ca2:	617b      	str	r3, [r7, #20]
 8005ca4:	e01c      	b.n	8005ce0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d019      	beq.n	8005ce0 <osSemaphoreAcquire+0x94>
 8005cac:	4b0f      	ldr	r3, [pc, #60]	; (8005cec <osSemaphoreAcquire+0xa0>)
 8005cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cb2:	601a      	str	r2, [r3, #0]
 8005cb4:	f3bf 8f4f 	dsb	sy
 8005cb8:	f3bf 8f6f 	isb	sy
 8005cbc:	e010      	b.n	8005ce0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005cbe:	6839      	ldr	r1, [r7, #0]
 8005cc0:	6938      	ldr	r0, [r7, #16]
 8005cc2:	f000 ffd7 	bl	8006c74 <xQueueSemaphoreTake>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d009      	beq.n	8005ce0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d003      	beq.n	8005cda <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005cd2:	f06f 0301 	mvn.w	r3, #1
 8005cd6:	617b      	str	r3, [r7, #20]
 8005cd8:	e002      	b.n	8005ce0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005cda:	f06f 0302 	mvn.w	r3, #2
 8005cde:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005ce0:	697b      	ldr	r3, [r7, #20]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3718      	adds	r7, #24
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	e000ed04 	.word	0xe000ed04

08005cf0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d103      	bne.n	8005d0e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005d06:	f06f 0303 	mvn.w	r3, #3
 8005d0a:	617b      	str	r3, [r7, #20]
 8005d0c:	e02c      	b.n	8005d68 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d0e:	f3ef 8305 	mrs	r3, IPSR
 8005d12:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d14:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d01a      	beq.n	8005d50 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005d1e:	f107 0308 	add.w	r3, r7, #8
 8005d22:	4619      	mov	r1, r3
 8005d24:	6938      	ldr	r0, [r7, #16]
 8005d26:	f000 fe38 	bl	800699a <xQueueGiveFromISR>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d003      	beq.n	8005d38 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005d30:	f06f 0302 	mvn.w	r3, #2
 8005d34:	617b      	str	r3, [r7, #20]
 8005d36:	e017      	b.n	8005d68 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d014      	beq.n	8005d68 <osSemaphoreRelease+0x78>
 8005d3e:	4b0d      	ldr	r3, [pc, #52]	; (8005d74 <osSemaphoreRelease+0x84>)
 8005d40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d44:	601a      	str	r2, [r3, #0]
 8005d46:	f3bf 8f4f 	dsb	sy
 8005d4a:	f3bf 8f6f 	isb	sy
 8005d4e:	e00b      	b.n	8005d68 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005d50:	2300      	movs	r3, #0
 8005d52:	2200      	movs	r2, #0
 8005d54:	2100      	movs	r1, #0
 8005d56:	6938      	ldr	r0, [r7, #16]
 8005d58:	f000 fc86 	bl	8006668 <xQueueGenericSend>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d002      	beq.n	8005d68 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005d62:	f06f 0302 	mvn.w	r3, #2
 8005d66:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005d68:	697b      	ldr	r3, [r7, #20]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3718      	adds	r7, #24
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	e000ed04 	.word	0xe000ed04

08005d78 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b08a      	sub	sp, #40	; 0x28
 8005d7c:	af02      	add	r7, sp, #8
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005d84:	2300      	movs	r3, #0
 8005d86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d88:	f3ef 8305 	mrs	r3, IPSR
 8005d8c:	613b      	str	r3, [r7, #16]
  return(result);
 8005d8e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d15f      	bne.n	8005e54 <osMessageQueueNew+0xdc>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d05c      	beq.n	8005e54 <osMessageQueueNew+0xdc>
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d059      	beq.n	8005e54 <osMessageQueueNew+0xdc>
    mem = -1;
 8005da0:	f04f 33ff 	mov.w	r3, #4294967295
 8005da4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d029      	beq.n	8005e00 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d012      	beq.n	8005dda <osMessageQueueNew+0x62>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	2b4f      	cmp	r3, #79	; 0x4f
 8005dba:	d90e      	bls.n	8005dda <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00a      	beq.n	8005dda <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	695a      	ldr	r2, [r3, #20]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	68b9      	ldr	r1, [r7, #8]
 8005dcc:	fb01 f303 	mul.w	r3, r1, r3
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d302      	bcc.n	8005dda <osMessageQueueNew+0x62>
        mem = 1;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	61bb      	str	r3, [r7, #24]
 8005dd8:	e014      	b.n	8005e04 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d110      	bne.n	8005e04 <osMessageQueueNew+0x8c>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10c      	bne.n	8005e04 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d108      	bne.n	8005e04 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d104      	bne.n	8005e04 <osMessageQueueNew+0x8c>
          mem = 0;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	61bb      	str	r3, [r7, #24]
 8005dfe:	e001      	b.n	8005e04 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005e00:	2300      	movs	r3, #0
 8005e02:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d10b      	bne.n	8005e22 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	691a      	ldr	r2, [r3, #16]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	2100      	movs	r1, #0
 8005e14:	9100      	str	r1, [sp, #0]
 8005e16:	68b9      	ldr	r1, [r7, #8]
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f000 fa2f 	bl	800627c <xQueueGenericCreateStatic>
 8005e1e:	61f8      	str	r0, [r7, #28]
 8005e20:	e008      	b.n	8005e34 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d105      	bne.n	8005e34 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005e28:	2200      	movs	r2, #0
 8005e2a:	68b9      	ldr	r1, [r7, #8]
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f000 fa9d 	bl	800636c <xQueueGenericCreate>
 8005e32:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00c      	beq.n	8005e54 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d003      	beq.n	8005e48 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	617b      	str	r3, [r7, #20]
 8005e46:	e001      	b.n	8005e4c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005e4c:	6979      	ldr	r1, [r7, #20]
 8005e4e:	69f8      	ldr	r0, [r7, #28]
 8005e50:	f001 f9e8 	bl	8007224 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005e54:	69fb      	ldr	r3, [r7, #28]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3720      	adds	r7, #32
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
	...

08005e60 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b088      	sub	sp, #32
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	603b      	str	r3, [r7, #0]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005e74:	2300      	movs	r3, #0
 8005e76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e78:	f3ef 8305 	mrs	r3, IPSR
 8005e7c:	617b      	str	r3, [r7, #20]
  return(result);
 8005e7e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d028      	beq.n	8005ed6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d005      	beq.n	8005e96 <osMessageQueuePut+0x36>
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d002      	beq.n	8005e96 <osMessageQueuePut+0x36>
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d003      	beq.n	8005e9e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005e96:	f06f 0303 	mvn.w	r3, #3
 8005e9a:	61fb      	str	r3, [r7, #28]
 8005e9c:	e038      	b.n	8005f10 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005ea2:	f107 0210 	add.w	r2, r7, #16
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	68b9      	ldr	r1, [r7, #8]
 8005eaa:	69b8      	ldr	r0, [r7, #24]
 8005eac:	f000 fcda 	bl	8006864 <xQueueGenericSendFromISR>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d003      	beq.n	8005ebe <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005eb6:	f06f 0302 	mvn.w	r3, #2
 8005eba:	61fb      	str	r3, [r7, #28]
 8005ebc:	e028      	b.n	8005f10 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d025      	beq.n	8005f10 <osMessageQueuePut+0xb0>
 8005ec4:	4b15      	ldr	r3, [pc, #84]	; (8005f1c <osMessageQueuePut+0xbc>)
 8005ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eca:	601a      	str	r2, [r3, #0]
 8005ecc:	f3bf 8f4f 	dsb	sy
 8005ed0:	f3bf 8f6f 	isb	sy
 8005ed4:	e01c      	b.n	8005f10 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d002      	beq.n	8005ee2 <osMessageQueuePut+0x82>
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d103      	bne.n	8005eea <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005ee2:	f06f 0303 	mvn.w	r3, #3
 8005ee6:	61fb      	str	r3, [r7, #28]
 8005ee8:	e012      	b.n	8005f10 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005eea:	2300      	movs	r3, #0
 8005eec:	683a      	ldr	r2, [r7, #0]
 8005eee:	68b9      	ldr	r1, [r7, #8]
 8005ef0:	69b8      	ldr	r0, [r7, #24]
 8005ef2:	f000 fbb9 	bl	8006668 <xQueueGenericSend>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d009      	beq.n	8005f10 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005f02:	f06f 0301 	mvn.w	r3, #1
 8005f06:	61fb      	str	r3, [r7, #28]
 8005f08:	e002      	b.n	8005f10 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005f0a:	f06f 0302 	mvn.w	r3, #2
 8005f0e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005f10:	69fb      	ldr	r3, [r7, #28]
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3720      	adds	r7, #32
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	e000ed04 	.word	0xe000ed04

08005f20 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b088      	sub	sp, #32
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
 8005f2c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005f32:	2300      	movs	r3, #0
 8005f34:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f36:	f3ef 8305 	mrs	r3, IPSR
 8005f3a:	617b      	str	r3, [r7, #20]
  return(result);
 8005f3c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d028      	beq.n	8005f94 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d005      	beq.n	8005f54 <osMessageQueueGet+0x34>
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d002      	beq.n	8005f54 <osMessageQueueGet+0x34>
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d003      	beq.n	8005f5c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005f54:	f06f 0303 	mvn.w	r3, #3
 8005f58:	61fb      	str	r3, [r7, #28]
 8005f5a:	e037      	b.n	8005fcc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005f60:	f107 0310 	add.w	r3, r7, #16
 8005f64:	461a      	mov	r2, r3
 8005f66:	68b9      	ldr	r1, [r7, #8]
 8005f68:	69b8      	ldr	r0, [r7, #24]
 8005f6a:	f000 ff8f 	bl	8006e8c <xQueueReceiveFromISR>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d003      	beq.n	8005f7c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005f74:	f06f 0302 	mvn.w	r3, #2
 8005f78:	61fb      	str	r3, [r7, #28]
 8005f7a:	e027      	b.n	8005fcc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d024      	beq.n	8005fcc <osMessageQueueGet+0xac>
 8005f82:	4b15      	ldr	r3, [pc, #84]	; (8005fd8 <osMessageQueueGet+0xb8>)
 8005f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f88:	601a      	str	r2, [r3, #0]
 8005f8a:	f3bf 8f4f 	dsb	sy
 8005f8e:	f3bf 8f6f 	isb	sy
 8005f92:	e01b      	b.n	8005fcc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d002      	beq.n	8005fa0 <osMessageQueueGet+0x80>
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d103      	bne.n	8005fa8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005fa0:	f06f 0303 	mvn.w	r3, #3
 8005fa4:	61fb      	str	r3, [r7, #28]
 8005fa6:	e011      	b.n	8005fcc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005fa8:	683a      	ldr	r2, [r7, #0]
 8005faa:	68b9      	ldr	r1, [r7, #8]
 8005fac:	69b8      	ldr	r0, [r7, #24]
 8005fae:	f000 fd81 	bl	8006ab4 <xQueueReceive>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d009      	beq.n	8005fcc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d003      	beq.n	8005fc6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005fbe:	f06f 0301 	mvn.w	r3, #1
 8005fc2:	61fb      	str	r3, [r7, #28]
 8005fc4:	e002      	b.n	8005fcc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005fc6:	f06f 0302 	mvn.w	r3, #2
 8005fca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005fcc:	69fb      	ldr	r3, [r7, #28]
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3720      	adds	r7, #32
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	e000ed04 	.word	0xe000ed04

08005fdc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	4a07      	ldr	r2, [pc, #28]	; (8006008 <vApplicationGetIdleTaskMemory+0x2c>)
 8005fec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	4a06      	ldr	r2, [pc, #24]	; (800600c <vApplicationGetIdleTaskMemory+0x30>)
 8005ff2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2280      	movs	r2, #128	; 0x80
 8005ff8:	601a      	str	r2, [r3, #0]
}
 8005ffa:	bf00      	nop
 8005ffc:	3714      	adds	r7, #20
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	200052ec 	.word	0x200052ec
 800600c:	20005348 	.word	0x20005348

08006010 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	4a07      	ldr	r2, [pc, #28]	; (800603c <vApplicationGetTimerTaskMemory+0x2c>)
 8006020:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	4a06      	ldr	r2, [pc, #24]	; (8006040 <vApplicationGetTimerTaskMemory+0x30>)
 8006026:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800602e:	601a      	str	r2, [r3, #0]
}
 8006030:	bf00      	nop
 8006032:	3714      	adds	r7, #20
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr
 800603c:	20005548 	.word	0x20005548
 8006040:	200055a4 	.word	0x200055a4

08006044 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f103 0208 	add.w	r2, r3, #8
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f04f 32ff 	mov.w	r2, #4294967295
 800605c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f103 0208 	add.w	r2, r3, #8
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f103 0208 	add.w	r2, r3, #8
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006092:	bf00      	nop
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800609e:	b480      	push	{r7}
 80060a0:	b085      	sub	sp, #20
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
 80060a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	689a      	ldr	r2, [r3, #8]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	683a      	ldr	r2, [r7, #0]
 80060c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	683a      	ldr	r2, [r7, #0]
 80060c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	1c5a      	adds	r2, r3, #1
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	601a      	str	r2, [r3, #0]
}
 80060da:	bf00      	nop
 80060dc:	3714      	adds	r7, #20
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060e6:	b480      	push	{r7}
 80060e8:	b085      	sub	sp, #20
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
 80060ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060fc:	d103      	bne.n	8006106 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	60fb      	str	r3, [r7, #12]
 8006104:	e00c      	b.n	8006120 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	3308      	adds	r3, #8
 800610a:	60fb      	str	r3, [r7, #12]
 800610c:	e002      	b.n	8006114 <vListInsert+0x2e>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	60fb      	str	r3, [r7, #12]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	429a      	cmp	r2, r3
 800611e:	d2f6      	bcs.n	800610e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	685a      	ldr	r2, [r3, #4]
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	683a      	ldr	r2, [r7, #0]
 800612e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	683a      	ldr	r2, [r7, #0]
 800613a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	1c5a      	adds	r2, r3, #1
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	601a      	str	r2, [r3, #0]
}
 800614c:	bf00      	nop
 800614e:	3714      	adds	r7, #20
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	6892      	ldr	r2, [r2, #8]
 800616e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	6852      	ldr	r2, [r2, #4]
 8006178:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	429a      	cmp	r2, r3
 8006182:	d103      	bne.n	800618c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	689a      	ldr	r2, [r3, #8]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	1e5a      	subs	r2, r3, #1
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3714      	adds	r7, #20
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10a      	bne.n	80061d6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80061c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c4:	f383 8811 	msr	BASEPRI, r3
 80061c8:	f3bf 8f6f 	isb	sy
 80061cc:	f3bf 8f4f 	dsb	sy
 80061d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80061d2:	bf00      	nop
 80061d4:	e7fe      	b.n	80061d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80061d6:	f002 fd45 	bl	8008c64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061e2:	68f9      	ldr	r1, [r7, #12]
 80061e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80061e6:	fb01 f303 	mul.w	r3, r1, r3
 80061ea:	441a      	add	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006206:	3b01      	subs	r3, #1
 8006208:	68f9      	ldr	r1, [r7, #12]
 800620a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800620c:	fb01 f303 	mul.w	r3, r1, r3
 8006210:	441a      	add	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	22ff      	movs	r2, #255	; 0xff
 800621a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	22ff      	movs	r2, #255	; 0xff
 8006222:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d114      	bne.n	8006256 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d01a      	beq.n	800626a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	3310      	adds	r3, #16
 8006238:	4618      	mov	r0, r3
 800623a:	f001 fced 	bl	8007c18 <xTaskRemoveFromEventList>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d012      	beq.n	800626a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006244:	4b0c      	ldr	r3, [pc, #48]	; (8006278 <xQueueGenericReset+0xcc>)
 8006246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800624a:	601a      	str	r2, [r3, #0]
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	e009      	b.n	800626a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	3310      	adds	r3, #16
 800625a:	4618      	mov	r0, r3
 800625c:	f7ff fef2 	bl	8006044 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	3324      	adds	r3, #36	; 0x24
 8006264:	4618      	mov	r0, r3
 8006266:	f7ff feed 	bl	8006044 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800626a:	f002 fd2b 	bl	8008cc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800626e:	2301      	movs	r3, #1
}
 8006270:	4618      	mov	r0, r3
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	e000ed04 	.word	0xe000ed04

0800627c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800627c:	b580      	push	{r7, lr}
 800627e:	b08e      	sub	sp, #56	; 0x38
 8006280:	af02      	add	r7, sp, #8
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
 8006288:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d10a      	bne.n	80062a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006294:	f383 8811 	msr	BASEPRI, r3
 8006298:	f3bf 8f6f 	isb	sy
 800629c:	f3bf 8f4f 	dsb	sy
 80062a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80062a2:	bf00      	nop
 80062a4:	e7fe      	b.n	80062a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d10a      	bne.n	80062c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80062ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b0:	f383 8811 	msr	BASEPRI, r3
 80062b4:	f3bf 8f6f 	isb	sy
 80062b8:	f3bf 8f4f 	dsb	sy
 80062bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80062be:	bf00      	nop
 80062c0:	e7fe      	b.n	80062c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d002      	beq.n	80062ce <xQueueGenericCreateStatic+0x52>
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d001      	beq.n	80062d2 <xQueueGenericCreateStatic+0x56>
 80062ce:	2301      	movs	r3, #1
 80062d0:	e000      	b.n	80062d4 <xQueueGenericCreateStatic+0x58>
 80062d2:	2300      	movs	r3, #0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d10a      	bne.n	80062ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80062d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062dc:	f383 8811 	msr	BASEPRI, r3
 80062e0:	f3bf 8f6f 	isb	sy
 80062e4:	f3bf 8f4f 	dsb	sy
 80062e8:	623b      	str	r3, [r7, #32]
}
 80062ea:	bf00      	nop
 80062ec:	e7fe      	b.n	80062ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d102      	bne.n	80062fa <xQueueGenericCreateStatic+0x7e>
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d101      	bne.n	80062fe <xQueueGenericCreateStatic+0x82>
 80062fa:	2301      	movs	r3, #1
 80062fc:	e000      	b.n	8006300 <xQueueGenericCreateStatic+0x84>
 80062fe:	2300      	movs	r3, #0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10a      	bne.n	800631a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006308:	f383 8811 	msr	BASEPRI, r3
 800630c:	f3bf 8f6f 	isb	sy
 8006310:	f3bf 8f4f 	dsb	sy
 8006314:	61fb      	str	r3, [r7, #28]
}
 8006316:	bf00      	nop
 8006318:	e7fe      	b.n	8006318 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800631a:	2350      	movs	r3, #80	; 0x50
 800631c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	2b50      	cmp	r3, #80	; 0x50
 8006322:	d00a      	beq.n	800633a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006328:	f383 8811 	msr	BASEPRI, r3
 800632c:	f3bf 8f6f 	isb	sy
 8006330:	f3bf 8f4f 	dsb	sy
 8006334:	61bb      	str	r3, [r7, #24]
}
 8006336:	bf00      	nop
 8006338:	e7fe      	b.n	8006338 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800633a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00d      	beq.n	8006362 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006348:	2201      	movs	r2, #1
 800634a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800634e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006354:	9300      	str	r3, [sp, #0]
 8006356:	4613      	mov	r3, r2
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	68b9      	ldr	r1, [r7, #8]
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f000 f83f 	bl	80063e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006364:	4618      	mov	r0, r3
 8006366:	3730      	adds	r7, #48	; 0x30
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800636c:	b580      	push	{r7, lr}
 800636e:	b08a      	sub	sp, #40	; 0x28
 8006370:	af02      	add	r7, sp, #8
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	4613      	mov	r3, r2
 8006378:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10a      	bne.n	8006396 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006384:	f383 8811 	msr	BASEPRI, r3
 8006388:	f3bf 8f6f 	isb	sy
 800638c:	f3bf 8f4f 	dsb	sy
 8006390:	613b      	str	r3, [r7, #16]
}
 8006392:	bf00      	nop
 8006394:	e7fe      	b.n	8006394 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	fb02 f303 	mul.w	r3, r2, r3
 800639e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	3350      	adds	r3, #80	; 0x50
 80063a4:	4618      	mov	r0, r3
 80063a6:	f002 fd7f 	bl	8008ea8 <pvPortMalloc>
 80063aa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d011      	beq.n	80063d6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	3350      	adds	r3, #80	; 0x50
 80063ba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80063c4:	79fa      	ldrb	r2, [r7, #7]
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	9300      	str	r3, [sp, #0]
 80063ca:	4613      	mov	r3, r2
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	68b9      	ldr	r1, [r7, #8]
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f000 f805 	bl	80063e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80063d6:	69bb      	ldr	r3, [r7, #24]
	}
 80063d8:	4618      	mov	r0, r3
 80063da:	3720      	adds	r7, #32
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
 80063ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d103      	bne.n	80063fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	69ba      	ldr	r2, [r7, #24]
 80063f8:	601a      	str	r2, [r3, #0]
 80063fa:	e002      	b.n	8006402 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800640e:	2101      	movs	r1, #1
 8006410:	69b8      	ldr	r0, [r7, #24]
 8006412:	f7ff fecb 	bl	80061ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	78fa      	ldrb	r2, [r7, #3]
 800641a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800641e:	bf00      	nop
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006426:	b580      	push	{r7, lr}
 8006428:	b082      	sub	sp, #8
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00e      	beq.n	8006452 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006446:	2300      	movs	r3, #0
 8006448:	2200      	movs	r2, #0
 800644a:	2100      	movs	r1, #0
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 f90b 	bl	8006668 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006452:	bf00      	nop
 8006454:	3708      	adds	r7, #8
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800645a:	b580      	push	{r7, lr}
 800645c:	b086      	sub	sp, #24
 800645e:	af00      	add	r7, sp, #0
 8006460:	4603      	mov	r3, r0
 8006462:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006464:	2301      	movs	r3, #1
 8006466:	617b      	str	r3, [r7, #20]
 8006468:	2300      	movs	r3, #0
 800646a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800646c:	79fb      	ldrb	r3, [r7, #7]
 800646e:	461a      	mov	r2, r3
 8006470:	6939      	ldr	r1, [r7, #16]
 8006472:	6978      	ldr	r0, [r7, #20]
 8006474:	f7ff ff7a 	bl	800636c <xQueueGenericCreate>
 8006478:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	f7ff ffd3 	bl	8006426 <prvInitialiseMutex>

		return xNewQueue;
 8006480:	68fb      	ldr	r3, [r7, #12]
	}
 8006482:	4618      	mov	r0, r3
 8006484:	3718      	adds	r7, #24
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800648a:	b580      	push	{r7, lr}
 800648c:	b088      	sub	sp, #32
 800648e:	af02      	add	r7, sp, #8
 8006490:	4603      	mov	r3, r0
 8006492:	6039      	str	r1, [r7, #0]
 8006494:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006496:	2301      	movs	r3, #1
 8006498:	617b      	str	r3, [r7, #20]
 800649a:	2300      	movs	r3, #0
 800649c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800649e:	79fb      	ldrb	r3, [r7, #7]
 80064a0:	9300      	str	r3, [sp, #0]
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	2200      	movs	r2, #0
 80064a6:	6939      	ldr	r1, [r7, #16]
 80064a8:	6978      	ldr	r0, [r7, #20]
 80064aa:	f7ff fee7 	bl	800627c <xQueueGenericCreateStatic>
 80064ae:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f7ff ffb8 	bl	8006426 <prvInitialiseMutex>

		return xNewQueue;
 80064b6:	68fb      	ldr	r3, [r7, #12]
	}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3718      	adds	r7, #24
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80064c0:	b590      	push	{r4, r7, lr}
 80064c2:	b087      	sub	sp, #28
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10a      	bne.n	80064e8 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80064d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d6:	f383 8811 	msr	BASEPRI, r3
 80064da:	f3bf 8f6f 	isb	sy
 80064de:	f3bf 8f4f 	dsb	sy
 80064e2:	60fb      	str	r3, [r7, #12]
}
 80064e4:	bf00      	nop
 80064e6:	e7fe      	b.n	80064e6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	689c      	ldr	r4, [r3, #8]
 80064ec:	f001 fd52 	bl	8007f94 <xTaskGetCurrentTaskHandle>
 80064f0:	4603      	mov	r3, r0
 80064f2:	429c      	cmp	r4, r3
 80064f4:	d111      	bne.n	800651a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	1e5a      	subs	r2, r3, #1
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d105      	bne.n	8006514 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006508:	2300      	movs	r3, #0
 800650a:	2200      	movs	r2, #0
 800650c:	2100      	movs	r1, #0
 800650e:	6938      	ldr	r0, [r7, #16]
 8006510:	f000 f8aa 	bl	8006668 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006514:	2301      	movs	r3, #1
 8006516:	617b      	str	r3, [r7, #20]
 8006518:	e001      	b.n	800651e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800651a:	2300      	movs	r3, #0
 800651c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800651e:	697b      	ldr	r3, [r7, #20]
	}
 8006520:	4618      	mov	r0, r3
 8006522:	371c      	adds	r7, #28
 8006524:	46bd      	mov	sp, r7
 8006526:	bd90      	pop	{r4, r7, pc}

08006528 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006528:	b590      	push	{r4, r7, lr}
 800652a:	b087      	sub	sp, #28
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d10a      	bne.n	8006552 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800653c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006540:	f383 8811 	msr	BASEPRI, r3
 8006544:	f3bf 8f6f 	isb	sy
 8006548:	f3bf 8f4f 	dsb	sy
 800654c:	60fb      	str	r3, [r7, #12]
}
 800654e:	bf00      	nop
 8006550:	e7fe      	b.n	8006550 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	689c      	ldr	r4, [r3, #8]
 8006556:	f001 fd1d 	bl	8007f94 <xTaskGetCurrentTaskHandle>
 800655a:	4603      	mov	r3, r0
 800655c:	429c      	cmp	r4, r3
 800655e:	d107      	bne.n	8006570 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	1c5a      	adds	r2, r3, #1
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800656a:	2301      	movs	r3, #1
 800656c:	617b      	str	r3, [r7, #20]
 800656e:	e00c      	b.n	800658a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006570:	6839      	ldr	r1, [r7, #0]
 8006572:	6938      	ldr	r0, [r7, #16]
 8006574:	f000 fb7e 	bl	8006c74 <xQueueSemaphoreTake>
 8006578:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d004      	beq.n	800658a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	1c5a      	adds	r2, r3, #1
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800658a:	697b      	ldr	r3, [r7, #20]
	}
 800658c:	4618      	mov	r0, r3
 800658e:	371c      	adds	r7, #28
 8006590:	46bd      	mov	sp, r7
 8006592:	bd90      	pop	{r4, r7, pc}

08006594 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006594:	b580      	push	{r7, lr}
 8006596:	b08a      	sub	sp, #40	; 0x28
 8006598:	af02      	add	r7, sp, #8
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d10a      	bne.n	80065bc <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80065a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065aa:	f383 8811 	msr	BASEPRI, r3
 80065ae:	f3bf 8f6f 	isb	sy
 80065b2:	f3bf 8f4f 	dsb	sy
 80065b6:	61bb      	str	r3, [r7, #24]
}
 80065b8:	bf00      	nop
 80065ba:	e7fe      	b.n	80065ba <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d90a      	bls.n	80065da <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80065c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c8:	f383 8811 	msr	BASEPRI, r3
 80065cc:	f3bf 8f6f 	isb	sy
 80065d0:	f3bf 8f4f 	dsb	sy
 80065d4:	617b      	str	r3, [r7, #20]
}
 80065d6:	bf00      	nop
 80065d8:	e7fe      	b.n	80065d8 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80065da:	2302      	movs	r3, #2
 80065dc:	9300      	str	r3, [sp, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	2100      	movs	r1, #0
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f7ff fe49 	bl	800627c <xQueueGenericCreateStatic>
 80065ea:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d002      	beq.n	80065f8 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80065f8:	69fb      	ldr	r3, [r7, #28]
	}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3720      	adds	r7, #32
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006602:	b580      	push	{r7, lr}
 8006604:	b086      	sub	sp, #24
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
 800660a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d10a      	bne.n	8006628 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8006612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006616:	f383 8811 	msr	BASEPRI, r3
 800661a:	f3bf 8f6f 	isb	sy
 800661e:	f3bf 8f4f 	dsb	sy
 8006622:	613b      	str	r3, [r7, #16]
}
 8006624:	bf00      	nop
 8006626:	e7fe      	b.n	8006626 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006628:	683a      	ldr	r2, [r7, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	429a      	cmp	r2, r3
 800662e:	d90a      	bls.n	8006646 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8006630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006634:	f383 8811 	msr	BASEPRI, r3
 8006638:	f3bf 8f6f 	isb	sy
 800663c:	f3bf 8f4f 	dsb	sy
 8006640:	60fb      	str	r3, [r7, #12]
}
 8006642:	bf00      	nop
 8006644:	e7fe      	b.n	8006644 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006646:	2202      	movs	r2, #2
 8006648:	2100      	movs	r1, #0
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f7ff fe8e 	bl	800636c <xQueueGenericCreate>
 8006650:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d002      	beq.n	800665e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800665e:	697b      	ldr	r3, [r7, #20]
	}
 8006660:	4618      	mov	r0, r3
 8006662:	3718      	adds	r7, #24
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b08e      	sub	sp, #56	; 0x38
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
 8006674:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006676:	2300      	movs	r3, #0
 8006678:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800667e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006680:	2b00      	cmp	r3, #0
 8006682:	d10a      	bne.n	800669a <xQueueGenericSend+0x32>
	__asm volatile
 8006684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006688:	f383 8811 	msr	BASEPRI, r3
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006696:	bf00      	nop
 8006698:	e7fe      	b.n	8006698 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d103      	bne.n	80066a8 <xQueueGenericSend+0x40>
 80066a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d101      	bne.n	80066ac <xQueueGenericSend+0x44>
 80066a8:	2301      	movs	r3, #1
 80066aa:	e000      	b.n	80066ae <xQueueGenericSend+0x46>
 80066ac:	2300      	movs	r3, #0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d10a      	bne.n	80066c8 <xQueueGenericSend+0x60>
	__asm volatile
 80066b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b6:	f383 8811 	msr	BASEPRI, r3
 80066ba:	f3bf 8f6f 	isb	sy
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80066c4:	bf00      	nop
 80066c6:	e7fe      	b.n	80066c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d103      	bne.n	80066d6 <xQueueGenericSend+0x6e>
 80066ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d101      	bne.n	80066da <xQueueGenericSend+0x72>
 80066d6:	2301      	movs	r3, #1
 80066d8:	e000      	b.n	80066dc <xQueueGenericSend+0x74>
 80066da:	2300      	movs	r3, #0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d10a      	bne.n	80066f6 <xQueueGenericSend+0x8e>
	__asm volatile
 80066e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e4:	f383 8811 	msr	BASEPRI, r3
 80066e8:	f3bf 8f6f 	isb	sy
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	623b      	str	r3, [r7, #32]
}
 80066f2:	bf00      	nop
 80066f4:	e7fe      	b.n	80066f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066f6:	f001 fc5d 	bl	8007fb4 <xTaskGetSchedulerState>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d102      	bne.n	8006706 <xQueueGenericSend+0x9e>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d101      	bne.n	800670a <xQueueGenericSend+0xa2>
 8006706:	2301      	movs	r3, #1
 8006708:	e000      	b.n	800670c <xQueueGenericSend+0xa4>
 800670a:	2300      	movs	r3, #0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10a      	bne.n	8006726 <xQueueGenericSend+0xbe>
	__asm volatile
 8006710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006714:	f383 8811 	msr	BASEPRI, r3
 8006718:	f3bf 8f6f 	isb	sy
 800671c:	f3bf 8f4f 	dsb	sy
 8006720:	61fb      	str	r3, [r7, #28]
}
 8006722:	bf00      	nop
 8006724:	e7fe      	b.n	8006724 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006726:	f002 fa9d 	bl	8008c64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800672a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800672e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006732:	429a      	cmp	r2, r3
 8006734:	d302      	bcc.n	800673c <xQueueGenericSend+0xd4>
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	2b02      	cmp	r3, #2
 800673a:	d129      	bne.n	8006790 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800673c:	683a      	ldr	r2, [r7, #0]
 800673e:	68b9      	ldr	r1, [r7, #8]
 8006740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006742:	f000 fc5e 	bl	8007002 <prvCopyDataToQueue>
 8006746:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674c:	2b00      	cmp	r3, #0
 800674e:	d010      	beq.n	8006772 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006752:	3324      	adds	r3, #36	; 0x24
 8006754:	4618      	mov	r0, r3
 8006756:	f001 fa5f 	bl	8007c18 <xTaskRemoveFromEventList>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d013      	beq.n	8006788 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006760:	4b3f      	ldr	r3, [pc, #252]	; (8006860 <xQueueGenericSend+0x1f8>)
 8006762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006766:	601a      	str	r2, [r3, #0]
 8006768:	f3bf 8f4f 	dsb	sy
 800676c:	f3bf 8f6f 	isb	sy
 8006770:	e00a      	b.n	8006788 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006774:	2b00      	cmp	r3, #0
 8006776:	d007      	beq.n	8006788 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006778:	4b39      	ldr	r3, [pc, #228]	; (8006860 <xQueueGenericSend+0x1f8>)
 800677a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800677e:	601a      	str	r2, [r3, #0]
 8006780:	f3bf 8f4f 	dsb	sy
 8006784:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006788:	f002 fa9c 	bl	8008cc4 <vPortExitCritical>
				return pdPASS;
 800678c:	2301      	movs	r3, #1
 800678e:	e063      	b.n	8006858 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d103      	bne.n	800679e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006796:	f002 fa95 	bl	8008cc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800679a:	2300      	movs	r3, #0
 800679c:	e05c      	b.n	8006858 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800679e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d106      	bne.n	80067b2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80067a4:	f107 0314 	add.w	r3, r7, #20
 80067a8:	4618      	mov	r0, r3
 80067aa:	f001 fa99 	bl	8007ce0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067ae:	2301      	movs	r3, #1
 80067b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067b2:	f002 fa87 	bl	8008cc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067b6:	f000 fff9 	bl	80077ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067ba:	f002 fa53 	bl	8008c64 <vPortEnterCritical>
 80067be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067c4:	b25b      	sxtb	r3, r3
 80067c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ca:	d103      	bne.n	80067d4 <xQueueGenericSend+0x16c>
 80067cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067da:	b25b      	sxtb	r3, r3
 80067dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e0:	d103      	bne.n	80067ea <xQueueGenericSend+0x182>
 80067e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067ea:	f002 fa6b 	bl	8008cc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067ee:	1d3a      	adds	r2, r7, #4
 80067f0:	f107 0314 	add.w	r3, r7, #20
 80067f4:	4611      	mov	r1, r2
 80067f6:	4618      	mov	r0, r3
 80067f8:	f001 fa88 	bl	8007d0c <xTaskCheckForTimeOut>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d124      	bne.n	800684c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006802:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006804:	f000 fcf5 	bl	80071f2 <prvIsQueueFull>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d018      	beq.n	8006840 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800680e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006810:	3310      	adds	r3, #16
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	4611      	mov	r1, r2
 8006816:	4618      	mov	r0, r3
 8006818:	f001 f9ae 	bl	8007b78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800681c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800681e:	f000 fc80 	bl	8007122 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006822:	f000 ffd1 	bl	80077c8 <xTaskResumeAll>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	f47f af7c 	bne.w	8006726 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800682e:	4b0c      	ldr	r3, [pc, #48]	; (8006860 <xQueueGenericSend+0x1f8>)
 8006830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006834:	601a      	str	r2, [r3, #0]
 8006836:	f3bf 8f4f 	dsb	sy
 800683a:	f3bf 8f6f 	isb	sy
 800683e:	e772      	b.n	8006726 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006840:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006842:	f000 fc6e 	bl	8007122 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006846:	f000 ffbf 	bl	80077c8 <xTaskResumeAll>
 800684a:	e76c      	b.n	8006726 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800684c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800684e:	f000 fc68 	bl	8007122 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006852:	f000 ffb9 	bl	80077c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006856:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006858:	4618      	mov	r0, r3
 800685a:	3738      	adds	r7, #56	; 0x38
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	e000ed04 	.word	0xe000ed04

08006864 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b090      	sub	sp, #64	; 0x40
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
 8006870:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006878:	2b00      	cmp	r3, #0
 800687a:	d10a      	bne.n	8006892 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800687c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006880:	f383 8811 	msr	BASEPRI, r3
 8006884:	f3bf 8f6f 	isb	sy
 8006888:	f3bf 8f4f 	dsb	sy
 800688c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800688e:	bf00      	nop
 8006890:	e7fe      	b.n	8006890 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d103      	bne.n	80068a0 <xQueueGenericSendFromISR+0x3c>
 8006898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689c:	2b00      	cmp	r3, #0
 800689e:	d101      	bne.n	80068a4 <xQueueGenericSendFromISR+0x40>
 80068a0:	2301      	movs	r3, #1
 80068a2:	e000      	b.n	80068a6 <xQueueGenericSendFromISR+0x42>
 80068a4:	2300      	movs	r3, #0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d10a      	bne.n	80068c0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80068aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ae:	f383 8811 	msr	BASEPRI, r3
 80068b2:	f3bf 8f6f 	isb	sy
 80068b6:	f3bf 8f4f 	dsb	sy
 80068ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80068bc:	bf00      	nop
 80068be:	e7fe      	b.n	80068be <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d103      	bne.n	80068ce <xQueueGenericSendFromISR+0x6a>
 80068c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d101      	bne.n	80068d2 <xQueueGenericSendFromISR+0x6e>
 80068ce:	2301      	movs	r3, #1
 80068d0:	e000      	b.n	80068d4 <xQueueGenericSendFromISR+0x70>
 80068d2:	2300      	movs	r3, #0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d10a      	bne.n	80068ee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80068d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068dc:	f383 8811 	msr	BASEPRI, r3
 80068e0:	f3bf 8f6f 	isb	sy
 80068e4:	f3bf 8f4f 	dsb	sy
 80068e8:	623b      	str	r3, [r7, #32]
}
 80068ea:	bf00      	nop
 80068ec:	e7fe      	b.n	80068ec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068ee:	f002 fa9b 	bl	8008e28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80068f2:	f3ef 8211 	mrs	r2, BASEPRI
 80068f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fa:	f383 8811 	msr	BASEPRI, r3
 80068fe:	f3bf 8f6f 	isb	sy
 8006902:	f3bf 8f4f 	dsb	sy
 8006906:	61fa      	str	r2, [r7, #28]
 8006908:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800690a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800690c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800690e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006916:	429a      	cmp	r2, r3
 8006918:	d302      	bcc.n	8006920 <xQueueGenericSendFromISR+0xbc>
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	2b02      	cmp	r3, #2
 800691e:	d12f      	bne.n	8006980 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006922:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800692a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006930:	683a      	ldr	r2, [r7, #0]
 8006932:	68b9      	ldr	r1, [r7, #8]
 8006934:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006936:	f000 fb64 	bl	8007002 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800693a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800693e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006942:	d112      	bne.n	800696a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006948:	2b00      	cmp	r3, #0
 800694a:	d016      	beq.n	800697a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800694c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694e:	3324      	adds	r3, #36	; 0x24
 8006950:	4618      	mov	r0, r3
 8006952:	f001 f961 	bl	8007c18 <xTaskRemoveFromEventList>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d00e      	beq.n	800697a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00b      	beq.n	800697a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2201      	movs	r2, #1
 8006966:	601a      	str	r2, [r3, #0]
 8006968:	e007      	b.n	800697a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800696a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800696e:	3301      	adds	r3, #1
 8006970:	b2db      	uxtb	r3, r3
 8006972:	b25a      	sxtb	r2, r3
 8006974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006976:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800697a:	2301      	movs	r3, #1
 800697c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800697e:	e001      	b.n	8006984 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006980:	2300      	movs	r3, #0
 8006982:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006986:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800698e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006992:	4618      	mov	r0, r3
 8006994:	3740      	adds	r7, #64	; 0x40
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b08e      	sub	sp, #56	; 0x38
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
 80069a2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80069a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10a      	bne.n	80069c4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80069ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b2:	f383 8811 	msr	BASEPRI, r3
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	623b      	str	r3, [r7, #32]
}
 80069c0:	bf00      	nop
 80069c2:	e7fe      	b.n	80069c2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80069c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00a      	beq.n	80069e2 <xQueueGiveFromISR+0x48>
	__asm volatile
 80069cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d0:	f383 8811 	msr	BASEPRI, r3
 80069d4:	f3bf 8f6f 	isb	sy
 80069d8:	f3bf 8f4f 	dsb	sy
 80069dc:	61fb      	str	r3, [r7, #28]
}
 80069de:	bf00      	nop
 80069e0:	e7fe      	b.n	80069e0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80069e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d103      	bne.n	80069f2 <xQueueGiveFromISR+0x58>
 80069ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d101      	bne.n	80069f6 <xQueueGiveFromISR+0x5c>
 80069f2:	2301      	movs	r3, #1
 80069f4:	e000      	b.n	80069f8 <xQueueGiveFromISR+0x5e>
 80069f6:	2300      	movs	r3, #0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d10a      	bne.n	8006a12 <xQueueGiveFromISR+0x78>
	__asm volatile
 80069fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a00:	f383 8811 	msr	BASEPRI, r3
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	61bb      	str	r3, [r7, #24]
}
 8006a0e:	bf00      	nop
 8006a10:	e7fe      	b.n	8006a10 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a12:	f002 fa09 	bl	8008e28 <vPortValidateInterruptPriority>
	__asm volatile
 8006a16:	f3ef 8211 	mrs	r2, BASEPRI
 8006a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1e:	f383 8811 	msr	BASEPRI, r3
 8006a22:	f3bf 8f6f 	isb	sy
 8006a26:	f3bf 8f4f 	dsb	sy
 8006a2a:	617a      	str	r2, [r7, #20]
 8006a2c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006a2e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d22b      	bcs.n	8006a9a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4e:	1c5a      	adds	r2, r3, #1
 8006a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a52:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006a54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a5c:	d112      	bne.n	8006a84 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d016      	beq.n	8006a94 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a68:	3324      	adds	r3, #36	; 0x24
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f001 f8d4 	bl	8007c18 <xTaskRemoveFromEventList>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00e      	beq.n	8006a94 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00b      	beq.n	8006a94 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	601a      	str	r2, [r3, #0]
 8006a82:	e007      	b.n	8006a94 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006a84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a88:	3301      	adds	r3, #1
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	b25a      	sxtb	r2, r3
 8006a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006a94:	2301      	movs	r3, #1
 8006a96:	637b      	str	r3, [r7, #52]	; 0x34
 8006a98:	e001      	b.n	8006a9e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f383 8811 	msr	BASEPRI, r3
}
 8006aa8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3738      	adds	r7, #56	; 0x38
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b08c      	sub	sp, #48	; 0x30
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d10a      	bne.n	8006ae4 <xQueueReceive+0x30>
	__asm volatile
 8006ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad2:	f383 8811 	msr	BASEPRI, r3
 8006ad6:	f3bf 8f6f 	isb	sy
 8006ada:	f3bf 8f4f 	dsb	sy
 8006ade:	623b      	str	r3, [r7, #32]
}
 8006ae0:	bf00      	nop
 8006ae2:	e7fe      	b.n	8006ae2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d103      	bne.n	8006af2 <xQueueReceive+0x3e>
 8006aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d101      	bne.n	8006af6 <xQueueReceive+0x42>
 8006af2:	2301      	movs	r3, #1
 8006af4:	e000      	b.n	8006af8 <xQueueReceive+0x44>
 8006af6:	2300      	movs	r3, #0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10a      	bne.n	8006b12 <xQueueReceive+0x5e>
	__asm volatile
 8006afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b00:	f383 8811 	msr	BASEPRI, r3
 8006b04:	f3bf 8f6f 	isb	sy
 8006b08:	f3bf 8f4f 	dsb	sy
 8006b0c:	61fb      	str	r3, [r7, #28]
}
 8006b0e:	bf00      	nop
 8006b10:	e7fe      	b.n	8006b10 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b12:	f001 fa4f 	bl	8007fb4 <xTaskGetSchedulerState>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d102      	bne.n	8006b22 <xQueueReceive+0x6e>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d101      	bne.n	8006b26 <xQueueReceive+0x72>
 8006b22:	2301      	movs	r3, #1
 8006b24:	e000      	b.n	8006b28 <xQueueReceive+0x74>
 8006b26:	2300      	movs	r3, #0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d10a      	bne.n	8006b42 <xQueueReceive+0x8e>
	__asm volatile
 8006b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b30:	f383 8811 	msr	BASEPRI, r3
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	f3bf 8f4f 	dsb	sy
 8006b3c:	61bb      	str	r3, [r7, #24]
}
 8006b3e:	bf00      	nop
 8006b40:	e7fe      	b.n	8006b40 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b42:	f002 f88f 	bl	8008c64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d01f      	beq.n	8006b92 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006b52:	68b9      	ldr	r1, [r7, #8]
 8006b54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b56:	f000 fabe 	bl	80070d6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5c:	1e5a      	subs	r2, r3, #1
 8006b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b60:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00f      	beq.n	8006b8a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6c:	3310      	adds	r3, #16
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f001 f852 	bl	8007c18 <xTaskRemoveFromEventList>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d007      	beq.n	8006b8a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006b7a:	4b3d      	ldr	r3, [pc, #244]	; (8006c70 <xQueueReceive+0x1bc>)
 8006b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b80:	601a      	str	r2, [r3, #0]
 8006b82:	f3bf 8f4f 	dsb	sy
 8006b86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006b8a:	f002 f89b 	bl	8008cc4 <vPortExitCritical>
				return pdPASS;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e069      	b.n	8006c66 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d103      	bne.n	8006ba0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b98:	f002 f894 	bl	8008cc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	e062      	b.n	8006c66 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d106      	bne.n	8006bb4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ba6:	f107 0310 	add.w	r3, r7, #16
 8006baa:	4618      	mov	r0, r3
 8006bac:	f001 f898 	bl	8007ce0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006bb4:	f002 f886 	bl	8008cc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006bb8:	f000 fdf8 	bl	80077ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006bbc:	f002 f852 	bl	8008c64 <vPortEnterCritical>
 8006bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006bc6:	b25b      	sxtb	r3, r3
 8006bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bcc:	d103      	bne.n	8006bd6 <xQueueReceive+0x122>
 8006bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bdc:	b25b      	sxtb	r3, r3
 8006bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be2:	d103      	bne.n	8006bec <xQueueReceive+0x138>
 8006be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bec:	f002 f86a 	bl	8008cc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006bf0:	1d3a      	adds	r2, r7, #4
 8006bf2:	f107 0310 	add.w	r3, r7, #16
 8006bf6:	4611      	mov	r1, r2
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f001 f887 	bl	8007d0c <xTaskCheckForTimeOut>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d123      	bne.n	8006c4c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c06:	f000 fade 	bl	80071c6 <prvIsQueueEmpty>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d017      	beq.n	8006c40 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c12:	3324      	adds	r3, #36	; 0x24
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	4611      	mov	r1, r2
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f000 ffad 	bl	8007b78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c20:	f000 fa7f 	bl	8007122 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c24:	f000 fdd0 	bl	80077c8 <xTaskResumeAll>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d189      	bne.n	8006b42 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006c2e:	4b10      	ldr	r3, [pc, #64]	; (8006c70 <xQueueReceive+0x1bc>)
 8006c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c34:	601a      	str	r2, [r3, #0]
 8006c36:	f3bf 8f4f 	dsb	sy
 8006c3a:	f3bf 8f6f 	isb	sy
 8006c3e:	e780      	b.n	8006b42 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006c40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c42:	f000 fa6e 	bl	8007122 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c46:	f000 fdbf 	bl	80077c8 <xTaskResumeAll>
 8006c4a:	e77a      	b.n	8006b42 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006c4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c4e:	f000 fa68 	bl	8007122 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c52:	f000 fdb9 	bl	80077c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c58:	f000 fab5 	bl	80071c6 <prvIsQueueEmpty>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f43f af6f 	beq.w	8006b42 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006c64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3730      	adds	r7, #48	; 0x30
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	e000ed04 	.word	0xe000ed04

08006c74 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b08e      	sub	sp, #56	; 0x38
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006c86:	2300      	movs	r3, #0
 8006c88:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d10a      	bne.n	8006ca6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c94:	f383 8811 	msr	BASEPRI, r3
 8006c98:	f3bf 8f6f 	isb	sy
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	623b      	str	r3, [r7, #32]
}
 8006ca2:	bf00      	nop
 8006ca4:	e7fe      	b.n	8006ca4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00a      	beq.n	8006cc4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb2:	f383 8811 	msr	BASEPRI, r3
 8006cb6:	f3bf 8f6f 	isb	sy
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	61fb      	str	r3, [r7, #28]
}
 8006cc0:	bf00      	nop
 8006cc2:	e7fe      	b.n	8006cc2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006cc4:	f001 f976 	bl	8007fb4 <xTaskGetSchedulerState>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d102      	bne.n	8006cd4 <xQueueSemaphoreTake+0x60>
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d101      	bne.n	8006cd8 <xQueueSemaphoreTake+0x64>
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e000      	b.n	8006cda <xQueueSemaphoreTake+0x66>
 8006cd8:	2300      	movs	r3, #0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d10a      	bne.n	8006cf4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce2:	f383 8811 	msr	BASEPRI, r3
 8006ce6:	f3bf 8f6f 	isb	sy
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	61bb      	str	r3, [r7, #24]
}
 8006cf0:	bf00      	nop
 8006cf2:	e7fe      	b.n	8006cf2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006cf4:	f001 ffb6 	bl	8008c64 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cfc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d024      	beq.n	8006d4e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d06:	1e5a      	subs	r2, r3, #1
 8006d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d0a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d104      	bne.n	8006d1e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006d14:	f001 fac4 	bl	80082a0 <pvTaskIncrementMutexHeldCount>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d1c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00f      	beq.n	8006d46 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d28:	3310      	adds	r3, #16
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f000 ff74 	bl	8007c18 <xTaskRemoveFromEventList>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d007      	beq.n	8006d46 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006d36:	4b54      	ldr	r3, [pc, #336]	; (8006e88 <xQueueSemaphoreTake+0x214>)
 8006d38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d3c:	601a      	str	r2, [r3, #0]
 8006d3e:	f3bf 8f4f 	dsb	sy
 8006d42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006d46:	f001 ffbd 	bl	8008cc4 <vPortExitCritical>
				return pdPASS;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e097      	b.n	8006e7e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d111      	bne.n	8006d78 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00a      	beq.n	8006d70 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5e:	f383 8811 	msr	BASEPRI, r3
 8006d62:	f3bf 8f6f 	isb	sy
 8006d66:	f3bf 8f4f 	dsb	sy
 8006d6a:	617b      	str	r3, [r7, #20]
}
 8006d6c:	bf00      	nop
 8006d6e:	e7fe      	b.n	8006d6e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006d70:	f001 ffa8 	bl	8008cc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006d74:	2300      	movs	r3, #0
 8006d76:	e082      	b.n	8006e7e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d106      	bne.n	8006d8c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d7e:	f107 030c 	add.w	r3, r7, #12
 8006d82:	4618      	mov	r0, r3
 8006d84:	f000 ffac 	bl	8007ce0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d8c:	f001 ff9a 	bl	8008cc4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d90:	f000 fd0c 	bl	80077ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d94:	f001 ff66 	bl	8008c64 <vPortEnterCritical>
 8006d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d9e:	b25b      	sxtb	r3, r3
 8006da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da4:	d103      	bne.n	8006dae <xQueueSemaphoreTake+0x13a>
 8006da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006db4:	b25b      	sxtb	r3, r3
 8006db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dba:	d103      	bne.n	8006dc4 <xQueueSemaphoreTake+0x150>
 8006dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006dc4:	f001 ff7e 	bl	8008cc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006dc8:	463a      	mov	r2, r7
 8006dca:	f107 030c 	add.w	r3, r7, #12
 8006dce:	4611      	mov	r1, r2
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f000 ff9b 	bl	8007d0c <xTaskCheckForTimeOut>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d132      	bne.n	8006e42 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ddc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006dde:	f000 f9f2 	bl	80071c6 <prvIsQueueEmpty>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d026      	beq.n	8006e36 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d109      	bne.n	8006e04 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006df0:	f001 ff38 	bl	8008c64 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f001 f8f9 	bl	8007ff0 <xTaskPriorityInherit>
 8006dfe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006e00:	f001 ff60 	bl	8008cc4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e06:	3324      	adds	r3, #36	; 0x24
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	4611      	mov	r1, r2
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f000 feb3 	bl	8007b78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e14:	f000 f985 	bl	8007122 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e18:	f000 fcd6 	bl	80077c8 <xTaskResumeAll>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f47f af68 	bne.w	8006cf4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006e24:	4b18      	ldr	r3, [pc, #96]	; (8006e88 <xQueueSemaphoreTake+0x214>)
 8006e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e2a:	601a      	str	r2, [r3, #0]
 8006e2c:	f3bf 8f4f 	dsb	sy
 8006e30:	f3bf 8f6f 	isb	sy
 8006e34:	e75e      	b.n	8006cf4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006e36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e38:	f000 f973 	bl	8007122 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e3c:	f000 fcc4 	bl	80077c8 <xTaskResumeAll>
 8006e40:	e758      	b.n	8006cf4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006e42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e44:	f000 f96d 	bl	8007122 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e48:	f000 fcbe 	bl	80077c8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e4e:	f000 f9ba 	bl	80071c6 <prvIsQueueEmpty>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f43f af4d 	beq.w	8006cf4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d00d      	beq.n	8006e7c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006e60:	f001 ff00 	bl	8008c64 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006e64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e66:	f000 f8b4 	bl	8006fd2 <prvGetDisinheritPriorityAfterTimeout>
 8006e6a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e72:	4618      	mov	r0, r3
 8006e74:	f001 f992 	bl	800819c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006e78:	f001 ff24 	bl	8008cc4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006e7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3738      	adds	r7, #56	; 0x38
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	e000ed04 	.word	0xe000ed04

08006e8c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b08e      	sub	sp, #56	; 0x38
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d10a      	bne.n	8006eb8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea6:	f383 8811 	msr	BASEPRI, r3
 8006eaa:	f3bf 8f6f 	isb	sy
 8006eae:	f3bf 8f4f 	dsb	sy
 8006eb2:	623b      	str	r3, [r7, #32]
}
 8006eb4:	bf00      	nop
 8006eb6:	e7fe      	b.n	8006eb6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d103      	bne.n	8006ec6 <xQueueReceiveFromISR+0x3a>
 8006ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d101      	bne.n	8006eca <xQueueReceiveFromISR+0x3e>
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e000      	b.n	8006ecc <xQueueReceiveFromISR+0x40>
 8006eca:	2300      	movs	r3, #0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d10a      	bne.n	8006ee6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed4:	f383 8811 	msr	BASEPRI, r3
 8006ed8:	f3bf 8f6f 	isb	sy
 8006edc:	f3bf 8f4f 	dsb	sy
 8006ee0:	61fb      	str	r3, [r7, #28]
}
 8006ee2:	bf00      	nop
 8006ee4:	e7fe      	b.n	8006ee4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ee6:	f001 ff9f 	bl	8008e28 <vPortValidateInterruptPriority>
	__asm volatile
 8006eea:	f3ef 8211 	mrs	r2, BASEPRI
 8006eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef2:	f383 8811 	msr	BASEPRI, r3
 8006ef6:	f3bf 8f6f 	isb	sy
 8006efa:	f3bf 8f4f 	dsb	sy
 8006efe:	61ba      	str	r2, [r7, #24]
 8006f00:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006f02:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f04:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d02f      	beq.n	8006f72 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f1c:	68b9      	ldr	r1, [r7, #8]
 8006f1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f20:	f000 f8d9 	bl	80070d6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f26:	1e5a      	subs	r2, r3, #1
 8006f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006f2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f34:	d112      	bne.n	8006f5c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d016      	beq.n	8006f6c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f40:	3310      	adds	r3, #16
 8006f42:	4618      	mov	r0, r3
 8006f44:	f000 fe68 	bl	8007c18 <xTaskRemoveFromEventList>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d00e      	beq.n	8006f6c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d00b      	beq.n	8006f6c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	601a      	str	r2, [r3, #0]
 8006f5a:	e007      	b.n	8006f6c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f60:	3301      	adds	r3, #1
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	b25a      	sxtb	r2, r3
 8006f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	637b      	str	r3, [r7, #52]	; 0x34
 8006f70:	e001      	b.n	8006f76 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006f72:	2300      	movs	r3, #0
 8006f74:	637b      	str	r3, [r7, #52]	; 0x34
 8006f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f78:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	f383 8811 	msr	BASEPRI, r3
}
 8006f80:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3738      	adds	r7, #56	; 0x38
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d10a      	bne.n	8006fb4 <vQueueDelete+0x28>
	__asm volatile
 8006f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa2:	f383 8811 	msr	BASEPRI, r3
 8006fa6:	f3bf 8f6f 	isb	sy
 8006faa:	f3bf 8f4f 	dsb	sy
 8006fae:	60bb      	str	r3, [r7, #8]
}
 8006fb0:	bf00      	nop
 8006fb2:	e7fe      	b.n	8006fb2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	f000 f95f 	bl	8007278 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d102      	bne.n	8006fca <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	f002 f83b 	bl	8009040 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006fca:	bf00      	nop
 8006fcc:	3710      	adds	r7, #16
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006fd2:	b480      	push	{r7}
 8006fd4:	b085      	sub	sp, #20
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d006      	beq.n	8006ff0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006fec:	60fb      	str	r3, [r7, #12]
 8006fee:	e001      	b.n	8006ff4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
	}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3714      	adds	r7, #20
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr

08007002 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b086      	sub	sp, #24
 8007006:	af00      	add	r7, sp, #0
 8007008:	60f8      	str	r0, [r7, #12]
 800700a:	60b9      	str	r1, [r7, #8]
 800700c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800700e:	2300      	movs	r3, #0
 8007010:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007016:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701c:	2b00      	cmp	r3, #0
 800701e:	d10d      	bne.n	800703c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d14d      	bne.n	80070c4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	4618      	mov	r0, r3
 800702e:	f001 f847 	bl	80080c0 <xTaskPriorityDisinherit>
 8007032:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2200      	movs	r2, #0
 8007038:	609a      	str	r2, [r3, #8]
 800703a:	e043      	b.n	80070c4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d119      	bne.n	8007076 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6858      	ldr	r0, [r3, #4]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704a:	461a      	mov	r2, r3
 800704c:	68b9      	ldr	r1, [r7, #8]
 800704e:	f010 f875 	bl	801713c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	685a      	ldr	r2, [r3, #4]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705a:	441a      	add	r2, r3
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	685a      	ldr	r2, [r3, #4]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	429a      	cmp	r2, r3
 800706a:	d32b      	bcc.n	80070c4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	605a      	str	r2, [r3, #4]
 8007074:	e026      	b.n	80070c4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	68d8      	ldr	r0, [r3, #12]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707e:	461a      	mov	r2, r3
 8007080:	68b9      	ldr	r1, [r7, #8]
 8007082:	f010 f85b 	bl	801713c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	68da      	ldr	r2, [r3, #12]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708e:	425b      	negs	r3, r3
 8007090:	441a      	add	r2, r3
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	68da      	ldr	r2, [r3, #12]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d207      	bcs.n	80070b2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	689a      	ldr	r2, [r3, #8]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070aa:	425b      	negs	r3, r3
 80070ac:	441a      	add	r2, r3
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	d105      	bne.n	80070c4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d002      	beq.n	80070c4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	3b01      	subs	r3, #1
 80070c2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	1c5a      	adds	r2, r3, #1
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80070cc:	697b      	ldr	r3, [r7, #20]
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3718      	adds	r7, #24
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b082      	sub	sp, #8
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
 80070de:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d018      	beq.n	800711a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	68da      	ldr	r2, [r3, #12]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f0:	441a      	add	r2, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	68da      	ldr	r2, [r3, #12]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d303      	bcc.n	800710a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	68d9      	ldr	r1, [r3, #12]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007112:	461a      	mov	r2, r3
 8007114:	6838      	ldr	r0, [r7, #0]
 8007116:	f010 f811 	bl	801713c <memcpy>
	}
}
 800711a:	bf00      	nop
 800711c:	3708      	adds	r7, #8
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b084      	sub	sp, #16
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800712a:	f001 fd9b 	bl	8008c64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007134:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007136:	e011      	b.n	800715c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713c:	2b00      	cmp	r3, #0
 800713e:	d012      	beq.n	8007166 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	3324      	adds	r3, #36	; 0x24
 8007144:	4618      	mov	r0, r3
 8007146:	f000 fd67 	bl	8007c18 <xTaskRemoveFromEventList>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d001      	beq.n	8007154 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007150:	f000 fe3e 	bl	8007dd0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007154:	7bfb      	ldrb	r3, [r7, #15]
 8007156:	3b01      	subs	r3, #1
 8007158:	b2db      	uxtb	r3, r3
 800715a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800715c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007160:	2b00      	cmp	r3, #0
 8007162:	dce9      	bgt.n	8007138 <prvUnlockQueue+0x16>
 8007164:	e000      	b.n	8007168 <prvUnlockQueue+0x46>
					break;
 8007166:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	22ff      	movs	r2, #255	; 0xff
 800716c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007170:	f001 fda8 	bl	8008cc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007174:	f001 fd76 	bl	8008c64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800717e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007180:	e011      	b.n	80071a6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d012      	beq.n	80071b0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	3310      	adds	r3, #16
 800718e:	4618      	mov	r0, r3
 8007190:	f000 fd42 	bl	8007c18 <xTaskRemoveFromEventList>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d001      	beq.n	800719e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800719a:	f000 fe19 	bl	8007dd0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800719e:	7bbb      	ldrb	r3, [r7, #14]
 80071a0:	3b01      	subs	r3, #1
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80071a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	dce9      	bgt.n	8007182 <prvUnlockQueue+0x60>
 80071ae:	e000      	b.n	80071b2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80071b0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	22ff      	movs	r2, #255	; 0xff
 80071b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80071ba:	f001 fd83 	bl	8008cc4 <vPortExitCritical>
}
 80071be:	bf00      	nop
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b084      	sub	sp, #16
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071ce:	f001 fd49 	bl	8008c64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d102      	bne.n	80071e0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80071da:	2301      	movs	r3, #1
 80071dc:	60fb      	str	r3, [r7, #12]
 80071de:	e001      	b.n	80071e4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80071e0:	2300      	movs	r3, #0
 80071e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80071e4:	f001 fd6e 	bl	8008cc4 <vPortExitCritical>

	return xReturn;
 80071e8:	68fb      	ldr	r3, [r7, #12]
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}

080071f2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80071f2:	b580      	push	{r7, lr}
 80071f4:	b084      	sub	sp, #16
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071fa:	f001 fd33 	bl	8008c64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007206:	429a      	cmp	r2, r3
 8007208:	d102      	bne.n	8007210 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800720a:	2301      	movs	r3, #1
 800720c:	60fb      	str	r3, [r7, #12]
 800720e:	e001      	b.n	8007214 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007210:	2300      	movs	r3, #0
 8007212:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007214:	f001 fd56 	bl	8008cc4 <vPortExitCritical>

	return xReturn;
 8007218:	68fb      	ldr	r3, [r7, #12]
}
 800721a:	4618      	mov	r0, r3
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
	...

08007224 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007224:	b480      	push	{r7}
 8007226:	b085      	sub	sp, #20
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800722e:	2300      	movs	r3, #0
 8007230:	60fb      	str	r3, [r7, #12]
 8007232:	e014      	b.n	800725e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007234:	4a0f      	ldr	r2, [pc, #60]	; (8007274 <vQueueAddToRegistry+0x50>)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d10b      	bne.n	8007258 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007240:	490c      	ldr	r1, [pc, #48]	; (8007274 <vQueueAddToRegistry+0x50>)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	683a      	ldr	r2, [r7, #0]
 8007246:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800724a:	4a0a      	ldr	r2, [pc, #40]	; (8007274 <vQueueAddToRegistry+0x50>)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	00db      	lsls	r3, r3, #3
 8007250:	4413      	add	r3, r2
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007256:	e006      	b.n	8007266 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	3301      	adds	r3, #1
 800725c:	60fb      	str	r3, [r7, #12]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2b07      	cmp	r3, #7
 8007262:	d9e7      	bls.n	8007234 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007264:	bf00      	nop
 8007266:	bf00      	nop
 8007268:	3714      	adds	r7, #20
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	200059a4 	.word	0x200059a4

08007278 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007278:	b480      	push	{r7}
 800727a:	b085      	sub	sp, #20
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007280:	2300      	movs	r3, #0
 8007282:	60fb      	str	r3, [r7, #12]
 8007284:	e016      	b.n	80072b4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007286:	4a10      	ldr	r2, [pc, #64]	; (80072c8 <vQueueUnregisterQueue+0x50>)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	00db      	lsls	r3, r3, #3
 800728c:	4413      	add	r3, r2
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	429a      	cmp	r2, r3
 8007294:	d10b      	bne.n	80072ae <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007296:	4a0c      	ldr	r2, [pc, #48]	; (80072c8 <vQueueUnregisterQueue+0x50>)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2100      	movs	r1, #0
 800729c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80072a0:	4a09      	ldr	r2, [pc, #36]	; (80072c8 <vQueueUnregisterQueue+0x50>)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	00db      	lsls	r3, r3, #3
 80072a6:	4413      	add	r3, r2
 80072a8:	2200      	movs	r2, #0
 80072aa:	605a      	str	r2, [r3, #4]
				break;
 80072ac:	e006      	b.n	80072bc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	3301      	adds	r3, #1
 80072b2:	60fb      	str	r3, [r7, #12]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2b07      	cmp	r3, #7
 80072b8:	d9e5      	bls.n	8007286 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80072ba:	bf00      	nop
 80072bc:	bf00      	nop
 80072be:	3714      	adds	r7, #20
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr
 80072c8:	200059a4 	.word	0x200059a4

080072cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b086      	sub	sp, #24
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80072dc:	f001 fcc2 	bl	8008c64 <vPortEnterCritical>
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072e6:	b25b      	sxtb	r3, r3
 80072e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ec:	d103      	bne.n	80072f6 <vQueueWaitForMessageRestricted+0x2a>
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072fc:	b25b      	sxtb	r3, r3
 80072fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007302:	d103      	bne.n	800730c <vQueueWaitForMessageRestricted+0x40>
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800730c:	f001 fcda 	bl	8008cc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007314:	2b00      	cmp	r3, #0
 8007316:	d106      	bne.n	8007326 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	3324      	adds	r3, #36	; 0x24
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	68b9      	ldr	r1, [r7, #8]
 8007320:	4618      	mov	r0, r3
 8007322:	f000 fc4d 	bl	8007bc0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007326:	6978      	ldr	r0, [r7, #20]
 8007328:	f7ff fefb 	bl	8007122 <prvUnlockQueue>
	}
 800732c:	bf00      	nop
 800732e:	3718      	adds	r7, #24
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007334:	b580      	push	{r7, lr}
 8007336:	b08e      	sub	sp, #56	; 0x38
 8007338:	af04      	add	r7, sp, #16
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
 8007340:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007344:	2b00      	cmp	r3, #0
 8007346:	d10a      	bne.n	800735e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734c:	f383 8811 	msr	BASEPRI, r3
 8007350:	f3bf 8f6f 	isb	sy
 8007354:	f3bf 8f4f 	dsb	sy
 8007358:	623b      	str	r3, [r7, #32]
}
 800735a:	bf00      	nop
 800735c:	e7fe      	b.n	800735c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800735e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10a      	bne.n	800737a <xTaskCreateStatic+0x46>
	__asm volatile
 8007364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007368:	f383 8811 	msr	BASEPRI, r3
 800736c:	f3bf 8f6f 	isb	sy
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	61fb      	str	r3, [r7, #28]
}
 8007376:	bf00      	nop
 8007378:	e7fe      	b.n	8007378 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800737a:	235c      	movs	r3, #92	; 0x5c
 800737c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	2b5c      	cmp	r3, #92	; 0x5c
 8007382:	d00a      	beq.n	800739a <xTaskCreateStatic+0x66>
	__asm volatile
 8007384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007388:	f383 8811 	msr	BASEPRI, r3
 800738c:	f3bf 8f6f 	isb	sy
 8007390:	f3bf 8f4f 	dsb	sy
 8007394:	61bb      	str	r3, [r7, #24]
}
 8007396:	bf00      	nop
 8007398:	e7fe      	b.n	8007398 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800739a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800739c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d01e      	beq.n	80073e0 <xTaskCreateStatic+0xac>
 80073a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d01b      	beq.n	80073e0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80073a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80073ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80073b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b4:	2202      	movs	r2, #2
 80073b6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80073ba:	2300      	movs	r3, #0
 80073bc:	9303      	str	r3, [sp, #12]
 80073be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c0:	9302      	str	r3, [sp, #8]
 80073c2:	f107 0314 	add.w	r3, r7, #20
 80073c6:	9301      	str	r3, [sp, #4]
 80073c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ca:	9300      	str	r3, [sp, #0]
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	68b9      	ldr	r1, [r7, #8]
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	f000 f850 	bl	8007478 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073da:	f000 f8dd 	bl	8007598 <prvAddNewTaskToReadyList>
 80073de:	e001      	b.n	80073e4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80073e0:	2300      	movs	r3, #0
 80073e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80073e4:	697b      	ldr	r3, [r7, #20]
	}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3728      	adds	r7, #40	; 0x28
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b08c      	sub	sp, #48	; 0x30
 80073f2:	af04      	add	r7, sp, #16
 80073f4:	60f8      	str	r0, [r7, #12]
 80073f6:	60b9      	str	r1, [r7, #8]
 80073f8:	603b      	str	r3, [r7, #0]
 80073fa:	4613      	mov	r3, r2
 80073fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80073fe:	88fb      	ldrh	r3, [r7, #6]
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	4618      	mov	r0, r3
 8007404:	f001 fd50 	bl	8008ea8 <pvPortMalloc>
 8007408:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d00e      	beq.n	800742e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007410:	205c      	movs	r0, #92	; 0x5c
 8007412:	f001 fd49 	bl	8008ea8 <pvPortMalloc>
 8007416:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d003      	beq.n	8007426 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	697a      	ldr	r2, [r7, #20]
 8007422:	631a      	str	r2, [r3, #48]	; 0x30
 8007424:	e005      	b.n	8007432 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007426:	6978      	ldr	r0, [r7, #20]
 8007428:	f001 fe0a 	bl	8009040 <vPortFree>
 800742c:	e001      	b.n	8007432 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800742e:	2300      	movs	r3, #0
 8007430:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d017      	beq.n	8007468 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007440:	88fa      	ldrh	r2, [r7, #6]
 8007442:	2300      	movs	r3, #0
 8007444:	9303      	str	r3, [sp, #12]
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	9302      	str	r3, [sp, #8]
 800744a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800744c:	9301      	str	r3, [sp, #4]
 800744e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007450:	9300      	str	r3, [sp, #0]
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	68b9      	ldr	r1, [r7, #8]
 8007456:	68f8      	ldr	r0, [r7, #12]
 8007458:	f000 f80e 	bl	8007478 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800745c:	69f8      	ldr	r0, [r7, #28]
 800745e:	f000 f89b 	bl	8007598 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007462:	2301      	movs	r3, #1
 8007464:	61bb      	str	r3, [r7, #24]
 8007466:	e002      	b.n	800746e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007468:	f04f 33ff 	mov.w	r3, #4294967295
 800746c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800746e:	69bb      	ldr	r3, [r7, #24]
	}
 8007470:	4618      	mov	r0, r3
 8007472:	3720      	adds	r7, #32
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b088      	sub	sp, #32
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]
 8007484:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007488:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	461a      	mov	r2, r3
 8007490:	21a5      	movs	r1, #165	; 0xa5
 8007492:	f00f fe61 	bl	8017158 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007498:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80074a0:	3b01      	subs	r3, #1
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	4413      	add	r3, r2
 80074a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	f023 0307 	bic.w	r3, r3, #7
 80074ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	f003 0307 	and.w	r3, r3, #7
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00a      	beq.n	80074d0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80074ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074be:	f383 8811 	msr	BASEPRI, r3
 80074c2:	f3bf 8f6f 	isb	sy
 80074c6:	f3bf 8f4f 	dsb	sy
 80074ca:	617b      	str	r3, [r7, #20]
}
 80074cc:	bf00      	nop
 80074ce:	e7fe      	b.n	80074ce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d01f      	beq.n	8007516 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074d6:	2300      	movs	r3, #0
 80074d8:	61fb      	str	r3, [r7, #28]
 80074da:	e012      	b.n	8007502 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80074dc:	68ba      	ldr	r2, [r7, #8]
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	4413      	add	r3, r2
 80074e2:	7819      	ldrb	r1, [r3, #0]
 80074e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	4413      	add	r3, r2
 80074ea:	3334      	adds	r3, #52	; 0x34
 80074ec:	460a      	mov	r2, r1
 80074ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	4413      	add	r3, r2
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d006      	beq.n	800750a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	3301      	adds	r3, #1
 8007500:	61fb      	str	r3, [r7, #28]
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	2b0f      	cmp	r3, #15
 8007506:	d9e9      	bls.n	80074dc <prvInitialiseNewTask+0x64>
 8007508:	e000      	b.n	800750c <prvInitialiseNewTask+0x94>
			{
				break;
 800750a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800750c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750e:	2200      	movs	r2, #0
 8007510:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007514:	e003      	b.n	800751e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007518:	2200      	movs	r2, #0
 800751a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800751e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007520:	2b37      	cmp	r3, #55	; 0x37
 8007522:	d901      	bls.n	8007528 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007524:	2337      	movs	r3, #55	; 0x37
 8007526:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800752c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800752e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007530:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007532:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007536:	2200      	movs	r2, #0
 8007538:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800753a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753c:	3304      	adds	r3, #4
 800753e:	4618      	mov	r0, r3
 8007540:	f7fe fda0 	bl	8006084 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007546:	3318      	adds	r3, #24
 8007548:	4618      	mov	r0, r3
 800754a:	f7fe fd9b 	bl	8006084 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800754e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007552:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007556:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800755a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800755e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007562:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007566:	2200      	movs	r2, #0
 8007568:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800756a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756c:	2200      	movs	r2, #0
 800756e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007572:	683a      	ldr	r2, [r7, #0]
 8007574:	68f9      	ldr	r1, [r7, #12]
 8007576:	69b8      	ldr	r0, [r7, #24]
 8007578:	f001 fa48 	bl	8008a0c <pxPortInitialiseStack>
 800757c:	4602      	mov	r2, r0
 800757e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007580:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007584:	2b00      	cmp	r3, #0
 8007586:	d002      	beq.n	800758e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800758c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800758e:	bf00      	nop
 8007590:	3720      	adds	r7, #32
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
	...

08007598 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80075a0:	f001 fb60 	bl	8008c64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80075a4:	4b2d      	ldr	r3, [pc, #180]	; (800765c <prvAddNewTaskToReadyList+0xc4>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	3301      	adds	r3, #1
 80075aa:	4a2c      	ldr	r2, [pc, #176]	; (800765c <prvAddNewTaskToReadyList+0xc4>)
 80075ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80075ae:	4b2c      	ldr	r3, [pc, #176]	; (8007660 <prvAddNewTaskToReadyList+0xc8>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d109      	bne.n	80075ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80075b6:	4a2a      	ldr	r2, [pc, #168]	; (8007660 <prvAddNewTaskToReadyList+0xc8>)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80075bc:	4b27      	ldr	r3, [pc, #156]	; (800765c <prvAddNewTaskToReadyList+0xc4>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d110      	bne.n	80075e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80075c4:	f000 fc28 	bl	8007e18 <prvInitialiseTaskLists>
 80075c8:	e00d      	b.n	80075e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80075ca:	4b26      	ldr	r3, [pc, #152]	; (8007664 <prvAddNewTaskToReadyList+0xcc>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d109      	bne.n	80075e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80075d2:	4b23      	ldr	r3, [pc, #140]	; (8007660 <prvAddNewTaskToReadyList+0xc8>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075dc:	429a      	cmp	r2, r3
 80075de:	d802      	bhi.n	80075e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80075e0:	4a1f      	ldr	r2, [pc, #124]	; (8007660 <prvAddNewTaskToReadyList+0xc8>)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80075e6:	4b20      	ldr	r3, [pc, #128]	; (8007668 <prvAddNewTaskToReadyList+0xd0>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	3301      	adds	r3, #1
 80075ec:	4a1e      	ldr	r2, [pc, #120]	; (8007668 <prvAddNewTaskToReadyList+0xd0>)
 80075ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80075f0:	4b1d      	ldr	r3, [pc, #116]	; (8007668 <prvAddNewTaskToReadyList+0xd0>)
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075fc:	4b1b      	ldr	r3, [pc, #108]	; (800766c <prvAddNewTaskToReadyList+0xd4>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	429a      	cmp	r2, r3
 8007602:	d903      	bls.n	800760c <prvAddNewTaskToReadyList+0x74>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007608:	4a18      	ldr	r2, [pc, #96]	; (800766c <prvAddNewTaskToReadyList+0xd4>)
 800760a:	6013      	str	r3, [r2, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007610:	4613      	mov	r3, r2
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	4413      	add	r3, r2
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	4a15      	ldr	r2, [pc, #84]	; (8007670 <prvAddNewTaskToReadyList+0xd8>)
 800761a:	441a      	add	r2, r3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	3304      	adds	r3, #4
 8007620:	4619      	mov	r1, r3
 8007622:	4610      	mov	r0, r2
 8007624:	f7fe fd3b 	bl	800609e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007628:	f001 fb4c 	bl	8008cc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800762c:	4b0d      	ldr	r3, [pc, #52]	; (8007664 <prvAddNewTaskToReadyList+0xcc>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00e      	beq.n	8007652 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007634:	4b0a      	ldr	r3, [pc, #40]	; (8007660 <prvAddNewTaskToReadyList+0xc8>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763e:	429a      	cmp	r2, r3
 8007640:	d207      	bcs.n	8007652 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007642:	4b0c      	ldr	r3, [pc, #48]	; (8007674 <prvAddNewTaskToReadyList+0xdc>)
 8007644:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007648:	601a      	str	r2, [r3, #0]
 800764a:	f3bf 8f4f 	dsb	sy
 800764e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007652:	bf00      	nop
 8007654:	3708      	adds	r7, #8
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	20005eb8 	.word	0x20005eb8
 8007660:	200059e4 	.word	0x200059e4
 8007664:	20005ec4 	.word	0x20005ec4
 8007668:	20005ed4 	.word	0x20005ed4
 800766c:	20005ec0 	.word	0x20005ec0
 8007670:	200059e8 	.word	0x200059e8
 8007674:	e000ed04 	.word	0xe000ed04

08007678 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007680:	2300      	movs	r3, #0
 8007682:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d017      	beq.n	80076ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800768a:	4b13      	ldr	r3, [pc, #76]	; (80076d8 <vTaskDelay+0x60>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d00a      	beq.n	80076a8 <vTaskDelay+0x30>
	__asm volatile
 8007692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007696:	f383 8811 	msr	BASEPRI, r3
 800769a:	f3bf 8f6f 	isb	sy
 800769e:	f3bf 8f4f 	dsb	sy
 80076a2:	60bb      	str	r3, [r7, #8]
}
 80076a4:	bf00      	nop
 80076a6:	e7fe      	b.n	80076a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80076a8:	f000 f880 	bl	80077ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80076ac:	2100      	movs	r1, #0
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 fe0a 	bl	80082c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80076b4:	f000 f888 	bl	80077c8 <xTaskResumeAll>
 80076b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d107      	bne.n	80076d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80076c0:	4b06      	ldr	r3, [pc, #24]	; (80076dc <vTaskDelay+0x64>)
 80076c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076c6:	601a      	str	r2, [r3, #0]
 80076c8:	f3bf 8f4f 	dsb	sy
 80076cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80076d0:	bf00      	nop
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	20005ee0 	.word	0x20005ee0
 80076dc:	e000ed04 	.word	0xe000ed04

080076e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b08a      	sub	sp, #40	; 0x28
 80076e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80076e6:	2300      	movs	r3, #0
 80076e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80076ea:	2300      	movs	r3, #0
 80076ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80076ee:	463a      	mov	r2, r7
 80076f0:	1d39      	adds	r1, r7, #4
 80076f2:	f107 0308 	add.w	r3, r7, #8
 80076f6:	4618      	mov	r0, r3
 80076f8:	f7fe fc70 	bl	8005fdc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80076fc:	6839      	ldr	r1, [r7, #0]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	68ba      	ldr	r2, [r7, #8]
 8007702:	9202      	str	r2, [sp, #8]
 8007704:	9301      	str	r3, [sp, #4]
 8007706:	2300      	movs	r3, #0
 8007708:	9300      	str	r3, [sp, #0]
 800770a:	2300      	movs	r3, #0
 800770c:	460a      	mov	r2, r1
 800770e:	4921      	ldr	r1, [pc, #132]	; (8007794 <vTaskStartScheduler+0xb4>)
 8007710:	4821      	ldr	r0, [pc, #132]	; (8007798 <vTaskStartScheduler+0xb8>)
 8007712:	f7ff fe0f 	bl	8007334 <xTaskCreateStatic>
 8007716:	4603      	mov	r3, r0
 8007718:	4a20      	ldr	r2, [pc, #128]	; (800779c <vTaskStartScheduler+0xbc>)
 800771a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800771c:	4b1f      	ldr	r3, [pc, #124]	; (800779c <vTaskStartScheduler+0xbc>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d002      	beq.n	800772a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007724:	2301      	movs	r3, #1
 8007726:	617b      	str	r3, [r7, #20]
 8007728:	e001      	b.n	800772e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800772a:	2300      	movs	r3, #0
 800772c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d102      	bne.n	800773a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007734:	f000 fe1c 	bl	8008370 <xTimerCreateTimerTask>
 8007738:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	2b01      	cmp	r3, #1
 800773e:	d116      	bne.n	800776e <vTaskStartScheduler+0x8e>
	__asm volatile
 8007740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007744:	f383 8811 	msr	BASEPRI, r3
 8007748:	f3bf 8f6f 	isb	sy
 800774c:	f3bf 8f4f 	dsb	sy
 8007750:	613b      	str	r3, [r7, #16]
}
 8007752:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007754:	4b12      	ldr	r3, [pc, #72]	; (80077a0 <vTaskStartScheduler+0xc0>)
 8007756:	f04f 32ff 	mov.w	r2, #4294967295
 800775a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800775c:	4b11      	ldr	r3, [pc, #68]	; (80077a4 <vTaskStartScheduler+0xc4>)
 800775e:	2201      	movs	r2, #1
 8007760:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007762:	4b11      	ldr	r3, [pc, #68]	; (80077a8 <vTaskStartScheduler+0xc8>)
 8007764:	2200      	movs	r2, #0
 8007766:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007768:	f001 f9da 	bl	8008b20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800776c:	e00e      	b.n	800778c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007774:	d10a      	bne.n	800778c <vTaskStartScheduler+0xac>
	__asm volatile
 8007776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777a:	f383 8811 	msr	BASEPRI, r3
 800777e:	f3bf 8f6f 	isb	sy
 8007782:	f3bf 8f4f 	dsb	sy
 8007786:	60fb      	str	r3, [r7, #12]
}
 8007788:	bf00      	nop
 800778a:	e7fe      	b.n	800778a <vTaskStartScheduler+0xaa>
}
 800778c:	bf00      	nop
 800778e:	3718      	adds	r7, #24
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	0801845c 	.word	0x0801845c
 8007798:	08007de9 	.word	0x08007de9
 800779c:	20005edc 	.word	0x20005edc
 80077a0:	20005ed8 	.word	0x20005ed8
 80077a4:	20005ec4 	.word	0x20005ec4
 80077a8:	20005ebc 	.word	0x20005ebc

080077ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80077ac:	b480      	push	{r7}
 80077ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80077b0:	4b04      	ldr	r3, [pc, #16]	; (80077c4 <vTaskSuspendAll+0x18>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	3301      	adds	r3, #1
 80077b6:	4a03      	ldr	r2, [pc, #12]	; (80077c4 <vTaskSuspendAll+0x18>)
 80077b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80077ba:	bf00      	nop
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr
 80077c4:	20005ee0 	.word	0x20005ee0

080077c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80077ce:	2300      	movs	r3, #0
 80077d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80077d2:	2300      	movs	r3, #0
 80077d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80077d6:	4b42      	ldr	r3, [pc, #264]	; (80078e0 <xTaskResumeAll+0x118>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d10a      	bne.n	80077f4 <xTaskResumeAll+0x2c>
	__asm volatile
 80077de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e2:	f383 8811 	msr	BASEPRI, r3
 80077e6:	f3bf 8f6f 	isb	sy
 80077ea:	f3bf 8f4f 	dsb	sy
 80077ee:	603b      	str	r3, [r7, #0]
}
 80077f0:	bf00      	nop
 80077f2:	e7fe      	b.n	80077f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80077f4:	f001 fa36 	bl	8008c64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80077f8:	4b39      	ldr	r3, [pc, #228]	; (80078e0 <xTaskResumeAll+0x118>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	3b01      	subs	r3, #1
 80077fe:	4a38      	ldr	r2, [pc, #224]	; (80078e0 <xTaskResumeAll+0x118>)
 8007800:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007802:	4b37      	ldr	r3, [pc, #220]	; (80078e0 <xTaskResumeAll+0x118>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d162      	bne.n	80078d0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800780a:	4b36      	ldr	r3, [pc, #216]	; (80078e4 <xTaskResumeAll+0x11c>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d05e      	beq.n	80078d0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007812:	e02f      	b.n	8007874 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007814:	4b34      	ldr	r3, [pc, #208]	; (80078e8 <xTaskResumeAll+0x120>)
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	3318      	adds	r3, #24
 8007820:	4618      	mov	r0, r3
 8007822:	f7fe fc99 	bl	8006158 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	3304      	adds	r3, #4
 800782a:	4618      	mov	r0, r3
 800782c:	f7fe fc94 	bl	8006158 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007834:	4b2d      	ldr	r3, [pc, #180]	; (80078ec <xTaskResumeAll+0x124>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	429a      	cmp	r2, r3
 800783a:	d903      	bls.n	8007844 <xTaskResumeAll+0x7c>
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007840:	4a2a      	ldr	r2, [pc, #168]	; (80078ec <xTaskResumeAll+0x124>)
 8007842:	6013      	str	r3, [r2, #0]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007848:	4613      	mov	r3, r2
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	4413      	add	r3, r2
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	4a27      	ldr	r2, [pc, #156]	; (80078f0 <xTaskResumeAll+0x128>)
 8007852:	441a      	add	r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	3304      	adds	r3, #4
 8007858:	4619      	mov	r1, r3
 800785a:	4610      	mov	r0, r2
 800785c:	f7fe fc1f 	bl	800609e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007864:	4b23      	ldr	r3, [pc, #140]	; (80078f4 <xTaskResumeAll+0x12c>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800786a:	429a      	cmp	r2, r3
 800786c:	d302      	bcc.n	8007874 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800786e:	4b22      	ldr	r3, [pc, #136]	; (80078f8 <xTaskResumeAll+0x130>)
 8007870:	2201      	movs	r2, #1
 8007872:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007874:	4b1c      	ldr	r3, [pc, #112]	; (80078e8 <xTaskResumeAll+0x120>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1cb      	bne.n	8007814 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d001      	beq.n	8007886 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007882:	f000 fb67 	bl	8007f54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007886:	4b1d      	ldr	r3, [pc, #116]	; (80078fc <xTaskResumeAll+0x134>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d010      	beq.n	80078b4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007892:	f000 f859 	bl	8007948 <xTaskIncrementTick>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d002      	beq.n	80078a2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800789c:	4b16      	ldr	r3, [pc, #88]	; (80078f8 <xTaskResumeAll+0x130>)
 800789e:	2201      	movs	r2, #1
 80078a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	3b01      	subs	r3, #1
 80078a6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d1f1      	bne.n	8007892 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80078ae:	4b13      	ldr	r3, [pc, #76]	; (80078fc <xTaskResumeAll+0x134>)
 80078b0:	2200      	movs	r2, #0
 80078b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80078b4:	4b10      	ldr	r3, [pc, #64]	; (80078f8 <xTaskResumeAll+0x130>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d009      	beq.n	80078d0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80078bc:	2301      	movs	r3, #1
 80078be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80078c0:	4b0f      	ldr	r3, [pc, #60]	; (8007900 <xTaskResumeAll+0x138>)
 80078c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078c6:	601a      	str	r2, [r3, #0]
 80078c8:	f3bf 8f4f 	dsb	sy
 80078cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80078d0:	f001 f9f8 	bl	8008cc4 <vPortExitCritical>

	return xAlreadyYielded;
 80078d4:	68bb      	ldr	r3, [r7, #8]
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3710      	adds	r7, #16
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	20005ee0 	.word	0x20005ee0
 80078e4:	20005eb8 	.word	0x20005eb8
 80078e8:	20005e78 	.word	0x20005e78
 80078ec:	20005ec0 	.word	0x20005ec0
 80078f0:	200059e8 	.word	0x200059e8
 80078f4:	200059e4 	.word	0x200059e4
 80078f8:	20005ecc 	.word	0x20005ecc
 80078fc:	20005ec8 	.word	0x20005ec8
 8007900:	e000ed04 	.word	0xe000ed04

08007904 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800790a:	4b05      	ldr	r3, [pc, #20]	; (8007920 <xTaskGetTickCount+0x1c>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007910:	687b      	ldr	r3, [r7, #4]
}
 8007912:	4618      	mov	r0, r3
 8007914:	370c      	adds	r7, #12
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	20005ebc 	.word	0x20005ebc

08007924 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800792a:	f001 fa7d 	bl	8008e28 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800792e:	2300      	movs	r3, #0
 8007930:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007932:	4b04      	ldr	r3, [pc, #16]	; (8007944 <xTaskGetTickCountFromISR+0x20>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007938:	683b      	ldr	r3, [r7, #0]
}
 800793a:	4618      	mov	r0, r3
 800793c:	3708      	adds	r7, #8
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	20005ebc 	.word	0x20005ebc

08007948 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b086      	sub	sp, #24
 800794c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800794e:	2300      	movs	r3, #0
 8007950:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007952:	4b4f      	ldr	r3, [pc, #316]	; (8007a90 <xTaskIncrementTick+0x148>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	2b00      	cmp	r3, #0
 8007958:	f040 808f 	bne.w	8007a7a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800795c:	4b4d      	ldr	r3, [pc, #308]	; (8007a94 <xTaskIncrementTick+0x14c>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	3301      	adds	r3, #1
 8007962:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007964:	4a4b      	ldr	r2, [pc, #300]	; (8007a94 <xTaskIncrementTick+0x14c>)
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d120      	bne.n	80079b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007970:	4b49      	ldr	r3, [pc, #292]	; (8007a98 <xTaskIncrementTick+0x150>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00a      	beq.n	8007990 <xTaskIncrementTick+0x48>
	__asm volatile
 800797a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797e:	f383 8811 	msr	BASEPRI, r3
 8007982:	f3bf 8f6f 	isb	sy
 8007986:	f3bf 8f4f 	dsb	sy
 800798a:	603b      	str	r3, [r7, #0]
}
 800798c:	bf00      	nop
 800798e:	e7fe      	b.n	800798e <xTaskIncrementTick+0x46>
 8007990:	4b41      	ldr	r3, [pc, #260]	; (8007a98 <xTaskIncrementTick+0x150>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	60fb      	str	r3, [r7, #12]
 8007996:	4b41      	ldr	r3, [pc, #260]	; (8007a9c <xTaskIncrementTick+0x154>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a3f      	ldr	r2, [pc, #252]	; (8007a98 <xTaskIncrementTick+0x150>)
 800799c:	6013      	str	r3, [r2, #0]
 800799e:	4a3f      	ldr	r2, [pc, #252]	; (8007a9c <xTaskIncrementTick+0x154>)
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6013      	str	r3, [r2, #0]
 80079a4:	4b3e      	ldr	r3, [pc, #248]	; (8007aa0 <xTaskIncrementTick+0x158>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	3301      	adds	r3, #1
 80079aa:	4a3d      	ldr	r2, [pc, #244]	; (8007aa0 <xTaskIncrementTick+0x158>)
 80079ac:	6013      	str	r3, [r2, #0]
 80079ae:	f000 fad1 	bl	8007f54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80079b2:	4b3c      	ldr	r3, [pc, #240]	; (8007aa4 <xTaskIncrementTick+0x15c>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	693a      	ldr	r2, [r7, #16]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d349      	bcc.n	8007a50 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079bc:	4b36      	ldr	r3, [pc, #216]	; (8007a98 <xTaskIncrementTick+0x150>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d104      	bne.n	80079d0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079c6:	4b37      	ldr	r3, [pc, #220]	; (8007aa4 <xTaskIncrementTick+0x15c>)
 80079c8:	f04f 32ff 	mov.w	r2, #4294967295
 80079cc:	601a      	str	r2, [r3, #0]
					break;
 80079ce:	e03f      	b.n	8007a50 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079d0:	4b31      	ldr	r3, [pc, #196]	; (8007a98 <xTaskIncrementTick+0x150>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80079e0:	693a      	ldr	r2, [r7, #16]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d203      	bcs.n	80079f0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80079e8:	4a2e      	ldr	r2, [pc, #184]	; (8007aa4 <xTaskIncrementTick+0x15c>)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80079ee:	e02f      	b.n	8007a50 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	3304      	adds	r3, #4
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7fe fbaf 	bl	8006158 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d004      	beq.n	8007a0c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	3318      	adds	r3, #24
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7fe fba6 	bl	8006158 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a10:	4b25      	ldr	r3, [pc, #148]	; (8007aa8 <xTaskIncrementTick+0x160>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d903      	bls.n	8007a20 <xTaskIncrementTick+0xd8>
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a1c:	4a22      	ldr	r2, [pc, #136]	; (8007aa8 <xTaskIncrementTick+0x160>)
 8007a1e:	6013      	str	r3, [r2, #0]
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a24:	4613      	mov	r3, r2
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	4413      	add	r3, r2
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	4a1f      	ldr	r2, [pc, #124]	; (8007aac <xTaskIncrementTick+0x164>)
 8007a2e:	441a      	add	r2, r3
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	3304      	adds	r3, #4
 8007a34:	4619      	mov	r1, r3
 8007a36:	4610      	mov	r0, r2
 8007a38:	f7fe fb31 	bl	800609e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a40:	4b1b      	ldr	r3, [pc, #108]	; (8007ab0 <xTaskIncrementTick+0x168>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d3b8      	bcc.n	80079bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a4e:	e7b5      	b.n	80079bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007a50:	4b17      	ldr	r3, [pc, #92]	; (8007ab0 <xTaskIncrementTick+0x168>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a56:	4915      	ldr	r1, [pc, #84]	; (8007aac <xTaskIncrementTick+0x164>)
 8007a58:	4613      	mov	r3, r2
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	4413      	add	r3, r2
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	440b      	add	r3, r1
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d901      	bls.n	8007a6c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007a6c:	4b11      	ldr	r3, [pc, #68]	; (8007ab4 <xTaskIncrementTick+0x16c>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d007      	beq.n	8007a84 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007a74:	2301      	movs	r3, #1
 8007a76:	617b      	str	r3, [r7, #20]
 8007a78:	e004      	b.n	8007a84 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007a7a:	4b0f      	ldr	r3, [pc, #60]	; (8007ab8 <xTaskIncrementTick+0x170>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	4a0d      	ldr	r2, [pc, #52]	; (8007ab8 <xTaskIncrementTick+0x170>)
 8007a82:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007a84:	697b      	ldr	r3, [r7, #20]
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3718      	adds	r7, #24
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	20005ee0 	.word	0x20005ee0
 8007a94:	20005ebc 	.word	0x20005ebc
 8007a98:	20005e70 	.word	0x20005e70
 8007a9c:	20005e74 	.word	0x20005e74
 8007aa0:	20005ed0 	.word	0x20005ed0
 8007aa4:	20005ed8 	.word	0x20005ed8
 8007aa8:	20005ec0 	.word	0x20005ec0
 8007aac:	200059e8 	.word	0x200059e8
 8007ab0:	200059e4 	.word	0x200059e4
 8007ab4:	20005ecc 	.word	0x20005ecc
 8007ab8:	20005ec8 	.word	0x20005ec8

08007abc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007ac2:	4b28      	ldr	r3, [pc, #160]	; (8007b64 <vTaskSwitchContext+0xa8>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d003      	beq.n	8007ad2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007aca:	4b27      	ldr	r3, [pc, #156]	; (8007b68 <vTaskSwitchContext+0xac>)
 8007acc:	2201      	movs	r2, #1
 8007ace:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007ad0:	e041      	b.n	8007b56 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007ad2:	4b25      	ldr	r3, [pc, #148]	; (8007b68 <vTaskSwitchContext+0xac>)
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ad8:	4b24      	ldr	r3, [pc, #144]	; (8007b6c <vTaskSwitchContext+0xb0>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	60fb      	str	r3, [r7, #12]
 8007ade:	e010      	b.n	8007b02 <vTaskSwitchContext+0x46>
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d10a      	bne.n	8007afc <vTaskSwitchContext+0x40>
	__asm volatile
 8007ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aea:	f383 8811 	msr	BASEPRI, r3
 8007aee:	f3bf 8f6f 	isb	sy
 8007af2:	f3bf 8f4f 	dsb	sy
 8007af6:	607b      	str	r3, [r7, #4]
}
 8007af8:	bf00      	nop
 8007afa:	e7fe      	b.n	8007afa <vTaskSwitchContext+0x3e>
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	3b01      	subs	r3, #1
 8007b00:	60fb      	str	r3, [r7, #12]
 8007b02:	491b      	ldr	r1, [pc, #108]	; (8007b70 <vTaskSwitchContext+0xb4>)
 8007b04:	68fa      	ldr	r2, [r7, #12]
 8007b06:	4613      	mov	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	4413      	add	r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	440b      	add	r3, r1
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d0e4      	beq.n	8007ae0 <vTaskSwitchContext+0x24>
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	4613      	mov	r3, r2
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	4413      	add	r3, r2
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	4a13      	ldr	r2, [pc, #76]	; (8007b70 <vTaskSwitchContext+0xb4>)
 8007b22:	4413      	add	r3, r2
 8007b24:	60bb      	str	r3, [r7, #8]
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	685a      	ldr	r2, [r3, #4]
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	605a      	str	r2, [r3, #4]
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	685a      	ldr	r2, [r3, #4]
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	3308      	adds	r3, #8
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d104      	bne.n	8007b46 <vTaskSwitchContext+0x8a>
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	685a      	ldr	r2, [r3, #4]
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	605a      	str	r2, [r3, #4]
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	4a09      	ldr	r2, [pc, #36]	; (8007b74 <vTaskSwitchContext+0xb8>)
 8007b4e:	6013      	str	r3, [r2, #0]
 8007b50:	4a06      	ldr	r2, [pc, #24]	; (8007b6c <vTaskSwitchContext+0xb0>)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6013      	str	r3, [r2, #0]
}
 8007b56:	bf00      	nop
 8007b58:	3714      	adds	r7, #20
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop
 8007b64:	20005ee0 	.word	0x20005ee0
 8007b68:	20005ecc 	.word	0x20005ecc
 8007b6c:	20005ec0 	.word	0x20005ec0
 8007b70:	200059e8 	.word	0x200059e8
 8007b74:	200059e4 	.word	0x200059e4

08007b78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d10a      	bne.n	8007b9e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8c:	f383 8811 	msr	BASEPRI, r3
 8007b90:	f3bf 8f6f 	isb	sy
 8007b94:	f3bf 8f4f 	dsb	sy
 8007b98:	60fb      	str	r3, [r7, #12]
}
 8007b9a:	bf00      	nop
 8007b9c:	e7fe      	b.n	8007b9c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b9e:	4b07      	ldr	r3, [pc, #28]	; (8007bbc <vTaskPlaceOnEventList+0x44>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	3318      	adds	r3, #24
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f7fe fa9d 	bl	80060e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007bac:	2101      	movs	r1, #1
 8007bae:	6838      	ldr	r0, [r7, #0]
 8007bb0:	f000 fb8a 	bl	80082c8 <prvAddCurrentTaskToDelayedList>
}
 8007bb4:	bf00      	nop
 8007bb6:	3710      	adds	r7, #16
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	200059e4 	.word	0x200059e4

08007bc0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b086      	sub	sp, #24
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d10a      	bne.n	8007be8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd6:	f383 8811 	msr	BASEPRI, r3
 8007bda:	f3bf 8f6f 	isb	sy
 8007bde:	f3bf 8f4f 	dsb	sy
 8007be2:	617b      	str	r3, [r7, #20]
}
 8007be4:	bf00      	nop
 8007be6:	e7fe      	b.n	8007be6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007be8:	4b0a      	ldr	r3, [pc, #40]	; (8007c14 <vTaskPlaceOnEventListRestricted+0x54>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	3318      	adds	r3, #24
 8007bee:	4619      	mov	r1, r3
 8007bf0:	68f8      	ldr	r0, [r7, #12]
 8007bf2:	f7fe fa54 	bl	800609e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d002      	beq.n	8007c02 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8007c00:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007c02:	6879      	ldr	r1, [r7, #4]
 8007c04:	68b8      	ldr	r0, [r7, #8]
 8007c06:	f000 fb5f 	bl	80082c8 <prvAddCurrentTaskToDelayedList>
	}
 8007c0a:	bf00      	nop
 8007c0c:	3718      	adds	r7, #24
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	200059e4 	.word	0x200059e4

08007c18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b086      	sub	sp, #24
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d10a      	bne.n	8007c44 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c32:	f383 8811 	msr	BASEPRI, r3
 8007c36:	f3bf 8f6f 	isb	sy
 8007c3a:	f3bf 8f4f 	dsb	sy
 8007c3e:	60fb      	str	r3, [r7, #12]
}
 8007c40:	bf00      	nop
 8007c42:	e7fe      	b.n	8007c42 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	3318      	adds	r3, #24
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f7fe fa85 	bl	8006158 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c4e:	4b1e      	ldr	r3, [pc, #120]	; (8007cc8 <xTaskRemoveFromEventList+0xb0>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d11d      	bne.n	8007c92 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	3304      	adds	r3, #4
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f7fe fa7c 	bl	8006158 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c64:	4b19      	ldr	r3, [pc, #100]	; (8007ccc <xTaskRemoveFromEventList+0xb4>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d903      	bls.n	8007c74 <xTaskRemoveFromEventList+0x5c>
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c70:	4a16      	ldr	r2, [pc, #88]	; (8007ccc <xTaskRemoveFromEventList+0xb4>)
 8007c72:	6013      	str	r3, [r2, #0]
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c78:	4613      	mov	r3, r2
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	4413      	add	r3, r2
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4a13      	ldr	r2, [pc, #76]	; (8007cd0 <xTaskRemoveFromEventList+0xb8>)
 8007c82:	441a      	add	r2, r3
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	3304      	adds	r3, #4
 8007c88:	4619      	mov	r1, r3
 8007c8a:	4610      	mov	r0, r2
 8007c8c:	f7fe fa07 	bl	800609e <vListInsertEnd>
 8007c90:	e005      	b.n	8007c9e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	3318      	adds	r3, #24
 8007c96:	4619      	mov	r1, r3
 8007c98:	480e      	ldr	r0, [pc, #56]	; (8007cd4 <xTaskRemoveFromEventList+0xbc>)
 8007c9a:	f7fe fa00 	bl	800609e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ca2:	4b0d      	ldr	r3, [pc, #52]	; (8007cd8 <xTaskRemoveFromEventList+0xc0>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d905      	bls.n	8007cb8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007cac:	2301      	movs	r3, #1
 8007cae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007cb0:	4b0a      	ldr	r3, [pc, #40]	; (8007cdc <xTaskRemoveFromEventList+0xc4>)
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	601a      	str	r2, [r3, #0]
 8007cb6:	e001      	b.n	8007cbc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007cbc:	697b      	ldr	r3, [r7, #20]
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3718      	adds	r7, #24
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	20005ee0 	.word	0x20005ee0
 8007ccc:	20005ec0 	.word	0x20005ec0
 8007cd0:	200059e8 	.word	0x200059e8
 8007cd4:	20005e78 	.word	0x20005e78
 8007cd8:	200059e4 	.word	0x200059e4
 8007cdc:	20005ecc 	.word	0x20005ecc

08007ce0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ce8:	4b06      	ldr	r3, [pc, #24]	; (8007d04 <vTaskInternalSetTimeOutState+0x24>)
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007cf0:	4b05      	ldr	r3, [pc, #20]	; (8007d08 <vTaskInternalSetTimeOutState+0x28>)
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	605a      	str	r2, [r3, #4]
}
 8007cf8:	bf00      	nop
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr
 8007d04:	20005ed0 	.word	0x20005ed0
 8007d08:	20005ebc 	.word	0x20005ebc

08007d0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b088      	sub	sp, #32
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d10a      	bne.n	8007d32 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d20:	f383 8811 	msr	BASEPRI, r3
 8007d24:	f3bf 8f6f 	isb	sy
 8007d28:	f3bf 8f4f 	dsb	sy
 8007d2c:	613b      	str	r3, [r7, #16]
}
 8007d2e:	bf00      	nop
 8007d30:	e7fe      	b.n	8007d30 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d10a      	bne.n	8007d4e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d3c:	f383 8811 	msr	BASEPRI, r3
 8007d40:	f3bf 8f6f 	isb	sy
 8007d44:	f3bf 8f4f 	dsb	sy
 8007d48:	60fb      	str	r3, [r7, #12]
}
 8007d4a:	bf00      	nop
 8007d4c:	e7fe      	b.n	8007d4c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007d4e:	f000 ff89 	bl	8008c64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007d52:	4b1d      	ldr	r3, [pc, #116]	; (8007dc8 <xTaskCheckForTimeOut+0xbc>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	69ba      	ldr	r2, [r7, #24]
 8007d5e:	1ad3      	subs	r3, r2, r3
 8007d60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d6a:	d102      	bne.n	8007d72 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	61fb      	str	r3, [r7, #28]
 8007d70:	e023      	b.n	8007dba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	4b15      	ldr	r3, [pc, #84]	; (8007dcc <xTaskCheckForTimeOut+0xc0>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d007      	beq.n	8007d8e <xTaskCheckForTimeOut+0x82>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	69ba      	ldr	r2, [r7, #24]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d302      	bcc.n	8007d8e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	61fb      	str	r3, [r7, #28]
 8007d8c:	e015      	b.n	8007dba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	697a      	ldr	r2, [r7, #20]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d20b      	bcs.n	8007db0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	1ad2      	subs	r2, r2, r3
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f7ff ff9b 	bl	8007ce0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007daa:	2300      	movs	r3, #0
 8007dac:	61fb      	str	r3, [r7, #28]
 8007dae:	e004      	b.n	8007dba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	2200      	movs	r2, #0
 8007db4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007db6:	2301      	movs	r3, #1
 8007db8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007dba:	f000 ff83 	bl	8008cc4 <vPortExitCritical>

	return xReturn;
 8007dbe:	69fb      	ldr	r3, [r7, #28]
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3720      	adds	r7, #32
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	20005ebc 	.word	0x20005ebc
 8007dcc:	20005ed0 	.word	0x20005ed0

08007dd0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007dd4:	4b03      	ldr	r3, [pc, #12]	; (8007de4 <vTaskMissedYield+0x14>)
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	601a      	str	r2, [r3, #0]
}
 8007dda:	bf00      	nop
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr
 8007de4:	20005ecc 	.word	0x20005ecc

08007de8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007df0:	f000 f852 	bl	8007e98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007df4:	4b06      	ldr	r3, [pc, #24]	; (8007e10 <prvIdleTask+0x28>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d9f9      	bls.n	8007df0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007dfc:	4b05      	ldr	r3, [pc, #20]	; (8007e14 <prvIdleTask+0x2c>)
 8007dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e02:	601a      	str	r2, [r3, #0]
 8007e04:	f3bf 8f4f 	dsb	sy
 8007e08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007e0c:	e7f0      	b.n	8007df0 <prvIdleTask+0x8>
 8007e0e:	bf00      	nop
 8007e10:	200059e8 	.word	0x200059e8
 8007e14:	e000ed04 	.word	0xe000ed04

08007e18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e1e:	2300      	movs	r3, #0
 8007e20:	607b      	str	r3, [r7, #4]
 8007e22:	e00c      	b.n	8007e3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	4613      	mov	r3, r2
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	4413      	add	r3, r2
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	4a12      	ldr	r2, [pc, #72]	; (8007e78 <prvInitialiseTaskLists+0x60>)
 8007e30:	4413      	add	r3, r2
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7fe f906 	bl	8006044 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	607b      	str	r3, [r7, #4]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2b37      	cmp	r3, #55	; 0x37
 8007e42:	d9ef      	bls.n	8007e24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007e44:	480d      	ldr	r0, [pc, #52]	; (8007e7c <prvInitialiseTaskLists+0x64>)
 8007e46:	f7fe f8fd 	bl	8006044 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e4a:	480d      	ldr	r0, [pc, #52]	; (8007e80 <prvInitialiseTaskLists+0x68>)
 8007e4c:	f7fe f8fa 	bl	8006044 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e50:	480c      	ldr	r0, [pc, #48]	; (8007e84 <prvInitialiseTaskLists+0x6c>)
 8007e52:	f7fe f8f7 	bl	8006044 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007e56:	480c      	ldr	r0, [pc, #48]	; (8007e88 <prvInitialiseTaskLists+0x70>)
 8007e58:	f7fe f8f4 	bl	8006044 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007e5c:	480b      	ldr	r0, [pc, #44]	; (8007e8c <prvInitialiseTaskLists+0x74>)
 8007e5e:	f7fe f8f1 	bl	8006044 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007e62:	4b0b      	ldr	r3, [pc, #44]	; (8007e90 <prvInitialiseTaskLists+0x78>)
 8007e64:	4a05      	ldr	r2, [pc, #20]	; (8007e7c <prvInitialiseTaskLists+0x64>)
 8007e66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e68:	4b0a      	ldr	r3, [pc, #40]	; (8007e94 <prvInitialiseTaskLists+0x7c>)
 8007e6a:	4a05      	ldr	r2, [pc, #20]	; (8007e80 <prvInitialiseTaskLists+0x68>)
 8007e6c:	601a      	str	r2, [r3, #0]
}
 8007e6e:	bf00      	nop
 8007e70:	3708      	adds	r7, #8
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	200059e8 	.word	0x200059e8
 8007e7c:	20005e48 	.word	0x20005e48
 8007e80:	20005e5c 	.word	0x20005e5c
 8007e84:	20005e78 	.word	0x20005e78
 8007e88:	20005e8c 	.word	0x20005e8c
 8007e8c:	20005ea4 	.word	0x20005ea4
 8007e90:	20005e70 	.word	0x20005e70
 8007e94:	20005e74 	.word	0x20005e74

08007e98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e9e:	e019      	b.n	8007ed4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007ea0:	f000 fee0 	bl	8008c64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ea4:	4b10      	ldr	r3, [pc, #64]	; (8007ee8 <prvCheckTasksWaitingTermination+0x50>)
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	3304      	adds	r3, #4
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f7fe f951 	bl	8006158 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007eb6:	4b0d      	ldr	r3, [pc, #52]	; (8007eec <prvCheckTasksWaitingTermination+0x54>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	4a0b      	ldr	r2, [pc, #44]	; (8007eec <prvCheckTasksWaitingTermination+0x54>)
 8007ebe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007ec0:	4b0b      	ldr	r3, [pc, #44]	; (8007ef0 <prvCheckTasksWaitingTermination+0x58>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	3b01      	subs	r3, #1
 8007ec6:	4a0a      	ldr	r2, [pc, #40]	; (8007ef0 <prvCheckTasksWaitingTermination+0x58>)
 8007ec8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007eca:	f000 fefb 	bl	8008cc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 f810 	bl	8007ef4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ed4:	4b06      	ldr	r3, [pc, #24]	; (8007ef0 <prvCheckTasksWaitingTermination+0x58>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1e1      	bne.n	8007ea0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007edc:	bf00      	nop
 8007ede:	bf00      	nop
 8007ee0:	3708      	adds	r7, #8
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	20005e8c 	.word	0x20005e8c
 8007eec:	20005eb8 	.word	0x20005eb8
 8007ef0:	20005ea0 	.word	0x20005ea0

08007ef4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d108      	bne.n	8007f18 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f001 f898 	bl	8009040 <vPortFree>
				vPortFree( pxTCB );
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f001 f895 	bl	8009040 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f16:	e018      	b.n	8007f4a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d103      	bne.n	8007f2a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f001 f88c 	bl	8009040 <vPortFree>
	}
 8007f28:	e00f      	b.n	8007f4a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007f30:	2b02      	cmp	r3, #2
 8007f32:	d00a      	beq.n	8007f4a <prvDeleteTCB+0x56>
	__asm volatile
 8007f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f38:	f383 8811 	msr	BASEPRI, r3
 8007f3c:	f3bf 8f6f 	isb	sy
 8007f40:	f3bf 8f4f 	dsb	sy
 8007f44:	60fb      	str	r3, [r7, #12]
}
 8007f46:	bf00      	nop
 8007f48:	e7fe      	b.n	8007f48 <prvDeleteTCB+0x54>
	}
 8007f4a:	bf00      	nop
 8007f4c:	3710      	adds	r7, #16
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
	...

08007f54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f5a:	4b0c      	ldr	r3, [pc, #48]	; (8007f8c <prvResetNextTaskUnblockTime+0x38>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d104      	bne.n	8007f6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f64:	4b0a      	ldr	r3, [pc, #40]	; (8007f90 <prvResetNextTaskUnblockTime+0x3c>)
 8007f66:	f04f 32ff 	mov.w	r2, #4294967295
 8007f6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007f6c:	e008      	b.n	8007f80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f6e:	4b07      	ldr	r3, [pc, #28]	; (8007f8c <prvResetNextTaskUnblockTime+0x38>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	4a04      	ldr	r2, [pc, #16]	; (8007f90 <prvResetNextTaskUnblockTime+0x3c>)
 8007f7e:	6013      	str	r3, [r2, #0]
}
 8007f80:	bf00      	nop
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr
 8007f8c:	20005e70 	.word	0x20005e70
 8007f90:	20005ed8 	.word	0x20005ed8

08007f94 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007f9a:	4b05      	ldr	r3, [pc, #20]	; (8007fb0 <xTaskGetCurrentTaskHandle+0x1c>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007fa0:	687b      	ldr	r3, [r7, #4]
	}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	370c      	adds	r7, #12
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop
 8007fb0:	200059e4 	.word	0x200059e4

08007fb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007fba:	4b0b      	ldr	r3, [pc, #44]	; (8007fe8 <xTaskGetSchedulerState+0x34>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d102      	bne.n	8007fc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	607b      	str	r3, [r7, #4]
 8007fc6:	e008      	b.n	8007fda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fc8:	4b08      	ldr	r3, [pc, #32]	; (8007fec <xTaskGetSchedulerState+0x38>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d102      	bne.n	8007fd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007fd0:	2302      	movs	r3, #2
 8007fd2:	607b      	str	r3, [r7, #4]
 8007fd4:	e001      	b.n	8007fda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007fda:	687b      	ldr	r3, [r7, #4]
	}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr
 8007fe8:	20005ec4 	.word	0x20005ec4
 8007fec:	20005ee0 	.word	0x20005ee0

08007ff0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d051      	beq.n	80080aa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800800a:	4b2a      	ldr	r3, [pc, #168]	; (80080b4 <xTaskPriorityInherit+0xc4>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008010:	429a      	cmp	r2, r3
 8008012:	d241      	bcs.n	8008098 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	699b      	ldr	r3, [r3, #24]
 8008018:	2b00      	cmp	r3, #0
 800801a:	db06      	blt.n	800802a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800801c:	4b25      	ldr	r3, [pc, #148]	; (80080b4 <xTaskPriorityInherit+0xc4>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008022:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	6959      	ldr	r1, [r3, #20]
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008032:	4613      	mov	r3, r2
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	4413      	add	r3, r2
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	4a1f      	ldr	r2, [pc, #124]	; (80080b8 <xTaskPriorityInherit+0xc8>)
 800803c:	4413      	add	r3, r2
 800803e:	4299      	cmp	r1, r3
 8008040:	d122      	bne.n	8008088 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	3304      	adds	r3, #4
 8008046:	4618      	mov	r0, r3
 8008048:	f7fe f886 	bl	8006158 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800804c:	4b19      	ldr	r3, [pc, #100]	; (80080b4 <xTaskPriorityInherit+0xc4>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800805a:	4b18      	ldr	r3, [pc, #96]	; (80080bc <xTaskPriorityInherit+0xcc>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	429a      	cmp	r2, r3
 8008060:	d903      	bls.n	800806a <xTaskPriorityInherit+0x7a>
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008066:	4a15      	ldr	r2, [pc, #84]	; (80080bc <xTaskPriorityInherit+0xcc>)
 8008068:	6013      	str	r3, [r2, #0]
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800806e:	4613      	mov	r3, r2
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	4413      	add	r3, r2
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	4a10      	ldr	r2, [pc, #64]	; (80080b8 <xTaskPriorityInherit+0xc8>)
 8008078:	441a      	add	r2, r3
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	3304      	adds	r3, #4
 800807e:	4619      	mov	r1, r3
 8008080:	4610      	mov	r0, r2
 8008082:	f7fe f80c 	bl	800609e <vListInsertEnd>
 8008086:	e004      	b.n	8008092 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008088:	4b0a      	ldr	r3, [pc, #40]	; (80080b4 <xTaskPriorityInherit+0xc4>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008092:	2301      	movs	r3, #1
 8008094:	60fb      	str	r3, [r7, #12]
 8008096:	e008      	b.n	80080aa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800809c:	4b05      	ldr	r3, [pc, #20]	; (80080b4 <xTaskPriorityInherit+0xc4>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d201      	bcs.n	80080aa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80080a6:	2301      	movs	r3, #1
 80080a8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80080aa:	68fb      	ldr	r3, [r7, #12]
	}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3710      	adds	r7, #16
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	200059e4 	.word	0x200059e4
 80080b8:	200059e8 	.word	0x200059e8
 80080bc:	20005ec0 	.word	0x20005ec0

080080c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b086      	sub	sp, #24
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80080cc:	2300      	movs	r3, #0
 80080ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d056      	beq.n	8008184 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80080d6:	4b2e      	ldr	r3, [pc, #184]	; (8008190 <xTaskPriorityDisinherit+0xd0>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	693a      	ldr	r2, [r7, #16]
 80080dc:	429a      	cmp	r2, r3
 80080de:	d00a      	beq.n	80080f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80080e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e4:	f383 8811 	msr	BASEPRI, r3
 80080e8:	f3bf 8f6f 	isb	sy
 80080ec:	f3bf 8f4f 	dsb	sy
 80080f0:	60fb      	str	r3, [r7, #12]
}
 80080f2:	bf00      	nop
 80080f4:	e7fe      	b.n	80080f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d10a      	bne.n	8008114 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80080fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008102:	f383 8811 	msr	BASEPRI, r3
 8008106:	f3bf 8f6f 	isb	sy
 800810a:	f3bf 8f4f 	dsb	sy
 800810e:	60bb      	str	r3, [r7, #8]
}
 8008110:	bf00      	nop
 8008112:	e7fe      	b.n	8008112 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008118:	1e5a      	subs	r2, r3, #1
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008126:	429a      	cmp	r2, r3
 8008128:	d02c      	beq.n	8008184 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800812e:	2b00      	cmp	r3, #0
 8008130:	d128      	bne.n	8008184 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	3304      	adds	r3, #4
 8008136:	4618      	mov	r0, r3
 8008138:	f7fe f80e 	bl	8006158 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008148:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008154:	4b0f      	ldr	r3, [pc, #60]	; (8008194 <xTaskPriorityDisinherit+0xd4>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	429a      	cmp	r2, r3
 800815a:	d903      	bls.n	8008164 <xTaskPriorityDisinherit+0xa4>
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008160:	4a0c      	ldr	r2, [pc, #48]	; (8008194 <xTaskPriorityDisinherit+0xd4>)
 8008162:	6013      	str	r3, [r2, #0]
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008168:	4613      	mov	r3, r2
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	4413      	add	r3, r2
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	4a09      	ldr	r2, [pc, #36]	; (8008198 <xTaskPriorityDisinherit+0xd8>)
 8008172:	441a      	add	r2, r3
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	3304      	adds	r3, #4
 8008178:	4619      	mov	r1, r3
 800817a:	4610      	mov	r0, r2
 800817c:	f7fd ff8f 	bl	800609e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008180:	2301      	movs	r3, #1
 8008182:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008184:	697b      	ldr	r3, [r7, #20]
	}
 8008186:	4618      	mov	r0, r3
 8008188:	3718      	adds	r7, #24
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	200059e4 	.word	0x200059e4
 8008194:	20005ec0 	.word	0x20005ec0
 8008198:	200059e8 	.word	0x200059e8

0800819c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800819c:	b580      	push	{r7, lr}
 800819e:	b088      	sub	sp, #32
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80081aa:	2301      	movs	r3, #1
 80081ac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d06a      	beq.n	800828a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d10a      	bne.n	80081d2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80081bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c0:	f383 8811 	msr	BASEPRI, r3
 80081c4:	f3bf 8f6f 	isb	sy
 80081c8:	f3bf 8f4f 	dsb	sy
 80081cc:	60fb      	str	r3, [r7, #12]
}
 80081ce:	bf00      	nop
 80081d0:	e7fe      	b.n	80081d0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081d6:	683a      	ldr	r2, [r7, #0]
 80081d8:	429a      	cmp	r2, r3
 80081da:	d902      	bls.n	80081e2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	61fb      	str	r3, [r7, #28]
 80081e0:	e002      	b.n	80081e8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081e6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80081e8:	69bb      	ldr	r3, [r7, #24]
 80081ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ec:	69fa      	ldr	r2, [r7, #28]
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d04b      	beq.n	800828a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081f6:	697a      	ldr	r2, [r7, #20]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d146      	bne.n	800828a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80081fc:	4b25      	ldr	r3, [pc, #148]	; (8008294 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	69ba      	ldr	r2, [r7, #24]
 8008202:	429a      	cmp	r2, r3
 8008204:	d10a      	bne.n	800821c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800820a:	f383 8811 	msr	BASEPRI, r3
 800820e:	f3bf 8f6f 	isb	sy
 8008212:	f3bf 8f4f 	dsb	sy
 8008216:	60bb      	str	r3, [r7, #8]
}
 8008218:	bf00      	nop
 800821a:	e7fe      	b.n	800821a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800821c:	69bb      	ldr	r3, [r7, #24]
 800821e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008220:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	69fa      	ldr	r2, [r7, #28]
 8008226:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	699b      	ldr	r3, [r3, #24]
 800822c:	2b00      	cmp	r3, #0
 800822e:	db04      	blt.n	800823a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008230:	69fb      	ldr	r3, [r7, #28]
 8008232:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008236:	69bb      	ldr	r3, [r7, #24]
 8008238:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	6959      	ldr	r1, [r3, #20]
 800823e:	693a      	ldr	r2, [r7, #16]
 8008240:	4613      	mov	r3, r2
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	4413      	add	r3, r2
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	4a13      	ldr	r2, [pc, #76]	; (8008298 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800824a:	4413      	add	r3, r2
 800824c:	4299      	cmp	r1, r3
 800824e:	d11c      	bne.n	800828a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	3304      	adds	r3, #4
 8008254:	4618      	mov	r0, r3
 8008256:	f7fd ff7f 	bl	8006158 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800825a:	69bb      	ldr	r3, [r7, #24]
 800825c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800825e:	4b0f      	ldr	r3, [pc, #60]	; (800829c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	429a      	cmp	r2, r3
 8008264:	d903      	bls.n	800826e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800826a:	4a0c      	ldr	r2, [pc, #48]	; (800829c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800826c:	6013      	str	r3, [r2, #0]
 800826e:	69bb      	ldr	r3, [r7, #24]
 8008270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008272:	4613      	mov	r3, r2
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	4413      	add	r3, r2
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	4a07      	ldr	r2, [pc, #28]	; (8008298 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800827c:	441a      	add	r2, r3
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	3304      	adds	r3, #4
 8008282:	4619      	mov	r1, r3
 8008284:	4610      	mov	r0, r2
 8008286:	f7fd ff0a 	bl	800609e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800828a:	bf00      	nop
 800828c:	3720      	adds	r7, #32
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	200059e4 	.word	0x200059e4
 8008298:	200059e8 	.word	0x200059e8
 800829c:	20005ec0 	.word	0x20005ec0

080082a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80082a0:	b480      	push	{r7}
 80082a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80082a4:	4b07      	ldr	r3, [pc, #28]	; (80082c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d004      	beq.n	80082b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80082ac:	4b05      	ldr	r3, [pc, #20]	; (80082c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80082b2:	3201      	adds	r2, #1
 80082b4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80082b6:	4b03      	ldr	r3, [pc, #12]	; (80082c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80082b8:	681b      	ldr	r3, [r3, #0]
	}
 80082ba:	4618      	mov	r0, r3
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr
 80082c4:	200059e4 	.word	0x200059e4

080082c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80082d2:	4b21      	ldr	r3, [pc, #132]	; (8008358 <prvAddCurrentTaskToDelayedList+0x90>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082d8:	4b20      	ldr	r3, [pc, #128]	; (800835c <prvAddCurrentTaskToDelayedList+0x94>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	3304      	adds	r3, #4
 80082de:	4618      	mov	r0, r3
 80082e0:	f7fd ff3a 	bl	8006158 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ea:	d10a      	bne.n	8008302 <prvAddCurrentTaskToDelayedList+0x3a>
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d007      	beq.n	8008302 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082f2:	4b1a      	ldr	r3, [pc, #104]	; (800835c <prvAddCurrentTaskToDelayedList+0x94>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	3304      	adds	r3, #4
 80082f8:	4619      	mov	r1, r3
 80082fa:	4819      	ldr	r0, [pc, #100]	; (8008360 <prvAddCurrentTaskToDelayedList+0x98>)
 80082fc:	f7fd fecf 	bl	800609e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008300:	e026      	b.n	8008350 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4413      	add	r3, r2
 8008308:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800830a:	4b14      	ldr	r3, [pc, #80]	; (800835c <prvAddCurrentTaskToDelayedList+0x94>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	68ba      	ldr	r2, [r7, #8]
 8008310:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008312:	68ba      	ldr	r2, [r7, #8]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	429a      	cmp	r2, r3
 8008318:	d209      	bcs.n	800832e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800831a:	4b12      	ldr	r3, [pc, #72]	; (8008364 <prvAddCurrentTaskToDelayedList+0x9c>)
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	4b0f      	ldr	r3, [pc, #60]	; (800835c <prvAddCurrentTaskToDelayedList+0x94>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	3304      	adds	r3, #4
 8008324:	4619      	mov	r1, r3
 8008326:	4610      	mov	r0, r2
 8008328:	f7fd fedd 	bl	80060e6 <vListInsert>
}
 800832c:	e010      	b.n	8008350 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800832e:	4b0e      	ldr	r3, [pc, #56]	; (8008368 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	4b0a      	ldr	r3, [pc, #40]	; (800835c <prvAddCurrentTaskToDelayedList+0x94>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	3304      	adds	r3, #4
 8008338:	4619      	mov	r1, r3
 800833a:	4610      	mov	r0, r2
 800833c:	f7fd fed3 	bl	80060e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008340:	4b0a      	ldr	r3, [pc, #40]	; (800836c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	68ba      	ldr	r2, [r7, #8]
 8008346:	429a      	cmp	r2, r3
 8008348:	d202      	bcs.n	8008350 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800834a:	4a08      	ldr	r2, [pc, #32]	; (800836c <prvAddCurrentTaskToDelayedList+0xa4>)
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	6013      	str	r3, [r2, #0]
}
 8008350:	bf00      	nop
 8008352:	3710      	adds	r7, #16
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	20005ebc 	.word	0x20005ebc
 800835c:	200059e4 	.word	0x200059e4
 8008360:	20005ea4 	.word	0x20005ea4
 8008364:	20005e74 	.word	0x20005e74
 8008368:	20005e70 	.word	0x20005e70
 800836c:	20005ed8 	.word	0x20005ed8

08008370 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b08a      	sub	sp, #40	; 0x28
 8008374:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008376:	2300      	movs	r3, #0
 8008378:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800837a:	f000 fb07 	bl	800898c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800837e:	4b1c      	ldr	r3, [pc, #112]	; (80083f0 <xTimerCreateTimerTask+0x80>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d021      	beq.n	80083ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008386:	2300      	movs	r3, #0
 8008388:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800838a:	2300      	movs	r3, #0
 800838c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800838e:	1d3a      	adds	r2, r7, #4
 8008390:	f107 0108 	add.w	r1, r7, #8
 8008394:	f107 030c 	add.w	r3, r7, #12
 8008398:	4618      	mov	r0, r3
 800839a:	f7fd fe39 	bl	8006010 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800839e:	6879      	ldr	r1, [r7, #4]
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	9202      	str	r2, [sp, #8]
 80083a6:	9301      	str	r3, [sp, #4]
 80083a8:	2302      	movs	r3, #2
 80083aa:	9300      	str	r3, [sp, #0]
 80083ac:	2300      	movs	r3, #0
 80083ae:	460a      	mov	r2, r1
 80083b0:	4910      	ldr	r1, [pc, #64]	; (80083f4 <xTimerCreateTimerTask+0x84>)
 80083b2:	4811      	ldr	r0, [pc, #68]	; (80083f8 <xTimerCreateTimerTask+0x88>)
 80083b4:	f7fe ffbe 	bl	8007334 <xTaskCreateStatic>
 80083b8:	4603      	mov	r3, r0
 80083ba:	4a10      	ldr	r2, [pc, #64]	; (80083fc <xTimerCreateTimerTask+0x8c>)
 80083bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80083be:	4b0f      	ldr	r3, [pc, #60]	; (80083fc <xTimerCreateTimerTask+0x8c>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d001      	beq.n	80083ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80083c6:	2301      	movs	r3, #1
 80083c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10a      	bne.n	80083e6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80083d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d4:	f383 8811 	msr	BASEPRI, r3
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	613b      	str	r3, [r7, #16]
}
 80083e2:	bf00      	nop
 80083e4:	e7fe      	b.n	80083e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80083e6:	697b      	ldr	r3, [r7, #20]
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3718      	adds	r7, #24
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	20005f14 	.word	0x20005f14
 80083f4:	08018464 	.word	0x08018464
 80083f8:	08008535 	.word	0x08008535
 80083fc:	20005f18 	.word	0x20005f18

08008400 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b08a      	sub	sp, #40	; 0x28
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	60b9      	str	r1, [r7, #8]
 800840a:	607a      	str	r2, [r7, #4]
 800840c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800840e:	2300      	movs	r3, #0
 8008410:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d10a      	bne.n	800842e <xTimerGenericCommand+0x2e>
	__asm volatile
 8008418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841c:	f383 8811 	msr	BASEPRI, r3
 8008420:	f3bf 8f6f 	isb	sy
 8008424:	f3bf 8f4f 	dsb	sy
 8008428:	623b      	str	r3, [r7, #32]
}
 800842a:	bf00      	nop
 800842c:	e7fe      	b.n	800842c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800842e:	4b1a      	ldr	r3, [pc, #104]	; (8008498 <xTimerGenericCommand+0x98>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d02a      	beq.n	800848c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	2b05      	cmp	r3, #5
 8008446:	dc18      	bgt.n	800847a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008448:	f7ff fdb4 	bl	8007fb4 <xTaskGetSchedulerState>
 800844c:	4603      	mov	r3, r0
 800844e:	2b02      	cmp	r3, #2
 8008450:	d109      	bne.n	8008466 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008452:	4b11      	ldr	r3, [pc, #68]	; (8008498 <xTimerGenericCommand+0x98>)
 8008454:	6818      	ldr	r0, [r3, #0]
 8008456:	f107 0110 	add.w	r1, r7, #16
 800845a:	2300      	movs	r3, #0
 800845c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800845e:	f7fe f903 	bl	8006668 <xQueueGenericSend>
 8008462:	6278      	str	r0, [r7, #36]	; 0x24
 8008464:	e012      	b.n	800848c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008466:	4b0c      	ldr	r3, [pc, #48]	; (8008498 <xTimerGenericCommand+0x98>)
 8008468:	6818      	ldr	r0, [r3, #0]
 800846a:	f107 0110 	add.w	r1, r7, #16
 800846e:	2300      	movs	r3, #0
 8008470:	2200      	movs	r2, #0
 8008472:	f7fe f8f9 	bl	8006668 <xQueueGenericSend>
 8008476:	6278      	str	r0, [r7, #36]	; 0x24
 8008478:	e008      	b.n	800848c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800847a:	4b07      	ldr	r3, [pc, #28]	; (8008498 <xTimerGenericCommand+0x98>)
 800847c:	6818      	ldr	r0, [r3, #0]
 800847e:	f107 0110 	add.w	r1, r7, #16
 8008482:	2300      	movs	r3, #0
 8008484:	683a      	ldr	r2, [r7, #0]
 8008486:	f7fe f9ed 	bl	8006864 <xQueueGenericSendFromISR>
 800848a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800848c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800848e:	4618      	mov	r0, r3
 8008490:	3728      	adds	r7, #40	; 0x28
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	20005f14 	.word	0x20005f14

0800849c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b088      	sub	sp, #32
 80084a0:	af02      	add	r7, sp, #8
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084a6:	4b22      	ldr	r3, [pc, #136]	; (8008530 <prvProcessExpiredTimer+0x94>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	3304      	adds	r3, #4
 80084b4:	4618      	mov	r0, r3
 80084b6:	f7fd fe4f 	bl	8006158 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084c0:	f003 0304 	and.w	r3, r3, #4
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d022      	beq.n	800850e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	699a      	ldr	r2, [r3, #24]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	18d1      	adds	r1, r2, r3
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	683a      	ldr	r2, [r7, #0]
 80084d4:	6978      	ldr	r0, [r7, #20]
 80084d6:	f000 f8d1 	bl	800867c <prvInsertTimerInActiveList>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d01f      	beq.n	8008520 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80084e0:	2300      	movs	r3, #0
 80084e2:	9300      	str	r3, [sp, #0]
 80084e4:	2300      	movs	r3, #0
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	2100      	movs	r1, #0
 80084ea:	6978      	ldr	r0, [r7, #20]
 80084ec:	f7ff ff88 	bl	8008400 <xTimerGenericCommand>
 80084f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d113      	bne.n	8008520 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80084f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084fc:	f383 8811 	msr	BASEPRI, r3
 8008500:	f3bf 8f6f 	isb	sy
 8008504:	f3bf 8f4f 	dsb	sy
 8008508:	60fb      	str	r3, [r7, #12]
}
 800850a:	bf00      	nop
 800850c:	e7fe      	b.n	800850c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008514:	f023 0301 	bic.w	r3, r3, #1
 8008518:	b2da      	uxtb	r2, r3
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	6a1b      	ldr	r3, [r3, #32]
 8008524:	6978      	ldr	r0, [r7, #20]
 8008526:	4798      	blx	r3
}
 8008528:	bf00      	nop
 800852a:	3718      	adds	r7, #24
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}
 8008530:	20005f0c 	.word	0x20005f0c

08008534 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800853c:	f107 0308 	add.w	r3, r7, #8
 8008540:	4618      	mov	r0, r3
 8008542:	f000 f857 	bl	80085f4 <prvGetNextExpireTime>
 8008546:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	4619      	mov	r1, r3
 800854c:	68f8      	ldr	r0, [r7, #12]
 800854e:	f000 f803 	bl	8008558 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008552:	f000 f8d5 	bl	8008700 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008556:	e7f1      	b.n	800853c <prvTimerTask+0x8>

08008558 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008562:	f7ff f923 	bl	80077ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008566:	f107 0308 	add.w	r3, r7, #8
 800856a:	4618      	mov	r0, r3
 800856c:	f000 f866 	bl	800863c <prvSampleTimeNow>
 8008570:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d130      	bne.n	80085da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d10a      	bne.n	8008594 <prvProcessTimerOrBlockTask+0x3c>
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	429a      	cmp	r2, r3
 8008584:	d806      	bhi.n	8008594 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008586:	f7ff f91f 	bl	80077c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800858a:	68f9      	ldr	r1, [r7, #12]
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f7ff ff85 	bl	800849c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008592:	e024      	b.n	80085de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d008      	beq.n	80085ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800859a:	4b13      	ldr	r3, [pc, #76]	; (80085e8 <prvProcessTimerOrBlockTask+0x90>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d101      	bne.n	80085a8 <prvProcessTimerOrBlockTask+0x50>
 80085a4:	2301      	movs	r3, #1
 80085a6:	e000      	b.n	80085aa <prvProcessTimerOrBlockTask+0x52>
 80085a8:	2300      	movs	r3, #0
 80085aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80085ac:	4b0f      	ldr	r3, [pc, #60]	; (80085ec <prvProcessTimerOrBlockTask+0x94>)
 80085ae:	6818      	ldr	r0, [r3, #0]
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	1ad3      	subs	r3, r2, r3
 80085b6:	683a      	ldr	r2, [r7, #0]
 80085b8:	4619      	mov	r1, r3
 80085ba:	f7fe fe87 	bl	80072cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80085be:	f7ff f903 	bl	80077c8 <xTaskResumeAll>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d10a      	bne.n	80085de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80085c8:	4b09      	ldr	r3, [pc, #36]	; (80085f0 <prvProcessTimerOrBlockTask+0x98>)
 80085ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085ce:	601a      	str	r2, [r3, #0]
 80085d0:	f3bf 8f4f 	dsb	sy
 80085d4:	f3bf 8f6f 	isb	sy
}
 80085d8:	e001      	b.n	80085de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80085da:	f7ff f8f5 	bl	80077c8 <xTaskResumeAll>
}
 80085de:	bf00      	nop
 80085e0:	3710      	adds	r7, #16
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	20005f10 	.word	0x20005f10
 80085ec:	20005f14 	.word	0x20005f14
 80085f0:	e000ed04 	.word	0xe000ed04

080085f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80085f4:	b480      	push	{r7}
 80085f6:	b085      	sub	sp, #20
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80085fc:	4b0e      	ldr	r3, [pc, #56]	; (8008638 <prvGetNextExpireTime+0x44>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d101      	bne.n	800860a <prvGetNextExpireTime+0x16>
 8008606:	2201      	movs	r2, #1
 8008608:	e000      	b.n	800860c <prvGetNextExpireTime+0x18>
 800860a:	2200      	movs	r2, #0
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d105      	bne.n	8008624 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008618:	4b07      	ldr	r3, [pc, #28]	; (8008638 <prvGetNextExpireTime+0x44>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	68db      	ldr	r3, [r3, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	60fb      	str	r3, [r7, #12]
 8008622:	e001      	b.n	8008628 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008624:	2300      	movs	r3, #0
 8008626:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008628:	68fb      	ldr	r3, [r7, #12]
}
 800862a:	4618      	mov	r0, r3
 800862c:	3714      	adds	r7, #20
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
 8008636:	bf00      	nop
 8008638:	20005f0c 	.word	0x20005f0c

0800863c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008644:	f7ff f95e 	bl	8007904 <xTaskGetTickCount>
 8008648:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800864a:	4b0b      	ldr	r3, [pc, #44]	; (8008678 <prvSampleTimeNow+0x3c>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	68fa      	ldr	r2, [r7, #12]
 8008650:	429a      	cmp	r2, r3
 8008652:	d205      	bcs.n	8008660 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008654:	f000 f936 	bl	80088c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	601a      	str	r2, [r3, #0]
 800865e:	e002      	b.n	8008666 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008666:	4a04      	ldr	r2, [pc, #16]	; (8008678 <prvSampleTimeNow+0x3c>)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800866c:	68fb      	ldr	r3, [r7, #12]
}
 800866e:	4618      	mov	r0, r3
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	20005f1c 	.word	0x20005f1c

0800867c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b086      	sub	sp, #24
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	607a      	str	r2, [r7, #4]
 8008688:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800868a:	2300      	movs	r3, #0
 800868c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	68ba      	ldr	r2, [r7, #8]
 8008692:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	68fa      	ldr	r2, [r7, #12]
 8008698:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800869a:	68ba      	ldr	r2, [r7, #8]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	429a      	cmp	r2, r3
 80086a0:	d812      	bhi.n	80086c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	1ad2      	subs	r2, r2, r3
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	699b      	ldr	r3, [r3, #24]
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d302      	bcc.n	80086b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80086b0:	2301      	movs	r3, #1
 80086b2:	617b      	str	r3, [r7, #20]
 80086b4:	e01b      	b.n	80086ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80086b6:	4b10      	ldr	r3, [pc, #64]	; (80086f8 <prvInsertTimerInActiveList+0x7c>)
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	3304      	adds	r3, #4
 80086be:	4619      	mov	r1, r3
 80086c0:	4610      	mov	r0, r2
 80086c2:	f7fd fd10 	bl	80060e6 <vListInsert>
 80086c6:	e012      	b.n	80086ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d206      	bcs.n	80086de <prvInsertTimerInActiveList+0x62>
 80086d0:	68ba      	ldr	r2, [r7, #8]
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d302      	bcc.n	80086de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80086d8:	2301      	movs	r3, #1
 80086da:	617b      	str	r3, [r7, #20]
 80086dc:	e007      	b.n	80086ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80086de:	4b07      	ldr	r3, [pc, #28]	; (80086fc <prvInsertTimerInActiveList+0x80>)
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	3304      	adds	r3, #4
 80086e6:	4619      	mov	r1, r3
 80086e8:	4610      	mov	r0, r2
 80086ea:	f7fd fcfc 	bl	80060e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80086ee:	697b      	ldr	r3, [r7, #20]
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3718      	adds	r7, #24
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}
 80086f8:	20005f10 	.word	0x20005f10
 80086fc:	20005f0c 	.word	0x20005f0c

08008700 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b08e      	sub	sp, #56	; 0x38
 8008704:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008706:	e0ca      	b.n	800889e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2b00      	cmp	r3, #0
 800870c:	da18      	bge.n	8008740 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800870e:	1d3b      	adds	r3, r7, #4
 8008710:	3304      	adds	r3, #4
 8008712:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008716:	2b00      	cmp	r3, #0
 8008718:	d10a      	bne.n	8008730 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800871a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800871e:	f383 8811 	msr	BASEPRI, r3
 8008722:	f3bf 8f6f 	isb	sy
 8008726:	f3bf 8f4f 	dsb	sy
 800872a:	61fb      	str	r3, [r7, #28]
}
 800872c:	bf00      	nop
 800872e:	e7fe      	b.n	800872e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008736:	6850      	ldr	r0, [r2, #4]
 8008738:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800873a:	6892      	ldr	r2, [r2, #8]
 800873c:	4611      	mov	r1, r2
 800873e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2b00      	cmp	r3, #0
 8008744:	f2c0 80aa 	blt.w	800889c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800874c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874e:	695b      	ldr	r3, [r3, #20]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d004      	beq.n	800875e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008756:	3304      	adds	r3, #4
 8008758:	4618      	mov	r0, r3
 800875a:	f7fd fcfd 	bl	8006158 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800875e:	463b      	mov	r3, r7
 8008760:	4618      	mov	r0, r3
 8008762:	f7ff ff6b 	bl	800863c <prvSampleTimeNow>
 8008766:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2b09      	cmp	r3, #9
 800876c:	f200 8097 	bhi.w	800889e <prvProcessReceivedCommands+0x19e>
 8008770:	a201      	add	r2, pc, #4	; (adr r2, 8008778 <prvProcessReceivedCommands+0x78>)
 8008772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008776:	bf00      	nop
 8008778:	080087a1 	.word	0x080087a1
 800877c:	080087a1 	.word	0x080087a1
 8008780:	080087a1 	.word	0x080087a1
 8008784:	08008815 	.word	0x08008815
 8008788:	08008829 	.word	0x08008829
 800878c:	08008873 	.word	0x08008873
 8008790:	080087a1 	.word	0x080087a1
 8008794:	080087a1 	.word	0x080087a1
 8008798:	08008815 	.word	0x08008815
 800879c:	08008829 	.word	0x08008829
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80087a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087a6:	f043 0301 	orr.w	r3, r3, #1
 80087aa:	b2da      	uxtb	r2, r3
 80087ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80087b2:	68ba      	ldr	r2, [r7, #8]
 80087b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b6:	699b      	ldr	r3, [r3, #24]
 80087b8:	18d1      	adds	r1, r2, r3
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087c0:	f7ff ff5c 	bl	800867c <prvInsertTimerInActiveList>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d069      	beq.n	800889e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80087ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087cc:	6a1b      	ldr	r3, [r3, #32]
 80087ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80087d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087d8:	f003 0304 	and.w	r3, r3, #4
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d05e      	beq.n	800889e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80087e0:	68ba      	ldr	r2, [r7, #8]
 80087e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e4:	699b      	ldr	r3, [r3, #24]
 80087e6:	441a      	add	r2, r3
 80087e8:	2300      	movs	r3, #0
 80087ea:	9300      	str	r3, [sp, #0]
 80087ec:	2300      	movs	r3, #0
 80087ee:	2100      	movs	r1, #0
 80087f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087f2:	f7ff fe05 	bl	8008400 <xTimerGenericCommand>
 80087f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80087f8:	6a3b      	ldr	r3, [r7, #32]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d14f      	bne.n	800889e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80087fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008802:	f383 8811 	msr	BASEPRI, r3
 8008806:	f3bf 8f6f 	isb	sy
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	61bb      	str	r3, [r7, #24]
}
 8008810:	bf00      	nop
 8008812:	e7fe      	b.n	8008812 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008816:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800881a:	f023 0301 	bic.w	r3, r3, #1
 800881e:	b2da      	uxtb	r2, r3
 8008820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008822:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008826:	e03a      	b.n	800889e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800882a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800882e:	f043 0301 	orr.w	r3, r3, #1
 8008832:	b2da      	uxtb	r2, r3
 8008834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008836:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800883e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008842:	699b      	ldr	r3, [r3, #24]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d10a      	bne.n	800885e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884c:	f383 8811 	msr	BASEPRI, r3
 8008850:	f3bf 8f6f 	isb	sy
 8008854:	f3bf 8f4f 	dsb	sy
 8008858:	617b      	str	r3, [r7, #20]
}
 800885a:	bf00      	nop
 800885c:	e7fe      	b.n	800885c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800885e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008860:	699a      	ldr	r2, [r3, #24]
 8008862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008864:	18d1      	adds	r1, r2, r3
 8008866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800886a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800886c:	f7ff ff06 	bl	800867c <prvInsertTimerInActiveList>
					break;
 8008870:	e015      	b.n	800889e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008874:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008878:	f003 0302 	and.w	r3, r3, #2
 800887c:	2b00      	cmp	r3, #0
 800887e:	d103      	bne.n	8008888 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008880:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008882:	f000 fbdd 	bl	8009040 <vPortFree>
 8008886:	e00a      	b.n	800889e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800888a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800888e:	f023 0301 	bic.w	r3, r3, #1
 8008892:	b2da      	uxtb	r2, r3
 8008894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008896:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800889a:	e000      	b.n	800889e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800889c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800889e:	4b08      	ldr	r3, [pc, #32]	; (80088c0 <prvProcessReceivedCommands+0x1c0>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	1d39      	adds	r1, r7, #4
 80088a4:	2200      	movs	r2, #0
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7fe f904 	bl	8006ab4 <xQueueReceive>
 80088ac:	4603      	mov	r3, r0
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	f47f af2a 	bne.w	8008708 <prvProcessReceivedCommands+0x8>
	}
}
 80088b4:	bf00      	nop
 80088b6:	bf00      	nop
 80088b8:	3730      	adds	r7, #48	; 0x30
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	20005f14 	.word	0x20005f14

080088c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b088      	sub	sp, #32
 80088c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80088ca:	e048      	b.n	800895e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80088cc:	4b2d      	ldr	r3, [pc, #180]	; (8008984 <prvSwitchTimerLists+0xc0>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	68db      	ldr	r3, [r3, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088d6:	4b2b      	ldr	r3, [pc, #172]	; (8008984 <prvSwitchTimerLists+0xc0>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	3304      	adds	r3, #4
 80088e4:	4618      	mov	r0, r3
 80088e6:	f7fd fc37 	bl	8006158 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6a1b      	ldr	r3, [r3, #32]
 80088ee:	68f8      	ldr	r0, [r7, #12]
 80088f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088f8:	f003 0304 	and.w	r3, r3, #4
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d02e      	beq.n	800895e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	699b      	ldr	r3, [r3, #24]
 8008904:	693a      	ldr	r2, [r7, #16]
 8008906:	4413      	add	r3, r2
 8008908:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800890a:	68ba      	ldr	r2, [r7, #8]
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	429a      	cmp	r2, r3
 8008910:	d90e      	bls.n	8008930 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	68ba      	ldr	r2, [r7, #8]
 8008916:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	68fa      	ldr	r2, [r7, #12]
 800891c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800891e:	4b19      	ldr	r3, [pc, #100]	; (8008984 <prvSwitchTimerLists+0xc0>)
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	3304      	adds	r3, #4
 8008926:	4619      	mov	r1, r3
 8008928:	4610      	mov	r0, r2
 800892a:	f7fd fbdc 	bl	80060e6 <vListInsert>
 800892e:	e016      	b.n	800895e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008930:	2300      	movs	r3, #0
 8008932:	9300      	str	r3, [sp, #0]
 8008934:	2300      	movs	r3, #0
 8008936:	693a      	ldr	r2, [r7, #16]
 8008938:	2100      	movs	r1, #0
 800893a:	68f8      	ldr	r0, [r7, #12]
 800893c:	f7ff fd60 	bl	8008400 <xTimerGenericCommand>
 8008940:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d10a      	bne.n	800895e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800894c:	f383 8811 	msr	BASEPRI, r3
 8008950:	f3bf 8f6f 	isb	sy
 8008954:	f3bf 8f4f 	dsb	sy
 8008958:	603b      	str	r3, [r7, #0]
}
 800895a:	bf00      	nop
 800895c:	e7fe      	b.n	800895c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800895e:	4b09      	ldr	r3, [pc, #36]	; (8008984 <prvSwitchTimerLists+0xc0>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d1b1      	bne.n	80088cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008968:	4b06      	ldr	r3, [pc, #24]	; (8008984 <prvSwitchTimerLists+0xc0>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800896e:	4b06      	ldr	r3, [pc, #24]	; (8008988 <prvSwitchTimerLists+0xc4>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a04      	ldr	r2, [pc, #16]	; (8008984 <prvSwitchTimerLists+0xc0>)
 8008974:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008976:	4a04      	ldr	r2, [pc, #16]	; (8008988 <prvSwitchTimerLists+0xc4>)
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	6013      	str	r3, [r2, #0]
}
 800897c:	bf00      	nop
 800897e:	3718      	adds	r7, #24
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}
 8008984:	20005f0c 	.word	0x20005f0c
 8008988:	20005f10 	.word	0x20005f10

0800898c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008992:	f000 f967 	bl	8008c64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008996:	4b15      	ldr	r3, [pc, #84]	; (80089ec <prvCheckForValidListAndQueue+0x60>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d120      	bne.n	80089e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800899e:	4814      	ldr	r0, [pc, #80]	; (80089f0 <prvCheckForValidListAndQueue+0x64>)
 80089a0:	f7fd fb50 	bl	8006044 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80089a4:	4813      	ldr	r0, [pc, #76]	; (80089f4 <prvCheckForValidListAndQueue+0x68>)
 80089a6:	f7fd fb4d 	bl	8006044 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80089aa:	4b13      	ldr	r3, [pc, #76]	; (80089f8 <prvCheckForValidListAndQueue+0x6c>)
 80089ac:	4a10      	ldr	r2, [pc, #64]	; (80089f0 <prvCheckForValidListAndQueue+0x64>)
 80089ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80089b0:	4b12      	ldr	r3, [pc, #72]	; (80089fc <prvCheckForValidListAndQueue+0x70>)
 80089b2:	4a10      	ldr	r2, [pc, #64]	; (80089f4 <prvCheckForValidListAndQueue+0x68>)
 80089b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80089b6:	2300      	movs	r3, #0
 80089b8:	9300      	str	r3, [sp, #0]
 80089ba:	4b11      	ldr	r3, [pc, #68]	; (8008a00 <prvCheckForValidListAndQueue+0x74>)
 80089bc:	4a11      	ldr	r2, [pc, #68]	; (8008a04 <prvCheckForValidListAndQueue+0x78>)
 80089be:	2110      	movs	r1, #16
 80089c0:	200a      	movs	r0, #10
 80089c2:	f7fd fc5b 	bl	800627c <xQueueGenericCreateStatic>
 80089c6:	4603      	mov	r3, r0
 80089c8:	4a08      	ldr	r2, [pc, #32]	; (80089ec <prvCheckForValidListAndQueue+0x60>)
 80089ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80089cc:	4b07      	ldr	r3, [pc, #28]	; (80089ec <prvCheckForValidListAndQueue+0x60>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d005      	beq.n	80089e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80089d4:	4b05      	ldr	r3, [pc, #20]	; (80089ec <prvCheckForValidListAndQueue+0x60>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	490b      	ldr	r1, [pc, #44]	; (8008a08 <prvCheckForValidListAndQueue+0x7c>)
 80089da:	4618      	mov	r0, r3
 80089dc:	f7fe fc22 	bl	8007224 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80089e0:	f000 f970 	bl	8008cc4 <vPortExitCritical>
}
 80089e4:	bf00      	nop
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	bf00      	nop
 80089ec:	20005f14 	.word	0x20005f14
 80089f0:	20005ee4 	.word	0x20005ee4
 80089f4:	20005ef8 	.word	0x20005ef8
 80089f8:	20005f0c 	.word	0x20005f0c
 80089fc:	20005f10 	.word	0x20005f10
 8008a00:	20005fc0 	.word	0x20005fc0
 8008a04:	20005f20 	.word	0x20005f20
 8008a08:	0801846c 	.word	0x0801846c

08008a0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b085      	sub	sp, #20
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	3b04      	subs	r3, #4
 8008a1c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008a24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	3b04      	subs	r3, #4
 8008a2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	f023 0201 	bic.w	r2, r3, #1
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	3b04      	subs	r3, #4
 8008a3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008a3c:	4a0c      	ldr	r2, [pc, #48]	; (8008a70 <pxPortInitialiseStack+0x64>)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	3b14      	subs	r3, #20
 8008a46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	3b04      	subs	r3, #4
 8008a52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f06f 0202 	mvn.w	r2, #2
 8008a5a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	3b20      	subs	r3, #32
 8008a60:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008a62:	68fb      	ldr	r3, [r7, #12]
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3714      	adds	r7, #20
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr
 8008a70:	08008a75 	.word	0x08008a75

08008a74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008a74:	b480      	push	{r7}
 8008a76:	b085      	sub	sp, #20
 8008a78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008a7e:	4b12      	ldr	r3, [pc, #72]	; (8008ac8 <prvTaskExitError+0x54>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a86:	d00a      	beq.n	8008a9e <prvTaskExitError+0x2a>
	__asm volatile
 8008a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a8c:	f383 8811 	msr	BASEPRI, r3
 8008a90:	f3bf 8f6f 	isb	sy
 8008a94:	f3bf 8f4f 	dsb	sy
 8008a98:	60fb      	str	r3, [r7, #12]
}
 8008a9a:	bf00      	nop
 8008a9c:	e7fe      	b.n	8008a9c <prvTaskExitError+0x28>
	__asm volatile
 8008a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa2:	f383 8811 	msr	BASEPRI, r3
 8008aa6:	f3bf 8f6f 	isb	sy
 8008aaa:	f3bf 8f4f 	dsb	sy
 8008aae:	60bb      	str	r3, [r7, #8]
}
 8008ab0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008ab2:	bf00      	nop
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d0fc      	beq.n	8008ab4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008aba:	bf00      	nop
 8008abc:	bf00      	nop
 8008abe:	3714      	adds	r7, #20
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr
 8008ac8:	20000020 	.word	0x20000020
 8008acc:	00000000 	.word	0x00000000

08008ad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ad0:	4b07      	ldr	r3, [pc, #28]	; (8008af0 <pxCurrentTCBConst2>)
 8008ad2:	6819      	ldr	r1, [r3, #0]
 8008ad4:	6808      	ldr	r0, [r1, #0]
 8008ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ada:	f380 8809 	msr	PSP, r0
 8008ade:	f3bf 8f6f 	isb	sy
 8008ae2:	f04f 0000 	mov.w	r0, #0
 8008ae6:	f380 8811 	msr	BASEPRI, r0
 8008aea:	4770      	bx	lr
 8008aec:	f3af 8000 	nop.w

08008af0 <pxCurrentTCBConst2>:
 8008af0:	200059e4 	.word	0x200059e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008af4:	bf00      	nop
 8008af6:	bf00      	nop

08008af8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008af8:	4808      	ldr	r0, [pc, #32]	; (8008b1c <prvPortStartFirstTask+0x24>)
 8008afa:	6800      	ldr	r0, [r0, #0]
 8008afc:	6800      	ldr	r0, [r0, #0]
 8008afe:	f380 8808 	msr	MSP, r0
 8008b02:	f04f 0000 	mov.w	r0, #0
 8008b06:	f380 8814 	msr	CONTROL, r0
 8008b0a:	b662      	cpsie	i
 8008b0c:	b661      	cpsie	f
 8008b0e:	f3bf 8f4f 	dsb	sy
 8008b12:	f3bf 8f6f 	isb	sy
 8008b16:	df00      	svc	0
 8008b18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008b1a:	bf00      	nop
 8008b1c:	e000ed08 	.word	0xe000ed08

08008b20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b086      	sub	sp, #24
 8008b24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008b26:	4b46      	ldr	r3, [pc, #280]	; (8008c40 <xPortStartScheduler+0x120>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a46      	ldr	r2, [pc, #280]	; (8008c44 <xPortStartScheduler+0x124>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d10a      	bne.n	8008b46 <xPortStartScheduler+0x26>
	__asm volatile
 8008b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b34:	f383 8811 	msr	BASEPRI, r3
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	613b      	str	r3, [r7, #16]
}
 8008b42:	bf00      	nop
 8008b44:	e7fe      	b.n	8008b44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008b46:	4b3e      	ldr	r3, [pc, #248]	; (8008c40 <xPortStartScheduler+0x120>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a3f      	ldr	r2, [pc, #252]	; (8008c48 <xPortStartScheduler+0x128>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d10a      	bne.n	8008b66 <xPortStartScheduler+0x46>
	__asm volatile
 8008b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b54:	f383 8811 	msr	BASEPRI, r3
 8008b58:	f3bf 8f6f 	isb	sy
 8008b5c:	f3bf 8f4f 	dsb	sy
 8008b60:	60fb      	str	r3, [r7, #12]
}
 8008b62:	bf00      	nop
 8008b64:	e7fe      	b.n	8008b64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008b66:	4b39      	ldr	r3, [pc, #228]	; (8008c4c <xPortStartScheduler+0x12c>)
 8008b68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	22ff      	movs	r2, #255	; 0xff
 8008b76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008b80:	78fb      	ldrb	r3, [r7, #3]
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008b88:	b2da      	uxtb	r2, r3
 8008b8a:	4b31      	ldr	r3, [pc, #196]	; (8008c50 <xPortStartScheduler+0x130>)
 8008b8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008b8e:	4b31      	ldr	r3, [pc, #196]	; (8008c54 <xPortStartScheduler+0x134>)
 8008b90:	2207      	movs	r2, #7
 8008b92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b94:	e009      	b.n	8008baa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008b96:	4b2f      	ldr	r3, [pc, #188]	; (8008c54 <xPortStartScheduler+0x134>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	4a2d      	ldr	r2, [pc, #180]	; (8008c54 <xPortStartScheduler+0x134>)
 8008b9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ba0:	78fb      	ldrb	r3, [r7, #3]
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	005b      	lsls	r3, r3, #1
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008baa:	78fb      	ldrb	r3, [r7, #3]
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bb2:	2b80      	cmp	r3, #128	; 0x80
 8008bb4:	d0ef      	beq.n	8008b96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008bb6:	4b27      	ldr	r3, [pc, #156]	; (8008c54 <xPortStartScheduler+0x134>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f1c3 0307 	rsb	r3, r3, #7
 8008bbe:	2b04      	cmp	r3, #4
 8008bc0:	d00a      	beq.n	8008bd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc6:	f383 8811 	msr	BASEPRI, r3
 8008bca:	f3bf 8f6f 	isb	sy
 8008bce:	f3bf 8f4f 	dsb	sy
 8008bd2:	60bb      	str	r3, [r7, #8]
}
 8008bd4:	bf00      	nop
 8008bd6:	e7fe      	b.n	8008bd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008bd8:	4b1e      	ldr	r3, [pc, #120]	; (8008c54 <xPortStartScheduler+0x134>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	021b      	lsls	r3, r3, #8
 8008bde:	4a1d      	ldr	r2, [pc, #116]	; (8008c54 <xPortStartScheduler+0x134>)
 8008be0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008be2:	4b1c      	ldr	r3, [pc, #112]	; (8008c54 <xPortStartScheduler+0x134>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008bea:	4a1a      	ldr	r2, [pc, #104]	; (8008c54 <xPortStartScheduler+0x134>)
 8008bec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	b2da      	uxtb	r2, r3
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008bf6:	4b18      	ldr	r3, [pc, #96]	; (8008c58 <xPortStartScheduler+0x138>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a17      	ldr	r2, [pc, #92]	; (8008c58 <xPortStartScheduler+0x138>)
 8008bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008c00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008c02:	4b15      	ldr	r3, [pc, #84]	; (8008c58 <xPortStartScheduler+0x138>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a14      	ldr	r2, [pc, #80]	; (8008c58 <xPortStartScheduler+0x138>)
 8008c08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008c0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008c0e:	f000 f8dd 	bl	8008dcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008c12:	4b12      	ldr	r3, [pc, #72]	; (8008c5c <xPortStartScheduler+0x13c>)
 8008c14:	2200      	movs	r2, #0
 8008c16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008c18:	f000 f8fc 	bl	8008e14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008c1c:	4b10      	ldr	r3, [pc, #64]	; (8008c60 <xPortStartScheduler+0x140>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a0f      	ldr	r2, [pc, #60]	; (8008c60 <xPortStartScheduler+0x140>)
 8008c22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008c26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008c28:	f7ff ff66 	bl	8008af8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008c2c:	f7fe ff46 	bl	8007abc <vTaskSwitchContext>
	prvTaskExitError();
 8008c30:	f7ff ff20 	bl	8008a74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3718      	adds	r7, #24
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	e000ed00 	.word	0xe000ed00
 8008c44:	410fc271 	.word	0x410fc271
 8008c48:	410fc270 	.word	0x410fc270
 8008c4c:	e000e400 	.word	0xe000e400
 8008c50:	20006010 	.word	0x20006010
 8008c54:	20006014 	.word	0x20006014
 8008c58:	e000ed20 	.word	0xe000ed20
 8008c5c:	20000020 	.word	0x20000020
 8008c60:	e000ef34 	.word	0xe000ef34

08008c64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
	__asm volatile
 8008c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6e:	f383 8811 	msr	BASEPRI, r3
 8008c72:	f3bf 8f6f 	isb	sy
 8008c76:	f3bf 8f4f 	dsb	sy
 8008c7a:	607b      	str	r3, [r7, #4]
}
 8008c7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008c7e:	4b0f      	ldr	r3, [pc, #60]	; (8008cbc <vPortEnterCritical+0x58>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	3301      	adds	r3, #1
 8008c84:	4a0d      	ldr	r2, [pc, #52]	; (8008cbc <vPortEnterCritical+0x58>)
 8008c86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008c88:	4b0c      	ldr	r3, [pc, #48]	; (8008cbc <vPortEnterCritical+0x58>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d10f      	bne.n	8008cb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008c90:	4b0b      	ldr	r3, [pc, #44]	; (8008cc0 <vPortEnterCritical+0x5c>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d00a      	beq.n	8008cb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9e:	f383 8811 	msr	BASEPRI, r3
 8008ca2:	f3bf 8f6f 	isb	sy
 8008ca6:	f3bf 8f4f 	dsb	sy
 8008caa:	603b      	str	r3, [r7, #0]
}
 8008cac:	bf00      	nop
 8008cae:	e7fe      	b.n	8008cae <vPortEnterCritical+0x4a>
	}
}
 8008cb0:	bf00      	nop
 8008cb2:	370c      	adds	r7, #12
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr
 8008cbc:	20000020 	.word	0x20000020
 8008cc0:	e000ed04 	.word	0xe000ed04

08008cc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008cca:	4b12      	ldr	r3, [pc, #72]	; (8008d14 <vPortExitCritical+0x50>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d10a      	bne.n	8008ce8 <vPortExitCritical+0x24>
	__asm volatile
 8008cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd6:	f383 8811 	msr	BASEPRI, r3
 8008cda:	f3bf 8f6f 	isb	sy
 8008cde:	f3bf 8f4f 	dsb	sy
 8008ce2:	607b      	str	r3, [r7, #4]
}
 8008ce4:	bf00      	nop
 8008ce6:	e7fe      	b.n	8008ce6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008ce8:	4b0a      	ldr	r3, [pc, #40]	; (8008d14 <vPortExitCritical+0x50>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	3b01      	subs	r3, #1
 8008cee:	4a09      	ldr	r2, [pc, #36]	; (8008d14 <vPortExitCritical+0x50>)
 8008cf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008cf2:	4b08      	ldr	r3, [pc, #32]	; (8008d14 <vPortExitCritical+0x50>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d105      	bne.n	8008d06 <vPortExitCritical+0x42>
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	f383 8811 	msr	BASEPRI, r3
}
 8008d04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008d06:	bf00      	nop
 8008d08:	370c      	adds	r7, #12
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr
 8008d12:	bf00      	nop
 8008d14:	20000020 	.word	0x20000020
	...

08008d20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008d20:	f3ef 8009 	mrs	r0, PSP
 8008d24:	f3bf 8f6f 	isb	sy
 8008d28:	4b15      	ldr	r3, [pc, #84]	; (8008d80 <pxCurrentTCBConst>)
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	f01e 0f10 	tst.w	lr, #16
 8008d30:	bf08      	it	eq
 8008d32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008d36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d3a:	6010      	str	r0, [r2, #0]
 8008d3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008d40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008d44:	f380 8811 	msr	BASEPRI, r0
 8008d48:	f3bf 8f4f 	dsb	sy
 8008d4c:	f3bf 8f6f 	isb	sy
 8008d50:	f7fe feb4 	bl	8007abc <vTaskSwitchContext>
 8008d54:	f04f 0000 	mov.w	r0, #0
 8008d58:	f380 8811 	msr	BASEPRI, r0
 8008d5c:	bc09      	pop	{r0, r3}
 8008d5e:	6819      	ldr	r1, [r3, #0]
 8008d60:	6808      	ldr	r0, [r1, #0]
 8008d62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d66:	f01e 0f10 	tst.w	lr, #16
 8008d6a:	bf08      	it	eq
 8008d6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008d70:	f380 8809 	msr	PSP, r0
 8008d74:	f3bf 8f6f 	isb	sy
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop
 8008d7c:	f3af 8000 	nop.w

08008d80 <pxCurrentTCBConst>:
 8008d80:	200059e4 	.word	0x200059e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008d84:	bf00      	nop
 8008d86:	bf00      	nop

08008d88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
	__asm volatile
 8008d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d92:	f383 8811 	msr	BASEPRI, r3
 8008d96:	f3bf 8f6f 	isb	sy
 8008d9a:	f3bf 8f4f 	dsb	sy
 8008d9e:	607b      	str	r3, [r7, #4]
}
 8008da0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008da2:	f7fe fdd1 	bl	8007948 <xTaskIncrementTick>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d003      	beq.n	8008db4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008dac:	4b06      	ldr	r3, [pc, #24]	; (8008dc8 <xPortSysTickHandler+0x40>)
 8008dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008db2:	601a      	str	r2, [r3, #0]
 8008db4:	2300      	movs	r3, #0
 8008db6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	f383 8811 	msr	BASEPRI, r3
}
 8008dbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008dc0:	bf00      	nop
 8008dc2:	3708      	adds	r7, #8
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	e000ed04 	.word	0xe000ed04

08008dcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008dcc:	b480      	push	{r7}
 8008dce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008dd0:	4b0b      	ldr	r3, [pc, #44]	; (8008e00 <vPortSetupTimerInterrupt+0x34>)
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008dd6:	4b0b      	ldr	r3, [pc, #44]	; (8008e04 <vPortSetupTimerInterrupt+0x38>)
 8008dd8:	2200      	movs	r2, #0
 8008dda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008ddc:	4b0a      	ldr	r3, [pc, #40]	; (8008e08 <vPortSetupTimerInterrupt+0x3c>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a0a      	ldr	r2, [pc, #40]	; (8008e0c <vPortSetupTimerInterrupt+0x40>)
 8008de2:	fba2 2303 	umull	r2, r3, r2, r3
 8008de6:	099b      	lsrs	r3, r3, #6
 8008de8:	4a09      	ldr	r2, [pc, #36]	; (8008e10 <vPortSetupTimerInterrupt+0x44>)
 8008dea:	3b01      	subs	r3, #1
 8008dec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008dee:	4b04      	ldr	r3, [pc, #16]	; (8008e00 <vPortSetupTimerInterrupt+0x34>)
 8008df0:	2207      	movs	r2, #7
 8008df2:	601a      	str	r2, [r3, #0]
}
 8008df4:	bf00      	nop
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr
 8008dfe:	bf00      	nop
 8008e00:	e000e010 	.word	0xe000e010
 8008e04:	e000e018 	.word	0xe000e018
 8008e08:	20000000 	.word	0x20000000
 8008e0c:	10624dd3 	.word	0x10624dd3
 8008e10:	e000e014 	.word	0xe000e014

08008e14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008e14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008e24 <vPortEnableVFP+0x10>
 8008e18:	6801      	ldr	r1, [r0, #0]
 8008e1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008e1e:	6001      	str	r1, [r0, #0]
 8008e20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008e22:	bf00      	nop
 8008e24:	e000ed88 	.word	0xe000ed88

08008e28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008e28:	b480      	push	{r7}
 8008e2a:	b085      	sub	sp, #20
 8008e2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008e2e:	f3ef 8305 	mrs	r3, IPSR
 8008e32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2b0f      	cmp	r3, #15
 8008e38:	d914      	bls.n	8008e64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008e3a:	4a17      	ldr	r2, [pc, #92]	; (8008e98 <vPortValidateInterruptPriority+0x70>)
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	4413      	add	r3, r2
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008e44:	4b15      	ldr	r3, [pc, #84]	; (8008e9c <vPortValidateInterruptPriority+0x74>)
 8008e46:	781b      	ldrb	r3, [r3, #0]
 8008e48:	7afa      	ldrb	r2, [r7, #11]
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d20a      	bcs.n	8008e64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e52:	f383 8811 	msr	BASEPRI, r3
 8008e56:	f3bf 8f6f 	isb	sy
 8008e5a:	f3bf 8f4f 	dsb	sy
 8008e5e:	607b      	str	r3, [r7, #4]
}
 8008e60:	bf00      	nop
 8008e62:	e7fe      	b.n	8008e62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008e64:	4b0e      	ldr	r3, [pc, #56]	; (8008ea0 <vPortValidateInterruptPriority+0x78>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008e6c:	4b0d      	ldr	r3, [pc, #52]	; (8008ea4 <vPortValidateInterruptPriority+0x7c>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d90a      	bls.n	8008e8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e78:	f383 8811 	msr	BASEPRI, r3
 8008e7c:	f3bf 8f6f 	isb	sy
 8008e80:	f3bf 8f4f 	dsb	sy
 8008e84:	603b      	str	r3, [r7, #0]
}
 8008e86:	bf00      	nop
 8008e88:	e7fe      	b.n	8008e88 <vPortValidateInterruptPriority+0x60>
	}
 8008e8a:	bf00      	nop
 8008e8c:	3714      	adds	r7, #20
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr
 8008e96:	bf00      	nop
 8008e98:	e000e3f0 	.word	0xe000e3f0
 8008e9c:	20006010 	.word	0x20006010
 8008ea0:	e000ed0c 	.word	0xe000ed0c
 8008ea4:	20006014 	.word	0x20006014

08008ea8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b08a      	sub	sp, #40	; 0x28
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008eb4:	f7fe fc7a 	bl	80077ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008eb8:	4b5b      	ldr	r3, [pc, #364]	; (8009028 <pvPortMalloc+0x180>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d101      	bne.n	8008ec4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008ec0:	f000 f920 	bl	8009104 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008ec4:	4b59      	ldr	r3, [pc, #356]	; (800902c <pvPortMalloc+0x184>)
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	4013      	ands	r3, r2
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	f040 8093 	bne.w	8008ff8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d01d      	beq.n	8008f14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008ed8:	2208      	movs	r2, #8
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4413      	add	r3, r2
 8008ede:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f003 0307 	and.w	r3, r3, #7
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d014      	beq.n	8008f14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f023 0307 	bic.w	r3, r3, #7
 8008ef0:	3308      	adds	r3, #8
 8008ef2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f003 0307 	and.w	r3, r3, #7
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00a      	beq.n	8008f14 <pvPortMalloc+0x6c>
	__asm volatile
 8008efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f02:	f383 8811 	msr	BASEPRI, r3
 8008f06:	f3bf 8f6f 	isb	sy
 8008f0a:	f3bf 8f4f 	dsb	sy
 8008f0e:	617b      	str	r3, [r7, #20]
}
 8008f10:	bf00      	nop
 8008f12:	e7fe      	b.n	8008f12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d06e      	beq.n	8008ff8 <pvPortMalloc+0x150>
 8008f1a:	4b45      	ldr	r3, [pc, #276]	; (8009030 <pvPortMalloc+0x188>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d869      	bhi.n	8008ff8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008f24:	4b43      	ldr	r3, [pc, #268]	; (8009034 <pvPortMalloc+0x18c>)
 8008f26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008f28:	4b42      	ldr	r3, [pc, #264]	; (8009034 <pvPortMalloc+0x18c>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f2e:	e004      	b.n	8008f3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d903      	bls.n	8008f4c <pvPortMalloc+0xa4>
 8008f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d1f1      	bne.n	8008f30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008f4c:	4b36      	ldr	r3, [pc, #216]	; (8009028 <pvPortMalloc+0x180>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d050      	beq.n	8008ff8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008f56:	6a3b      	ldr	r3, [r7, #32]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2208      	movs	r2, #8
 8008f5c:	4413      	add	r3, r2
 8008f5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f62:	681a      	ldr	r2, [r3, #0]
 8008f64:	6a3b      	ldr	r3, [r7, #32]
 8008f66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6a:	685a      	ldr	r2, [r3, #4]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	1ad2      	subs	r2, r2, r3
 8008f70:	2308      	movs	r3, #8
 8008f72:	005b      	lsls	r3, r3, #1
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d91f      	bls.n	8008fb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f80:	69bb      	ldr	r3, [r7, #24]
 8008f82:	f003 0307 	and.w	r3, r3, #7
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d00a      	beq.n	8008fa0 <pvPortMalloc+0xf8>
	__asm volatile
 8008f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f8e:	f383 8811 	msr	BASEPRI, r3
 8008f92:	f3bf 8f6f 	isb	sy
 8008f96:	f3bf 8f4f 	dsb	sy
 8008f9a:	613b      	str	r3, [r7, #16]
}
 8008f9c:	bf00      	nop
 8008f9e:	e7fe      	b.n	8008f9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa2:	685a      	ldr	r2, [r3, #4]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	1ad2      	subs	r2, r2, r3
 8008fa8:	69bb      	ldr	r3, [r7, #24]
 8008faa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008fb2:	69b8      	ldr	r0, [r7, #24]
 8008fb4:	f000 f908 	bl	80091c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008fb8:	4b1d      	ldr	r3, [pc, #116]	; (8009030 <pvPortMalloc+0x188>)
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	1ad3      	subs	r3, r2, r3
 8008fc2:	4a1b      	ldr	r2, [pc, #108]	; (8009030 <pvPortMalloc+0x188>)
 8008fc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008fc6:	4b1a      	ldr	r3, [pc, #104]	; (8009030 <pvPortMalloc+0x188>)
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	4b1b      	ldr	r3, [pc, #108]	; (8009038 <pvPortMalloc+0x190>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d203      	bcs.n	8008fda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008fd2:	4b17      	ldr	r3, [pc, #92]	; (8009030 <pvPortMalloc+0x188>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4a18      	ldr	r2, [pc, #96]	; (8009038 <pvPortMalloc+0x190>)
 8008fd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fdc:	685a      	ldr	r2, [r3, #4]
 8008fde:	4b13      	ldr	r3, [pc, #76]	; (800902c <pvPortMalloc+0x184>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	431a      	orrs	r2, r3
 8008fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fea:	2200      	movs	r2, #0
 8008fec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008fee:	4b13      	ldr	r3, [pc, #76]	; (800903c <pvPortMalloc+0x194>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	4a11      	ldr	r2, [pc, #68]	; (800903c <pvPortMalloc+0x194>)
 8008ff6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008ff8:	f7fe fbe6 	bl	80077c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ffc:	69fb      	ldr	r3, [r7, #28]
 8008ffe:	f003 0307 	and.w	r3, r3, #7
 8009002:	2b00      	cmp	r3, #0
 8009004:	d00a      	beq.n	800901c <pvPortMalloc+0x174>
	__asm volatile
 8009006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900a:	f383 8811 	msr	BASEPRI, r3
 800900e:	f3bf 8f6f 	isb	sy
 8009012:	f3bf 8f4f 	dsb	sy
 8009016:	60fb      	str	r3, [r7, #12]
}
 8009018:	bf00      	nop
 800901a:	e7fe      	b.n	800901a <pvPortMalloc+0x172>
	return pvReturn;
 800901c:	69fb      	ldr	r3, [r7, #28]
}
 800901e:	4618      	mov	r0, r3
 8009020:	3728      	adds	r7, #40	; 0x28
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	20009c20 	.word	0x20009c20
 800902c:	20009c34 	.word	0x20009c34
 8009030:	20009c24 	.word	0x20009c24
 8009034:	20009c18 	.word	0x20009c18
 8009038:	20009c28 	.word	0x20009c28
 800903c:	20009c2c 	.word	0x20009c2c

08009040 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b086      	sub	sp, #24
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d04d      	beq.n	80090ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009052:	2308      	movs	r3, #8
 8009054:	425b      	negs	r3, r3
 8009056:	697a      	ldr	r2, [r7, #20]
 8009058:	4413      	add	r3, r2
 800905a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	685a      	ldr	r2, [r3, #4]
 8009064:	4b24      	ldr	r3, [pc, #144]	; (80090f8 <vPortFree+0xb8>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4013      	ands	r3, r2
 800906a:	2b00      	cmp	r3, #0
 800906c:	d10a      	bne.n	8009084 <vPortFree+0x44>
	__asm volatile
 800906e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009072:	f383 8811 	msr	BASEPRI, r3
 8009076:	f3bf 8f6f 	isb	sy
 800907a:	f3bf 8f4f 	dsb	sy
 800907e:	60fb      	str	r3, [r7, #12]
}
 8009080:	bf00      	nop
 8009082:	e7fe      	b.n	8009082 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d00a      	beq.n	80090a2 <vPortFree+0x62>
	__asm volatile
 800908c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009090:	f383 8811 	msr	BASEPRI, r3
 8009094:	f3bf 8f6f 	isb	sy
 8009098:	f3bf 8f4f 	dsb	sy
 800909c:	60bb      	str	r3, [r7, #8]
}
 800909e:	bf00      	nop
 80090a0:	e7fe      	b.n	80090a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	685a      	ldr	r2, [r3, #4]
 80090a6:	4b14      	ldr	r3, [pc, #80]	; (80090f8 <vPortFree+0xb8>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4013      	ands	r3, r2
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d01e      	beq.n	80090ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d11a      	bne.n	80090ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	685a      	ldr	r2, [r3, #4]
 80090bc:	4b0e      	ldr	r3, [pc, #56]	; (80090f8 <vPortFree+0xb8>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	43db      	mvns	r3, r3
 80090c2:	401a      	ands	r2, r3
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80090c8:	f7fe fb70 	bl	80077ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	685a      	ldr	r2, [r3, #4]
 80090d0:	4b0a      	ldr	r3, [pc, #40]	; (80090fc <vPortFree+0xbc>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4413      	add	r3, r2
 80090d6:	4a09      	ldr	r2, [pc, #36]	; (80090fc <vPortFree+0xbc>)
 80090d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80090da:	6938      	ldr	r0, [r7, #16]
 80090dc:	f000 f874 	bl	80091c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80090e0:	4b07      	ldr	r3, [pc, #28]	; (8009100 <vPortFree+0xc0>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	3301      	adds	r3, #1
 80090e6:	4a06      	ldr	r2, [pc, #24]	; (8009100 <vPortFree+0xc0>)
 80090e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80090ea:	f7fe fb6d 	bl	80077c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80090ee:	bf00      	nop
 80090f0:	3718      	adds	r7, #24
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	20009c34 	.word	0x20009c34
 80090fc:	20009c24 	.word	0x20009c24
 8009100:	20009c30 	.word	0x20009c30

08009104 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009104:	b480      	push	{r7}
 8009106:	b085      	sub	sp, #20
 8009108:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800910a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800910e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009110:	4b27      	ldr	r3, [pc, #156]	; (80091b0 <prvHeapInit+0xac>)
 8009112:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f003 0307 	and.w	r3, r3, #7
 800911a:	2b00      	cmp	r3, #0
 800911c:	d00c      	beq.n	8009138 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	3307      	adds	r3, #7
 8009122:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f023 0307 	bic.w	r3, r3, #7
 800912a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800912c:	68ba      	ldr	r2, [r7, #8]
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	1ad3      	subs	r3, r2, r3
 8009132:	4a1f      	ldr	r2, [pc, #124]	; (80091b0 <prvHeapInit+0xac>)
 8009134:	4413      	add	r3, r2
 8009136:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800913c:	4a1d      	ldr	r2, [pc, #116]	; (80091b4 <prvHeapInit+0xb0>)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009142:	4b1c      	ldr	r3, [pc, #112]	; (80091b4 <prvHeapInit+0xb0>)
 8009144:	2200      	movs	r2, #0
 8009146:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	68ba      	ldr	r2, [r7, #8]
 800914c:	4413      	add	r3, r2
 800914e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009150:	2208      	movs	r2, #8
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	1a9b      	subs	r3, r3, r2
 8009156:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f023 0307 	bic.w	r3, r3, #7
 800915e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	4a15      	ldr	r2, [pc, #84]	; (80091b8 <prvHeapInit+0xb4>)
 8009164:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009166:	4b14      	ldr	r3, [pc, #80]	; (80091b8 <prvHeapInit+0xb4>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	2200      	movs	r2, #0
 800916c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800916e:	4b12      	ldr	r3, [pc, #72]	; (80091b8 <prvHeapInit+0xb4>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2200      	movs	r2, #0
 8009174:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	68fa      	ldr	r2, [r7, #12]
 800917e:	1ad2      	subs	r2, r2, r3
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009184:	4b0c      	ldr	r3, [pc, #48]	; (80091b8 <prvHeapInit+0xb4>)
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	4a0a      	ldr	r2, [pc, #40]	; (80091bc <prvHeapInit+0xb8>)
 8009192:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	4a09      	ldr	r2, [pc, #36]	; (80091c0 <prvHeapInit+0xbc>)
 800919a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800919c:	4b09      	ldr	r3, [pc, #36]	; (80091c4 <prvHeapInit+0xc0>)
 800919e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80091a2:	601a      	str	r2, [r3, #0]
}
 80091a4:	bf00      	nop
 80091a6:	3714      	adds	r7, #20
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr
 80091b0:	20006018 	.word	0x20006018
 80091b4:	20009c18 	.word	0x20009c18
 80091b8:	20009c20 	.word	0x20009c20
 80091bc:	20009c28 	.word	0x20009c28
 80091c0:	20009c24 	.word	0x20009c24
 80091c4:	20009c34 	.word	0x20009c34

080091c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80091d0:	4b28      	ldr	r3, [pc, #160]	; (8009274 <prvInsertBlockIntoFreeList+0xac>)
 80091d2:	60fb      	str	r3, [r7, #12]
 80091d4:	e002      	b.n	80091dc <prvInsertBlockIntoFreeList+0x14>
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	60fb      	str	r3, [r7, #12]
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d8f7      	bhi.n	80091d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	68ba      	ldr	r2, [r7, #8]
 80091f0:	4413      	add	r3, r2
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d108      	bne.n	800920a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	685a      	ldr	r2, [r3, #4]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	441a      	add	r2, r3
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	68ba      	ldr	r2, [r7, #8]
 8009214:	441a      	add	r2, r3
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	429a      	cmp	r2, r3
 800921c:	d118      	bne.n	8009250 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	4b15      	ldr	r3, [pc, #84]	; (8009278 <prvInsertBlockIntoFreeList+0xb0>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	429a      	cmp	r2, r3
 8009228:	d00d      	beq.n	8009246 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	685a      	ldr	r2, [r3, #4]
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	441a      	add	r2, r3
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	601a      	str	r2, [r3, #0]
 8009244:	e008      	b.n	8009258 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009246:	4b0c      	ldr	r3, [pc, #48]	; (8009278 <prvInsertBlockIntoFreeList+0xb0>)
 8009248:	681a      	ldr	r2, [r3, #0]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	601a      	str	r2, [r3, #0]
 800924e:	e003      	b.n	8009258 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009258:	68fa      	ldr	r2, [r7, #12]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	429a      	cmp	r2, r3
 800925e:	d002      	beq.n	8009266 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009266:	bf00      	nop
 8009268:	3714      	adds	r7, #20
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr
 8009272:	bf00      	nop
 8009274:	20009c18 	.word	0x20009c18
 8009278:	20009c20 	.word	0x20009c20

0800927c <lwip_strerr>:
 * @param err an lwip internal err_t
 * @return a string representation for err
 */
const char *
lwip_strerr(err_t err)
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	4603      	mov	r3, r0
 8009284:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_strerr))) {
 8009286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800928a:	2b00      	cmp	r3, #0
 800928c:	dc04      	bgt.n	8009298 <lwip_strerr+0x1c>
 800928e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009292:	f113 0f10 	cmn.w	r3, #16
 8009296:	da01      	bge.n	800929c <lwip_strerr+0x20>
    return "Unknown error.";
 8009298:	4b06      	ldr	r3, [pc, #24]	; (80092b4 <lwip_strerr+0x38>)
 800929a:	e005      	b.n	80092a8 <lwip_strerr+0x2c>
  }
  return err_strerr[-err];
 800929c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092a0:	425b      	negs	r3, r3
 80092a2:	4a05      	ldr	r2, [pc, #20]	; (80092b8 <lwip_strerr+0x3c>)
 80092a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	370c      	adds	r7, #12
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr
 80092b4:	080185b0 	.word	0x080185b0
 80092b8:	20000024 	.word	0x20000024

080092bc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80092c6:	f008 f851 	bl	801136c <sys_timeouts_sleeptime>
 80092ca:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d2:	d10b      	bne.n	80092ec <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80092d4:	4813      	ldr	r0, [pc, #76]	; (8009324 <tcpip_timeouts_mbox_fetch+0x68>)
 80092d6:	f00d feb2 	bl	801703e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80092da:	2200      	movs	r2, #0
 80092dc:	6839      	ldr	r1, [r7, #0]
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f00d fe3a 	bl	8016f58 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80092e4:	480f      	ldr	r0, [pc, #60]	; (8009324 <tcpip_timeouts_mbox_fetch+0x68>)
 80092e6:	f00d fe9b 	bl	8017020 <sys_mutex_lock>
    return;
 80092ea:	e018      	b.n	800931e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d102      	bne.n	80092f8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80092f2:	f008 f801 	bl	80112f8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80092f6:	e7e6      	b.n	80092c6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80092f8:	480a      	ldr	r0, [pc, #40]	; (8009324 <tcpip_timeouts_mbox_fetch+0x68>)
 80092fa:	f00d fea0 	bl	801703e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80092fe:	68fa      	ldr	r2, [r7, #12]
 8009300:	6839      	ldr	r1, [r7, #0]
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f00d fe28 	bl	8016f58 <sys_arch_mbox_fetch>
 8009308:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800930a:	4806      	ldr	r0, [pc, #24]	; (8009324 <tcpip_timeouts_mbox_fetch+0x68>)
 800930c:	f00d fe88 	bl	8017020 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009316:	d102      	bne.n	800931e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8009318:	f007 ffee 	bl	80112f8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800931c:	e7d3      	b.n	80092c6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800931e:	3710      	adds	r7, #16
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	20009c44 	.word	0x20009c44

08009328 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b084      	sub	sp, #16
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8009330:	4810      	ldr	r0, [pc, #64]	; (8009374 <tcpip_thread+0x4c>)
 8009332:	f00d fe75 	bl	8017020 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8009336:	4b10      	ldr	r3, [pc, #64]	; (8009378 <tcpip_thread+0x50>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d005      	beq.n	800934a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800933e:	4b0e      	ldr	r3, [pc, #56]	; (8009378 <tcpip_thread+0x50>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4a0e      	ldr	r2, [pc, #56]	; (800937c <tcpip_thread+0x54>)
 8009344:	6812      	ldr	r2, [r2, #0]
 8009346:	4610      	mov	r0, r2
 8009348:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800934a:	f107 030c 	add.w	r3, r7, #12
 800934e:	4619      	mov	r1, r3
 8009350:	480b      	ldr	r0, [pc, #44]	; (8009380 <tcpip_thread+0x58>)
 8009352:	f7ff ffb3 	bl	80092bc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d106      	bne.n	800936a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800935c:	4b09      	ldr	r3, [pc, #36]	; (8009384 <tcpip_thread+0x5c>)
 800935e:	2291      	movs	r2, #145	; 0x91
 8009360:	4909      	ldr	r1, [pc, #36]	; (8009388 <tcpip_thread+0x60>)
 8009362:	480a      	ldr	r0, [pc, #40]	; (800938c <tcpip_thread+0x64>)
 8009364:	f00d ff00 	bl	8017168 <iprintf>
      continue;
 8009368:	e003      	b.n	8009372 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	4618      	mov	r0, r3
 800936e:	f000 f80f 	bl	8009390 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009372:	e7ea      	b.n	800934a <tcpip_thread+0x22>
 8009374:	20009c44 	.word	0x20009c44
 8009378:	20009c38 	.word	0x20009c38
 800937c:	20009c3c 	.word	0x20009c3c
 8009380:	20009c40 	.word	0x20009c40
 8009384:	080185c0 	.word	0x080185c0
 8009388:	080185f0 	.word	0x080185f0
 800938c:	08018610 	.word	0x08018610

08009390 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	2b02      	cmp	r3, #2
 800939e:	d026      	beq.n	80093ee <tcpip_thread_handle_msg+0x5e>
 80093a0:	2b02      	cmp	r3, #2
 80093a2:	dc2b      	bgt.n	80093fc <tcpip_thread_handle_msg+0x6c>
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d002      	beq.n	80093ae <tcpip_thread_handle_msg+0x1e>
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d015      	beq.n	80093d8 <tcpip_thread_handle_msg+0x48>
 80093ac:	e026      	b.n	80093fc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	68db      	ldr	r3, [r3, #12]
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	6850      	ldr	r0, [r2, #4]
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	6892      	ldr	r2, [r2, #8]
 80093ba:	4611      	mov	r1, r2
 80093bc:	4798      	blx	r3
 80093be:	4603      	mov	r3, r0
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d004      	beq.n	80093ce <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	4618      	mov	r0, r3
 80093ca:	f002 f8fb 	bl	800b5c4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80093ce:	6879      	ldr	r1, [r7, #4]
 80093d0:	2009      	movs	r0, #9
 80093d2:	f001 f951 	bl	800a678 <memp_free>
      break;
 80093d6:	e018      	b.n	800940a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	6892      	ldr	r2, [r2, #8]
 80093e0:	4610      	mov	r0, r2
 80093e2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80093e4:	6879      	ldr	r1, [r7, #4]
 80093e6:	2008      	movs	r0, #8
 80093e8:	f001 f946 	bl	800a678 <memp_free>
      break;
 80093ec:	e00d      	b.n	800940a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	6892      	ldr	r2, [r2, #8]
 80093f6:	4610      	mov	r0, r2
 80093f8:	4798      	blx	r3
      break;
 80093fa:	e006      	b.n	800940a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80093fc:	4b05      	ldr	r3, [pc, #20]	; (8009414 <tcpip_thread_handle_msg+0x84>)
 80093fe:	22cf      	movs	r2, #207	; 0xcf
 8009400:	4905      	ldr	r1, [pc, #20]	; (8009418 <tcpip_thread_handle_msg+0x88>)
 8009402:	4806      	ldr	r0, [pc, #24]	; (800941c <tcpip_thread_handle_msg+0x8c>)
 8009404:	f00d feb0 	bl	8017168 <iprintf>
      break;
 8009408:	bf00      	nop
  }
}
 800940a:	bf00      	nop
 800940c:	3708      	adds	r7, #8
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop
 8009414:	080185c0 	.word	0x080185c0
 8009418:	080185f0 	.word	0x080185f0
 800941c:	08018610 	.word	0x08018610

08009420 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b086      	sub	sp, #24
 8009424:	af00      	add	r7, sp, #0
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	60b9      	str	r1, [r7, #8]
 800942a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800942c:	481a      	ldr	r0, [pc, #104]	; (8009498 <tcpip_inpkt+0x78>)
 800942e:	f00d fdc4 	bl	8016fba <sys_mbox_valid>
 8009432:	4603      	mov	r3, r0
 8009434:	2b00      	cmp	r3, #0
 8009436:	d105      	bne.n	8009444 <tcpip_inpkt+0x24>
 8009438:	4b18      	ldr	r3, [pc, #96]	; (800949c <tcpip_inpkt+0x7c>)
 800943a:	22fc      	movs	r2, #252	; 0xfc
 800943c:	4918      	ldr	r1, [pc, #96]	; (80094a0 <tcpip_inpkt+0x80>)
 800943e:	4819      	ldr	r0, [pc, #100]	; (80094a4 <tcpip_inpkt+0x84>)
 8009440:	f00d fe92 	bl	8017168 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009444:	2009      	movs	r0, #9
 8009446:	f001 f8a1 	bl	800a58c <memp_malloc>
 800944a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d102      	bne.n	8009458 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8009452:	f04f 33ff 	mov.w	r3, #4294967295
 8009456:	e01a      	b.n	800948e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	2200      	movs	r2, #0
 800945c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	68fa      	ldr	r2, [r7, #12]
 8009462:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	68ba      	ldr	r2, [r7, #8]
 8009468:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	687a      	ldr	r2, [r7, #4]
 800946e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009470:	6979      	ldr	r1, [r7, #20]
 8009472:	4809      	ldr	r0, [pc, #36]	; (8009498 <tcpip_inpkt+0x78>)
 8009474:	f00d fd56 	bl	8016f24 <sys_mbox_trypost>
 8009478:	4603      	mov	r3, r0
 800947a:	2b00      	cmp	r3, #0
 800947c:	d006      	beq.n	800948c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800947e:	6979      	ldr	r1, [r7, #20]
 8009480:	2009      	movs	r0, #9
 8009482:	f001 f8f9 	bl	800a678 <memp_free>
    return ERR_MEM;
 8009486:	f04f 33ff 	mov.w	r3, #4294967295
 800948a:	e000      	b.n	800948e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800948c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800948e:	4618      	mov	r0, r3
 8009490:	3718      	adds	r7, #24
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	20009c40 	.word	0x20009c40
 800949c:	080185c0 	.word	0x080185c0
 80094a0:	08018638 	.word	0x08018638
 80094a4:	08018610 	.word	0x08018610

080094a8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b082      	sub	sp, #8
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80094b8:	f003 0318 	and.w	r3, r3, #24
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d006      	beq.n	80094ce <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80094c0:	4a08      	ldr	r2, [pc, #32]	; (80094e4 <tcpip_input+0x3c>)
 80094c2:	6839      	ldr	r1, [r7, #0]
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f7ff ffab 	bl	8009420 <tcpip_inpkt>
 80094ca:	4603      	mov	r3, r0
 80094cc:	e005      	b.n	80094da <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80094ce:	4a06      	ldr	r2, [pc, #24]	; (80094e8 <tcpip_input+0x40>)
 80094d0:	6839      	ldr	r1, [r7, #0]
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f7ff ffa4 	bl	8009420 <tcpip_inpkt>
 80094d8:	4603      	mov	r3, r0
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3708      	adds	r7, #8
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}
 80094e2:	bf00      	nop
 80094e4:	08016c71 	.word	0x08016c71
 80094e8:	0801582d 	.word	0x0801582d

080094ec <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80094f6:	4819      	ldr	r0, [pc, #100]	; (800955c <tcpip_try_callback+0x70>)
 80094f8:	f00d fd5f 	bl	8016fba <sys_mbox_valid>
 80094fc:	4603      	mov	r3, r0
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d106      	bne.n	8009510 <tcpip_try_callback+0x24>
 8009502:	4b17      	ldr	r3, [pc, #92]	; (8009560 <tcpip_try_callback+0x74>)
 8009504:	f240 125d 	movw	r2, #349	; 0x15d
 8009508:	4916      	ldr	r1, [pc, #88]	; (8009564 <tcpip_try_callback+0x78>)
 800950a:	4817      	ldr	r0, [pc, #92]	; (8009568 <tcpip_try_callback+0x7c>)
 800950c:	f00d fe2c 	bl	8017168 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8009510:	2008      	movs	r0, #8
 8009512:	f001 f83b 	bl	800a58c <memp_malloc>
 8009516:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d102      	bne.n	8009524 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800951e:	f04f 33ff 	mov.w	r3, #4294967295
 8009522:	e017      	b.n	8009554 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2201      	movs	r2, #1
 8009528:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	683a      	ldr	r2, [r7, #0]
 8009534:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009536:	68f9      	ldr	r1, [r7, #12]
 8009538:	4808      	ldr	r0, [pc, #32]	; (800955c <tcpip_try_callback+0x70>)
 800953a:	f00d fcf3 	bl	8016f24 <sys_mbox_trypost>
 800953e:	4603      	mov	r3, r0
 8009540:	2b00      	cmp	r3, #0
 8009542:	d006      	beq.n	8009552 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8009544:	68f9      	ldr	r1, [r7, #12]
 8009546:	2008      	movs	r0, #8
 8009548:	f001 f896 	bl	800a678 <memp_free>
    return ERR_MEM;
 800954c:	f04f 33ff 	mov.w	r3, #4294967295
 8009550:	e000      	b.n	8009554 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8009552:	2300      	movs	r3, #0
}
 8009554:	4618      	mov	r0, r3
 8009556:	3710      	adds	r7, #16
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}
 800955c:	20009c40 	.word	0x20009c40
 8009560:	080185c0 	.word	0x080185c0
 8009564:	08018638 	.word	0x08018638
 8009568:	08018610 	.word	0x08018610

0800956c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b084      	sub	sp, #16
 8009570:	af02      	add	r7, sp, #8
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	6039      	str	r1, [r7, #0]
  lwip_init();
 8009576:	f000 fb5e 	bl	8009c36 <lwip_init>

  tcpip_init_done = initfunc;
 800957a:	4a17      	ldr	r2, [pc, #92]	; (80095d8 <tcpip_init+0x6c>)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009580:	4a16      	ldr	r2, [pc, #88]	; (80095dc <tcpip_init+0x70>)
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009586:	2106      	movs	r1, #6
 8009588:	4815      	ldr	r0, [pc, #84]	; (80095e0 <tcpip_init+0x74>)
 800958a:	f00d fcb1 	bl	8016ef0 <sys_mbox_new>
 800958e:	4603      	mov	r3, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d006      	beq.n	80095a2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009594:	4b13      	ldr	r3, [pc, #76]	; (80095e4 <tcpip_init+0x78>)
 8009596:	f240 2261 	movw	r2, #609	; 0x261
 800959a:	4913      	ldr	r1, [pc, #76]	; (80095e8 <tcpip_init+0x7c>)
 800959c:	4813      	ldr	r0, [pc, #76]	; (80095ec <tcpip_init+0x80>)
 800959e:	f00d fde3 	bl	8017168 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80095a2:	4813      	ldr	r0, [pc, #76]	; (80095f0 <tcpip_init+0x84>)
 80095a4:	f00d fd26 	bl	8016ff4 <sys_mutex_new>
 80095a8:	4603      	mov	r3, r0
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d006      	beq.n	80095bc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80095ae:	4b0d      	ldr	r3, [pc, #52]	; (80095e4 <tcpip_init+0x78>)
 80095b0:	f240 2265 	movw	r2, #613	; 0x265
 80095b4:	490f      	ldr	r1, [pc, #60]	; (80095f4 <tcpip_init+0x88>)
 80095b6:	480d      	ldr	r0, [pc, #52]	; (80095ec <tcpip_init+0x80>)
 80095b8:	f00d fdd6 	bl	8017168 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80095bc:	2318      	movs	r3, #24
 80095be:	9300      	str	r3, [sp, #0]
 80095c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095c4:	2200      	movs	r2, #0
 80095c6:	490c      	ldr	r1, [pc, #48]	; (80095f8 <tcpip_init+0x8c>)
 80095c8:	480c      	ldr	r0, [pc, #48]	; (80095fc <tcpip_init+0x90>)
 80095ca:	f00d fd45 	bl	8017058 <sys_thread_new>
}
 80095ce:	bf00      	nop
 80095d0:	3708      	adds	r7, #8
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	20009c38 	.word	0x20009c38
 80095dc:	20009c3c 	.word	0x20009c3c
 80095e0:	20009c40 	.word	0x20009c40
 80095e4:	080185c0 	.word	0x080185c0
 80095e8:	08018648 	.word	0x08018648
 80095ec:	08018610 	.word	0x08018610
 80095f0:	20009c44 	.word	0x20009c44
 80095f4:	0801866c 	.word	0x0801866c
 80095f8:	08009329 	.word	0x08009329
 80095fc:	08018690 	.word	0x08018690

08009600 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009600:	b480      	push	{r7}
 8009602:	b083      	sub	sp, #12
 8009604:	af00      	add	r7, sp, #0
 8009606:	4603      	mov	r3, r0
 8009608:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800960a:	88fb      	ldrh	r3, [r7, #6]
 800960c:	021b      	lsls	r3, r3, #8
 800960e:	b21a      	sxth	r2, r3
 8009610:	88fb      	ldrh	r3, [r7, #6]
 8009612:	0a1b      	lsrs	r3, r3, #8
 8009614:	b29b      	uxth	r3, r3
 8009616:	b21b      	sxth	r3, r3
 8009618:	4313      	orrs	r3, r2
 800961a:	b21b      	sxth	r3, r3
 800961c:	b29b      	uxth	r3, r3
}
 800961e:	4618      	mov	r0, r3
 8009620:	370c      	adds	r7, #12
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr

0800962a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800962a:	b480      	push	{r7}
 800962c:	b083      	sub	sp, #12
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	061a      	lsls	r2, r3, #24
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	021b      	lsls	r3, r3, #8
 800963a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800963e:	431a      	orrs	r2, r3
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	0a1b      	lsrs	r3, r3, #8
 8009644:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009648:	431a      	orrs	r2, r3
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	0e1b      	lsrs	r3, r3, #24
 800964e:	4313      	orrs	r3, r2
}
 8009650:	4618      	mov	r0, r3
 8009652:	370c      	adds	r7, #12
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 800965c:	b480      	push	{r7}
 800965e:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 8009660:	bf00      	nop
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr
	...

0800966c <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	4603      	mov	r3, r0
 8009674:	6039      	str	r1, [r7, #0]
 8009676:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 8009678:	79fb      	ldrb	r3, [r7, #7]
 800967a:	2b01      	cmp	r3, #1
 800967c:	d80f      	bhi.n	800969e <dns_setserver+0x32>
    if (dnsserver != NULL) {
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d006      	beq.n	8009692 <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 8009684:	79fb      	ldrb	r3, [r7, #7]
 8009686:	4909      	ldr	r1, [pc, #36]	; (80096ac <dns_setserver+0x40>)
 8009688:	683a      	ldr	r2, [r7, #0]
 800968a:	6812      	ldr	r2, [r2, #0]
 800968c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
 8009690:	e005      	b.n	800969e <dns_setserver+0x32>
      dns_servers[numdns] = *IP_ADDR_ANY;
 8009692:	79fb      	ldrb	r3, [r7, #7]
 8009694:	4905      	ldr	r1, [pc, #20]	; (80096ac <dns_setserver+0x40>)
 8009696:	4a06      	ldr	r2, [pc, #24]	; (80096b0 <dns_setserver+0x44>)
 8009698:	6812      	ldr	r2, [r2, #0]
 800969a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800969e:	bf00      	nop
 80096a0:	370c      	adds	r7, #12
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr
 80096aa:	bf00      	nop
 80096ac:	2000a0c8 	.word	0x2000a0c8
 80096b0:	0801d628 	.word	0x0801d628

080096b4 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 80096b8:	f000 faa8 	bl	8009c0c <dns_check_entries>
}
 80096bc:	bf00      	nop
 80096be:	bd80      	pop	{r7, pc}

080096c0 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b090      	sub	sp, #64	; 0x40
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	4603      	mov	r3, r0
 80096c8:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 80096ca:	79fa      	ldrb	r2, [r7, #7]
 80096cc:	4613      	mov	r3, r2
 80096ce:	011b      	lsls	r3, r3, #4
 80096d0:	4413      	add	r3, r2
 80096d2:	011b      	lsls	r3, r3, #4
 80096d4:	4a6c      	ldr	r2, [pc, #432]	; (8009888 <dns_send+0x1c8>)
 80096d6:	4413      	add	r3, r2
 80096d8:	633b      	str	r3, [r7, #48]	; 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 80096da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096dc:	7adb      	ldrb	r3, [r3, #11]
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d906      	bls.n	80096f0 <dns_send+0x30>
 80096e2:	4b6a      	ldr	r3, [pc, #424]	; (800988c <dns_send+0x1cc>)
 80096e4:	f240 22fa 	movw	r2, #762	; 0x2fa
 80096e8:	4969      	ldr	r1, [pc, #420]	; (8009890 <dns_send+0x1d0>)
 80096ea:	486a      	ldr	r0, [pc, #424]	; (8009894 <dns_send+0x1d4>)
 80096ec:	f00d fd3c 	bl	8017168 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 80096f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f2:	7adb      	ldrb	r3, [r3, #11]
 80096f4:	461a      	mov	r2, r3
 80096f6:	4b68      	ldr	r3, [pc, #416]	; (8009898 <dns_send+0x1d8>)
 80096f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d109      	bne.n	8009714 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 8009700:	79fb      	ldrb	r3, [r7, #7]
 8009702:	2100      	movs	r1, #0
 8009704:	4618      	mov	r0, r3
 8009706:	f000 f8cb 	bl	80098a0 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 800970a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970c:	2200      	movs	r2, #0
 800970e:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 8009710:	2300      	movs	r3, #0
 8009712:	e0b4      	b.n	800987e <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 8009714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009716:	3310      	adds	r3, #16
 8009718:	4618      	mov	r0, r3
 800971a:	f7f6 fd69 	bl	80001f0 <strlen>
 800971e:	4603      	mov	r3, r0
 8009720:	b29b      	uxth	r3, r3
 8009722:	3312      	adds	r3, #18
 8009724:	b29b      	uxth	r3, r3
 8009726:	f44f 7220 	mov.w	r2, #640	; 0x280
 800972a:	4619      	mov	r1, r3
 800972c:	2036      	movs	r0, #54	; 0x36
 800972e:	f001 fc65 	bl	800affc <pbuf_alloc>
 8009732:	62f8      	str	r0, [r7, #44]	; 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 8009734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009736:	2b00      	cmp	r3, #0
 8009738:	f000 8095 	beq.w	8009866 <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 800973c:	f107 0310 	add.w	r3, r7, #16
 8009740:	220c      	movs	r2, #12
 8009742:	2100      	movs	r1, #0
 8009744:	4618      	mov	r0, r3
 8009746:	f00d fd07 	bl	8017158 <memset>
    hdr.id = lwip_htons(entry->txid);
 800974a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800974c:	891b      	ldrh	r3, [r3, #8]
 800974e:	4618      	mov	r0, r3
 8009750:	f7ff ff56 	bl	8009600 <lwip_htons>
 8009754:	4603      	mov	r3, r0
 8009756:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 8009758:	2301      	movs	r3, #1
 800975a:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 800975c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009760:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8009762:	f107 0310 	add.w	r3, r7, #16
 8009766:	220c      	movs	r2, #12
 8009768:	4619      	mov	r1, r3
 800976a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800976c:	f002 f9de 	bl	800bb2c <pbuf_take>
    hostname = entry->name;
 8009770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009772:	3310      	adds	r3, #16
 8009774:	63bb      	str	r3, [r7, #56]	; 0x38
    --hostname;
 8009776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009778:	3b01      	subs	r3, #1
 800977a:	63bb      	str	r3, [r7, #56]	; 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 800977c:	230c      	movs	r3, #12
 800977e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    do {
      ++hostname;
 8009780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009782:	3301      	adds	r3, #1
 8009784:	63bb      	str	r3, [r7, #56]	; 0x38
      hostname_part = hostname;
 8009786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009788:	62bb      	str	r3, [r7, #40]	; 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800978a:	2300      	movs	r3, #0
 800978c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009790:	e007      	b.n	80097a2 <dns_send+0xe2>
        ++n;
 8009792:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009796:	3301      	adds	r3, #1
 8009798:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800979c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800979e:	3301      	adds	r3, #1
 80097a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80097a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	2b2e      	cmp	r3, #46	; 0x2e
 80097a8:	d003      	beq.n	80097b2 <dns_send+0xf2>
 80097aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d1ef      	bne.n	8009792 <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 80097b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b6:	1ad3      	subs	r3, r2, r3
 80097b8:	84fb      	strh	r3, [r7, #38]	; 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 80097ba:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80097bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80097c0:	4413      	add	r3, r2
 80097c2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80097c6:	4293      	cmp	r3, r2
 80097c8:	dc53      	bgt.n	8009872 <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 80097ca:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80097ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80097d0:	4619      	mov	r1, r3
 80097d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80097d4:	f002 fad8 	bl	800bd88 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 80097d8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80097da:	3301      	adds	r3, #1
 80097dc:	b29b      	uxth	r3, r3
 80097de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80097e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80097e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80097e4:	f002 fa34 	bl	800bc50 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 80097e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80097ec:	b29a      	uxth	r2, r3
 80097ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80097f0:	4413      	add	r3, r2
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	3301      	adds	r3, #1
 80097f6:	87bb      	strh	r3, [r7, #60]	; 0x3c
    } while (*hostname != 0);
 80097f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d1bf      	bne.n	8009780 <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 8009800:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009802:	2200      	movs	r2, #0
 8009804:	4619      	mov	r1, r3
 8009806:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009808:	f002 fabe 	bl	800bd88 <pbuf_put_at>
    query_idx++;
 800980c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800980e:	3301      	adds	r3, #1
 8009810:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8009812:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009816:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 8009818:	f44f 7380 	mov.w	r3, #256	; 0x100
 800981c:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 800981e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009820:	f107 010c 	add.w	r1, r7, #12
 8009824:	2204      	movs	r2, #4
 8009826:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009828:	f002 fa12 	bl	800bc50 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 800982c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800982e:	7bdb      	ldrb	r3, [r3, #15]
 8009830:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 8009834:	2335      	movs	r3, #53	; 0x35
 8009836:	847b      	strh	r3, [r7, #34]	; 0x22
      dst = &dns_servers[entry->server_idx];
 8009838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983a:	7adb      	ldrb	r3, [r3, #11]
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	4a16      	ldr	r2, [pc, #88]	; (8009898 <dns_send+0x1d8>)
 8009840:	4413      	add	r3, r2
 8009842:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8009844:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009848:	4a14      	ldr	r2, [pc, #80]	; (800989c <dns_send+0x1dc>)
 800984a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800984e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009850:	69fa      	ldr	r2, [r7, #28]
 8009852:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009854:	f007 ff84 	bl	8011760 <udp_sendto>
 8009858:	4603      	mov	r3, r0
 800985a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* free pbuf */
    pbuf_free(p);
 800985e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009860:	f001 feb0 	bl	800b5c4 <pbuf_free>
 8009864:	e002      	b.n	800986c <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 8009866:	23ff      	movs	r3, #255	; 0xff
 8009868:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return err;
 800986c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009870:	e005      	b.n	800987e <dns_send+0x1be>
        goto overflow_return;
 8009872:	bf00      	nop
overflow_return:
  pbuf_free(p);
 8009874:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009876:	f001 fea5 	bl	800b5c4 <pbuf_free>
  return ERR_VAL;
 800987a:	f06f 0305 	mvn.w	r3, #5
}
 800987e:	4618      	mov	r0, r3
 8009880:	3740      	adds	r7, #64	; 0x40
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	20009c58 	.word	0x20009c58
 800988c:	080186a0 	.word	0x080186a0
 8009890:	080186d0 	.word	0x080186d0
 8009894:	080186e8 	.word	0x080186e8
 8009898:	2000a0c8 	.word	0x2000a0c8
 800989c:	20009c48 	.word	0x20009c48

080098a0 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 80098a0:	b590      	push	{r4, r7, lr}
 80098a2:	b085      	sub	sp, #20
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	4603      	mov	r3, r0
 80098a8:	6039      	str	r1, [r7, #0]
 80098aa:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 80098ac:	2300      	movs	r3, #0
 80098ae:	73fb      	strb	r3, [r7, #15]
 80098b0:	e03d      	b.n	800992e <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 80098b2:	7bfa      	ldrb	r2, [r7, #15]
 80098b4:	4957      	ldr	r1, [pc, #348]	; (8009a14 <dns_call_found+0x174>)
 80098b6:	4613      	mov	r3, r2
 80098b8:	005b      	lsls	r3, r3, #1
 80098ba:	4413      	add	r3, r2
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	440b      	add	r3, r1
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d030      	beq.n	8009928 <dns_call_found+0x88>
 80098c6:	7bfa      	ldrb	r2, [r7, #15]
 80098c8:	4952      	ldr	r1, [pc, #328]	; (8009a14 <dns_call_found+0x174>)
 80098ca:	4613      	mov	r3, r2
 80098cc:	005b      	lsls	r3, r3, #1
 80098ce:	4413      	add	r3, r2
 80098d0:	009b      	lsls	r3, r3, #2
 80098d2:	440b      	add	r3, r1
 80098d4:	3308      	adds	r3, #8
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	79fa      	ldrb	r2, [r7, #7]
 80098da:	429a      	cmp	r2, r3
 80098dc:	d124      	bne.n	8009928 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 80098de:	7bfa      	ldrb	r2, [r7, #15]
 80098e0:	494c      	ldr	r1, [pc, #304]	; (8009a14 <dns_call_found+0x174>)
 80098e2:	4613      	mov	r3, r2
 80098e4:	005b      	lsls	r3, r3, #1
 80098e6:	4413      	add	r3, r2
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	440b      	add	r3, r1
 80098ec:	681c      	ldr	r4, [r3, #0]
 80098ee:	79fa      	ldrb	r2, [r7, #7]
 80098f0:	4613      	mov	r3, r2
 80098f2:	011b      	lsls	r3, r3, #4
 80098f4:	4413      	add	r3, r2
 80098f6:	011b      	lsls	r3, r3, #4
 80098f8:	3310      	adds	r3, #16
 80098fa:	4a47      	ldr	r2, [pc, #284]	; (8009a18 <dns_call_found+0x178>)
 80098fc:	1898      	adds	r0, r3, r2
 80098fe:	7bfa      	ldrb	r2, [r7, #15]
 8009900:	4944      	ldr	r1, [pc, #272]	; (8009a14 <dns_call_found+0x174>)
 8009902:	4613      	mov	r3, r2
 8009904:	005b      	lsls	r3, r3, #1
 8009906:	4413      	add	r3, r2
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	440b      	add	r3, r1
 800990c:	3304      	adds	r3, #4
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	461a      	mov	r2, r3
 8009912:	6839      	ldr	r1, [r7, #0]
 8009914:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 8009916:	7bfa      	ldrb	r2, [r7, #15]
 8009918:	493e      	ldr	r1, [pc, #248]	; (8009a14 <dns_call_found+0x174>)
 800991a:	4613      	mov	r3, r2
 800991c:	005b      	lsls	r3, r3, #1
 800991e:	4413      	add	r3, r2
 8009920:	009b      	lsls	r3, r3, #2
 8009922:	440b      	add	r3, r1
 8009924:	2200      	movs	r2, #0
 8009926:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8009928:	7bfb      	ldrb	r3, [r7, #15]
 800992a:	3301      	adds	r3, #1
 800992c:	73fb      	strb	r3, [r7, #15]
 800992e:	7bfb      	ldrb	r3, [r7, #15]
 8009930:	2b03      	cmp	r3, #3
 8009932:	d9be      	bls.n	80098b2 <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8009934:	2300      	movs	r3, #0
 8009936:	73fb      	strb	r3, [r7, #15]
 8009938:	e031      	b.n	800999e <dns_call_found+0xfe>
    if (i == idx) {
 800993a:	7bfa      	ldrb	r2, [r7, #15]
 800993c:	79fb      	ldrb	r3, [r7, #7]
 800993e:	429a      	cmp	r2, r3
 8009940:	d029      	beq.n	8009996 <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 8009942:	7bfa      	ldrb	r2, [r7, #15]
 8009944:	4934      	ldr	r1, [pc, #208]	; (8009a18 <dns_call_found+0x178>)
 8009946:	4613      	mov	r3, r2
 8009948:	011b      	lsls	r3, r3, #4
 800994a:	4413      	add	r3, r2
 800994c:	011b      	lsls	r3, r3, #4
 800994e:	440b      	add	r3, r1
 8009950:	330a      	adds	r3, #10
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	2b02      	cmp	r3, #2
 8009956:	d11f      	bne.n	8009998 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8009958:	7bfa      	ldrb	r2, [r7, #15]
 800995a:	492f      	ldr	r1, [pc, #188]	; (8009a18 <dns_call_found+0x178>)
 800995c:	4613      	mov	r3, r2
 800995e:	011b      	lsls	r3, r3, #4
 8009960:	4413      	add	r3, r2
 8009962:	011b      	lsls	r3, r3, #4
 8009964:	440b      	add	r3, r1
 8009966:	330f      	adds	r3, #15
 8009968:	7819      	ldrb	r1, [r3, #0]
 800996a:	79fa      	ldrb	r2, [r7, #7]
 800996c:	482a      	ldr	r0, [pc, #168]	; (8009a18 <dns_call_found+0x178>)
 800996e:	4613      	mov	r3, r2
 8009970:	011b      	lsls	r3, r3, #4
 8009972:	4413      	add	r3, r2
 8009974:	011b      	lsls	r3, r3, #4
 8009976:	4403      	add	r3, r0
 8009978:	330f      	adds	r3, #15
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	4299      	cmp	r1, r3
 800997e:	d10b      	bne.n	8009998 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8009980:	79fa      	ldrb	r2, [r7, #7]
 8009982:	4925      	ldr	r1, [pc, #148]	; (8009a18 <dns_call_found+0x178>)
 8009984:	4613      	mov	r3, r2
 8009986:	011b      	lsls	r3, r3, #4
 8009988:	4413      	add	r3, r2
 800998a:	011b      	lsls	r3, r3, #4
 800998c:	440b      	add	r3, r1
 800998e:	330f      	adds	r3, #15
 8009990:	2204      	movs	r2, #4
 8009992:	701a      	strb	r2, [r3, #0]
        break;
 8009994:	e006      	b.n	80099a4 <dns_call_found+0x104>
      continue; /* only check other requests */
 8009996:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8009998:	7bfb      	ldrb	r3, [r7, #15]
 800999a:	3301      	adds	r3, #1
 800999c:	73fb      	strb	r3, [r7, #15]
 800999e:	7bfb      	ldrb	r3, [r7, #15]
 80099a0:	2b03      	cmp	r3, #3
 80099a2:	d9ca      	bls.n	800993a <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 80099a4:	79fa      	ldrb	r2, [r7, #7]
 80099a6:	491c      	ldr	r1, [pc, #112]	; (8009a18 <dns_call_found+0x178>)
 80099a8:	4613      	mov	r3, r2
 80099aa:	011b      	lsls	r3, r3, #4
 80099ac:	4413      	add	r3, r2
 80099ae:	011b      	lsls	r3, r3, #4
 80099b0:	440b      	add	r3, r1
 80099b2:	330f      	adds	r3, #15
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	2b03      	cmp	r3, #3
 80099b8:	d827      	bhi.n	8009a0a <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 80099ba:	79fa      	ldrb	r2, [r7, #7]
 80099bc:	4916      	ldr	r1, [pc, #88]	; (8009a18 <dns_call_found+0x178>)
 80099be:	4613      	mov	r3, r2
 80099c0:	011b      	lsls	r3, r3, #4
 80099c2:	4413      	add	r3, r2
 80099c4:	011b      	lsls	r3, r3, #4
 80099c6:	440b      	add	r3, r1
 80099c8:	330f      	adds	r3, #15
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	461a      	mov	r2, r3
 80099ce:	4b13      	ldr	r3, [pc, #76]	; (8009a1c <dns_call_found+0x17c>)
 80099d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099d4:	4618      	mov	r0, r3
 80099d6:	f008 f98f 	bl	8011cf8 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 80099da:	79fa      	ldrb	r2, [r7, #7]
 80099dc:	490e      	ldr	r1, [pc, #56]	; (8009a18 <dns_call_found+0x178>)
 80099de:	4613      	mov	r3, r2
 80099e0:	011b      	lsls	r3, r3, #4
 80099e2:	4413      	add	r3, r2
 80099e4:	011b      	lsls	r3, r3, #4
 80099e6:	440b      	add	r3, r1
 80099e8:	330f      	adds	r3, #15
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	4619      	mov	r1, r3
 80099ee:	4b0b      	ldr	r3, [pc, #44]	; (8009a1c <dns_call_found+0x17c>)
 80099f0:	2200      	movs	r2, #0
 80099f2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 80099f6:	79fa      	ldrb	r2, [r7, #7]
 80099f8:	4907      	ldr	r1, [pc, #28]	; (8009a18 <dns_call_found+0x178>)
 80099fa:	4613      	mov	r3, r2
 80099fc:	011b      	lsls	r3, r3, #4
 80099fe:	4413      	add	r3, r2
 8009a00:	011b      	lsls	r3, r3, #4
 8009a02:	440b      	add	r3, r1
 8009a04:	330f      	adds	r3, #15
 8009a06:	2204      	movs	r2, #4
 8009a08:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 8009a0a:	bf00      	nop
 8009a0c:	3714      	adds	r7, #20
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd90      	pop	{r4, r7, pc}
 8009a12:	bf00      	nop
 8009a14:	2000a098 	.word	0x2000a098
 8009a18:	20009c58 	.word	0x20009c58
 8009a1c:	20009c48 	.word	0x20009c48

08009a20 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b082      	sub	sp, #8
 8009a24:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 8009a26:	f00d fc43 	bl	80172b0 <rand>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8009a2e:	2300      	movs	r3, #0
 8009a30:	71fb      	strb	r3, [r7, #7]
 8009a32:	e01a      	b.n	8009a6a <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8009a34:	79fa      	ldrb	r2, [r7, #7]
 8009a36:	4911      	ldr	r1, [pc, #68]	; (8009a7c <dns_create_txid+0x5c>)
 8009a38:	4613      	mov	r3, r2
 8009a3a:	011b      	lsls	r3, r3, #4
 8009a3c:	4413      	add	r3, r2
 8009a3e:	011b      	lsls	r3, r3, #4
 8009a40:	440b      	add	r3, r1
 8009a42:	330a      	adds	r3, #10
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	2b02      	cmp	r3, #2
 8009a48:	d10c      	bne.n	8009a64 <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 8009a4a:	79fa      	ldrb	r2, [r7, #7]
 8009a4c:	490b      	ldr	r1, [pc, #44]	; (8009a7c <dns_create_txid+0x5c>)
 8009a4e:	4613      	mov	r3, r2
 8009a50:	011b      	lsls	r3, r3, #4
 8009a52:	4413      	add	r3, r2
 8009a54:	011b      	lsls	r3, r3, #4
 8009a56:	440b      	add	r3, r1
 8009a58:	3308      	adds	r3, #8
 8009a5a:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8009a5c:	88ba      	ldrh	r2, [r7, #4]
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d100      	bne.n	8009a64 <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 8009a62:	e7e0      	b.n	8009a26 <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8009a64:	79fb      	ldrb	r3, [r7, #7]
 8009a66:	3301      	adds	r3, #1
 8009a68:	71fb      	strb	r3, [r7, #7]
 8009a6a:	79fb      	ldrb	r3, [r7, #7]
 8009a6c:	2b03      	cmp	r3, #3
 8009a6e:	d9e1      	bls.n	8009a34 <dns_create_txid+0x14>
    }
  }

  return txid;
 8009a70:	88bb      	ldrh	r3, [r7, #4]
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3708      	adds	r7, #8
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}
 8009a7a:	bf00      	nop
 8009a7c:	20009c58 	.word	0x20009c58

08009a80 <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b085      	sub	sp, #20
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d00d      	beq.n	8009aae <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	7adb      	ldrb	r3, [r3, #11]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d109      	bne.n	8009aae <dns_backupserver_available+0x2e>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	7adb      	ldrb	r3, [r3, #11]
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	4a06      	ldr	r2, [pc, #24]	; (8009abc <dns_backupserver_available+0x3c>)
 8009aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d001      	beq.n	8009aae <dns_backupserver_available+0x2e>
      ret = 1;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3714      	adds	r7, #20
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr
 8009abc:	2000a0c8 	.word	0x2000a0c8

08009ac0 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 8009aca:	79fa      	ldrb	r2, [r7, #7]
 8009acc:	4613      	mov	r3, r2
 8009ace:	011b      	lsls	r3, r3, #4
 8009ad0:	4413      	add	r3, r2
 8009ad2:	011b      	lsls	r3, r3, #4
 8009ad4:	4a48      	ldr	r2, [pc, #288]	; (8009bf8 <dns_check_entry+0x138>)
 8009ad6:	4413      	add	r3, r2
 8009ad8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8009ada:	79fb      	ldrb	r3, [r7, #7]
 8009adc:	2b03      	cmp	r3, #3
 8009ade:	d906      	bls.n	8009aee <dns_check_entry+0x2e>
 8009ae0:	4b46      	ldr	r3, [pc, #280]	; (8009bfc <dns_check_entry+0x13c>)
 8009ae2:	f240 421c 	movw	r2, #1052	; 0x41c
 8009ae6:	4946      	ldr	r1, [pc, #280]	; (8009c00 <dns_check_entry+0x140>)
 8009ae8:	4846      	ldr	r0, [pc, #280]	; (8009c04 <dns_check_entry+0x144>)
 8009aea:	f00d fb3d 	bl	8017168 <iprintf>

  switch (entry->state) {
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	7a9b      	ldrb	r3, [r3, #10]
 8009af2:	2b03      	cmp	r3, #3
 8009af4:	d86f      	bhi.n	8009bd6 <dns_check_entry+0x116>
 8009af6:	a201      	add	r2, pc, #4	; (adr r2, 8009afc <dns_check_entry+0x3c>)
 8009af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009afc:	08009be7 	.word	0x08009be7
 8009b00:	08009b0d 	.word	0x08009b0d
 8009b04:	08009b3f 	.word	0x08009b3f
 8009b08:	08009bb5 	.word	0x08009bb5
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 8009b0c:	f7ff ff88 	bl	8009a20 <dns_create_txid>
 8009b10:	4603      	mov	r3, r0
 8009b12:	461a      	mov	r2, r3
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2202      	movs	r2, #2
 8009b1c:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2200      	movs	r2, #0
 8009b22:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2201      	movs	r2, #1
 8009b28:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 8009b30:	79fb      	ldrb	r3, [r7, #7]
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7ff fdc4 	bl	80096c0 <dns_send>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 8009b3c:	e058      	b.n	8009bf0 <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	7b1b      	ldrb	r3, [r3, #12]
 8009b42:	3b01      	subs	r3, #1
 8009b44:	b2da      	uxtb	r2, r3
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	731a      	strb	r2, [r3, #12]
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	7b1b      	ldrb	r3, [r3, #12]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d14b      	bne.n	8009bea <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	7b5b      	ldrb	r3, [r3, #13]
 8009b56:	3301      	adds	r3, #1
 8009b58:	b2da      	uxtb	r2, r3
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	735a      	strb	r2, [r3, #13]
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	7b5b      	ldrb	r3, [r3, #13]
 8009b62:	2b04      	cmp	r3, #4
 8009b64:	d11b      	bne.n	8009b9e <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 8009b66:	68f8      	ldr	r0, [r7, #12]
 8009b68:	f7ff ff8a 	bl	8009a80 <dns_backupserver_available>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d00c      	beq.n	8009b8c <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	7adb      	ldrb	r3, [r3, #11]
 8009b76:	3301      	adds	r3, #1
 8009b78:	b2da      	uxtb	r2, r3
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2201      	movs	r2, #1
 8009b82:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2200      	movs	r2, #0
 8009b88:	735a      	strb	r2, [r3, #13]
 8009b8a:	e00c      	b.n	8009ba6 <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 8009b8c:	79fb      	ldrb	r3, [r7, #7]
 8009b8e:	2100      	movs	r1, #0
 8009b90:	4618      	mov	r0, r3
 8009b92:	f7ff fe85 	bl	80098a0 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	729a      	strb	r2, [r3, #10]
            break;
 8009b9c:	e028      	b.n	8009bf0 <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	7b5a      	ldrb	r2, [r3, #13]
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 8009ba6:	79fb      	ldrb	r3, [r7, #7]
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f7ff fd89 	bl	80096c0 <dns_send>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 8009bb2:	e01a      	b.n	8009bea <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d008      	beq.n	8009bce <dns_check_entry+0x10e>
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	1e5a      	subs	r2, r3, #1
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	601a      	str	r2, [r3, #0]
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d10f      	bne.n	8009bee <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	729a      	strb	r2, [r3, #10]
      }
      break;
 8009bd4:	e00b      	b.n	8009bee <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 8009bd6:	4b09      	ldr	r3, [pc, #36]	; (8009bfc <dns_check_entry+0x13c>)
 8009bd8:	f240 425b 	movw	r2, #1115	; 0x45b
 8009bdc:	490a      	ldr	r1, [pc, #40]	; (8009c08 <dns_check_entry+0x148>)
 8009bde:	4809      	ldr	r0, [pc, #36]	; (8009c04 <dns_check_entry+0x144>)
 8009be0:	f00d fac2 	bl	8017168 <iprintf>
      break;
 8009be4:	e004      	b.n	8009bf0 <dns_check_entry+0x130>
      break;
 8009be6:	bf00      	nop
 8009be8:	e002      	b.n	8009bf0 <dns_check_entry+0x130>
      break;
 8009bea:	bf00      	nop
 8009bec:	e000      	b.n	8009bf0 <dns_check_entry+0x130>
      break;
 8009bee:	bf00      	nop
  }
}
 8009bf0:	bf00      	nop
 8009bf2:	3710      	adds	r7, #16
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}
 8009bf8:	20009c58 	.word	0x20009c58
 8009bfc:	080186a0 	.word	0x080186a0
 8009c00:	08018710 	.word	0x08018710
 8009c04:	080186e8 	.word	0x080186e8
 8009c08:	0801872c 	.word	0x0801872c

08009c0c <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b082      	sub	sp, #8
 8009c10:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8009c12:	2300      	movs	r3, #0
 8009c14:	71fb      	strb	r3, [r7, #7]
 8009c16:	e006      	b.n	8009c26 <dns_check_entries+0x1a>
    dns_check_entry(i);
 8009c18:	79fb      	ldrb	r3, [r7, #7]
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7ff ff50 	bl	8009ac0 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8009c20:	79fb      	ldrb	r3, [r7, #7]
 8009c22:	3301      	adds	r3, #1
 8009c24:	71fb      	strb	r3, [r7, #7]
 8009c26:	79fb      	ldrb	r3, [r7, #7]
 8009c28:	2b03      	cmp	r3, #3
 8009c2a:	d9f5      	bls.n	8009c18 <dns_check_entries+0xc>
  }
}
 8009c2c:	bf00      	nop
 8009c2e:	bf00      	nop
 8009c30:	3708      	adds	r7, #8
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}

08009c36 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009c36:	b580      	push	{r7, lr}
 8009c38:	b082      	sub	sp, #8
 8009c3a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8009c40:	f00d f9cc 	bl	8016fdc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8009c44:	f000 f8d6 	bl	8009df4 <mem_init>
  memp_init();
 8009c48:	f000 fc32 	bl	800a4b0 <memp_init>
  pbuf_init();
  netif_init();
 8009c4c:	f000 fd3e 	bl	800a6cc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009c50:	f007 fbc4 	bl	80113dc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009c54:	f002 f8ba 	bl	800bdcc <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 8009c58:	f7ff fd00 	bl	800965c <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8009c5c:	f007 fafa 	bl	8011254 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009c60:	bf00      	nop
 8009c62:	3708      	adds	r7, #8
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b083      	sub	sp, #12
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	4603      	mov	r3, r0
 8009c70:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8009c72:	4b05      	ldr	r3, [pc, #20]	; (8009c88 <ptr_to_mem+0x20>)
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	88fb      	ldrh	r3, [r7, #6]
 8009c78:	4413      	add	r3, r2
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	370c      	adds	r7, #12
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr
 8009c86:	bf00      	nop
 8009c88:	2000a73c 	.word	0x2000a73c

08009c8c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b083      	sub	sp, #12
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009c94:	4b05      	ldr	r3, [pc, #20]	; (8009cac <mem_to_ptr+0x20>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	1ad3      	subs	r3, r2, r3
 8009c9c:	b29b      	uxth	r3, r3
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	370c      	adds	r7, #12
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr
 8009caa:	bf00      	nop
 8009cac:	2000a73c 	.word	0x2000a73c

08009cb0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009cb0:	b590      	push	{r4, r7, lr}
 8009cb2:	b085      	sub	sp, #20
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009cb8:	4b45      	ldr	r3, [pc, #276]	; (8009dd0 <plug_holes+0x120>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d206      	bcs.n	8009cd0 <plug_holes+0x20>
 8009cc2:	4b44      	ldr	r3, [pc, #272]	; (8009dd4 <plug_holes+0x124>)
 8009cc4:	f240 12df 	movw	r2, #479	; 0x1df
 8009cc8:	4943      	ldr	r1, [pc, #268]	; (8009dd8 <plug_holes+0x128>)
 8009cca:	4844      	ldr	r0, [pc, #272]	; (8009ddc <plug_holes+0x12c>)
 8009ccc:	f00d fa4c 	bl	8017168 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009cd0:	4b43      	ldr	r3, [pc, #268]	; (8009de0 <plug_holes+0x130>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d306      	bcc.n	8009ce8 <plug_holes+0x38>
 8009cda:	4b3e      	ldr	r3, [pc, #248]	; (8009dd4 <plug_holes+0x124>)
 8009cdc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009ce0:	4940      	ldr	r1, [pc, #256]	; (8009de4 <plug_holes+0x134>)
 8009ce2:	483e      	ldr	r0, [pc, #248]	; (8009ddc <plug_holes+0x12c>)
 8009ce4:	f00d fa40 	bl	8017168 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	791b      	ldrb	r3, [r3, #4]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d006      	beq.n	8009cfe <plug_holes+0x4e>
 8009cf0:	4b38      	ldr	r3, [pc, #224]	; (8009dd4 <plug_holes+0x124>)
 8009cf2:	f240 12e1 	movw	r2, #481	; 0x1e1
 8009cf6:	493c      	ldr	r1, [pc, #240]	; (8009de8 <plug_holes+0x138>)
 8009cf8:	4838      	ldr	r0, [pc, #224]	; (8009ddc <plug_holes+0x12c>)
 8009cfa:	f00d fa35 	bl	8017168 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	881b      	ldrh	r3, [r3, #0]
 8009d02:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009d06:	d906      	bls.n	8009d16 <plug_holes+0x66>
 8009d08:	4b32      	ldr	r3, [pc, #200]	; (8009dd4 <plug_holes+0x124>)
 8009d0a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8009d0e:	4937      	ldr	r1, [pc, #220]	; (8009dec <plug_holes+0x13c>)
 8009d10:	4832      	ldr	r0, [pc, #200]	; (8009ddc <plug_holes+0x12c>)
 8009d12:	f00d fa29 	bl	8017168 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	881b      	ldrh	r3, [r3, #0]
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7ff ffa4 	bl	8009c68 <ptr_to_mem>
 8009d20:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d024      	beq.n	8009d74 <plug_holes+0xc4>
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	791b      	ldrb	r3, [r3, #4]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d120      	bne.n	8009d74 <plug_holes+0xc4>
 8009d32:	4b2b      	ldr	r3, [pc, #172]	; (8009de0 <plug_holes+0x130>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	68fa      	ldr	r2, [r7, #12]
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d01b      	beq.n	8009d74 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8009d3c:	4b2c      	ldr	r3, [pc, #176]	; (8009df0 <plug_holes+0x140>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	68fa      	ldr	r2, [r7, #12]
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d102      	bne.n	8009d4c <plug_holes+0x9c>
      lfree = mem;
 8009d46:	4a2a      	ldr	r2, [pc, #168]	; (8009df0 <plug_holes+0x140>)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	881a      	ldrh	r2, [r3, #0]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	881b      	ldrh	r3, [r3, #0]
 8009d58:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009d5c:	d00a      	beq.n	8009d74 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	881b      	ldrh	r3, [r3, #0]
 8009d62:	4618      	mov	r0, r3
 8009d64:	f7ff ff80 	bl	8009c68 <ptr_to_mem>
 8009d68:	4604      	mov	r4, r0
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f7ff ff8e 	bl	8009c8c <mem_to_ptr>
 8009d70:	4603      	mov	r3, r0
 8009d72:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	885b      	ldrh	r3, [r3, #2]
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f7ff ff75 	bl	8009c68 <ptr_to_mem>
 8009d7e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8009d80:	68ba      	ldr	r2, [r7, #8]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d01f      	beq.n	8009dc8 <plug_holes+0x118>
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	791b      	ldrb	r3, [r3, #4]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d11b      	bne.n	8009dc8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8009d90:	4b17      	ldr	r3, [pc, #92]	; (8009df0 <plug_holes+0x140>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d102      	bne.n	8009da0 <plug_holes+0xf0>
      lfree = pmem;
 8009d9a:	4a15      	ldr	r2, [pc, #84]	; (8009df0 <plug_holes+0x140>)
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	881a      	ldrh	r2, [r3, #0]
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	881b      	ldrh	r3, [r3, #0]
 8009dac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009db0:	d00a      	beq.n	8009dc8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	881b      	ldrh	r3, [r3, #0]
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7ff ff56 	bl	8009c68 <ptr_to_mem>
 8009dbc:	4604      	mov	r4, r0
 8009dbe:	68b8      	ldr	r0, [r7, #8]
 8009dc0:	f7ff ff64 	bl	8009c8c <mem_to_ptr>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8009dc8:	bf00      	nop
 8009dca:	3714      	adds	r7, #20
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd90      	pop	{r4, r7, pc}
 8009dd0:	2000a73c 	.word	0x2000a73c
 8009dd4:	0801874c 	.word	0x0801874c
 8009dd8:	0801877c 	.word	0x0801877c
 8009ddc:	08018794 	.word	0x08018794
 8009de0:	2000a740 	.word	0x2000a740
 8009de4:	080187bc 	.word	0x080187bc
 8009de8:	080187d8 	.word	0x080187d8
 8009dec:	080187f4 	.word	0x080187f4
 8009df0:	2000a748 	.word	0x2000a748

08009df4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b082      	sub	sp, #8
 8009df8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009dfa:	4b1f      	ldr	r3, [pc, #124]	; (8009e78 <mem_init+0x84>)
 8009dfc:	3303      	adds	r3, #3
 8009dfe:	f023 0303 	bic.w	r3, r3, #3
 8009e02:	461a      	mov	r2, r3
 8009e04:	4b1d      	ldr	r3, [pc, #116]	; (8009e7c <mem_init+0x88>)
 8009e06:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8009e08:	4b1c      	ldr	r3, [pc, #112]	; (8009e7c <mem_init+0x88>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009e14:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8009e22:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8009e26:	f7ff ff1f 	bl	8009c68 <ptr_to_mem>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	4a14      	ldr	r2, [pc, #80]	; (8009e80 <mem_init+0x8c>)
 8009e2e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8009e30:	4b13      	ldr	r3, [pc, #76]	; (8009e80 <mem_init+0x8c>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	2201      	movs	r2, #1
 8009e36:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8009e38:	4b11      	ldr	r3, [pc, #68]	; (8009e80 <mem_init+0x8c>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009e40:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8009e42:	4b0f      	ldr	r3, [pc, #60]	; (8009e80 <mem_init+0x8c>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009e4a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8009e4c:	4b0b      	ldr	r3, [pc, #44]	; (8009e7c <mem_init+0x88>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a0c      	ldr	r2, [pc, #48]	; (8009e84 <mem_init+0x90>)
 8009e52:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8009e54:	480c      	ldr	r0, [pc, #48]	; (8009e88 <mem_init+0x94>)
 8009e56:	f00d f8cd 	bl	8016ff4 <sys_mutex_new>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d006      	beq.n	8009e6e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8009e60:	4b0a      	ldr	r3, [pc, #40]	; (8009e8c <mem_init+0x98>)
 8009e62:	f240 221f 	movw	r2, #543	; 0x21f
 8009e66:	490a      	ldr	r1, [pc, #40]	; (8009e90 <mem_init+0x9c>)
 8009e68:	480a      	ldr	r0, [pc, #40]	; (8009e94 <mem_init+0xa0>)
 8009e6a:	f00d f97d 	bl	8017168 <iprintf>
  }
}
 8009e6e:	bf00      	nop
 8009e70:	3708      	adds	r7, #8
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}
 8009e76:	bf00      	nop
 8009e78:	2000a0e8 	.word	0x2000a0e8
 8009e7c:	2000a73c 	.word	0x2000a73c
 8009e80:	2000a740 	.word	0x2000a740
 8009e84:	2000a748 	.word	0x2000a748
 8009e88:	2000a744 	.word	0x2000a744
 8009e8c:	0801874c 	.word	0x0801874c
 8009e90:	08018820 	.word	0x08018820
 8009e94:	08018794 	.word	0x08018794

08009e98 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b086      	sub	sp, #24
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f7ff fef3 	bl	8009c8c <mem_to_ptr>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	881b      	ldrh	r3, [r3, #0]
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f7ff feda 	bl	8009c68 <ptr_to_mem>
 8009eb4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	885b      	ldrh	r3, [r3, #2]
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7ff fed4 	bl	8009c68 <ptr_to_mem>
 8009ec0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	881b      	ldrh	r3, [r3, #0]
 8009ec6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009eca:	d818      	bhi.n	8009efe <mem_link_valid+0x66>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	885b      	ldrh	r3, [r3, #2]
 8009ed0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009ed4:	d813      	bhi.n	8009efe <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009eda:	8afa      	ldrh	r2, [r7, #22]
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d004      	beq.n	8009eea <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	881b      	ldrh	r3, [r3, #0]
 8009ee4:	8afa      	ldrh	r2, [r7, #22]
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d109      	bne.n	8009efe <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009eea:	4b08      	ldr	r3, [pc, #32]	; (8009f0c <mem_link_valid+0x74>)
 8009eec:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009eee:	693a      	ldr	r2, [r7, #16]
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d006      	beq.n	8009f02 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	885b      	ldrh	r3, [r3, #2]
 8009ef8:	8afa      	ldrh	r2, [r7, #22]
 8009efa:	429a      	cmp	r2, r3
 8009efc:	d001      	beq.n	8009f02 <mem_link_valid+0x6a>
    return 0;
 8009efe:	2300      	movs	r3, #0
 8009f00:	e000      	b.n	8009f04 <mem_link_valid+0x6c>
  }
  return 1;
 8009f02:	2301      	movs	r3, #1
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3718      	adds	r7, #24
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}
 8009f0c:	2000a740 	.word	0x2000a740

08009f10 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b088      	sub	sp, #32
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d070      	beq.n	800a000 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f003 0303 	and.w	r3, r3, #3
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d00d      	beq.n	8009f44 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8009f28:	4b37      	ldr	r3, [pc, #220]	; (800a008 <mem_free+0xf8>)
 8009f2a:	f240 2273 	movw	r2, #627	; 0x273
 8009f2e:	4937      	ldr	r1, [pc, #220]	; (800a00c <mem_free+0xfc>)
 8009f30:	4837      	ldr	r0, [pc, #220]	; (800a010 <mem_free+0x100>)
 8009f32:	f00d f919 	bl	8017168 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009f36:	f00d f8af 	bl	8017098 <sys_arch_protect>
 8009f3a:	60f8      	str	r0, [r7, #12]
 8009f3c:	68f8      	ldr	r0, [r7, #12]
 8009f3e:	f00d f8b9 	bl	80170b4 <sys_arch_unprotect>
    return;
 8009f42:	e05e      	b.n	800a002 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	3b08      	subs	r3, #8
 8009f48:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8009f4a:	4b32      	ldr	r3, [pc, #200]	; (800a014 <mem_free+0x104>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	69fa      	ldr	r2, [r7, #28]
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d306      	bcc.n	8009f62 <mem_free+0x52>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f103 020c 	add.w	r2, r3, #12
 8009f5a:	4b2f      	ldr	r3, [pc, #188]	; (800a018 <mem_free+0x108>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d90d      	bls.n	8009f7e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8009f62:	4b29      	ldr	r3, [pc, #164]	; (800a008 <mem_free+0xf8>)
 8009f64:	f240 227f 	movw	r2, #639	; 0x27f
 8009f68:	492c      	ldr	r1, [pc, #176]	; (800a01c <mem_free+0x10c>)
 8009f6a:	4829      	ldr	r0, [pc, #164]	; (800a010 <mem_free+0x100>)
 8009f6c:	f00d f8fc 	bl	8017168 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009f70:	f00d f892 	bl	8017098 <sys_arch_protect>
 8009f74:	6138      	str	r0, [r7, #16]
 8009f76:	6938      	ldr	r0, [r7, #16]
 8009f78:	f00d f89c 	bl	80170b4 <sys_arch_unprotect>
    return;
 8009f7c:	e041      	b.n	800a002 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8009f7e:	4828      	ldr	r0, [pc, #160]	; (800a020 <mem_free+0x110>)
 8009f80:	f00d f84e 	bl	8017020 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8009f84:	69fb      	ldr	r3, [r7, #28]
 8009f86:	791b      	ldrb	r3, [r3, #4]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d110      	bne.n	8009fae <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8009f8c:	4b1e      	ldr	r3, [pc, #120]	; (800a008 <mem_free+0xf8>)
 8009f8e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8009f92:	4924      	ldr	r1, [pc, #144]	; (800a024 <mem_free+0x114>)
 8009f94:	481e      	ldr	r0, [pc, #120]	; (800a010 <mem_free+0x100>)
 8009f96:	f00d f8e7 	bl	8017168 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8009f9a:	4821      	ldr	r0, [pc, #132]	; (800a020 <mem_free+0x110>)
 8009f9c:	f00d f84f 	bl	801703e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009fa0:	f00d f87a 	bl	8017098 <sys_arch_protect>
 8009fa4:	6178      	str	r0, [r7, #20]
 8009fa6:	6978      	ldr	r0, [r7, #20]
 8009fa8:	f00d f884 	bl	80170b4 <sys_arch_unprotect>
    return;
 8009fac:	e029      	b.n	800a002 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8009fae:	69f8      	ldr	r0, [r7, #28]
 8009fb0:	f7ff ff72 	bl	8009e98 <mem_link_valid>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d110      	bne.n	8009fdc <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8009fba:	4b13      	ldr	r3, [pc, #76]	; (800a008 <mem_free+0xf8>)
 8009fbc:	f240 2295 	movw	r2, #661	; 0x295
 8009fc0:	4919      	ldr	r1, [pc, #100]	; (800a028 <mem_free+0x118>)
 8009fc2:	4813      	ldr	r0, [pc, #76]	; (800a010 <mem_free+0x100>)
 8009fc4:	f00d f8d0 	bl	8017168 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8009fc8:	4815      	ldr	r0, [pc, #84]	; (800a020 <mem_free+0x110>)
 8009fca:	f00d f838 	bl	801703e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009fce:	f00d f863 	bl	8017098 <sys_arch_protect>
 8009fd2:	61b8      	str	r0, [r7, #24]
 8009fd4:	69b8      	ldr	r0, [r7, #24]
 8009fd6:	f00d f86d 	bl	80170b4 <sys_arch_unprotect>
    return;
 8009fda:	e012      	b.n	800a002 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8009fdc:	69fb      	ldr	r3, [r7, #28]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8009fe2:	4b12      	ldr	r3, [pc, #72]	; (800a02c <mem_free+0x11c>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	69fa      	ldr	r2, [r7, #28]
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d202      	bcs.n	8009ff2 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8009fec:	4a0f      	ldr	r2, [pc, #60]	; (800a02c <mem_free+0x11c>)
 8009fee:	69fb      	ldr	r3, [r7, #28]
 8009ff0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8009ff2:	69f8      	ldr	r0, [r7, #28]
 8009ff4:	f7ff fe5c 	bl	8009cb0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8009ff8:	4809      	ldr	r0, [pc, #36]	; (800a020 <mem_free+0x110>)
 8009ffa:	f00d f820 	bl	801703e <sys_mutex_unlock>
 8009ffe:	e000      	b.n	800a002 <mem_free+0xf2>
    return;
 800a000:	bf00      	nop
}
 800a002:	3720      	adds	r7, #32
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}
 800a008:	0801874c 	.word	0x0801874c
 800a00c:	0801883c 	.word	0x0801883c
 800a010:	08018794 	.word	0x08018794
 800a014:	2000a73c 	.word	0x2000a73c
 800a018:	2000a740 	.word	0x2000a740
 800a01c:	08018860 	.word	0x08018860
 800a020:	2000a744 	.word	0x2000a744
 800a024:	0801887c 	.word	0x0801887c
 800a028:	080188a4 	.word	0x080188a4
 800a02c:	2000a748 	.word	0x2000a748

0800a030 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b088      	sub	sp, #32
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	460b      	mov	r3, r1
 800a03a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a03c:	887b      	ldrh	r3, [r7, #2]
 800a03e:	3303      	adds	r3, #3
 800a040:	b29b      	uxth	r3, r3
 800a042:	f023 0303 	bic.w	r3, r3, #3
 800a046:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a048:	8bfb      	ldrh	r3, [r7, #30]
 800a04a:	2b0b      	cmp	r3, #11
 800a04c:	d801      	bhi.n	800a052 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a04e:	230c      	movs	r3, #12
 800a050:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a052:	8bfb      	ldrh	r3, [r7, #30]
 800a054:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a058:	d803      	bhi.n	800a062 <mem_trim+0x32>
 800a05a:	8bfa      	ldrh	r2, [r7, #30]
 800a05c:	887b      	ldrh	r3, [r7, #2]
 800a05e:	429a      	cmp	r2, r3
 800a060:	d201      	bcs.n	800a066 <mem_trim+0x36>
    return NULL;
 800a062:	2300      	movs	r3, #0
 800a064:	e0d8      	b.n	800a218 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a066:	4b6e      	ldr	r3, [pc, #440]	; (800a220 <mem_trim+0x1f0>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	429a      	cmp	r2, r3
 800a06e:	d304      	bcc.n	800a07a <mem_trim+0x4a>
 800a070:	4b6c      	ldr	r3, [pc, #432]	; (800a224 <mem_trim+0x1f4>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	687a      	ldr	r2, [r7, #4]
 800a076:	429a      	cmp	r2, r3
 800a078:	d306      	bcc.n	800a088 <mem_trim+0x58>
 800a07a:	4b6b      	ldr	r3, [pc, #428]	; (800a228 <mem_trim+0x1f8>)
 800a07c:	f240 22d1 	movw	r2, #721	; 0x2d1
 800a080:	496a      	ldr	r1, [pc, #424]	; (800a22c <mem_trim+0x1fc>)
 800a082:	486b      	ldr	r0, [pc, #428]	; (800a230 <mem_trim+0x200>)
 800a084:	f00d f870 	bl	8017168 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a088:	4b65      	ldr	r3, [pc, #404]	; (800a220 <mem_trim+0x1f0>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	429a      	cmp	r2, r3
 800a090:	d304      	bcc.n	800a09c <mem_trim+0x6c>
 800a092:	4b64      	ldr	r3, [pc, #400]	; (800a224 <mem_trim+0x1f4>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	687a      	ldr	r2, [r7, #4]
 800a098:	429a      	cmp	r2, r3
 800a09a:	d307      	bcc.n	800a0ac <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a09c:	f00c fffc 	bl	8017098 <sys_arch_protect>
 800a0a0:	60b8      	str	r0, [r7, #8]
 800a0a2:	68b8      	ldr	r0, [r7, #8]
 800a0a4:	f00d f806 	bl	80170b4 <sys_arch_unprotect>
    return rmem;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	e0b5      	b.n	800a218 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	3b08      	subs	r3, #8
 800a0b0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a0b2:	69b8      	ldr	r0, [r7, #24]
 800a0b4:	f7ff fdea 	bl	8009c8c <mem_to_ptr>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a0bc:	69bb      	ldr	r3, [r7, #24]
 800a0be:	881a      	ldrh	r2, [r3, #0]
 800a0c0:	8afb      	ldrh	r3, [r7, #22]
 800a0c2:	1ad3      	subs	r3, r2, r3
 800a0c4:	b29b      	uxth	r3, r3
 800a0c6:	3b08      	subs	r3, #8
 800a0c8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a0ca:	8bfa      	ldrh	r2, [r7, #30]
 800a0cc:	8abb      	ldrh	r3, [r7, #20]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d906      	bls.n	800a0e0 <mem_trim+0xb0>
 800a0d2:	4b55      	ldr	r3, [pc, #340]	; (800a228 <mem_trim+0x1f8>)
 800a0d4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a0d8:	4956      	ldr	r1, [pc, #344]	; (800a234 <mem_trim+0x204>)
 800a0da:	4855      	ldr	r0, [pc, #340]	; (800a230 <mem_trim+0x200>)
 800a0dc:	f00d f844 	bl	8017168 <iprintf>
  if (newsize > size) {
 800a0e0:	8bfa      	ldrh	r2, [r7, #30]
 800a0e2:	8abb      	ldrh	r3, [r7, #20]
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	d901      	bls.n	800a0ec <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	e095      	b.n	800a218 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800a0ec:	8bfa      	ldrh	r2, [r7, #30]
 800a0ee:	8abb      	ldrh	r3, [r7, #20]
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d101      	bne.n	800a0f8 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	e08f      	b.n	800a218 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a0f8:	484f      	ldr	r0, [pc, #316]	; (800a238 <mem_trim+0x208>)
 800a0fa:	f00c ff91 	bl	8017020 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800a0fe:	69bb      	ldr	r3, [r7, #24]
 800a100:	881b      	ldrh	r3, [r3, #0]
 800a102:	4618      	mov	r0, r3
 800a104:	f7ff fdb0 	bl	8009c68 <ptr_to_mem>
 800a108:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	791b      	ldrb	r3, [r3, #4]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d13f      	bne.n	800a192 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a112:	69bb      	ldr	r3, [r7, #24]
 800a114:	881b      	ldrh	r3, [r3, #0]
 800a116:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a11a:	d106      	bne.n	800a12a <mem_trim+0xfa>
 800a11c:	4b42      	ldr	r3, [pc, #264]	; (800a228 <mem_trim+0x1f8>)
 800a11e:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a122:	4946      	ldr	r1, [pc, #280]	; (800a23c <mem_trim+0x20c>)
 800a124:	4842      	ldr	r0, [pc, #264]	; (800a230 <mem_trim+0x200>)
 800a126:	f00d f81f 	bl	8017168 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	881b      	ldrh	r3, [r3, #0]
 800a12e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a130:	8afa      	ldrh	r2, [r7, #22]
 800a132:	8bfb      	ldrh	r3, [r7, #30]
 800a134:	4413      	add	r3, r2
 800a136:	b29b      	uxth	r3, r3
 800a138:	3308      	adds	r3, #8
 800a13a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a13c:	4b40      	ldr	r3, [pc, #256]	; (800a240 <mem_trim+0x210>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	693a      	ldr	r2, [r7, #16]
 800a142:	429a      	cmp	r2, r3
 800a144:	d106      	bne.n	800a154 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800a146:	89fb      	ldrh	r3, [r7, #14]
 800a148:	4618      	mov	r0, r3
 800a14a:	f7ff fd8d 	bl	8009c68 <ptr_to_mem>
 800a14e:	4603      	mov	r3, r0
 800a150:	4a3b      	ldr	r2, [pc, #236]	; (800a240 <mem_trim+0x210>)
 800a152:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a154:	89fb      	ldrh	r3, [r7, #14]
 800a156:	4618      	mov	r0, r3
 800a158:	f7ff fd86 	bl	8009c68 <ptr_to_mem>
 800a15c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	2200      	movs	r2, #0
 800a162:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	89ba      	ldrh	r2, [r7, #12]
 800a168:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	8afa      	ldrh	r2, [r7, #22]
 800a16e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a170:	69bb      	ldr	r3, [r7, #24]
 800a172:	89fa      	ldrh	r2, [r7, #14]
 800a174:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	881b      	ldrh	r3, [r3, #0]
 800a17a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a17e:	d047      	beq.n	800a210 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	881b      	ldrh	r3, [r3, #0]
 800a184:	4618      	mov	r0, r3
 800a186:	f7ff fd6f 	bl	8009c68 <ptr_to_mem>
 800a18a:	4602      	mov	r2, r0
 800a18c:	89fb      	ldrh	r3, [r7, #14]
 800a18e:	8053      	strh	r3, [r2, #2]
 800a190:	e03e      	b.n	800a210 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a192:	8bfb      	ldrh	r3, [r7, #30]
 800a194:	f103 0214 	add.w	r2, r3, #20
 800a198:	8abb      	ldrh	r3, [r7, #20]
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d838      	bhi.n	800a210 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a19e:	8afa      	ldrh	r2, [r7, #22]
 800a1a0:	8bfb      	ldrh	r3, [r7, #30]
 800a1a2:	4413      	add	r3, r2
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	3308      	adds	r3, #8
 800a1a8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a1aa:	69bb      	ldr	r3, [r7, #24]
 800a1ac:	881b      	ldrh	r3, [r3, #0]
 800a1ae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a1b2:	d106      	bne.n	800a1c2 <mem_trim+0x192>
 800a1b4:	4b1c      	ldr	r3, [pc, #112]	; (800a228 <mem_trim+0x1f8>)
 800a1b6:	f240 3216 	movw	r2, #790	; 0x316
 800a1ba:	4920      	ldr	r1, [pc, #128]	; (800a23c <mem_trim+0x20c>)
 800a1bc:	481c      	ldr	r0, [pc, #112]	; (800a230 <mem_trim+0x200>)
 800a1be:	f00c ffd3 	bl	8017168 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a1c2:	89fb      	ldrh	r3, [r7, #14]
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f7ff fd4f 	bl	8009c68 <ptr_to_mem>
 800a1ca:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a1cc:	4b1c      	ldr	r3, [pc, #112]	; (800a240 <mem_trim+0x210>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	693a      	ldr	r2, [r7, #16]
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d202      	bcs.n	800a1dc <mem_trim+0x1ac>
      lfree = mem2;
 800a1d6:	4a1a      	ldr	r2, [pc, #104]	; (800a240 <mem_trim+0x210>)
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a1e2:	69bb      	ldr	r3, [r7, #24]
 800a1e4:	881a      	ldrh	r2, [r3, #0]
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	8afa      	ldrh	r2, [r7, #22]
 800a1ee:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a1f0:	69bb      	ldr	r3, [r7, #24]
 800a1f2:	89fa      	ldrh	r2, [r7, #14]
 800a1f4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	881b      	ldrh	r3, [r3, #0]
 800a1fa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a1fe:	d007      	beq.n	800a210 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	881b      	ldrh	r3, [r3, #0]
 800a204:	4618      	mov	r0, r3
 800a206:	f7ff fd2f 	bl	8009c68 <ptr_to_mem>
 800a20a:	4602      	mov	r2, r0
 800a20c:	89fb      	ldrh	r3, [r7, #14]
 800a20e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a210:	4809      	ldr	r0, [pc, #36]	; (800a238 <mem_trim+0x208>)
 800a212:	f00c ff14 	bl	801703e <sys_mutex_unlock>
  return rmem;
 800a216:	687b      	ldr	r3, [r7, #4]
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3720      	adds	r7, #32
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	2000a73c 	.word	0x2000a73c
 800a224:	2000a740 	.word	0x2000a740
 800a228:	0801874c 	.word	0x0801874c
 800a22c:	080188d8 	.word	0x080188d8
 800a230:	08018794 	.word	0x08018794
 800a234:	080188f0 	.word	0x080188f0
 800a238:	2000a744 	.word	0x2000a744
 800a23c:	08018910 	.word	0x08018910
 800a240:	2000a748 	.word	0x2000a748

0800a244 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b088      	sub	sp, #32
 800a248:	af00      	add	r7, sp, #0
 800a24a:	4603      	mov	r3, r0
 800a24c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a24e:	88fb      	ldrh	r3, [r7, #6]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d101      	bne.n	800a258 <mem_malloc+0x14>
    return NULL;
 800a254:	2300      	movs	r3, #0
 800a256:	e0e2      	b.n	800a41e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a258:	88fb      	ldrh	r3, [r7, #6]
 800a25a:	3303      	adds	r3, #3
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	f023 0303 	bic.w	r3, r3, #3
 800a262:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a264:	8bbb      	ldrh	r3, [r7, #28]
 800a266:	2b0b      	cmp	r3, #11
 800a268:	d801      	bhi.n	800a26e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a26a:	230c      	movs	r3, #12
 800a26c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a26e:	8bbb      	ldrh	r3, [r7, #28]
 800a270:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a274:	d803      	bhi.n	800a27e <mem_malloc+0x3a>
 800a276:	8bba      	ldrh	r2, [r7, #28]
 800a278:	88fb      	ldrh	r3, [r7, #6]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d201      	bcs.n	800a282 <mem_malloc+0x3e>
    return NULL;
 800a27e:	2300      	movs	r3, #0
 800a280:	e0cd      	b.n	800a41e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800a282:	4869      	ldr	r0, [pc, #420]	; (800a428 <mem_malloc+0x1e4>)
 800a284:	f00c fecc 	bl	8017020 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a288:	4b68      	ldr	r3, [pc, #416]	; (800a42c <mem_malloc+0x1e8>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4618      	mov	r0, r3
 800a28e:	f7ff fcfd 	bl	8009c8c <mem_to_ptr>
 800a292:	4603      	mov	r3, r0
 800a294:	83fb      	strh	r3, [r7, #30]
 800a296:	e0b7      	b.n	800a408 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a298:	8bfb      	ldrh	r3, [r7, #30]
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7ff fce4 	bl	8009c68 <ptr_to_mem>
 800a2a0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	791b      	ldrb	r3, [r3, #4]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	f040 80a7 	bne.w	800a3fa <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	881b      	ldrh	r3, [r3, #0]
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	8bfb      	ldrh	r3, [r7, #30]
 800a2b4:	1ad3      	subs	r3, r2, r3
 800a2b6:	f1a3 0208 	sub.w	r2, r3, #8
 800a2ba:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	f0c0 809c 	bcc.w	800a3fa <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	881b      	ldrh	r3, [r3, #0]
 800a2c6:	461a      	mov	r2, r3
 800a2c8:	8bfb      	ldrh	r3, [r7, #30]
 800a2ca:	1ad3      	subs	r3, r2, r3
 800a2cc:	f1a3 0208 	sub.w	r2, r3, #8
 800a2d0:	8bbb      	ldrh	r3, [r7, #28]
 800a2d2:	3314      	adds	r3, #20
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d333      	bcc.n	800a340 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a2d8:	8bfa      	ldrh	r2, [r7, #30]
 800a2da:	8bbb      	ldrh	r3, [r7, #28]
 800a2dc:	4413      	add	r3, r2
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	3308      	adds	r3, #8
 800a2e2:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a2e4:	8a7b      	ldrh	r3, [r7, #18]
 800a2e6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a2ea:	d106      	bne.n	800a2fa <mem_malloc+0xb6>
 800a2ec:	4b50      	ldr	r3, [pc, #320]	; (800a430 <mem_malloc+0x1ec>)
 800a2ee:	f240 3287 	movw	r2, #903	; 0x387
 800a2f2:	4950      	ldr	r1, [pc, #320]	; (800a434 <mem_malloc+0x1f0>)
 800a2f4:	4850      	ldr	r0, [pc, #320]	; (800a438 <mem_malloc+0x1f4>)
 800a2f6:	f00c ff37 	bl	8017168 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a2fa:	8a7b      	ldrh	r3, [r7, #18]
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f7ff fcb3 	bl	8009c68 <ptr_to_mem>
 800a302:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2200      	movs	r2, #0
 800a308:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	881a      	ldrh	r2, [r3, #0]
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	8bfa      	ldrh	r2, [r7, #30]
 800a316:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	8a7a      	ldrh	r2, [r7, #18]
 800a31c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	2201      	movs	r2, #1
 800a322:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	881b      	ldrh	r3, [r3, #0]
 800a328:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a32c:	d00b      	beq.n	800a346 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	881b      	ldrh	r3, [r3, #0]
 800a332:	4618      	mov	r0, r3
 800a334:	f7ff fc98 	bl	8009c68 <ptr_to_mem>
 800a338:	4602      	mov	r2, r0
 800a33a:	8a7b      	ldrh	r3, [r7, #18]
 800a33c:	8053      	strh	r3, [r2, #2]
 800a33e:	e002      	b.n	800a346 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	2201      	movs	r2, #1
 800a344:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a346:	4b39      	ldr	r3, [pc, #228]	; (800a42c <mem_malloc+0x1e8>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	697a      	ldr	r2, [r7, #20]
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d127      	bne.n	800a3a0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800a350:	4b36      	ldr	r3, [pc, #216]	; (800a42c <mem_malloc+0x1e8>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a356:	e005      	b.n	800a364 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a358:	69bb      	ldr	r3, [r7, #24]
 800a35a:	881b      	ldrh	r3, [r3, #0]
 800a35c:	4618      	mov	r0, r3
 800a35e:	f7ff fc83 	bl	8009c68 <ptr_to_mem>
 800a362:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a364:	69bb      	ldr	r3, [r7, #24]
 800a366:	791b      	ldrb	r3, [r3, #4]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d004      	beq.n	800a376 <mem_malloc+0x132>
 800a36c:	4b33      	ldr	r3, [pc, #204]	; (800a43c <mem_malloc+0x1f8>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	69ba      	ldr	r2, [r7, #24]
 800a372:	429a      	cmp	r2, r3
 800a374:	d1f0      	bne.n	800a358 <mem_malloc+0x114>
          }
          lfree = cur;
 800a376:	4a2d      	ldr	r2, [pc, #180]	; (800a42c <mem_malloc+0x1e8>)
 800a378:	69bb      	ldr	r3, [r7, #24]
 800a37a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a37c:	4b2b      	ldr	r3, [pc, #172]	; (800a42c <mem_malloc+0x1e8>)
 800a37e:	681a      	ldr	r2, [r3, #0]
 800a380:	4b2e      	ldr	r3, [pc, #184]	; (800a43c <mem_malloc+0x1f8>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	429a      	cmp	r2, r3
 800a386:	d00b      	beq.n	800a3a0 <mem_malloc+0x15c>
 800a388:	4b28      	ldr	r3, [pc, #160]	; (800a42c <mem_malloc+0x1e8>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	791b      	ldrb	r3, [r3, #4]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d006      	beq.n	800a3a0 <mem_malloc+0x15c>
 800a392:	4b27      	ldr	r3, [pc, #156]	; (800a430 <mem_malloc+0x1ec>)
 800a394:	f240 32b5 	movw	r2, #949	; 0x3b5
 800a398:	4929      	ldr	r1, [pc, #164]	; (800a440 <mem_malloc+0x1fc>)
 800a39a:	4827      	ldr	r0, [pc, #156]	; (800a438 <mem_malloc+0x1f4>)
 800a39c:	f00c fee4 	bl	8017168 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800a3a0:	4821      	ldr	r0, [pc, #132]	; (800a428 <mem_malloc+0x1e4>)
 800a3a2:	f00c fe4c 	bl	801703e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a3a6:	8bba      	ldrh	r2, [r7, #28]
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	4413      	add	r3, r2
 800a3ac:	3308      	adds	r3, #8
 800a3ae:	4a23      	ldr	r2, [pc, #140]	; (800a43c <mem_malloc+0x1f8>)
 800a3b0:	6812      	ldr	r2, [r2, #0]
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d906      	bls.n	800a3c4 <mem_malloc+0x180>
 800a3b6:	4b1e      	ldr	r3, [pc, #120]	; (800a430 <mem_malloc+0x1ec>)
 800a3b8:	f240 32b9 	movw	r2, #953	; 0x3b9
 800a3bc:	4921      	ldr	r1, [pc, #132]	; (800a444 <mem_malloc+0x200>)
 800a3be:	481e      	ldr	r0, [pc, #120]	; (800a438 <mem_malloc+0x1f4>)
 800a3c0:	f00c fed2 	bl	8017168 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	f003 0303 	and.w	r3, r3, #3
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d006      	beq.n	800a3dc <mem_malloc+0x198>
 800a3ce:	4b18      	ldr	r3, [pc, #96]	; (800a430 <mem_malloc+0x1ec>)
 800a3d0:	f240 32bb 	movw	r2, #955	; 0x3bb
 800a3d4:	491c      	ldr	r1, [pc, #112]	; (800a448 <mem_malloc+0x204>)
 800a3d6:	4818      	ldr	r0, [pc, #96]	; (800a438 <mem_malloc+0x1f4>)
 800a3d8:	f00c fec6 	bl	8017168 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	f003 0303 	and.w	r3, r3, #3
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d006      	beq.n	800a3f4 <mem_malloc+0x1b0>
 800a3e6:	4b12      	ldr	r3, [pc, #72]	; (800a430 <mem_malloc+0x1ec>)
 800a3e8:	f240 32bd 	movw	r2, #957	; 0x3bd
 800a3ec:	4917      	ldr	r1, [pc, #92]	; (800a44c <mem_malloc+0x208>)
 800a3ee:	4812      	ldr	r0, [pc, #72]	; (800a438 <mem_malloc+0x1f4>)
 800a3f0:	f00c feba 	bl	8017168 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	3308      	adds	r3, #8
 800a3f8:	e011      	b.n	800a41e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800a3fa:	8bfb      	ldrh	r3, [r7, #30]
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f7ff fc33 	bl	8009c68 <ptr_to_mem>
 800a402:	4603      	mov	r3, r0
 800a404:	881b      	ldrh	r3, [r3, #0]
 800a406:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a408:	8bfa      	ldrh	r2, [r7, #30]
 800a40a:	8bbb      	ldrh	r3, [r7, #28]
 800a40c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800a410:	429a      	cmp	r2, r3
 800a412:	f4ff af41 	bcc.w	800a298 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800a416:	4804      	ldr	r0, [pc, #16]	; (800a428 <mem_malloc+0x1e4>)
 800a418:	f00c fe11 	bl	801703e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a41c:	2300      	movs	r3, #0
}
 800a41e:	4618      	mov	r0, r3
 800a420:	3720      	adds	r7, #32
 800a422:	46bd      	mov	sp, r7
 800a424:	bd80      	pop	{r7, pc}
 800a426:	bf00      	nop
 800a428:	2000a744 	.word	0x2000a744
 800a42c:	2000a748 	.word	0x2000a748
 800a430:	0801874c 	.word	0x0801874c
 800a434:	08018910 	.word	0x08018910
 800a438:	08018794 	.word	0x08018794
 800a43c:	2000a740 	.word	0x2000a740
 800a440:	08018924 	.word	0x08018924
 800a444:	08018940 	.word	0x08018940
 800a448:	08018970 	.word	0x08018970
 800a44c:	080189a0 	.word	0x080189a0

0800a450 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a450:	b480      	push	{r7}
 800a452:	b085      	sub	sp, #20
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	2200      	movs	r2, #0
 800a45e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	689b      	ldr	r3, [r3, #8]
 800a464:	3303      	adds	r3, #3
 800a466:	f023 0303 	bic.w	r3, r3, #3
 800a46a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a46c:	2300      	movs	r3, #0
 800a46e:	60fb      	str	r3, [r7, #12]
 800a470:	e011      	b.n	800a496 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	68db      	ldr	r3, [r3, #12]
 800a476:	681a      	ldr	r2, [r3, #0]
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	68db      	ldr	r3, [r3, #12]
 800a480:	68ba      	ldr	r2, [r7, #8]
 800a482:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	889b      	ldrh	r3, [r3, #4]
 800a488:	461a      	mov	r2, r3
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	4413      	add	r3, r2
 800a48e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	3301      	adds	r3, #1
 800a494:	60fb      	str	r3, [r7, #12]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	88db      	ldrh	r3, [r3, #6]
 800a49a:	461a      	mov	r2, r3
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	dbe7      	blt.n	800a472 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a4a2:	bf00      	nop
 800a4a4:	bf00      	nop
 800a4a6:	3714      	adds	r7, #20
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr

0800a4b0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b082      	sub	sp, #8
 800a4b4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	80fb      	strh	r3, [r7, #6]
 800a4ba:	e009      	b.n	800a4d0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a4bc:	88fb      	ldrh	r3, [r7, #6]
 800a4be:	4a08      	ldr	r2, [pc, #32]	; (800a4e0 <memp_init+0x30>)
 800a4c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f7ff ffc3 	bl	800a450 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a4ca:	88fb      	ldrh	r3, [r7, #6]
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	80fb      	strh	r3, [r7, #6]
 800a4d0:	88fb      	ldrh	r3, [r7, #6]
 800a4d2:	2b0d      	cmp	r3, #13
 800a4d4:	d9f2      	bls.n	800a4bc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a4d6:	bf00      	nop
 800a4d8:	bf00      	nop
 800a4da:	3708      	adds	r7, #8
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}
 800a4e0:	0801d580 	.word	0x0801d580

0800a4e4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b084      	sub	sp, #16
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800a4ec:	f00c fdd4 	bl	8017098 <sys_arch_protect>
 800a4f0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	68db      	ldr	r3, [r3, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d015      	beq.n	800a52c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	68ba      	ldr	r2, [r7, #8]
 800a506:	6812      	ldr	r2, [r2, #0]
 800a508:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	f003 0303 	and.w	r3, r3, #3
 800a510:	2b00      	cmp	r3, #0
 800a512:	d006      	beq.n	800a522 <do_memp_malloc_pool+0x3e>
 800a514:	4b09      	ldr	r3, [pc, #36]	; (800a53c <do_memp_malloc_pool+0x58>)
 800a516:	f44f 728c 	mov.w	r2, #280	; 0x118
 800a51a:	4909      	ldr	r1, [pc, #36]	; (800a540 <do_memp_malloc_pool+0x5c>)
 800a51c:	4809      	ldr	r0, [pc, #36]	; (800a544 <do_memp_malloc_pool+0x60>)
 800a51e:	f00c fe23 	bl	8017168 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a522:	68f8      	ldr	r0, [r7, #12]
 800a524:	f00c fdc6 	bl	80170b4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	e003      	b.n	800a534 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a52c:	68f8      	ldr	r0, [r7, #12]
 800a52e:	f00c fdc1 	bl	80170b4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800a532:	2300      	movs	r3, #0
}
 800a534:	4618      	mov	r0, r3
 800a536:	3710      	adds	r7, #16
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}
 800a53c:	08018a64 	.word	0x08018a64
 800a540:	08018a94 	.word	0x08018a94
 800a544:	08018ab8 	.word	0x08018ab8

0800a548 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b082      	sub	sp, #8
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d106      	bne.n	800a564 <memp_malloc_pool+0x1c>
 800a556:	4b0a      	ldr	r3, [pc, #40]	; (800a580 <memp_malloc_pool+0x38>)
 800a558:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800a55c:	4909      	ldr	r1, [pc, #36]	; (800a584 <memp_malloc_pool+0x3c>)
 800a55e:	480a      	ldr	r0, [pc, #40]	; (800a588 <memp_malloc_pool+0x40>)
 800a560:	f00c fe02 	bl	8017168 <iprintf>
  if (desc == NULL) {
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d101      	bne.n	800a56e <memp_malloc_pool+0x26>
    return NULL;
 800a56a:	2300      	movs	r3, #0
 800a56c:	e003      	b.n	800a576 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f7ff ffb8 	bl	800a4e4 <do_memp_malloc_pool>
 800a574:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800a576:	4618      	mov	r0, r3
 800a578:	3708      	adds	r7, #8
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
 800a57e:	bf00      	nop
 800a580:	08018a64 	.word	0x08018a64
 800a584:	08018ae0 	.word	0x08018ae0
 800a588:	08018ab8 	.word	0x08018ab8

0800a58c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b084      	sub	sp, #16
 800a590:	af00      	add	r7, sp, #0
 800a592:	4603      	mov	r3, r0
 800a594:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a596:	79fb      	ldrb	r3, [r7, #7]
 800a598:	2b0d      	cmp	r3, #13
 800a59a:	d908      	bls.n	800a5ae <memp_malloc+0x22>
 800a59c:	4b0a      	ldr	r3, [pc, #40]	; (800a5c8 <memp_malloc+0x3c>)
 800a59e:	f240 1257 	movw	r2, #343	; 0x157
 800a5a2:	490a      	ldr	r1, [pc, #40]	; (800a5cc <memp_malloc+0x40>)
 800a5a4:	480a      	ldr	r0, [pc, #40]	; (800a5d0 <memp_malloc+0x44>)
 800a5a6:	f00c fddf 	bl	8017168 <iprintf>
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	e008      	b.n	800a5c0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a5ae:	79fb      	ldrb	r3, [r7, #7]
 800a5b0:	4a08      	ldr	r2, [pc, #32]	; (800a5d4 <memp_malloc+0x48>)
 800a5b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f7ff ff94 	bl	800a4e4 <do_memp_malloc_pool>
 800a5bc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800a5be:	68fb      	ldr	r3, [r7, #12]
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3710      	adds	r7, #16
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}
 800a5c8:	08018a64 	.word	0x08018a64
 800a5cc:	08018af4 	.word	0x08018af4
 800a5d0:	08018ab8 	.word	0x08018ab8
 800a5d4:	0801d580 	.word	0x0801d580

0800a5d8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b084      	sub	sp, #16
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	f003 0303 	and.w	r3, r3, #3
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d006      	beq.n	800a5fa <do_memp_free_pool+0x22>
 800a5ec:	4b0d      	ldr	r3, [pc, #52]	; (800a624 <do_memp_free_pool+0x4c>)
 800a5ee:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800a5f2:	490d      	ldr	r1, [pc, #52]	; (800a628 <do_memp_free_pool+0x50>)
 800a5f4:	480d      	ldr	r0, [pc, #52]	; (800a62c <do_memp_free_pool+0x54>)
 800a5f6:	f00c fdb7 	bl	8017168 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800a5fe:	f00c fd4b 	bl	8017098 <sys_arch_protect>
 800a602:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	68db      	ldr	r3, [r3, #12]
 800a608:	681a      	ldr	r2, [r3, #0]
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	68db      	ldr	r3, [r3, #12]
 800a612:	68fa      	ldr	r2, [r7, #12]
 800a614:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800a616:	68b8      	ldr	r0, [r7, #8]
 800a618:	f00c fd4c 	bl	80170b4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800a61c:	bf00      	nop
 800a61e:	3710      	adds	r7, #16
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}
 800a624:	08018a64 	.word	0x08018a64
 800a628:	08018b14 	.word	0x08018b14
 800a62c:	08018ab8 	.word	0x08018ab8

0800a630 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d106      	bne.n	800a64e <memp_free_pool+0x1e>
 800a640:	4b0a      	ldr	r3, [pc, #40]	; (800a66c <memp_free_pool+0x3c>)
 800a642:	f240 1295 	movw	r2, #405	; 0x195
 800a646:	490a      	ldr	r1, [pc, #40]	; (800a670 <memp_free_pool+0x40>)
 800a648:	480a      	ldr	r0, [pc, #40]	; (800a674 <memp_free_pool+0x44>)
 800a64a:	f00c fd8d 	bl	8017168 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d007      	beq.n	800a664 <memp_free_pool+0x34>
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d004      	beq.n	800a664 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800a65a:	6839      	ldr	r1, [r7, #0]
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f7ff ffbb 	bl	800a5d8 <do_memp_free_pool>
 800a662:	e000      	b.n	800a666 <memp_free_pool+0x36>
    return;
 800a664:	bf00      	nop
}
 800a666:	3708      	adds	r7, #8
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}
 800a66c:	08018a64 	.word	0x08018a64
 800a670:	08018ae0 	.word	0x08018ae0
 800a674:	08018ab8 	.word	0x08018ab8

0800a678 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b082      	sub	sp, #8
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	4603      	mov	r3, r0
 800a680:	6039      	str	r1, [r7, #0]
 800a682:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a684:	79fb      	ldrb	r3, [r7, #7]
 800a686:	2b0d      	cmp	r3, #13
 800a688:	d907      	bls.n	800a69a <memp_free+0x22>
 800a68a:	4b0c      	ldr	r3, [pc, #48]	; (800a6bc <memp_free+0x44>)
 800a68c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800a690:	490b      	ldr	r1, [pc, #44]	; (800a6c0 <memp_free+0x48>)
 800a692:	480c      	ldr	r0, [pc, #48]	; (800a6c4 <memp_free+0x4c>)
 800a694:	f00c fd68 	bl	8017168 <iprintf>
 800a698:	e00c      	b.n	800a6b4 <memp_free+0x3c>

  if (mem == NULL) {
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d008      	beq.n	800a6b2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800a6a0:	79fb      	ldrb	r3, [r7, #7]
 800a6a2:	4a09      	ldr	r2, [pc, #36]	; (800a6c8 <memp_free+0x50>)
 800a6a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6a8:	6839      	ldr	r1, [r7, #0]
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7ff ff94 	bl	800a5d8 <do_memp_free_pool>
 800a6b0:	e000      	b.n	800a6b4 <memp_free+0x3c>
    return;
 800a6b2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800a6b4:	3708      	adds	r7, #8
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}
 800a6ba:	bf00      	nop
 800a6bc:	08018a64 	.word	0x08018a64
 800a6c0:	08018b34 	.word	0x08018b34
 800a6c4:	08018ab8 	.word	0x08018ab8
 800a6c8:	0801d580 	.word	0x0801d580

0800a6cc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800a6d0:	bf00      	nop
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d8:	4770      	bx	lr
	...

0800a6dc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b088      	sub	sp, #32
 800a6e0:	af02      	add	r7, sp, #8
 800a6e2:	60f8      	str	r0, [r7, #12]
 800a6e4:	60b9      	str	r1, [r7, #8]
 800a6e6:	607a      	str	r2, [r7, #4]
 800a6e8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d108      	bne.n	800a702 <netif_add+0x26>
 800a6f0:	4b9a      	ldr	r3, [pc, #616]	; (800a95c <netif_add+0x280>)
 800a6f2:	f240 1227 	movw	r2, #295	; 0x127
 800a6f6:	499a      	ldr	r1, [pc, #616]	; (800a960 <netif_add+0x284>)
 800a6f8:	489a      	ldr	r0, [pc, #616]	; (800a964 <netif_add+0x288>)
 800a6fa:	f00c fd35 	bl	8017168 <iprintf>
 800a6fe:	2300      	movs	r3, #0
 800a700:	e154      	b.n	800a9ac <netif_add+0x2d0>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a704:	2b00      	cmp	r3, #0
 800a706:	d108      	bne.n	800a71a <netif_add+0x3e>
 800a708:	4b94      	ldr	r3, [pc, #592]	; (800a95c <netif_add+0x280>)
 800a70a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800a70e:	4996      	ldr	r1, [pc, #600]	; (800a968 <netif_add+0x28c>)
 800a710:	4894      	ldr	r0, [pc, #592]	; (800a964 <netif_add+0x288>)
 800a712:	f00c fd29 	bl	8017168 <iprintf>
 800a716:	2300      	movs	r3, #0
 800a718:	e148      	b.n	800a9ac <netif_add+0x2d0>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d101      	bne.n	800a724 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800a720:	4b92      	ldr	r3, [pc, #584]	; (800a96c <netif_add+0x290>)
 800a722:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d101      	bne.n	800a72e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800a72a:	4b90      	ldr	r3, [pc, #576]	; (800a96c <netif_add+0x290>)
 800a72c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d101      	bne.n	800a738 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800a734:	4b8d      	ldr	r3, [pc, #564]	; (800a96c <netif_add+0x290>)
 800a736:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2200      	movs	r2, #0
 800a73c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2200      	movs	r2, #0
 800a742:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2200      	movs	r2, #0
 800a748:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	4a88      	ldr	r2, [pc, #544]	; (800a970 <netif_add+0x294>)
 800a74e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2200      	movs	r2, #0
 800a754:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2200      	movs	r2, #0
 800a75a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	3324      	adds	r3, #36	; 0x24
 800a762:	2204      	movs	r2, #4
 800a764:	2100      	movs	r1, #0
 800a766:	4618      	mov	r0, r3
 800a768:	f00c fcf6 	bl	8017158 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	2200      	movs	r2, #0
 800a770:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	6a3a      	ldr	r2, [r7, #32]
 800a776:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800a778:	4b7e      	ldr	r3, [pc, #504]	; (800a974 <netif_add+0x298>)
 800a77a:	781a      	ldrb	r2, [r3, #0]
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a786:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	687a      	ldr	r2, [r7, #4]
 800a78c:	68b9      	ldr	r1, [r7, #8]
 800a78e:	68f8      	ldr	r0, [r7, #12]
 800a790:	f000 f9f6 	bl	800ab80 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800a794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a796:	68f8      	ldr	r0, [r7, #12]
 800a798:	4798      	blx	r3
 800a79a:	4603      	mov	r3, r0
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d001      	beq.n	800a7a4 <netif_add+0xc8>
    return NULL;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	e103      	b.n	800a9ac <netif_add+0x2d0>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a7aa:	2bff      	cmp	r3, #255	; 0xff
 800a7ac:	d103      	bne.n	800a7b6 <netif_add+0xda>
        netif->num = 0;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a7ba:	4b6f      	ldr	r3, [pc, #444]	; (800a978 <netif_add+0x29c>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	617b      	str	r3, [r7, #20]
 800a7c0:	e02b      	b.n	800a81a <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a7c2:	697a      	ldr	r2, [r7, #20]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d106      	bne.n	800a7d8 <netif_add+0xfc>
 800a7ca:	4b64      	ldr	r3, [pc, #400]	; (800a95c <netif_add+0x280>)
 800a7cc:	f240 128b 	movw	r2, #395	; 0x18b
 800a7d0:	496a      	ldr	r1, [pc, #424]	; (800a97c <netif_add+0x2a0>)
 800a7d2:	4864      	ldr	r0, [pc, #400]	; (800a964 <netif_add+0x288>)
 800a7d4:	f00c fcc8 	bl	8017168 <iprintf>
        num_netifs++;
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	3301      	adds	r3, #1
 800a7dc:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	2bff      	cmp	r3, #255	; 0xff
 800a7e2:	dd06      	ble.n	800a7f2 <netif_add+0x116>
 800a7e4:	4b5d      	ldr	r3, [pc, #372]	; (800a95c <netif_add+0x280>)
 800a7e6:	f240 128d 	movw	r2, #397	; 0x18d
 800a7ea:	4965      	ldr	r1, [pc, #404]	; (800a980 <netif_add+0x2a4>)
 800a7ec:	485d      	ldr	r0, [pc, #372]	; (800a964 <netif_add+0x288>)
 800a7ee:	f00c fcbb 	bl	8017168 <iprintf>
        if (netif2->num == netif->num) {
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a7fe:	429a      	cmp	r2, r3
 800a800:	d108      	bne.n	800a814 <netif_add+0x138>
          netif->num++;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a808:	3301      	adds	r3, #1
 800a80a:	b2da      	uxtb	r2, r3
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800a812:	e005      	b.n	800a820 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	617b      	str	r3, [r7, #20]
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d1d0      	bne.n	800a7c2 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d1be      	bne.n	800a7a4 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a82c:	2bfe      	cmp	r3, #254	; 0xfe
 800a82e:	d103      	bne.n	800a838 <netif_add+0x15c>
    netif_num = 0;
 800a830:	4b50      	ldr	r3, [pc, #320]	; (800a974 <netif_add+0x298>)
 800a832:	2200      	movs	r2, #0
 800a834:	701a      	strb	r2, [r3, #0]
 800a836:	e006      	b.n	800a846 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a83e:	3301      	adds	r3, #1
 800a840:	b2da      	uxtb	r2, r3
 800a842:	4b4c      	ldr	r3, [pc, #304]	; (800a974 <netif_add+0x298>)
 800a844:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800a846:	4b4c      	ldr	r3, [pc, #304]	; (800a978 <netif_add+0x29c>)
 800a848:	681a      	ldr	r2, [r3, #0]
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800a84e:	4a4a      	ldr	r2, [pc, #296]	; (800a978 <netif_add+0x29c>)
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	6013      	str	r3, [r2, #0]
  if (netif->flags & NETIF_FLAG_IGMP) {
    igmp_start(netif);
  }
#endif /* LWIP_IGMP */

  LWIP_DEBUGF(NETIF_DEBUG, ("netif: added interface %c%c IP",
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a85a:	4619      	mov	r1, r3
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800a862:	461a      	mov	r2, r3
 800a864:	4847      	ldr	r0, [pc, #284]	; (800a984 <netif_add+0x2a8>)
 800a866:	f00c fc7f 	bl	8017168 <iprintf>
                            netif->name[0], netif->name[1]));
#if LWIP_IPV4
  LWIP_DEBUGF(NETIF_DEBUG, (" addr "));
 800a86a:	4847      	ldr	r0, [pc, #284]	; (800a988 <netif_add+0x2ac>)
 800a86c:	f00c fc7c 	bl	8017168 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, ipaddr);
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d003      	beq.n	800a87e <netif_add+0x1a2>
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	781b      	ldrb	r3, [r3, #0]
 800a87a:	4619      	mov	r1, r3
 800a87c:	e000      	b.n	800a880 <netif_add+0x1a4>
 800a87e:	2100      	movs	r1, #0
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d004      	beq.n	800a890 <netif_add+0x1b4>
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	3301      	adds	r3, #1
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	461a      	mov	r2, r3
 800a88e:	e000      	b.n	800a892 <netif_add+0x1b6>
 800a890:	2200      	movs	r2, #0
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d004      	beq.n	800a8a2 <netif_add+0x1c6>
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	3302      	adds	r3, #2
 800a89c:	781b      	ldrb	r3, [r3, #0]
 800a89e:	4618      	mov	r0, r3
 800a8a0:	e000      	b.n	800a8a4 <netif_add+0x1c8>
 800a8a2:	2000      	movs	r0, #0
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d003      	beq.n	800a8b2 <netif_add+0x1d6>
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	3303      	adds	r3, #3
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	e000      	b.n	800a8b4 <netif_add+0x1d8>
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	9300      	str	r3, [sp, #0]
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	4834      	ldr	r0, [pc, #208]	; (800a98c <netif_add+0x2b0>)
 800a8ba:	f00c fc55 	bl	8017168 <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
 800a8be:	4834      	ldr	r0, [pc, #208]	; (800a990 <netif_add+0x2b4>)
 800a8c0:	f00c fc52 	bl	8017168 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d003      	beq.n	800a8d2 <netif_add+0x1f6>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	781b      	ldrb	r3, [r3, #0]
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	e000      	b.n	800a8d4 <netif_add+0x1f8>
 800a8d2:	2100      	movs	r1, #0
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d004      	beq.n	800a8e4 <netif_add+0x208>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	3301      	adds	r3, #1
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	461a      	mov	r2, r3
 800a8e2:	e000      	b.n	800a8e6 <netif_add+0x20a>
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d004      	beq.n	800a8f6 <netif_add+0x21a>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	3302      	adds	r3, #2
 800a8f0:	781b      	ldrb	r3, [r3, #0]
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	e000      	b.n	800a8f8 <netif_add+0x21c>
 800a8f6:	2000      	movs	r0, #0
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d003      	beq.n	800a906 <netif_add+0x22a>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	3303      	adds	r3, #3
 800a902:	781b      	ldrb	r3, [r3, #0]
 800a904:	e000      	b.n	800a908 <netif_add+0x22c>
 800a906:	2300      	movs	r3, #0
 800a908:	9300      	str	r3, [sp, #0]
 800a90a:	4603      	mov	r3, r0
 800a90c:	481f      	ldr	r0, [pc, #124]	; (800a98c <netif_add+0x2b0>)
 800a90e:	f00c fc2b 	bl	8017168 <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
 800a912:	4820      	ldr	r0, [pc, #128]	; (800a994 <netif_add+0x2b8>)
 800a914:	f00c fc28 	bl	8017168 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, gw);
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d003      	beq.n	800a926 <netif_add+0x24a>
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	4619      	mov	r1, r3
 800a924:	e000      	b.n	800a928 <netif_add+0x24c>
 800a926:	2100      	movs	r1, #0
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d004      	beq.n	800a938 <netif_add+0x25c>
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	3301      	adds	r3, #1
 800a932:	781b      	ldrb	r3, [r3, #0]
 800a934:	461a      	mov	r2, r3
 800a936:	e000      	b.n	800a93a <netif_add+0x25e>
 800a938:	2200      	movs	r2, #0
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d004      	beq.n	800a94a <netif_add+0x26e>
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	3302      	adds	r3, #2
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	4618      	mov	r0, r3
 800a948:	e000      	b.n	800a94c <netif_add+0x270>
 800a94a:	2000      	movs	r0, #0
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d022      	beq.n	800a998 <netif_add+0x2bc>
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	3303      	adds	r3, #3
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	e01f      	b.n	800a99a <netif_add+0x2be>
 800a95a:	bf00      	nop
 800a95c:	08018b50 	.word	0x08018b50
 800a960:	08018be4 	.word	0x08018be4
 800a964:	08018ba0 	.word	0x08018ba0
 800a968:	08018c00 	.word	0x08018c00
 800a96c:	0801d628 	.word	0x0801d628
 800a970:	0800ae8b 	.word	0x0800ae8b
 800a974:	2000d9e4 	.word	0x2000d9e4
 800a978:	2000d9dc 	.word	0x2000d9dc
 800a97c:	08018c24 	.word	0x08018c24
 800a980:	08018c38 	.word	0x08018c38
 800a984:	08018c68 	.word	0x08018c68
 800a988:	08018c88 	.word	0x08018c88
 800a98c:	08018c90 	.word	0x08018c90
 800a990:	08018ca0 	.word	0x08018ca0
 800a994:	08018cac 	.word	0x08018cac
 800a998:	2300      	movs	r3, #0
 800a99a:	9300      	str	r3, [sp, #0]
 800a99c:	4603      	mov	r3, r0
 800a99e:	4805      	ldr	r0, [pc, #20]	; (800a9b4 <netif_add+0x2d8>)
 800a9a0:	f00c fbe2 	bl	8017168 <iprintf>
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
 800a9a4:	200a      	movs	r0, #10
 800a9a6:	f00c fbf7 	bl	8017198 <putchar>

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3718      	adds	r7, #24
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}
 800a9b4:	08018c90 	.word	0x08018c90

0800a9b8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b082      	sub	sp, #8
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800a9c2:	6839      	ldr	r1, [r7, #0]
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f002 fd4f 	bl	800d468 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800a9ca:	6839      	ldr	r1, [r7, #0]
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f007 f9ed 	bl	8011dac <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800a9d2:	bf00      	nop
 800a9d4:	3708      	adds	r7, #8
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}
	...

0800a9dc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b086      	sub	sp, #24
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	60f8      	str	r0, [r7, #12]
 800a9e4:	60b9      	str	r1, [r7, #8]
 800a9e6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d106      	bne.n	800a9fc <netif_do_set_ipaddr+0x20>
 800a9ee:	4b1e      	ldr	r3, [pc, #120]	; (800aa68 <netif_do_set_ipaddr+0x8c>)
 800a9f0:	f240 12cb 	movw	r2, #459	; 0x1cb
 800a9f4:	491d      	ldr	r1, [pc, #116]	; (800aa6c <netif_do_set_ipaddr+0x90>)
 800a9f6:	481e      	ldr	r0, [pc, #120]	; (800aa70 <netif_do_set_ipaddr+0x94>)
 800a9f8:	f00c fbb6 	bl	8017168 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d106      	bne.n	800aa10 <netif_do_set_ipaddr+0x34>
 800aa02:	4b19      	ldr	r3, [pc, #100]	; (800aa68 <netif_do_set_ipaddr+0x8c>)
 800aa04:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800aa08:	4918      	ldr	r1, [pc, #96]	; (800aa6c <netif_do_set_ipaddr+0x90>)
 800aa0a:	4819      	ldr	r0, [pc, #100]	; (800aa70 <netif_do_set_ipaddr+0x94>)
 800aa0c:	f00c fbac 	bl	8017168 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	681a      	ldr	r2, [r3, #0]
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	3304      	adds	r3, #4
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d01f      	beq.n	800aa5e <netif_do_set_ipaddr+0x82>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	3304      	adds	r3, #4
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
 800aa2e:	4811      	ldr	r0, [pc, #68]	; (800aa74 <netif_do_set_ipaddr+0x98>)
 800aa30:	f00c fc36 	bl	80172a0 <puts>
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800aa34:	f107 0314 	add.w	r3, r7, #20
 800aa38:	4619      	mov	r1, r3
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f7ff ffbc 	bl	800a9b8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d002      	beq.n	800aa4c <netif_do_set_ipaddr+0x70>
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	e000      	b.n	800aa4e <netif_do_set_ipaddr+0x72>
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	68fa      	ldr	r2, [r7, #12]
 800aa50:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800aa52:	2101      	movs	r1, #1
 800aa54:	68f8      	ldr	r0, [r7, #12]
 800aa56:	f000 f92d 	bl	800acb4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	e000      	b.n	800aa60 <netif_do_set_ipaddr+0x84>
  }
  return 0; /* address unchanged */
 800aa5e:	2300      	movs	r3, #0
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3718      	adds	r7, #24
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}
 800aa68:	08018b50 	.word	0x08018b50
 800aa6c:	08018cb4 	.word	0x08018cb4
 800aa70:	08018ba0 	.word	0x08018ba0
 800aa74:	08018cc4 	.word	0x08018cc4

0800aa78 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800aa78:	b5b0      	push	{r4, r5, r7, lr}
 800aa7a:	b088      	sub	sp, #32
 800aa7c:	af04      	add	r7, sp, #16
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	60b9      	str	r1, [r7, #8]
 800aa82:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	681a      	ldr	r2, [r3, #0]
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	3308      	adds	r3, #8
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	d02d      	beq.n	800aaee <netif_do_set_netmask+0x76>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d002      	beq.n	800aa9e <netif_do_set_netmask+0x26>
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	e000      	b.n	800aaa0 <netif_do_set_netmask+0x28>
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	68fa      	ldr	r2, [r7, #12]
 800aaa2:	6093      	str	r3, [r2, #8]
    IP_SET_TYPE_VAL(netif->netmask, IPADDR_TYPE_V4);
    mib2_add_route_ip4(0, netif);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: netmask of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800aaaa:	4618      	mov	r0, r3
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800aab2:	461c      	mov	r4, r3
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	3308      	adds	r3, #8
 800aab8:	781b      	ldrb	r3, [r3, #0]
 800aaba:	461d      	mov	r5, r3
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	3308      	adds	r3, #8
 800aac0:	3301      	adds	r3, #1
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	461a      	mov	r2, r3
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	3308      	adds	r3, #8
 800aaca:	3302      	adds	r3, #2
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	4619      	mov	r1, r3
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	3308      	adds	r3, #8
 800aad4:	3303      	adds	r3, #3
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	9302      	str	r3, [sp, #8]
 800aada:	9101      	str	r1, [sp, #4]
 800aadc:	9200      	str	r2, [sp, #0]
 800aade:	462b      	mov	r3, r5
 800aae0:	4622      	mov	r2, r4
 800aae2:	4601      	mov	r1, r0
 800aae4:	4804      	ldr	r0, [pc, #16]	; (800aaf8 <netif_do_set_netmask+0x80>)
 800aae6:	f00c fb3f 	bl	8017168 <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800aaea:	2301      	movs	r3, #1
 800aaec:	e000      	b.n	800aaf0 <netif_do_set_netmask+0x78>
  }
  return 0; /* netmask unchanged */
 800aaee:	2300      	movs	r3, #0
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3710      	adds	r7, #16
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bdb0      	pop	{r4, r5, r7, pc}
 800aaf8:	08018d14 	.word	0x08018d14

0800aafc <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800aafc:	b5b0      	push	{r4, r5, r7, lr}
 800aafe:	b088      	sub	sp, #32
 800ab00:	af04      	add	r7, sp, #16
 800ab02:	60f8      	str	r0, [r7, #12]
 800ab04:	60b9      	str	r1, [r7, #8]
 800ab06:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	681a      	ldr	r2, [r3, #0]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	330c      	adds	r3, #12
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d02d      	beq.n	800ab72 <netif_do_set_gw+0x76>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d002      	beq.n	800ab22 <netif_do_set_gw+0x26>
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	e000      	b.n	800ab24 <netif_do_set_gw+0x28>
 800ab22:	2300      	movs	r3, #0
 800ab24:	68fa      	ldr	r2, [r7, #12]
 800ab26:	60d3      	str	r3, [r2, #12]
    IP_SET_TYPE_VAL(netif->gw, IPADDR_TYPE_V4);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: GW address of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ab2e:	4618      	mov	r0, r3
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800ab36:	461c      	mov	r4, r3
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	330c      	adds	r3, #12
 800ab3c:	781b      	ldrb	r3, [r3, #0]
 800ab3e:	461d      	mov	r5, r3
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	330c      	adds	r3, #12
 800ab44:	3301      	adds	r3, #1
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	461a      	mov	r2, r3
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	330c      	adds	r3, #12
 800ab4e:	3302      	adds	r3, #2
 800ab50:	781b      	ldrb	r3, [r3, #0]
 800ab52:	4619      	mov	r1, r3
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	330c      	adds	r3, #12
 800ab58:	3303      	adds	r3, #3
 800ab5a:	781b      	ldrb	r3, [r3, #0]
 800ab5c:	9302      	str	r3, [sp, #8]
 800ab5e:	9101      	str	r1, [sp, #4]
 800ab60:	9200      	str	r2, [sp, #0]
 800ab62:	462b      	mov	r3, r5
 800ab64:	4622      	mov	r2, r4
 800ab66:	4601      	mov	r1, r0
 800ab68:	4804      	ldr	r0, [pc, #16]	; (800ab7c <netif_do_set_gw+0x80>)
 800ab6a:	f00c fafd 	bl	8017168 <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800ab6e:	2301      	movs	r3, #1
 800ab70:	e000      	b.n	800ab74 <netif_do_set_gw+0x78>
  }
  return 0; /* gateway unchanged */
 800ab72:	2300      	movs	r3, #0
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3710      	adds	r7, #16
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bdb0      	pop	{r4, r5, r7, pc}
 800ab7c:	08018d74 	.word	0x08018d74

0800ab80 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b088      	sub	sp, #32
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	60f8      	str	r0, [r7, #12]
 800ab88:	60b9      	str	r1, [r7, #8]
 800ab8a:	607a      	str	r2, [r7, #4]
 800ab8c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800ab92:	2300      	movs	r3, #0
 800ab94:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d101      	bne.n	800aba0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800ab9c:	4b1c      	ldr	r3, [pc, #112]	; (800ac10 <netif_set_addr+0x90>)
 800ab9e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d101      	bne.n	800abaa <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800aba6:	4b1a      	ldr	r3, [pc, #104]	; (800ac10 <netif_set_addr+0x90>)
 800aba8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d101      	bne.n	800abb4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800abb0:	4b17      	ldr	r3, [pc, #92]	; (800ac10 <netif_set_addr+0x90>)
 800abb2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d003      	beq.n	800abc2 <netif_set_addr+0x42>
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d101      	bne.n	800abc6 <netif_set_addr+0x46>
 800abc2:	2301      	movs	r3, #1
 800abc4:	e000      	b.n	800abc8 <netif_set_addr+0x48>
 800abc6:	2300      	movs	r3, #0
 800abc8:	617b      	str	r3, [r7, #20]
  if (remove) {
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d006      	beq.n	800abde <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800abd0:	f107 0310 	add.w	r3, r7, #16
 800abd4:	461a      	mov	r2, r3
 800abd6:	68b9      	ldr	r1, [r7, #8]
 800abd8:	68f8      	ldr	r0, [r7, #12]
 800abda:	f7ff feff 	bl	800a9dc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800abde:	69fa      	ldr	r2, [r7, #28]
 800abe0:	6879      	ldr	r1, [r7, #4]
 800abe2:	68f8      	ldr	r0, [r7, #12]
 800abe4:	f7ff ff48 	bl	800aa78 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800abe8:	69ba      	ldr	r2, [r7, #24]
 800abea:	6839      	ldr	r1, [r7, #0]
 800abec:	68f8      	ldr	r0, [r7, #12]
 800abee:	f7ff ff85 	bl	800aafc <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d106      	bne.n	800ac06 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800abf8:	f107 0310 	add.w	r3, r7, #16
 800abfc:	461a      	mov	r2, r3
 800abfe:	68b9      	ldr	r1, [r7, #8]
 800ac00:	68f8      	ldr	r0, [r7, #12]
 800ac02:	f7ff feeb 	bl	800a9dc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ac06:	bf00      	nop
 800ac08:	3720      	adds	r7, #32
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop
 800ac10:	0801d628 	.word	0x0801d628

0800ac14 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b082      	sub	sp, #8
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ac1c:	4a0d      	ldr	r2, [pc, #52]	; (800ac54 <netif_set_default+0x40>)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d004      	beq.n	800ac32 <netif_set_default+0x1e>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ac2e:	4619      	mov	r1, r3
 800ac30:	e000      	b.n	800ac34 <netif_set_default+0x20>
 800ac32:	2127      	movs	r1, #39	; 0x27
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d003      	beq.n	800ac42 <netif_set_default+0x2e>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800ac40:	e000      	b.n	800ac44 <netif_set_default+0x30>
 800ac42:	2327      	movs	r3, #39	; 0x27
 800ac44:	461a      	mov	r2, r3
 800ac46:	4804      	ldr	r0, [pc, #16]	; (800ac58 <netif_set_default+0x44>)
 800ac48:	f00c fa8e 	bl	8017168 <iprintf>
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ac4c:	bf00      	nop
 800ac4e:	3708      	adds	r7, #8
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}
 800ac54:	2000d9e0 	.word	0x2000d9e0
 800ac58:	08018de8 	.word	0x08018de8

0800ac5c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b082      	sub	sp, #8
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d107      	bne.n	800ac7a <netif_set_up+0x1e>
 800ac6a:	4b0f      	ldr	r3, [pc, #60]	; (800aca8 <netif_set_up+0x4c>)
 800ac6c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800ac70:	490e      	ldr	r1, [pc, #56]	; (800acac <netif_set_up+0x50>)
 800ac72:	480f      	ldr	r0, [pc, #60]	; (800acb0 <netif_set_up+0x54>)
 800ac74:	f00c fa78 	bl	8017168 <iprintf>
 800ac78:	e013      	b.n	800aca2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ac80:	f003 0301 	and.w	r3, r3, #1
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d10c      	bne.n	800aca2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ac8e:	f043 0301 	orr.w	r3, r3, #1
 800ac92:	b2da      	uxtb	r2, r3
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ac9a:	2103      	movs	r1, #3
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f000 f809 	bl	800acb4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800aca2:	3708      	adds	r7, #8
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}
 800aca8:	08018b50 	.word	0x08018b50
 800acac:	08018e10 	.word	0x08018e10
 800acb0:	08018ba0 	.word	0x08018ba0

0800acb4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b082      	sub	sp, #8
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	460b      	mov	r3, r1
 800acbe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d106      	bne.n	800acd4 <netif_issue_reports+0x20>
 800acc6:	4b18      	ldr	r3, [pc, #96]	; (800ad28 <netif_issue_reports+0x74>)
 800acc8:	f240 326d 	movw	r2, #877	; 0x36d
 800accc:	4917      	ldr	r1, [pc, #92]	; (800ad2c <netif_issue_reports+0x78>)
 800acce:	4818      	ldr	r0, [pc, #96]	; (800ad30 <netif_issue_reports+0x7c>)
 800acd0:	f00c fa4a 	bl	8017168 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800acda:	f003 0304 	and.w	r3, r3, #4
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d01e      	beq.n	800ad20 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ace8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800acec:	2b00      	cmp	r3, #0
 800acee:	d017      	beq.n	800ad20 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800acf0:	78fb      	ldrb	r3, [r7, #3]
 800acf2:	f003 0301 	and.w	r3, r3, #1
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d013      	beq.n	800ad22 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	3304      	adds	r3, #4
 800acfe:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d00e      	beq.n	800ad22 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ad0a:	f003 0308 	and.w	r3, r3, #8
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d007      	beq.n	800ad22 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	3304      	adds	r3, #4
 800ad16:	4619      	mov	r1, r3
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f00a fa73 	bl	8015204 <etharp_request>
 800ad1e:	e000      	b.n	800ad22 <netif_issue_reports+0x6e>
    return;
 800ad20:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ad22:	3708      	adds	r7, #8
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	08018b50 	.word	0x08018b50
 800ad2c:	08018e2c 	.word	0x08018e2c
 800ad30:	08018ba0 	.word	0x08018ba0

0800ad34 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d107      	bne.n	800ad52 <netif_set_down+0x1e>
 800ad42:	4b12      	ldr	r3, [pc, #72]	; (800ad8c <netif_set_down+0x58>)
 800ad44:	f240 329b 	movw	r2, #923	; 0x39b
 800ad48:	4911      	ldr	r1, [pc, #68]	; (800ad90 <netif_set_down+0x5c>)
 800ad4a:	4812      	ldr	r0, [pc, #72]	; (800ad94 <netif_set_down+0x60>)
 800ad4c:	f00c fa0c 	bl	8017168 <iprintf>
 800ad50:	e019      	b.n	800ad86 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ad58:	f003 0301 	and.w	r3, r3, #1
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d012      	beq.n	800ad86 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ad66:	f023 0301 	bic.w	r3, r3, #1
 800ad6a:	b2da      	uxtb	r2, r3
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ad78:	f003 0308 	and.w	r3, r3, #8
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d002      	beq.n	800ad86 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f009 fd8b 	bl	801489c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ad86:	3708      	adds	r7, #8
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}
 800ad8c:	08018b50 	.word	0x08018b50
 800ad90:	08018e50 	.word	0x08018e50
 800ad94:	08018ba0 	.word	0x08018ba0

0800ad98 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b082      	sub	sp, #8
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d107      	bne.n	800adb6 <netif_set_link_up+0x1e>
 800ada6:	4b15      	ldr	r3, [pc, #84]	; (800adfc <netif_set_link_up+0x64>)
 800ada8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800adac:	4914      	ldr	r1, [pc, #80]	; (800ae00 <netif_set_link_up+0x68>)
 800adae:	4815      	ldr	r0, [pc, #84]	; (800ae04 <netif_set_link_up+0x6c>)
 800adb0:	f00c f9da 	bl	8017168 <iprintf>
 800adb4:	e01e      	b.n	800adf4 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800adbc:	f003 0304 	and.w	r3, r3, #4
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d117      	bne.n	800adf4 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800adca:	f043 0304 	orr.w	r3, r3, #4
 800adce:	b2da      	uxtb	r2, r3
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f007 fd28 	bl	801282c <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800addc:	2103      	movs	r1, #3
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f7ff ff68 	bl	800acb4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	69db      	ldr	r3, [r3, #28]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d003      	beq.n	800adf4 <netif_set_link_up+0x5c>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	69db      	ldr	r3, [r3, #28]
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800adf4:	3708      	adds	r7, #8
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	bf00      	nop
 800adfc:	08018b50 	.word	0x08018b50
 800ae00:	08018e70 	.word	0x08018e70
 800ae04:	08018ba0 	.word	0x08018ba0

0800ae08 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b082      	sub	sp, #8
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d107      	bne.n	800ae26 <netif_set_link_down+0x1e>
 800ae16:	4b11      	ldr	r3, [pc, #68]	; (800ae5c <netif_set_link_down+0x54>)
 800ae18:	f240 4206 	movw	r2, #1030	; 0x406
 800ae1c:	4910      	ldr	r1, [pc, #64]	; (800ae60 <netif_set_link_down+0x58>)
 800ae1e:	4811      	ldr	r0, [pc, #68]	; (800ae64 <netif_set_link_down+0x5c>)
 800ae20:	f00c f9a2 	bl	8017168 <iprintf>
 800ae24:	e017      	b.n	800ae56 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ae2c:	f003 0304 	and.w	r3, r3, #4
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d010      	beq.n	800ae56 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ae3a:	f023 0304 	bic.w	r3, r3, #4
 800ae3e:	b2da      	uxtb	r2, r3
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	69db      	ldr	r3, [r3, #28]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d003      	beq.n	800ae56 <netif_set_link_down+0x4e>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	69db      	ldr	r3, [r3, #28]
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ae56:	3708      	adds	r7, #8
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}
 800ae5c:	08018b50 	.word	0x08018b50
 800ae60:	08018e94 	.word	0x08018e94
 800ae64:	08018ba0 	.word	0x08018ba0

0800ae68 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b083      	sub	sp, #12
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d002      	beq.n	800ae7e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	683a      	ldr	r2, [r7, #0]
 800ae7c:	61da      	str	r2, [r3, #28]
  }
}
 800ae7e:	bf00      	nop
 800ae80:	370c      	adds	r7, #12
 800ae82:	46bd      	mov	sp, r7
 800ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae88:	4770      	bx	lr

0800ae8a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800ae8a:	b480      	push	{r7}
 800ae8c:	b085      	sub	sp, #20
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	60f8      	str	r0, [r7, #12]
 800ae92:	60b9      	str	r1, [r7, #8]
 800ae94:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800ae96:	f06f 030b 	mvn.w	r3, #11
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3714      	adds	r7, #20
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea4:	4770      	bx	lr
	...

0800aea8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b085      	sub	sp, #20
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	4603      	mov	r3, r0
 800aeb0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800aeb2:	79fb      	ldrb	r3, [r7, #7]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d013      	beq.n	800aee0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800aeb8:	4b0d      	ldr	r3, [pc, #52]	; (800aef0 <netif_get_by_index+0x48>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	60fb      	str	r3, [r7, #12]
 800aebe:	e00c      	b.n	800aeda <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aec6:	3301      	adds	r3, #1
 800aec8:	b2db      	uxtb	r3, r3
 800aeca:	79fa      	ldrb	r2, [r7, #7]
 800aecc:	429a      	cmp	r2, r3
 800aece:	d101      	bne.n	800aed4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	e006      	b.n	800aee2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	60fb      	str	r3, [r7, #12]
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d1ef      	bne.n	800aec0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800aee0:	2300      	movs	r3, #0
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3714      	adds	r7, #20
 800aee6:	46bd      	mov	sp, r7
 800aee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeec:	4770      	bx	lr
 800aeee:	bf00      	nop
 800aef0:	2000d9dc 	.word	0x2000d9dc

0800aef4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b082      	sub	sp, #8
 800aef8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800aefa:	f00c f8cd 	bl	8017098 <sys_arch_protect>
 800aefe:	6038      	str	r0, [r7, #0]
 800af00:	4b0d      	ldr	r3, [pc, #52]	; (800af38 <pbuf_free_ooseq+0x44>)
 800af02:	2200      	movs	r2, #0
 800af04:	701a      	strb	r2, [r3, #0]
 800af06:	6838      	ldr	r0, [r7, #0]
 800af08:	f00c f8d4 	bl	80170b4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800af0c:	4b0b      	ldr	r3, [pc, #44]	; (800af3c <pbuf_free_ooseq+0x48>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	607b      	str	r3, [r7, #4]
 800af12:	e00a      	b.n	800af2a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d003      	beq.n	800af24 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f002 fae1 	bl	800d4e4 <tcp_free_ooseq>
      return;
 800af22:	e005      	b.n	800af30 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	68db      	ldr	r3, [r3, #12]
 800af28:	607b      	str	r3, [r7, #4]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d1f1      	bne.n	800af14 <pbuf_free_ooseq+0x20>
    }
  }
}
 800af30:	3708      	adds	r7, #8
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
 800af36:	bf00      	nop
 800af38:	2000d9e5 	.word	0x2000d9e5
 800af3c:	2000d9f4 	.word	0x2000d9f4

0800af40 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800af48:	f7ff ffd4 	bl	800aef4 <pbuf_free_ooseq>
}
 800af4c:	bf00      	nop
 800af4e:	3708      	adds	r7, #8
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}

0800af54 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b082      	sub	sp, #8
 800af58:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800af5a:	f00c f89d 	bl	8017098 <sys_arch_protect>
 800af5e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800af60:	4b0f      	ldr	r3, [pc, #60]	; (800afa0 <pbuf_pool_is_empty+0x4c>)
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800af66:	4b0e      	ldr	r3, [pc, #56]	; (800afa0 <pbuf_pool_is_empty+0x4c>)
 800af68:	2201      	movs	r2, #1
 800af6a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f00c f8a1 	bl	80170b4 <sys_arch_unprotect>

  if (!queued) {
 800af72:	78fb      	ldrb	r3, [r7, #3]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d10f      	bne.n	800af98 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800af78:	2100      	movs	r1, #0
 800af7a:	480a      	ldr	r0, [pc, #40]	; (800afa4 <pbuf_pool_is_empty+0x50>)
 800af7c:	f7fe fab6 	bl	80094ec <tcpip_try_callback>
 800af80:	4603      	mov	r3, r0
 800af82:	2b00      	cmp	r3, #0
 800af84:	d008      	beq.n	800af98 <pbuf_pool_is_empty+0x44>
 800af86:	f00c f887 	bl	8017098 <sys_arch_protect>
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	4b04      	ldr	r3, [pc, #16]	; (800afa0 <pbuf_pool_is_empty+0x4c>)
 800af8e:	2200      	movs	r2, #0
 800af90:	701a      	strb	r2, [r3, #0]
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f00c f88e 	bl	80170b4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800af98:	bf00      	nop
 800af9a:	3708      	adds	r7, #8
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}
 800afa0:	2000d9e5 	.word	0x2000d9e5
 800afa4:	0800af41 	.word	0x0800af41

0800afa8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b085      	sub	sp, #20
 800afac:	af00      	add	r7, sp, #0
 800afae:	60f8      	str	r0, [r7, #12]
 800afb0:	60b9      	str	r1, [r7, #8]
 800afb2:	4611      	mov	r1, r2
 800afb4:	461a      	mov	r2, r3
 800afb6:	460b      	mov	r3, r1
 800afb8:	80fb      	strh	r3, [r7, #6]
 800afba:	4613      	mov	r3, r2
 800afbc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2200      	movs	r2, #0
 800afc2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	68ba      	ldr	r2, [r7, #8]
 800afc8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	88fa      	ldrh	r2, [r7, #6]
 800afce:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	88ba      	ldrh	r2, [r7, #4]
 800afd4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800afd6:	8b3b      	ldrh	r3, [r7, #24]
 800afd8:	b2da      	uxtb	r2, r3
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	7f3a      	ldrb	r2, [r7, #28]
 800afe2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	2201      	movs	r2, #1
 800afe8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	2200      	movs	r2, #0
 800afee:	73da      	strb	r2, [r3, #15]
}
 800aff0:	bf00      	nop
 800aff2:	3714      	adds	r7, #20
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr

0800affc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b08c      	sub	sp, #48	; 0x30
 800b000:	af02      	add	r7, sp, #8
 800b002:	4603      	mov	r3, r0
 800b004:	71fb      	strb	r3, [r7, #7]
 800b006:	460b      	mov	r3, r1
 800b008:	80bb      	strh	r3, [r7, #4]
 800b00a:	4613      	mov	r3, r2
 800b00c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b00e:	79fb      	ldrb	r3, [r7, #7]
 800b010:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b012:	887b      	ldrh	r3, [r7, #2]
 800b014:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b018:	d07f      	beq.n	800b11a <pbuf_alloc+0x11e>
 800b01a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b01e:	f300 80c8 	bgt.w	800b1b2 <pbuf_alloc+0x1b6>
 800b022:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b026:	d010      	beq.n	800b04a <pbuf_alloc+0x4e>
 800b028:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b02c:	f300 80c1 	bgt.w	800b1b2 <pbuf_alloc+0x1b6>
 800b030:	2b01      	cmp	r3, #1
 800b032:	d002      	beq.n	800b03a <pbuf_alloc+0x3e>
 800b034:	2b41      	cmp	r3, #65	; 0x41
 800b036:	f040 80bc 	bne.w	800b1b2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b03a:	887a      	ldrh	r2, [r7, #2]
 800b03c:	88bb      	ldrh	r3, [r7, #4]
 800b03e:	4619      	mov	r1, r3
 800b040:	2000      	movs	r0, #0
 800b042:	f000 f8d1 	bl	800b1e8 <pbuf_alloc_reference>
 800b046:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800b048:	e0bd      	b.n	800b1c6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b04a:	2300      	movs	r3, #0
 800b04c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800b04e:	2300      	movs	r3, #0
 800b050:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b052:	88bb      	ldrh	r3, [r7, #4]
 800b054:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b056:	200d      	movs	r0, #13
 800b058:	f7ff fa98 	bl	800a58c <memp_malloc>
 800b05c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d109      	bne.n	800b078 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b064:	f7ff ff76 	bl	800af54 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d002      	beq.n	800b074 <pbuf_alloc+0x78>
            pbuf_free(p);
 800b06e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b070:	f000 faa8 	bl	800b5c4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b074:	2300      	movs	r3, #0
 800b076:	e0a7      	b.n	800b1c8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b078:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b07a:	3303      	adds	r3, #3
 800b07c:	b29b      	uxth	r3, r3
 800b07e:	f023 0303 	bic.w	r3, r3, #3
 800b082:	b29b      	uxth	r3, r3
 800b084:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800b088:	b29b      	uxth	r3, r3
 800b08a:	8b7a      	ldrh	r2, [r7, #26]
 800b08c:	4293      	cmp	r3, r2
 800b08e:	bf28      	it	cs
 800b090:	4613      	movcs	r3, r2
 800b092:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b094:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b096:	3310      	adds	r3, #16
 800b098:	693a      	ldr	r2, [r7, #16]
 800b09a:	4413      	add	r3, r2
 800b09c:	3303      	adds	r3, #3
 800b09e:	f023 0303 	bic.w	r3, r3, #3
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	89f9      	ldrh	r1, [r7, #14]
 800b0a6:	8b7a      	ldrh	r2, [r7, #26]
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	9301      	str	r3, [sp, #4]
 800b0ac:	887b      	ldrh	r3, [r7, #2]
 800b0ae:	9300      	str	r3, [sp, #0]
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	4601      	mov	r1, r0
 800b0b4:	6938      	ldr	r0, [r7, #16]
 800b0b6:	f7ff ff77 	bl	800afa8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	685b      	ldr	r3, [r3, #4]
 800b0be:	f003 0303 	and.w	r3, r3, #3
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d006      	beq.n	800b0d4 <pbuf_alloc+0xd8>
 800b0c6:	4b42      	ldr	r3, [pc, #264]	; (800b1d0 <pbuf_alloc+0x1d4>)
 800b0c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b0cc:	4941      	ldr	r1, [pc, #260]	; (800b1d4 <pbuf_alloc+0x1d8>)
 800b0ce:	4842      	ldr	r0, [pc, #264]	; (800b1d8 <pbuf_alloc+0x1dc>)
 800b0d0:	f00c f84a 	bl	8017168 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b0d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b0d6:	3303      	adds	r3, #3
 800b0d8:	f023 0303 	bic.w	r3, r3, #3
 800b0dc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b0e0:	d106      	bne.n	800b0f0 <pbuf_alloc+0xf4>
 800b0e2:	4b3b      	ldr	r3, [pc, #236]	; (800b1d0 <pbuf_alloc+0x1d4>)
 800b0e4:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b0e8:	493c      	ldr	r1, [pc, #240]	; (800b1dc <pbuf_alloc+0x1e0>)
 800b0ea:	483b      	ldr	r0, [pc, #236]	; (800b1d8 <pbuf_alloc+0x1dc>)
 800b0ec:	f00c f83c 	bl	8017168 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d102      	bne.n	800b0fc <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	627b      	str	r3, [r7, #36]	; 0x24
 800b0fa:	e002      	b.n	800b102 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b0fc:	69fb      	ldr	r3, [r7, #28]
 800b0fe:	693a      	ldr	r2, [r7, #16]
 800b100:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b106:	8b7a      	ldrh	r2, [r7, #26]
 800b108:	89fb      	ldrh	r3, [r7, #14]
 800b10a:	1ad3      	subs	r3, r2, r3
 800b10c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b10e:	2300      	movs	r3, #0
 800b110:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b112:	8b7b      	ldrh	r3, [r7, #26]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d19e      	bne.n	800b056 <pbuf_alloc+0x5a>
      break;
 800b118:	e055      	b.n	800b1c6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b11a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b11c:	3303      	adds	r3, #3
 800b11e:	b29b      	uxth	r3, r3
 800b120:	f023 0303 	bic.w	r3, r3, #3
 800b124:	b29a      	uxth	r2, r3
 800b126:	88bb      	ldrh	r3, [r7, #4]
 800b128:	3303      	adds	r3, #3
 800b12a:	b29b      	uxth	r3, r3
 800b12c:	f023 0303 	bic.w	r3, r3, #3
 800b130:	b29b      	uxth	r3, r3
 800b132:	4413      	add	r3, r2
 800b134:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b136:	8b3b      	ldrh	r3, [r7, #24]
 800b138:	3310      	adds	r3, #16
 800b13a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b13c:	8b3a      	ldrh	r2, [r7, #24]
 800b13e:	88bb      	ldrh	r3, [r7, #4]
 800b140:	3303      	adds	r3, #3
 800b142:	f023 0303 	bic.w	r3, r3, #3
 800b146:	429a      	cmp	r2, r3
 800b148:	d306      	bcc.n	800b158 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b14a:	8afa      	ldrh	r2, [r7, #22]
 800b14c:	88bb      	ldrh	r3, [r7, #4]
 800b14e:	3303      	adds	r3, #3
 800b150:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b154:	429a      	cmp	r2, r3
 800b156:	d201      	bcs.n	800b15c <pbuf_alloc+0x160>
        return NULL;
 800b158:	2300      	movs	r3, #0
 800b15a:	e035      	b.n	800b1c8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b15c:	8afb      	ldrh	r3, [r7, #22]
 800b15e:	4618      	mov	r0, r3
 800b160:	f7ff f870 	bl	800a244 <mem_malloc>
 800b164:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800b166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d101      	bne.n	800b170 <pbuf_alloc+0x174>
        return NULL;
 800b16c:	2300      	movs	r3, #0
 800b16e:	e02b      	b.n	800b1c8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b170:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b172:	3310      	adds	r3, #16
 800b174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b176:	4413      	add	r3, r2
 800b178:	3303      	adds	r3, #3
 800b17a:	f023 0303 	bic.w	r3, r3, #3
 800b17e:	4618      	mov	r0, r3
 800b180:	88b9      	ldrh	r1, [r7, #4]
 800b182:	88ba      	ldrh	r2, [r7, #4]
 800b184:	2300      	movs	r3, #0
 800b186:	9301      	str	r3, [sp, #4]
 800b188:	887b      	ldrh	r3, [r7, #2]
 800b18a:	9300      	str	r3, [sp, #0]
 800b18c:	460b      	mov	r3, r1
 800b18e:	4601      	mov	r1, r0
 800b190:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b192:	f7ff ff09 	bl	800afa8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b198:	685b      	ldr	r3, [r3, #4]
 800b19a:	f003 0303 	and.w	r3, r3, #3
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d010      	beq.n	800b1c4 <pbuf_alloc+0x1c8>
 800b1a2:	4b0b      	ldr	r3, [pc, #44]	; (800b1d0 <pbuf_alloc+0x1d4>)
 800b1a4:	f44f 7291 	mov.w	r2, #290	; 0x122
 800b1a8:	490d      	ldr	r1, [pc, #52]	; (800b1e0 <pbuf_alloc+0x1e4>)
 800b1aa:	480b      	ldr	r0, [pc, #44]	; (800b1d8 <pbuf_alloc+0x1dc>)
 800b1ac:	f00b ffdc 	bl	8017168 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b1b0:	e008      	b.n	800b1c4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b1b2:	4b07      	ldr	r3, [pc, #28]	; (800b1d0 <pbuf_alloc+0x1d4>)
 800b1b4:	f240 1227 	movw	r2, #295	; 0x127
 800b1b8:	490a      	ldr	r1, [pc, #40]	; (800b1e4 <pbuf_alloc+0x1e8>)
 800b1ba:	4807      	ldr	r0, [pc, #28]	; (800b1d8 <pbuf_alloc+0x1dc>)
 800b1bc:	f00b ffd4 	bl	8017168 <iprintf>
      return NULL;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	e001      	b.n	800b1c8 <pbuf_alloc+0x1cc>
      break;
 800b1c4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3728      	adds	r7, #40	; 0x28
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}
 800b1d0:	08018ef0 	.word	0x08018ef0
 800b1d4:	08018f20 	.word	0x08018f20
 800b1d8:	08018f50 	.word	0x08018f50
 800b1dc:	08018f78 	.word	0x08018f78
 800b1e0:	08018fac 	.word	0x08018fac
 800b1e4:	08018fd8 	.word	0x08018fd8

0800b1e8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b086      	sub	sp, #24
 800b1ec:	af02      	add	r7, sp, #8
 800b1ee:	6078      	str	r0, [r7, #4]
 800b1f0:	460b      	mov	r3, r1
 800b1f2:	807b      	strh	r3, [r7, #2]
 800b1f4:	4613      	mov	r3, r2
 800b1f6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b1f8:	883b      	ldrh	r3, [r7, #0]
 800b1fa:	2b41      	cmp	r3, #65	; 0x41
 800b1fc:	d009      	beq.n	800b212 <pbuf_alloc_reference+0x2a>
 800b1fe:	883b      	ldrh	r3, [r7, #0]
 800b200:	2b01      	cmp	r3, #1
 800b202:	d006      	beq.n	800b212 <pbuf_alloc_reference+0x2a>
 800b204:	4b0f      	ldr	r3, [pc, #60]	; (800b244 <pbuf_alloc_reference+0x5c>)
 800b206:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b20a:	490f      	ldr	r1, [pc, #60]	; (800b248 <pbuf_alloc_reference+0x60>)
 800b20c:	480f      	ldr	r0, [pc, #60]	; (800b24c <pbuf_alloc_reference+0x64>)
 800b20e:	f00b ffab 	bl	8017168 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b212:	200c      	movs	r0, #12
 800b214:	f7ff f9ba 	bl	800a58c <memp_malloc>
 800b218:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d101      	bne.n	800b224 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b220:	2300      	movs	r3, #0
 800b222:	e00b      	b.n	800b23c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b224:	8879      	ldrh	r1, [r7, #2]
 800b226:	887a      	ldrh	r2, [r7, #2]
 800b228:	2300      	movs	r3, #0
 800b22a:	9301      	str	r3, [sp, #4]
 800b22c:	883b      	ldrh	r3, [r7, #0]
 800b22e:	9300      	str	r3, [sp, #0]
 800b230:	460b      	mov	r3, r1
 800b232:	6879      	ldr	r1, [r7, #4]
 800b234:	68f8      	ldr	r0, [r7, #12]
 800b236:	f7ff feb7 	bl	800afa8 <pbuf_init_alloced_pbuf>
  return p;
 800b23a:	68fb      	ldr	r3, [r7, #12]
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	3710      	adds	r7, #16
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}
 800b244:	08018ef0 	.word	0x08018ef0
 800b248:	08018ff4 	.word	0x08018ff4
 800b24c:	08018f50 	.word	0x08018f50

0800b250 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b088      	sub	sp, #32
 800b254:	af02      	add	r7, sp, #8
 800b256:	607b      	str	r3, [r7, #4]
 800b258:	4603      	mov	r3, r0
 800b25a:	73fb      	strb	r3, [r7, #15]
 800b25c:	460b      	mov	r3, r1
 800b25e:	81bb      	strh	r3, [r7, #12]
 800b260:	4613      	mov	r3, r2
 800b262:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b264:	7bfb      	ldrb	r3, [r7, #15]
 800b266:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b268:	8a7b      	ldrh	r3, [r7, #18]
 800b26a:	3303      	adds	r3, #3
 800b26c:	f023 0203 	bic.w	r2, r3, #3
 800b270:	89bb      	ldrh	r3, [r7, #12]
 800b272:	441a      	add	r2, r3
 800b274:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b276:	429a      	cmp	r2, r3
 800b278:	d901      	bls.n	800b27e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b27a:	2300      	movs	r3, #0
 800b27c:	e018      	b.n	800b2b0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b27e:	6a3b      	ldr	r3, [r7, #32]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d007      	beq.n	800b294 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b284:	8a7b      	ldrh	r3, [r7, #18]
 800b286:	3303      	adds	r3, #3
 800b288:	f023 0303 	bic.w	r3, r3, #3
 800b28c:	6a3a      	ldr	r2, [r7, #32]
 800b28e:	4413      	add	r3, r2
 800b290:	617b      	str	r3, [r7, #20]
 800b292:	e001      	b.n	800b298 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b294:	2300      	movs	r3, #0
 800b296:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	89b9      	ldrh	r1, [r7, #12]
 800b29c:	89ba      	ldrh	r2, [r7, #12]
 800b29e:	2302      	movs	r3, #2
 800b2a0:	9301      	str	r3, [sp, #4]
 800b2a2:	897b      	ldrh	r3, [r7, #10]
 800b2a4:	9300      	str	r3, [sp, #0]
 800b2a6:	460b      	mov	r3, r1
 800b2a8:	6979      	ldr	r1, [r7, #20]
 800b2aa:	f7ff fe7d 	bl	800afa8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b2ae:	687b      	ldr	r3, [r7, #4]
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3718      	adds	r7, #24
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}

0800b2b8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b084      	sub	sp, #16
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	460b      	mov	r3, r1
 800b2c2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d106      	bne.n	800b2d8 <pbuf_realloc+0x20>
 800b2ca:	4b3a      	ldr	r3, [pc, #232]	; (800b3b4 <pbuf_realloc+0xfc>)
 800b2cc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b2d0:	4939      	ldr	r1, [pc, #228]	; (800b3b8 <pbuf_realloc+0x100>)
 800b2d2:	483a      	ldr	r0, [pc, #232]	; (800b3bc <pbuf_realloc+0x104>)
 800b2d4:	f00b ff48 	bl	8017168 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	891b      	ldrh	r3, [r3, #8]
 800b2dc:	887a      	ldrh	r2, [r7, #2]
 800b2de:	429a      	cmp	r2, r3
 800b2e0:	d263      	bcs.n	800b3aa <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	891a      	ldrh	r2, [r3, #8]
 800b2e6:	887b      	ldrh	r3, [r7, #2]
 800b2e8:	1ad3      	subs	r3, r2, r3
 800b2ea:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b2ec:	887b      	ldrh	r3, [r7, #2]
 800b2ee:	817b      	strh	r3, [r7, #10]
  q = p;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b2f4:	e018      	b.n	800b328 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	895b      	ldrh	r3, [r3, #10]
 800b2fa:	897a      	ldrh	r2, [r7, #10]
 800b2fc:	1ad3      	subs	r3, r2, r3
 800b2fe:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	891a      	ldrh	r2, [r3, #8]
 800b304:	893b      	ldrh	r3, [r7, #8]
 800b306:	1ad3      	subs	r3, r2, r3
 800b308:	b29a      	uxth	r2, r3
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d106      	bne.n	800b328 <pbuf_realloc+0x70>
 800b31a:	4b26      	ldr	r3, [pc, #152]	; (800b3b4 <pbuf_realloc+0xfc>)
 800b31c:	f240 12af 	movw	r2, #431	; 0x1af
 800b320:	4927      	ldr	r1, [pc, #156]	; (800b3c0 <pbuf_realloc+0x108>)
 800b322:	4826      	ldr	r0, [pc, #152]	; (800b3bc <pbuf_realloc+0x104>)
 800b324:	f00b ff20 	bl	8017168 <iprintf>
  while (rem_len > q->len) {
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	895b      	ldrh	r3, [r3, #10]
 800b32c:	897a      	ldrh	r2, [r7, #10]
 800b32e:	429a      	cmp	r2, r3
 800b330:	d8e1      	bhi.n	800b2f6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	7b1b      	ldrb	r3, [r3, #12]
 800b336:	f003 030f 	and.w	r3, r3, #15
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d121      	bne.n	800b382 <pbuf_realloc+0xca>
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	895b      	ldrh	r3, [r3, #10]
 800b342:	897a      	ldrh	r2, [r7, #10]
 800b344:	429a      	cmp	r2, r3
 800b346:	d01c      	beq.n	800b382 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	7b5b      	ldrb	r3, [r3, #13]
 800b34c:	f003 0302 	and.w	r3, r3, #2
 800b350:	2b00      	cmp	r3, #0
 800b352:	d116      	bne.n	800b382 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	685a      	ldr	r2, [r3, #4]
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	1ad3      	subs	r3, r2, r3
 800b35c:	b29a      	uxth	r2, r3
 800b35e:	897b      	ldrh	r3, [r7, #10]
 800b360:	4413      	add	r3, r2
 800b362:	b29b      	uxth	r3, r3
 800b364:	4619      	mov	r1, r3
 800b366:	68f8      	ldr	r0, [r7, #12]
 800b368:	f7fe fe62 	bl	800a030 <mem_trim>
 800b36c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d106      	bne.n	800b382 <pbuf_realloc+0xca>
 800b374:	4b0f      	ldr	r3, [pc, #60]	; (800b3b4 <pbuf_realloc+0xfc>)
 800b376:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b37a:	4912      	ldr	r1, [pc, #72]	; (800b3c4 <pbuf_realloc+0x10c>)
 800b37c:	480f      	ldr	r0, [pc, #60]	; (800b3bc <pbuf_realloc+0x104>)
 800b37e:	f00b fef3 	bl	8017168 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	897a      	ldrh	r2, [r7, #10]
 800b386:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	895a      	ldrh	r2, [r3, #10]
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d004      	beq.n	800b3a2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	4618      	mov	r0, r3
 800b39e:	f000 f911 	bl	800b5c4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	601a      	str	r2, [r3, #0]
 800b3a8:	e000      	b.n	800b3ac <pbuf_realloc+0xf4>
    return;
 800b3aa:	bf00      	nop

}
 800b3ac:	3710      	adds	r7, #16
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}
 800b3b2:	bf00      	nop
 800b3b4:	08018ef0 	.word	0x08018ef0
 800b3b8:	08019008 	.word	0x08019008
 800b3bc:	08018f50 	.word	0x08018f50
 800b3c0:	08019020 	.word	0x08019020
 800b3c4:	08019038 	.word	0x08019038

0800b3c8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b086      	sub	sp, #24
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	60f8      	str	r0, [r7, #12]
 800b3d0:	60b9      	str	r1, [r7, #8]
 800b3d2:	4613      	mov	r3, r2
 800b3d4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d106      	bne.n	800b3ea <pbuf_add_header_impl+0x22>
 800b3dc:	4b2b      	ldr	r3, [pc, #172]	; (800b48c <pbuf_add_header_impl+0xc4>)
 800b3de:	f240 12df 	movw	r2, #479	; 0x1df
 800b3e2:	492b      	ldr	r1, [pc, #172]	; (800b490 <pbuf_add_header_impl+0xc8>)
 800b3e4:	482b      	ldr	r0, [pc, #172]	; (800b494 <pbuf_add_header_impl+0xcc>)
 800b3e6:	f00b febf 	bl	8017168 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d003      	beq.n	800b3f8 <pbuf_add_header_impl+0x30>
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3f6:	d301      	bcc.n	800b3fc <pbuf_add_header_impl+0x34>
    return 1;
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	e043      	b.n	800b484 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d101      	bne.n	800b406 <pbuf_add_header_impl+0x3e>
    return 0;
 800b402:	2300      	movs	r3, #0
 800b404:	e03e      	b.n	800b484 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	891a      	ldrh	r2, [r3, #8]
 800b40e:	8a7b      	ldrh	r3, [r7, #18]
 800b410:	4413      	add	r3, r2
 800b412:	b29b      	uxth	r3, r3
 800b414:	8a7a      	ldrh	r2, [r7, #18]
 800b416:	429a      	cmp	r2, r3
 800b418:	d901      	bls.n	800b41e <pbuf_add_header_impl+0x56>
    return 1;
 800b41a:	2301      	movs	r3, #1
 800b41c:	e032      	b.n	800b484 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	7b1b      	ldrb	r3, [r3, #12]
 800b422:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b424:	8a3b      	ldrh	r3, [r7, #16]
 800b426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d00c      	beq.n	800b448 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	685a      	ldr	r2, [r3, #4]
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	425b      	negs	r3, r3
 800b436:	4413      	add	r3, r2
 800b438:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	3310      	adds	r3, #16
 800b43e:	697a      	ldr	r2, [r7, #20]
 800b440:	429a      	cmp	r2, r3
 800b442:	d20d      	bcs.n	800b460 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b444:	2301      	movs	r3, #1
 800b446:	e01d      	b.n	800b484 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b448:	79fb      	ldrb	r3, [r7, #7]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d006      	beq.n	800b45c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	685a      	ldr	r2, [r3, #4]
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	425b      	negs	r3, r3
 800b456:	4413      	add	r3, r2
 800b458:	617b      	str	r3, [r7, #20]
 800b45a:	e001      	b.n	800b460 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b45c:	2301      	movs	r3, #1
 800b45e:	e011      	b.n	800b484 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	697a      	ldr	r2, [r7, #20]
 800b464:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	895a      	ldrh	r2, [r3, #10]
 800b46a:	8a7b      	ldrh	r3, [r7, #18]
 800b46c:	4413      	add	r3, r2
 800b46e:	b29a      	uxth	r2, r3
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	891a      	ldrh	r2, [r3, #8]
 800b478:	8a7b      	ldrh	r3, [r7, #18]
 800b47a:	4413      	add	r3, r2
 800b47c:	b29a      	uxth	r2, r3
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	811a      	strh	r2, [r3, #8]


  return 0;
 800b482:	2300      	movs	r3, #0
}
 800b484:	4618      	mov	r0, r3
 800b486:	3718      	adds	r7, #24
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}
 800b48c:	08018ef0 	.word	0x08018ef0
 800b490:	08019054 	.word	0x08019054
 800b494:	08018f50 	.word	0x08018f50

0800b498 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b082      	sub	sp, #8
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
 800b4a0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	6839      	ldr	r1, [r7, #0]
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f7ff ff8e 	bl	800b3c8 <pbuf_add_header_impl>
 800b4ac:	4603      	mov	r3, r0
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3708      	adds	r7, #8
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}
	...

0800b4b8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b084      	sub	sp, #16
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d106      	bne.n	800b4d6 <pbuf_remove_header+0x1e>
 800b4c8:	4b20      	ldr	r3, [pc, #128]	; (800b54c <pbuf_remove_header+0x94>)
 800b4ca:	f240 224b 	movw	r2, #587	; 0x24b
 800b4ce:	4920      	ldr	r1, [pc, #128]	; (800b550 <pbuf_remove_header+0x98>)
 800b4d0:	4820      	ldr	r0, [pc, #128]	; (800b554 <pbuf_remove_header+0x9c>)
 800b4d2:	f00b fe49 	bl	8017168 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d003      	beq.n	800b4e4 <pbuf_remove_header+0x2c>
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4e2:	d301      	bcc.n	800b4e8 <pbuf_remove_header+0x30>
    return 1;
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	e02c      	b.n	800b542 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d101      	bne.n	800b4f2 <pbuf_remove_header+0x3a>
    return 0;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	e027      	b.n	800b542 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	895b      	ldrh	r3, [r3, #10]
 800b4fa:	89fa      	ldrh	r2, [r7, #14]
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d908      	bls.n	800b512 <pbuf_remove_header+0x5a>
 800b500:	4b12      	ldr	r3, [pc, #72]	; (800b54c <pbuf_remove_header+0x94>)
 800b502:	f240 2255 	movw	r2, #597	; 0x255
 800b506:	4914      	ldr	r1, [pc, #80]	; (800b558 <pbuf_remove_header+0xa0>)
 800b508:	4812      	ldr	r0, [pc, #72]	; (800b554 <pbuf_remove_header+0x9c>)
 800b50a:	f00b fe2d 	bl	8017168 <iprintf>
 800b50e:	2301      	movs	r3, #1
 800b510:	e017      	b.n	800b542 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	685a      	ldr	r2, [r3, #4]
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	441a      	add	r2, r3
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	895a      	ldrh	r2, [r3, #10]
 800b528:	89fb      	ldrh	r3, [r7, #14]
 800b52a:	1ad3      	subs	r3, r2, r3
 800b52c:	b29a      	uxth	r2, r3
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	891a      	ldrh	r2, [r3, #8]
 800b536:	89fb      	ldrh	r3, [r7, #14]
 800b538:	1ad3      	subs	r3, r2, r3
 800b53a:	b29a      	uxth	r2, r3
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b540:	2300      	movs	r3, #0
}
 800b542:	4618      	mov	r0, r3
 800b544:	3710      	adds	r7, #16
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
 800b54a:	bf00      	nop
 800b54c:	08018ef0 	.word	0x08018ef0
 800b550:	08019054 	.word	0x08019054
 800b554:	08018f50 	.word	0x08018f50
 800b558:	08019060 	.word	0x08019060

0800b55c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b082      	sub	sp, #8
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	460b      	mov	r3, r1
 800b566:	807b      	strh	r3, [r7, #2]
 800b568:	4613      	mov	r3, r2
 800b56a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b56c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b570:	2b00      	cmp	r3, #0
 800b572:	da08      	bge.n	800b586 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b574:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b578:	425b      	negs	r3, r3
 800b57a:	4619      	mov	r1, r3
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f7ff ff9b 	bl	800b4b8 <pbuf_remove_header>
 800b582:	4603      	mov	r3, r0
 800b584:	e007      	b.n	800b596 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b586:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b58a:	787a      	ldrb	r2, [r7, #1]
 800b58c:	4619      	mov	r1, r3
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f7ff ff1a 	bl	800b3c8 <pbuf_add_header_impl>
 800b594:	4603      	mov	r3, r0
  }
}
 800b596:	4618      	mov	r0, r3
 800b598:	3708      	adds	r7, #8
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}

0800b59e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b59e:	b580      	push	{r7, lr}
 800b5a0:	b082      	sub	sp, #8
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	6078      	str	r0, [r7, #4]
 800b5a6:	460b      	mov	r3, r1
 800b5a8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b5aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b5ae:	2201      	movs	r2, #1
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f7ff ffd2 	bl	800b55c <pbuf_header_impl>
 800b5b8:	4603      	mov	r3, r0
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3708      	adds	r7, #8
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}
	...

0800b5c4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b088      	sub	sp, #32
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d10b      	bne.n	800b5ea <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d106      	bne.n	800b5e6 <pbuf_free+0x22>
 800b5d8:	4b3b      	ldr	r3, [pc, #236]	; (800b6c8 <pbuf_free+0x104>)
 800b5da:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800b5de:	493b      	ldr	r1, [pc, #236]	; (800b6cc <pbuf_free+0x108>)
 800b5e0:	483b      	ldr	r0, [pc, #236]	; (800b6d0 <pbuf_free+0x10c>)
 800b5e2:	f00b fdc1 	bl	8017168 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	e069      	b.n	800b6be <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b5ee:	e062      	b.n	800b6b6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800b5f0:	f00b fd52 	bl	8017098 <sys_arch_protect>
 800b5f4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	7b9b      	ldrb	r3, [r3, #14]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d106      	bne.n	800b60c <pbuf_free+0x48>
 800b5fe:	4b32      	ldr	r3, [pc, #200]	; (800b6c8 <pbuf_free+0x104>)
 800b600:	f240 22f1 	movw	r2, #753	; 0x2f1
 800b604:	4933      	ldr	r1, [pc, #204]	; (800b6d4 <pbuf_free+0x110>)
 800b606:	4832      	ldr	r0, [pc, #200]	; (800b6d0 <pbuf_free+0x10c>)
 800b608:	f00b fdae 	bl	8017168 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	7b9b      	ldrb	r3, [r3, #14]
 800b610:	3b01      	subs	r3, #1
 800b612:	b2da      	uxtb	r2, r3
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	739a      	strb	r2, [r3, #14]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	7b9b      	ldrb	r3, [r3, #14]
 800b61c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800b61e:	69b8      	ldr	r0, [r7, #24]
 800b620:	f00b fd48 	bl	80170b4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b624:	7dfb      	ldrb	r3, [r7, #23]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d143      	bne.n	800b6b2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	7b1b      	ldrb	r3, [r3, #12]
 800b634:	f003 030f 	and.w	r3, r3, #15
 800b638:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	7b5b      	ldrb	r3, [r3, #13]
 800b63e:	f003 0302 	and.w	r3, r3, #2
 800b642:	2b00      	cmp	r3, #0
 800b644:	d011      	beq.n	800b66a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	691b      	ldr	r3, [r3, #16]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d106      	bne.n	800b660 <pbuf_free+0x9c>
 800b652:	4b1d      	ldr	r3, [pc, #116]	; (800b6c8 <pbuf_free+0x104>)
 800b654:	f240 22ff 	movw	r2, #767	; 0x2ff
 800b658:	491f      	ldr	r1, [pc, #124]	; (800b6d8 <pbuf_free+0x114>)
 800b65a:	481d      	ldr	r0, [pc, #116]	; (800b6d0 <pbuf_free+0x10c>)
 800b65c:	f00b fd84 	bl	8017168 <iprintf>
        pc->custom_free_function(p);
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	691b      	ldr	r3, [r3, #16]
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	4798      	blx	r3
 800b668:	e01d      	b.n	800b6a6 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b66a:	7bfb      	ldrb	r3, [r7, #15]
 800b66c:	2b02      	cmp	r3, #2
 800b66e:	d104      	bne.n	800b67a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800b670:	6879      	ldr	r1, [r7, #4]
 800b672:	200d      	movs	r0, #13
 800b674:	f7ff f800 	bl	800a678 <memp_free>
 800b678:	e015      	b.n	800b6a6 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b67a:	7bfb      	ldrb	r3, [r7, #15]
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	d104      	bne.n	800b68a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800b680:	6879      	ldr	r1, [r7, #4]
 800b682:	200c      	movs	r0, #12
 800b684:	f7fe fff8 	bl	800a678 <memp_free>
 800b688:	e00d      	b.n	800b6a6 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b68a:	7bfb      	ldrb	r3, [r7, #15]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d103      	bne.n	800b698 <pbuf_free+0xd4>
          mem_free(p);
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f7fe fc3d 	bl	8009f10 <mem_free>
 800b696:	e006      	b.n	800b6a6 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800b698:	4b0b      	ldr	r3, [pc, #44]	; (800b6c8 <pbuf_free+0x104>)
 800b69a:	f240 320f 	movw	r2, #783	; 0x30f
 800b69e:	490f      	ldr	r1, [pc, #60]	; (800b6dc <pbuf_free+0x118>)
 800b6a0:	480b      	ldr	r0, [pc, #44]	; (800b6d0 <pbuf_free+0x10c>)
 800b6a2:	f00b fd61 	bl	8017168 <iprintf>
        }
      }
      count++;
 800b6a6:	7ffb      	ldrb	r3, [r7, #31]
 800b6a8:	3301      	adds	r3, #1
 800b6aa:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	607b      	str	r3, [r7, #4]
 800b6b0:	e001      	b.n	800b6b6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d199      	bne.n	800b5f0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b6bc:	7ffb      	ldrb	r3, [r7, #31]
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3720      	adds	r7, #32
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}
 800b6c6:	bf00      	nop
 800b6c8:	08018ef0 	.word	0x08018ef0
 800b6cc:	08019054 	.word	0x08019054
 800b6d0:	08018f50 	.word	0x08018f50
 800b6d4:	08019080 	.word	0x08019080
 800b6d8:	08019098 	.word	0x08019098
 800b6dc:	080190bc 	.word	0x080190bc

0800b6e0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b085      	sub	sp, #20
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b6ec:	e005      	b.n	800b6fa <pbuf_clen+0x1a>
    ++len;
 800b6ee:	89fb      	ldrh	r3, [r7, #14]
 800b6f0:	3301      	adds	r3, #1
 800b6f2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d1f6      	bne.n	800b6ee <pbuf_clen+0xe>
  }
  return len;
 800b700:	89fb      	ldrh	r3, [r7, #14]
}
 800b702:	4618      	mov	r0, r3
 800b704:	3714      	adds	r7, #20
 800b706:	46bd      	mov	sp, r7
 800b708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70c:	4770      	bx	lr
	...

0800b710 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b084      	sub	sp, #16
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d016      	beq.n	800b74c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b71e:	f00b fcbb 	bl	8017098 <sys_arch_protect>
 800b722:	60f8      	str	r0, [r7, #12]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	7b9b      	ldrb	r3, [r3, #14]
 800b728:	3301      	adds	r3, #1
 800b72a:	b2da      	uxtb	r2, r3
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	739a      	strb	r2, [r3, #14]
 800b730:	68f8      	ldr	r0, [r7, #12]
 800b732:	f00b fcbf 	bl	80170b4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	7b9b      	ldrb	r3, [r3, #14]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d106      	bne.n	800b74c <pbuf_ref+0x3c>
 800b73e:	4b05      	ldr	r3, [pc, #20]	; (800b754 <pbuf_ref+0x44>)
 800b740:	f240 3242 	movw	r2, #834	; 0x342
 800b744:	4904      	ldr	r1, [pc, #16]	; (800b758 <pbuf_ref+0x48>)
 800b746:	4805      	ldr	r0, [pc, #20]	; (800b75c <pbuf_ref+0x4c>)
 800b748:	f00b fd0e 	bl	8017168 <iprintf>
  }
}
 800b74c:	bf00      	nop
 800b74e:	3710      	adds	r7, #16
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}
 800b754:	08018ef0 	.word	0x08018ef0
 800b758:	080190d0 	.word	0x080190d0
 800b75c:	08018f50 	.word	0x08018f50

0800b760 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b084      	sub	sp, #16
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d002      	beq.n	800b776 <pbuf_cat+0x16>
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d107      	bne.n	800b786 <pbuf_cat+0x26>
 800b776:	4b20      	ldr	r3, [pc, #128]	; (800b7f8 <pbuf_cat+0x98>)
 800b778:	f240 3259 	movw	r2, #857	; 0x359
 800b77c:	491f      	ldr	r1, [pc, #124]	; (800b7fc <pbuf_cat+0x9c>)
 800b77e:	4820      	ldr	r0, [pc, #128]	; (800b800 <pbuf_cat+0xa0>)
 800b780:	f00b fcf2 	bl	8017168 <iprintf>
 800b784:	e034      	b.n	800b7f0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	60fb      	str	r3, [r7, #12]
 800b78a:	e00a      	b.n	800b7a2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	891a      	ldrh	r2, [r3, #8]
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	891b      	ldrh	r3, [r3, #8]
 800b794:	4413      	add	r3, r2
 800b796:	b29a      	uxth	r2, r3
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	60fb      	str	r3, [r7, #12]
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d1f0      	bne.n	800b78c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	891a      	ldrh	r2, [r3, #8]
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	895b      	ldrh	r3, [r3, #10]
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d006      	beq.n	800b7c4 <pbuf_cat+0x64>
 800b7b6:	4b10      	ldr	r3, [pc, #64]	; (800b7f8 <pbuf_cat+0x98>)
 800b7b8:	f240 3262 	movw	r2, #866	; 0x362
 800b7bc:	4911      	ldr	r1, [pc, #68]	; (800b804 <pbuf_cat+0xa4>)
 800b7be:	4810      	ldr	r0, [pc, #64]	; (800b800 <pbuf_cat+0xa0>)
 800b7c0:	f00b fcd2 	bl	8017168 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d006      	beq.n	800b7da <pbuf_cat+0x7a>
 800b7cc:	4b0a      	ldr	r3, [pc, #40]	; (800b7f8 <pbuf_cat+0x98>)
 800b7ce:	f240 3263 	movw	r2, #867	; 0x363
 800b7d2:	490d      	ldr	r1, [pc, #52]	; (800b808 <pbuf_cat+0xa8>)
 800b7d4:	480a      	ldr	r0, [pc, #40]	; (800b800 <pbuf_cat+0xa0>)
 800b7d6:	f00b fcc7 	bl	8017168 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	891a      	ldrh	r2, [r3, #8]
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	891b      	ldrh	r3, [r3, #8]
 800b7e2:	4413      	add	r3, r2
 800b7e4:	b29a      	uxth	r2, r3
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	683a      	ldr	r2, [r7, #0]
 800b7ee:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b7f0:	3710      	adds	r7, #16
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	08018ef0 	.word	0x08018ef0
 800b7fc:	080190e4 	.word	0x080190e4
 800b800:	08018f50 	.word	0x08018f50
 800b804:	0801911c 	.word	0x0801911c
 800b808:	0801914c 	.word	0x0801914c

0800b80c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b082      	sub	sp, #8
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800b816:	6839      	ldr	r1, [r7, #0]
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f7ff ffa1 	bl	800b760 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800b81e:	6838      	ldr	r0, [r7, #0]
 800b820:	f7ff ff76 	bl	800b710 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800b824:	bf00      	nop
 800b826:	3708      	adds	r7, #8
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}

0800b82c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b086      	sub	sp, #24
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800b836:	2300      	movs	r3, #0
 800b838:	617b      	str	r3, [r7, #20]
 800b83a:	2300      	movs	r3, #0
 800b83c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d008      	beq.n	800b856 <pbuf_copy+0x2a>
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d005      	beq.n	800b856 <pbuf_copy+0x2a>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	891a      	ldrh	r2, [r3, #8]
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	891b      	ldrh	r3, [r3, #8]
 800b852:	429a      	cmp	r2, r3
 800b854:	d209      	bcs.n	800b86a <pbuf_copy+0x3e>
 800b856:	4b57      	ldr	r3, [pc, #348]	; (800b9b4 <pbuf_copy+0x188>)
 800b858:	f240 32c9 	movw	r2, #969	; 0x3c9
 800b85c:	4956      	ldr	r1, [pc, #344]	; (800b9b8 <pbuf_copy+0x18c>)
 800b85e:	4857      	ldr	r0, [pc, #348]	; (800b9bc <pbuf_copy+0x190>)
 800b860:	f00b fc82 	bl	8017168 <iprintf>
 800b864:	f06f 030f 	mvn.w	r3, #15
 800b868:	e09f      	b.n	800b9aa <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	895b      	ldrh	r3, [r3, #10]
 800b86e:	461a      	mov	r2, r3
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	1ad2      	subs	r2, r2, r3
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	895b      	ldrh	r3, [r3, #10]
 800b878:	4619      	mov	r1, r3
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	1acb      	subs	r3, r1, r3
 800b87e:	429a      	cmp	r2, r3
 800b880:	d306      	bcc.n	800b890 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	895b      	ldrh	r3, [r3, #10]
 800b886:	461a      	mov	r2, r3
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	1ad3      	subs	r3, r2, r3
 800b88c:	60fb      	str	r3, [r7, #12]
 800b88e:	e005      	b.n	800b89c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	895b      	ldrh	r3, [r3, #10]
 800b894:	461a      	mov	r2, r3
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	1ad3      	subs	r3, r2, r3
 800b89a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	685a      	ldr	r2, [r3, #4]
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	18d0      	adds	r0, r2, r3
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	685a      	ldr	r2, [r3, #4]
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	4413      	add	r3, r2
 800b8ac:	68fa      	ldr	r2, [r7, #12]
 800b8ae:	4619      	mov	r1, r3
 800b8b0:	f00b fc44 	bl	801713c <memcpy>
    offset_to += len;
 800b8b4:	697a      	ldr	r2, [r7, #20]
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	4413      	add	r3, r2
 800b8ba:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800b8bc:	693a      	ldr	r2, [r7, #16]
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	4413      	add	r3, r2
 800b8c2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	895b      	ldrh	r3, [r3, #10]
 800b8c8:	461a      	mov	r2, r3
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d906      	bls.n	800b8de <pbuf_copy+0xb2>
 800b8d0:	4b38      	ldr	r3, [pc, #224]	; (800b9b4 <pbuf_copy+0x188>)
 800b8d2:	f240 32d9 	movw	r2, #985	; 0x3d9
 800b8d6:	493a      	ldr	r1, [pc, #232]	; (800b9c0 <pbuf_copy+0x194>)
 800b8d8:	4838      	ldr	r0, [pc, #224]	; (800b9bc <pbuf_copy+0x190>)
 800b8da:	f00b fc45 	bl	8017168 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	895b      	ldrh	r3, [r3, #10]
 800b8e2:	461a      	mov	r2, r3
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	4293      	cmp	r3, r2
 800b8e8:	d906      	bls.n	800b8f8 <pbuf_copy+0xcc>
 800b8ea:	4b32      	ldr	r3, [pc, #200]	; (800b9b4 <pbuf_copy+0x188>)
 800b8ec:	f240 32da 	movw	r2, #986	; 0x3da
 800b8f0:	4934      	ldr	r1, [pc, #208]	; (800b9c4 <pbuf_copy+0x198>)
 800b8f2:	4832      	ldr	r0, [pc, #200]	; (800b9bc <pbuf_copy+0x190>)
 800b8f4:	f00b fc38 	bl	8017168 <iprintf>
    if (offset_from >= p_from->len) {
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	895b      	ldrh	r3, [r3, #10]
 800b8fc:	461a      	mov	r2, r3
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	4293      	cmp	r3, r2
 800b902:	d304      	bcc.n	800b90e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800b904:	2300      	movs	r3, #0
 800b906:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	895b      	ldrh	r3, [r3, #10]
 800b912:	461a      	mov	r2, r3
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	4293      	cmp	r3, r2
 800b918:	d114      	bne.n	800b944 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800b91a:	2300      	movs	r3, #0
 800b91c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d10c      	bne.n	800b944 <pbuf_copy+0x118>
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d009      	beq.n	800b944 <pbuf_copy+0x118>
 800b930:	4b20      	ldr	r3, [pc, #128]	; (800b9b4 <pbuf_copy+0x188>)
 800b932:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800b936:	4924      	ldr	r1, [pc, #144]	; (800b9c8 <pbuf_copy+0x19c>)
 800b938:	4820      	ldr	r0, [pc, #128]	; (800b9bc <pbuf_copy+0x190>)
 800b93a:	f00b fc15 	bl	8017168 <iprintf>
 800b93e:	f06f 030f 	mvn.w	r3, #15
 800b942:	e032      	b.n	800b9aa <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d013      	beq.n	800b972 <pbuf_copy+0x146>
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	895a      	ldrh	r2, [r3, #10]
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	891b      	ldrh	r3, [r3, #8]
 800b952:	429a      	cmp	r2, r3
 800b954:	d10d      	bne.n	800b972 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d009      	beq.n	800b972 <pbuf_copy+0x146>
 800b95e:	4b15      	ldr	r3, [pc, #84]	; (800b9b4 <pbuf_copy+0x188>)
 800b960:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800b964:	4919      	ldr	r1, [pc, #100]	; (800b9cc <pbuf_copy+0x1a0>)
 800b966:	4815      	ldr	r0, [pc, #84]	; (800b9bc <pbuf_copy+0x190>)
 800b968:	f00b fbfe 	bl	8017168 <iprintf>
 800b96c:	f06f 0305 	mvn.w	r3, #5
 800b970:	e01b      	b.n	800b9aa <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d013      	beq.n	800b9a0 <pbuf_copy+0x174>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	895a      	ldrh	r2, [r3, #10]
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	891b      	ldrh	r3, [r3, #8]
 800b980:	429a      	cmp	r2, r3
 800b982:	d10d      	bne.n	800b9a0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d009      	beq.n	800b9a0 <pbuf_copy+0x174>
 800b98c:	4b09      	ldr	r3, [pc, #36]	; (800b9b4 <pbuf_copy+0x188>)
 800b98e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800b992:	490e      	ldr	r1, [pc, #56]	; (800b9cc <pbuf_copy+0x1a0>)
 800b994:	4809      	ldr	r0, [pc, #36]	; (800b9bc <pbuf_copy+0x190>)
 800b996:	f00b fbe7 	bl	8017168 <iprintf>
 800b99a:	f06f 0305 	mvn.w	r3, #5
 800b99e:	e004      	b.n	800b9aa <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	f47f af61 	bne.w	800b86a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800b9a8:	2300      	movs	r3, #0
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3718      	adds	r7, #24
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}
 800b9b2:	bf00      	nop
 800b9b4:	08018ef0 	.word	0x08018ef0
 800b9b8:	08019198 	.word	0x08019198
 800b9bc:	08018f50 	.word	0x08018f50
 800b9c0:	080191c8 	.word	0x080191c8
 800b9c4:	080191e0 	.word	0x080191e0
 800b9c8:	080191fc 	.word	0x080191fc
 800b9cc:	0801920c 	.word	0x0801920c

0800b9d0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b088      	sub	sp, #32
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	60f8      	str	r0, [r7, #12]
 800b9d8:	60b9      	str	r1, [r7, #8]
 800b9da:	4611      	mov	r1, r2
 800b9dc:	461a      	mov	r2, r3
 800b9de:	460b      	mov	r3, r1
 800b9e0:	80fb      	strh	r3, [r7, #6]
 800b9e2:	4613      	mov	r3, r2
 800b9e4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d108      	bne.n	800ba06 <pbuf_copy_partial+0x36>
 800b9f4:	4b2b      	ldr	r3, [pc, #172]	; (800baa4 <pbuf_copy_partial+0xd4>)
 800b9f6:	f240 420a 	movw	r2, #1034	; 0x40a
 800b9fa:	492b      	ldr	r1, [pc, #172]	; (800baa8 <pbuf_copy_partial+0xd8>)
 800b9fc:	482b      	ldr	r0, [pc, #172]	; (800baac <pbuf_copy_partial+0xdc>)
 800b9fe:	f00b fbb3 	bl	8017168 <iprintf>
 800ba02:	2300      	movs	r3, #0
 800ba04:	e04a      	b.n	800ba9c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d108      	bne.n	800ba1e <pbuf_copy_partial+0x4e>
 800ba0c:	4b25      	ldr	r3, [pc, #148]	; (800baa4 <pbuf_copy_partial+0xd4>)
 800ba0e:	f240 420b 	movw	r2, #1035	; 0x40b
 800ba12:	4927      	ldr	r1, [pc, #156]	; (800bab0 <pbuf_copy_partial+0xe0>)
 800ba14:	4825      	ldr	r0, [pc, #148]	; (800baac <pbuf_copy_partial+0xdc>)
 800ba16:	f00b fba7 	bl	8017168 <iprintf>
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	e03e      	b.n	800ba9c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	61fb      	str	r3, [r7, #28]
 800ba22:	e034      	b.n	800ba8e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800ba24:	88bb      	ldrh	r3, [r7, #4]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d00a      	beq.n	800ba40 <pbuf_copy_partial+0x70>
 800ba2a:	69fb      	ldr	r3, [r7, #28]
 800ba2c:	895b      	ldrh	r3, [r3, #10]
 800ba2e:	88ba      	ldrh	r2, [r7, #4]
 800ba30:	429a      	cmp	r2, r3
 800ba32:	d305      	bcc.n	800ba40 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800ba34:	69fb      	ldr	r3, [r7, #28]
 800ba36:	895b      	ldrh	r3, [r3, #10]
 800ba38:	88ba      	ldrh	r2, [r7, #4]
 800ba3a:	1ad3      	subs	r3, r2, r3
 800ba3c:	80bb      	strh	r3, [r7, #4]
 800ba3e:	e023      	b.n	800ba88 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800ba40:	69fb      	ldr	r3, [r7, #28]
 800ba42:	895a      	ldrh	r2, [r3, #10]
 800ba44:	88bb      	ldrh	r3, [r7, #4]
 800ba46:	1ad3      	subs	r3, r2, r3
 800ba48:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ba4a:	8b3a      	ldrh	r2, [r7, #24]
 800ba4c:	88fb      	ldrh	r3, [r7, #6]
 800ba4e:	429a      	cmp	r2, r3
 800ba50:	d901      	bls.n	800ba56 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ba52:	88fb      	ldrh	r3, [r7, #6]
 800ba54:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ba56:	8b7b      	ldrh	r3, [r7, #26]
 800ba58:	68ba      	ldr	r2, [r7, #8]
 800ba5a:	18d0      	adds	r0, r2, r3
 800ba5c:	69fb      	ldr	r3, [r7, #28]
 800ba5e:	685a      	ldr	r2, [r3, #4]
 800ba60:	88bb      	ldrh	r3, [r7, #4]
 800ba62:	4413      	add	r3, r2
 800ba64:	8b3a      	ldrh	r2, [r7, #24]
 800ba66:	4619      	mov	r1, r3
 800ba68:	f00b fb68 	bl	801713c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ba6c:	8afa      	ldrh	r2, [r7, #22]
 800ba6e:	8b3b      	ldrh	r3, [r7, #24]
 800ba70:	4413      	add	r3, r2
 800ba72:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800ba74:	8b7a      	ldrh	r2, [r7, #26]
 800ba76:	8b3b      	ldrh	r3, [r7, #24]
 800ba78:	4413      	add	r3, r2
 800ba7a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ba7c:	88fa      	ldrh	r2, [r7, #6]
 800ba7e:	8b3b      	ldrh	r3, [r7, #24]
 800ba80:	1ad3      	subs	r3, r2, r3
 800ba82:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ba84:	2300      	movs	r3, #0
 800ba86:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ba88:	69fb      	ldr	r3, [r7, #28]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	61fb      	str	r3, [r7, #28]
 800ba8e:	88fb      	ldrh	r3, [r7, #6]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d002      	beq.n	800ba9a <pbuf_copy_partial+0xca>
 800ba94:	69fb      	ldr	r3, [r7, #28]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d1c4      	bne.n	800ba24 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ba9a:	8afb      	ldrh	r3, [r7, #22]
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3720      	adds	r7, #32
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}
 800baa4:	08018ef0 	.word	0x08018ef0
 800baa8:	08019238 	.word	0x08019238
 800baac:	08018f50 	.word	0x08018f50
 800bab0:	08019258 	.word	0x08019258

0800bab4 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800bab4:	b480      	push	{r7}
 800bab6:	b087      	sub	sp, #28
 800bab8:	af00      	add	r7, sp, #0
 800baba:	60f8      	str	r0, [r7, #12]
 800babc:	460b      	mov	r3, r1
 800babe:	607a      	str	r2, [r7, #4]
 800bac0:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800bac2:	897b      	ldrh	r3, [r7, #10]
 800bac4:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800baca:	e007      	b.n	800badc <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	895b      	ldrh	r3, [r3, #10]
 800bad0:	8afa      	ldrh	r2, [r7, #22]
 800bad2:	1ad3      	subs	r3, r2, r3
 800bad4:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d004      	beq.n	800baec <pbuf_skip_const+0x38>
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	895b      	ldrh	r3, [r3, #10]
 800bae6:	8afa      	ldrh	r2, [r7, #22]
 800bae8:	429a      	cmp	r2, r3
 800baea:	d2ef      	bcs.n	800bacc <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d002      	beq.n	800baf8 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	8afa      	ldrh	r2, [r7, #22]
 800baf6:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800baf8:	693b      	ldr	r3, [r7, #16]
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	371c      	adds	r7, #28
 800bafe:	46bd      	mov	sp, r7
 800bb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb04:	4770      	bx	lr

0800bb06 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800bb06:	b580      	push	{r7, lr}
 800bb08:	b086      	sub	sp, #24
 800bb0a:	af00      	add	r7, sp, #0
 800bb0c:	60f8      	str	r0, [r7, #12]
 800bb0e:	460b      	mov	r3, r1
 800bb10:	607a      	str	r2, [r7, #4]
 800bb12:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 800bb14:	897b      	ldrh	r3, [r7, #10]
 800bb16:	687a      	ldr	r2, [r7, #4]
 800bb18:	4619      	mov	r1, r3
 800bb1a:	68f8      	ldr	r0, [r7, #12]
 800bb1c:	f7ff ffca 	bl	800bab4 <pbuf_skip_const>
 800bb20:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 800bb22:	697b      	ldr	r3, [r7, #20]
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3718      	adds	r7, #24
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}

0800bb2c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b088      	sub	sp, #32
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	60f8      	str	r0, [r7, #12]
 800bb34:	60b9      	str	r1, [r7, #8]
 800bb36:	4613      	mov	r3, r2
 800bb38:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800bb3a:	88fb      	ldrh	r3, [r7, #6]
 800bb3c:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d109      	bne.n	800bb5c <pbuf_take+0x30>
 800bb48:	4b3a      	ldr	r3, [pc, #232]	; (800bc34 <pbuf_take+0x108>)
 800bb4a:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800bb4e:	493a      	ldr	r1, [pc, #232]	; (800bc38 <pbuf_take+0x10c>)
 800bb50:	483a      	ldr	r0, [pc, #232]	; (800bc3c <pbuf_take+0x110>)
 800bb52:	f00b fb09 	bl	8017168 <iprintf>
 800bb56:	f06f 030f 	mvn.w	r3, #15
 800bb5a:	e067      	b.n	800bc2c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d109      	bne.n	800bb76 <pbuf_take+0x4a>
 800bb62:	4b34      	ldr	r3, [pc, #208]	; (800bc34 <pbuf_take+0x108>)
 800bb64:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800bb68:	4935      	ldr	r1, [pc, #212]	; (800bc40 <pbuf_take+0x114>)
 800bb6a:	4834      	ldr	r0, [pc, #208]	; (800bc3c <pbuf_take+0x110>)
 800bb6c:	f00b fafc 	bl	8017168 <iprintf>
 800bb70:	f06f 030f 	mvn.w	r3, #15
 800bb74:	e05a      	b.n	800bc2c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	891b      	ldrh	r3, [r3, #8]
 800bb7a:	88fa      	ldrh	r2, [r7, #6]
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	d909      	bls.n	800bb94 <pbuf_take+0x68>
 800bb80:	4b2c      	ldr	r3, [pc, #176]	; (800bc34 <pbuf_take+0x108>)
 800bb82:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800bb86:	492f      	ldr	r1, [pc, #188]	; (800bc44 <pbuf_take+0x118>)
 800bb88:	482c      	ldr	r0, [pc, #176]	; (800bc3c <pbuf_take+0x110>)
 800bb8a:	f00b faed 	bl	8017168 <iprintf>
 800bb8e:	f04f 33ff 	mov.w	r3, #4294967295
 800bb92:	e04b      	b.n	800bc2c <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d007      	beq.n	800bbaa <pbuf_take+0x7e>
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d004      	beq.n	800bbaa <pbuf_take+0x7e>
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	891b      	ldrh	r3, [r3, #8]
 800bba4:	88fa      	ldrh	r2, [r7, #6]
 800bba6:	429a      	cmp	r2, r3
 800bba8:	d902      	bls.n	800bbb0 <pbuf_take+0x84>
    return ERR_ARG;
 800bbaa:	f06f 030f 	mvn.w	r3, #15
 800bbae:	e03d      	b.n	800bc2c <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	61fb      	str	r3, [r7, #28]
 800bbb4:	e028      	b.n	800bc08 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800bbb6:	69fb      	ldr	r3, [r7, #28]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d106      	bne.n	800bbca <pbuf_take+0x9e>
 800bbbc:	4b1d      	ldr	r3, [pc, #116]	; (800bc34 <pbuf_take+0x108>)
 800bbbe:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800bbc2:	4921      	ldr	r1, [pc, #132]	; (800bc48 <pbuf_take+0x11c>)
 800bbc4:	481d      	ldr	r0, [pc, #116]	; (800bc3c <pbuf_take+0x110>)
 800bbc6:	f00b facf 	bl	8017168 <iprintf>
    buf_copy_len = total_copy_len;
 800bbca:	697b      	ldr	r3, [r7, #20]
 800bbcc:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800bbce:	69fb      	ldr	r3, [r7, #28]
 800bbd0:	895b      	ldrh	r3, [r3, #10]
 800bbd2:	461a      	mov	r2, r3
 800bbd4:	69bb      	ldr	r3, [r7, #24]
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	d902      	bls.n	800bbe0 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800bbda:	69fb      	ldr	r3, [r7, #28]
 800bbdc:	895b      	ldrh	r3, [r3, #10]
 800bbde:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800bbe0:	69fb      	ldr	r3, [r7, #28]
 800bbe2:	6858      	ldr	r0, [r3, #4]
 800bbe4:	68ba      	ldr	r2, [r7, #8]
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	4413      	add	r3, r2
 800bbea:	69ba      	ldr	r2, [r7, #24]
 800bbec:	4619      	mov	r1, r3
 800bbee:	f00b faa5 	bl	801713c <memcpy>
    total_copy_len -= buf_copy_len;
 800bbf2:	697a      	ldr	r2, [r7, #20]
 800bbf4:	69bb      	ldr	r3, [r7, #24]
 800bbf6:	1ad3      	subs	r3, r2, r3
 800bbf8:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800bbfa:	693a      	ldr	r2, [r7, #16]
 800bbfc:	69bb      	ldr	r3, [r7, #24]
 800bbfe:	4413      	add	r3, r2
 800bc00:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800bc02:	69fb      	ldr	r3, [r7, #28]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	61fb      	str	r3, [r7, #28]
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d1d3      	bne.n	800bbb6 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800bc0e:	697b      	ldr	r3, [r7, #20]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d103      	bne.n	800bc1c <pbuf_take+0xf0>
 800bc14:	88fb      	ldrh	r3, [r7, #6]
 800bc16:	693a      	ldr	r2, [r7, #16]
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d006      	beq.n	800bc2a <pbuf_take+0xfe>
 800bc1c:	4b05      	ldr	r3, [pc, #20]	; (800bc34 <pbuf_take+0x108>)
 800bc1e:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800bc22:	490a      	ldr	r1, [pc, #40]	; (800bc4c <pbuf_take+0x120>)
 800bc24:	4805      	ldr	r0, [pc, #20]	; (800bc3c <pbuf_take+0x110>)
 800bc26:	f00b fa9f 	bl	8017168 <iprintf>
  return ERR_OK;
 800bc2a:	2300      	movs	r3, #0
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3720      	adds	r7, #32
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}
 800bc34:	08018ef0 	.word	0x08018ef0
 800bc38:	080192c8 	.word	0x080192c8
 800bc3c:	08018f50 	.word	0x08018f50
 800bc40:	080192e0 	.word	0x080192e0
 800bc44:	080192fc 	.word	0x080192fc
 800bc48:	0801931c 	.word	0x0801931c
 800bc4c:	08019334 	.word	0x08019334

0800bc50 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b088      	sub	sp, #32
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	60f8      	str	r0, [r7, #12]
 800bc58:	60b9      	str	r1, [r7, #8]
 800bc5a:	4611      	mov	r1, r2
 800bc5c:	461a      	mov	r2, r3
 800bc5e:	460b      	mov	r3, r1
 800bc60:	80fb      	strh	r3, [r7, #6]
 800bc62:	4613      	mov	r3, r2
 800bc64:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 800bc66:	f107 0210 	add.w	r2, r7, #16
 800bc6a:	88bb      	ldrh	r3, [r7, #4]
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	68f8      	ldr	r0, [r7, #12]
 800bc70:	f7ff ff49 	bl	800bb06 <pbuf_skip>
 800bc74:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 800bc76:	69fb      	ldr	r3, [r7, #28]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d047      	beq.n	800bd0c <pbuf_take_at+0xbc>
 800bc7c:	69fb      	ldr	r3, [r7, #28]
 800bc7e:	891b      	ldrh	r3, [r3, #8]
 800bc80:	461a      	mov	r2, r3
 800bc82:	8a3b      	ldrh	r3, [r7, #16]
 800bc84:	4619      	mov	r1, r3
 800bc86:	88fb      	ldrh	r3, [r7, #6]
 800bc88:	440b      	add	r3, r1
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	db3e      	blt.n	800bd0c <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 800bc8e:	88fb      	ldrh	r3, [r7, #6]
 800bc90:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 800bc96:	69fb      	ldr	r3, [r7, #28]
 800bc98:	895a      	ldrh	r2, [r3, #10]
 800bc9a:	8a3b      	ldrh	r3, [r7, #16]
 800bc9c:	429a      	cmp	r2, r3
 800bc9e:	d806      	bhi.n	800bcae <pbuf_take_at+0x5e>
 800bca0:	4b1d      	ldr	r3, [pc, #116]	; (800bd18 <pbuf_take_at+0xc8>)
 800bca2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800bca6:	491d      	ldr	r1, [pc, #116]	; (800bd1c <pbuf_take_at+0xcc>)
 800bca8:	481d      	ldr	r0, [pc, #116]	; (800bd20 <pbuf_take_at+0xd0>)
 800bcaa:	f00b fa5d 	bl	8017168 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 800bcae:	69fb      	ldr	r3, [r7, #28]
 800bcb0:	895b      	ldrh	r3, [r3, #10]
 800bcb2:	461a      	mov	r2, r3
 800bcb4:	8a3b      	ldrh	r3, [r7, #16]
 800bcb6:	1ad2      	subs	r2, r2, r3
 800bcb8:	88fb      	ldrh	r3, [r7, #6]
 800bcba:	429a      	cmp	r2, r3
 800bcbc:	da05      	bge.n	800bcca <pbuf_take_at+0x7a>
 800bcbe:	69fb      	ldr	r3, [r7, #28]
 800bcc0:	895a      	ldrh	r2, [r3, #10]
 800bcc2:	8a3b      	ldrh	r3, [r7, #16]
 800bcc4:	1ad3      	subs	r3, r2, r3
 800bcc6:	b29b      	uxth	r3, r3
 800bcc8:	e000      	b.n	800bccc <pbuf_take_at+0x7c>
 800bcca:	88fb      	ldrh	r3, [r7, #6]
 800bccc:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 800bcce:	69fb      	ldr	r3, [r7, #28]
 800bcd0:	685b      	ldr	r3, [r3, #4]
 800bcd2:	8a3a      	ldrh	r2, [r7, #16]
 800bcd4:	4413      	add	r3, r2
 800bcd6:	8a7a      	ldrh	r2, [r7, #18]
 800bcd8:	68b9      	ldr	r1, [r7, #8]
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f00b fa2e 	bl	801713c <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 800bce0:	8b7a      	ldrh	r2, [r7, #26]
 800bce2:	8a7b      	ldrh	r3, [r7, #18]
 800bce4:	1ad3      	subs	r3, r2, r3
 800bce6:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 800bce8:	8a7b      	ldrh	r3, [r7, #18]
 800bcea:	697a      	ldr	r2, [r7, #20]
 800bcec:	4413      	add	r3, r2
 800bcee:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 800bcf0:	8b7b      	ldrh	r3, [r7, #26]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d008      	beq.n	800bd08 <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 800bcf6:	69fb      	ldr	r3, [r7, #28]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	8b7a      	ldrh	r2, [r7, #26]
 800bcfc:	6979      	ldr	r1, [r7, #20]
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f7ff ff14 	bl	800bb2c <pbuf_take>
 800bd04:	4603      	mov	r3, r0
 800bd06:	e003      	b.n	800bd10 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 800bd08:	2300      	movs	r3, #0
 800bd0a:	e001      	b.n	800bd10 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 800bd0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3720      	adds	r7, #32
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}
 800bd18:	08018ef0 	.word	0x08018ef0
 800bd1c:	0801934c 	.word	0x0801934c
 800bd20:	08018f50 	.word	0x08018f50

0800bd24 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b084      	sub	sp, #16
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	603a      	str	r2, [r7, #0]
 800bd2e:	71fb      	strb	r3, [r7, #7]
 800bd30:	460b      	mov	r3, r1
 800bd32:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	8919      	ldrh	r1, [r3, #8]
 800bd38:	88ba      	ldrh	r2, [r7, #4]
 800bd3a:	79fb      	ldrb	r3, [r7, #7]
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	f7ff f95d 	bl	800affc <pbuf_alloc>
 800bd42:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d101      	bne.n	800bd4e <pbuf_clone+0x2a>
    return NULL;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	e011      	b.n	800bd72 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800bd4e:	6839      	ldr	r1, [r7, #0]
 800bd50:	68f8      	ldr	r0, [r7, #12]
 800bd52:	f7ff fd6b 	bl	800b82c <pbuf_copy>
 800bd56:	4603      	mov	r3, r0
 800bd58:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800bd5a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d006      	beq.n	800bd70 <pbuf_clone+0x4c>
 800bd62:	4b06      	ldr	r3, [pc, #24]	; (800bd7c <pbuf_clone+0x58>)
 800bd64:	f240 5224 	movw	r2, #1316	; 0x524
 800bd68:	4905      	ldr	r1, [pc, #20]	; (800bd80 <pbuf_clone+0x5c>)
 800bd6a:	4806      	ldr	r0, [pc, #24]	; (800bd84 <pbuf_clone+0x60>)
 800bd6c:	f00b f9fc 	bl	8017168 <iprintf>
  return q;
 800bd70:	68fb      	ldr	r3, [r7, #12]
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3710      	adds	r7, #16
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}
 800bd7a:	bf00      	nop
 800bd7c:	08018ef0 	.word	0x08018ef0
 800bd80:	08019364 	.word	0x08019364
 800bd84:	08018f50 	.word	0x08018f50

0800bd88 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b084      	sub	sp, #16
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	460b      	mov	r3, r1
 800bd92:	807b      	strh	r3, [r7, #2]
 800bd94:	4613      	mov	r3, r2
 800bd96:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 800bd98:	f107 020a 	add.w	r2, r7, #10
 800bd9c:	887b      	ldrh	r3, [r7, #2]
 800bd9e:	4619      	mov	r1, r3
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f7ff feb0 	bl	800bb06 <pbuf_skip>
 800bda6:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d00a      	beq.n	800bdc4 <pbuf_put_at+0x3c>
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	895a      	ldrh	r2, [r3, #10]
 800bdb2:	897b      	ldrh	r3, [r7, #10]
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	d905      	bls.n	800bdc4 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	685b      	ldr	r3, [r3, #4]
 800bdbc:	897a      	ldrh	r2, [r7, #10]
 800bdbe:	4413      	add	r3, r2
 800bdc0:	787a      	ldrb	r2, [r7, #1]
 800bdc2:	701a      	strb	r2, [r3, #0]
  }
}
 800bdc4:	bf00      	nop
 800bdc6:	3710      	adds	r7, #16
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}

0800bdcc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bdd0:	f00b fa6e 	bl	80172b0 <rand>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	b29b      	uxth	r3, r3
 800bdd8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bddc:	b29b      	uxth	r3, r3
 800bdde:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800bde2:	b29a      	uxth	r2, r3
 800bde4:	4b01      	ldr	r3, [pc, #4]	; (800bdec <tcp_init+0x20>)
 800bde6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bde8:	bf00      	nop
 800bdea:	bd80      	pop	{r7, pc}
 800bdec:	20000068 	.word	0x20000068

0800bdf0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b082      	sub	sp, #8
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	7d1b      	ldrb	r3, [r3, #20]
 800bdfc:	2b01      	cmp	r3, #1
 800bdfe:	d105      	bne.n	800be0c <tcp_free+0x1c>
 800be00:	4b06      	ldr	r3, [pc, #24]	; (800be1c <tcp_free+0x2c>)
 800be02:	22d4      	movs	r2, #212	; 0xd4
 800be04:	4906      	ldr	r1, [pc, #24]	; (800be20 <tcp_free+0x30>)
 800be06:	4807      	ldr	r0, [pc, #28]	; (800be24 <tcp_free+0x34>)
 800be08:	f00b f9ae 	bl	8017168 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800be0c:	6879      	ldr	r1, [r7, #4]
 800be0e:	2001      	movs	r0, #1
 800be10:	f7fe fc32 	bl	800a678 <memp_free>
}
 800be14:	bf00      	nop
 800be16:	3708      	adds	r7, #8
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}
 800be1c:	080193f0 	.word	0x080193f0
 800be20:	08019420 	.word	0x08019420
 800be24:	08019434 	.word	0x08019434

0800be28 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b082      	sub	sp, #8
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	7d1b      	ldrb	r3, [r3, #20]
 800be34:	2b01      	cmp	r3, #1
 800be36:	d105      	bne.n	800be44 <tcp_free_listen+0x1c>
 800be38:	4b06      	ldr	r3, [pc, #24]	; (800be54 <tcp_free_listen+0x2c>)
 800be3a:	22df      	movs	r2, #223	; 0xdf
 800be3c:	4906      	ldr	r1, [pc, #24]	; (800be58 <tcp_free_listen+0x30>)
 800be3e:	4807      	ldr	r0, [pc, #28]	; (800be5c <tcp_free_listen+0x34>)
 800be40:	f00b f992 	bl	8017168 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800be44:	6879      	ldr	r1, [r7, #4]
 800be46:	2002      	movs	r0, #2
 800be48:	f7fe fc16 	bl	800a678 <memp_free>
}
 800be4c:	bf00      	nop
 800be4e:	3708      	adds	r7, #8
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}
 800be54:	080193f0 	.word	0x080193f0
 800be58:	0801945c 	.word	0x0801945c
 800be5c:	08019434 	.word	0x08019434

0800be60 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800be64:	f000 fea2 	bl	800cbac <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800be68:	4b07      	ldr	r3, [pc, #28]	; (800be88 <tcp_tmr+0x28>)
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	3301      	adds	r3, #1
 800be6e:	b2da      	uxtb	r2, r3
 800be70:	4b05      	ldr	r3, [pc, #20]	; (800be88 <tcp_tmr+0x28>)
 800be72:	701a      	strb	r2, [r3, #0]
 800be74:	4b04      	ldr	r3, [pc, #16]	; (800be88 <tcp_tmr+0x28>)
 800be76:	781b      	ldrb	r3, [r3, #0]
 800be78:	f003 0301 	and.w	r3, r3, #1
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d001      	beq.n	800be84 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800be80:	f000 fb54 	bl	800c52c <tcp_slowtmr>
  }
}
 800be84:	bf00      	nop
 800be86:	bd80      	pop	{r7, pc}
 800be88:	2000d9fd 	.word	0x2000d9fd

0800be8c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b084      	sub	sp, #16
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d105      	bne.n	800bea8 <tcp_remove_listener+0x1c>
 800be9c:	4b0d      	ldr	r3, [pc, #52]	; (800bed4 <tcp_remove_listener+0x48>)
 800be9e:	22ff      	movs	r2, #255	; 0xff
 800bea0:	490d      	ldr	r1, [pc, #52]	; (800bed8 <tcp_remove_listener+0x4c>)
 800bea2:	480e      	ldr	r0, [pc, #56]	; (800bedc <tcp_remove_listener+0x50>)
 800bea4:	f00b f960 	bl	8017168 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	60fb      	str	r3, [r7, #12]
 800beac:	e00a      	b.n	800bec4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800beb2:	683a      	ldr	r2, [r7, #0]
 800beb4:	429a      	cmp	r2, r3
 800beb6:	d102      	bne.n	800bebe <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	2200      	movs	r2, #0
 800bebc:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	68db      	ldr	r3, [r3, #12]
 800bec2:	60fb      	str	r3, [r7, #12]
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d1f1      	bne.n	800beae <tcp_remove_listener+0x22>
    }
  }
}
 800beca:	bf00      	nop
 800becc:	bf00      	nop
 800bece:	3710      	adds	r7, #16
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}
 800bed4:	080193f0 	.word	0x080193f0
 800bed8:	08019478 	.word	0x08019478
 800bedc:	08019434 	.word	0x08019434

0800bee0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b084      	sub	sp, #16
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d106      	bne.n	800befc <tcp_listen_closed+0x1c>
 800beee:	4b14      	ldr	r3, [pc, #80]	; (800bf40 <tcp_listen_closed+0x60>)
 800bef0:	f240 1211 	movw	r2, #273	; 0x111
 800bef4:	4913      	ldr	r1, [pc, #76]	; (800bf44 <tcp_listen_closed+0x64>)
 800bef6:	4814      	ldr	r0, [pc, #80]	; (800bf48 <tcp_listen_closed+0x68>)
 800bef8:	f00b f936 	bl	8017168 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	7d1b      	ldrb	r3, [r3, #20]
 800bf00:	2b01      	cmp	r3, #1
 800bf02:	d006      	beq.n	800bf12 <tcp_listen_closed+0x32>
 800bf04:	4b0e      	ldr	r3, [pc, #56]	; (800bf40 <tcp_listen_closed+0x60>)
 800bf06:	f44f 7289 	mov.w	r2, #274	; 0x112
 800bf0a:	4910      	ldr	r1, [pc, #64]	; (800bf4c <tcp_listen_closed+0x6c>)
 800bf0c:	480e      	ldr	r0, [pc, #56]	; (800bf48 <tcp_listen_closed+0x68>)
 800bf0e:	f00b f92b 	bl	8017168 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bf12:	2301      	movs	r3, #1
 800bf14:	60fb      	str	r3, [r7, #12]
 800bf16:	e00b      	b.n	800bf30 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800bf18:	4a0d      	ldr	r2, [pc, #52]	; (800bf50 <tcp_listen_closed+0x70>)
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	6879      	ldr	r1, [r7, #4]
 800bf24:	4618      	mov	r0, r3
 800bf26:	f7ff ffb1 	bl	800be8c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	3301      	adds	r3, #1
 800bf2e:	60fb      	str	r3, [r7, #12]
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	2b03      	cmp	r3, #3
 800bf34:	d9f0      	bls.n	800bf18 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800bf36:	bf00      	nop
 800bf38:	bf00      	nop
 800bf3a:	3710      	adds	r7, #16
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}
 800bf40:	080193f0 	.word	0x080193f0
 800bf44:	080194a0 	.word	0x080194a0
 800bf48:	08019434 	.word	0x08019434
 800bf4c:	080194ac 	.word	0x080194ac
 800bf50:	0801d5d0 	.word	0x0801d5d0

0800bf54 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800bf54:	b5b0      	push	{r4, r5, r7, lr}
 800bf56:	b088      	sub	sp, #32
 800bf58:	af04      	add	r7, sp, #16
 800bf5a:	6078      	str	r0, [r7, #4]
 800bf5c:	460b      	mov	r3, r1
 800bf5e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d106      	bne.n	800bf74 <tcp_close_shutdown+0x20>
 800bf66:	4b63      	ldr	r3, [pc, #396]	; (800c0f4 <tcp_close_shutdown+0x1a0>)
 800bf68:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800bf6c:	4962      	ldr	r1, [pc, #392]	; (800c0f8 <tcp_close_shutdown+0x1a4>)
 800bf6e:	4863      	ldr	r0, [pc, #396]	; (800c0fc <tcp_close_shutdown+0x1a8>)
 800bf70:	f00b f8fa 	bl	8017168 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800bf74:	78fb      	ldrb	r3, [r7, #3]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d066      	beq.n	800c048 <tcp_close_shutdown+0xf4>
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	7d1b      	ldrb	r3, [r3, #20]
 800bf7e:	2b04      	cmp	r3, #4
 800bf80:	d003      	beq.n	800bf8a <tcp_close_shutdown+0x36>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	7d1b      	ldrb	r3, [r3, #20]
 800bf86:	2b07      	cmp	r3, #7
 800bf88:	d15e      	bne.n	800c048 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d104      	bne.n	800bf9c <tcp_close_shutdown+0x48>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf96:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bf9a:	d055      	beq.n	800c048 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	8b5b      	ldrh	r3, [r3, #26]
 800bfa0:	f003 0310 	and.w	r3, r3, #16
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d106      	bne.n	800bfb6 <tcp_close_shutdown+0x62>
 800bfa8:	4b52      	ldr	r3, [pc, #328]	; (800c0f4 <tcp_close_shutdown+0x1a0>)
 800bfaa:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800bfae:	4954      	ldr	r1, [pc, #336]	; (800c100 <tcp_close_shutdown+0x1ac>)
 800bfb0:	4852      	ldr	r0, [pc, #328]	; (800c0fc <tcp_close_shutdown+0x1a8>)
 800bfb2:	f00b f8d9 	bl	8017168 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800bfbe:	687d      	ldr	r5, [r7, #4]
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	3304      	adds	r3, #4
 800bfc4:	687a      	ldr	r2, [r7, #4]
 800bfc6:	8ad2      	ldrh	r2, [r2, #22]
 800bfc8:	6879      	ldr	r1, [r7, #4]
 800bfca:	8b09      	ldrh	r1, [r1, #24]
 800bfcc:	9102      	str	r1, [sp, #8]
 800bfce:	9201      	str	r2, [sp, #4]
 800bfd0:	9300      	str	r3, [sp, #0]
 800bfd2:	462b      	mov	r3, r5
 800bfd4:	4622      	mov	r2, r4
 800bfd6:	4601      	mov	r1, r0
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f004 fea9 	bl	8010d30 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f001 f8c6 	bl	800d170 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800bfe4:	4b47      	ldr	r3, [pc, #284]	; (800c104 <tcp_close_shutdown+0x1b0>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	687a      	ldr	r2, [r7, #4]
 800bfea:	429a      	cmp	r2, r3
 800bfec:	d105      	bne.n	800bffa <tcp_close_shutdown+0xa6>
 800bfee:	4b45      	ldr	r3, [pc, #276]	; (800c104 <tcp_close_shutdown+0x1b0>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	68db      	ldr	r3, [r3, #12]
 800bff4:	4a43      	ldr	r2, [pc, #268]	; (800c104 <tcp_close_shutdown+0x1b0>)
 800bff6:	6013      	str	r3, [r2, #0]
 800bff8:	e013      	b.n	800c022 <tcp_close_shutdown+0xce>
 800bffa:	4b42      	ldr	r3, [pc, #264]	; (800c104 <tcp_close_shutdown+0x1b0>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	60fb      	str	r3, [r7, #12]
 800c000:	e00c      	b.n	800c01c <tcp_close_shutdown+0xc8>
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	68db      	ldr	r3, [r3, #12]
 800c006:	687a      	ldr	r2, [r7, #4]
 800c008:	429a      	cmp	r2, r3
 800c00a:	d104      	bne.n	800c016 <tcp_close_shutdown+0xc2>
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	68da      	ldr	r2, [r3, #12]
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	60da      	str	r2, [r3, #12]
 800c014:	e005      	b.n	800c022 <tcp_close_shutdown+0xce>
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	68db      	ldr	r3, [r3, #12]
 800c01a:	60fb      	str	r3, [r7, #12]
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d1ef      	bne.n	800c002 <tcp_close_shutdown+0xae>
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2200      	movs	r2, #0
 800c026:	60da      	str	r2, [r3, #12]
 800c028:	4b37      	ldr	r3, [pc, #220]	; (800c108 <tcp_close_shutdown+0x1b4>)
 800c02a:	2201      	movs	r2, #1
 800c02c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c02e:	4b37      	ldr	r3, [pc, #220]	; (800c10c <tcp_close_shutdown+0x1b8>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	687a      	ldr	r2, [r7, #4]
 800c034:	429a      	cmp	r2, r3
 800c036:	d102      	bne.n	800c03e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c038:	f003 fd64 	bl	800fb04 <tcp_trigger_input_pcb_close>
 800c03c:	e002      	b.n	800c044 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f7ff fed6 	bl	800bdf0 <tcp_free>
      }
      return ERR_OK;
 800c044:	2300      	movs	r3, #0
 800c046:	e050      	b.n	800c0ea <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	7d1b      	ldrb	r3, [r3, #20]
 800c04c:	2b02      	cmp	r3, #2
 800c04e:	d03b      	beq.n	800c0c8 <tcp_close_shutdown+0x174>
 800c050:	2b02      	cmp	r3, #2
 800c052:	dc44      	bgt.n	800c0de <tcp_close_shutdown+0x18a>
 800c054:	2b00      	cmp	r3, #0
 800c056:	d002      	beq.n	800c05e <tcp_close_shutdown+0x10a>
 800c058:	2b01      	cmp	r3, #1
 800c05a:	d02a      	beq.n	800c0b2 <tcp_close_shutdown+0x15e>
 800c05c:	e03f      	b.n	800c0de <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	8adb      	ldrh	r3, [r3, #22]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d021      	beq.n	800c0aa <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c066:	4b2a      	ldr	r3, [pc, #168]	; (800c110 <tcp_close_shutdown+0x1bc>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	687a      	ldr	r2, [r7, #4]
 800c06c:	429a      	cmp	r2, r3
 800c06e:	d105      	bne.n	800c07c <tcp_close_shutdown+0x128>
 800c070:	4b27      	ldr	r3, [pc, #156]	; (800c110 <tcp_close_shutdown+0x1bc>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	68db      	ldr	r3, [r3, #12]
 800c076:	4a26      	ldr	r2, [pc, #152]	; (800c110 <tcp_close_shutdown+0x1bc>)
 800c078:	6013      	str	r3, [r2, #0]
 800c07a:	e013      	b.n	800c0a4 <tcp_close_shutdown+0x150>
 800c07c:	4b24      	ldr	r3, [pc, #144]	; (800c110 <tcp_close_shutdown+0x1bc>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	60bb      	str	r3, [r7, #8]
 800c082:	e00c      	b.n	800c09e <tcp_close_shutdown+0x14a>
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	68db      	ldr	r3, [r3, #12]
 800c088:	687a      	ldr	r2, [r7, #4]
 800c08a:	429a      	cmp	r2, r3
 800c08c:	d104      	bne.n	800c098 <tcp_close_shutdown+0x144>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	68da      	ldr	r2, [r3, #12]
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	60da      	str	r2, [r3, #12]
 800c096:	e005      	b.n	800c0a4 <tcp_close_shutdown+0x150>
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	68db      	ldr	r3, [r3, #12]
 800c09c:	60bb      	str	r3, [r7, #8]
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d1ef      	bne.n	800c084 <tcp_close_shutdown+0x130>
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f7ff fea0 	bl	800bdf0 <tcp_free>
      break;
 800c0b0:	e01a      	b.n	800c0e8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f7ff ff14 	bl	800bee0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c0b8:	6879      	ldr	r1, [r7, #4]
 800c0ba:	4816      	ldr	r0, [pc, #88]	; (800c114 <tcp_close_shutdown+0x1c0>)
 800c0bc:	f001 f8a8 	bl	800d210 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f7ff feb1 	bl	800be28 <tcp_free_listen>
      break;
 800c0c6:	e00f      	b.n	800c0e8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c0c8:	6879      	ldr	r1, [r7, #4]
 800c0ca:	480e      	ldr	r0, [pc, #56]	; (800c104 <tcp_close_shutdown+0x1b0>)
 800c0cc:	f001 f8a0 	bl	800d210 <tcp_pcb_remove>
 800c0d0:	4b0d      	ldr	r3, [pc, #52]	; (800c108 <tcp_close_shutdown+0x1b4>)
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f7ff fe8a 	bl	800bdf0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c0dc:	e004      	b.n	800c0e8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f000 f81a 	bl	800c118 <tcp_close_shutdown_fin>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	e000      	b.n	800c0ea <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800c0e8:	2300      	movs	r3, #0
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	3710      	adds	r7, #16
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bdb0      	pop	{r4, r5, r7, pc}
 800c0f2:	bf00      	nop
 800c0f4:	080193f0 	.word	0x080193f0
 800c0f8:	080194c4 	.word	0x080194c4
 800c0fc:	08019434 	.word	0x08019434
 800c100:	080194e4 	.word	0x080194e4
 800c104:	2000d9f4 	.word	0x2000d9f4
 800c108:	2000d9fc 	.word	0x2000d9fc
 800c10c:	2000da38 	.word	0x2000da38
 800c110:	2000d9ec 	.word	0x2000d9ec
 800c114:	2000d9f0 	.word	0x2000d9f0

0800c118 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b084      	sub	sp, #16
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d106      	bne.n	800c134 <tcp_close_shutdown_fin+0x1c>
 800c126:	4b2e      	ldr	r3, [pc, #184]	; (800c1e0 <tcp_close_shutdown_fin+0xc8>)
 800c128:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800c12c:	492d      	ldr	r1, [pc, #180]	; (800c1e4 <tcp_close_shutdown_fin+0xcc>)
 800c12e:	482e      	ldr	r0, [pc, #184]	; (800c1e8 <tcp_close_shutdown_fin+0xd0>)
 800c130:	f00b f81a 	bl	8017168 <iprintf>

  switch (pcb->state) {
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	7d1b      	ldrb	r3, [r3, #20]
 800c138:	2b07      	cmp	r3, #7
 800c13a:	d020      	beq.n	800c17e <tcp_close_shutdown_fin+0x66>
 800c13c:	2b07      	cmp	r3, #7
 800c13e:	dc2b      	bgt.n	800c198 <tcp_close_shutdown_fin+0x80>
 800c140:	2b03      	cmp	r3, #3
 800c142:	d002      	beq.n	800c14a <tcp_close_shutdown_fin+0x32>
 800c144:	2b04      	cmp	r3, #4
 800c146:	d00d      	beq.n	800c164 <tcp_close_shutdown_fin+0x4c>
 800c148:	e026      	b.n	800c198 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f003 fef2 	bl	800ff34 <tcp_send_fin>
 800c150:	4603      	mov	r3, r0
 800c152:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c154:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d11f      	bne.n	800c19c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2205      	movs	r2, #5
 800c160:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c162:	e01b      	b.n	800c19c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f003 fee5 	bl	800ff34 <tcp_send_fin>
 800c16a:	4603      	mov	r3, r0
 800c16c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c16e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d114      	bne.n	800c1a0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2205      	movs	r2, #5
 800c17a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c17c:	e010      	b.n	800c1a0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f003 fed8 	bl	800ff34 <tcp_send_fin>
 800c184:	4603      	mov	r3, r0
 800c186:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c188:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d109      	bne.n	800c1a4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2209      	movs	r2, #9
 800c194:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c196:	e005      	b.n	800c1a4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c198:	2300      	movs	r3, #0
 800c19a:	e01c      	b.n	800c1d6 <tcp_close_shutdown_fin+0xbe>
      break;
 800c19c:	bf00      	nop
 800c19e:	e002      	b.n	800c1a6 <tcp_close_shutdown_fin+0x8e>
      break;
 800c1a0:	bf00      	nop
 800c1a2:	e000      	b.n	800c1a6 <tcp_close_shutdown_fin+0x8e>
      break;
 800c1a4:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c1a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d103      	bne.n	800c1b6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f003 fffe 	bl	80101b0 <tcp_output>
 800c1b4:	e00d      	b.n	800c1d2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c1b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1be:	d108      	bne.n	800c1d2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	8b5b      	ldrh	r3, [r3, #26]
 800c1c4:	f043 0308 	orr.w	r3, r3, #8
 800c1c8:	b29a      	uxth	r2, r3
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	e001      	b.n	800c1d6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c1d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	3710      	adds	r7, #16
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}
 800c1de:	bf00      	nop
 800c1e0:	080193f0 	.word	0x080193f0
 800c1e4:	080194a0 	.word	0x080194a0
 800c1e8:	08019434 	.word	0x08019434

0800c1ec <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b082      	sub	sp, #8
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d109      	bne.n	800c20e <tcp_close+0x22>
 800c1fa:	4b0f      	ldr	r3, [pc, #60]	; (800c238 <tcp_close+0x4c>)
 800c1fc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800c200:	490e      	ldr	r1, [pc, #56]	; (800c23c <tcp_close+0x50>)
 800c202:	480f      	ldr	r0, [pc, #60]	; (800c240 <tcp_close+0x54>)
 800c204:	f00a ffb0 	bl	8017168 <iprintf>
 800c208:	f06f 030f 	mvn.w	r3, #15
 800c20c:	e00f      	b.n	800c22e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	7d1b      	ldrb	r3, [r3, #20]
 800c212:	2b01      	cmp	r3, #1
 800c214:	d006      	beq.n	800c224 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	8b5b      	ldrh	r3, [r3, #26]
 800c21a:	f043 0310 	orr.w	r3, r3, #16
 800c21e:	b29a      	uxth	r2, r3
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c224:	2101      	movs	r1, #1
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f7ff fe94 	bl	800bf54 <tcp_close_shutdown>
 800c22c:	4603      	mov	r3, r0
}
 800c22e:	4618      	mov	r0, r3
 800c230:	3708      	adds	r7, #8
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}
 800c236:	bf00      	nop
 800c238:	080193f0 	.word	0x080193f0
 800c23c:	08019500 	.word	0x08019500
 800c240:	08019434 	.word	0x08019434

0800c244 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b08e      	sub	sp, #56	; 0x38
 800c248:	af04      	add	r7, sp, #16
 800c24a:	6078      	str	r0, [r7, #4]
 800c24c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d107      	bne.n	800c264 <tcp_abandon+0x20>
 800c254:	4b52      	ldr	r3, [pc, #328]	; (800c3a0 <tcp_abandon+0x15c>)
 800c256:	f240 223d 	movw	r2, #573	; 0x23d
 800c25a:	4952      	ldr	r1, [pc, #328]	; (800c3a4 <tcp_abandon+0x160>)
 800c25c:	4852      	ldr	r0, [pc, #328]	; (800c3a8 <tcp_abandon+0x164>)
 800c25e:	f00a ff83 	bl	8017168 <iprintf>
 800c262:	e099      	b.n	800c398 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	7d1b      	ldrb	r3, [r3, #20]
 800c268:	2b01      	cmp	r3, #1
 800c26a:	d106      	bne.n	800c27a <tcp_abandon+0x36>
 800c26c:	4b4c      	ldr	r3, [pc, #304]	; (800c3a0 <tcp_abandon+0x15c>)
 800c26e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800c272:	494e      	ldr	r1, [pc, #312]	; (800c3ac <tcp_abandon+0x168>)
 800c274:	484c      	ldr	r0, [pc, #304]	; (800c3a8 <tcp_abandon+0x164>)
 800c276:	f00a ff77 	bl	8017168 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	7d1b      	ldrb	r3, [r3, #20]
 800c27e:	2b0a      	cmp	r3, #10
 800c280:	d107      	bne.n	800c292 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c282:	6879      	ldr	r1, [r7, #4]
 800c284:	484a      	ldr	r0, [pc, #296]	; (800c3b0 <tcp_abandon+0x16c>)
 800c286:	f000 ffc3 	bl	800d210 <tcp_pcb_remove>
    tcp_free(pcb);
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f7ff fdb0 	bl	800bdf0 <tcp_free>
 800c290:	e082      	b.n	800c398 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c292:	2300      	movs	r3, #0
 800c294:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800c296:	2300      	movs	r3, #0
 800c298:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c29e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2a4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2ac:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	691b      	ldr	r3, [r3, #16]
 800c2b2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	7d1b      	ldrb	r3, [r3, #20]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d126      	bne.n	800c30a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	8adb      	ldrh	r3, [r3, #22]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d02e      	beq.n	800c322 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c2c4:	4b3b      	ldr	r3, [pc, #236]	; (800c3b4 <tcp_abandon+0x170>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	687a      	ldr	r2, [r7, #4]
 800c2ca:	429a      	cmp	r2, r3
 800c2cc:	d105      	bne.n	800c2da <tcp_abandon+0x96>
 800c2ce:	4b39      	ldr	r3, [pc, #228]	; (800c3b4 <tcp_abandon+0x170>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	68db      	ldr	r3, [r3, #12]
 800c2d4:	4a37      	ldr	r2, [pc, #220]	; (800c3b4 <tcp_abandon+0x170>)
 800c2d6:	6013      	str	r3, [r2, #0]
 800c2d8:	e013      	b.n	800c302 <tcp_abandon+0xbe>
 800c2da:	4b36      	ldr	r3, [pc, #216]	; (800c3b4 <tcp_abandon+0x170>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	61fb      	str	r3, [r7, #28]
 800c2e0:	e00c      	b.n	800c2fc <tcp_abandon+0xb8>
 800c2e2:	69fb      	ldr	r3, [r7, #28]
 800c2e4:	68db      	ldr	r3, [r3, #12]
 800c2e6:	687a      	ldr	r2, [r7, #4]
 800c2e8:	429a      	cmp	r2, r3
 800c2ea:	d104      	bne.n	800c2f6 <tcp_abandon+0xb2>
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	68da      	ldr	r2, [r3, #12]
 800c2f0:	69fb      	ldr	r3, [r7, #28]
 800c2f2:	60da      	str	r2, [r3, #12]
 800c2f4:	e005      	b.n	800c302 <tcp_abandon+0xbe>
 800c2f6:	69fb      	ldr	r3, [r7, #28]
 800c2f8:	68db      	ldr	r3, [r3, #12]
 800c2fa:	61fb      	str	r3, [r7, #28]
 800c2fc:	69fb      	ldr	r3, [r7, #28]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d1ef      	bne.n	800c2e2 <tcp_abandon+0x9e>
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	2200      	movs	r2, #0
 800c306:	60da      	str	r2, [r3, #12]
 800c308:	e00b      	b.n	800c322 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	8adb      	ldrh	r3, [r3, #22]
 800c312:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c314:	6879      	ldr	r1, [r7, #4]
 800c316:	4828      	ldr	r0, [pc, #160]	; (800c3b8 <tcp_abandon+0x174>)
 800c318:	f000 ff7a 	bl	800d210 <tcp_pcb_remove>
 800c31c:	4b27      	ldr	r3, [pc, #156]	; (800c3bc <tcp_abandon+0x178>)
 800c31e:	2201      	movs	r2, #1
 800c320:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c326:	2b00      	cmp	r3, #0
 800c328:	d004      	beq.n	800c334 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c32e:	4618      	mov	r0, r3
 800c330:	f000 fd1c 	bl	800cd6c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d004      	beq.n	800c346 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c340:	4618      	mov	r0, r3
 800c342:	f000 fd13 	bl	800cd6c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d004      	beq.n	800c358 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c352:	4618      	mov	r0, r3
 800c354:	f000 fd0a 	bl	800cd6c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d00e      	beq.n	800c37c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c35e:	6879      	ldr	r1, [r7, #4]
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	3304      	adds	r3, #4
 800c364:	687a      	ldr	r2, [r7, #4]
 800c366:	8b12      	ldrh	r2, [r2, #24]
 800c368:	9202      	str	r2, [sp, #8]
 800c36a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c36c:	9201      	str	r2, [sp, #4]
 800c36e:	9300      	str	r3, [sp, #0]
 800c370:	460b      	mov	r3, r1
 800c372:	697a      	ldr	r2, [r7, #20]
 800c374:	69b9      	ldr	r1, [r7, #24]
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f004 fcda 	bl	8010d30 <tcp_rst>
    }
    last_state = pcb->state;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	7d1b      	ldrb	r3, [r3, #20]
 800c380:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f7ff fd34 	bl	800bdf0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d004      	beq.n	800c398 <tcp_abandon+0x154>
 800c38e:	693b      	ldr	r3, [r7, #16]
 800c390:	f06f 010c 	mvn.w	r1, #12
 800c394:	68f8      	ldr	r0, [r7, #12]
 800c396:	4798      	blx	r3
  }
}
 800c398:	3728      	adds	r7, #40	; 0x28
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}
 800c39e:	bf00      	nop
 800c3a0:	080193f0 	.word	0x080193f0
 800c3a4:	08019534 	.word	0x08019534
 800c3a8:	08019434 	.word	0x08019434
 800c3ac:	08019550 	.word	0x08019550
 800c3b0:	2000d9f8 	.word	0x2000d9f8
 800c3b4:	2000d9ec 	.word	0x2000d9ec
 800c3b8:	2000d9f4 	.word	0x2000d9f4
 800c3bc:	2000d9fc 	.word	0x2000d9fc

0800c3c0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b082      	sub	sp, #8
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c3c8:	2101      	movs	r1, #1
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f7ff ff3a 	bl	800c244 <tcp_abandon>
}
 800c3d0:	bf00      	nop
 800c3d2:	3708      	adds	r7, #8
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}

0800c3d8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b084      	sub	sp, #16
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d106      	bne.n	800c3f4 <tcp_update_rcv_ann_wnd+0x1c>
 800c3e6:	4b25      	ldr	r3, [pc, #148]	; (800c47c <tcp_update_rcv_ann_wnd+0xa4>)
 800c3e8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c3ec:	4924      	ldr	r1, [pc, #144]	; (800c480 <tcp_update_rcv_ann_wnd+0xa8>)
 800c3ee:	4825      	ldr	r0, [pc, #148]	; (800c484 <tcp_update_rcv_ann_wnd+0xac>)
 800c3f0:	f00a feba 	bl	8017168 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3f8:	687a      	ldr	r2, [r7, #4]
 800c3fa:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c3fc:	4413      	add	r3, r2
 800c3fe:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c404:	687a      	ldr	r2, [r7, #4]
 800c406:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c408:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c40c:	bf28      	it	cs
 800c40e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c412:	b292      	uxth	r2, r2
 800c414:	4413      	add	r3, r2
 800c416:	68fa      	ldr	r2, [r7, #12]
 800c418:	1ad3      	subs	r3, r2, r3
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	db08      	blt.n	800c430 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c42a:	68fa      	ldr	r2, [r7, #12]
 800c42c:	1ad3      	subs	r3, r2, r3
 800c42e:	e020      	b.n	800c472 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c438:	1ad3      	subs	r3, r2, r3
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	dd03      	ble.n	800c446 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2200      	movs	r2, #0
 800c442:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c444:	e014      	b.n	800c470 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c44e:	1ad3      	subs	r3, r2, r3
 800c450:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c458:	d306      	bcc.n	800c468 <tcp_update_rcv_ann_wnd+0x90>
 800c45a:	4b08      	ldr	r3, [pc, #32]	; (800c47c <tcp_update_rcv_ann_wnd+0xa4>)
 800c45c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c460:	4909      	ldr	r1, [pc, #36]	; (800c488 <tcp_update_rcv_ann_wnd+0xb0>)
 800c462:	4808      	ldr	r0, [pc, #32]	; (800c484 <tcp_update_rcv_ann_wnd+0xac>)
 800c464:	f00a fe80 	bl	8017168 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	b29a      	uxth	r2, r3
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800c470:	2300      	movs	r3, #0
  }
}
 800c472:	4618      	mov	r0, r3
 800c474:	3710      	adds	r7, #16
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}
 800c47a:	bf00      	nop
 800c47c:	080193f0 	.word	0x080193f0
 800c480:	0801964c 	.word	0x0801964c
 800c484:	08019434 	.word	0x08019434
 800c488:	08019670 	.word	0x08019670

0800c48c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b084      	sub	sp, #16
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	460b      	mov	r3, r1
 800c496:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d107      	bne.n	800c4ae <tcp_recved+0x22>
 800c49e:	4b1f      	ldr	r3, [pc, #124]	; (800c51c <tcp_recved+0x90>)
 800c4a0:	f240 32cf 	movw	r2, #975	; 0x3cf
 800c4a4:	491e      	ldr	r1, [pc, #120]	; (800c520 <tcp_recved+0x94>)
 800c4a6:	481f      	ldr	r0, [pc, #124]	; (800c524 <tcp_recved+0x98>)
 800c4a8:	f00a fe5e 	bl	8017168 <iprintf>
 800c4ac:	e032      	b.n	800c514 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	7d1b      	ldrb	r3, [r3, #20]
 800c4b2:	2b01      	cmp	r3, #1
 800c4b4:	d106      	bne.n	800c4c4 <tcp_recved+0x38>
 800c4b6:	4b19      	ldr	r3, [pc, #100]	; (800c51c <tcp_recved+0x90>)
 800c4b8:	f240 32d2 	movw	r2, #978	; 0x3d2
 800c4bc:	491a      	ldr	r1, [pc, #104]	; (800c528 <tcp_recved+0x9c>)
 800c4be:	4819      	ldr	r0, [pc, #100]	; (800c524 <tcp_recved+0x98>)
 800c4c0:	f00a fe52 	bl	8017168 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c4c8:	887b      	ldrh	r3, [r7, #2]
 800c4ca:	4413      	add	r3, r2
 800c4cc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c4ce:	89fb      	ldrh	r3, [r7, #14]
 800c4d0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c4d4:	d804      	bhi.n	800c4e0 <tcp_recved+0x54>
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4da:	89fa      	ldrh	r2, [r7, #14]
 800c4dc:	429a      	cmp	r2, r3
 800c4de:	d204      	bcs.n	800c4ea <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c4e6:	851a      	strh	r2, [r3, #40]	; 0x28
 800c4e8:	e002      	b.n	800c4f0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	89fa      	ldrh	r2, [r7, #14]
 800c4ee:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c4f0:	6878      	ldr	r0, [r7, #4]
 800c4f2:	f7ff ff71 	bl	800c3d8 <tcp_update_rcv_ann_wnd>
 800c4f6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c4fe:	d309      	bcc.n	800c514 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	8b5b      	ldrh	r3, [r3, #26]
 800c504:	f043 0302 	orr.w	r3, r3, #2
 800c508:	b29a      	uxth	r2, r3
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f003 fe4e 	bl	80101b0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c514:	3710      	adds	r7, #16
 800c516:	46bd      	mov	sp, r7
 800c518:	bd80      	pop	{r7, pc}
 800c51a:	bf00      	nop
 800c51c:	080193f0 	.word	0x080193f0
 800c520:	0801968c 	.word	0x0801968c
 800c524:	08019434 	.word	0x08019434
 800c528:	080196a4 	.word	0x080196a4

0800c52c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c52c:	b5b0      	push	{r4, r5, r7, lr}
 800c52e:	b090      	sub	sp, #64	; 0x40
 800c530:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c532:	2300      	movs	r3, #0
 800c534:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800c538:	4b94      	ldr	r3, [pc, #592]	; (800c78c <tcp_slowtmr+0x260>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	3301      	adds	r3, #1
 800c53e:	4a93      	ldr	r2, [pc, #588]	; (800c78c <tcp_slowtmr+0x260>)
 800c540:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c542:	4b93      	ldr	r3, [pc, #588]	; (800c790 <tcp_slowtmr+0x264>)
 800c544:	781b      	ldrb	r3, [r3, #0]
 800c546:	3301      	adds	r3, #1
 800c548:	b2da      	uxtb	r2, r3
 800c54a:	4b91      	ldr	r3, [pc, #580]	; (800c790 <tcp_slowtmr+0x264>)
 800c54c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800c54e:	2300      	movs	r3, #0
 800c550:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800c552:	4b90      	ldr	r3, [pc, #576]	; (800c794 <tcp_slowtmr+0x268>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800c558:	e29f      	b.n	800ca9a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c55c:	7d1b      	ldrb	r3, [r3, #20]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d106      	bne.n	800c570 <tcp_slowtmr+0x44>
 800c562:	4b8d      	ldr	r3, [pc, #564]	; (800c798 <tcp_slowtmr+0x26c>)
 800c564:	f240 42be 	movw	r2, #1214	; 0x4be
 800c568:	498c      	ldr	r1, [pc, #560]	; (800c79c <tcp_slowtmr+0x270>)
 800c56a:	488d      	ldr	r0, [pc, #564]	; (800c7a0 <tcp_slowtmr+0x274>)
 800c56c:	f00a fdfc 	bl	8017168 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c572:	7d1b      	ldrb	r3, [r3, #20]
 800c574:	2b01      	cmp	r3, #1
 800c576:	d106      	bne.n	800c586 <tcp_slowtmr+0x5a>
 800c578:	4b87      	ldr	r3, [pc, #540]	; (800c798 <tcp_slowtmr+0x26c>)
 800c57a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800c57e:	4989      	ldr	r1, [pc, #548]	; (800c7a4 <tcp_slowtmr+0x278>)
 800c580:	4887      	ldr	r0, [pc, #540]	; (800c7a0 <tcp_slowtmr+0x274>)
 800c582:	f00a fdf1 	bl	8017168 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c588:	7d1b      	ldrb	r3, [r3, #20]
 800c58a:	2b0a      	cmp	r3, #10
 800c58c:	d106      	bne.n	800c59c <tcp_slowtmr+0x70>
 800c58e:	4b82      	ldr	r3, [pc, #520]	; (800c798 <tcp_slowtmr+0x26c>)
 800c590:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800c594:	4984      	ldr	r1, [pc, #528]	; (800c7a8 <tcp_slowtmr+0x27c>)
 800c596:	4882      	ldr	r0, [pc, #520]	; (800c7a0 <tcp_slowtmr+0x274>)
 800c598:	f00a fde6 	bl	8017168 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c59e:	7f9a      	ldrb	r2, [r3, #30]
 800c5a0:	4b7b      	ldr	r3, [pc, #492]	; (800c790 <tcp_slowtmr+0x264>)
 800c5a2:	781b      	ldrb	r3, [r3, #0]
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d105      	bne.n	800c5b4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800c5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5aa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ae:	68db      	ldr	r3, [r3, #12]
 800c5b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800c5b2:	e272      	b.n	800ca9a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800c5b4:	4b76      	ldr	r3, [pc, #472]	; (800c790 <tcp_slowtmr+0x264>)
 800c5b6:	781a      	ldrb	r2, [r3, #0]
 800c5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ba:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800c5bc:	2300      	movs	r3, #0
 800c5be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ca:	7d1b      	ldrb	r3, [r3, #20]
 800c5cc:	2b02      	cmp	r3, #2
 800c5ce:	d10a      	bne.n	800c5e6 <tcp_slowtmr+0xba>
 800c5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c5d6:	2b05      	cmp	r3, #5
 800c5d8:	d905      	bls.n	800c5e6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800c5da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5de:	3301      	adds	r3, #1
 800c5e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 800c5e4:	e11e      	b.n	800c824 <tcp_slowtmr+0x2f8>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c5ec:	2b0b      	cmp	r3, #11
 800c5ee:	d905      	bls.n	800c5fc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800c5f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c5fa:	e113      	b.n	800c824 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800c5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5fe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c602:	2b00      	cmp	r3, #0
 800c604:	d075      	beq.n	800c6f2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d006      	beq.n	800c61c <tcp_slowtmr+0xf0>
 800c60e:	4b62      	ldr	r3, [pc, #392]	; (800c798 <tcp_slowtmr+0x26c>)
 800c610:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800c614:	4965      	ldr	r1, [pc, #404]	; (800c7ac <tcp_slowtmr+0x280>)
 800c616:	4862      	ldr	r0, [pc, #392]	; (800c7a0 <tcp_slowtmr+0x274>)
 800c618:	f00a fda6 	bl	8017168 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c61e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c620:	2b00      	cmp	r3, #0
 800c622:	d106      	bne.n	800c632 <tcp_slowtmr+0x106>
 800c624:	4b5c      	ldr	r3, [pc, #368]	; (800c798 <tcp_slowtmr+0x26c>)
 800c626:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800c62a:	4961      	ldr	r1, [pc, #388]	; (800c7b0 <tcp_slowtmr+0x284>)
 800c62c:	485c      	ldr	r0, [pc, #368]	; (800c7a0 <tcp_slowtmr+0x274>)
 800c62e:	f00a fd9b 	bl	8017168 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c634:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c638:	2b0b      	cmp	r3, #11
 800c63a:	d905      	bls.n	800c648 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800c63c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c640:	3301      	adds	r3, #1
 800c642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c646:	e0ed      	b.n	800c824 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c64a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c64e:	3b01      	subs	r3, #1
 800c650:	4a58      	ldr	r2, [pc, #352]	; (800c7b4 <tcp_slowtmr+0x288>)
 800c652:	5cd3      	ldrb	r3, [r2, r3]
 800c654:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c658:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c65c:	7c7a      	ldrb	r2, [r7, #17]
 800c65e:	429a      	cmp	r2, r3
 800c660:	d907      	bls.n	800c672 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800c662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c664:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c668:	3301      	adds	r3, #1
 800c66a:	b2da      	uxtb	r2, r3
 800c66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c66e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800c672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c674:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c678:	7c7a      	ldrb	r2, [r7, #17]
 800c67a:	429a      	cmp	r2, r3
 800c67c:	f200 80d2 	bhi.w	800c824 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800c680:	2301      	movs	r3, #1
 800c682:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800c684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c686:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d108      	bne.n	800c6a0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c68e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c690:	f004 fc42 	bl	8010f18 <tcp_zero_window_probe>
 800c694:	4603      	mov	r3, r0
 800c696:	2b00      	cmp	r3, #0
 800c698:	d014      	beq.n	800c6c4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800c69a:	2300      	movs	r3, #0
 800c69c:	623b      	str	r3, [r7, #32]
 800c69e:	e011      	b.n	800c6c4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c6a6:	4619      	mov	r1, r3
 800c6a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c6aa:	f003 faf7 	bl	800fc9c <tcp_split_unsent_seg>
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d107      	bne.n	800c6c4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800c6b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c6b6:	f003 fd7b 	bl	80101b0 <tcp_output>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d101      	bne.n	800c6c4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800c6c4:	6a3b      	ldr	r3, [r7, #32]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	f000 80ac 	beq.w	800c824 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800c6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6d6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c6da:	2b06      	cmp	r3, #6
 800c6dc:	f200 80a2 	bhi.w	800c824 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800c6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6e2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c6e6:	3301      	adds	r3, #1
 800c6e8:	b2da      	uxtb	r2, r3
 800c6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ec:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800c6f0:	e098      	b.n	800c824 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800c6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6f4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	db0f      	blt.n	800c71c <tcp_slowtmr+0x1f0>
 800c6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6fe:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c702:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c706:	4293      	cmp	r3, r2
 800c708:	d008      	beq.n	800c71c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800c70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c70c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c710:	b29b      	uxth	r3, r3
 800c712:	3301      	adds	r3, #1
 800c714:	b29b      	uxth	r3, r3
 800c716:	b21a      	sxth	r2, r3
 800c718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c71a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800c71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c71e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800c722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c724:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c728:	429a      	cmp	r2, r3
 800c72a:	db7b      	blt.n	800c824 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800c72c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c72e:	f004 f833 	bl	8010798 <tcp_rexmit_rto_prepare>
 800c732:	4603      	mov	r3, r0
 800c734:	2b00      	cmp	r3, #0
 800c736:	d007      	beq.n	800c748 <tcp_slowtmr+0x21c>
 800c738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c73a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d171      	bne.n	800c824 <tcp_slowtmr+0x2f8>
 800c740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c744:	2b00      	cmp	r3, #0
 800c746:	d06d      	beq.n	800c824 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800c748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c74a:	7d1b      	ldrb	r3, [r3, #20]
 800c74c:	2b02      	cmp	r3, #2
 800c74e:	d03a      	beq.n	800c7c6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800c750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c752:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c756:	2b0c      	cmp	r3, #12
 800c758:	bf28      	it	cs
 800c75a:	230c      	movcs	r3, #12
 800c75c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c760:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c764:	10db      	asrs	r3, r3, #3
 800c766:	b21b      	sxth	r3, r3
 800c768:	461a      	mov	r2, r3
 800c76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c76c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c770:	4413      	add	r3, r2
 800c772:	7efa      	ldrb	r2, [r7, #27]
 800c774:	4910      	ldr	r1, [pc, #64]	; (800c7b8 <tcp_slowtmr+0x28c>)
 800c776:	5c8a      	ldrb	r2, [r1, r2]
 800c778:	4093      	lsls	r3, r2
 800c77a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800c782:	4293      	cmp	r3, r2
 800c784:	dc1a      	bgt.n	800c7bc <tcp_slowtmr+0x290>
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	b21a      	sxth	r2, r3
 800c78a:	e019      	b.n	800c7c0 <tcp_slowtmr+0x294>
 800c78c:	2000d9e8 	.word	0x2000d9e8
 800c790:	2000d9fe 	.word	0x2000d9fe
 800c794:	2000d9f4 	.word	0x2000d9f4
 800c798:	080193f0 	.word	0x080193f0
 800c79c:	08019734 	.word	0x08019734
 800c7a0:	08019434 	.word	0x08019434
 800c7a4:	08019760 	.word	0x08019760
 800c7a8:	0801978c 	.word	0x0801978c
 800c7ac:	080197bc 	.word	0x080197bc
 800c7b0:	080197f0 	.word	0x080197f0
 800c7b4:	0801d5c8 	.word	0x0801d5c8
 800c7b8:	0801d5b8 	.word	0x0801d5b8
 800c7bc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800c7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800c7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c7d8:	4293      	cmp	r3, r2
 800c7da:	bf28      	it	cs
 800c7dc:	4613      	movcs	r3, r2
 800c7de:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800c7e0:	8a7b      	ldrh	r3, [r7, #18]
 800c7e2:	085b      	lsrs	r3, r3, #1
 800c7e4:	b29a      	uxth	r2, r3
 800c7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800c7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ee:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c7f6:	005b      	lsls	r3, r3, #1
 800c7f8:	b29b      	uxth	r3, r3
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	d206      	bcs.n	800c80c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800c7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c800:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c802:	005b      	lsls	r3, r3, #1
 800c804:	b29a      	uxth	r2, r3
 800c806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c808:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800c80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c80e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800c810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c812:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800c816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c818:	2200      	movs	r2, #0
 800c81a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800c81e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c820:	f004 f834 	bl	801088c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800c824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c826:	7d1b      	ldrb	r3, [r3, #20]
 800c828:	2b06      	cmp	r3, #6
 800c82a:	d111      	bne.n	800c850 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800c82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c82e:	8b5b      	ldrh	r3, [r3, #26]
 800c830:	f003 0310 	and.w	r3, r3, #16
 800c834:	2b00      	cmp	r3, #0
 800c836:	d00b      	beq.n	800c850 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c838:	4b9d      	ldr	r3, [pc, #628]	; (800cab0 <tcp_slowtmr+0x584>)
 800c83a:	681a      	ldr	r2, [r3, #0]
 800c83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c83e:	6a1b      	ldr	r3, [r3, #32]
 800c840:	1ad3      	subs	r3, r2, r3
 800c842:	2b28      	cmp	r3, #40	; 0x28
 800c844:	d904      	bls.n	800c850 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800c846:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c84a:	3301      	adds	r3, #1
 800c84c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c852:	7a5b      	ldrb	r3, [r3, #9]
 800c854:	f003 0308 	and.w	r3, r3, #8
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d04c      	beq.n	800c8f6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800c85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c85e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c860:	2b04      	cmp	r3, #4
 800c862:	d003      	beq.n	800c86c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800c864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c866:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800c868:	2b07      	cmp	r3, #7
 800c86a:	d144      	bne.n	800c8f6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c86c:	4b90      	ldr	r3, [pc, #576]	; (800cab0 <tcp_slowtmr+0x584>)
 800c86e:	681a      	ldr	r2, [r3, #0]
 800c870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c872:	6a1b      	ldr	r3, [r3, #32]
 800c874:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800c876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c878:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c87c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800c880:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800c884:	498b      	ldr	r1, [pc, #556]	; (800cab4 <tcp_slowtmr+0x588>)
 800c886:	fba1 1303 	umull	r1, r3, r1, r3
 800c88a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c88c:	429a      	cmp	r2, r3
 800c88e:	d90a      	bls.n	800c8a6 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800c890:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c894:	3301      	adds	r3, #1
 800c896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800c89a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c89e:	3301      	adds	r3, #1
 800c8a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c8a4:	e027      	b.n	800c8f6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c8a6:	4b82      	ldr	r3, [pc, #520]	; (800cab0 <tcp_slowtmr+0x584>)
 800c8a8:	681a      	ldr	r2, [r3, #0]
 800c8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ac:	6a1b      	ldr	r3, [r3, #32]
 800c8ae:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800c8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8b2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8b8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c8bc:	4618      	mov	r0, r3
 800c8be:	4b7e      	ldr	r3, [pc, #504]	; (800cab8 <tcp_slowtmr+0x58c>)
 800c8c0:	fb00 f303 	mul.w	r3, r0, r3
 800c8c4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800c8c6:	497b      	ldr	r1, [pc, #492]	; (800cab4 <tcp_slowtmr+0x588>)
 800c8c8:	fba1 1303 	umull	r1, r3, r1, r3
 800c8cc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c8ce:	429a      	cmp	r2, r3
 800c8d0:	d911      	bls.n	800c8f6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800c8d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c8d4:	f004 fae0 	bl	8010e98 <tcp_keepalive>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800c8de:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d107      	bne.n	800c8f6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800c8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8e8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c8ec:	3301      	adds	r3, #1
 800c8ee:	b2da      	uxtb	r2, r3
 800c8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800c8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d011      	beq.n	800c922 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800c8fe:	4b6c      	ldr	r3, [pc, #432]	; (800cab0 <tcp_slowtmr+0x584>)
 800c900:	681a      	ldr	r2, [r3, #0]
 800c902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c904:	6a1b      	ldr	r3, [r3, #32]
 800c906:	1ad2      	subs	r2, r2, r3
 800c908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c90a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c90e:	4619      	mov	r1, r3
 800c910:	460b      	mov	r3, r1
 800c912:	005b      	lsls	r3, r3, #1
 800c914:	440b      	add	r3, r1
 800c916:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800c918:	429a      	cmp	r2, r3
 800c91a:	d302      	bcc.n	800c922 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800c91c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c91e:	f000 fde1 	bl	800d4e4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800c922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c924:	7d1b      	ldrb	r3, [r3, #20]
 800c926:	2b03      	cmp	r3, #3
 800c928:	d10b      	bne.n	800c942 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c92a:	4b61      	ldr	r3, [pc, #388]	; (800cab0 <tcp_slowtmr+0x584>)
 800c92c:	681a      	ldr	r2, [r3, #0]
 800c92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c930:	6a1b      	ldr	r3, [r3, #32]
 800c932:	1ad3      	subs	r3, r2, r3
 800c934:	2b28      	cmp	r3, #40	; 0x28
 800c936:	d904      	bls.n	800c942 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800c938:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c93c:	3301      	adds	r3, #1
 800c93e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800c942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c944:	7d1b      	ldrb	r3, [r3, #20]
 800c946:	2b09      	cmp	r3, #9
 800c948:	d10b      	bne.n	800c962 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c94a:	4b59      	ldr	r3, [pc, #356]	; (800cab0 <tcp_slowtmr+0x584>)
 800c94c:	681a      	ldr	r2, [r3, #0]
 800c94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c950:	6a1b      	ldr	r3, [r3, #32]
 800c952:	1ad3      	subs	r3, r2, r3
 800c954:	2bf0      	cmp	r3, #240	; 0xf0
 800c956:	d904      	bls.n	800c962 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800c958:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c95c:	3301      	adds	r3, #1
 800c95e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c962:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c966:	2b00      	cmp	r3, #0
 800c968:	d060      	beq.n	800ca2c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800c96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c96c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c970:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800c972:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c974:	f000 fbfc 	bl	800d170 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800c978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d010      	beq.n	800c9a0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800c97e:	4b4f      	ldr	r3, [pc, #316]	; (800cabc <tcp_slowtmr+0x590>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c984:	429a      	cmp	r2, r3
 800c986:	d106      	bne.n	800c996 <tcp_slowtmr+0x46a>
 800c988:	4b4d      	ldr	r3, [pc, #308]	; (800cac0 <tcp_slowtmr+0x594>)
 800c98a:	f240 526d 	movw	r2, #1389	; 0x56d
 800c98e:	494d      	ldr	r1, [pc, #308]	; (800cac4 <tcp_slowtmr+0x598>)
 800c990:	484d      	ldr	r0, [pc, #308]	; (800cac8 <tcp_slowtmr+0x59c>)
 800c992:	f00a fbe9 	bl	8017168 <iprintf>
        prev->next = pcb->next;
 800c996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c998:	68da      	ldr	r2, [r3, #12]
 800c99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c99c:	60da      	str	r2, [r3, #12]
 800c99e:	e00f      	b.n	800c9c0 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800c9a0:	4b46      	ldr	r3, [pc, #280]	; (800cabc <tcp_slowtmr+0x590>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9a6:	429a      	cmp	r2, r3
 800c9a8:	d006      	beq.n	800c9b8 <tcp_slowtmr+0x48c>
 800c9aa:	4b45      	ldr	r3, [pc, #276]	; (800cac0 <tcp_slowtmr+0x594>)
 800c9ac:	f240 5271 	movw	r2, #1393	; 0x571
 800c9b0:	4946      	ldr	r1, [pc, #280]	; (800cacc <tcp_slowtmr+0x5a0>)
 800c9b2:	4845      	ldr	r0, [pc, #276]	; (800cac8 <tcp_slowtmr+0x59c>)
 800c9b4:	f00a fbd8 	bl	8017168 <iprintf>
        tcp_active_pcbs = pcb->next;
 800c9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ba:	68db      	ldr	r3, [r3, #12]
 800c9bc:	4a3f      	ldr	r2, [pc, #252]	; (800cabc <tcp_slowtmr+0x590>)
 800c9be:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800c9c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d013      	beq.n	800c9f0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ca:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ce:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c9d0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800c9d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9d4:	3304      	adds	r3, #4
 800c9d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9d8:	8ad2      	ldrh	r2, [r2, #22]
 800c9da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c9dc:	8b09      	ldrh	r1, [r1, #24]
 800c9de:	9102      	str	r1, [sp, #8]
 800c9e0:	9201      	str	r2, [sp, #4]
 800c9e2:	9300      	str	r3, [sp, #0]
 800c9e4:	462b      	mov	r3, r5
 800c9e6:	4622      	mov	r2, r4
 800c9e8:	4601      	mov	r1, r0
 800c9ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c9ec:	f004 f9a0 	bl	8010d30 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800c9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f2:	691b      	ldr	r3, [r3, #16]
 800c9f4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800c9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f8:	7d1b      	ldrb	r3, [r3, #20]
 800c9fa:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800c9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9fe:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ca00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca02:	68db      	ldr	r3, [r3, #12]
 800ca04:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ca06:	6838      	ldr	r0, [r7, #0]
 800ca08:	f7ff f9f2 	bl	800bdf0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800ca0c:	4b30      	ldr	r3, [pc, #192]	; (800cad0 <tcp_slowtmr+0x5a4>)
 800ca0e:	2200      	movs	r2, #0
 800ca10:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d004      	beq.n	800ca22 <tcp_slowtmr+0x4f6>
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	f06f 010c 	mvn.w	r1, #12
 800ca1e:	68b8      	ldr	r0, [r7, #8]
 800ca20:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ca22:	4b2b      	ldr	r3, [pc, #172]	; (800cad0 <tcp_slowtmr+0x5a4>)
 800ca24:	781b      	ldrb	r3, [r3, #0]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d037      	beq.n	800ca9a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800ca2a:	e590      	b.n	800c54e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800ca2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca2e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ca30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca32:	68db      	ldr	r3, [r3, #12]
 800ca34:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800ca36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca38:	7f1b      	ldrb	r3, [r3, #28]
 800ca3a:	3301      	adds	r3, #1
 800ca3c:	b2da      	uxtb	r2, r3
 800ca3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca40:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ca42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca44:	7f1a      	ldrb	r2, [r3, #28]
 800ca46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca48:	7f5b      	ldrb	r3, [r3, #29]
 800ca4a:	429a      	cmp	r2, r3
 800ca4c:	d325      	bcc.n	800ca9a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800ca4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca50:	2200      	movs	r2, #0
 800ca52:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800ca54:	4b1e      	ldr	r3, [pc, #120]	; (800cad0 <tcp_slowtmr+0x5a4>)
 800ca56:	2200      	movs	r2, #0
 800ca58:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ca5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d00b      	beq.n	800ca7c <tcp_slowtmr+0x550>
 800ca64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca6c:	6912      	ldr	r2, [r2, #16]
 800ca6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ca70:	4610      	mov	r0, r2
 800ca72:	4798      	blx	r3
 800ca74:	4603      	mov	r3, r0
 800ca76:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800ca7a:	e002      	b.n	800ca82 <tcp_slowtmr+0x556>
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800ca82:	4b13      	ldr	r3, [pc, #76]	; (800cad0 <tcp_slowtmr+0x5a4>)
 800ca84:	781b      	ldrb	r3, [r3, #0]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d000      	beq.n	800ca8c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800ca8a:	e560      	b.n	800c54e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ca8c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d102      	bne.n	800ca9a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800ca94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca96:	f003 fb8b 	bl	80101b0 <tcp_output>
  while (pcb != NULL) {
 800ca9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	f47f ad5c 	bne.w	800c55a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800caa2:	2300      	movs	r3, #0
 800caa4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800caa6:	4b0b      	ldr	r3, [pc, #44]	; (800cad4 <tcp_slowtmr+0x5a8>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800caac:	e067      	b.n	800cb7e <tcp_slowtmr+0x652>
 800caae:	bf00      	nop
 800cab0:	2000d9e8 	.word	0x2000d9e8
 800cab4:	10624dd3 	.word	0x10624dd3
 800cab8:	000124f8 	.word	0x000124f8
 800cabc:	2000d9f4 	.word	0x2000d9f4
 800cac0:	080193f0 	.word	0x080193f0
 800cac4:	08019828 	.word	0x08019828
 800cac8:	08019434 	.word	0x08019434
 800cacc:	08019854 	.word	0x08019854
 800cad0:	2000d9fc 	.word	0x2000d9fc
 800cad4:	2000d9f8 	.word	0x2000d9f8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cada:	7d1b      	ldrb	r3, [r3, #20]
 800cadc:	2b0a      	cmp	r3, #10
 800cade:	d006      	beq.n	800caee <tcp_slowtmr+0x5c2>
 800cae0:	4b2b      	ldr	r3, [pc, #172]	; (800cb90 <tcp_slowtmr+0x664>)
 800cae2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800cae6:	492b      	ldr	r1, [pc, #172]	; (800cb94 <tcp_slowtmr+0x668>)
 800cae8:	482b      	ldr	r0, [pc, #172]	; (800cb98 <tcp_slowtmr+0x66c>)
 800caea:	f00a fb3d 	bl	8017168 <iprintf>
    pcb_remove = 0;
 800caee:	2300      	movs	r3, #0
 800caf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800caf4:	4b29      	ldr	r3, [pc, #164]	; (800cb9c <tcp_slowtmr+0x670>)
 800caf6:	681a      	ldr	r2, [r3, #0]
 800caf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cafa:	6a1b      	ldr	r3, [r3, #32]
 800cafc:	1ad3      	subs	r3, r2, r3
 800cafe:	2bf0      	cmp	r3, #240	; 0xf0
 800cb00:	d904      	bls.n	800cb0c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800cb02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb06:	3301      	adds	r3, #1
 800cb08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cb0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d02f      	beq.n	800cb74 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800cb14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb16:	f000 fb2b 	bl	800d170 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800cb1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d010      	beq.n	800cb42 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800cb20:	4b1f      	ldr	r3, [pc, #124]	; (800cba0 <tcp_slowtmr+0x674>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb26:	429a      	cmp	r2, r3
 800cb28:	d106      	bne.n	800cb38 <tcp_slowtmr+0x60c>
 800cb2a:	4b19      	ldr	r3, [pc, #100]	; (800cb90 <tcp_slowtmr+0x664>)
 800cb2c:	f240 52af 	movw	r2, #1455	; 0x5af
 800cb30:	491c      	ldr	r1, [pc, #112]	; (800cba4 <tcp_slowtmr+0x678>)
 800cb32:	4819      	ldr	r0, [pc, #100]	; (800cb98 <tcp_slowtmr+0x66c>)
 800cb34:	f00a fb18 	bl	8017168 <iprintf>
        prev->next = pcb->next;
 800cb38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb3a:	68da      	ldr	r2, [r3, #12]
 800cb3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb3e:	60da      	str	r2, [r3, #12]
 800cb40:	e00f      	b.n	800cb62 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800cb42:	4b17      	ldr	r3, [pc, #92]	; (800cba0 <tcp_slowtmr+0x674>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d006      	beq.n	800cb5a <tcp_slowtmr+0x62e>
 800cb4c:	4b10      	ldr	r3, [pc, #64]	; (800cb90 <tcp_slowtmr+0x664>)
 800cb4e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800cb52:	4915      	ldr	r1, [pc, #84]	; (800cba8 <tcp_slowtmr+0x67c>)
 800cb54:	4810      	ldr	r0, [pc, #64]	; (800cb98 <tcp_slowtmr+0x66c>)
 800cb56:	f00a fb07 	bl	8017168 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800cb5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb5c:	68db      	ldr	r3, [r3, #12]
 800cb5e:	4a10      	ldr	r2, [pc, #64]	; (800cba0 <tcp_slowtmr+0x674>)
 800cb60:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800cb62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb64:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800cb66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb68:	68db      	ldr	r3, [r3, #12]
 800cb6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800cb6c:	69f8      	ldr	r0, [r7, #28]
 800cb6e:	f7ff f93f 	bl	800bdf0 <tcp_free>
 800cb72:	e004      	b.n	800cb7e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800cb74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb76:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cb78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb7a:	68db      	ldr	r3, [r3, #12]
 800cb7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800cb7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d1a9      	bne.n	800cad8 <tcp_slowtmr+0x5ac>
    }
  }
}
 800cb84:	bf00      	nop
 800cb86:	bf00      	nop
 800cb88:	3730      	adds	r7, #48	; 0x30
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bdb0      	pop	{r4, r5, r7, pc}
 800cb8e:	bf00      	nop
 800cb90:	080193f0 	.word	0x080193f0
 800cb94:	08019880 	.word	0x08019880
 800cb98:	08019434 	.word	0x08019434
 800cb9c:	2000d9e8 	.word	0x2000d9e8
 800cba0:	2000d9f8 	.word	0x2000d9f8
 800cba4:	080198b0 	.word	0x080198b0
 800cba8:	080198d8 	.word	0x080198d8

0800cbac <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b082      	sub	sp, #8
 800cbb0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800cbb2:	4b2d      	ldr	r3, [pc, #180]	; (800cc68 <tcp_fasttmr+0xbc>)
 800cbb4:	781b      	ldrb	r3, [r3, #0]
 800cbb6:	3301      	adds	r3, #1
 800cbb8:	b2da      	uxtb	r2, r3
 800cbba:	4b2b      	ldr	r3, [pc, #172]	; (800cc68 <tcp_fasttmr+0xbc>)
 800cbbc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800cbbe:	4b2b      	ldr	r3, [pc, #172]	; (800cc6c <tcp_fasttmr+0xc0>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800cbc4:	e048      	b.n	800cc58 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	7f9a      	ldrb	r2, [r3, #30]
 800cbca:	4b27      	ldr	r3, [pc, #156]	; (800cc68 <tcp_fasttmr+0xbc>)
 800cbcc:	781b      	ldrb	r3, [r3, #0]
 800cbce:	429a      	cmp	r2, r3
 800cbd0:	d03f      	beq.n	800cc52 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800cbd2:	4b25      	ldr	r3, [pc, #148]	; (800cc68 <tcp_fasttmr+0xbc>)
 800cbd4:	781a      	ldrb	r2, [r3, #0]
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	8b5b      	ldrh	r3, [r3, #26]
 800cbde:	f003 0301 	and.w	r3, r3, #1
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d010      	beq.n	800cc08 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	8b5b      	ldrh	r3, [r3, #26]
 800cbea:	f043 0302 	orr.w	r3, r3, #2
 800cbee:	b29a      	uxth	r2, r3
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f003 fadb 	bl	80101b0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	8b5b      	ldrh	r3, [r3, #26]
 800cbfe:	f023 0303 	bic.w	r3, r3, #3
 800cc02:	b29a      	uxth	r2, r3
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	8b5b      	ldrh	r3, [r3, #26]
 800cc0c:	f003 0308 	and.w	r3, r3, #8
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d009      	beq.n	800cc28 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	8b5b      	ldrh	r3, [r3, #26]
 800cc18:	f023 0308 	bic.w	r3, r3, #8
 800cc1c:	b29a      	uxth	r2, r3
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f7ff fa78 	bl	800c118 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	68db      	ldr	r3, [r3, #12]
 800cc2c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d00a      	beq.n	800cc4c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800cc36:	4b0e      	ldr	r3, [pc, #56]	; (800cc70 <tcp_fasttmr+0xc4>)
 800cc38:	2200      	movs	r2, #0
 800cc3a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f000 f819 	bl	800cc74 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800cc42:	4b0b      	ldr	r3, [pc, #44]	; (800cc70 <tcp_fasttmr+0xc4>)
 800cc44:	781b      	ldrb	r3, [r3, #0]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d000      	beq.n	800cc4c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800cc4a:	e7b8      	b.n	800cbbe <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	607b      	str	r3, [r7, #4]
 800cc50:	e002      	b.n	800cc58 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	68db      	ldr	r3, [r3, #12]
 800cc56:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d1b3      	bne.n	800cbc6 <tcp_fasttmr+0x1a>
    }
  }
}
 800cc5e:	bf00      	nop
 800cc60:	bf00      	nop
 800cc62:	3708      	adds	r7, #8
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}
 800cc68:	2000d9fe 	.word	0x2000d9fe
 800cc6c:	2000d9f4 	.word	0x2000d9f4
 800cc70:	2000d9fc 	.word	0x2000d9fc

0800cc74 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800cc74:	b590      	push	{r4, r7, lr}
 800cc76:	b085      	sub	sp, #20
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d109      	bne.n	800cc96 <tcp_process_refused_data+0x22>
 800cc82:	4b37      	ldr	r3, [pc, #220]	; (800cd60 <tcp_process_refused_data+0xec>)
 800cc84:	f240 6209 	movw	r2, #1545	; 0x609
 800cc88:	4936      	ldr	r1, [pc, #216]	; (800cd64 <tcp_process_refused_data+0xf0>)
 800cc8a:	4837      	ldr	r0, [pc, #220]	; (800cd68 <tcp_process_refused_data+0xf4>)
 800cc8c:	f00a fa6c 	bl	8017168 <iprintf>
 800cc90:	f06f 030f 	mvn.w	r3, #15
 800cc94:	e060      	b.n	800cd58 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc9a:	7b5b      	ldrb	r3, [r3, #13]
 800cc9c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cca2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2200      	movs	r2, #0
 800cca8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d00b      	beq.n	800cccc <tcp_process_refused_data+0x58>
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	6918      	ldr	r0, [r3, #16]
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	68ba      	ldr	r2, [r7, #8]
 800ccc2:	6879      	ldr	r1, [r7, #4]
 800ccc4:	47a0      	blx	r4
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	73fb      	strb	r3, [r7, #15]
 800ccca:	e007      	b.n	800ccdc <tcp_process_refused_data+0x68>
 800cccc:	2300      	movs	r3, #0
 800ccce:	68ba      	ldr	r2, [r7, #8]
 800ccd0:	6879      	ldr	r1, [r7, #4]
 800ccd2:	2000      	movs	r0, #0
 800ccd4:	f000 f8a4 	bl	800ce20 <tcp_recv_null>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ccdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d12a      	bne.n	800cd3a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800cce4:	7bbb      	ldrb	r3, [r7, #14]
 800cce6:	f003 0320 	and.w	r3, r3, #32
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d033      	beq.n	800cd56 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccf2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ccf6:	d005      	beq.n	800cd04 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccfc:	3301      	adds	r3, #1
 800ccfe:	b29a      	uxth	r2, r3
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d00b      	beq.n	800cd26 <tcp_process_refused_data+0xb2>
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	6918      	ldr	r0, [r3, #16]
 800cd18:	2300      	movs	r3, #0
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	6879      	ldr	r1, [r7, #4]
 800cd1e:	47a0      	blx	r4
 800cd20:	4603      	mov	r3, r0
 800cd22:	73fb      	strb	r3, [r7, #15]
 800cd24:	e001      	b.n	800cd2a <tcp_process_refused_data+0xb6>
 800cd26:	2300      	movs	r3, #0
 800cd28:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800cd2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd2e:	f113 0f0d 	cmn.w	r3, #13
 800cd32:	d110      	bne.n	800cd56 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800cd34:	f06f 030c 	mvn.w	r3, #12
 800cd38:	e00e      	b.n	800cd58 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800cd3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd3e:	f113 0f0d 	cmn.w	r3, #13
 800cd42:	d102      	bne.n	800cd4a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800cd44:	f06f 030c 	mvn.w	r3, #12
 800cd48:	e006      	b.n	800cd58 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	68ba      	ldr	r2, [r7, #8]
 800cd4e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800cd50:	f06f 0304 	mvn.w	r3, #4
 800cd54:	e000      	b.n	800cd58 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800cd56:	2300      	movs	r3, #0
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	3714      	adds	r7, #20
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd90      	pop	{r4, r7, pc}
 800cd60:	080193f0 	.word	0x080193f0
 800cd64:	08019900 	.word	0x08019900
 800cd68:	08019434 	.word	0x08019434

0800cd6c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b084      	sub	sp, #16
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800cd74:	e007      	b.n	800cd86 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f000 f80a 	bl	800cd96 <tcp_seg_free>
    seg = next;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d1f4      	bne.n	800cd76 <tcp_segs_free+0xa>
  }
}
 800cd8c:	bf00      	nop
 800cd8e:	bf00      	nop
 800cd90:	3710      	adds	r7, #16
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}

0800cd96 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800cd96:	b580      	push	{r7, lr}
 800cd98:	b082      	sub	sp, #8
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d00c      	beq.n	800cdbe <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	685b      	ldr	r3, [r3, #4]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d004      	beq.n	800cdb6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	685b      	ldr	r3, [r3, #4]
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	f7fe fc07 	bl	800b5c4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800cdb6:	6879      	ldr	r1, [r7, #4]
 800cdb8:	2003      	movs	r0, #3
 800cdba:	f7fd fc5d 	bl	800a678 <memp_free>
  }
}
 800cdbe:	bf00      	nop
 800cdc0:	3708      	adds	r7, #8
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}
	...

0800cdc8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b084      	sub	sp, #16
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d106      	bne.n	800cde4 <tcp_seg_copy+0x1c>
 800cdd6:	4b0f      	ldr	r3, [pc, #60]	; (800ce14 <tcp_seg_copy+0x4c>)
 800cdd8:	f240 6282 	movw	r2, #1666	; 0x682
 800cddc:	490e      	ldr	r1, [pc, #56]	; (800ce18 <tcp_seg_copy+0x50>)
 800cdde:	480f      	ldr	r0, [pc, #60]	; (800ce1c <tcp_seg_copy+0x54>)
 800cde0:	f00a f9c2 	bl	8017168 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800cde4:	2003      	movs	r0, #3
 800cde6:	f7fd fbd1 	bl	800a58c <memp_malloc>
 800cdea:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d101      	bne.n	800cdf6 <tcp_seg_copy+0x2e>
    return NULL;
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	e00a      	b.n	800ce0c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800cdf6:	2214      	movs	r2, #20
 800cdf8:	6879      	ldr	r1, [r7, #4]
 800cdfa:	68f8      	ldr	r0, [r7, #12]
 800cdfc:	f00a f99e 	bl	801713c <memcpy>
  pbuf_ref(cseg->p);
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	685b      	ldr	r3, [r3, #4]
 800ce04:	4618      	mov	r0, r3
 800ce06:	f7fe fc83 	bl	800b710 <pbuf_ref>
  return cseg;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	3710      	adds	r7, #16
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}
 800ce14:	080193f0 	.word	0x080193f0
 800ce18:	08019944 	.word	0x08019944
 800ce1c:	08019434 	.word	0x08019434

0800ce20 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b084      	sub	sp, #16
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	60f8      	str	r0, [r7, #12]
 800ce28:	60b9      	str	r1, [r7, #8]
 800ce2a:	607a      	str	r2, [r7, #4]
 800ce2c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ce2e:	68bb      	ldr	r3, [r7, #8]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d109      	bne.n	800ce48 <tcp_recv_null+0x28>
 800ce34:	4b12      	ldr	r3, [pc, #72]	; (800ce80 <tcp_recv_null+0x60>)
 800ce36:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ce3a:	4912      	ldr	r1, [pc, #72]	; (800ce84 <tcp_recv_null+0x64>)
 800ce3c:	4812      	ldr	r0, [pc, #72]	; (800ce88 <tcp_recv_null+0x68>)
 800ce3e:	f00a f993 	bl	8017168 <iprintf>
 800ce42:	f06f 030f 	mvn.w	r3, #15
 800ce46:	e016      	b.n	800ce76 <tcp_recv_null+0x56>

  if (p != NULL) {
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d009      	beq.n	800ce62 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	891b      	ldrh	r3, [r3, #8]
 800ce52:	4619      	mov	r1, r3
 800ce54:	68b8      	ldr	r0, [r7, #8]
 800ce56:	f7ff fb19 	bl	800c48c <tcp_recved>
    pbuf_free(p);
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f7fe fbb2 	bl	800b5c4 <pbuf_free>
 800ce60:	e008      	b.n	800ce74 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ce62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d104      	bne.n	800ce74 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ce6a:	68b8      	ldr	r0, [r7, #8]
 800ce6c:	f7ff f9be 	bl	800c1ec <tcp_close>
 800ce70:	4603      	mov	r3, r0
 800ce72:	e000      	b.n	800ce76 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ce74:	2300      	movs	r3, #0
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	3710      	adds	r7, #16
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}
 800ce7e:	bf00      	nop
 800ce80:	080193f0 	.word	0x080193f0
 800ce84:	08019960 	.word	0x08019960
 800ce88:	08019434 	.word	0x08019434

0800ce8c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b086      	sub	sp, #24
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	4603      	mov	r3, r0
 800ce94:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ce96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	db01      	blt.n	800cea2 <tcp_kill_prio+0x16>
 800ce9e:	79fb      	ldrb	r3, [r7, #7]
 800cea0:	e000      	b.n	800cea4 <tcp_kill_prio+0x18>
 800cea2:	237f      	movs	r3, #127	; 0x7f
 800cea4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800cea6:	7afb      	ldrb	r3, [r7, #11]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d034      	beq.n	800cf16 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ceac:	7afb      	ldrb	r3, [r7, #11]
 800ceae:	3b01      	subs	r3, #1
 800ceb0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ceba:	4b19      	ldr	r3, [pc, #100]	; (800cf20 <tcp_kill_prio+0x94>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	617b      	str	r3, [r7, #20]
 800cec0:	e01f      	b.n	800cf02 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	7d5b      	ldrb	r3, [r3, #21]
 800cec6:	7afa      	ldrb	r2, [r7, #11]
 800cec8:	429a      	cmp	r2, r3
 800ceca:	d80c      	bhi.n	800cee6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800cecc:	697b      	ldr	r3, [r7, #20]
 800cece:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ced0:	7afa      	ldrb	r2, [r7, #11]
 800ced2:	429a      	cmp	r2, r3
 800ced4:	d112      	bne.n	800cefc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ced6:	4b13      	ldr	r3, [pc, #76]	; (800cf24 <tcp_kill_prio+0x98>)
 800ced8:	681a      	ldr	r2, [r3, #0]
 800ceda:	697b      	ldr	r3, [r7, #20]
 800cedc:	6a1b      	ldr	r3, [r3, #32]
 800cede:	1ad3      	subs	r3, r2, r3
 800cee0:	68fa      	ldr	r2, [r7, #12]
 800cee2:	429a      	cmp	r2, r3
 800cee4:	d80a      	bhi.n	800cefc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800cee6:	4b0f      	ldr	r3, [pc, #60]	; (800cf24 <tcp_kill_prio+0x98>)
 800cee8:	681a      	ldr	r2, [r3, #0]
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	6a1b      	ldr	r3, [r3, #32]
 800ceee:	1ad3      	subs	r3, r2, r3
 800cef0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	7d5b      	ldrb	r3, [r3, #21]
 800cefa:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	68db      	ldr	r3, [r3, #12]
 800cf00:	617b      	str	r3, [r7, #20]
 800cf02:	697b      	ldr	r3, [r7, #20]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d1dc      	bne.n	800cec2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d004      	beq.n	800cf18 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800cf0e:	6938      	ldr	r0, [r7, #16]
 800cf10:	f7ff fa56 	bl	800c3c0 <tcp_abort>
 800cf14:	e000      	b.n	800cf18 <tcp_kill_prio+0x8c>
    return;
 800cf16:	bf00      	nop
  }
}
 800cf18:	3718      	adds	r7, #24
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}
 800cf1e:	bf00      	nop
 800cf20:	2000d9f4 	.word	0x2000d9f4
 800cf24:	2000d9e8 	.word	0x2000d9e8

0800cf28 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b086      	sub	sp, #24
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	4603      	mov	r3, r0
 800cf30:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800cf32:	79fb      	ldrb	r3, [r7, #7]
 800cf34:	2b08      	cmp	r3, #8
 800cf36:	d009      	beq.n	800cf4c <tcp_kill_state+0x24>
 800cf38:	79fb      	ldrb	r3, [r7, #7]
 800cf3a:	2b09      	cmp	r3, #9
 800cf3c:	d006      	beq.n	800cf4c <tcp_kill_state+0x24>
 800cf3e:	4b1a      	ldr	r3, [pc, #104]	; (800cfa8 <tcp_kill_state+0x80>)
 800cf40:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800cf44:	4919      	ldr	r1, [pc, #100]	; (800cfac <tcp_kill_state+0x84>)
 800cf46:	481a      	ldr	r0, [pc, #104]	; (800cfb0 <tcp_kill_state+0x88>)
 800cf48:	f00a f90e 	bl	8017168 <iprintf>

  inactivity = 0;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800cf50:	2300      	movs	r3, #0
 800cf52:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cf54:	4b17      	ldr	r3, [pc, #92]	; (800cfb4 <tcp_kill_state+0x8c>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	617b      	str	r3, [r7, #20]
 800cf5a:	e017      	b.n	800cf8c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800cf5c:	697b      	ldr	r3, [r7, #20]
 800cf5e:	7d1b      	ldrb	r3, [r3, #20]
 800cf60:	79fa      	ldrb	r2, [r7, #7]
 800cf62:	429a      	cmp	r2, r3
 800cf64:	d10f      	bne.n	800cf86 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800cf66:	4b14      	ldr	r3, [pc, #80]	; (800cfb8 <tcp_kill_state+0x90>)
 800cf68:	681a      	ldr	r2, [r3, #0]
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	6a1b      	ldr	r3, [r3, #32]
 800cf6e:	1ad3      	subs	r3, r2, r3
 800cf70:	68fa      	ldr	r2, [r7, #12]
 800cf72:	429a      	cmp	r2, r3
 800cf74:	d807      	bhi.n	800cf86 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800cf76:	4b10      	ldr	r3, [pc, #64]	; (800cfb8 <tcp_kill_state+0x90>)
 800cf78:	681a      	ldr	r2, [r3, #0]
 800cf7a:	697b      	ldr	r3, [r7, #20]
 800cf7c:	6a1b      	ldr	r3, [r3, #32]
 800cf7e:	1ad3      	subs	r3, r2, r3
 800cf80:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800cf82:	697b      	ldr	r3, [r7, #20]
 800cf84:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	68db      	ldr	r3, [r3, #12]
 800cf8a:	617b      	str	r3, [r7, #20]
 800cf8c:	697b      	ldr	r3, [r7, #20]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d1e4      	bne.n	800cf5c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800cf92:	693b      	ldr	r3, [r7, #16]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d003      	beq.n	800cfa0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800cf98:	2100      	movs	r1, #0
 800cf9a:	6938      	ldr	r0, [r7, #16]
 800cf9c:	f7ff f952 	bl	800c244 <tcp_abandon>
  }
}
 800cfa0:	bf00      	nop
 800cfa2:	3718      	adds	r7, #24
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}
 800cfa8:	080193f0 	.word	0x080193f0
 800cfac:	0801997c 	.word	0x0801997c
 800cfb0:	08019434 	.word	0x08019434
 800cfb4:	2000d9f4 	.word	0x2000d9f4
 800cfb8:	2000d9e8 	.word	0x2000d9e8

0800cfbc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b084      	sub	sp, #16
 800cfc0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cfca:	4b12      	ldr	r3, [pc, #72]	; (800d014 <tcp_kill_timewait+0x58>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	60fb      	str	r3, [r7, #12]
 800cfd0:	e012      	b.n	800cff8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800cfd2:	4b11      	ldr	r3, [pc, #68]	; (800d018 <tcp_kill_timewait+0x5c>)
 800cfd4:	681a      	ldr	r2, [r3, #0]
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	6a1b      	ldr	r3, [r3, #32]
 800cfda:	1ad3      	subs	r3, r2, r3
 800cfdc:	687a      	ldr	r2, [r7, #4]
 800cfde:	429a      	cmp	r2, r3
 800cfe0:	d807      	bhi.n	800cff2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800cfe2:	4b0d      	ldr	r3, [pc, #52]	; (800d018 <tcp_kill_timewait+0x5c>)
 800cfe4:	681a      	ldr	r2, [r3, #0]
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	6a1b      	ldr	r3, [r3, #32]
 800cfea:	1ad3      	subs	r3, r2, r3
 800cfec:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	68db      	ldr	r3, [r3, #12]
 800cff6:	60fb      	str	r3, [r7, #12]
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d1e9      	bne.n	800cfd2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800cffe:	68bb      	ldr	r3, [r7, #8]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d002      	beq.n	800d00a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d004:	68b8      	ldr	r0, [r7, #8]
 800d006:	f7ff f9db 	bl	800c3c0 <tcp_abort>
  }
}
 800d00a:	bf00      	nop
 800d00c:	3710      	adds	r7, #16
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}
 800d012:	bf00      	nop
 800d014:	2000d9f8 	.word	0x2000d9f8
 800d018:	2000d9e8 	.word	0x2000d9e8

0800d01c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b082      	sub	sp, #8
 800d020:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d022:	4b10      	ldr	r3, [pc, #64]	; (800d064 <tcp_handle_closepend+0x48>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d028:	e014      	b.n	800d054 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	68db      	ldr	r3, [r3, #12]
 800d02e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	8b5b      	ldrh	r3, [r3, #26]
 800d034:	f003 0308 	and.w	r3, r3, #8
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d009      	beq.n	800d050 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	8b5b      	ldrh	r3, [r3, #26]
 800d040:	f023 0308 	bic.w	r3, r3, #8
 800d044:	b29a      	uxth	r2, r3
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f7ff f864 	bl	800c118 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d1e7      	bne.n	800d02a <tcp_handle_closepend+0xe>
  }
}
 800d05a:	bf00      	nop
 800d05c:	bf00      	nop
 800d05e:	3708      	adds	r7, #8
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}
 800d064:	2000d9f4 	.word	0x2000d9f4

0800d068 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b084      	sub	sp, #16
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	4603      	mov	r3, r0
 800d070:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d072:	2001      	movs	r0, #1
 800d074:	f7fd fa8a 	bl	800a58c <memp_malloc>
 800d078:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d126      	bne.n	800d0ce <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d080:	f7ff ffcc 	bl	800d01c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d084:	f7ff ff9a 	bl	800cfbc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d088:	2001      	movs	r0, #1
 800d08a:	f7fd fa7f 	bl	800a58c <memp_malloc>
 800d08e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d11b      	bne.n	800d0ce <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d096:	2009      	movs	r0, #9
 800d098:	f7ff ff46 	bl	800cf28 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d09c:	2001      	movs	r0, #1
 800d09e:	f7fd fa75 	bl	800a58c <memp_malloc>
 800d0a2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d111      	bne.n	800d0ce <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d0aa:	2008      	movs	r0, #8
 800d0ac:	f7ff ff3c 	bl	800cf28 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d0b0:	2001      	movs	r0, #1
 800d0b2:	f7fd fa6b 	bl	800a58c <memp_malloc>
 800d0b6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d107      	bne.n	800d0ce <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d0be:	79fb      	ldrb	r3, [r7, #7]
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f7ff fee3 	bl	800ce8c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d0c6:	2001      	movs	r0, #1
 800d0c8:	f7fd fa60 	bl	800a58c <memp_malloc>
 800d0cc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d03f      	beq.n	800d154 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d0d4:	229c      	movs	r2, #156	; 0x9c
 800d0d6:	2100      	movs	r1, #0
 800d0d8:	68f8      	ldr	r0, [r7, #12]
 800d0da:	f00a f83d 	bl	8017158 <memset>
    pcb->prio = prio;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	79fa      	ldrb	r2, [r7, #7]
 800d0e2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d0ea:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d0f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	22ff      	movs	r2, #255	; 0xff
 800d102:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d10a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	2206      	movs	r2, #6
 800d110:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	2206      	movs	r2, #6
 800d118:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d120:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	2201      	movs	r2, #1
 800d126:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d12a:	4b0d      	ldr	r3, [pc, #52]	; (800d160 <tcp_alloc+0xf8>)
 800d12c:	681a      	ldr	r2, [r3, #0]
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d132:	4b0c      	ldr	r3, [pc, #48]	; (800d164 <tcp_alloc+0xfc>)
 800d134:	781a      	ldrb	r2, [r3, #0]
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d140:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	4a08      	ldr	r2, [pc, #32]	; (800d168 <tcp_alloc+0x100>)
 800d148:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	4a07      	ldr	r2, [pc, #28]	; (800d16c <tcp_alloc+0x104>)
 800d150:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d154:	68fb      	ldr	r3, [r7, #12]
}
 800d156:	4618      	mov	r0, r3
 800d158:	3710      	adds	r7, #16
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}
 800d15e:	bf00      	nop
 800d160:	2000d9e8 	.word	0x2000d9e8
 800d164:	2000d9fe 	.word	0x2000d9fe
 800d168:	0800ce21 	.word	0x0800ce21
 800d16c:	006ddd00 	.word	0x006ddd00

0800d170 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b082      	sub	sp, #8
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d107      	bne.n	800d18e <tcp_pcb_purge+0x1e>
 800d17e:	4b21      	ldr	r3, [pc, #132]	; (800d204 <tcp_pcb_purge+0x94>)
 800d180:	f640 0251 	movw	r2, #2129	; 0x851
 800d184:	4920      	ldr	r1, [pc, #128]	; (800d208 <tcp_pcb_purge+0x98>)
 800d186:	4821      	ldr	r0, [pc, #132]	; (800d20c <tcp_pcb_purge+0x9c>)
 800d188:	f009 ffee 	bl	8017168 <iprintf>
 800d18c:	e037      	b.n	800d1fe <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	7d1b      	ldrb	r3, [r3, #20]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d033      	beq.n	800d1fe <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d19a:	2b0a      	cmp	r3, #10
 800d19c:	d02f      	beq.n	800d1fe <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d1a2:	2b01      	cmp	r3, #1
 800d1a4:	d02b      	beq.n	800d1fe <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d007      	beq.n	800d1be <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f7fe fa06 	bl	800b5c4 <pbuf_free>
      pcb->refused_data = NULL;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d002      	beq.n	800d1cc <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	f000 f98c 	bl	800d4e4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d1d2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1d8:	4618      	mov	r0, r3
 800d1da:	f7ff fdc7 	bl	800cd6c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f7ff fdc2 	bl	800cd6c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	66da      	str	r2, [r3, #108]	; 0x6c
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d1fe:	3708      	adds	r7, #8
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}
 800d204:	080193f0 	.word	0x080193f0
 800d208:	08019a3c 	.word	0x08019a3c
 800d20c:	08019434 	.word	0x08019434

0800d210 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b084      	sub	sp, #16
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
 800d218:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d106      	bne.n	800d22e <tcp_pcb_remove+0x1e>
 800d220:	4b3e      	ldr	r3, [pc, #248]	; (800d31c <tcp_pcb_remove+0x10c>)
 800d222:	f640 0283 	movw	r2, #2179	; 0x883
 800d226:	493e      	ldr	r1, [pc, #248]	; (800d320 <tcp_pcb_remove+0x110>)
 800d228:	483e      	ldr	r0, [pc, #248]	; (800d324 <tcp_pcb_remove+0x114>)
 800d22a:	f009 ff9d 	bl	8017168 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d106      	bne.n	800d242 <tcp_pcb_remove+0x32>
 800d234:	4b39      	ldr	r3, [pc, #228]	; (800d31c <tcp_pcb_remove+0x10c>)
 800d236:	f640 0284 	movw	r2, #2180	; 0x884
 800d23a:	493b      	ldr	r1, [pc, #236]	; (800d328 <tcp_pcb_remove+0x118>)
 800d23c:	4839      	ldr	r0, [pc, #228]	; (800d324 <tcp_pcb_remove+0x114>)
 800d23e:	f009 ff93 	bl	8017168 <iprintf>

  TCP_RMV(pcblist, pcb);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	683a      	ldr	r2, [r7, #0]
 800d248:	429a      	cmp	r2, r3
 800d24a:	d105      	bne.n	800d258 <tcp_pcb_remove+0x48>
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	68da      	ldr	r2, [r3, #12]
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	601a      	str	r2, [r3, #0]
 800d256:	e013      	b.n	800d280 <tcp_pcb_remove+0x70>
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	60fb      	str	r3, [r7, #12]
 800d25e:	e00c      	b.n	800d27a <tcp_pcb_remove+0x6a>
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	68db      	ldr	r3, [r3, #12]
 800d264:	683a      	ldr	r2, [r7, #0]
 800d266:	429a      	cmp	r2, r3
 800d268:	d104      	bne.n	800d274 <tcp_pcb_remove+0x64>
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	68da      	ldr	r2, [r3, #12]
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	60da      	str	r2, [r3, #12]
 800d272:	e005      	b.n	800d280 <tcp_pcb_remove+0x70>
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	68db      	ldr	r3, [r3, #12]
 800d278:	60fb      	str	r3, [r7, #12]
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d1ef      	bne.n	800d260 <tcp_pcb_remove+0x50>
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	2200      	movs	r2, #0
 800d284:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d286:	6838      	ldr	r0, [r7, #0]
 800d288:	f7ff ff72 	bl	800d170 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	7d1b      	ldrb	r3, [r3, #20]
 800d290:	2b0a      	cmp	r3, #10
 800d292:	d013      	beq.n	800d2bc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d298:	2b01      	cmp	r3, #1
 800d29a:	d00f      	beq.n	800d2bc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	8b5b      	ldrh	r3, [r3, #26]
 800d2a0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d009      	beq.n	800d2bc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	8b5b      	ldrh	r3, [r3, #26]
 800d2ac:	f043 0302 	orr.w	r3, r3, #2
 800d2b0:	b29a      	uxth	r2, r3
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d2b6:	6838      	ldr	r0, [r7, #0]
 800d2b8:	f002 ff7a 	bl	80101b0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	7d1b      	ldrb	r3, [r3, #20]
 800d2c0:	2b01      	cmp	r3, #1
 800d2c2:	d020      	beq.n	800d306 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d006      	beq.n	800d2da <tcp_pcb_remove+0xca>
 800d2cc:	4b13      	ldr	r3, [pc, #76]	; (800d31c <tcp_pcb_remove+0x10c>)
 800d2ce:	f640 0293 	movw	r2, #2195	; 0x893
 800d2d2:	4916      	ldr	r1, [pc, #88]	; (800d32c <tcp_pcb_remove+0x11c>)
 800d2d4:	4813      	ldr	r0, [pc, #76]	; (800d324 <tcp_pcb_remove+0x114>)
 800d2d6:	f009 ff47 	bl	8017168 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d006      	beq.n	800d2f0 <tcp_pcb_remove+0xe0>
 800d2e2:	4b0e      	ldr	r3, [pc, #56]	; (800d31c <tcp_pcb_remove+0x10c>)
 800d2e4:	f640 0294 	movw	r2, #2196	; 0x894
 800d2e8:	4911      	ldr	r1, [pc, #68]	; (800d330 <tcp_pcb_remove+0x120>)
 800d2ea:	480e      	ldr	r0, [pc, #56]	; (800d324 <tcp_pcb_remove+0x114>)
 800d2ec:	f009 ff3c 	bl	8017168 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d006      	beq.n	800d306 <tcp_pcb_remove+0xf6>
 800d2f8:	4b08      	ldr	r3, [pc, #32]	; (800d31c <tcp_pcb_remove+0x10c>)
 800d2fa:	f640 0296 	movw	r2, #2198	; 0x896
 800d2fe:	490d      	ldr	r1, [pc, #52]	; (800d334 <tcp_pcb_remove+0x124>)
 800d300:	4808      	ldr	r0, [pc, #32]	; (800d324 <tcp_pcb_remove+0x114>)
 800d302:	f009 ff31 	bl	8017168 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	2200      	movs	r2, #0
 800d30a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	2200      	movs	r2, #0
 800d310:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d312:	bf00      	nop
 800d314:	3710      	adds	r7, #16
 800d316:	46bd      	mov	sp, r7
 800d318:	bd80      	pop	{r7, pc}
 800d31a:	bf00      	nop
 800d31c:	080193f0 	.word	0x080193f0
 800d320:	08019a58 	.word	0x08019a58
 800d324:	08019434 	.word	0x08019434
 800d328:	08019a74 	.word	0x08019a74
 800d32c:	08019a94 	.word	0x08019a94
 800d330:	08019aac 	.word	0x08019aac
 800d334:	08019ac8 	.word	0x08019ac8

0800d338 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b082      	sub	sp, #8
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d106      	bne.n	800d354 <tcp_next_iss+0x1c>
 800d346:	4b0a      	ldr	r3, [pc, #40]	; (800d370 <tcp_next_iss+0x38>)
 800d348:	f640 02af 	movw	r2, #2223	; 0x8af
 800d34c:	4909      	ldr	r1, [pc, #36]	; (800d374 <tcp_next_iss+0x3c>)
 800d34e:	480a      	ldr	r0, [pc, #40]	; (800d378 <tcp_next_iss+0x40>)
 800d350:	f009 ff0a 	bl	8017168 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d354:	4b09      	ldr	r3, [pc, #36]	; (800d37c <tcp_next_iss+0x44>)
 800d356:	681a      	ldr	r2, [r3, #0]
 800d358:	4b09      	ldr	r3, [pc, #36]	; (800d380 <tcp_next_iss+0x48>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	4413      	add	r3, r2
 800d35e:	4a07      	ldr	r2, [pc, #28]	; (800d37c <tcp_next_iss+0x44>)
 800d360:	6013      	str	r3, [r2, #0]
  return iss;
 800d362:	4b06      	ldr	r3, [pc, #24]	; (800d37c <tcp_next_iss+0x44>)
 800d364:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d366:	4618      	mov	r0, r3
 800d368:	3708      	adds	r7, #8
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}
 800d36e:	bf00      	nop
 800d370:	080193f0 	.word	0x080193f0
 800d374:	08019ae0 	.word	0x08019ae0
 800d378:	08019434 	.word	0x08019434
 800d37c:	2000006c 	.word	0x2000006c
 800d380:	2000d9e8 	.word	0x2000d9e8

0800d384 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b086      	sub	sp, #24
 800d388:	af00      	add	r7, sp, #0
 800d38a:	4603      	mov	r3, r0
 800d38c:	60b9      	str	r1, [r7, #8]
 800d38e:	607a      	str	r2, [r7, #4]
 800d390:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d106      	bne.n	800d3a6 <tcp_eff_send_mss_netif+0x22>
 800d398:	4b14      	ldr	r3, [pc, #80]	; (800d3ec <tcp_eff_send_mss_netif+0x68>)
 800d39a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800d39e:	4914      	ldr	r1, [pc, #80]	; (800d3f0 <tcp_eff_send_mss_netif+0x6c>)
 800d3a0:	4814      	ldr	r0, [pc, #80]	; (800d3f4 <tcp_eff_send_mss_netif+0x70>)
 800d3a2:	f009 fee1 	bl	8017168 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d3a6:	68bb      	ldr	r3, [r7, #8]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d101      	bne.n	800d3b0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d3ac:	89fb      	ldrh	r3, [r7, #14]
 800d3ae:	e019      	b.n	800d3e4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d3b4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d3b6:	8afb      	ldrh	r3, [r7, #22]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d012      	beq.n	800d3e2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d3bc:	2328      	movs	r3, #40	; 0x28
 800d3be:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d3c0:	8afa      	ldrh	r2, [r7, #22]
 800d3c2:	8abb      	ldrh	r3, [r7, #20]
 800d3c4:	429a      	cmp	r2, r3
 800d3c6:	d904      	bls.n	800d3d2 <tcp_eff_send_mss_netif+0x4e>
 800d3c8:	8afa      	ldrh	r2, [r7, #22]
 800d3ca:	8abb      	ldrh	r3, [r7, #20]
 800d3cc:	1ad3      	subs	r3, r2, r3
 800d3ce:	b29b      	uxth	r3, r3
 800d3d0:	e000      	b.n	800d3d4 <tcp_eff_send_mss_netif+0x50>
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d3d6:	8a7a      	ldrh	r2, [r7, #18]
 800d3d8:	89fb      	ldrh	r3, [r7, #14]
 800d3da:	4293      	cmp	r3, r2
 800d3dc:	bf28      	it	cs
 800d3de:	4613      	movcs	r3, r2
 800d3e0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d3e2:	89fb      	ldrh	r3, [r7, #14]
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3718      	adds	r7, #24
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}
 800d3ec:	080193f0 	.word	0x080193f0
 800d3f0:	08019afc 	.word	0x08019afc
 800d3f4:	08019434 	.word	0x08019434

0800d3f8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b084      	sub	sp, #16
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
 800d400:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d11d      	bne.n	800d448 <tcp_netif_ip_addr_changed_pcblist+0x50>
 800d40c:	4b12      	ldr	r3, [pc, #72]	; (800d458 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d40e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800d412:	4912      	ldr	r1, [pc, #72]	; (800d45c <tcp_netif_ip_addr_changed_pcblist+0x64>)
 800d414:	4812      	ldr	r0, [pc, #72]	; (800d460 <tcp_netif_ip_addr_changed_pcblist+0x68>)
 800d416:	f009 fea7 	bl	8017168 <iprintf>

  while (pcb != NULL) {
 800d41a:	e015      	b.n	800d448 <tcp_netif_ip_addr_changed_pcblist+0x50>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	681a      	ldr	r2, [r3, #0]
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	429a      	cmp	r2, r3
 800d426:	d10c      	bne.n	800d442 <tcp_netif_ip_addr_changed_pcblist+0x4a>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	68db      	ldr	r3, [r3, #12]
 800d42c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
 800d42e:	68f9      	ldr	r1, [r7, #12]
 800d430:	480c      	ldr	r0, [pc, #48]	; (800d464 <tcp_netif_ip_addr_changed_pcblist+0x6c>)
 800d432:	f009 fe99 	bl	8017168 <iprintf>
      tcp_abort(pcb);
 800d436:	68f8      	ldr	r0, [r7, #12]
 800d438:	f7fe ffc2 	bl	800c3c0 <tcp_abort>
      pcb = next;
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	60fb      	str	r3, [r7, #12]
 800d440:	e002      	b.n	800d448 <tcp_netif_ip_addr_changed_pcblist+0x50>
    } else {
      pcb = pcb->next;
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	68db      	ldr	r3, [r3, #12]
 800d446:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d1e6      	bne.n	800d41c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d44e:	bf00      	nop
 800d450:	bf00      	nop
 800d452:	3710      	adds	r7, #16
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}
 800d458:	080193f0 	.word	0x080193f0
 800d45c:	08019b24 	.word	0x08019b24
 800d460:	08019434 	.word	0x08019434
 800d464:	08019b58 	.word	0x08019b58

0800d468 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b084      	sub	sp, #16
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
 800d470:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d02a      	beq.n	800d4ce <tcp_netif_ip_addr_changed+0x66>
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d026      	beq.n	800d4ce <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d480:	4b15      	ldr	r3, [pc, #84]	; (800d4d8 <tcp_netif_ip_addr_changed+0x70>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	4619      	mov	r1, r3
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f7ff ffb6 	bl	800d3f8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d48c:	4b13      	ldr	r3, [pc, #76]	; (800d4dc <tcp_netif_ip_addr_changed+0x74>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	4619      	mov	r1, r3
 800d492:	6878      	ldr	r0, [r7, #4]
 800d494:	f7ff ffb0 	bl	800d3f8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d017      	beq.n	800d4ce <tcp_netif_ip_addr_changed+0x66>
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d013      	beq.n	800d4ce <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d4a6:	4b0e      	ldr	r3, [pc, #56]	; (800d4e0 <tcp_netif_ip_addr_changed+0x78>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	60fb      	str	r3, [r7, #12]
 800d4ac:	e00c      	b.n	800d4c8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	681a      	ldr	r2, [r3, #0]
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	429a      	cmp	r2, r3
 800d4b8:	d103      	bne.n	800d4c2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	681a      	ldr	r2, [r3, #0]
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	68db      	ldr	r3, [r3, #12]
 800d4c6:	60fb      	str	r3, [r7, #12]
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d1ef      	bne.n	800d4ae <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d4ce:	bf00      	nop
 800d4d0:	3710      	adds	r7, #16
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}
 800d4d6:	bf00      	nop
 800d4d8:	2000d9f4 	.word	0x2000d9f4
 800d4dc:	2000d9ec 	.word	0x2000d9ec
 800d4e0:	2000d9f0 	.word	0x2000d9f0

0800d4e4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b082      	sub	sp, #8
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d007      	beq.n	800d504 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	f7ff fc37 	bl	800cd6c <tcp_segs_free>
    pcb->ooseq = NULL;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2200      	movs	r2, #0
 800d502:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d504:	bf00      	nop
 800d506:	3708      	adds	r7, #8
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd80      	pop	{r7, pc}

0800d50c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d50c:	b590      	push	{r4, r7, lr}
 800d50e:	b08d      	sub	sp, #52	; 0x34
 800d510:	af04      	add	r7, sp, #16
 800d512:	6078      	str	r0, [r7, #4]
 800d514:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d105      	bne.n	800d528 <tcp_input+0x1c>
 800d51c:	4b9b      	ldr	r3, [pc, #620]	; (800d78c <tcp_input+0x280>)
 800d51e:	2283      	movs	r2, #131	; 0x83
 800d520:	499b      	ldr	r1, [pc, #620]	; (800d790 <tcp_input+0x284>)
 800d522:	489c      	ldr	r0, [pc, #624]	; (800d794 <tcp_input+0x288>)
 800d524:	f009 fe20 	bl	8017168 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	685b      	ldr	r3, [r3, #4]
 800d52c:	4a9a      	ldr	r2, [pc, #616]	; (800d798 <tcp_input+0x28c>)
 800d52e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	895b      	ldrh	r3, [r3, #10]
 800d534:	2b13      	cmp	r3, #19
 800d536:	f240 83d1 	bls.w	800dcdc <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d53a:	4b98      	ldr	r3, [pc, #608]	; (800d79c <tcp_input+0x290>)
 800d53c:	695b      	ldr	r3, [r3, #20]
 800d53e:	4a97      	ldr	r2, [pc, #604]	; (800d79c <tcp_input+0x290>)
 800d540:	6812      	ldr	r2, [r2, #0]
 800d542:	4611      	mov	r1, r2
 800d544:	4618      	mov	r0, r3
 800d546:	f008 fd13 	bl	8015f70 <ip4_addr_isbroadcast_u32>
 800d54a:	4603      	mov	r3, r0
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	f040 83c7 	bne.w	800dce0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d552:	4b92      	ldr	r3, [pc, #584]	; (800d79c <tcp_input+0x290>)
 800d554:	695b      	ldr	r3, [r3, #20]
 800d556:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d55a:	2be0      	cmp	r3, #224	; 0xe0
 800d55c:	f000 83c0 	beq.w	800dce0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d560:	4b8d      	ldr	r3, [pc, #564]	; (800d798 <tcp_input+0x28c>)
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	899b      	ldrh	r3, [r3, #12]
 800d566:	b29b      	uxth	r3, r3
 800d568:	4618      	mov	r0, r3
 800d56a:	f7fc f849 	bl	8009600 <lwip_htons>
 800d56e:	4603      	mov	r3, r0
 800d570:	0b1b      	lsrs	r3, r3, #12
 800d572:	b29b      	uxth	r3, r3
 800d574:	b2db      	uxtb	r3, r3
 800d576:	009b      	lsls	r3, r3, #2
 800d578:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d57a:	7cbb      	ldrb	r3, [r7, #18]
 800d57c:	2b13      	cmp	r3, #19
 800d57e:	f240 83b1 	bls.w	800dce4 <tcp_input+0x7d8>
 800d582:	7cbb      	ldrb	r3, [r7, #18]
 800d584:	b29a      	uxth	r2, r3
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	891b      	ldrh	r3, [r3, #8]
 800d58a:	429a      	cmp	r2, r3
 800d58c:	f200 83aa 	bhi.w	800dce4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d590:	7cbb      	ldrb	r3, [r7, #18]
 800d592:	b29b      	uxth	r3, r3
 800d594:	3b14      	subs	r3, #20
 800d596:	b29a      	uxth	r2, r3
 800d598:	4b81      	ldr	r3, [pc, #516]	; (800d7a0 <tcp_input+0x294>)
 800d59a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d59c:	4b81      	ldr	r3, [pc, #516]	; (800d7a4 <tcp_input+0x298>)
 800d59e:	2200      	movs	r2, #0
 800d5a0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	895a      	ldrh	r2, [r3, #10]
 800d5a6:	7cbb      	ldrb	r3, [r7, #18]
 800d5a8:	b29b      	uxth	r3, r3
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	d309      	bcc.n	800d5c2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d5ae:	4b7c      	ldr	r3, [pc, #496]	; (800d7a0 <tcp_input+0x294>)
 800d5b0:	881a      	ldrh	r2, [r3, #0]
 800d5b2:	4b7d      	ldr	r3, [pc, #500]	; (800d7a8 <tcp_input+0x29c>)
 800d5b4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d5b6:	7cbb      	ldrb	r3, [r7, #18]
 800d5b8:	4619      	mov	r1, r3
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f7fd ff7c 	bl	800b4b8 <pbuf_remove_header>
 800d5c0:	e04e      	b.n	800d660 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d105      	bne.n	800d5d6 <tcp_input+0xca>
 800d5ca:	4b70      	ldr	r3, [pc, #448]	; (800d78c <tcp_input+0x280>)
 800d5cc:	22c2      	movs	r2, #194	; 0xc2
 800d5ce:	4977      	ldr	r1, [pc, #476]	; (800d7ac <tcp_input+0x2a0>)
 800d5d0:	4870      	ldr	r0, [pc, #448]	; (800d794 <tcp_input+0x288>)
 800d5d2:	f009 fdc9 	bl	8017168 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d5d6:	2114      	movs	r1, #20
 800d5d8:	6878      	ldr	r0, [r7, #4]
 800d5da:	f7fd ff6d 	bl	800b4b8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	895a      	ldrh	r2, [r3, #10]
 800d5e2:	4b71      	ldr	r3, [pc, #452]	; (800d7a8 <tcp_input+0x29c>)
 800d5e4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d5e6:	4b6e      	ldr	r3, [pc, #440]	; (800d7a0 <tcp_input+0x294>)
 800d5e8:	881a      	ldrh	r2, [r3, #0]
 800d5ea:	4b6f      	ldr	r3, [pc, #444]	; (800d7a8 <tcp_input+0x29c>)
 800d5ec:	881b      	ldrh	r3, [r3, #0]
 800d5ee:	1ad3      	subs	r3, r2, r3
 800d5f0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d5f2:	4b6d      	ldr	r3, [pc, #436]	; (800d7a8 <tcp_input+0x29c>)
 800d5f4:	881b      	ldrh	r3, [r3, #0]
 800d5f6:	4619      	mov	r1, r3
 800d5f8:	6878      	ldr	r0, [r7, #4]
 800d5fa:	f7fd ff5d 	bl	800b4b8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	895b      	ldrh	r3, [r3, #10]
 800d604:	8a3a      	ldrh	r2, [r7, #16]
 800d606:	429a      	cmp	r2, r3
 800d608:	f200 836e 	bhi.w	800dce8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	685b      	ldr	r3, [r3, #4]
 800d612:	4a64      	ldr	r2, [pc, #400]	; (800d7a4 <tcp_input+0x298>)
 800d614:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	8a3a      	ldrh	r2, [r7, #16]
 800d61c:	4611      	mov	r1, r2
 800d61e:	4618      	mov	r0, r3
 800d620:	f7fd ff4a 	bl	800b4b8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	891a      	ldrh	r2, [r3, #8]
 800d628:	8a3b      	ldrh	r3, [r7, #16]
 800d62a:	1ad3      	subs	r3, r2, r3
 800d62c:	b29a      	uxth	r2, r3
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	895b      	ldrh	r3, [r3, #10]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d005      	beq.n	800d646 <tcp_input+0x13a>
 800d63a:	4b54      	ldr	r3, [pc, #336]	; (800d78c <tcp_input+0x280>)
 800d63c:	22df      	movs	r2, #223	; 0xdf
 800d63e:	495c      	ldr	r1, [pc, #368]	; (800d7b0 <tcp_input+0x2a4>)
 800d640:	4854      	ldr	r0, [pc, #336]	; (800d794 <tcp_input+0x288>)
 800d642:	f009 fd91 	bl	8017168 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	891a      	ldrh	r2, [r3, #8]
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	891b      	ldrh	r3, [r3, #8]
 800d650:	429a      	cmp	r2, r3
 800d652:	d005      	beq.n	800d660 <tcp_input+0x154>
 800d654:	4b4d      	ldr	r3, [pc, #308]	; (800d78c <tcp_input+0x280>)
 800d656:	22e0      	movs	r2, #224	; 0xe0
 800d658:	4956      	ldr	r1, [pc, #344]	; (800d7b4 <tcp_input+0x2a8>)
 800d65a:	484e      	ldr	r0, [pc, #312]	; (800d794 <tcp_input+0x288>)
 800d65c:	f009 fd84 	bl	8017168 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d660:	4b4d      	ldr	r3, [pc, #308]	; (800d798 <tcp_input+0x28c>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	881b      	ldrh	r3, [r3, #0]
 800d666:	b29b      	uxth	r3, r3
 800d668:	4a4b      	ldr	r2, [pc, #300]	; (800d798 <tcp_input+0x28c>)
 800d66a:	6814      	ldr	r4, [r2, #0]
 800d66c:	4618      	mov	r0, r3
 800d66e:	f7fb ffc7 	bl	8009600 <lwip_htons>
 800d672:	4603      	mov	r3, r0
 800d674:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d676:	4b48      	ldr	r3, [pc, #288]	; (800d798 <tcp_input+0x28c>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	885b      	ldrh	r3, [r3, #2]
 800d67c:	b29b      	uxth	r3, r3
 800d67e:	4a46      	ldr	r2, [pc, #280]	; (800d798 <tcp_input+0x28c>)
 800d680:	6814      	ldr	r4, [r2, #0]
 800d682:	4618      	mov	r0, r3
 800d684:	f7fb ffbc 	bl	8009600 <lwip_htons>
 800d688:	4603      	mov	r3, r0
 800d68a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d68c:	4b42      	ldr	r3, [pc, #264]	; (800d798 <tcp_input+0x28c>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	685b      	ldr	r3, [r3, #4]
 800d692:	4a41      	ldr	r2, [pc, #260]	; (800d798 <tcp_input+0x28c>)
 800d694:	6814      	ldr	r4, [r2, #0]
 800d696:	4618      	mov	r0, r3
 800d698:	f7fb ffc7 	bl	800962a <lwip_htonl>
 800d69c:	4603      	mov	r3, r0
 800d69e:	6063      	str	r3, [r4, #4]
 800d6a0:	6863      	ldr	r3, [r4, #4]
 800d6a2:	4a45      	ldr	r2, [pc, #276]	; (800d7b8 <tcp_input+0x2ac>)
 800d6a4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d6a6:	4b3c      	ldr	r3, [pc, #240]	; (800d798 <tcp_input+0x28c>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	689b      	ldr	r3, [r3, #8]
 800d6ac:	4a3a      	ldr	r2, [pc, #232]	; (800d798 <tcp_input+0x28c>)
 800d6ae:	6814      	ldr	r4, [r2, #0]
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f7fb ffba 	bl	800962a <lwip_htonl>
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	60a3      	str	r3, [r4, #8]
 800d6ba:	68a3      	ldr	r3, [r4, #8]
 800d6bc:	4a3f      	ldr	r2, [pc, #252]	; (800d7bc <tcp_input+0x2b0>)
 800d6be:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d6c0:	4b35      	ldr	r3, [pc, #212]	; (800d798 <tcp_input+0x28c>)
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	89db      	ldrh	r3, [r3, #14]
 800d6c6:	b29b      	uxth	r3, r3
 800d6c8:	4a33      	ldr	r2, [pc, #204]	; (800d798 <tcp_input+0x28c>)
 800d6ca:	6814      	ldr	r4, [r2, #0]
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f7fb ff97 	bl	8009600 <lwip_htons>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800d6d6:	4b30      	ldr	r3, [pc, #192]	; (800d798 <tcp_input+0x28c>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	899b      	ldrh	r3, [r3, #12]
 800d6dc:	b29b      	uxth	r3, r3
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f7fb ff8e 	bl	8009600 <lwip_htons>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	b2db      	uxtb	r3, r3
 800d6e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d6ec:	b2da      	uxtb	r2, r3
 800d6ee:	4b34      	ldr	r3, [pc, #208]	; (800d7c0 <tcp_input+0x2b4>)
 800d6f0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	891a      	ldrh	r2, [r3, #8]
 800d6f6:	4b33      	ldr	r3, [pc, #204]	; (800d7c4 <tcp_input+0x2b8>)
 800d6f8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800d6fa:	4b31      	ldr	r3, [pc, #196]	; (800d7c0 <tcp_input+0x2b4>)
 800d6fc:	781b      	ldrb	r3, [r3, #0]
 800d6fe:	f003 0303 	and.w	r3, r3, #3
 800d702:	2b00      	cmp	r3, #0
 800d704:	d00c      	beq.n	800d720 <tcp_input+0x214>
    tcplen++;
 800d706:	4b2f      	ldr	r3, [pc, #188]	; (800d7c4 <tcp_input+0x2b8>)
 800d708:	881b      	ldrh	r3, [r3, #0]
 800d70a:	3301      	adds	r3, #1
 800d70c:	b29a      	uxth	r2, r3
 800d70e:	4b2d      	ldr	r3, [pc, #180]	; (800d7c4 <tcp_input+0x2b8>)
 800d710:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	891a      	ldrh	r2, [r3, #8]
 800d716:	4b2b      	ldr	r3, [pc, #172]	; (800d7c4 <tcp_input+0x2b8>)
 800d718:	881b      	ldrh	r3, [r3, #0]
 800d71a:	429a      	cmp	r2, r3
 800d71c:	f200 82e6 	bhi.w	800dcec <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800d720:	2300      	movs	r3, #0
 800d722:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d724:	4b28      	ldr	r3, [pc, #160]	; (800d7c8 <tcp_input+0x2bc>)
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	61bb      	str	r3, [r7, #24]
 800d72a:	e09d      	b.n	800d868 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d72c:	69bb      	ldr	r3, [r7, #24]
 800d72e:	7d1b      	ldrb	r3, [r3, #20]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d105      	bne.n	800d740 <tcp_input+0x234>
 800d734:	4b15      	ldr	r3, [pc, #84]	; (800d78c <tcp_input+0x280>)
 800d736:	22fb      	movs	r2, #251	; 0xfb
 800d738:	4924      	ldr	r1, [pc, #144]	; (800d7cc <tcp_input+0x2c0>)
 800d73a:	4816      	ldr	r0, [pc, #88]	; (800d794 <tcp_input+0x288>)
 800d73c:	f009 fd14 	bl	8017168 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d740:	69bb      	ldr	r3, [r7, #24]
 800d742:	7d1b      	ldrb	r3, [r3, #20]
 800d744:	2b0a      	cmp	r3, #10
 800d746:	d105      	bne.n	800d754 <tcp_input+0x248>
 800d748:	4b10      	ldr	r3, [pc, #64]	; (800d78c <tcp_input+0x280>)
 800d74a:	22fc      	movs	r2, #252	; 0xfc
 800d74c:	4920      	ldr	r1, [pc, #128]	; (800d7d0 <tcp_input+0x2c4>)
 800d74e:	4811      	ldr	r0, [pc, #68]	; (800d794 <tcp_input+0x288>)
 800d750:	f009 fd0a 	bl	8017168 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d754:	69bb      	ldr	r3, [r7, #24]
 800d756:	7d1b      	ldrb	r3, [r3, #20]
 800d758:	2b01      	cmp	r3, #1
 800d75a:	d105      	bne.n	800d768 <tcp_input+0x25c>
 800d75c:	4b0b      	ldr	r3, [pc, #44]	; (800d78c <tcp_input+0x280>)
 800d75e:	22fd      	movs	r2, #253	; 0xfd
 800d760:	491c      	ldr	r1, [pc, #112]	; (800d7d4 <tcp_input+0x2c8>)
 800d762:	480c      	ldr	r0, [pc, #48]	; (800d794 <tcp_input+0x288>)
 800d764:	f009 fd00 	bl	8017168 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d768:	69bb      	ldr	r3, [r7, #24]
 800d76a:	7a1b      	ldrb	r3, [r3, #8]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d033      	beq.n	800d7d8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d770:	69bb      	ldr	r3, [r7, #24]
 800d772:	7a1a      	ldrb	r2, [r3, #8]
 800d774:	4b09      	ldr	r3, [pc, #36]	; (800d79c <tcp_input+0x290>)
 800d776:	685b      	ldr	r3, [r3, #4]
 800d778:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d77c:	3301      	adds	r3, #1
 800d77e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d780:	429a      	cmp	r2, r3
 800d782:	d029      	beq.n	800d7d8 <tcp_input+0x2cc>
      prev = pcb;
 800d784:	69bb      	ldr	r3, [r7, #24]
 800d786:	61fb      	str	r3, [r7, #28]
      continue;
 800d788:	e06b      	b.n	800d862 <tcp_input+0x356>
 800d78a:	bf00      	nop
 800d78c:	08019b80 	.word	0x08019b80
 800d790:	08019bb4 	.word	0x08019bb4
 800d794:	08019bcc 	.word	0x08019bcc
 800d798:	2000da14 	.word	0x2000da14
 800d79c:	2000a0d0 	.word	0x2000a0d0
 800d7a0:	2000da18 	.word	0x2000da18
 800d7a4:	2000da1c 	.word	0x2000da1c
 800d7a8:	2000da1a 	.word	0x2000da1a
 800d7ac:	08019bf4 	.word	0x08019bf4
 800d7b0:	08019c04 	.word	0x08019c04
 800d7b4:	08019c10 	.word	0x08019c10
 800d7b8:	2000da24 	.word	0x2000da24
 800d7bc:	2000da28 	.word	0x2000da28
 800d7c0:	2000da30 	.word	0x2000da30
 800d7c4:	2000da2e 	.word	0x2000da2e
 800d7c8:	2000d9f4 	.word	0x2000d9f4
 800d7cc:	08019c30 	.word	0x08019c30
 800d7d0:	08019c58 	.word	0x08019c58
 800d7d4:	08019c84 	.word	0x08019c84
    }

    if (pcb->remote_port == tcphdr->src &&
 800d7d8:	69bb      	ldr	r3, [r7, #24]
 800d7da:	8b1a      	ldrh	r2, [r3, #24]
 800d7dc:	4b72      	ldr	r3, [pc, #456]	; (800d9a8 <tcp_input+0x49c>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	881b      	ldrh	r3, [r3, #0]
 800d7e2:	b29b      	uxth	r3, r3
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	d13a      	bne.n	800d85e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800d7e8:	69bb      	ldr	r3, [r7, #24]
 800d7ea:	8ada      	ldrh	r2, [r3, #22]
 800d7ec:	4b6e      	ldr	r3, [pc, #440]	; (800d9a8 <tcp_input+0x49c>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	885b      	ldrh	r3, [r3, #2]
 800d7f2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800d7f4:	429a      	cmp	r2, r3
 800d7f6:	d132      	bne.n	800d85e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d7f8:	69bb      	ldr	r3, [r7, #24]
 800d7fa:	685a      	ldr	r2, [r3, #4]
 800d7fc:	4b6b      	ldr	r3, [pc, #428]	; (800d9ac <tcp_input+0x4a0>)
 800d7fe:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800d800:	429a      	cmp	r2, r3
 800d802:	d12c      	bne.n	800d85e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d804:	69bb      	ldr	r3, [r7, #24]
 800d806:	681a      	ldr	r2, [r3, #0]
 800d808:	4b68      	ldr	r3, [pc, #416]	; (800d9ac <tcp_input+0x4a0>)
 800d80a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d80c:	429a      	cmp	r2, r3
 800d80e:	d126      	bne.n	800d85e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d810:	69bb      	ldr	r3, [r7, #24]
 800d812:	68db      	ldr	r3, [r3, #12]
 800d814:	69ba      	ldr	r2, [r7, #24]
 800d816:	429a      	cmp	r2, r3
 800d818:	d106      	bne.n	800d828 <tcp_input+0x31c>
 800d81a:	4b65      	ldr	r3, [pc, #404]	; (800d9b0 <tcp_input+0x4a4>)
 800d81c:	f240 120d 	movw	r2, #269	; 0x10d
 800d820:	4964      	ldr	r1, [pc, #400]	; (800d9b4 <tcp_input+0x4a8>)
 800d822:	4865      	ldr	r0, [pc, #404]	; (800d9b8 <tcp_input+0x4ac>)
 800d824:	f009 fca0 	bl	8017168 <iprintf>
      if (prev != NULL) {
 800d828:	69fb      	ldr	r3, [r7, #28]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d00a      	beq.n	800d844 <tcp_input+0x338>
        prev->next = pcb->next;
 800d82e:	69bb      	ldr	r3, [r7, #24]
 800d830:	68da      	ldr	r2, [r3, #12]
 800d832:	69fb      	ldr	r3, [r7, #28]
 800d834:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800d836:	4b61      	ldr	r3, [pc, #388]	; (800d9bc <tcp_input+0x4b0>)
 800d838:	681a      	ldr	r2, [r3, #0]
 800d83a:	69bb      	ldr	r3, [r7, #24]
 800d83c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800d83e:	4a5f      	ldr	r2, [pc, #380]	; (800d9bc <tcp_input+0x4b0>)
 800d840:	69bb      	ldr	r3, [r7, #24]
 800d842:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d844:	69bb      	ldr	r3, [r7, #24]
 800d846:	68db      	ldr	r3, [r3, #12]
 800d848:	69ba      	ldr	r2, [r7, #24]
 800d84a:	429a      	cmp	r2, r3
 800d84c:	d111      	bne.n	800d872 <tcp_input+0x366>
 800d84e:	4b58      	ldr	r3, [pc, #352]	; (800d9b0 <tcp_input+0x4a4>)
 800d850:	f240 1215 	movw	r2, #277	; 0x115
 800d854:	495a      	ldr	r1, [pc, #360]	; (800d9c0 <tcp_input+0x4b4>)
 800d856:	4858      	ldr	r0, [pc, #352]	; (800d9b8 <tcp_input+0x4ac>)
 800d858:	f009 fc86 	bl	8017168 <iprintf>
      break;
 800d85c:	e009      	b.n	800d872 <tcp_input+0x366>
    }
    prev = pcb;
 800d85e:	69bb      	ldr	r3, [r7, #24]
 800d860:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d862:	69bb      	ldr	r3, [r7, #24]
 800d864:	68db      	ldr	r3, [r3, #12]
 800d866:	61bb      	str	r3, [r7, #24]
 800d868:	69bb      	ldr	r3, [r7, #24]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	f47f af5e 	bne.w	800d72c <tcp_input+0x220>
 800d870:	e000      	b.n	800d874 <tcp_input+0x368>
      break;
 800d872:	bf00      	nop
  }

  if (pcb == NULL) {
 800d874:	69bb      	ldr	r3, [r7, #24]
 800d876:	2b00      	cmp	r3, #0
 800d878:	f040 80aa 	bne.w	800d9d0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d87c:	4b51      	ldr	r3, [pc, #324]	; (800d9c4 <tcp_input+0x4b8>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	61bb      	str	r3, [r7, #24]
 800d882:	e03f      	b.n	800d904 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d884:	69bb      	ldr	r3, [r7, #24]
 800d886:	7d1b      	ldrb	r3, [r3, #20]
 800d888:	2b0a      	cmp	r3, #10
 800d88a:	d006      	beq.n	800d89a <tcp_input+0x38e>
 800d88c:	4b48      	ldr	r3, [pc, #288]	; (800d9b0 <tcp_input+0x4a4>)
 800d88e:	f240 121f 	movw	r2, #287	; 0x11f
 800d892:	494d      	ldr	r1, [pc, #308]	; (800d9c8 <tcp_input+0x4bc>)
 800d894:	4848      	ldr	r0, [pc, #288]	; (800d9b8 <tcp_input+0x4ac>)
 800d896:	f009 fc67 	bl	8017168 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d89a:	69bb      	ldr	r3, [r7, #24]
 800d89c:	7a1b      	ldrb	r3, [r3, #8]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d009      	beq.n	800d8b6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d8a2:	69bb      	ldr	r3, [r7, #24]
 800d8a4:	7a1a      	ldrb	r2, [r3, #8]
 800d8a6:	4b41      	ldr	r3, [pc, #260]	; (800d9ac <tcp_input+0x4a0>)
 800d8a8:	685b      	ldr	r3, [r3, #4]
 800d8aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d8ae:	3301      	adds	r3, #1
 800d8b0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	d122      	bne.n	800d8fc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800d8b6:	69bb      	ldr	r3, [r7, #24]
 800d8b8:	8b1a      	ldrh	r2, [r3, #24]
 800d8ba:	4b3b      	ldr	r3, [pc, #236]	; (800d9a8 <tcp_input+0x49c>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	881b      	ldrh	r3, [r3, #0]
 800d8c0:	b29b      	uxth	r3, r3
 800d8c2:	429a      	cmp	r2, r3
 800d8c4:	d11b      	bne.n	800d8fe <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800d8c6:	69bb      	ldr	r3, [r7, #24]
 800d8c8:	8ada      	ldrh	r2, [r3, #22]
 800d8ca:	4b37      	ldr	r3, [pc, #220]	; (800d9a8 <tcp_input+0x49c>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	885b      	ldrh	r3, [r3, #2]
 800d8d0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800d8d2:	429a      	cmp	r2, r3
 800d8d4:	d113      	bne.n	800d8fe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d8d6:	69bb      	ldr	r3, [r7, #24]
 800d8d8:	685a      	ldr	r2, [r3, #4]
 800d8da:	4b34      	ldr	r3, [pc, #208]	; (800d9ac <tcp_input+0x4a0>)
 800d8dc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800d8de:	429a      	cmp	r2, r3
 800d8e0:	d10d      	bne.n	800d8fe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d8e2:	69bb      	ldr	r3, [r7, #24]
 800d8e4:	681a      	ldr	r2, [r3, #0]
 800d8e6:	4b31      	ldr	r3, [pc, #196]	; (800d9ac <tcp_input+0x4a0>)
 800d8e8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d8ea:	429a      	cmp	r2, r3
 800d8ec:	d107      	bne.n	800d8fe <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800d8ee:	69b8      	ldr	r0, [r7, #24]
 800d8f0:	f000 fb56 	bl	800dfa0 <tcp_timewait_input>
        }
        pbuf_free(p);
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f7fd fe65 	bl	800b5c4 <pbuf_free>
        return;
 800d8fa:	e1fd      	b.n	800dcf8 <tcp_input+0x7ec>
        continue;
 800d8fc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d8fe:	69bb      	ldr	r3, [r7, #24]
 800d900:	68db      	ldr	r3, [r3, #12]
 800d902:	61bb      	str	r3, [r7, #24]
 800d904:	69bb      	ldr	r3, [r7, #24]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d1bc      	bne.n	800d884 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800d90a:	2300      	movs	r3, #0
 800d90c:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d90e:	4b2f      	ldr	r3, [pc, #188]	; (800d9cc <tcp_input+0x4c0>)
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	617b      	str	r3, [r7, #20]
 800d914:	e02a      	b.n	800d96c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d916:	697b      	ldr	r3, [r7, #20]
 800d918:	7a1b      	ldrb	r3, [r3, #8]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d00c      	beq.n	800d938 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d91e:	697b      	ldr	r3, [r7, #20]
 800d920:	7a1a      	ldrb	r2, [r3, #8]
 800d922:	4b22      	ldr	r3, [pc, #136]	; (800d9ac <tcp_input+0x4a0>)
 800d924:	685b      	ldr	r3, [r3, #4]
 800d926:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d92a:	3301      	adds	r3, #1
 800d92c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d92e:	429a      	cmp	r2, r3
 800d930:	d002      	beq.n	800d938 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	61fb      	str	r3, [r7, #28]
        continue;
 800d936:	e016      	b.n	800d966 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800d938:	697b      	ldr	r3, [r7, #20]
 800d93a:	8ada      	ldrh	r2, [r3, #22]
 800d93c:	4b1a      	ldr	r3, [pc, #104]	; (800d9a8 <tcp_input+0x49c>)
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	885b      	ldrh	r3, [r3, #2]
 800d942:	b29b      	uxth	r3, r3
 800d944:	429a      	cmp	r2, r3
 800d946:	d10c      	bne.n	800d962 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800d948:	697b      	ldr	r3, [r7, #20]
 800d94a:	681a      	ldr	r2, [r3, #0]
 800d94c:	4b17      	ldr	r3, [pc, #92]	; (800d9ac <tcp_input+0x4a0>)
 800d94e:	695b      	ldr	r3, [r3, #20]
 800d950:	429a      	cmp	r2, r3
 800d952:	d00f      	beq.n	800d974 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800d954:	697b      	ldr	r3, [r7, #20]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d00d      	beq.n	800d976 <tcp_input+0x46a>
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d009      	beq.n	800d976 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800d962:	697b      	ldr	r3, [r7, #20]
 800d964:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	68db      	ldr	r3, [r3, #12]
 800d96a:	617b      	str	r3, [r7, #20]
 800d96c:	697b      	ldr	r3, [r7, #20]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d1d1      	bne.n	800d916 <tcp_input+0x40a>
 800d972:	e000      	b.n	800d976 <tcp_input+0x46a>
            break;
 800d974:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800d976:	697b      	ldr	r3, [r7, #20]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d029      	beq.n	800d9d0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800d97c:	69fb      	ldr	r3, [r7, #28]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d00a      	beq.n	800d998 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	68da      	ldr	r2, [r3, #12]
 800d986:	69fb      	ldr	r3, [r7, #28]
 800d988:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800d98a:	4b10      	ldr	r3, [pc, #64]	; (800d9cc <tcp_input+0x4c0>)
 800d98c:	681a      	ldr	r2, [r3, #0]
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800d992:	4a0e      	ldr	r2, [pc, #56]	; (800d9cc <tcp_input+0x4c0>)
 800d994:	697b      	ldr	r3, [r7, #20]
 800d996:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800d998:	6978      	ldr	r0, [r7, #20]
 800d99a:	f000 fa03 	bl	800dda4 <tcp_listen_input>
      }
      pbuf_free(p);
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f7fd fe10 	bl	800b5c4 <pbuf_free>
      return;
 800d9a4:	e1a8      	b.n	800dcf8 <tcp_input+0x7ec>
 800d9a6:	bf00      	nop
 800d9a8:	2000da14 	.word	0x2000da14
 800d9ac:	2000a0d0 	.word	0x2000a0d0
 800d9b0:	08019b80 	.word	0x08019b80
 800d9b4:	08019cac 	.word	0x08019cac
 800d9b8:	08019bcc 	.word	0x08019bcc
 800d9bc:	2000d9f4 	.word	0x2000d9f4
 800d9c0:	08019cd8 	.word	0x08019cd8
 800d9c4:	2000d9f8 	.word	0x2000d9f8
 800d9c8:	08019d04 	.word	0x08019d04
 800d9cc:	2000d9f0 	.word	0x2000d9f0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800d9d0:	69bb      	ldr	r3, [r7, #24]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	f000 8158 	beq.w	800dc88 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800d9d8:	4b95      	ldr	r3, [pc, #596]	; (800dc30 <tcp_input+0x724>)
 800d9da:	2200      	movs	r2, #0
 800d9dc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	891a      	ldrh	r2, [r3, #8]
 800d9e2:	4b93      	ldr	r3, [pc, #588]	; (800dc30 <tcp_input+0x724>)
 800d9e4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800d9e6:	4a92      	ldr	r2, [pc, #584]	; (800dc30 <tcp_input+0x724>)
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800d9ec:	4b91      	ldr	r3, [pc, #580]	; (800dc34 <tcp_input+0x728>)
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	4a8f      	ldr	r2, [pc, #572]	; (800dc30 <tcp_input+0x724>)
 800d9f2:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 800d9f4:	4b90      	ldr	r3, [pc, #576]	; (800dc38 <tcp_input+0x72c>)
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800d9fa:	4b90      	ldr	r3, [pc, #576]	; (800dc3c <tcp_input+0x730>)
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800da00:	4b8f      	ldr	r3, [pc, #572]	; (800dc40 <tcp_input+0x734>)
 800da02:	2200      	movs	r2, #0
 800da04:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800da06:	4b8f      	ldr	r3, [pc, #572]	; (800dc44 <tcp_input+0x738>)
 800da08:	781b      	ldrb	r3, [r3, #0]
 800da0a:	f003 0308 	and.w	r3, r3, #8
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d006      	beq.n	800da20 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	7b5b      	ldrb	r3, [r3, #13]
 800da16:	f043 0301 	orr.w	r3, r3, #1
 800da1a:	b2da      	uxtb	r2, r3
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800da20:	69bb      	ldr	r3, [r7, #24]
 800da22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800da24:	2b00      	cmp	r3, #0
 800da26:	d017      	beq.n	800da58 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800da28:	69b8      	ldr	r0, [r7, #24]
 800da2a:	f7ff f923 	bl	800cc74 <tcp_process_refused_data>
 800da2e:	4603      	mov	r3, r0
 800da30:	f113 0f0d 	cmn.w	r3, #13
 800da34:	d007      	beq.n	800da46 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800da36:	69bb      	ldr	r3, [r7, #24]
 800da38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d00c      	beq.n	800da58 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800da3e:	4b82      	ldr	r3, [pc, #520]	; (800dc48 <tcp_input+0x73c>)
 800da40:	881b      	ldrh	r3, [r3, #0]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d008      	beq.n	800da58 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800da46:	69bb      	ldr	r3, [r7, #24]
 800da48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	f040 80e3 	bne.w	800dc16 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800da50:	69b8      	ldr	r0, [r7, #24]
 800da52:	f003 f9bf 	bl	8010dd4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800da56:	e0de      	b.n	800dc16 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800da58:	4a7c      	ldr	r2, [pc, #496]	; (800dc4c <tcp_input+0x740>)
 800da5a:	69bb      	ldr	r3, [r7, #24]
 800da5c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800da5e:	69b8      	ldr	r0, [r7, #24]
 800da60:	f000 fb18 	bl	800e094 <tcp_process>
 800da64:	4603      	mov	r3, r0
 800da66:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800da68:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800da6c:	f113 0f0d 	cmn.w	r3, #13
 800da70:	f000 80d3 	beq.w	800dc1a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800da74:	4b71      	ldr	r3, [pc, #452]	; (800dc3c <tcp_input+0x730>)
 800da76:	781b      	ldrb	r3, [r3, #0]
 800da78:	f003 0308 	and.w	r3, r3, #8
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d015      	beq.n	800daac <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800da80:	69bb      	ldr	r3, [r7, #24]
 800da82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da86:	2b00      	cmp	r3, #0
 800da88:	d008      	beq.n	800da9c <tcp_input+0x590>
 800da8a:	69bb      	ldr	r3, [r7, #24]
 800da8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da90:	69ba      	ldr	r2, [r7, #24]
 800da92:	6912      	ldr	r2, [r2, #16]
 800da94:	f06f 010d 	mvn.w	r1, #13
 800da98:	4610      	mov	r0, r2
 800da9a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800da9c:	69b9      	ldr	r1, [r7, #24]
 800da9e:	486c      	ldr	r0, [pc, #432]	; (800dc50 <tcp_input+0x744>)
 800daa0:	f7ff fbb6 	bl	800d210 <tcp_pcb_remove>
        tcp_free(pcb);
 800daa4:	69b8      	ldr	r0, [r7, #24]
 800daa6:	f7fe f9a3 	bl	800bdf0 <tcp_free>
 800daaa:	e0da      	b.n	800dc62 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800daac:	2300      	movs	r3, #0
 800daae:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800dab0:	4b63      	ldr	r3, [pc, #396]	; (800dc40 <tcp_input+0x734>)
 800dab2:	881b      	ldrh	r3, [r3, #0]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d01d      	beq.n	800daf4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800dab8:	4b61      	ldr	r3, [pc, #388]	; (800dc40 <tcp_input+0x734>)
 800daba:	881b      	ldrh	r3, [r3, #0]
 800dabc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800dabe:	69bb      	ldr	r3, [r7, #24]
 800dac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d00a      	beq.n	800dade <tcp_input+0x5d2>
 800dac8:	69bb      	ldr	r3, [r7, #24]
 800daca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dace:	69ba      	ldr	r2, [r7, #24]
 800dad0:	6910      	ldr	r0, [r2, #16]
 800dad2:	89fa      	ldrh	r2, [r7, #14]
 800dad4:	69b9      	ldr	r1, [r7, #24]
 800dad6:	4798      	blx	r3
 800dad8:	4603      	mov	r3, r0
 800dada:	74fb      	strb	r3, [r7, #19]
 800dadc:	e001      	b.n	800dae2 <tcp_input+0x5d6>
 800dade:	2300      	movs	r3, #0
 800dae0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800dae2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dae6:	f113 0f0d 	cmn.w	r3, #13
 800daea:	f000 8098 	beq.w	800dc1e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800daee:	4b54      	ldr	r3, [pc, #336]	; (800dc40 <tcp_input+0x734>)
 800daf0:	2200      	movs	r2, #0
 800daf2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800daf4:	69b8      	ldr	r0, [r7, #24]
 800daf6:	f000 f915 	bl	800dd24 <tcp_input_delayed_close>
 800dafa:	4603      	mov	r3, r0
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	f040 8090 	bne.w	800dc22 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800db02:	4b4d      	ldr	r3, [pc, #308]	; (800dc38 <tcp_input+0x72c>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d041      	beq.n	800db8e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800db0a:	69bb      	ldr	r3, [r7, #24]
 800db0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d006      	beq.n	800db20 <tcp_input+0x614>
 800db12:	4b50      	ldr	r3, [pc, #320]	; (800dc54 <tcp_input+0x748>)
 800db14:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800db18:	494f      	ldr	r1, [pc, #316]	; (800dc58 <tcp_input+0x74c>)
 800db1a:	4850      	ldr	r0, [pc, #320]	; (800dc5c <tcp_input+0x750>)
 800db1c:	f009 fb24 	bl	8017168 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800db20:	69bb      	ldr	r3, [r7, #24]
 800db22:	8b5b      	ldrh	r3, [r3, #26]
 800db24:	f003 0310 	and.w	r3, r3, #16
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d008      	beq.n	800db3e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800db2c:	4b42      	ldr	r3, [pc, #264]	; (800dc38 <tcp_input+0x72c>)
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	4618      	mov	r0, r3
 800db32:	f7fd fd47 	bl	800b5c4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800db36:	69b8      	ldr	r0, [r7, #24]
 800db38:	f7fe fc42 	bl	800c3c0 <tcp_abort>
            goto aborted;
 800db3c:	e091      	b.n	800dc62 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800db3e:	69bb      	ldr	r3, [r7, #24]
 800db40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db44:	2b00      	cmp	r3, #0
 800db46:	d00c      	beq.n	800db62 <tcp_input+0x656>
 800db48:	69bb      	ldr	r3, [r7, #24]
 800db4a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800db4e:	69bb      	ldr	r3, [r7, #24]
 800db50:	6918      	ldr	r0, [r3, #16]
 800db52:	4b39      	ldr	r3, [pc, #228]	; (800dc38 <tcp_input+0x72c>)
 800db54:	681a      	ldr	r2, [r3, #0]
 800db56:	2300      	movs	r3, #0
 800db58:	69b9      	ldr	r1, [r7, #24]
 800db5a:	47a0      	blx	r4
 800db5c:	4603      	mov	r3, r0
 800db5e:	74fb      	strb	r3, [r7, #19]
 800db60:	e008      	b.n	800db74 <tcp_input+0x668>
 800db62:	4b35      	ldr	r3, [pc, #212]	; (800dc38 <tcp_input+0x72c>)
 800db64:	681a      	ldr	r2, [r3, #0]
 800db66:	2300      	movs	r3, #0
 800db68:	69b9      	ldr	r1, [r7, #24]
 800db6a:	2000      	movs	r0, #0
 800db6c:	f7ff f958 	bl	800ce20 <tcp_recv_null>
 800db70:	4603      	mov	r3, r0
 800db72:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800db74:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800db78:	f113 0f0d 	cmn.w	r3, #13
 800db7c:	d053      	beq.n	800dc26 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800db7e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d003      	beq.n	800db8e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800db86:	4b2c      	ldr	r3, [pc, #176]	; (800dc38 <tcp_input+0x72c>)
 800db88:	681a      	ldr	r2, [r3, #0]
 800db8a:	69bb      	ldr	r3, [r7, #24]
 800db8c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800db8e:	4b2b      	ldr	r3, [pc, #172]	; (800dc3c <tcp_input+0x730>)
 800db90:	781b      	ldrb	r3, [r3, #0]
 800db92:	f003 0320 	and.w	r3, r3, #32
 800db96:	2b00      	cmp	r3, #0
 800db98:	d030      	beq.n	800dbfc <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800db9a:	69bb      	ldr	r3, [r7, #24]
 800db9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d009      	beq.n	800dbb6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800dba2:	69bb      	ldr	r3, [r7, #24]
 800dba4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dba6:	7b5a      	ldrb	r2, [r3, #13]
 800dba8:	69bb      	ldr	r3, [r7, #24]
 800dbaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dbac:	f042 0220 	orr.w	r2, r2, #32
 800dbb0:	b2d2      	uxtb	r2, r2
 800dbb2:	735a      	strb	r2, [r3, #13]
 800dbb4:	e022      	b.n	800dbfc <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800dbb6:	69bb      	ldr	r3, [r7, #24]
 800dbb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dbba:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800dbbe:	d005      	beq.n	800dbcc <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800dbc0:	69bb      	ldr	r3, [r7, #24]
 800dbc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dbc4:	3301      	adds	r3, #1
 800dbc6:	b29a      	uxth	r2, r3
 800dbc8:	69bb      	ldr	r3, [r7, #24]
 800dbca:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800dbcc:	69bb      	ldr	r3, [r7, #24]
 800dbce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d00b      	beq.n	800dbee <tcp_input+0x6e2>
 800dbd6:	69bb      	ldr	r3, [r7, #24]
 800dbd8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800dbdc:	69bb      	ldr	r3, [r7, #24]
 800dbde:	6918      	ldr	r0, [r3, #16]
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	69b9      	ldr	r1, [r7, #24]
 800dbe6:	47a0      	blx	r4
 800dbe8:	4603      	mov	r3, r0
 800dbea:	74fb      	strb	r3, [r7, #19]
 800dbec:	e001      	b.n	800dbf2 <tcp_input+0x6e6>
 800dbee:	2300      	movs	r3, #0
 800dbf0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800dbf2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dbf6:	f113 0f0d 	cmn.w	r3, #13
 800dbfa:	d016      	beq.n	800dc2a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800dbfc:	4b13      	ldr	r3, [pc, #76]	; (800dc4c <tcp_input+0x740>)
 800dbfe:	2200      	movs	r2, #0
 800dc00:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800dc02:	69b8      	ldr	r0, [r7, #24]
 800dc04:	f000 f88e 	bl	800dd24 <tcp_input_delayed_close>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d128      	bne.n	800dc60 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800dc0e:	69b8      	ldr	r0, [r7, #24]
 800dc10:	f002 face 	bl	80101b0 <tcp_output>
 800dc14:	e025      	b.n	800dc62 <tcp_input+0x756>
        goto aborted;
 800dc16:	bf00      	nop
 800dc18:	e023      	b.n	800dc62 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800dc1a:	bf00      	nop
 800dc1c:	e021      	b.n	800dc62 <tcp_input+0x756>
              goto aborted;
 800dc1e:	bf00      	nop
 800dc20:	e01f      	b.n	800dc62 <tcp_input+0x756>
          goto aborted;
 800dc22:	bf00      	nop
 800dc24:	e01d      	b.n	800dc62 <tcp_input+0x756>
            goto aborted;
 800dc26:	bf00      	nop
 800dc28:	e01b      	b.n	800dc62 <tcp_input+0x756>
              goto aborted;
 800dc2a:	bf00      	nop
 800dc2c:	e019      	b.n	800dc62 <tcp_input+0x756>
 800dc2e:	bf00      	nop
 800dc30:	2000da00 	.word	0x2000da00
 800dc34:	2000da14 	.word	0x2000da14
 800dc38:	2000da34 	.word	0x2000da34
 800dc3c:	2000da31 	.word	0x2000da31
 800dc40:	2000da2c 	.word	0x2000da2c
 800dc44:	2000da30 	.word	0x2000da30
 800dc48:	2000da2e 	.word	0x2000da2e
 800dc4c:	2000da38 	.word	0x2000da38
 800dc50:	2000d9f4 	.word	0x2000d9f4
 800dc54:	08019b80 	.word	0x08019b80
 800dc58:	08019d34 	.word	0x08019d34
 800dc5c:	08019bcc 	.word	0x08019bcc
          goto aborted;
 800dc60:	bf00      	nop
    tcp_input_pcb = NULL;
 800dc62:	4b27      	ldr	r3, [pc, #156]	; (800dd00 <tcp_input+0x7f4>)
 800dc64:	2200      	movs	r2, #0
 800dc66:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800dc68:	4b26      	ldr	r3, [pc, #152]	; (800dd04 <tcp_input+0x7f8>)
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800dc6e:	4b26      	ldr	r3, [pc, #152]	; (800dd08 <tcp_input+0x7fc>)
 800dc70:	685b      	ldr	r3, [r3, #4]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d03f      	beq.n	800dcf6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800dc76:	4b24      	ldr	r3, [pc, #144]	; (800dd08 <tcp_input+0x7fc>)
 800dc78:	685b      	ldr	r3, [r3, #4]
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f7fd fca2 	bl	800b5c4 <pbuf_free>
      inseg.p = NULL;
 800dc80:	4b21      	ldr	r3, [pc, #132]	; (800dd08 <tcp_input+0x7fc>)
 800dc82:	2200      	movs	r2, #0
 800dc84:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800dc86:	e036      	b.n	800dcf6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800dc88:	4b20      	ldr	r3, [pc, #128]	; (800dd0c <tcp_input+0x800>)
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	899b      	ldrh	r3, [r3, #12]
 800dc8e:	b29b      	uxth	r3, r3
 800dc90:	4618      	mov	r0, r3
 800dc92:	f7fb fcb5 	bl	8009600 <lwip_htons>
 800dc96:	4603      	mov	r3, r0
 800dc98:	b2db      	uxtb	r3, r3
 800dc9a:	f003 0304 	and.w	r3, r3, #4
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d118      	bne.n	800dcd4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dca2:	4b1b      	ldr	r3, [pc, #108]	; (800dd10 <tcp_input+0x804>)
 800dca4:	6819      	ldr	r1, [r3, #0]
 800dca6:	4b1b      	ldr	r3, [pc, #108]	; (800dd14 <tcp_input+0x808>)
 800dca8:	881b      	ldrh	r3, [r3, #0]
 800dcaa:	461a      	mov	r2, r3
 800dcac:	4b1a      	ldr	r3, [pc, #104]	; (800dd18 <tcp_input+0x80c>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dcb2:	4b16      	ldr	r3, [pc, #88]	; (800dd0c <tcp_input+0x800>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dcb6:	885b      	ldrh	r3, [r3, #2]
 800dcb8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dcba:	4a14      	ldr	r2, [pc, #80]	; (800dd0c <tcp_input+0x800>)
 800dcbc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dcbe:	8812      	ldrh	r2, [r2, #0]
 800dcc0:	b292      	uxth	r2, r2
 800dcc2:	9202      	str	r2, [sp, #8]
 800dcc4:	9301      	str	r3, [sp, #4]
 800dcc6:	4b15      	ldr	r3, [pc, #84]	; (800dd1c <tcp_input+0x810>)
 800dcc8:	9300      	str	r3, [sp, #0]
 800dcca:	4b15      	ldr	r3, [pc, #84]	; (800dd20 <tcp_input+0x814>)
 800dccc:	4602      	mov	r2, r0
 800dcce:	2000      	movs	r0, #0
 800dcd0:	f003 f82e 	bl	8010d30 <tcp_rst>
    pbuf_free(p);
 800dcd4:	6878      	ldr	r0, [r7, #4]
 800dcd6:	f7fd fc75 	bl	800b5c4 <pbuf_free>
  return;
 800dcda:	e00c      	b.n	800dcf6 <tcp_input+0x7ea>
    goto dropped;
 800dcdc:	bf00      	nop
 800dcde:	e006      	b.n	800dcee <tcp_input+0x7e2>
    goto dropped;
 800dce0:	bf00      	nop
 800dce2:	e004      	b.n	800dcee <tcp_input+0x7e2>
    goto dropped;
 800dce4:	bf00      	nop
 800dce6:	e002      	b.n	800dcee <tcp_input+0x7e2>
      goto dropped;
 800dce8:	bf00      	nop
 800dcea:	e000      	b.n	800dcee <tcp_input+0x7e2>
      goto dropped;
 800dcec:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800dcee:	6878      	ldr	r0, [r7, #4]
 800dcf0:	f7fd fc68 	bl	800b5c4 <pbuf_free>
 800dcf4:	e000      	b.n	800dcf8 <tcp_input+0x7ec>
  return;
 800dcf6:	bf00      	nop
}
 800dcf8:	3724      	adds	r7, #36	; 0x24
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd90      	pop	{r4, r7, pc}
 800dcfe:	bf00      	nop
 800dd00:	2000da38 	.word	0x2000da38
 800dd04:	2000da34 	.word	0x2000da34
 800dd08:	2000da00 	.word	0x2000da00
 800dd0c:	2000da14 	.word	0x2000da14
 800dd10:	2000da28 	.word	0x2000da28
 800dd14:	2000da2e 	.word	0x2000da2e
 800dd18:	2000da24 	.word	0x2000da24
 800dd1c:	2000a0e0 	.word	0x2000a0e0
 800dd20:	2000a0e4 	.word	0x2000a0e4

0800dd24 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b082      	sub	sp, #8
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d106      	bne.n	800dd40 <tcp_input_delayed_close+0x1c>
 800dd32:	4b17      	ldr	r3, [pc, #92]	; (800dd90 <tcp_input_delayed_close+0x6c>)
 800dd34:	f240 225a 	movw	r2, #602	; 0x25a
 800dd38:	4916      	ldr	r1, [pc, #88]	; (800dd94 <tcp_input_delayed_close+0x70>)
 800dd3a:	4817      	ldr	r0, [pc, #92]	; (800dd98 <tcp_input_delayed_close+0x74>)
 800dd3c:	f009 fa14 	bl	8017168 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800dd40:	4b16      	ldr	r3, [pc, #88]	; (800dd9c <tcp_input_delayed_close+0x78>)
 800dd42:	781b      	ldrb	r3, [r3, #0]
 800dd44:	f003 0310 	and.w	r3, r3, #16
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d01c      	beq.n	800dd86 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	8b5b      	ldrh	r3, [r3, #26]
 800dd50:	f003 0310 	and.w	r3, r3, #16
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d10d      	bne.n	800dd74 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d008      	beq.n	800dd74 <tcp_input_delayed_close+0x50>
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd68:	687a      	ldr	r2, [r7, #4]
 800dd6a:	6912      	ldr	r2, [r2, #16]
 800dd6c:	f06f 010e 	mvn.w	r1, #14
 800dd70:	4610      	mov	r0, r2
 800dd72:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800dd74:	6879      	ldr	r1, [r7, #4]
 800dd76:	480a      	ldr	r0, [pc, #40]	; (800dda0 <tcp_input_delayed_close+0x7c>)
 800dd78:	f7ff fa4a 	bl	800d210 <tcp_pcb_remove>
    tcp_free(pcb);
 800dd7c:	6878      	ldr	r0, [r7, #4]
 800dd7e:	f7fe f837 	bl	800bdf0 <tcp_free>
    return 1;
 800dd82:	2301      	movs	r3, #1
 800dd84:	e000      	b.n	800dd88 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800dd86:	2300      	movs	r3, #0
}
 800dd88:	4618      	mov	r0, r3
 800dd8a:	3708      	adds	r7, #8
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}
 800dd90:	08019b80 	.word	0x08019b80
 800dd94:	08019d50 	.word	0x08019d50
 800dd98:	08019bcc 	.word	0x08019bcc
 800dd9c:	2000da31 	.word	0x2000da31
 800dda0:	2000d9f4 	.word	0x2000d9f4

0800dda4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800dda4:	b590      	push	{r4, r7, lr}
 800dda6:	b08b      	sub	sp, #44	; 0x2c
 800dda8:	af04      	add	r7, sp, #16
 800ddaa:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ddac:	4b6f      	ldr	r3, [pc, #444]	; (800df6c <tcp_listen_input+0x1c8>)
 800ddae:	781b      	ldrb	r3, [r3, #0]
 800ddb0:	f003 0304 	and.w	r3, r3, #4
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	f040 80d2 	bne.w	800df5e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d106      	bne.n	800ddce <tcp_listen_input+0x2a>
 800ddc0:	4b6b      	ldr	r3, [pc, #428]	; (800df70 <tcp_listen_input+0x1cc>)
 800ddc2:	f240 2281 	movw	r2, #641	; 0x281
 800ddc6:	496b      	ldr	r1, [pc, #428]	; (800df74 <tcp_listen_input+0x1d0>)
 800ddc8:	486b      	ldr	r0, [pc, #428]	; (800df78 <tcp_listen_input+0x1d4>)
 800ddca:	f009 f9cd 	bl	8017168 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ddce:	4b67      	ldr	r3, [pc, #412]	; (800df6c <tcp_listen_input+0x1c8>)
 800ddd0:	781b      	ldrb	r3, [r3, #0]
 800ddd2:	f003 0310 	and.w	r3, r3, #16
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d019      	beq.n	800de0e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ddda:	4b68      	ldr	r3, [pc, #416]	; (800df7c <tcp_listen_input+0x1d8>)
 800dddc:	6819      	ldr	r1, [r3, #0]
 800ddde:	4b68      	ldr	r3, [pc, #416]	; (800df80 <tcp_listen_input+0x1dc>)
 800dde0:	881b      	ldrh	r3, [r3, #0]
 800dde2:	461a      	mov	r2, r3
 800dde4:	4b67      	ldr	r3, [pc, #412]	; (800df84 <tcp_listen_input+0x1e0>)
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ddea:	4b67      	ldr	r3, [pc, #412]	; (800df88 <tcp_listen_input+0x1e4>)
 800ddec:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ddee:	885b      	ldrh	r3, [r3, #2]
 800ddf0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ddf2:	4a65      	ldr	r2, [pc, #404]	; (800df88 <tcp_listen_input+0x1e4>)
 800ddf4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ddf6:	8812      	ldrh	r2, [r2, #0]
 800ddf8:	b292      	uxth	r2, r2
 800ddfa:	9202      	str	r2, [sp, #8]
 800ddfc:	9301      	str	r3, [sp, #4]
 800ddfe:	4b63      	ldr	r3, [pc, #396]	; (800df8c <tcp_listen_input+0x1e8>)
 800de00:	9300      	str	r3, [sp, #0]
 800de02:	4b63      	ldr	r3, [pc, #396]	; (800df90 <tcp_listen_input+0x1ec>)
 800de04:	4602      	mov	r2, r0
 800de06:	6878      	ldr	r0, [r7, #4]
 800de08:	f002 ff92 	bl	8010d30 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800de0c:	e0a9      	b.n	800df62 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800de0e:	4b57      	ldr	r3, [pc, #348]	; (800df6c <tcp_listen_input+0x1c8>)
 800de10:	781b      	ldrb	r3, [r3, #0]
 800de12:	f003 0302 	and.w	r3, r3, #2
 800de16:	2b00      	cmp	r3, #0
 800de18:	f000 80a3 	beq.w	800df62 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	7d5b      	ldrb	r3, [r3, #21]
 800de20:	4618      	mov	r0, r3
 800de22:	f7ff f921 	bl	800d068 <tcp_alloc>
 800de26:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800de28:	697b      	ldr	r3, [r7, #20]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d111      	bne.n	800de52 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	699b      	ldr	r3, [r3, #24]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d00a      	beq.n	800de4c <tcp_listen_input+0xa8>
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	699b      	ldr	r3, [r3, #24]
 800de3a:	687a      	ldr	r2, [r7, #4]
 800de3c:	6910      	ldr	r0, [r2, #16]
 800de3e:	f04f 32ff 	mov.w	r2, #4294967295
 800de42:	2100      	movs	r1, #0
 800de44:	4798      	blx	r3
 800de46:	4603      	mov	r3, r0
 800de48:	73bb      	strb	r3, [r7, #14]
      return;
 800de4a:	e08b      	b.n	800df64 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800de4c:	23f0      	movs	r3, #240	; 0xf0
 800de4e:	73bb      	strb	r3, [r7, #14]
      return;
 800de50:	e088      	b.n	800df64 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800de52:	4b50      	ldr	r3, [pc, #320]	; (800df94 <tcp_listen_input+0x1f0>)
 800de54:	695a      	ldr	r2, [r3, #20]
 800de56:	697b      	ldr	r3, [r7, #20]
 800de58:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800de5a:	4b4e      	ldr	r3, [pc, #312]	; (800df94 <tcp_listen_input+0x1f0>)
 800de5c:	691a      	ldr	r2, [r3, #16]
 800de5e:	697b      	ldr	r3, [r7, #20]
 800de60:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	8ada      	ldrh	r2, [r3, #22]
 800de66:	697b      	ldr	r3, [r7, #20]
 800de68:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800de6a:	4b47      	ldr	r3, [pc, #284]	; (800df88 <tcp_listen_input+0x1e4>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	881b      	ldrh	r3, [r3, #0]
 800de70:	b29a      	uxth	r2, r3
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800de76:	697b      	ldr	r3, [r7, #20]
 800de78:	2203      	movs	r2, #3
 800de7a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800de7c:	4b41      	ldr	r3, [pc, #260]	; (800df84 <tcp_listen_input+0x1e0>)
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	1c5a      	adds	r2, r3, #1
 800de82:	697b      	ldr	r3, [r7, #20]
 800de84:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800de86:	697b      	ldr	r3, [r7, #20]
 800de88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de8a:	697b      	ldr	r3, [r7, #20]
 800de8c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800de8e:	6978      	ldr	r0, [r7, #20]
 800de90:	f7ff fa52 	bl	800d338 <tcp_next_iss>
 800de94:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800de96:	697b      	ldr	r3, [r7, #20]
 800de98:	693a      	ldr	r2, [r7, #16]
 800de9a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800de9c:	697b      	ldr	r3, [r7, #20]
 800de9e:	693a      	ldr	r2, [r7, #16]
 800dea0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800dea2:	697b      	ldr	r3, [r7, #20]
 800dea4:	693a      	ldr	r2, [r7, #16]
 800dea6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800dea8:	697b      	ldr	r3, [r7, #20]
 800deaa:	693a      	ldr	r2, [r7, #16]
 800deac:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800deae:	4b35      	ldr	r3, [pc, #212]	; (800df84 <tcp_listen_input+0x1e0>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	1e5a      	subs	r2, r3, #1
 800deb4:	697b      	ldr	r3, [r7, #20]
 800deb6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	691a      	ldr	r2, [r3, #16]
 800debc:	697b      	ldr	r3, [r7, #20]
 800debe:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800dec0:	697b      	ldr	r3, [r7, #20]
 800dec2:	687a      	ldr	r2, [r7, #4]
 800dec4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	7a5b      	ldrb	r3, [r3, #9]
 800deca:	f003 030c 	and.w	r3, r3, #12
 800dece:	b2da      	uxtb	r2, r3
 800ded0:	697b      	ldr	r3, [r7, #20]
 800ded2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	7a1a      	ldrb	r2, [r3, #8]
 800ded8:	697b      	ldr	r3, [r7, #20]
 800deda:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800dedc:	4b2e      	ldr	r3, [pc, #184]	; (800df98 <tcp_listen_input+0x1f4>)
 800dede:	681a      	ldr	r2, [r3, #0]
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	60da      	str	r2, [r3, #12]
 800dee4:	4a2c      	ldr	r2, [pc, #176]	; (800df98 <tcp_listen_input+0x1f4>)
 800dee6:	697b      	ldr	r3, [r7, #20]
 800dee8:	6013      	str	r3, [r2, #0]
 800deea:	f003 f8e7 	bl	80110bc <tcp_timer_needed>
 800deee:	4b2b      	ldr	r3, [pc, #172]	; (800df9c <tcp_listen_input+0x1f8>)
 800def0:	2201      	movs	r2, #1
 800def2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800def4:	6978      	ldr	r0, [r7, #20]
 800def6:	f001 fd8f 	bl	800fa18 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800defa:	4b23      	ldr	r3, [pc, #140]	; (800df88 <tcp_listen_input+0x1e4>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	89db      	ldrh	r3, [r3, #14]
 800df00:	b29a      	uxth	r2, r3
 800df02:	697b      	ldr	r3, [r7, #20]
 800df04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800df08:	697b      	ldr	r3, [r7, #20]
 800df0a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800df0e:	697b      	ldr	r3, [r7, #20]
 800df10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800df18:	697b      	ldr	r3, [r7, #20]
 800df1a:	3304      	adds	r3, #4
 800df1c:	4618      	mov	r0, r3
 800df1e:	f007 fba7 	bl	8015670 <ip4_route>
 800df22:	4601      	mov	r1, r0
 800df24:	697b      	ldr	r3, [r7, #20]
 800df26:	3304      	adds	r3, #4
 800df28:	461a      	mov	r2, r3
 800df2a:	4620      	mov	r0, r4
 800df2c:	f7ff fa2a 	bl	800d384 <tcp_eff_send_mss_netif>
 800df30:	4603      	mov	r3, r0
 800df32:	461a      	mov	r2, r3
 800df34:	697b      	ldr	r3, [r7, #20]
 800df36:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800df38:	2112      	movs	r1, #18
 800df3a:	6978      	ldr	r0, [r7, #20]
 800df3c:	f002 f84a 	bl	800ffd4 <tcp_enqueue_flags>
 800df40:	4603      	mov	r3, r0
 800df42:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800df44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d004      	beq.n	800df56 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800df4c:	2100      	movs	r1, #0
 800df4e:	6978      	ldr	r0, [r7, #20]
 800df50:	f7fe f978 	bl	800c244 <tcp_abandon>
      return;
 800df54:	e006      	b.n	800df64 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800df56:	6978      	ldr	r0, [r7, #20]
 800df58:	f002 f92a 	bl	80101b0 <tcp_output>
  return;
 800df5c:	e001      	b.n	800df62 <tcp_listen_input+0x1be>
    return;
 800df5e:	bf00      	nop
 800df60:	e000      	b.n	800df64 <tcp_listen_input+0x1c0>
  return;
 800df62:	bf00      	nop
}
 800df64:	371c      	adds	r7, #28
 800df66:	46bd      	mov	sp, r7
 800df68:	bd90      	pop	{r4, r7, pc}
 800df6a:	bf00      	nop
 800df6c:	2000da30 	.word	0x2000da30
 800df70:	08019b80 	.word	0x08019b80
 800df74:	08019d78 	.word	0x08019d78
 800df78:	08019bcc 	.word	0x08019bcc
 800df7c:	2000da28 	.word	0x2000da28
 800df80:	2000da2e 	.word	0x2000da2e
 800df84:	2000da24 	.word	0x2000da24
 800df88:	2000da14 	.word	0x2000da14
 800df8c:	2000a0e0 	.word	0x2000a0e0
 800df90:	2000a0e4 	.word	0x2000a0e4
 800df94:	2000a0d0 	.word	0x2000a0d0
 800df98:	2000d9f4 	.word	0x2000d9f4
 800df9c:	2000d9fc 	.word	0x2000d9fc

0800dfa0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b086      	sub	sp, #24
 800dfa4:	af04      	add	r7, sp, #16
 800dfa6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800dfa8:	4b2f      	ldr	r3, [pc, #188]	; (800e068 <tcp_timewait_input+0xc8>)
 800dfaa:	781b      	ldrb	r3, [r3, #0]
 800dfac:	f003 0304 	and.w	r3, r3, #4
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d153      	bne.n	800e05c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d106      	bne.n	800dfc8 <tcp_timewait_input+0x28>
 800dfba:	4b2c      	ldr	r3, [pc, #176]	; (800e06c <tcp_timewait_input+0xcc>)
 800dfbc:	f240 22ee 	movw	r2, #750	; 0x2ee
 800dfc0:	492b      	ldr	r1, [pc, #172]	; (800e070 <tcp_timewait_input+0xd0>)
 800dfc2:	482c      	ldr	r0, [pc, #176]	; (800e074 <tcp_timewait_input+0xd4>)
 800dfc4:	f009 f8d0 	bl	8017168 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800dfc8:	4b27      	ldr	r3, [pc, #156]	; (800e068 <tcp_timewait_input+0xc8>)
 800dfca:	781b      	ldrb	r3, [r3, #0]
 800dfcc:	f003 0302 	and.w	r3, r3, #2
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d02a      	beq.n	800e02a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800dfd4:	4b28      	ldr	r3, [pc, #160]	; (800e078 <tcp_timewait_input+0xd8>)
 800dfd6:	681a      	ldr	r2, [r3, #0]
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfdc:	1ad3      	subs	r3, r2, r3
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	db2d      	blt.n	800e03e <tcp_timewait_input+0x9e>
 800dfe2:	4b25      	ldr	r3, [pc, #148]	; (800e078 <tcp_timewait_input+0xd8>)
 800dfe4:	681a      	ldr	r2, [r3, #0]
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfea:	6879      	ldr	r1, [r7, #4]
 800dfec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dfee:	440b      	add	r3, r1
 800dff0:	1ad3      	subs	r3, r2, r3
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	dc23      	bgt.n	800e03e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dff6:	4b21      	ldr	r3, [pc, #132]	; (800e07c <tcp_timewait_input+0xdc>)
 800dff8:	6819      	ldr	r1, [r3, #0]
 800dffa:	4b21      	ldr	r3, [pc, #132]	; (800e080 <tcp_timewait_input+0xe0>)
 800dffc:	881b      	ldrh	r3, [r3, #0]
 800dffe:	461a      	mov	r2, r3
 800e000:	4b1d      	ldr	r3, [pc, #116]	; (800e078 <tcp_timewait_input+0xd8>)
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e006:	4b1f      	ldr	r3, [pc, #124]	; (800e084 <tcp_timewait_input+0xe4>)
 800e008:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e00a:	885b      	ldrh	r3, [r3, #2]
 800e00c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e00e:	4a1d      	ldr	r2, [pc, #116]	; (800e084 <tcp_timewait_input+0xe4>)
 800e010:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e012:	8812      	ldrh	r2, [r2, #0]
 800e014:	b292      	uxth	r2, r2
 800e016:	9202      	str	r2, [sp, #8]
 800e018:	9301      	str	r3, [sp, #4]
 800e01a:	4b1b      	ldr	r3, [pc, #108]	; (800e088 <tcp_timewait_input+0xe8>)
 800e01c:	9300      	str	r3, [sp, #0]
 800e01e:	4b1b      	ldr	r3, [pc, #108]	; (800e08c <tcp_timewait_input+0xec>)
 800e020:	4602      	mov	r2, r0
 800e022:	6878      	ldr	r0, [r7, #4]
 800e024:	f002 fe84 	bl	8010d30 <tcp_rst>
      return;
 800e028:	e01b      	b.n	800e062 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e02a:	4b0f      	ldr	r3, [pc, #60]	; (800e068 <tcp_timewait_input+0xc8>)
 800e02c:	781b      	ldrb	r3, [r3, #0]
 800e02e:	f003 0301 	and.w	r3, r3, #1
 800e032:	2b00      	cmp	r3, #0
 800e034:	d003      	beq.n	800e03e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e036:	4b16      	ldr	r3, [pc, #88]	; (800e090 <tcp_timewait_input+0xf0>)
 800e038:	681a      	ldr	r2, [r3, #0]
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e03e:	4b10      	ldr	r3, [pc, #64]	; (800e080 <tcp_timewait_input+0xe0>)
 800e040:	881b      	ldrh	r3, [r3, #0]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d00c      	beq.n	800e060 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	8b5b      	ldrh	r3, [r3, #26]
 800e04a:	f043 0302 	orr.w	r3, r3, #2
 800e04e:	b29a      	uxth	r2, r3
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e054:	6878      	ldr	r0, [r7, #4]
 800e056:	f002 f8ab 	bl	80101b0 <tcp_output>
  }
  return;
 800e05a:	e001      	b.n	800e060 <tcp_timewait_input+0xc0>
    return;
 800e05c:	bf00      	nop
 800e05e:	e000      	b.n	800e062 <tcp_timewait_input+0xc2>
  return;
 800e060:	bf00      	nop
}
 800e062:	3708      	adds	r7, #8
 800e064:	46bd      	mov	sp, r7
 800e066:	bd80      	pop	{r7, pc}
 800e068:	2000da30 	.word	0x2000da30
 800e06c:	08019b80 	.word	0x08019b80
 800e070:	08019d98 	.word	0x08019d98
 800e074:	08019bcc 	.word	0x08019bcc
 800e078:	2000da24 	.word	0x2000da24
 800e07c:	2000da28 	.word	0x2000da28
 800e080:	2000da2e 	.word	0x2000da2e
 800e084:	2000da14 	.word	0x2000da14
 800e088:	2000a0e0 	.word	0x2000a0e0
 800e08c:	2000a0e4 	.word	0x2000a0e4
 800e090:	2000d9e8 	.word	0x2000d9e8

0800e094 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e094:	b590      	push	{r4, r7, lr}
 800e096:	b08d      	sub	sp, #52	; 0x34
 800e098:	af04      	add	r7, sp, #16
 800e09a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e09c:	2300      	movs	r3, #0
 800e09e:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d106      	bne.n	800e0b8 <tcp_process+0x24>
 800e0aa:	4b9d      	ldr	r3, [pc, #628]	; (800e320 <tcp_process+0x28c>)
 800e0ac:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e0b0:	499c      	ldr	r1, [pc, #624]	; (800e324 <tcp_process+0x290>)
 800e0b2:	489d      	ldr	r0, [pc, #628]	; (800e328 <tcp_process+0x294>)
 800e0b4:	f009 f858 	bl	8017168 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e0b8:	4b9c      	ldr	r3, [pc, #624]	; (800e32c <tcp_process+0x298>)
 800e0ba:	781b      	ldrb	r3, [r3, #0]
 800e0bc:	f003 0304 	and.w	r3, r3, #4
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d04e      	beq.n	800e162 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	7d1b      	ldrb	r3, [r3, #20]
 800e0c8:	2b02      	cmp	r3, #2
 800e0ca:	d108      	bne.n	800e0de <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e0d0:	4b97      	ldr	r3, [pc, #604]	; (800e330 <tcp_process+0x29c>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	429a      	cmp	r2, r3
 800e0d6:	d123      	bne.n	800e120 <tcp_process+0x8c>
        acceptable = 1;
 800e0d8:	2301      	movs	r3, #1
 800e0da:	77fb      	strb	r3, [r7, #31]
 800e0dc:	e020      	b.n	800e120 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e0e2:	4b94      	ldr	r3, [pc, #592]	; (800e334 <tcp_process+0x2a0>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	429a      	cmp	r2, r3
 800e0e8:	d102      	bne.n	800e0f0 <tcp_process+0x5c>
        acceptable = 1;
 800e0ea:	2301      	movs	r3, #1
 800e0ec:	77fb      	strb	r3, [r7, #31]
 800e0ee:	e017      	b.n	800e120 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e0f0:	4b90      	ldr	r3, [pc, #576]	; (800e334 <tcp_process+0x2a0>)
 800e0f2:	681a      	ldr	r2, [r3, #0]
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0f8:	1ad3      	subs	r3, r2, r3
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	db10      	blt.n	800e120 <tcp_process+0x8c>
 800e0fe:	4b8d      	ldr	r3, [pc, #564]	; (800e334 <tcp_process+0x2a0>)
 800e100:	681a      	ldr	r2, [r3, #0]
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e106:	6879      	ldr	r1, [r7, #4]
 800e108:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e10a:	440b      	add	r3, r1
 800e10c:	1ad3      	subs	r3, r2, r3
 800e10e:	2b00      	cmp	r3, #0
 800e110:	dc06      	bgt.n	800e120 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	8b5b      	ldrh	r3, [r3, #26]
 800e116:	f043 0302 	orr.w	r3, r3, #2
 800e11a:	b29a      	uxth	r2, r3
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e120:	7ffb      	ldrb	r3, [r7, #31]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d01b      	beq.n	800e15e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	7d1b      	ldrb	r3, [r3, #20]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d106      	bne.n	800e13c <tcp_process+0xa8>
 800e12e:	4b7c      	ldr	r3, [pc, #496]	; (800e320 <tcp_process+0x28c>)
 800e130:	f44f 724e 	mov.w	r2, #824	; 0x338
 800e134:	4980      	ldr	r1, [pc, #512]	; (800e338 <tcp_process+0x2a4>)
 800e136:	487c      	ldr	r0, [pc, #496]	; (800e328 <tcp_process+0x294>)
 800e138:	f009 f816 	bl	8017168 <iprintf>
      recv_flags |= TF_RESET;
 800e13c:	4b7f      	ldr	r3, [pc, #508]	; (800e33c <tcp_process+0x2a8>)
 800e13e:	781b      	ldrb	r3, [r3, #0]
 800e140:	f043 0308 	orr.w	r3, r3, #8
 800e144:	b2da      	uxtb	r2, r3
 800e146:	4b7d      	ldr	r3, [pc, #500]	; (800e33c <tcp_process+0x2a8>)
 800e148:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	8b5b      	ldrh	r3, [r3, #26]
 800e14e:	f023 0301 	bic.w	r3, r3, #1
 800e152:	b29a      	uxth	r2, r3
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e158:	f06f 030d 	mvn.w	r3, #13
 800e15c:	e37a      	b.n	800e854 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e15e:	2300      	movs	r3, #0
 800e160:	e378      	b.n	800e854 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e162:	4b72      	ldr	r3, [pc, #456]	; (800e32c <tcp_process+0x298>)
 800e164:	781b      	ldrb	r3, [r3, #0]
 800e166:	f003 0302 	and.w	r3, r3, #2
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d010      	beq.n	800e190 <tcp_process+0xfc>
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	7d1b      	ldrb	r3, [r3, #20]
 800e172:	2b02      	cmp	r3, #2
 800e174:	d00c      	beq.n	800e190 <tcp_process+0xfc>
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	7d1b      	ldrb	r3, [r3, #20]
 800e17a:	2b03      	cmp	r3, #3
 800e17c:	d008      	beq.n	800e190 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	8b5b      	ldrh	r3, [r3, #26]
 800e182:	f043 0302 	orr.w	r3, r3, #2
 800e186:	b29a      	uxth	r2, r3
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e18c:	2300      	movs	r3, #0
 800e18e:	e361      	b.n	800e854 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	8b5b      	ldrh	r3, [r3, #26]
 800e194:	f003 0310 	and.w	r3, r3, #16
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d103      	bne.n	800e1a4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e19c:	4b68      	ldr	r3, [pc, #416]	; (800e340 <tcp_process+0x2ac>)
 800e19e:	681a      	ldr	r2, [r3, #0]
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f001 fc2f 	bl	800fa18 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	7d1b      	ldrb	r3, [r3, #20]
 800e1be:	3b02      	subs	r3, #2
 800e1c0:	2b07      	cmp	r3, #7
 800e1c2:	f200 8337 	bhi.w	800e834 <tcp_process+0x7a0>
 800e1c6:	a201      	add	r2, pc, #4	; (adr r2, 800e1cc <tcp_process+0x138>)
 800e1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1cc:	0800e1ed 	.word	0x0800e1ed
 800e1d0:	0800e41d 	.word	0x0800e41d
 800e1d4:	0800e595 	.word	0x0800e595
 800e1d8:	0800e5bf 	.word	0x0800e5bf
 800e1dc:	0800e6e3 	.word	0x0800e6e3
 800e1e0:	0800e595 	.word	0x0800e595
 800e1e4:	0800e76f 	.word	0x0800e76f
 800e1e8:	0800e7ff 	.word	0x0800e7ff
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e1ec:	4b4f      	ldr	r3, [pc, #316]	; (800e32c <tcp_process+0x298>)
 800e1ee:	781b      	ldrb	r3, [r3, #0]
 800e1f0:	f003 0310 	and.w	r3, r3, #16
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	f000 80e4 	beq.w	800e3c2 <tcp_process+0x32e>
 800e1fa:	4b4c      	ldr	r3, [pc, #304]	; (800e32c <tcp_process+0x298>)
 800e1fc:	781b      	ldrb	r3, [r3, #0]
 800e1fe:	f003 0302 	and.w	r3, r3, #2
 800e202:	2b00      	cmp	r3, #0
 800e204:	f000 80dd 	beq.w	800e3c2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e20c:	1c5a      	adds	r2, r3, #1
 800e20e:	4b48      	ldr	r3, [pc, #288]	; (800e330 <tcp_process+0x29c>)
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	429a      	cmp	r2, r3
 800e214:	f040 80d5 	bne.w	800e3c2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e218:	4b46      	ldr	r3, [pc, #280]	; (800e334 <tcp_process+0x2a0>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	1c5a      	adds	r2, r3, #1
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800e22a:	4b41      	ldr	r3, [pc, #260]	; (800e330 <tcp_process+0x29c>)
 800e22c:	681a      	ldr	r2, [r3, #0]
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e232:	4b44      	ldr	r3, [pc, #272]	; (800e344 <tcp_process+0x2b0>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	89db      	ldrh	r3, [r3, #14]
 800e238:	b29a      	uxth	r2, r3
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e24c:	4b39      	ldr	r3, [pc, #228]	; (800e334 <tcp_process+0x2a0>)
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	1e5a      	subs	r2, r3, #1
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2204      	movs	r2, #4
 800e25a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	3304      	adds	r3, #4
 800e264:	4618      	mov	r0, r3
 800e266:	f007 fa03 	bl	8015670 <ip4_route>
 800e26a:	4601      	mov	r1, r0
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	3304      	adds	r3, #4
 800e270:	461a      	mov	r2, r3
 800e272:	4620      	mov	r0, r4
 800e274:	f7ff f886 	bl	800d384 <tcp_eff_send_mss_netif>
 800e278:	4603      	mov	r3, r0
 800e27a:	461a      	mov	r2, r3
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e284:	009a      	lsls	r2, r3, #2
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e28a:	005b      	lsls	r3, r3, #1
 800e28c:	f241 111c 	movw	r1, #4380	; 0x111c
 800e290:	428b      	cmp	r3, r1
 800e292:	bf38      	it	cc
 800e294:	460b      	movcc	r3, r1
 800e296:	429a      	cmp	r2, r3
 800e298:	d204      	bcs.n	800e2a4 <tcp_process+0x210>
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e29e:	009b      	lsls	r3, r3, #2
 800e2a0:	b29b      	uxth	r3, r3
 800e2a2:	e00d      	b.n	800e2c0 <tcp_process+0x22c>
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e2a8:	005b      	lsls	r3, r3, #1
 800e2aa:	f241 121c 	movw	r2, #4380	; 0x111c
 800e2ae:	4293      	cmp	r3, r2
 800e2b0:	d904      	bls.n	800e2bc <tcp_process+0x228>
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e2b6:	005b      	lsls	r3, r3, #1
 800e2b8:	b29b      	uxth	r3, r3
 800e2ba:	e001      	b.n	800e2c0 <tcp_process+0x22c>
 800e2bc:	f241 131c 	movw	r3, #4380	; 0x111c
 800e2c0:	687a      	ldr	r2, [r7, #4]
 800e2c2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d106      	bne.n	800e2de <tcp_process+0x24a>
 800e2d0:	4b13      	ldr	r3, [pc, #76]	; (800e320 <tcp_process+0x28c>)
 800e2d2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800e2d6:	491c      	ldr	r1, [pc, #112]	; (800e348 <tcp_process+0x2b4>)
 800e2d8:	4813      	ldr	r0, [pc, #76]	; (800e328 <tcp_process+0x294>)
 800e2da:	f008 ff45 	bl	8017168 <iprintf>
        --pcb->snd_queuelen;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e2e4:	3b01      	subs	r3, #1
 800e2e6:	b29a      	uxth	r2, r3
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2f2:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 800e2f4:	697b      	ldr	r3, [r7, #20]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d12a      	bne.n	800e350 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2fe:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e300:	697b      	ldr	r3, [r7, #20]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d106      	bne.n	800e314 <tcp_process+0x280>
 800e306:	4b06      	ldr	r3, [pc, #24]	; (800e320 <tcp_process+0x28c>)
 800e308:	f44f 725d 	mov.w	r2, #884	; 0x374
 800e30c:	490f      	ldr	r1, [pc, #60]	; (800e34c <tcp_process+0x2b8>)
 800e30e:	4806      	ldr	r0, [pc, #24]	; (800e328 <tcp_process+0x294>)
 800e310:	f008 ff2a 	bl	8017168 <iprintf>
          pcb->unsent = rseg->next;
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	681a      	ldr	r2, [r3, #0]
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	66da      	str	r2, [r3, #108]	; 0x6c
 800e31c:	e01c      	b.n	800e358 <tcp_process+0x2c4>
 800e31e:	bf00      	nop
 800e320:	08019b80 	.word	0x08019b80
 800e324:	08019db8 	.word	0x08019db8
 800e328:	08019bcc 	.word	0x08019bcc
 800e32c:	2000da30 	.word	0x2000da30
 800e330:	2000da28 	.word	0x2000da28
 800e334:	2000da24 	.word	0x2000da24
 800e338:	08019dd4 	.word	0x08019dd4
 800e33c:	2000da31 	.word	0x2000da31
 800e340:	2000d9e8 	.word	0x2000d9e8
 800e344:	2000da14 	.word	0x2000da14
 800e348:	08019df4 	.word	0x08019df4
 800e34c:	08019e0c 	.word	0x08019e0c
        } else {
          pcb->unacked = rseg->next;
 800e350:	697b      	ldr	r3, [r7, #20]
 800e352:	681a      	ldr	r2, [r3, #0]
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800e358:	6978      	ldr	r0, [r7, #20]
 800e35a:	f7fe fd1c 	bl	800cd96 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e362:	2b00      	cmp	r3, #0
 800e364:	d104      	bne.n	800e370 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e36c:	861a      	strh	r2, [r3, #48]	; 0x30
 800e36e:	e006      	b.n	800e37e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	2200      	movs	r2, #0
 800e374:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2200      	movs	r2, #0
 800e37a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e384:	2b00      	cmp	r3, #0
 800e386:	d00a      	beq.n	800e39e <tcp_process+0x30a>
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e38e:	687a      	ldr	r2, [r7, #4]
 800e390:	6910      	ldr	r0, [r2, #16]
 800e392:	2200      	movs	r2, #0
 800e394:	6879      	ldr	r1, [r7, #4]
 800e396:	4798      	blx	r3
 800e398:	4603      	mov	r3, r0
 800e39a:	77bb      	strb	r3, [r7, #30]
 800e39c:	e001      	b.n	800e3a2 <tcp_process+0x30e>
 800e39e:	2300      	movs	r3, #0
 800e3a0:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 800e3a2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800e3a6:	f113 0f0d 	cmn.w	r3, #13
 800e3aa:	d102      	bne.n	800e3b2 <tcp_process+0x31e>
          return ERR_ABRT;
 800e3ac:	f06f 030c 	mvn.w	r3, #12
 800e3b0:	e250      	b.n	800e854 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	8b5b      	ldrh	r3, [r3, #26]
 800e3b6:	f043 0302 	orr.w	r3, r3, #2
 800e3ba:	b29a      	uxth	r2, r3
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e3c0:	e23a      	b.n	800e838 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e3c2:	4b98      	ldr	r3, [pc, #608]	; (800e624 <tcp_process+0x590>)
 800e3c4:	781b      	ldrb	r3, [r3, #0]
 800e3c6:	f003 0310 	and.w	r3, r3, #16
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	f000 8234 	beq.w	800e838 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e3d0:	4b95      	ldr	r3, [pc, #596]	; (800e628 <tcp_process+0x594>)
 800e3d2:	6819      	ldr	r1, [r3, #0]
 800e3d4:	4b95      	ldr	r3, [pc, #596]	; (800e62c <tcp_process+0x598>)
 800e3d6:	881b      	ldrh	r3, [r3, #0]
 800e3d8:	461a      	mov	r2, r3
 800e3da:	4b95      	ldr	r3, [pc, #596]	; (800e630 <tcp_process+0x59c>)
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e3e0:	4b94      	ldr	r3, [pc, #592]	; (800e634 <tcp_process+0x5a0>)
 800e3e2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e3e4:	885b      	ldrh	r3, [r3, #2]
 800e3e6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e3e8:	4a92      	ldr	r2, [pc, #584]	; (800e634 <tcp_process+0x5a0>)
 800e3ea:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e3ec:	8812      	ldrh	r2, [r2, #0]
 800e3ee:	b292      	uxth	r2, r2
 800e3f0:	9202      	str	r2, [sp, #8]
 800e3f2:	9301      	str	r3, [sp, #4]
 800e3f4:	4b90      	ldr	r3, [pc, #576]	; (800e638 <tcp_process+0x5a4>)
 800e3f6:	9300      	str	r3, [sp, #0]
 800e3f8:	4b90      	ldr	r3, [pc, #576]	; (800e63c <tcp_process+0x5a8>)
 800e3fa:	4602      	mov	r2, r0
 800e3fc:	6878      	ldr	r0, [r7, #4]
 800e3fe:	f002 fc97 	bl	8010d30 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e408:	2b05      	cmp	r3, #5
 800e40a:	f200 8215 	bhi.w	800e838 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2200      	movs	r2, #0
 800e412:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f002 fa61 	bl	80108dc <tcp_rexmit_rto>
      break;
 800e41a:	e20d      	b.n	800e838 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e41c:	4b81      	ldr	r3, [pc, #516]	; (800e624 <tcp_process+0x590>)
 800e41e:	781b      	ldrb	r3, [r3, #0]
 800e420:	f003 0310 	and.w	r3, r3, #16
 800e424:	2b00      	cmp	r3, #0
 800e426:	f000 80a1 	beq.w	800e56c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e42a:	4b7f      	ldr	r3, [pc, #508]	; (800e628 <tcp_process+0x594>)
 800e42c:	681a      	ldr	r2, [r3, #0]
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e432:	1ad3      	subs	r3, r2, r3
 800e434:	3b01      	subs	r3, #1
 800e436:	2b00      	cmp	r3, #0
 800e438:	db7e      	blt.n	800e538 <tcp_process+0x4a4>
 800e43a:	4b7b      	ldr	r3, [pc, #492]	; (800e628 <tcp_process+0x594>)
 800e43c:	681a      	ldr	r2, [r3, #0]
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e442:	1ad3      	subs	r3, r2, r3
 800e444:	2b00      	cmp	r3, #0
 800e446:	dc77      	bgt.n	800e538 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	2204      	movs	r2, #4
 800e44c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e452:	2b00      	cmp	r3, #0
 800e454:	d102      	bne.n	800e45c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e456:	23fa      	movs	r3, #250	; 0xfa
 800e458:	77bb      	strb	r3, [r7, #30]
 800e45a:	e01d      	b.n	800e498 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e460:	699b      	ldr	r3, [r3, #24]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d106      	bne.n	800e474 <tcp_process+0x3e0>
 800e466:	4b76      	ldr	r3, [pc, #472]	; (800e640 <tcp_process+0x5ac>)
 800e468:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800e46c:	4975      	ldr	r1, [pc, #468]	; (800e644 <tcp_process+0x5b0>)
 800e46e:	4876      	ldr	r0, [pc, #472]	; (800e648 <tcp_process+0x5b4>)
 800e470:	f008 fe7a 	bl	8017168 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e478:	699b      	ldr	r3, [r3, #24]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d00a      	beq.n	800e494 <tcp_process+0x400>
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e482:	699b      	ldr	r3, [r3, #24]
 800e484:	687a      	ldr	r2, [r7, #4]
 800e486:	6910      	ldr	r0, [r2, #16]
 800e488:	2200      	movs	r2, #0
 800e48a:	6879      	ldr	r1, [r7, #4]
 800e48c:	4798      	blx	r3
 800e48e:	4603      	mov	r3, r0
 800e490:	77bb      	strb	r3, [r7, #30]
 800e492:	e001      	b.n	800e498 <tcp_process+0x404>
 800e494:	23f0      	movs	r3, #240	; 0xf0
 800e496:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 800e498:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d00a      	beq.n	800e4b6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e4a0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800e4a4:	f113 0f0d 	cmn.w	r3, #13
 800e4a8:	d002      	beq.n	800e4b0 <tcp_process+0x41c>
              tcp_abort(pcb);
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f7fd ff88 	bl	800c3c0 <tcp_abort>
            }
            return ERR_ABRT;
 800e4b0:	f06f 030c 	mvn.w	r3, #12
 800e4b4:	e1ce      	b.n	800e854 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e4b6:	6878      	ldr	r0, [r7, #4]
 800e4b8:	f000 fae0 	bl	800ea7c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e4bc:	4b63      	ldr	r3, [pc, #396]	; (800e64c <tcp_process+0x5b8>)
 800e4be:	881b      	ldrh	r3, [r3, #0]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d005      	beq.n	800e4d0 <tcp_process+0x43c>
            recv_acked--;
 800e4c4:	4b61      	ldr	r3, [pc, #388]	; (800e64c <tcp_process+0x5b8>)
 800e4c6:	881b      	ldrh	r3, [r3, #0]
 800e4c8:	3b01      	subs	r3, #1
 800e4ca:	b29a      	uxth	r2, r3
 800e4cc:	4b5f      	ldr	r3, [pc, #380]	; (800e64c <tcp_process+0x5b8>)
 800e4ce:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e4d4:	009a      	lsls	r2, r3, #2
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e4da:	005b      	lsls	r3, r3, #1
 800e4dc:	f241 111c 	movw	r1, #4380	; 0x111c
 800e4e0:	428b      	cmp	r3, r1
 800e4e2:	bf38      	it	cc
 800e4e4:	460b      	movcc	r3, r1
 800e4e6:	429a      	cmp	r2, r3
 800e4e8:	d204      	bcs.n	800e4f4 <tcp_process+0x460>
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e4ee:	009b      	lsls	r3, r3, #2
 800e4f0:	b29b      	uxth	r3, r3
 800e4f2:	e00d      	b.n	800e510 <tcp_process+0x47c>
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e4f8:	005b      	lsls	r3, r3, #1
 800e4fa:	f241 121c 	movw	r2, #4380	; 0x111c
 800e4fe:	4293      	cmp	r3, r2
 800e500:	d904      	bls.n	800e50c <tcp_process+0x478>
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e506:	005b      	lsls	r3, r3, #1
 800e508:	b29b      	uxth	r3, r3
 800e50a:	e001      	b.n	800e510 <tcp_process+0x47c>
 800e50c:	f241 131c 	movw	r3, #4380	; 0x111c
 800e510:	687a      	ldr	r2, [r7, #4]
 800e512:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e516:	4b4e      	ldr	r3, [pc, #312]	; (800e650 <tcp_process+0x5bc>)
 800e518:	781b      	ldrb	r3, [r3, #0]
 800e51a:	f003 0320 	and.w	r3, r3, #32
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d037      	beq.n	800e592 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	8b5b      	ldrh	r3, [r3, #26]
 800e526:	f043 0302 	orr.w	r3, r3, #2
 800e52a:	b29a      	uxth	r2, r3
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2207      	movs	r2, #7
 800e534:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e536:	e02c      	b.n	800e592 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e538:	4b3b      	ldr	r3, [pc, #236]	; (800e628 <tcp_process+0x594>)
 800e53a:	6819      	ldr	r1, [r3, #0]
 800e53c:	4b3b      	ldr	r3, [pc, #236]	; (800e62c <tcp_process+0x598>)
 800e53e:	881b      	ldrh	r3, [r3, #0]
 800e540:	461a      	mov	r2, r3
 800e542:	4b3b      	ldr	r3, [pc, #236]	; (800e630 <tcp_process+0x59c>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e548:	4b3a      	ldr	r3, [pc, #232]	; (800e634 <tcp_process+0x5a0>)
 800e54a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e54c:	885b      	ldrh	r3, [r3, #2]
 800e54e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e550:	4a38      	ldr	r2, [pc, #224]	; (800e634 <tcp_process+0x5a0>)
 800e552:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e554:	8812      	ldrh	r2, [r2, #0]
 800e556:	b292      	uxth	r2, r2
 800e558:	9202      	str	r2, [sp, #8]
 800e55a:	9301      	str	r3, [sp, #4]
 800e55c:	4b36      	ldr	r3, [pc, #216]	; (800e638 <tcp_process+0x5a4>)
 800e55e:	9300      	str	r3, [sp, #0]
 800e560:	4b36      	ldr	r3, [pc, #216]	; (800e63c <tcp_process+0x5a8>)
 800e562:	4602      	mov	r2, r0
 800e564:	6878      	ldr	r0, [r7, #4]
 800e566:	f002 fbe3 	bl	8010d30 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800e56a:	e167      	b.n	800e83c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e56c:	4b2d      	ldr	r3, [pc, #180]	; (800e624 <tcp_process+0x590>)
 800e56e:	781b      	ldrb	r3, [r3, #0]
 800e570:	f003 0302 	and.w	r3, r3, #2
 800e574:	2b00      	cmp	r3, #0
 800e576:	f000 8161 	beq.w	800e83c <tcp_process+0x7a8>
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e57e:	1e5a      	subs	r2, r3, #1
 800e580:	4b2b      	ldr	r3, [pc, #172]	; (800e630 <tcp_process+0x59c>)
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	429a      	cmp	r2, r3
 800e586:	f040 8159 	bne.w	800e83c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800e58a:	6878      	ldr	r0, [r7, #4]
 800e58c:	f002 f9c8 	bl	8010920 <tcp_rexmit>
      break;
 800e590:	e154      	b.n	800e83c <tcp_process+0x7a8>
 800e592:	e153      	b.n	800e83c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e594:	6878      	ldr	r0, [r7, #4]
 800e596:	f000 fa71 	bl	800ea7c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e59a:	4b2d      	ldr	r3, [pc, #180]	; (800e650 <tcp_process+0x5bc>)
 800e59c:	781b      	ldrb	r3, [r3, #0]
 800e59e:	f003 0320 	and.w	r3, r3, #32
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	f000 814c 	beq.w	800e840 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	8b5b      	ldrh	r3, [r3, #26]
 800e5ac:	f043 0302 	orr.w	r3, r3, #2
 800e5b0:	b29a      	uxth	r2, r3
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	2207      	movs	r2, #7
 800e5ba:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e5bc:	e140      	b.n	800e840 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e5be:	6878      	ldr	r0, [r7, #4]
 800e5c0:	f000 fa5c 	bl	800ea7c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e5c4:	4b22      	ldr	r3, [pc, #136]	; (800e650 <tcp_process+0x5bc>)
 800e5c6:	781b      	ldrb	r3, [r3, #0]
 800e5c8:	f003 0320 	and.w	r3, r3, #32
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d071      	beq.n	800e6b4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e5d0:	4b14      	ldr	r3, [pc, #80]	; (800e624 <tcp_process+0x590>)
 800e5d2:	781b      	ldrb	r3, [r3, #0]
 800e5d4:	f003 0310 	and.w	r3, r3, #16
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d060      	beq.n	800e69e <tcp_process+0x60a>
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e5e0:	4b11      	ldr	r3, [pc, #68]	; (800e628 <tcp_process+0x594>)
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	429a      	cmp	r2, r3
 800e5e6:	d15a      	bne.n	800e69e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d156      	bne.n	800e69e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	8b5b      	ldrh	r3, [r3, #26]
 800e5f4:	f043 0302 	orr.w	r3, r3, #2
 800e5f8:	b29a      	uxth	r2, r3
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e5fe:	6878      	ldr	r0, [r7, #4]
 800e600:	f7fe fdb6 	bl	800d170 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800e604:	4b13      	ldr	r3, [pc, #76]	; (800e654 <tcp_process+0x5c0>)
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	687a      	ldr	r2, [r7, #4]
 800e60a:	429a      	cmp	r2, r3
 800e60c:	d105      	bne.n	800e61a <tcp_process+0x586>
 800e60e:	4b11      	ldr	r3, [pc, #68]	; (800e654 <tcp_process+0x5c0>)
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	68db      	ldr	r3, [r3, #12]
 800e614:	4a0f      	ldr	r2, [pc, #60]	; (800e654 <tcp_process+0x5c0>)
 800e616:	6013      	str	r3, [r2, #0]
 800e618:	e02e      	b.n	800e678 <tcp_process+0x5e4>
 800e61a:	4b0e      	ldr	r3, [pc, #56]	; (800e654 <tcp_process+0x5c0>)
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	613b      	str	r3, [r7, #16]
 800e620:	e027      	b.n	800e672 <tcp_process+0x5de>
 800e622:	bf00      	nop
 800e624:	2000da30 	.word	0x2000da30
 800e628:	2000da28 	.word	0x2000da28
 800e62c:	2000da2e 	.word	0x2000da2e
 800e630:	2000da24 	.word	0x2000da24
 800e634:	2000da14 	.word	0x2000da14
 800e638:	2000a0e0 	.word	0x2000a0e0
 800e63c:	2000a0e4 	.word	0x2000a0e4
 800e640:	08019b80 	.word	0x08019b80
 800e644:	08019e20 	.word	0x08019e20
 800e648:	08019bcc 	.word	0x08019bcc
 800e64c:	2000da2c 	.word	0x2000da2c
 800e650:	2000da31 	.word	0x2000da31
 800e654:	2000d9f4 	.word	0x2000d9f4
 800e658:	693b      	ldr	r3, [r7, #16]
 800e65a:	68db      	ldr	r3, [r3, #12]
 800e65c:	687a      	ldr	r2, [r7, #4]
 800e65e:	429a      	cmp	r2, r3
 800e660:	d104      	bne.n	800e66c <tcp_process+0x5d8>
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	68da      	ldr	r2, [r3, #12]
 800e666:	693b      	ldr	r3, [r7, #16]
 800e668:	60da      	str	r2, [r3, #12]
 800e66a:	e005      	b.n	800e678 <tcp_process+0x5e4>
 800e66c:	693b      	ldr	r3, [r7, #16]
 800e66e:	68db      	ldr	r3, [r3, #12]
 800e670:	613b      	str	r3, [r7, #16]
 800e672:	693b      	ldr	r3, [r7, #16]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d1ef      	bne.n	800e658 <tcp_process+0x5c4>
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	2200      	movs	r2, #0
 800e67c:	60da      	str	r2, [r3, #12]
 800e67e:	4b77      	ldr	r3, [pc, #476]	; (800e85c <tcp_process+0x7c8>)
 800e680:	2201      	movs	r2, #1
 800e682:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	220a      	movs	r2, #10
 800e688:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800e68a:	4b75      	ldr	r3, [pc, #468]	; (800e860 <tcp_process+0x7cc>)
 800e68c:	681a      	ldr	r2, [r3, #0]
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	60da      	str	r2, [r3, #12]
 800e692:	4a73      	ldr	r2, [pc, #460]	; (800e860 <tcp_process+0x7cc>)
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	6013      	str	r3, [r2, #0]
 800e698:	f002 fd10 	bl	80110bc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800e69c:	e0d2      	b.n	800e844 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	8b5b      	ldrh	r3, [r3, #26]
 800e6a2:	f043 0302 	orr.w	r3, r3, #2
 800e6a6:	b29a      	uxth	r2, r3
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2208      	movs	r2, #8
 800e6b0:	751a      	strb	r2, [r3, #20]
      break;
 800e6b2:	e0c7      	b.n	800e844 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e6b4:	4b6b      	ldr	r3, [pc, #428]	; (800e864 <tcp_process+0x7d0>)
 800e6b6:	781b      	ldrb	r3, [r3, #0]
 800e6b8:	f003 0310 	and.w	r3, r3, #16
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	f000 80c1 	beq.w	800e844 <tcp_process+0x7b0>
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e6c6:	4b68      	ldr	r3, [pc, #416]	; (800e868 <tcp_process+0x7d4>)
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	429a      	cmp	r2, r3
 800e6cc:	f040 80ba 	bne.w	800e844 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	f040 80b5 	bne.w	800e844 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	2206      	movs	r2, #6
 800e6de:	751a      	strb	r2, [r3, #20]
      break;
 800e6e0:	e0b0      	b.n	800e844 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800e6e2:	6878      	ldr	r0, [r7, #4]
 800e6e4:	f000 f9ca 	bl	800ea7c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e6e8:	4b60      	ldr	r3, [pc, #384]	; (800e86c <tcp_process+0x7d8>)
 800e6ea:	781b      	ldrb	r3, [r3, #0]
 800e6ec:	f003 0320 	and.w	r3, r3, #32
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	f000 80a9 	beq.w	800e848 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	8b5b      	ldrh	r3, [r3, #26]
 800e6fa:	f043 0302 	orr.w	r3, r3, #2
 800e6fe:	b29a      	uxth	r2, r3
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e704:	6878      	ldr	r0, [r7, #4]
 800e706:	f7fe fd33 	bl	800d170 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e70a:	4b59      	ldr	r3, [pc, #356]	; (800e870 <tcp_process+0x7dc>)
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	687a      	ldr	r2, [r7, #4]
 800e710:	429a      	cmp	r2, r3
 800e712:	d105      	bne.n	800e720 <tcp_process+0x68c>
 800e714:	4b56      	ldr	r3, [pc, #344]	; (800e870 <tcp_process+0x7dc>)
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	68db      	ldr	r3, [r3, #12]
 800e71a:	4a55      	ldr	r2, [pc, #340]	; (800e870 <tcp_process+0x7dc>)
 800e71c:	6013      	str	r3, [r2, #0]
 800e71e:	e013      	b.n	800e748 <tcp_process+0x6b4>
 800e720:	4b53      	ldr	r3, [pc, #332]	; (800e870 <tcp_process+0x7dc>)
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	60fb      	str	r3, [r7, #12]
 800e726:	e00c      	b.n	800e742 <tcp_process+0x6ae>
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	68db      	ldr	r3, [r3, #12]
 800e72c:	687a      	ldr	r2, [r7, #4]
 800e72e:	429a      	cmp	r2, r3
 800e730:	d104      	bne.n	800e73c <tcp_process+0x6a8>
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	68da      	ldr	r2, [r3, #12]
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	60da      	str	r2, [r3, #12]
 800e73a:	e005      	b.n	800e748 <tcp_process+0x6b4>
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	68db      	ldr	r3, [r3, #12]
 800e740:	60fb      	str	r3, [r7, #12]
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d1ef      	bne.n	800e728 <tcp_process+0x694>
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	2200      	movs	r2, #0
 800e74c:	60da      	str	r2, [r3, #12]
 800e74e:	4b43      	ldr	r3, [pc, #268]	; (800e85c <tcp_process+0x7c8>)
 800e750:	2201      	movs	r2, #1
 800e752:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	220a      	movs	r2, #10
 800e758:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e75a:	4b41      	ldr	r3, [pc, #260]	; (800e860 <tcp_process+0x7cc>)
 800e75c:	681a      	ldr	r2, [r3, #0]
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	60da      	str	r2, [r3, #12]
 800e762:	4a3f      	ldr	r2, [pc, #252]	; (800e860 <tcp_process+0x7cc>)
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	6013      	str	r3, [r2, #0]
 800e768:	f002 fca8 	bl	80110bc <tcp_timer_needed>
      }
      break;
 800e76c:	e06c      	b.n	800e848 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800e76e:	6878      	ldr	r0, [r7, #4]
 800e770:	f000 f984 	bl	800ea7c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e774:	4b3b      	ldr	r3, [pc, #236]	; (800e864 <tcp_process+0x7d0>)
 800e776:	781b      	ldrb	r3, [r3, #0]
 800e778:	f003 0310 	and.w	r3, r3, #16
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d065      	beq.n	800e84c <tcp_process+0x7b8>
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e784:	4b38      	ldr	r3, [pc, #224]	; (800e868 <tcp_process+0x7d4>)
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	429a      	cmp	r2, r3
 800e78a:	d15f      	bne.n	800e84c <tcp_process+0x7b8>
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e790:	2b00      	cmp	r3, #0
 800e792:	d15b      	bne.n	800e84c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800e794:	6878      	ldr	r0, [r7, #4]
 800e796:	f7fe fceb 	bl	800d170 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e79a:	4b35      	ldr	r3, [pc, #212]	; (800e870 <tcp_process+0x7dc>)
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	687a      	ldr	r2, [r7, #4]
 800e7a0:	429a      	cmp	r2, r3
 800e7a2:	d105      	bne.n	800e7b0 <tcp_process+0x71c>
 800e7a4:	4b32      	ldr	r3, [pc, #200]	; (800e870 <tcp_process+0x7dc>)
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	68db      	ldr	r3, [r3, #12]
 800e7aa:	4a31      	ldr	r2, [pc, #196]	; (800e870 <tcp_process+0x7dc>)
 800e7ac:	6013      	str	r3, [r2, #0]
 800e7ae:	e013      	b.n	800e7d8 <tcp_process+0x744>
 800e7b0:	4b2f      	ldr	r3, [pc, #188]	; (800e870 <tcp_process+0x7dc>)
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	61bb      	str	r3, [r7, #24]
 800e7b6:	e00c      	b.n	800e7d2 <tcp_process+0x73e>
 800e7b8:	69bb      	ldr	r3, [r7, #24]
 800e7ba:	68db      	ldr	r3, [r3, #12]
 800e7bc:	687a      	ldr	r2, [r7, #4]
 800e7be:	429a      	cmp	r2, r3
 800e7c0:	d104      	bne.n	800e7cc <tcp_process+0x738>
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	68da      	ldr	r2, [r3, #12]
 800e7c6:	69bb      	ldr	r3, [r7, #24]
 800e7c8:	60da      	str	r2, [r3, #12]
 800e7ca:	e005      	b.n	800e7d8 <tcp_process+0x744>
 800e7cc:	69bb      	ldr	r3, [r7, #24]
 800e7ce:	68db      	ldr	r3, [r3, #12]
 800e7d0:	61bb      	str	r3, [r7, #24]
 800e7d2:	69bb      	ldr	r3, [r7, #24]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d1ef      	bne.n	800e7b8 <tcp_process+0x724>
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2200      	movs	r2, #0
 800e7dc:	60da      	str	r2, [r3, #12]
 800e7de:	4b1f      	ldr	r3, [pc, #124]	; (800e85c <tcp_process+0x7c8>)
 800e7e0:	2201      	movs	r2, #1
 800e7e2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	220a      	movs	r2, #10
 800e7e8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e7ea:	4b1d      	ldr	r3, [pc, #116]	; (800e860 <tcp_process+0x7cc>)
 800e7ec:	681a      	ldr	r2, [r3, #0]
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	60da      	str	r2, [r3, #12]
 800e7f2:	4a1b      	ldr	r2, [pc, #108]	; (800e860 <tcp_process+0x7cc>)
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	6013      	str	r3, [r2, #0]
 800e7f8:	f002 fc60 	bl	80110bc <tcp_timer_needed>
      }
      break;
 800e7fc:	e026      	b.n	800e84c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800e7fe:	6878      	ldr	r0, [r7, #4]
 800e800:	f000 f93c 	bl	800ea7c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e804:	4b17      	ldr	r3, [pc, #92]	; (800e864 <tcp_process+0x7d0>)
 800e806:	781b      	ldrb	r3, [r3, #0]
 800e808:	f003 0310 	and.w	r3, r3, #16
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d01f      	beq.n	800e850 <tcp_process+0x7bc>
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e814:	4b14      	ldr	r3, [pc, #80]	; (800e868 <tcp_process+0x7d4>)
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	429a      	cmp	r2, r3
 800e81a:	d119      	bne.n	800e850 <tcp_process+0x7bc>
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e820:	2b00      	cmp	r3, #0
 800e822:	d115      	bne.n	800e850 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800e824:	4b11      	ldr	r3, [pc, #68]	; (800e86c <tcp_process+0x7d8>)
 800e826:	781b      	ldrb	r3, [r3, #0]
 800e828:	f043 0310 	orr.w	r3, r3, #16
 800e82c:	b2da      	uxtb	r2, r3
 800e82e:	4b0f      	ldr	r3, [pc, #60]	; (800e86c <tcp_process+0x7d8>)
 800e830:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e832:	e00d      	b.n	800e850 <tcp_process+0x7bc>
    default:
      break;
 800e834:	bf00      	nop
 800e836:	e00c      	b.n	800e852 <tcp_process+0x7be>
      break;
 800e838:	bf00      	nop
 800e83a:	e00a      	b.n	800e852 <tcp_process+0x7be>
      break;
 800e83c:	bf00      	nop
 800e83e:	e008      	b.n	800e852 <tcp_process+0x7be>
      break;
 800e840:	bf00      	nop
 800e842:	e006      	b.n	800e852 <tcp_process+0x7be>
      break;
 800e844:	bf00      	nop
 800e846:	e004      	b.n	800e852 <tcp_process+0x7be>
      break;
 800e848:	bf00      	nop
 800e84a:	e002      	b.n	800e852 <tcp_process+0x7be>
      break;
 800e84c:	bf00      	nop
 800e84e:	e000      	b.n	800e852 <tcp_process+0x7be>
      break;
 800e850:	bf00      	nop
  }
  return ERR_OK;
 800e852:	2300      	movs	r3, #0
}
 800e854:	4618      	mov	r0, r3
 800e856:	3724      	adds	r7, #36	; 0x24
 800e858:	46bd      	mov	sp, r7
 800e85a:	bd90      	pop	{r4, r7, pc}
 800e85c:	2000d9fc 	.word	0x2000d9fc
 800e860:	2000d9f8 	.word	0x2000d9f8
 800e864:	2000da30 	.word	0x2000da30
 800e868:	2000da28 	.word	0x2000da28
 800e86c:	2000da31 	.word	0x2000da31
 800e870:	2000d9f4 	.word	0x2000d9f4

0800e874 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800e874:	b590      	push	{r4, r7, lr}
 800e876:	b085      	sub	sp, #20
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
 800e87c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d106      	bne.n	800e892 <tcp_oos_insert_segment+0x1e>
 800e884:	4b3b      	ldr	r3, [pc, #236]	; (800e974 <tcp_oos_insert_segment+0x100>)
 800e886:	f240 421f 	movw	r2, #1055	; 0x41f
 800e88a:	493b      	ldr	r1, [pc, #236]	; (800e978 <tcp_oos_insert_segment+0x104>)
 800e88c:	483b      	ldr	r0, [pc, #236]	; (800e97c <tcp_oos_insert_segment+0x108>)
 800e88e:	f008 fc6b 	bl	8017168 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	691b      	ldr	r3, [r3, #16]
 800e896:	899b      	ldrh	r3, [r3, #12]
 800e898:	b29b      	uxth	r3, r3
 800e89a:	4618      	mov	r0, r3
 800e89c:	f7fa feb0 	bl	8009600 <lwip_htons>
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	b2db      	uxtb	r3, r3
 800e8a4:	f003 0301 	and.w	r3, r3, #1
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d028      	beq.n	800e8fe <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800e8ac:	6838      	ldr	r0, [r7, #0]
 800e8ae:	f7fe fa5d 	bl	800cd6c <tcp_segs_free>
    next = NULL;
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	603b      	str	r3, [r7, #0]
 800e8b6:	e056      	b.n	800e966 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e8b8:	683b      	ldr	r3, [r7, #0]
 800e8ba:	691b      	ldr	r3, [r3, #16]
 800e8bc:	899b      	ldrh	r3, [r3, #12]
 800e8be:	b29b      	uxth	r3, r3
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f7fa fe9d 	bl	8009600 <lwip_htons>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	b2db      	uxtb	r3, r3
 800e8ca:	f003 0301 	and.w	r3, r3, #1
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d00d      	beq.n	800e8ee <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	691b      	ldr	r3, [r3, #16]
 800e8d6:	899b      	ldrh	r3, [r3, #12]
 800e8d8:	b29c      	uxth	r4, r3
 800e8da:	2001      	movs	r0, #1
 800e8dc:	f7fa fe90 	bl	8009600 <lwip_htons>
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	461a      	mov	r2, r3
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	691b      	ldr	r3, [r3, #16]
 800e8e8:	4322      	orrs	r2, r4
 800e8ea:	b292      	uxth	r2, r2
 800e8ec:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800e8ee:	683b      	ldr	r3, [r7, #0]
 800e8f0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800e8f8:	68f8      	ldr	r0, [r7, #12]
 800e8fa:	f7fe fa4c 	bl	800cd96 <tcp_seg_free>
    while (next &&
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d00e      	beq.n	800e922 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	891b      	ldrh	r3, [r3, #8]
 800e908:	461a      	mov	r2, r3
 800e90a:	4b1d      	ldr	r3, [pc, #116]	; (800e980 <tcp_oos_insert_segment+0x10c>)
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	441a      	add	r2, r3
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	691b      	ldr	r3, [r3, #16]
 800e914:	685b      	ldr	r3, [r3, #4]
 800e916:	6839      	ldr	r1, [r7, #0]
 800e918:	8909      	ldrh	r1, [r1, #8]
 800e91a:	440b      	add	r3, r1
 800e91c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800e91e:	2b00      	cmp	r3, #0
 800e920:	daca      	bge.n	800e8b8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d01e      	beq.n	800e966 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	891b      	ldrh	r3, [r3, #8]
 800e92c:	461a      	mov	r2, r3
 800e92e:	4b14      	ldr	r3, [pc, #80]	; (800e980 <tcp_oos_insert_segment+0x10c>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	441a      	add	r2, r3
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	691b      	ldr	r3, [r3, #16]
 800e938:	685b      	ldr	r3, [r3, #4]
 800e93a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	dd12      	ble.n	800e966 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	691b      	ldr	r3, [r3, #16]
 800e944:	685b      	ldr	r3, [r3, #4]
 800e946:	b29a      	uxth	r2, r3
 800e948:	4b0d      	ldr	r3, [pc, #52]	; (800e980 <tcp_oos_insert_segment+0x10c>)
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	b29b      	uxth	r3, r3
 800e94e:	1ad3      	subs	r3, r2, r3
 800e950:	b29a      	uxth	r2, r3
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	685a      	ldr	r2, [r3, #4]
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	891b      	ldrh	r3, [r3, #8]
 800e95e:	4619      	mov	r1, r3
 800e960:	4610      	mov	r0, r2
 800e962:	f7fc fca9 	bl	800b2b8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	683a      	ldr	r2, [r7, #0]
 800e96a:	601a      	str	r2, [r3, #0]
}
 800e96c:	bf00      	nop
 800e96e:	3714      	adds	r7, #20
 800e970:	46bd      	mov	sp, r7
 800e972:	bd90      	pop	{r4, r7, pc}
 800e974:	08019b80 	.word	0x08019b80
 800e978:	08019e40 	.word	0x08019e40
 800e97c:	08019bcc 	.word	0x08019bcc
 800e980:	2000da24 	.word	0x2000da24

0800e984 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800e984:	b5b0      	push	{r4, r5, r7, lr}
 800e986:	b086      	sub	sp, #24
 800e988:	af00      	add	r7, sp, #0
 800e98a:	60f8      	str	r0, [r7, #12]
 800e98c:	60b9      	str	r1, [r7, #8]
 800e98e:	607a      	str	r2, [r7, #4]
 800e990:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800e992:	e03e      	b.n	800ea12 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800e994:	68bb      	ldr	r3, [r7, #8]
 800e996:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800e998:	68bb      	ldr	r3, [r7, #8]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800e99e:	697b      	ldr	r3, [r7, #20]
 800e9a0:	685b      	ldr	r3, [r3, #4]
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	f7fc fe9c 	bl	800b6e0 <pbuf_clen>
 800e9a8:	4603      	mov	r3, r0
 800e9aa:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e9b2:	8a7a      	ldrh	r2, [r7, #18]
 800e9b4:	429a      	cmp	r2, r3
 800e9b6:	d906      	bls.n	800e9c6 <tcp_free_acked_segments+0x42>
 800e9b8:	4b2a      	ldr	r3, [pc, #168]	; (800ea64 <tcp_free_acked_segments+0xe0>)
 800e9ba:	f240 4257 	movw	r2, #1111	; 0x457
 800e9be:	492a      	ldr	r1, [pc, #168]	; (800ea68 <tcp_free_acked_segments+0xe4>)
 800e9c0:	482a      	ldr	r0, [pc, #168]	; (800ea6c <tcp_free_acked_segments+0xe8>)
 800e9c2:	f008 fbd1 	bl	8017168 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800e9cc:	8a7b      	ldrh	r3, [r7, #18]
 800e9ce:	1ad3      	subs	r3, r2, r3
 800e9d0:	b29a      	uxth	r2, r3
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800e9d8:	697b      	ldr	r3, [r7, #20]
 800e9da:	891a      	ldrh	r2, [r3, #8]
 800e9dc:	4b24      	ldr	r3, [pc, #144]	; (800ea70 <tcp_free_acked_segments+0xec>)
 800e9de:	881b      	ldrh	r3, [r3, #0]
 800e9e0:	4413      	add	r3, r2
 800e9e2:	b29a      	uxth	r2, r3
 800e9e4:	4b22      	ldr	r3, [pc, #136]	; (800ea70 <tcp_free_acked_segments+0xec>)
 800e9e6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800e9e8:	6978      	ldr	r0, [r7, #20]
 800e9ea:	f7fe f9d4 	bl	800cd96 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d00c      	beq.n	800ea12 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d109      	bne.n	800ea12 <tcp_free_acked_segments+0x8e>
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d106      	bne.n	800ea12 <tcp_free_acked_segments+0x8e>
 800ea04:	4b17      	ldr	r3, [pc, #92]	; (800ea64 <tcp_free_acked_segments+0xe0>)
 800ea06:	f240 4261 	movw	r2, #1121	; 0x461
 800ea0a:	491a      	ldr	r1, [pc, #104]	; (800ea74 <tcp_free_acked_segments+0xf0>)
 800ea0c:	4817      	ldr	r0, [pc, #92]	; (800ea6c <tcp_free_acked_segments+0xe8>)
 800ea0e:	f008 fbab 	bl	8017168 <iprintf>
  while (seg_list != NULL &&
 800ea12:	68bb      	ldr	r3, [r7, #8]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d020      	beq.n	800ea5a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ea18:	68bb      	ldr	r3, [r7, #8]
 800ea1a:	691b      	ldr	r3, [r3, #16]
 800ea1c:	685b      	ldr	r3, [r3, #4]
 800ea1e:	4618      	mov	r0, r3
 800ea20:	f7fa fe03 	bl	800962a <lwip_htonl>
 800ea24:	4604      	mov	r4, r0
 800ea26:	68bb      	ldr	r3, [r7, #8]
 800ea28:	891b      	ldrh	r3, [r3, #8]
 800ea2a:	461d      	mov	r5, r3
 800ea2c:	68bb      	ldr	r3, [r7, #8]
 800ea2e:	691b      	ldr	r3, [r3, #16]
 800ea30:	899b      	ldrh	r3, [r3, #12]
 800ea32:	b29b      	uxth	r3, r3
 800ea34:	4618      	mov	r0, r3
 800ea36:	f7fa fde3 	bl	8009600 <lwip_htons>
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	b2db      	uxtb	r3, r3
 800ea3e:	f003 0303 	and.w	r3, r3, #3
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d001      	beq.n	800ea4a <tcp_free_acked_segments+0xc6>
 800ea46:	2301      	movs	r3, #1
 800ea48:	e000      	b.n	800ea4c <tcp_free_acked_segments+0xc8>
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	442b      	add	r3, r5
 800ea4e:	18e2      	adds	r2, r4, r3
 800ea50:	4b09      	ldr	r3, [pc, #36]	; (800ea78 <tcp_free_acked_segments+0xf4>)
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	dd9c      	ble.n	800e994 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ea5a:	68bb      	ldr	r3, [r7, #8]
}
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	3718      	adds	r7, #24
 800ea60:	46bd      	mov	sp, r7
 800ea62:	bdb0      	pop	{r4, r5, r7, pc}
 800ea64:	08019b80 	.word	0x08019b80
 800ea68:	08019e68 	.word	0x08019e68
 800ea6c:	08019bcc 	.word	0x08019bcc
 800ea70:	2000da2c 	.word	0x2000da2c
 800ea74:	08019e90 	.word	0x08019e90
 800ea78:	2000da28 	.word	0x2000da28

0800ea7c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ea7c:	b5b0      	push	{r4, r5, r7, lr}
 800ea7e:	b094      	sub	sp, #80	; 0x50
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ea84:	2300      	movs	r3, #0
 800ea86:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d106      	bne.n	800ea9c <tcp_receive+0x20>
 800ea8e:	4b91      	ldr	r3, [pc, #580]	; (800ecd4 <tcp_receive+0x258>)
 800ea90:	f240 427b 	movw	r2, #1147	; 0x47b
 800ea94:	4990      	ldr	r1, [pc, #576]	; (800ecd8 <tcp_receive+0x25c>)
 800ea96:	4891      	ldr	r0, [pc, #580]	; (800ecdc <tcp_receive+0x260>)
 800ea98:	f008 fb66 	bl	8017168 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	7d1b      	ldrb	r3, [r3, #20]
 800eaa0:	2b03      	cmp	r3, #3
 800eaa2:	d806      	bhi.n	800eab2 <tcp_receive+0x36>
 800eaa4:	4b8b      	ldr	r3, [pc, #556]	; (800ecd4 <tcp_receive+0x258>)
 800eaa6:	f240 427c 	movw	r2, #1148	; 0x47c
 800eaaa:	498d      	ldr	r1, [pc, #564]	; (800ece0 <tcp_receive+0x264>)
 800eaac:	488b      	ldr	r0, [pc, #556]	; (800ecdc <tcp_receive+0x260>)
 800eaae:	f008 fb5b 	bl	8017168 <iprintf>

  if (flags & TCP_ACK) {
 800eab2:	4b8c      	ldr	r3, [pc, #560]	; (800ece4 <tcp_receive+0x268>)
 800eab4:	781b      	ldrb	r3, [r3, #0]
 800eab6:	f003 0310 	and.w	r3, r3, #16
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	f000 8264 	beq.w	800ef88 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eac6:	461a      	mov	r2, r3
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eacc:	4413      	add	r3, r2
 800eace:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ead4:	4b84      	ldr	r3, [pc, #528]	; (800ece8 <tcp_receive+0x26c>)
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	1ad3      	subs	r3, r2, r3
 800eada:	2b00      	cmp	r3, #0
 800eadc:	db1b      	blt.n	800eb16 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eae2:	4b81      	ldr	r3, [pc, #516]	; (800ece8 <tcp_receive+0x26c>)
 800eae4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800eae6:	429a      	cmp	r2, r3
 800eae8:	d106      	bne.n	800eaf8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eaee:	4b7f      	ldr	r3, [pc, #508]	; (800ecec <tcp_receive+0x270>)
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	1ad3      	subs	r3, r2, r3
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	db0e      	blt.n	800eb16 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eafc:	4b7b      	ldr	r3, [pc, #492]	; (800ecec <tcp_receive+0x270>)
 800eafe:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800eb00:	429a      	cmp	r2, r3
 800eb02:	d125      	bne.n	800eb50 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800eb04:	4b7a      	ldr	r3, [pc, #488]	; (800ecf0 <tcp_receive+0x274>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	89db      	ldrh	r3, [r3, #14]
 800eb0a:	b29a      	uxth	r2, r3
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eb12:	429a      	cmp	r2, r3
 800eb14:	d91c      	bls.n	800eb50 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800eb16:	4b76      	ldr	r3, [pc, #472]	; (800ecf0 <tcp_receive+0x274>)
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	89db      	ldrh	r3, [r3, #14]
 800eb1c:	b29a      	uxth	r2, r3
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eb30:	429a      	cmp	r2, r3
 800eb32:	d205      	bcs.n	800eb40 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800eb40:	4b69      	ldr	r3, [pc, #420]	; (800ece8 <tcp_receive+0x26c>)
 800eb42:	681a      	ldr	r2, [r3, #0]
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800eb48:	4b68      	ldr	r3, [pc, #416]	; (800ecec <tcp_receive+0x270>)
 800eb4a:	681a      	ldr	r2, [r3, #0]
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800eb50:	4b66      	ldr	r3, [pc, #408]	; (800ecec <tcp_receive+0x270>)
 800eb52:	681a      	ldr	r2, [r3, #0]
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb58:	1ad3      	subs	r3, r2, r3
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	dc58      	bgt.n	800ec10 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800eb5e:	4b65      	ldr	r3, [pc, #404]	; (800ecf4 <tcp_receive+0x278>)
 800eb60:	881b      	ldrh	r3, [r3, #0]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d14b      	bne.n	800ebfe <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb6a:	687a      	ldr	r2, [r7, #4]
 800eb6c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800eb70:	4413      	add	r3, r2
 800eb72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb74:	429a      	cmp	r2, r3
 800eb76:	d142      	bne.n	800ebfe <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	db3d      	blt.n	800ebfe <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eb86:	4b59      	ldr	r3, [pc, #356]	; (800ecec <tcp_receive+0x270>)
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	429a      	cmp	r2, r3
 800eb8c:	d137      	bne.n	800ebfe <tcp_receive+0x182>
              found_dupack = 1;
 800eb8e:	2301      	movs	r3, #1
 800eb90:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800eb98:	2bff      	cmp	r3, #255	; 0xff
 800eb9a:	d007      	beq.n	800ebac <tcp_receive+0x130>
                ++pcb->dupacks;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800eba2:	3301      	adds	r3, #1
 800eba4:	b2da      	uxtb	r2, r3
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ebb2:	2b03      	cmp	r3, #3
 800ebb4:	d91b      	bls.n	800ebee <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ebc0:	4413      	add	r3, r2
 800ebc2:	b29a      	uxth	r2, r3
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ebca:	429a      	cmp	r2, r3
 800ebcc:	d30a      	bcc.n	800ebe4 <tcp_receive+0x168>
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ebd8:	4413      	add	r3, r2
 800ebda:	b29a      	uxth	r2, r3
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ebe2:	e004      	b.n	800ebee <tcp_receive+0x172>
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ebea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ebf4:	2b02      	cmp	r3, #2
 800ebf6:	d902      	bls.n	800ebfe <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800ebf8:	6878      	ldr	r0, [r7, #4]
 800ebfa:	f001 fefd 	bl	80109f8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800ebfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	f040 8161 	bne.w	800eec8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	2200      	movs	r2, #0
 800ec0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ec0e:	e15b      	b.n	800eec8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ec10:	4b36      	ldr	r3, [pc, #216]	; (800ecec <tcp_receive+0x270>)
 800ec12:	681a      	ldr	r2, [r3, #0]
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec18:	1ad3      	subs	r3, r2, r3
 800ec1a:	3b01      	subs	r3, #1
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	f2c0 814e 	blt.w	800eebe <tcp_receive+0x442>
 800ec22:	4b32      	ldr	r3, [pc, #200]	; (800ecec <tcp_receive+0x270>)
 800ec24:	681a      	ldr	r2, [r3, #0]
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec2a:	1ad3      	subs	r3, r2, r3
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	f300 8146 	bgt.w	800eebe <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	8b5b      	ldrh	r3, [r3, #26]
 800ec36:	f003 0304 	and.w	r3, r3, #4
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d010      	beq.n	800ec60 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	8b5b      	ldrh	r3, [r3, #26]
 800ec42:	f023 0304 	bic.w	r3, r3, #4
 800ec46:	b29a      	uxth	r2, r3
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	2200      	movs	r2, #0
 800ec64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ec6e:	10db      	asrs	r3, r3, #3
 800ec70:	b21b      	sxth	r3, r3
 800ec72:	b29a      	uxth	r2, r3
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ec7a:	b29b      	uxth	r3, r3
 800ec7c:	4413      	add	r3, r2
 800ec7e:	b29b      	uxth	r3, r3
 800ec80:	b21a      	sxth	r2, r3
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800ec88:	4b18      	ldr	r3, [pc, #96]	; (800ecec <tcp_receive+0x270>)
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	b29a      	uxth	r2, r3
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec92:	b29b      	uxth	r3, r3
 800ec94:	1ad3      	subs	r3, r2, r3
 800ec96:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800eca0:	4b12      	ldr	r3, [pc, #72]	; (800ecec <tcp_receive+0x270>)
 800eca2:	681a      	ldr	r2, [r3, #0]
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	7d1b      	ldrb	r3, [r3, #20]
 800ecac:	2b03      	cmp	r3, #3
 800ecae:	f240 8097 	bls.w	800ede0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ecbe:	429a      	cmp	r2, r3
 800ecc0:	d245      	bcs.n	800ed4e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	8b5b      	ldrh	r3, [r3, #26]
 800ecc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d014      	beq.n	800ecf8 <tcp_receive+0x27c>
 800ecce:	2301      	movs	r3, #1
 800ecd0:	e013      	b.n	800ecfa <tcp_receive+0x27e>
 800ecd2:	bf00      	nop
 800ecd4:	08019b80 	.word	0x08019b80
 800ecd8:	08019eb0 	.word	0x08019eb0
 800ecdc:	08019bcc 	.word	0x08019bcc
 800ece0:	08019ecc 	.word	0x08019ecc
 800ece4:	2000da30 	.word	0x2000da30
 800ece8:	2000da24 	.word	0x2000da24
 800ecec:	2000da28 	.word	0x2000da28
 800ecf0:	2000da14 	.word	0x2000da14
 800ecf4:	2000da2e 	.word	0x2000da2e
 800ecf8:	2302      	movs	r3, #2
 800ecfa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800ecfe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ed02:	b29a      	uxth	r2, r3
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed08:	fb12 f303 	smulbb	r3, r2, r3
 800ed0c:	b29b      	uxth	r3, r3
 800ed0e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ed10:	4293      	cmp	r3, r2
 800ed12:	bf28      	it	cs
 800ed14:	4613      	movcs	r3, r2
 800ed16:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ed1e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ed20:	4413      	add	r3, r2
 800ed22:	b29a      	uxth	r2, r3
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ed2a:	429a      	cmp	r2, r3
 800ed2c:	d309      	bcc.n	800ed42 <tcp_receive+0x2c6>
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ed34:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ed36:	4413      	add	r3, r2
 800ed38:	b29a      	uxth	r2, r3
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ed40:	e04e      	b.n	800ede0 <tcp_receive+0x364>
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed48:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ed4c:	e048      	b.n	800ede0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ed54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ed56:	4413      	add	r3, r2
 800ed58:	b29a      	uxth	r2, r3
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ed60:	429a      	cmp	r2, r3
 800ed62:	d309      	bcc.n	800ed78 <tcp_receive+0x2fc>
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ed6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ed6c:	4413      	add	r3, r2
 800ed6e:	b29a      	uxth	r2, r3
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ed76:	e004      	b.n	800ed82 <tcp_receive+0x306>
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed7e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ed8e:	429a      	cmp	r2, r3
 800ed90:	d326      	bcc.n	800ede0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ed9e:	1ad3      	subs	r3, r2, r3
 800eda0:	b29a      	uxth	r2, r3
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800edb2:	4413      	add	r3, r2
 800edb4:	b29a      	uxth	r2, r3
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800edbc:	429a      	cmp	r2, r3
 800edbe:	d30a      	bcc.n	800edd6 <tcp_receive+0x35a>
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800edca:	4413      	add	r3, r2
 800edcc:	b29a      	uxth	r2, r3
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800edd4:	e004      	b.n	800ede0 <tcp_receive+0x364>
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eddc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ede8:	4a98      	ldr	r2, [pc, #608]	; (800f04c <tcp_receive+0x5d0>)
 800edea:	6878      	ldr	r0, [r7, #4]
 800edec:	f7ff fdca 	bl	800e984 <tcp_free_acked_segments>
 800edf0:	4602      	mov	r2, r0
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edfe:	4a94      	ldr	r2, [pc, #592]	; (800f050 <tcp_receive+0x5d4>)
 800ee00:	6878      	ldr	r0, [r7, #4]
 800ee02:	f7ff fdbf 	bl	800e984 <tcp_free_acked_segments>
 800ee06:	4602      	mov	r2, r0
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d104      	bne.n	800ee1e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee1a:	861a      	strh	r2, [r3, #48]	; 0x30
 800ee1c:	e002      	b.n	800ee24 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	2200      	movs	r2, #0
 800ee22:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	2200      	movs	r2, #0
 800ee28:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d103      	bne.n	800ee3a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	2200      	movs	r2, #0
 800ee36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800ee40:	4b84      	ldr	r3, [pc, #528]	; (800f054 <tcp_receive+0x5d8>)
 800ee42:	881b      	ldrh	r3, [r3, #0]
 800ee44:	4413      	add	r3, r2
 800ee46:	b29a      	uxth	r2, r3
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	8b5b      	ldrh	r3, [r3, #26]
 800ee52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d035      	beq.n	800eec6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d118      	bne.n	800ee94 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d00c      	beq.n	800ee84 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee72:	691b      	ldr	r3, [r3, #16]
 800ee74:	685b      	ldr	r3, [r3, #4]
 800ee76:	4618      	mov	r0, r3
 800ee78:	f7fa fbd7 	bl	800962a <lwip_htonl>
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	dc20      	bgt.n	800eec6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	8b5b      	ldrh	r3, [r3, #26]
 800ee88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ee8c:	b29a      	uxth	r2, r3
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ee92:	e018      	b.n	800eec6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee9c:	691b      	ldr	r3, [r3, #16]
 800ee9e:	685b      	ldr	r3, [r3, #4]
 800eea0:	4618      	mov	r0, r3
 800eea2:	f7fa fbc2 	bl	800962a <lwip_htonl>
 800eea6:	4603      	mov	r3, r0
 800eea8:	1ae3      	subs	r3, r4, r3
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	dc0b      	bgt.n	800eec6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	8b5b      	ldrh	r3, [r3, #26]
 800eeb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800eeb6:	b29a      	uxth	r2, r3
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800eebc:	e003      	b.n	800eec6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800eebe:	6878      	ldr	r0, [r7, #4]
 800eec0:	f001 ff88 	bl	8010dd4 <tcp_send_empty_ack>
 800eec4:	e000      	b.n	800eec8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800eec6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d05b      	beq.n	800ef88 <tcp_receive+0x50c>
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eed4:	4b60      	ldr	r3, [pc, #384]	; (800f058 <tcp_receive+0x5dc>)
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	1ad3      	subs	r3, r2, r3
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	da54      	bge.n	800ef88 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800eede:	4b5f      	ldr	r3, [pc, #380]	; (800f05c <tcp_receive+0x5e0>)
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	b29a      	uxth	r2, r3
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eee8:	b29b      	uxth	r3, r3
 800eeea:	1ad3      	subs	r3, r2, r3
 800eeec:	b29b      	uxth	r3, r3
 800eeee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800eef2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800eefc:	10db      	asrs	r3, r3, #3
 800eefe:	b21b      	sxth	r3, r3
 800ef00:	b29b      	uxth	r3, r3
 800ef02:	1ad3      	subs	r3, r2, r3
 800ef04:	b29b      	uxth	r3, r3
 800ef06:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ef10:	b29a      	uxth	r2, r3
 800ef12:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ef16:	4413      	add	r3, r2
 800ef18:	b29b      	uxth	r3, r3
 800ef1a:	b21a      	sxth	r2, r3
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800ef20:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	da05      	bge.n	800ef34 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800ef28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ef2c:	425b      	negs	r3, r3
 800ef2e:	b29b      	uxth	r3, r3
 800ef30:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800ef34:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ef3e:	109b      	asrs	r3, r3, #2
 800ef40:	b21b      	sxth	r3, r3
 800ef42:	b29b      	uxth	r3, r3
 800ef44:	1ad3      	subs	r3, r2, r3
 800ef46:	b29b      	uxth	r3, r3
 800ef48:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ef52:	b29a      	uxth	r2, r3
 800ef54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ef58:	4413      	add	r3, r2
 800ef5a:	b29b      	uxth	r3, r3
 800ef5c:	b21a      	sxth	r2, r3
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ef68:	10db      	asrs	r3, r3, #3
 800ef6a:	b21b      	sxth	r3, r3
 800ef6c:	b29a      	uxth	r2, r3
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ef74:	b29b      	uxth	r3, r3
 800ef76:	4413      	add	r3, r2
 800ef78:	b29b      	uxth	r3, r3
 800ef7a:	b21a      	sxth	r2, r3
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	2200      	movs	r2, #0
 800ef86:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800ef88:	4b35      	ldr	r3, [pc, #212]	; (800f060 <tcp_receive+0x5e4>)
 800ef8a:	881b      	ldrh	r3, [r3, #0]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	f000 84e2 	beq.w	800f956 <tcp_receive+0xeda>
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	7d1b      	ldrb	r3, [r3, #20]
 800ef96:	2b06      	cmp	r3, #6
 800ef98:	f200 84dd 	bhi.w	800f956 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800efa0:	4b30      	ldr	r3, [pc, #192]	; (800f064 <tcp_receive+0x5e8>)
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	1ad3      	subs	r3, r2, r3
 800efa6:	3b01      	subs	r3, #1
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	f2c0 808f 	blt.w	800f0cc <tcp_receive+0x650>
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800efb2:	4b2b      	ldr	r3, [pc, #172]	; (800f060 <tcp_receive+0x5e4>)
 800efb4:	881b      	ldrh	r3, [r3, #0]
 800efb6:	4619      	mov	r1, r3
 800efb8:	4b2a      	ldr	r3, [pc, #168]	; (800f064 <tcp_receive+0x5e8>)
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	440b      	add	r3, r1
 800efbe:	1ad3      	subs	r3, r2, r3
 800efc0:	3301      	adds	r3, #1
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	f300 8082 	bgt.w	800f0cc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800efc8:	4b27      	ldr	r3, [pc, #156]	; (800f068 <tcp_receive+0x5ec>)
 800efca:	685b      	ldr	r3, [r3, #4]
 800efcc:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800efd2:	4b24      	ldr	r3, [pc, #144]	; (800f064 <tcp_receive+0x5e8>)
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	1ad3      	subs	r3, r2, r3
 800efd8:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800efda:	4b23      	ldr	r3, [pc, #140]	; (800f068 <tcp_receive+0x5ec>)
 800efdc:	685b      	ldr	r3, [r3, #4]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d106      	bne.n	800eff0 <tcp_receive+0x574>
 800efe2:	4b22      	ldr	r3, [pc, #136]	; (800f06c <tcp_receive+0x5f0>)
 800efe4:	f240 5294 	movw	r2, #1428	; 0x594
 800efe8:	4921      	ldr	r1, [pc, #132]	; (800f070 <tcp_receive+0x5f4>)
 800efea:	4822      	ldr	r0, [pc, #136]	; (800f074 <tcp_receive+0x5f8>)
 800efec:	f008 f8bc 	bl	8017168 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800eff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eff2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800eff6:	4293      	cmp	r3, r2
 800eff8:	d906      	bls.n	800f008 <tcp_receive+0x58c>
 800effa:	4b1c      	ldr	r3, [pc, #112]	; (800f06c <tcp_receive+0x5f0>)
 800effc:	f240 5295 	movw	r2, #1429	; 0x595
 800f000:	491d      	ldr	r1, [pc, #116]	; (800f078 <tcp_receive+0x5fc>)
 800f002:	481c      	ldr	r0, [pc, #112]	; (800f074 <tcp_receive+0x5f8>)
 800f004:	f008 f8b0 	bl	8017168 <iprintf>
      off = (u16_t)off32;
 800f008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f00a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f00e:	4b16      	ldr	r3, [pc, #88]	; (800f068 <tcp_receive+0x5ec>)
 800f010:	685b      	ldr	r3, [r3, #4]
 800f012:	891b      	ldrh	r3, [r3, #8]
 800f014:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f018:	429a      	cmp	r2, r3
 800f01a:	d906      	bls.n	800f02a <tcp_receive+0x5ae>
 800f01c:	4b13      	ldr	r3, [pc, #76]	; (800f06c <tcp_receive+0x5f0>)
 800f01e:	f240 5297 	movw	r2, #1431	; 0x597
 800f022:	4916      	ldr	r1, [pc, #88]	; (800f07c <tcp_receive+0x600>)
 800f024:	4813      	ldr	r0, [pc, #76]	; (800f074 <tcp_receive+0x5f8>)
 800f026:	f008 f89f 	bl	8017168 <iprintf>
      inseg.len -= off;
 800f02a:	4b0f      	ldr	r3, [pc, #60]	; (800f068 <tcp_receive+0x5ec>)
 800f02c:	891a      	ldrh	r2, [r3, #8]
 800f02e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f032:	1ad3      	subs	r3, r2, r3
 800f034:	b29a      	uxth	r2, r3
 800f036:	4b0c      	ldr	r3, [pc, #48]	; (800f068 <tcp_receive+0x5ec>)
 800f038:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f03a:	4b0b      	ldr	r3, [pc, #44]	; (800f068 <tcp_receive+0x5ec>)
 800f03c:	685b      	ldr	r3, [r3, #4]
 800f03e:	891a      	ldrh	r2, [r3, #8]
 800f040:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f044:	1ad3      	subs	r3, r2, r3
 800f046:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f048:	e02a      	b.n	800f0a0 <tcp_receive+0x624>
 800f04a:	bf00      	nop
 800f04c:	08019ee8 	.word	0x08019ee8
 800f050:	08019ef0 	.word	0x08019ef0
 800f054:	2000da2c 	.word	0x2000da2c
 800f058:	2000da28 	.word	0x2000da28
 800f05c:	2000d9e8 	.word	0x2000d9e8
 800f060:	2000da2e 	.word	0x2000da2e
 800f064:	2000da24 	.word	0x2000da24
 800f068:	2000da00 	.word	0x2000da00
 800f06c:	08019b80 	.word	0x08019b80
 800f070:	08019ef8 	.word	0x08019ef8
 800f074:	08019bcc 	.word	0x08019bcc
 800f078:	08019f08 	.word	0x08019f08
 800f07c:	08019f18 	.word	0x08019f18
        off -= p->len;
 800f080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f082:	895b      	ldrh	r3, [r3, #10]
 800f084:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f088:	1ad3      	subs	r3, r2, r3
 800f08a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f08e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f090:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f092:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f096:	2200      	movs	r2, #0
 800f098:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f09a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800f0a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0a2:	895b      	ldrh	r3, [r3, #10]
 800f0a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f0a8:	429a      	cmp	r2, r3
 800f0aa:	d8e9      	bhi.n	800f080 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f0ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f0b0:	4619      	mov	r1, r3
 800f0b2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f0b4:	f7fc fa00 	bl	800b4b8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0bc:	4a91      	ldr	r2, [pc, #580]	; (800f304 <tcp_receive+0x888>)
 800f0be:	6013      	str	r3, [r2, #0]
 800f0c0:	4b91      	ldr	r3, [pc, #580]	; (800f308 <tcp_receive+0x88c>)
 800f0c2:	691b      	ldr	r3, [r3, #16]
 800f0c4:	4a8f      	ldr	r2, [pc, #572]	; (800f304 <tcp_receive+0x888>)
 800f0c6:	6812      	ldr	r2, [r2, #0]
 800f0c8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f0ca:	e00d      	b.n	800f0e8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f0cc:	4b8d      	ldr	r3, [pc, #564]	; (800f304 <tcp_receive+0x888>)
 800f0ce:	681a      	ldr	r2, [r3, #0]
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0d4:	1ad3      	subs	r3, r2, r3
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	da06      	bge.n	800f0e8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	8b5b      	ldrh	r3, [r3, #26]
 800f0de:	f043 0302 	orr.w	r3, r3, #2
 800f0e2:	b29a      	uxth	r2, r3
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f0e8:	4b86      	ldr	r3, [pc, #536]	; (800f304 <tcp_receive+0x888>)
 800f0ea:	681a      	ldr	r2, [r3, #0]
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0f0:	1ad3      	subs	r3, r2, r3
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	f2c0 842a 	blt.w	800f94c <tcp_receive+0xed0>
 800f0f8:	4b82      	ldr	r3, [pc, #520]	; (800f304 <tcp_receive+0x888>)
 800f0fa:	681a      	ldr	r2, [r3, #0]
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f100:	6879      	ldr	r1, [r7, #4]
 800f102:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f104:	440b      	add	r3, r1
 800f106:	1ad3      	subs	r3, r2, r3
 800f108:	3301      	adds	r3, #1
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	f300 841e 	bgt.w	800f94c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f114:	4b7b      	ldr	r3, [pc, #492]	; (800f304 <tcp_receive+0x888>)
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	429a      	cmp	r2, r3
 800f11a:	f040 829a 	bne.w	800f652 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f11e:	4b7a      	ldr	r3, [pc, #488]	; (800f308 <tcp_receive+0x88c>)
 800f120:	891c      	ldrh	r4, [r3, #8]
 800f122:	4b79      	ldr	r3, [pc, #484]	; (800f308 <tcp_receive+0x88c>)
 800f124:	691b      	ldr	r3, [r3, #16]
 800f126:	899b      	ldrh	r3, [r3, #12]
 800f128:	b29b      	uxth	r3, r3
 800f12a:	4618      	mov	r0, r3
 800f12c:	f7fa fa68 	bl	8009600 <lwip_htons>
 800f130:	4603      	mov	r3, r0
 800f132:	b2db      	uxtb	r3, r3
 800f134:	f003 0303 	and.w	r3, r3, #3
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d001      	beq.n	800f140 <tcp_receive+0x6c4>
 800f13c:	2301      	movs	r3, #1
 800f13e:	e000      	b.n	800f142 <tcp_receive+0x6c6>
 800f140:	2300      	movs	r3, #0
 800f142:	4423      	add	r3, r4
 800f144:	b29a      	uxth	r2, r3
 800f146:	4b71      	ldr	r3, [pc, #452]	; (800f30c <tcp_receive+0x890>)
 800f148:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f14e:	4b6f      	ldr	r3, [pc, #444]	; (800f30c <tcp_receive+0x890>)
 800f150:	881b      	ldrh	r3, [r3, #0]
 800f152:	429a      	cmp	r2, r3
 800f154:	d275      	bcs.n	800f242 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f156:	4b6c      	ldr	r3, [pc, #432]	; (800f308 <tcp_receive+0x88c>)
 800f158:	691b      	ldr	r3, [r3, #16]
 800f15a:	899b      	ldrh	r3, [r3, #12]
 800f15c:	b29b      	uxth	r3, r3
 800f15e:	4618      	mov	r0, r3
 800f160:	f7fa fa4e 	bl	8009600 <lwip_htons>
 800f164:	4603      	mov	r3, r0
 800f166:	b2db      	uxtb	r3, r3
 800f168:	f003 0301 	and.w	r3, r3, #1
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d01f      	beq.n	800f1b0 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f170:	4b65      	ldr	r3, [pc, #404]	; (800f308 <tcp_receive+0x88c>)
 800f172:	691b      	ldr	r3, [r3, #16]
 800f174:	899b      	ldrh	r3, [r3, #12]
 800f176:	b29b      	uxth	r3, r3
 800f178:	b21b      	sxth	r3, r3
 800f17a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f17e:	b21c      	sxth	r4, r3
 800f180:	4b61      	ldr	r3, [pc, #388]	; (800f308 <tcp_receive+0x88c>)
 800f182:	691b      	ldr	r3, [r3, #16]
 800f184:	899b      	ldrh	r3, [r3, #12]
 800f186:	b29b      	uxth	r3, r3
 800f188:	4618      	mov	r0, r3
 800f18a:	f7fa fa39 	bl	8009600 <lwip_htons>
 800f18e:	4603      	mov	r3, r0
 800f190:	b2db      	uxtb	r3, r3
 800f192:	b29b      	uxth	r3, r3
 800f194:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f198:	b29b      	uxth	r3, r3
 800f19a:	4618      	mov	r0, r3
 800f19c:	f7fa fa30 	bl	8009600 <lwip_htons>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	b21b      	sxth	r3, r3
 800f1a4:	4323      	orrs	r3, r4
 800f1a6:	b21a      	sxth	r2, r3
 800f1a8:	4b57      	ldr	r3, [pc, #348]	; (800f308 <tcp_receive+0x88c>)
 800f1aa:	691b      	ldr	r3, [r3, #16]
 800f1ac:	b292      	uxth	r2, r2
 800f1ae:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f1b4:	4b54      	ldr	r3, [pc, #336]	; (800f308 <tcp_receive+0x88c>)
 800f1b6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f1b8:	4b53      	ldr	r3, [pc, #332]	; (800f308 <tcp_receive+0x88c>)
 800f1ba:	691b      	ldr	r3, [r3, #16]
 800f1bc:	899b      	ldrh	r3, [r3, #12]
 800f1be:	b29b      	uxth	r3, r3
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	f7fa fa1d 	bl	8009600 <lwip_htons>
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	b2db      	uxtb	r3, r3
 800f1ca:	f003 0302 	and.w	r3, r3, #2
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d005      	beq.n	800f1de <tcp_receive+0x762>
            inseg.len -= 1;
 800f1d2:	4b4d      	ldr	r3, [pc, #308]	; (800f308 <tcp_receive+0x88c>)
 800f1d4:	891b      	ldrh	r3, [r3, #8]
 800f1d6:	3b01      	subs	r3, #1
 800f1d8:	b29a      	uxth	r2, r3
 800f1da:	4b4b      	ldr	r3, [pc, #300]	; (800f308 <tcp_receive+0x88c>)
 800f1dc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f1de:	4b4a      	ldr	r3, [pc, #296]	; (800f308 <tcp_receive+0x88c>)
 800f1e0:	685b      	ldr	r3, [r3, #4]
 800f1e2:	4a49      	ldr	r2, [pc, #292]	; (800f308 <tcp_receive+0x88c>)
 800f1e4:	8912      	ldrh	r2, [r2, #8]
 800f1e6:	4611      	mov	r1, r2
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	f7fc f865 	bl	800b2b8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f1ee:	4b46      	ldr	r3, [pc, #280]	; (800f308 <tcp_receive+0x88c>)
 800f1f0:	891c      	ldrh	r4, [r3, #8]
 800f1f2:	4b45      	ldr	r3, [pc, #276]	; (800f308 <tcp_receive+0x88c>)
 800f1f4:	691b      	ldr	r3, [r3, #16]
 800f1f6:	899b      	ldrh	r3, [r3, #12]
 800f1f8:	b29b      	uxth	r3, r3
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	f7fa fa00 	bl	8009600 <lwip_htons>
 800f200:	4603      	mov	r3, r0
 800f202:	b2db      	uxtb	r3, r3
 800f204:	f003 0303 	and.w	r3, r3, #3
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d001      	beq.n	800f210 <tcp_receive+0x794>
 800f20c:	2301      	movs	r3, #1
 800f20e:	e000      	b.n	800f212 <tcp_receive+0x796>
 800f210:	2300      	movs	r3, #0
 800f212:	4423      	add	r3, r4
 800f214:	b29a      	uxth	r2, r3
 800f216:	4b3d      	ldr	r3, [pc, #244]	; (800f30c <tcp_receive+0x890>)
 800f218:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f21a:	4b3c      	ldr	r3, [pc, #240]	; (800f30c <tcp_receive+0x890>)
 800f21c:	881b      	ldrh	r3, [r3, #0]
 800f21e:	461a      	mov	r2, r3
 800f220:	4b38      	ldr	r3, [pc, #224]	; (800f304 <tcp_receive+0x888>)
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	441a      	add	r2, r3
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f22a:	6879      	ldr	r1, [r7, #4]
 800f22c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f22e:	440b      	add	r3, r1
 800f230:	429a      	cmp	r2, r3
 800f232:	d006      	beq.n	800f242 <tcp_receive+0x7c6>
 800f234:	4b36      	ldr	r3, [pc, #216]	; (800f310 <tcp_receive+0x894>)
 800f236:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800f23a:	4936      	ldr	r1, [pc, #216]	; (800f314 <tcp_receive+0x898>)
 800f23c:	4836      	ldr	r0, [pc, #216]	; (800f318 <tcp_receive+0x89c>)
 800f23e:	f007 ff93 	bl	8017168 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f246:	2b00      	cmp	r3, #0
 800f248:	f000 80e7 	beq.w	800f41a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f24c:	4b2e      	ldr	r3, [pc, #184]	; (800f308 <tcp_receive+0x88c>)
 800f24e:	691b      	ldr	r3, [r3, #16]
 800f250:	899b      	ldrh	r3, [r3, #12]
 800f252:	b29b      	uxth	r3, r3
 800f254:	4618      	mov	r0, r3
 800f256:	f7fa f9d3 	bl	8009600 <lwip_htons>
 800f25a:	4603      	mov	r3, r0
 800f25c:	b2db      	uxtb	r3, r3
 800f25e:	f003 0301 	and.w	r3, r3, #1
 800f262:	2b00      	cmp	r3, #0
 800f264:	d010      	beq.n	800f288 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f266:	e00a      	b.n	800f27e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f26c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f272:	681a      	ldr	r2, [r3, #0]
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800f278:	68f8      	ldr	r0, [r7, #12]
 800f27a:	f7fd fd8c 	bl	800cd96 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f282:	2b00      	cmp	r3, #0
 800f284:	d1f0      	bne.n	800f268 <tcp_receive+0x7ec>
 800f286:	e0c8      	b.n	800f41a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f28c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f28e:	e052      	b.n	800f336 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f292:	691b      	ldr	r3, [r3, #16]
 800f294:	899b      	ldrh	r3, [r3, #12]
 800f296:	b29b      	uxth	r3, r3
 800f298:	4618      	mov	r0, r3
 800f29a:	f7fa f9b1 	bl	8009600 <lwip_htons>
 800f29e:	4603      	mov	r3, r0
 800f2a0:	b2db      	uxtb	r3, r3
 800f2a2:	f003 0301 	and.w	r3, r3, #1
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d03d      	beq.n	800f326 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f2aa:	4b17      	ldr	r3, [pc, #92]	; (800f308 <tcp_receive+0x88c>)
 800f2ac:	691b      	ldr	r3, [r3, #16]
 800f2ae:	899b      	ldrh	r3, [r3, #12]
 800f2b0:	b29b      	uxth	r3, r3
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	f7fa f9a4 	bl	8009600 <lwip_htons>
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	b2db      	uxtb	r3, r3
 800f2bc:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d130      	bne.n	800f326 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f2c4:	4b10      	ldr	r3, [pc, #64]	; (800f308 <tcp_receive+0x88c>)
 800f2c6:	691b      	ldr	r3, [r3, #16]
 800f2c8:	899b      	ldrh	r3, [r3, #12]
 800f2ca:	b29c      	uxth	r4, r3
 800f2cc:	2001      	movs	r0, #1
 800f2ce:	f7fa f997 	bl	8009600 <lwip_htons>
 800f2d2:	4603      	mov	r3, r0
 800f2d4:	461a      	mov	r2, r3
 800f2d6:	4b0c      	ldr	r3, [pc, #48]	; (800f308 <tcp_receive+0x88c>)
 800f2d8:	691b      	ldr	r3, [r3, #16]
 800f2da:	4322      	orrs	r2, r4
 800f2dc:	b292      	uxth	r2, r2
 800f2de:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f2e0:	4b09      	ldr	r3, [pc, #36]	; (800f308 <tcp_receive+0x88c>)
 800f2e2:	891c      	ldrh	r4, [r3, #8]
 800f2e4:	4b08      	ldr	r3, [pc, #32]	; (800f308 <tcp_receive+0x88c>)
 800f2e6:	691b      	ldr	r3, [r3, #16]
 800f2e8:	899b      	ldrh	r3, [r3, #12]
 800f2ea:	b29b      	uxth	r3, r3
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	f7fa f987 	bl	8009600 <lwip_htons>
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	b2db      	uxtb	r3, r3
 800f2f6:	f003 0303 	and.w	r3, r3, #3
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d00e      	beq.n	800f31c <tcp_receive+0x8a0>
 800f2fe:	2301      	movs	r3, #1
 800f300:	e00d      	b.n	800f31e <tcp_receive+0x8a2>
 800f302:	bf00      	nop
 800f304:	2000da24 	.word	0x2000da24
 800f308:	2000da00 	.word	0x2000da00
 800f30c:	2000da2e 	.word	0x2000da2e
 800f310:	08019b80 	.word	0x08019b80
 800f314:	08019f28 	.word	0x08019f28
 800f318:	08019bcc 	.word	0x08019bcc
 800f31c:	2300      	movs	r3, #0
 800f31e:	4423      	add	r3, r4
 800f320:	b29a      	uxth	r2, r3
 800f322:	4b98      	ldr	r3, [pc, #608]	; (800f584 <tcp_receive+0xb08>)
 800f324:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f328:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f32a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800f330:	6938      	ldr	r0, [r7, #16]
 800f332:	f7fd fd30 	bl	800cd96 <tcp_seg_free>
            while (next &&
 800f336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d00e      	beq.n	800f35a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f33c:	4b91      	ldr	r3, [pc, #580]	; (800f584 <tcp_receive+0xb08>)
 800f33e:	881b      	ldrh	r3, [r3, #0]
 800f340:	461a      	mov	r2, r3
 800f342:	4b91      	ldr	r3, [pc, #580]	; (800f588 <tcp_receive+0xb0c>)
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	441a      	add	r2, r3
 800f348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f34a:	691b      	ldr	r3, [r3, #16]
 800f34c:	685b      	ldr	r3, [r3, #4]
 800f34e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f350:	8909      	ldrh	r1, [r1, #8]
 800f352:	440b      	add	r3, r1
 800f354:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f356:	2b00      	cmp	r3, #0
 800f358:	da9a      	bge.n	800f290 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f35a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d059      	beq.n	800f414 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800f360:	4b88      	ldr	r3, [pc, #544]	; (800f584 <tcp_receive+0xb08>)
 800f362:	881b      	ldrh	r3, [r3, #0]
 800f364:	461a      	mov	r2, r3
 800f366:	4b88      	ldr	r3, [pc, #544]	; (800f588 <tcp_receive+0xb0c>)
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	441a      	add	r2, r3
 800f36c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f36e:	691b      	ldr	r3, [r3, #16]
 800f370:	685b      	ldr	r3, [r3, #4]
 800f372:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f374:	2b00      	cmp	r3, #0
 800f376:	dd4d      	ble.n	800f414 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f37a:	691b      	ldr	r3, [r3, #16]
 800f37c:	685b      	ldr	r3, [r3, #4]
 800f37e:	b29a      	uxth	r2, r3
 800f380:	4b81      	ldr	r3, [pc, #516]	; (800f588 <tcp_receive+0xb0c>)
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	b29b      	uxth	r3, r3
 800f386:	1ad3      	subs	r3, r2, r3
 800f388:	b29a      	uxth	r2, r3
 800f38a:	4b80      	ldr	r3, [pc, #512]	; (800f58c <tcp_receive+0xb10>)
 800f38c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f38e:	4b7f      	ldr	r3, [pc, #508]	; (800f58c <tcp_receive+0xb10>)
 800f390:	691b      	ldr	r3, [r3, #16]
 800f392:	899b      	ldrh	r3, [r3, #12]
 800f394:	b29b      	uxth	r3, r3
 800f396:	4618      	mov	r0, r3
 800f398:	f7fa f932 	bl	8009600 <lwip_htons>
 800f39c:	4603      	mov	r3, r0
 800f39e:	b2db      	uxtb	r3, r3
 800f3a0:	f003 0302 	and.w	r3, r3, #2
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d005      	beq.n	800f3b4 <tcp_receive+0x938>
                inseg.len -= 1;
 800f3a8:	4b78      	ldr	r3, [pc, #480]	; (800f58c <tcp_receive+0xb10>)
 800f3aa:	891b      	ldrh	r3, [r3, #8]
 800f3ac:	3b01      	subs	r3, #1
 800f3ae:	b29a      	uxth	r2, r3
 800f3b0:	4b76      	ldr	r3, [pc, #472]	; (800f58c <tcp_receive+0xb10>)
 800f3b2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f3b4:	4b75      	ldr	r3, [pc, #468]	; (800f58c <tcp_receive+0xb10>)
 800f3b6:	685b      	ldr	r3, [r3, #4]
 800f3b8:	4a74      	ldr	r2, [pc, #464]	; (800f58c <tcp_receive+0xb10>)
 800f3ba:	8912      	ldrh	r2, [r2, #8]
 800f3bc:	4611      	mov	r1, r2
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f7fb ff7a 	bl	800b2b8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f3c4:	4b71      	ldr	r3, [pc, #452]	; (800f58c <tcp_receive+0xb10>)
 800f3c6:	891c      	ldrh	r4, [r3, #8]
 800f3c8:	4b70      	ldr	r3, [pc, #448]	; (800f58c <tcp_receive+0xb10>)
 800f3ca:	691b      	ldr	r3, [r3, #16]
 800f3cc:	899b      	ldrh	r3, [r3, #12]
 800f3ce:	b29b      	uxth	r3, r3
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	f7fa f915 	bl	8009600 <lwip_htons>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	b2db      	uxtb	r3, r3
 800f3da:	f003 0303 	and.w	r3, r3, #3
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d001      	beq.n	800f3e6 <tcp_receive+0x96a>
 800f3e2:	2301      	movs	r3, #1
 800f3e4:	e000      	b.n	800f3e8 <tcp_receive+0x96c>
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	4423      	add	r3, r4
 800f3ea:	b29a      	uxth	r2, r3
 800f3ec:	4b65      	ldr	r3, [pc, #404]	; (800f584 <tcp_receive+0xb08>)
 800f3ee:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f3f0:	4b64      	ldr	r3, [pc, #400]	; (800f584 <tcp_receive+0xb08>)
 800f3f2:	881b      	ldrh	r3, [r3, #0]
 800f3f4:	461a      	mov	r2, r3
 800f3f6:	4b64      	ldr	r3, [pc, #400]	; (800f588 <tcp_receive+0xb0c>)
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	441a      	add	r2, r3
 800f3fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3fe:	691b      	ldr	r3, [r3, #16]
 800f400:	685b      	ldr	r3, [r3, #4]
 800f402:	429a      	cmp	r2, r3
 800f404:	d006      	beq.n	800f414 <tcp_receive+0x998>
 800f406:	4b62      	ldr	r3, [pc, #392]	; (800f590 <tcp_receive+0xb14>)
 800f408:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800f40c:	4961      	ldr	r1, [pc, #388]	; (800f594 <tcp_receive+0xb18>)
 800f40e:	4862      	ldr	r0, [pc, #392]	; (800f598 <tcp_receive+0xb1c>)
 800f410:	f007 feaa 	bl	8017168 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f418:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f41a:	4b5a      	ldr	r3, [pc, #360]	; (800f584 <tcp_receive+0xb08>)
 800f41c:	881b      	ldrh	r3, [r3, #0]
 800f41e:	461a      	mov	r2, r3
 800f420:	4b59      	ldr	r3, [pc, #356]	; (800f588 <tcp_receive+0xb0c>)
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	441a      	add	r2, r3
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f42e:	4b55      	ldr	r3, [pc, #340]	; (800f584 <tcp_receive+0xb08>)
 800f430:	881b      	ldrh	r3, [r3, #0]
 800f432:	429a      	cmp	r2, r3
 800f434:	d206      	bcs.n	800f444 <tcp_receive+0x9c8>
 800f436:	4b56      	ldr	r3, [pc, #344]	; (800f590 <tcp_receive+0xb14>)
 800f438:	f240 6207 	movw	r2, #1543	; 0x607
 800f43c:	4957      	ldr	r1, [pc, #348]	; (800f59c <tcp_receive+0xb20>)
 800f43e:	4856      	ldr	r0, [pc, #344]	; (800f598 <tcp_receive+0xb1c>)
 800f440:	f007 fe92 	bl	8017168 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f448:	4b4e      	ldr	r3, [pc, #312]	; (800f584 <tcp_receive+0xb08>)
 800f44a:	881b      	ldrh	r3, [r3, #0]
 800f44c:	1ad3      	subs	r3, r2, r3
 800f44e:	b29a      	uxth	r2, r3
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f454:	6878      	ldr	r0, [r7, #4]
 800f456:	f7fc ffbf 	bl	800c3d8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f45a:	4b4c      	ldr	r3, [pc, #304]	; (800f58c <tcp_receive+0xb10>)
 800f45c:	685b      	ldr	r3, [r3, #4]
 800f45e:	891b      	ldrh	r3, [r3, #8]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d006      	beq.n	800f472 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800f464:	4b49      	ldr	r3, [pc, #292]	; (800f58c <tcp_receive+0xb10>)
 800f466:	685b      	ldr	r3, [r3, #4]
 800f468:	4a4d      	ldr	r2, [pc, #308]	; (800f5a0 <tcp_receive+0xb24>)
 800f46a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f46c:	4b47      	ldr	r3, [pc, #284]	; (800f58c <tcp_receive+0xb10>)
 800f46e:	2200      	movs	r2, #0
 800f470:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f472:	4b46      	ldr	r3, [pc, #280]	; (800f58c <tcp_receive+0xb10>)
 800f474:	691b      	ldr	r3, [r3, #16]
 800f476:	899b      	ldrh	r3, [r3, #12]
 800f478:	b29b      	uxth	r3, r3
 800f47a:	4618      	mov	r0, r3
 800f47c:	f7fa f8c0 	bl	8009600 <lwip_htons>
 800f480:	4603      	mov	r3, r0
 800f482:	b2db      	uxtb	r3, r3
 800f484:	f003 0301 	and.w	r3, r3, #1
 800f488:	2b00      	cmp	r3, #0
 800f48a:	f000 80b8 	beq.w	800f5fe <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f48e:	4b45      	ldr	r3, [pc, #276]	; (800f5a4 <tcp_receive+0xb28>)
 800f490:	781b      	ldrb	r3, [r3, #0]
 800f492:	f043 0320 	orr.w	r3, r3, #32
 800f496:	b2da      	uxtb	r2, r3
 800f498:	4b42      	ldr	r3, [pc, #264]	; (800f5a4 <tcp_receive+0xb28>)
 800f49a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f49c:	e0af      	b.n	800f5fe <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4a2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4a8:	691b      	ldr	r3, [r3, #16]
 800f4aa:	685b      	ldr	r3, [r3, #4]
 800f4ac:	4a36      	ldr	r2, [pc, #216]	; (800f588 <tcp_receive+0xb0c>)
 800f4ae:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f4b0:	68bb      	ldr	r3, [r7, #8]
 800f4b2:	891b      	ldrh	r3, [r3, #8]
 800f4b4:	461c      	mov	r4, r3
 800f4b6:	68bb      	ldr	r3, [r7, #8]
 800f4b8:	691b      	ldr	r3, [r3, #16]
 800f4ba:	899b      	ldrh	r3, [r3, #12]
 800f4bc:	b29b      	uxth	r3, r3
 800f4be:	4618      	mov	r0, r3
 800f4c0:	f7fa f89e 	bl	8009600 <lwip_htons>
 800f4c4:	4603      	mov	r3, r0
 800f4c6:	b2db      	uxtb	r3, r3
 800f4c8:	f003 0303 	and.w	r3, r3, #3
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d001      	beq.n	800f4d4 <tcp_receive+0xa58>
 800f4d0:	2301      	movs	r3, #1
 800f4d2:	e000      	b.n	800f4d6 <tcp_receive+0xa5a>
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	191a      	adds	r2, r3, r4
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4dc:	441a      	add	r2, r3
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f4e6:	461c      	mov	r4, r3
 800f4e8:	68bb      	ldr	r3, [r7, #8]
 800f4ea:	891b      	ldrh	r3, [r3, #8]
 800f4ec:	461d      	mov	r5, r3
 800f4ee:	68bb      	ldr	r3, [r7, #8]
 800f4f0:	691b      	ldr	r3, [r3, #16]
 800f4f2:	899b      	ldrh	r3, [r3, #12]
 800f4f4:	b29b      	uxth	r3, r3
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	f7fa f882 	bl	8009600 <lwip_htons>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	b2db      	uxtb	r3, r3
 800f500:	f003 0303 	and.w	r3, r3, #3
 800f504:	2b00      	cmp	r3, #0
 800f506:	d001      	beq.n	800f50c <tcp_receive+0xa90>
 800f508:	2301      	movs	r3, #1
 800f50a:	e000      	b.n	800f50e <tcp_receive+0xa92>
 800f50c:	2300      	movs	r3, #0
 800f50e:	442b      	add	r3, r5
 800f510:	429c      	cmp	r4, r3
 800f512:	d206      	bcs.n	800f522 <tcp_receive+0xaa6>
 800f514:	4b1e      	ldr	r3, [pc, #120]	; (800f590 <tcp_receive+0xb14>)
 800f516:	f240 622b 	movw	r2, #1579	; 0x62b
 800f51a:	4923      	ldr	r1, [pc, #140]	; (800f5a8 <tcp_receive+0xb2c>)
 800f51c:	481e      	ldr	r0, [pc, #120]	; (800f598 <tcp_receive+0xb1c>)
 800f51e:	f007 fe23 	bl	8017168 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f522:	68bb      	ldr	r3, [r7, #8]
 800f524:	891b      	ldrh	r3, [r3, #8]
 800f526:	461c      	mov	r4, r3
 800f528:	68bb      	ldr	r3, [r7, #8]
 800f52a:	691b      	ldr	r3, [r3, #16]
 800f52c:	899b      	ldrh	r3, [r3, #12]
 800f52e:	b29b      	uxth	r3, r3
 800f530:	4618      	mov	r0, r3
 800f532:	f7fa f865 	bl	8009600 <lwip_htons>
 800f536:	4603      	mov	r3, r0
 800f538:	b2db      	uxtb	r3, r3
 800f53a:	f003 0303 	and.w	r3, r3, #3
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d001      	beq.n	800f546 <tcp_receive+0xaca>
 800f542:	2301      	movs	r3, #1
 800f544:	e000      	b.n	800f548 <tcp_receive+0xacc>
 800f546:	2300      	movs	r3, #0
 800f548:	1919      	adds	r1, r3, r4
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f54e:	b28b      	uxth	r3, r1
 800f550:	1ad3      	subs	r3, r2, r3
 800f552:	b29a      	uxth	r2, r3
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f558:	6878      	ldr	r0, [r7, #4]
 800f55a:	f7fc ff3d 	bl	800c3d8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f55e:	68bb      	ldr	r3, [r7, #8]
 800f560:	685b      	ldr	r3, [r3, #4]
 800f562:	891b      	ldrh	r3, [r3, #8]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d028      	beq.n	800f5ba <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f568:	4b0d      	ldr	r3, [pc, #52]	; (800f5a0 <tcp_receive+0xb24>)
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d01d      	beq.n	800f5ac <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800f570:	4b0b      	ldr	r3, [pc, #44]	; (800f5a0 <tcp_receive+0xb24>)
 800f572:	681a      	ldr	r2, [r3, #0]
 800f574:	68bb      	ldr	r3, [r7, #8]
 800f576:	685b      	ldr	r3, [r3, #4]
 800f578:	4619      	mov	r1, r3
 800f57a:	4610      	mov	r0, r2
 800f57c:	f7fc f8f0 	bl	800b760 <pbuf_cat>
 800f580:	e018      	b.n	800f5b4 <tcp_receive+0xb38>
 800f582:	bf00      	nop
 800f584:	2000da2e 	.word	0x2000da2e
 800f588:	2000da24 	.word	0x2000da24
 800f58c:	2000da00 	.word	0x2000da00
 800f590:	08019b80 	.word	0x08019b80
 800f594:	08019f60 	.word	0x08019f60
 800f598:	08019bcc 	.word	0x08019bcc
 800f59c:	08019f9c 	.word	0x08019f9c
 800f5a0:	2000da34 	.word	0x2000da34
 800f5a4:	2000da31 	.word	0x2000da31
 800f5a8:	08019fbc 	.word	0x08019fbc
            } else {
              recv_data = cseg->p;
 800f5ac:	68bb      	ldr	r3, [r7, #8]
 800f5ae:	685b      	ldr	r3, [r3, #4]
 800f5b0:	4a70      	ldr	r2, [pc, #448]	; (800f774 <tcp_receive+0xcf8>)
 800f5b2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f5b4:	68bb      	ldr	r3, [r7, #8]
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f5ba:	68bb      	ldr	r3, [r7, #8]
 800f5bc:	691b      	ldr	r3, [r3, #16]
 800f5be:	899b      	ldrh	r3, [r3, #12]
 800f5c0:	b29b      	uxth	r3, r3
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f7fa f81c 	bl	8009600 <lwip_htons>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	b2db      	uxtb	r3, r3
 800f5cc:	f003 0301 	and.w	r3, r3, #1
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d00d      	beq.n	800f5f0 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f5d4:	4b68      	ldr	r3, [pc, #416]	; (800f778 <tcp_receive+0xcfc>)
 800f5d6:	781b      	ldrb	r3, [r3, #0]
 800f5d8:	f043 0320 	orr.w	r3, r3, #32
 800f5dc:	b2da      	uxtb	r2, r3
 800f5de:	4b66      	ldr	r3, [pc, #408]	; (800f778 <tcp_receive+0xcfc>)
 800f5e0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	7d1b      	ldrb	r3, [r3, #20]
 800f5e6:	2b04      	cmp	r3, #4
 800f5e8:	d102      	bne.n	800f5f0 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	2207      	movs	r2, #7
 800f5ee:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f5f0:	68bb      	ldr	r3, [r7, #8]
 800f5f2:	681a      	ldr	r2, [r3, #0]
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800f5f8:	68b8      	ldr	r0, [r7, #8]
 800f5fa:	f7fd fbcc 	bl	800cd96 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f602:	2b00      	cmp	r3, #0
 800f604:	d008      	beq.n	800f618 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f60a:	691b      	ldr	r3, [r3, #16]
 800f60c:	685a      	ldr	r2, [r3, #4]
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800f612:	429a      	cmp	r2, r3
 800f614:	f43f af43 	beq.w	800f49e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	8b5b      	ldrh	r3, [r3, #26]
 800f61c:	f003 0301 	and.w	r3, r3, #1
 800f620:	2b00      	cmp	r3, #0
 800f622:	d00e      	beq.n	800f642 <tcp_receive+0xbc6>
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	8b5b      	ldrh	r3, [r3, #26]
 800f628:	f023 0301 	bic.w	r3, r3, #1
 800f62c:	b29a      	uxth	r2, r3
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	835a      	strh	r2, [r3, #26]
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	8b5b      	ldrh	r3, [r3, #26]
 800f636:	f043 0302 	orr.w	r3, r3, #2
 800f63a:	b29a      	uxth	r2, r3
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f640:	e188      	b.n	800f954 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	8b5b      	ldrh	r3, [r3, #26]
 800f646:	f043 0301 	orr.w	r3, r3, #1
 800f64a:	b29a      	uxth	r2, r3
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f650:	e180      	b.n	800f954 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f656:	2b00      	cmp	r3, #0
 800f658:	d106      	bne.n	800f668 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f65a:	4848      	ldr	r0, [pc, #288]	; (800f77c <tcp_receive+0xd00>)
 800f65c:	f7fd fbb4 	bl	800cdc8 <tcp_seg_copy>
 800f660:	4602      	mov	r2, r0
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	675a      	str	r2, [r3, #116]	; 0x74
 800f666:	e16d      	b.n	800f944 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800f668:	2300      	movs	r3, #0
 800f66a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f670:	63bb      	str	r3, [r7, #56]	; 0x38
 800f672:	e157      	b.n	800f924 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800f674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f676:	691b      	ldr	r3, [r3, #16]
 800f678:	685a      	ldr	r2, [r3, #4]
 800f67a:	4b41      	ldr	r3, [pc, #260]	; (800f780 <tcp_receive+0xd04>)
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	429a      	cmp	r2, r3
 800f680:	d11d      	bne.n	800f6be <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800f682:	4b3e      	ldr	r3, [pc, #248]	; (800f77c <tcp_receive+0xd00>)
 800f684:	891a      	ldrh	r2, [r3, #8]
 800f686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f688:	891b      	ldrh	r3, [r3, #8]
 800f68a:	429a      	cmp	r2, r3
 800f68c:	f240 814f 	bls.w	800f92e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f690:	483a      	ldr	r0, [pc, #232]	; (800f77c <tcp_receive+0xd00>)
 800f692:	f7fd fb99 	bl	800cdc8 <tcp_seg_copy>
 800f696:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800f698:	697b      	ldr	r3, [r7, #20]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	f000 8149 	beq.w	800f932 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800f6a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d003      	beq.n	800f6ae <tcp_receive+0xc32>
                    prev->next = cseg;
 800f6a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6a8:	697a      	ldr	r2, [r7, #20]
 800f6aa:	601a      	str	r2, [r3, #0]
 800f6ac:	e002      	b.n	800f6b4 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	697a      	ldr	r2, [r7, #20]
 800f6b2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f6b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f6b6:	6978      	ldr	r0, [r7, #20]
 800f6b8:	f7ff f8dc 	bl	800e874 <tcp_oos_insert_segment>
                }
                break;
 800f6bc:	e139      	b.n	800f932 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f6be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d117      	bne.n	800f6f4 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f6c4:	4b2e      	ldr	r3, [pc, #184]	; (800f780 <tcp_receive+0xd04>)
 800f6c6:	681a      	ldr	r2, [r3, #0]
 800f6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6ca:	691b      	ldr	r3, [r3, #16]
 800f6cc:	685b      	ldr	r3, [r3, #4]
 800f6ce:	1ad3      	subs	r3, r2, r3
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	da57      	bge.n	800f784 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f6d4:	4829      	ldr	r0, [pc, #164]	; (800f77c <tcp_receive+0xd00>)
 800f6d6:	f7fd fb77 	bl	800cdc8 <tcp_seg_copy>
 800f6da:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800f6dc:	69bb      	ldr	r3, [r7, #24]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	f000 8129 	beq.w	800f936 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	69ba      	ldr	r2, [r7, #24]
 800f6e8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800f6ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f6ec:	69b8      	ldr	r0, [r7, #24]
 800f6ee:	f7ff f8c1 	bl	800e874 <tcp_oos_insert_segment>
                  }
                  break;
 800f6f2:	e120      	b.n	800f936 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800f6f4:	4b22      	ldr	r3, [pc, #136]	; (800f780 <tcp_receive+0xd04>)
 800f6f6:	681a      	ldr	r2, [r3, #0]
 800f6f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6fa:	691b      	ldr	r3, [r3, #16]
 800f6fc:	685b      	ldr	r3, [r3, #4]
 800f6fe:	1ad3      	subs	r3, r2, r3
 800f700:	3b01      	subs	r3, #1
 800f702:	2b00      	cmp	r3, #0
 800f704:	db3e      	blt.n	800f784 <tcp_receive+0xd08>
 800f706:	4b1e      	ldr	r3, [pc, #120]	; (800f780 <tcp_receive+0xd04>)
 800f708:	681a      	ldr	r2, [r3, #0]
 800f70a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f70c:	691b      	ldr	r3, [r3, #16]
 800f70e:	685b      	ldr	r3, [r3, #4]
 800f710:	1ad3      	subs	r3, r2, r3
 800f712:	3301      	adds	r3, #1
 800f714:	2b00      	cmp	r3, #0
 800f716:	dc35      	bgt.n	800f784 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f718:	4818      	ldr	r0, [pc, #96]	; (800f77c <tcp_receive+0xd00>)
 800f71a:	f7fd fb55 	bl	800cdc8 <tcp_seg_copy>
 800f71e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800f720:	69fb      	ldr	r3, [r7, #28]
 800f722:	2b00      	cmp	r3, #0
 800f724:	f000 8109 	beq.w	800f93a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f72a:	691b      	ldr	r3, [r3, #16]
 800f72c:	685b      	ldr	r3, [r3, #4]
 800f72e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f730:	8912      	ldrh	r2, [r2, #8]
 800f732:	441a      	add	r2, r3
 800f734:	4b12      	ldr	r3, [pc, #72]	; (800f780 <tcp_receive+0xd04>)
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	1ad3      	subs	r3, r2, r3
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	dd12      	ble.n	800f764 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f73e:	4b10      	ldr	r3, [pc, #64]	; (800f780 <tcp_receive+0xd04>)
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	b29a      	uxth	r2, r3
 800f744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f746:	691b      	ldr	r3, [r3, #16]
 800f748:	685b      	ldr	r3, [r3, #4]
 800f74a:	b29b      	uxth	r3, r3
 800f74c:	1ad3      	subs	r3, r2, r3
 800f74e:	b29a      	uxth	r2, r3
 800f750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f752:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f756:	685a      	ldr	r2, [r3, #4]
 800f758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f75a:	891b      	ldrh	r3, [r3, #8]
 800f75c:	4619      	mov	r1, r3
 800f75e:	4610      	mov	r0, r2
 800f760:	f7fb fdaa 	bl	800b2b8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f766:	69fa      	ldr	r2, [r7, #28]
 800f768:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f76a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f76c:	69f8      	ldr	r0, [r7, #28]
 800f76e:	f7ff f881 	bl	800e874 <tcp_oos_insert_segment>
                  }
                  break;
 800f772:	e0e2      	b.n	800f93a <tcp_receive+0xebe>
 800f774:	2000da34 	.word	0x2000da34
 800f778:	2000da31 	.word	0x2000da31
 800f77c:	2000da00 	.word	0x2000da00
 800f780:	2000da24 	.word	0x2000da24
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800f784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f786:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800f788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	f040 80c6 	bne.w	800f91e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f792:	4b80      	ldr	r3, [pc, #512]	; (800f994 <tcp_receive+0xf18>)
 800f794:	681a      	ldr	r2, [r3, #0]
 800f796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f798:	691b      	ldr	r3, [r3, #16]
 800f79a:	685b      	ldr	r3, [r3, #4]
 800f79c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	f340 80bd 	ble.w	800f91e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7a6:	691b      	ldr	r3, [r3, #16]
 800f7a8:	899b      	ldrh	r3, [r3, #12]
 800f7aa:	b29b      	uxth	r3, r3
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	f7f9 ff27 	bl	8009600 <lwip_htons>
 800f7b2:	4603      	mov	r3, r0
 800f7b4:	b2db      	uxtb	r3, r3
 800f7b6:	f003 0301 	and.w	r3, r3, #1
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	f040 80bf 	bne.w	800f93e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800f7c0:	4875      	ldr	r0, [pc, #468]	; (800f998 <tcp_receive+0xf1c>)
 800f7c2:	f7fd fb01 	bl	800cdc8 <tcp_seg_copy>
 800f7c6:	4602      	mov	r2, r0
 800f7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7ca:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800f7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	f000 80b6 	beq.w	800f942 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800f7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7d8:	691b      	ldr	r3, [r3, #16]
 800f7da:	685b      	ldr	r3, [r3, #4]
 800f7dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f7de:	8912      	ldrh	r2, [r2, #8]
 800f7e0:	441a      	add	r2, r3
 800f7e2:	4b6c      	ldr	r3, [pc, #432]	; (800f994 <tcp_receive+0xf18>)
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	1ad3      	subs	r3, r2, r3
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	dd12      	ble.n	800f812 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f7ec:	4b69      	ldr	r3, [pc, #420]	; (800f994 <tcp_receive+0xf18>)
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	b29a      	uxth	r2, r3
 800f7f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7f4:	691b      	ldr	r3, [r3, #16]
 800f7f6:	685b      	ldr	r3, [r3, #4]
 800f7f8:	b29b      	uxth	r3, r3
 800f7fa:	1ad3      	subs	r3, r2, r3
 800f7fc:	b29a      	uxth	r2, r3
 800f7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f800:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800f802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f804:	685a      	ldr	r2, [r3, #4]
 800f806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f808:	891b      	ldrh	r3, [r3, #8]
 800f80a:	4619      	mov	r1, r3
 800f80c:	4610      	mov	r0, r2
 800f80e:	f7fb fd53 	bl	800b2b8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800f812:	4b62      	ldr	r3, [pc, #392]	; (800f99c <tcp_receive+0xf20>)
 800f814:	881b      	ldrh	r3, [r3, #0]
 800f816:	461a      	mov	r2, r3
 800f818:	4b5e      	ldr	r3, [pc, #376]	; (800f994 <tcp_receive+0xf18>)
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	441a      	add	r2, r3
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f822:	6879      	ldr	r1, [r7, #4]
 800f824:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f826:	440b      	add	r3, r1
 800f828:	1ad3      	subs	r3, r2, r3
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	f340 8089 	ble.w	800f942 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800f830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	691b      	ldr	r3, [r3, #16]
 800f836:	899b      	ldrh	r3, [r3, #12]
 800f838:	b29b      	uxth	r3, r3
 800f83a:	4618      	mov	r0, r3
 800f83c:	f7f9 fee0 	bl	8009600 <lwip_htons>
 800f840:	4603      	mov	r3, r0
 800f842:	b2db      	uxtb	r3, r3
 800f844:	f003 0301 	and.w	r3, r3, #1
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d022      	beq.n	800f892 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800f84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	691b      	ldr	r3, [r3, #16]
 800f852:	899b      	ldrh	r3, [r3, #12]
 800f854:	b29b      	uxth	r3, r3
 800f856:	b21b      	sxth	r3, r3
 800f858:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f85c:	b21c      	sxth	r4, r3
 800f85e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	691b      	ldr	r3, [r3, #16]
 800f864:	899b      	ldrh	r3, [r3, #12]
 800f866:	b29b      	uxth	r3, r3
 800f868:	4618      	mov	r0, r3
 800f86a:	f7f9 fec9 	bl	8009600 <lwip_htons>
 800f86e:	4603      	mov	r3, r0
 800f870:	b2db      	uxtb	r3, r3
 800f872:	b29b      	uxth	r3, r3
 800f874:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f878:	b29b      	uxth	r3, r3
 800f87a:	4618      	mov	r0, r3
 800f87c:	f7f9 fec0 	bl	8009600 <lwip_htons>
 800f880:	4603      	mov	r3, r0
 800f882:	b21b      	sxth	r3, r3
 800f884:	4323      	orrs	r3, r4
 800f886:	b21a      	sxth	r2, r3
 800f888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	691b      	ldr	r3, [r3, #16]
 800f88e:	b292      	uxth	r2, r2
 800f890:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f896:	b29a      	uxth	r2, r3
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f89c:	4413      	add	r3, r2
 800f89e:	b299      	uxth	r1, r3
 800f8a0:	4b3c      	ldr	r3, [pc, #240]	; (800f994 <tcp_receive+0xf18>)
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	b29a      	uxth	r2, r3
 800f8a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	1a8a      	subs	r2, r1, r2
 800f8ac:	b292      	uxth	r2, r2
 800f8ae:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800f8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	685a      	ldr	r2, [r3, #4]
 800f8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	891b      	ldrh	r3, [r3, #8]
 800f8bc:	4619      	mov	r1, r3
 800f8be:	4610      	mov	r0, r2
 800f8c0:	f7fb fcfa 	bl	800b2b8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800f8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	891c      	ldrh	r4, [r3, #8]
 800f8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	691b      	ldr	r3, [r3, #16]
 800f8d0:	899b      	ldrh	r3, [r3, #12]
 800f8d2:	b29b      	uxth	r3, r3
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	f7f9 fe93 	bl	8009600 <lwip_htons>
 800f8da:	4603      	mov	r3, r0
 800f8dc:	b2db      	uxtb	r3, r3
 800f8de:	f003 0303 	and.w	r3, r3, #3
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d001      	beq.n	800f8ea <tcp_receive+0xe6e>
 800f8e6:	2301      	movs	r3, #1
 800f8e8:	e000      	b.n	800f8ec <tcp_receive+0xe70>
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	4423      	add	r3, r4
 800f8ee:	b29a      	uxth	r2, r3
 800f8f0:	4b2a      	ldr	r3, [pc, #168]	; (800f99c <tcp_receive+0xf20>)
 800f8f2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f8f4:	4b29      	ldr	r3, [pc, #164]	; (800f99c <tcp_receive+0xf20>)
 800f8f6:	881b      	ldrh	r3, [r3, #0]
 800f8f8:	461a      	mov	r2, r3
 800f8fa:	4b26      	ldr	r3, [pc, #152]	; (800f994 <tcp_receive+0xf18>)
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	441a      	add	r2, r3
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f904:	6879      	ldr	r1, [r7, #4]
 800f906:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f908:	440b      	add	r3, r1
 800f90a:	429a      	cmp	r2, r3
 800f90c:	d019      	beq.n	800f942 <tcp_receive+0xec6>
 800f90e:	4b24      	ldr	r3, [pc, #144]	; (800f9a0 <tcp_receive+0xf24>)
 800f910:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800f914:	4923      	ldr	r1, [pc, #140]	; (800f9a4 <tcp_receive+0xf28>)
 800f916:	4824      	ldr	r0, [pc, #144]	; (800f9a8 <tcp_receive+0xf2c>)
 800f918:	f007 fc26 	bl	8017168 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800f91c:	e011      	b.n	800f942 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f91e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	63bb      	str	r3, [r7, #56]	; 0x38
 800f924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f926:	2b00      	cmp	r3, #0
 800f928:	f47f aea4 	bne.w	800f674 <tcp_receive+0xbf8>
 800f92c:	e00a      	b.n	800f944 <tcp_receive+0xec8>
                break;
 800f92e:	bf00      	nop
 800f930:	e008      	b.n	800f944 <tcp_receive+0xec8>
                break;
 800f932:	bf00      	nop
 800f934:	e006      	b.n	800f944 <tcp_receive+0xec8>
                  break;
 800f936:	bf00      	nop
 800f938:	e004      	b.n	800f944 <tcp_receive+0xec8>
                  break;
 800f93a:	bf00      	nop
 800f93c:	e002      	b.n	800f944 <tcp_receive+0xec8>
                  break;
 800f93e:	bf00      	nop
 800f940:	e000      	b.n	800f944 <tcp_receive+0xec8>
                break;
 800f942:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800f944:	6878      	ldr	r0, [r7, #4]
 800f946:	f001 fa45 	bl	8010dd4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800f94a:	e003      	b.n	800f954 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800f94c:	6878      	ldr	r0, [r7, #4]
 800f94e:	f001 fa41 	bl	8010dd4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f952:	e01a      	b.n	800f98a <tcp_receive+0xf0e>
 800f954:	e019      	b.n	800f98a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800f956:	4b0f      	ldr	r3, [pc, #60]	; (800f994 <tcp_receive+0xf18>)
 800f958:	681a      	ldr	r2, [r3, #0]
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f95e:	1ad3      	subs	r3, r2, r3
 800f960:	2b00      	cmp	r3, #0
 800f962:	db0a      	blt.n	800f97a <tcp_receive+0xefe>
 800f964:	4b0b      	ldr	r3, [pc, #44]	; (800f994 <tcp_receive+0xf18>)
 800f966:	681a      	ldr	r2, [r3, #0]
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f96c:	6879      	ldr	r1, [r7, #4]
 800f96e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f970:	440b      	add	r3, r1
 800f972:	1ad3      	subs	r3, r2, r3
 800f974:	3301      	adds	r3, #1
 800f976:	2b00      	cmp	r3, #0
 800f978:	dd07      	ble.n	800f98a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	8b5b      	ldrh	r3, [r3, #26]
 800f97e:	f043 0302 	orr.w	r3, r3, #2
 800f982:	b29a      	uxth	r2, r3
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800f988:	e7ff      	b.n	800f98a <tcp_receive+0xf0e>
 800f98a:	bf00      	nop
 800f98c:	3750      	adds	r7, #80	; 0x50
 800f98e:	46bd      	mov	sp, r7
 800f990:	bdb0      	pop	{r4, r5, r7, pc}
 800f992:	bf00      	nop
 800f994:	2000da24 	.word	0x2000da24
 800f998:	2000da00 	.word	0x2000da00
 800f99c:	2000da2e 	.word	0x2000da2e
 800f9a0:	08019b80 	.word	0x08019b80
 800f9a4:	08019f28 	.word	0x08019f28
 800f9a8:	08019bcc 	.word	0x08019bcc

0800f9ac <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800f9ac:	b480      	push	{r7}
 800f9ae:	b083      	sub	sp, #12
 800f9b0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800f9b2:	4b15      	ldr	r3, [pc, #84]	; (800fa08 <tcp_get_next_optbyte+0x5c>)
 800f9b4:	881b      	ldrh	r3, [r3, #0]
 800f9b6:	1c5a      	adds	r2, r3, #1
 800f9b8:	b291      	uxth	r1, r2
 800f9ba:	4a13      	ldr	r2, [pc, #76]	; (800fa08 <tcp_get_next_optbyte+0x5c>)
 800f9bc:	8011      	strh	r1, [r2, #0]
 800f9be:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800f9c0:	4b12      	ldr	r3, [pc, #72]	; (800fa0c <tcp_get_next_optbyte+0x60>)
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d004      	beq.n	800f9d2 <tcp_get_next_optbyte+0x26>
 800f9c8:	4b11      	ldr	r3, [pc, #68]	; (800fa10 <tcp_get_next_optbyte+0x64>)
 800f9ca:	881b      	ldrh	r3, [r3, #0]
 800f9cc:	88fa      	ldrh	r2, [r7, #6]
 800f9ce:	429a      	cmp	r2, r3
 800f9d0:	d208      	bcs.n	800f9e4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800f9d2:	4b10      	ldr	r3, [pc, #64]	; (800fa14 <tcp_get_next_optbyte+0x68>)
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	3314      	adds	r3, #20
 800f9d8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800f9da:	88fb      	ldrh	r3, [r7, #6]
 800f9dc:	683a      	ldr	r2, [r7, #0]
 800f9de:	4413      	add	r3, r2
 800f9e0:	781b      	ldrb	r3, [r3, #0]
 800f9e2:	e00b      	b.n	800f9fc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800f9e4:	88fb      	ldrh	r3, [r7, #6]
 800f9e6:	b2da      	uxtb	r2, r3
 800f9e8:	4b09      	ldr	r3, [pc, #36]	; (800fa10 <tcp_get_next_optbyte+0x64>)
 800f9ea:	881b      	ldrh	r3, [r3, #0]
 800f9ec:	b2db      	uxtb	r3, r3
 800f9ee:	1ad3      	subs	r3, r2, r3
 800f9f0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800f9f2:	4b06      	ldr	r3, [pc, #24]	; (800fa0c <tcp_get_next_optbyte+0x60>)
 800f9f4:	681a      	ldr	r2, [r3, #0]
 800f9f6:	797b      	ldrb	r3, [r7, #5]
 800f9f8:	4413      	add	r3, r2
 800f9fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	370c      	adds	r7, #12
 800fa00:	46bd      	mov	sp, r7
 800fa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa06:	4770      	bx	lr
 800fa08:	2000da20 	.word	0x2000da20
 800fa0c:	2000da1c 	.word	0x2000da1c
 800fa10:	2000da1a 	.word	0x2000da1a
 800fa14:	2000da14 	.word	0x2000da14

0800fa18 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b084      	sub	sp, #16
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d106      	bne.n	800fa34 <tcp_parseopt+0x1c>
 800fa26:	4b32      	ldr	r3, [pc, #200]	; (800faf0 <tcp_parseopt+0xd8>)
 800fa28:	f240 727d 	movw	r2, #1917	; 0x77d
 800fa2c:	4931      	ldr	r1, [pc, #196]	; (800faf4 <tcp_parseopt+0xdc>)
 800fa2e:	4832      	ldr	r0, [pc, #200]	; (800faf8 <tcp_parseopt+0xe0>)
 800fa30:	f007 fb9a 	bl	8017168 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800fa34:	4b31      	ldr	r3, [pc, #196]	; (800fafc <tcp_parseopt+0xe4>)
 800fa36:	881b      	ldrh	r3, [r3, #0]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d055      	beq.n	800fae8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fa3c:	4b30      	ldr	r3, [pc, #192]	; (800fb00 <tcp_parseopt+0xe8>)
 800fa3e:	2200      	movs	r2, #0
 800fa40:	801a      	strh	r2, [r3, #0]
 800fa42:	e045      	b.n	800fad0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800fa44:	f7ff ffb2 	bl	800f9ac <tcp_get_next_optbyte>
 800fa48:	4603      	mov	r3, r0
 800fa4a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800fa4c:	7bfb      	ldrb	r3, [r7, #15]
 800fa4e:	2b02      	cmp	r3, #2
 800fa50:	d006      	beq.n	800fa60 <tcp_parseopt+0x48>
 800fa52:	2b02      	cmp	r3, #2
 800fa54:	dc2b      	bgt.n	800faae <tcp_parseopt+0x96>
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d041      	beq.n	800fade <tcp_parseopt+0xc6>
 800fa5a:	2b01      	cmp	r3, #1
 800fa5c:	d127      	bne.n	800faae <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800fa5e:	e037      	b.n	800fad0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800fa60:	f7ff ffa4 	bl	800f9ac <tcp_get_next_optbyte>
 800fa64:	4603      	mov	r3, r0
 800fa66:	2b04      	cmp	r3, #4
 800fa68:	d13b      	bne.n	800fae2 <tcp_parseopt+0xca>
 800fa6a:	4b25      	ldr	r3, [pc, #148]	; (800fb00 <tcp_parseopt+0xe8>)
 800fa6c:	881b      	ldrh	r3, [r3, #0]
 800fa6e:	3301      	adds	r3, #1
 800fa70:	4a22      	ldr	r2, [pc, #136]	; (800fafc <tcp_parseopt+0xe4>)
 800fa72:	8812      	ldrh	r2, [r2, #0]
 800fa74:	4293      	cmp	r3, r2
 800fa76:	da34      	bge.n	800fae2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800fa78:	f7ff ff98 	bl	800f9ac <tcp_get_next_optbyte>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	b29b      	uxth	r3, r3
 800fa80:	021b      	lsls	r3, r3, #8
 800fa82:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800fa84:	f7ff ff92 	bl	800f9ac <tcp_get_next_optbyte>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	b29a      	uxth	r2, r3
 800fa8c:	89bb      	ldrh	r3, [r7, #12]
 800fa8e:	4313      	orrs	r3, r2
 800fa90:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800fa92:	89bb      	ldrh	r3, [r7, #12]
 800fa94:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800fa98:	d804      	bhi.n	800faa4 <tcp_parseopt+0x8c>
 800fa9a:	89bb      	ldrh	r3, [r7, #12]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d001      	beq.n	800faa4 <tcp_parseopt+0x8c>
 800faa0:	89ba      	ldrh	r2, [r7, #12]
 800faa2:	e001      	b.n	800faa8 <tcp_parseopt+0x90>
 800faa4:	f44f 7206 	mov.w	r2, #536	; 0x218
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800faac:	e010      	b.n	800fad0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800faae:	f7ff ff7d 	bl	800f9ac <tcp_get_next_optbyte>
 800fab2:	4603      	mov	r3, r0
 800fab4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800fab6:	7afb      	ldrb	r3, [r7, #11]
 800fab8:	2b01      	cmp	r3, #1
 800faba:	d914      	bls.n	800fae6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800fabc:	7afb      	ldrb	r3, [r7, #11]
 800fabe:	b29a      	uxth	r2, r3
 800fac0:	4b0f      	ldr	r3, [pc, #60]	; (800fb00 <tcp_parseopt+0xe8>)
 800fac2:	881b      	ldrh	r3, [r3, #0]
 800fac4:	4413      	add	r3, r2
 800fac6:	b29b      	uxth	r3, r3
 800fac8:	3b02      	subs	r3, #2
 800faca:	b29a      	uxth	r2, r3
 800facc:	4b0c      	ldr	r3, [pc, #48]	; (800fb00 <tcp_parseopt+0xe8>)
 800face:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fad0:	4b0b      	ldr	r3, [pc, #44]	; (800fb00 <tcp_parseopt+0xe8>)
 800fad2:	881a      	ldrh	r2, [r3, #0]
 800fad4:	4b09      	ldr	r3, [pc, #36]	; (800fafc <tcp_parseopt+0xe4>)
 800fad6:	881b      	ldrh	r3, [r3, #0]
 800fad8:	429a      	cmp	r2, r3
 800fada:	d3b3      	bcc.n	800fa44 <tcp_parseopt+0x2c>
 800fadc:	e004      	b.n	800fae8 <tcp_parseopt+0xd0>
          return;
 800fade:	bf00      	nop
 800fae0:	e002      	b.n	800fae8 <tcp_parseopt+0xd0>
            return;
 800fae2:	bf00      	nop
 800fae4:	e000      	b.n	800fae8 <tcp_parseopt+0xd0>
            return;
 800fae6:	bf00      	nop
      }
    }
  }
}
 800fae8:	3710      	adds	r7, #16
 800faea:	46bd      	mov	sp, r7
 800faec:	bd80      	pop	{r7, pc}
 800faee:	bf00      	nop
 800faf0:	08019b80 	.word	0x08019b80
 800faf4:	08019fe4 	.word	0x08019fe4
 800faf8:	08019bcc 	.word	0x08019bcc
 800fafc:	2000da18 	.word	0x2000da18
 800fb00:	2000da20 	.word	0x2000da20

0800fb04 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800fb04:	b480      	push	{r7}
 800fb06:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800fb08:	4b05      	ldr	r3, [pc, #20]	; (800fb20 <tcp_trigger_input_pcb_close+0x1c>)
 800fb0a:	781b      	ldrb	r3, [r3, #0]
 800fb0c:	f043 0310 	orr.w	r3, r3, #16
 800fb10:	b2da      	uxtb	r2, r3
 800fb12:	4b03      	ldr	r3, [pc, #12]	; (800fb20 <tcp_trigger_input_pcb_close+0x1c>)
 800fb14:	701a      	strb	r2, [r3, #0]
}
 800fb16:	bf00      	nop
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1e:	4770      	bx	lr
 800fb20:	2000da31 	.word	0x2000da31

0800fb24 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b084      	sub	sp, #16
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	60f8      	str	r0, [r7, #12]
 800fb2c:	60b9      	str	r1, [r7, #8]
 800fb2e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d00a      	beq.n	800fb4c <tcp_route+0x28>
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	7a1b      	ldrb	r3, [r3, #8]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d006      	beq.n	800fb4c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	7a1b      	ldrb	r3, [r3, #8]
 800fb42:	4618      	mov	r0, r3
 800fb44:	f7fb f9b0 	bl	800aea8 <netif_get_by_index>
 800fb48:	4603      	mov	r3, r0
 800fb4a:	e003      	b.n	800fb54 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800fb4c:	6878      	ldr	r0, [r7, #4]
 800fb4e:	f005 fd8f 	bl	8015670 <ip4_route>
 800fb52:	4603      	mov	r3, r0
  }
}
 800fb54:	4618      	mov	r0, r3
 800fb56:	3710      	adds	r7, #16
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bd80      	pop	{r7, pc}

0800fb5c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800fb5c:	b590      	push	{r4, r7, lr}
 800fb5e:	b087      	sub	sp, #28
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	60f8      	str	r0, [r7, #12]
 800fb64:	60b9      	str	r1, [r7, #8]
 800fb66:	603b      	str	r3, [r7, #0]
 800fb68:	4613      	mov	r3, r2
 800fb6a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d105      	bne.n	800fb7e <tcp_create_segment+0x22>
 800fb72:	4b45      	ldr	r3, [pc, #276]	; (800fc88 <tcp_create_segment+0x12c>)
 800fb74:	22a3      	movs	r2, #163	; 0xa3
 800fb76:	4945      	ldr	r1, [pc, #276]	; (800fc8c <tcp_create_segment+0x130>)
 800fb78:	4845      	ldr	r0, [pc, #276]	; (800fc90 <tcp_create_segment+0x134>)
 800fb7a:	f007 faf5 	bl	8017168 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800fb7e:	68bb      	ldr	r3, [r7, #8]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d105      	bne.n	800fb90 <tcp_create_segment+0x34>
 800fb84:	4b40      	ldr	r3, [pc, #256]	; (800fc88 <tcp_create_segment+0x12c>)
 800fb86:	22a4      	movs	r2, #164	; 0xa4
 800fb88:	4942      	ldr	r1, [pc, #264]	; (800fc94 <tcp_create_segment+0x138>)
 800fb8a:	4841      	ldr	r0, [pc, #260]	; (800fc90 <tcp_create_segment+0x134>)
 800fb8c:	f007 faec 	bl	8017168 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fb90:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fb94:	009b      	lsls	r3, r3, #2
 800fb96:	b2db      	uxtb	r3, r3
 800fb98:	f003 0304 	and.w	r3, r3, #4
 800fb9c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800fb9e:	2003      	movs	r0, #3
 800fba0:	f7fa fcf4 	bl	800a58c <memp_malloc>
 800fba4:	6138      	str	r0, [r7, #16]
 800fba6:	693b      	ldr	r3, [r7, #16]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d104      	bne.n	800fbb6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800fbac:	68b8      	ldr	r0, [r7, #8]
 800fbae:	f7fb fd09 	bl	800b5c4 <pbuf_free>
    return NULL;
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	e064      	b.n	800fc80 <tcp_create_segment+0x124>
  }
  seg->flags = optflags;
 800fbb6:	693b      	ldr	r3, [r7, #16]
 800fbb8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800fbbc:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 800fbbe:	693b      	ldr	r3, [r7, #16]
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800fbc4:	693b      	ldr	r3, [r7, #16]
 800fbc6:	68ba      	ldr	r2, [r7, #8]
 800fbc8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800fbca:	68bb      	ldr	r3, [r7, #8]
 800fbcc:	891a      	ldrh	r2, [r3, #8]
 800fbce:	7dfb      	ldrb	r3, [r7, #23]
 800fbd0:	b29b      	uxth	r3, r3
 800fbd2:	429a      	cmp	r2, r3
 800fbd4:	d205      	bcs.n	800fbe2 <tcp_create_segment+0x86>
 800fbd6:	4b2c      	ldr	r3, [pc, #176]	; (800fc88 <tcp_create_segment+0x12c>)
 800fbd8:	22b0      	movs	r2, #176	; 0xb0
 800fbda:	492f      	ldr	r1, [pc, #188]	; (800fc98 <tcp_create_segment+0x13c>)
 800fbdc:	482c      	ldr	r0, [pc, #176]	; (800fc90 <tcp_create_segment+0x134>)
 800fbde:	f007 fac3 	bl	8017168 <iprintf>
  seg->len = p->tot_len - optlen;
 800fbe2:	68bb      	ldr	r3, [r7, #8]
 800fbe4:	891a      	ldrh	r2, [r3, #8]
 800fbe6:	7dfb      	ldrb	r3, [r7, #23]
 800fbe8:	b29b      	uxth	r3, r3
 800fbea:	1ad3      	subs	r3, r2, r3
 800fbec:	b29a      	uxth	r2, r3
 800fbee:	693b      	ldr	r3, [r7, #16]
 800fbf0:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 800fbf2:	693b      	ldr	r3, [r7, #16]
 800fbf4:	2200      	movs	r2, #0
 800fbf6:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800fbf8:	2114      	movs	r1, #20
 800fbfa:	68b8      	ldr	r0, [r7, #8]
 800fbfc:	f7fb fc4c 	bl	800b498 <pbuf_add_header>
 800fc00:	4603      	mov	r3, r0
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d004      	beq.n	800fc10 <tcp_create_segment+0xb4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800fc06:	6938      	ldr	r0, [r7, #16]
 800fc08:	f7fd f8c5 	bl	800cd96 <tcp_seg_free>
    return NULL;
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	e037      	b.n	800fc80 <tcp_create_segment+0x124>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800fc10:	693b      	ldr	r3, [r7, #16]
 800fc12:	685b      	ldr	r3, [r3, #4]
 800fc14:	685a      	ldr	r2, [r3, #4]
 800fc16:	693b      	ldr	r3, [r7, #16]
 800fc18:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	8ada      	ldrh	r2, [r3, #22]
 800fc1e:	693b      	ldr	r3, [r7, #16]
 800fc20:	691c      	ldr	r4, [r3, #16]
 800fc22:	4610      	mov	r0, r2
 800fc24:	f7f9 fcec 	bl	8009600 <lwip_htons>
 800fc28:	4603      	mov	r3, r0
 800fc2a:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	8b1a      	ldrh	r2, [r3, #24]
 800fc30:	693b      	ldr	r3, [r7, #16]
 800fc32:	691c      	ldr	r4, [r3, #16]
 800fc34:	4610      	mov	r0, r2
 800fc36:	f7f9 fce3 	bl	8009600 <lwip_htons>
 800fc3a:	4603      	mov	r3, r0
 800fc3c:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800fc3e:	693b      	ldr	r3, [r7, #16]
 800fc40:	691c      	ldr	r4, [r3, #16]
 800fc42:	6838      	ldr	r0, [r7, #0]
 800fc44:	f7f9 fcf1 	bl	800962a <lwip_htonl>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800fc4c:	7dfb      	ldrb	r3, [r7, #23]
 800fc4e:	089b      	lsrs	r3, r3, #2
 800fc50:	b2db      	uxtb	r3, r3
 800fc52:	b29b      	uxth	r3, r3
 800fc54:	3305      	adds	r3, #5
 800fc56:	b29b      	uxth	r3, r3
 800fc58:	031b      	lsls	r3, r3, #12
 800fc5a:	b29a      	uxth	r2, r3
 800fc5c:	79fb      	ldrb	r3, [r7, #7]
 800fc5e:	b29b      	uxth	r3, r3
 800fc60:	4313      	orrs	r3, r2
 800fc62:	b29a      	uxth	r2, r3
 800fc64:	693b      	ldr	r3, [r7, #16]
 800fc66:	691c      	ldr	r4, [r3, #16]
 800fc68:	4610      	mov	r0, r2
 800fc6a:	f7f9 fcc9 	bl	8009600 <lwip_htons>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800fc72:	693b      	ldr	r3, [r7, #16]
 800fc74:	691b      	ldr	r3, [r3, #16]
 800fc76:	2200      	movs	r2, #0
 800fc78:	749a      	strb	r2, [r3, #18]
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	74da      	strb	r2, [r3, #19]
  return seg;
 800fc7e:	693b      	ldr	r3, [r7, #16]
}
 800fc80:	4618      	mov	r0, r3
 800fc82:	371c      	adds	r7, #28
 800fc84:	46bd      	mov	sp, r7
 800fc86:	bd90      	pop	{r4, r7, pc}
 800fc88:	0801a000 	.word	0x0801a000
 800fc8c:	0801a034 	.word	0x0801a034
 800fc90:	0801a054 	.word	0x0801a054
 800fc94:	0801a07c 	.word	0x0801a07c
 800fc98:	0801a0a0 	.word	0x0801a0a0

0800fc9c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800fc9c:	b590      	push	{r4, r7, lr}
 800fc9e:	b08b      	sub	sp, #44	; 0x2c
 800fca0:	af02      	add	r7, sp, #8
 800fca2:	6078      	str	r0, [r7, #4]
 800fca4:	460b      	mov	r3, r1
 800fca6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800fca8:	2300      	movs	r3, #0
 800fcaa:	61bb      	str	r3, [r7, #24]
 800fcac:	2300      	movs	r3, #0
 800fcae:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d106      	bne.n	800fcc8 <tcp_split_unsent_seg+0x2c>
 800fcba:	4b97      	ldr	r3, [pc, #604]	; (800ff18 <tcp_split_unsent_seg+0x27c>)
 800fcbc:	f240 324b 	movw	r2, #843	; 0x34b
 800fcc0:	4996      	ldr	r1, [pc, #600]	; (800ff1c <tcp_split_unsent_seg+0x280>)
 800fcc2:	4897      	ldr	r0, [pc, #604]	; (800ff20 <tcp_split_unsent_seg+0x284>)
 800fcc4:	f007 fa50 	bl	8017168 <iprintf>

  useg = pcb->unsent;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fccc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800fcce:	697b      	ldr	r3, [r7, #20]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d102      	bne.n	800fcda <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800fcd4:	f04f 33ff 	mov.w	r3, #4294967295
 800fcd8:	e119      	b.n	800ff0e <tcp_split_unsent_seg+0x272>
  }

  if (split == 0) {
 800fcda:	887b      	ldrh	r3, [r7, #2]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d109      	bne.n	800fcf4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800fce0:	4b8d      	ldr	r3, [pc, #564]	; (800ff18 <tcp_split_unsent_seg+0x27c>)
 800fce2:	f240 3253 	movw	r2, #851	; 0x353
 800fce6:	498f      	ldr	r1, [pc, #572]	; (800ff24 <tcp_split_unsent_seg+0x288>)
 800fce8:	488d      	ldr	r0, [pc, #564]	; (800ff20 <tcp_split_unsent_seg+0x284>)
 800fcea:	f007 fa3d 	bl	8017168 <iprintf>
    return ERR_VAL;
 800fcee:	f06f 0305 	mvn.w	r3, #5
 800fcf2:	e10c      	b.n	800ff0e <tcp_split_unsent_seg+0x272>
  }

  if (useg->len <= split) {
 800fcf4:	697b      	ldr	r3, [r7, #20]
 800fcf6:	891b      	ldrh	r3, [r3, #8]
 800fcf8:	887a      	ldrh	r2, [r7, #2]
 800fcfa:	429a      	cmp	r2, r3
 800fcfc:	d301      	bcc.n	800fd02 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800fcfe:	2300      	movs	r3, #0
 800fd00:	e105      	b.n	800ff0e <tcp_split_unsent_seg+0x272>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fd06:	887a      	ldrh	r2, [r7, #2]
 800fd08:	429a      	cmp	r2, r3
 800fd0a:	d906      	bls.n	800fd1a <tcp_split_unsent_seg+0x7e>
 800fd0c:	4b82      	ldr	r3, [pc, #520]	; (800ff18 <tcp_split_unsent_seg+0x27c>)
 800fd0e:	f240 325b 	movw	r2, #859	; 0x35b
 800fd12:	4985      	ldr	r1, [pc, #532]	; (800ff28 <tcp_split_unsent_seg+0x28c>)
 800fd14:	4882      	ldr	r0, [pc, #520]	; (800ff20 <tcp_split_unsent_seg+0x284>)
 800fd16:	f007 fa27 	bl	8017168 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800fd1a:	697b      	ldr	r3, [r7, #20]
 800fd1c:	891b      	ldrh	r3, [r3, #8]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d106      	bne.n	800fd30 <tcp_split_unsent_seg+0x94>
 800fd22:	4b7d      	ldr	r3, [pc, #500]	; (800ff18 <tcp_split_unsent_seg+0x27c>)
 800fd24:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800fd28:	4980      	ldr	r1, [pc, #512]	; (800ff2c <tcp_split_unsent_seg+0x290>)
 800fd2a:	487d      	ldr	r0, [pc, #500]	; (800ff20 <tcp_split_unsent_seg+0x284>)
 800fd2c:	f007 fa1c 	bl	8017168 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800fd30:	697b      	ldr	r3, [r7, #20]
 800fd32:	7b1b      	ldrb	r3, [r3, #12]
 800fd34:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800fd36:	7bfb      	ldrb	r3, [r7, #15]
 800fd38:	009b      	lsls	r3, r3, #2
 800fd3a:	b2db      	uxtb	r3, r3
 800fd3c:	f003 0304 	and.w	r3, r3, #4
 800fd40:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800fd42:	697b      	ldr	r3, [r7, #20]
 800fd44:	891a      	ldrh	r2, [r3, #8]
 800fd46:	887b      	ldrh	r3, [r7, #2]
 800fd48:	1ad3      	subs	r3, r2, r3
 800fd4a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800fd4c:	7bbb      	ldrb	r3, [r7, #14]
 800fd4e:	b29a      	uxth	r2, r3
 800fd50:	89bb      	ldrh	r3, [r7, #12]
 800fd52:	4413      	add	r3, r2
 800fd54:	b29b      	uxth	r3, r3
 800fd56:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fd5a:	4619      	mov	r1, r3
 800fd5c:	2036      	movs	r0, #54	; 0x36
 800fd5e:	f7fb f94d 	bl	800affc <pbuf_alloc>
 800fd62:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fd64:	693b      	ldr	r3, [r7, #16]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	f000 80ba 	beq.w	800fee0 <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800fd6c:	697b      	ldr	r3, [r7, #20]
 800fd6e:	685b      	ldr	r3, [r3, #4]
 800fd70:	891a      	ldrh	r2, [r3, #8]
 800fd72:	697b      	ldr	r3, [r7, #20]
 800fd74:	891b      	ldrh	r3, [r3, #8]
 800fd76:	1ad3      	subs	r3, r2, r3
 800fd78:	b29a      	uxth	r2, r3
 800fd7a:	887b      	ldrh	r3, [r7, #2]
 800fd7c:	4413      	add	r3, r2
 800fd7e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800fd80:	697b      	ldr	r3, [r7, #20]
 800fd82:	6858      	ldr	r0, [r3, #4]
 800fd84:	693b      	ldr	r3, [r7, #16]
 800fd86:	685a      	ldr	r2, [r3, #4]
 800fd88:	7bbb      	ldrb	r3, [r7, #14]
 800fd8a:	18d1      	adds	r1, r2, r3
 800fd8c:	897b      	ldrh	r3, [r7, #10]
 800fd8e:	89ba      	ldrh	r2, [r7, #12]
 800fd90:	f7fb fe1e 	bl	800b9d0 <pbuf_copy_partial>
 800fd94:	4603      	mov	r3, r0
 800fd96:	461a      	mov	r2, r3
 800fd98:	89bb      	ldrh	r3, [r7, #12]
 800fd9a:	4293      	cmp	r3, r2
 800fd9c:	f040 80a2 	bne.w	800fee4 <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800fda0:	697b      	ldr	r3, [r7, #20]
 800fda2:	691b      	ldr	r3, [r3, #16]
 800fda4:	899b      	ldrh	r3, [r3, #12]
 800fda6:	b29b      	uxth	r3, r3
 800fda8:	4618      	mov	r0, r3
 800fdaa:	f7f9 fc29 	bl	8009600 <lwip_htons>
 800fdae:	4603      	mov	r3, r0
 800fdb0:	b2db      	uxtb	r3, r3
 800fdb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fdb6:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800fdb8:	2300      	movs	r3, #0
 800fdba:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 800fdbc:	7ffb      	ldrb	r3, [r7, #31]
 800fdbe:	f003 0308 	and.w	r3, r3, #8
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d007      	beq.n	800fdd6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800fdc6:	7ffb      	ldrb	r3, [r7, #31]
 800fdc8:	f023 0308 	bic.w	r3, r3, #8
 800fdcc:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 800fdce:	7fbb      	ldrb	r3, [r7, #30]
 800fdd0:	f043 0308 	orr.w	r3, r3, #8
 800fdd4:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 800fdd6:	7ffb      	ldrb	r3, [r7, #31]
 800fdd8:	f003 0301 	and.w	r3, r3, #1
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d007      	beq.n	800fdf0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800fde0:	7ffb      	ldrb	r3, [r7, #31]
 800fde2:	f023 0301 	bic.w	r3, r3, #1
 800fde6:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 800fde8:	7fbb      	ldrb	r3, [r7, #30]
 800fdea:	f043 0301 	orr.w	r3, r3, #1
 800fdee:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800fdf0:	697b      	ldr	r3, [r7, #20]
 800fdf2:	691b      	ldr	r3, [r3, #16]
 800fdf4:	685b      	ldr	r3, [r3, #4]
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	f7f9 fc17 	bl	800962a <lwip_htonl>
 800fdfc:	4602      	mov	r2, r0
 800fdfe:	887b      	ldrh	r3, [r7, #2]
 800fe00:	18d1      	adds	r1, r2, r3
 800fe02:	7fba      	ldrb	r2, [r7, #30]
 800fe04:	7bfb      	ldrb	r3, [r7, #15]
 800fe06:	9300      	str	r3, [sp, #0]
 800fe08:	460b      	mov	r3, r1
 800fe0a:	6939      	ldr	r1, [r7, #16]
 800fe0c:	6878      	ldr	r0, [r7, #4]
 800fe0e:	f7ff fea5 	bl	800fb5c <tcp_create_segment>
 800fe12:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 800fe14:	69bb      	ldr	r3, [r7, #24]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d066      	beq.n	800fee8 <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800fe1a:	697b      	ldr	r3, [r7, #20]
 800fe1c:	685b      	ldr	r3, [r3, #4]
 800fe1e:	4618      	mov	r0, r3
 800fe20:	f7fb fc5e 	bl	800b6e0 <pbuf_clen>
 800fe24:	4603      	mov	r3, r0
 800fe26:	461a      	mov	r2, r3
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fe2e:	1a9b      	subs	r3, r3, r2
 800fe30:	b29a      	uxth	r2, r3
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800fe38:	697b      	ldr	r3, [r7, #20]
 800fe3a:	6858      	ldr	r0, [r3, #4]
 800fe3c:	697b      	ldr	r3, [r7, #20]
 800fe3e:	685b      	ldr	r3, [r3, #4]
 800fe40:	891a      	ldrh	r2, [r3, #8]
 800fe42:	89bb      	ldrh	r3, [r7, #12]
 800fe44:	1ad3      	subs	r3, r2, r3
 800fe46:	b29b      	uxth	r3, r3
 800fe48:	4619      	mov	r1, r3
 800fe4a:	f7fb fa35 	bl	800b2b8 <pbuf_realloc>
  useg->len -= remainder;
 800fe4e:	697b      	ldr	r3, [r7, #20]
 800fe50:	891a      	ldrh	r2, [r3, #8]
 800fe52:	89bb      	ldrh	r3, [r7, #12]
 800fe54:	1ad3      	subs	r3, r2, r3
 800fe56:	b29a      	uxth	r2, r3
 800fe58:	697b      	ldr	r3, [r7, #20]
 800fe5a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800fe5c:	697b      	ldr	r3, [r7, #20]
 800fe5e:	691b      	ldr	r3, [r3, #16]
 800fe60:	899b      	ldrh	r3, [r3, #12]
 800fe62:	b29c      	uxth	r4, r3
 800fe64:	7ffb      	ldrb	r3, [r7, #31]
 800fe66:	b29b      	uxth	r3, r3
 800fe68:	4618      	mov	r0, r3
 800fe6a:	f7f9 fbc9 	bl	8009600 <lwip_htons>
 800fe6e:	4603      	mov	r3, r0
 800fe70:	461a      	mov	r2, r3
 800fe72:	697b      	ldr	r3, [r7, #20]
 800fe74:	691b      	ldr	r3, [r3, #16]
 800fe76:	4322      	orrs	r2, r4
 800fe78:	b292      	uxth	r2, r2
 800fe7a:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 800fe7c:	697b      	ldr	r3, [r7, #20]
 800fe7e:	2200      	movs	r2, #0
 800fe80:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800fe82:	697b      	ldr	r3, [r7, #20]
 800fe84:	685b      	ldr	r3, [r3, #4]
 800fe86:	4618      	mov	r0, r3
 800fe88:	f7fb fc2a 	bl	800b6e0 <pbuf_clen>
 800fe8c:	4603      	mov	r3, r0
 800fe8e:	461a      	mov	r2, r3
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fe96:	4413      	add	r3, r2
 800fe98:	b29a      	uxth	r2, r3
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800fea0:	69bb      	ldr	r3, [r7, #24]
 800fea2:	685b      	ldr	r3, [r3, #4]
 800fea4:	4618      	mov	r0, r3
 800fea6:	f7fb fc1b 	bl	800b6e0 <pbuf_clen>
 800feaa:	4603      	mov	r3, r0
 800feac:	461a      	mov	r2, r3
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800feb4:	4413      	add	r3, r2
 800feb6:	b29a      	uxth	r2, r3
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800febe:	697b      	ldr	r3, [r7, #20]
 800fec0:	681a      	ldr	r2, [r3, #0]
 800fec2:	69bb      	ldr	r3, [r7, #24]
 800fec4:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800fec6:	697b      	ldr	r3, [r7, #20]
 800fec8:	69ba      	ldr	r2, [r7, #24]
 800feca:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800fecc:	69bb      	ldr	r3, [r7, #24]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d103      	bne.n	800fedc <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	2200      	movs	r2, #0
 800fed8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800fedc:	2300      	movs	r3, #0
 800fede:	e016      	b.n	800ff0e <tcp_split_unsent_seg+0x272>
    goto memerr;
 800fee0:	bf00      	nop
 800fee2:	e002      	b.n	800feea <tcp_split_unsent_seg+0x24e>
    goto memerr;
 800fee4:	bf00      	nop
 800fee6:	e000      	b.n	800feea <tcp_split_unsent_seg+0x24e>
    goto memerr;
 800fee8:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800feea:	69bb      	ldr	r3, [r7, #24]
 800feec:	2b00      	cmp	r3, #0
 800feee:	d006      	beq.n	800fefe <tcp_split_unsent_seg+0x262>
 800fef0:	4b09      	ldr	r3, [pc, #36]	; (800ff18 <tcp_split_unsent_seg+0x27c>)
 800fef2:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800fef6:	490e      	ldr	r1, [pc, #56]	; (800ff30 <tcp_split_unsent_seg+0x294>)
 800fef8:	4809      	ldr	r0, [pc, #36]	; (800ff20 <tcp_split_unsent_seg+0x284>)
 800fefa:	f007 f935 	bl	8017168 <iprintf>
  if (p != NULL) {
 800fefe:	693b      	ldr	r3, [r7, #16]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d002      	beq.n	800ff0a <tcp_split_unsent_seg+0x26e>
    pbuf_free(p);
 800ff04:	6938      	ldr	r0, [r7, #16]
 800ff06:	f7fb fb5d 	bl	800b5c4 <pbuf_free>
  }

  return ERR_MEM;
 800ff0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ff0e:	4618      	mov	r0, r3
 800ff10:	3724      	adds	r7, #36	; 0x24
 800ff12:	46bd      	mov	sp, r7
 800ff14:	bd90      	pop	{r4, r7, pc}
 800ff16:	bf00      	nop
 800ff18:	0801a000 	.word	0x0801a000
 800ff1c:	0801a3f0 	.word	0x0801a3f0
 800ff20:	0801a054 	.word	0x0801a054
 800ff24:	0801a414 	.word	0x0801a414
 800ff28:	0801a438 	.word	0x0801a438
 800ff2c:	0801a448 	.word	0x0801a448
 800ff30:	0801a458 	.word	0x0801a458

0800ff34 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800ff34:	b590      	push	{r4, r7, lr}
 800ff36:	b085      	sub	sp, #20
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d106      	bne.n	800ff50 <tcp_send_fin+0x1c>
 800ff42:	4b21      	ldr	r3, [pc, #132]	; (800ffc8 <tcp_send_fin+0x94>)
 800ff44:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800ff48:	4920      	ldr	r1, [pc, #128]	; (800ffcc <tcp_send_fin+0x98>)
 800ff4a:	4821      	ldr	r0, [pc, #132]	; (800ffd0 <tcp_send_fin+0x9c>)
 800ff4c:	f007 f90c 	bl	8017168 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d02e      	beq.n	800ffb6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff5c:	60fb      	str	r3, [r7, #12]
 800ff5e:	e002      	b.n	800ff66 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d1f8      	bne.n	800ff60 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	691b      	ldr	r3, [r3, #16]
 800ff72:	899b      	ldrh	r3, [r3, #12]
 800ff74:	b29b      	uxth	r3, r3
 800ff76:	4618      	mov	r0, r3
 800ff78:	f7f9 fb42 	bl	8009600 <lwip_htons>
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	b2db      	uxtb	r3, r3
 800ff80:	f003 0307 	and.w	r3, r3, #7
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d116      	bne.n	800ffb6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	691b      	ldr	r3, [r3, #16]
 800ff8c:	899b      	ldrh	r3, [r3, #12]
 800ff8e:	b29c      	uxth	r4, r3
 800ff90:	2001      	movs	r0, #1
 800ff92:	f7f9 fb35 	bl	8009600 <lwip_htons>
 800ff96:	4603      	mov	r3, r0
 800ff98:	461a      	mov	r2, r3
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	691b      	ldr	r3, [r3, #16]
 800ff9e:	4322      	orrs	r2, r4
 800ffa0:	b292      	uxth	r2, r2
 800ffa2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	8b5b      	ldrh	r3, [r3, #26]
 800ffa8:	f043 0320 	orr.w	r3, r3, #32
 800ffac:	b29a      	uxth	r2, r3
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	e004      	b.n	800ffc0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800ffb6:	2101      	movs	r1, #1
 800ffb8:	6878      	ldr	r0, [r7, #4]
 800ffba:	f000 f80b 	bl	800ffd4 <tcp_enqueue_flags>
 800ffbe:	4603      	mov	r3, r0
}
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	3714      	adds	r7, #20
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd90      	pop	{r4, r7, pc}
 800ffc8:	0801a000 	.word	0x0801a000
 800ffcc:	0801a464 	.word	0x0801a464
 800ffd0:	0801a054 	.word	0x0801a054

0800ffd4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b088      	sub	sp, #32
 800ffd8:	af02      	add	r7, sp, #8
 800ffda:	6078      	str	r0, [r7, #4]
 800ffdc:	460b      	mov	r3, r1
 800ffde:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ffe8:	78fb      	ldrb	r3, [r7, #3]
 800ffea:	f003 0303 	and.w	r3, r3, #3
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d106      	bne.n	8010000 <tcp_enqueue_flags+0x2c>
 800fff2:	4b67      	ldr	r3, [pc, #412]	; (8010190 <tcp_enqueue_flags+0x1bc>)
 800fff4:	f240 4211 	movw	r2, #1041	; 0x411
 800fff8:	4966      	ldr	r1, [pc, #408]	; (8010194 <tcp_enqueue_flags+0x1c0>)
 800fffa:	4867      	ldr	r0, [pc, #412]	; (8010198 <tcp_enqueue_flags+0x1c4>)
 800fffc:	f007 f8b4 	bl	8017168 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	2b00      	cmp	r3, #0
 8010004:	d106      	bne.n	8010014 <tcp_enqueue_flags+0x40>
 8010006:	4b62      	ldr	r3, [pc, #392]	; (8010190 <tcp_enqueue_flags+0x1bc>)
 8010008:	f240 4213 	movw	r2, #1043	; 0x413
 801000c:	4963      	ldr	r1, [pc, #396]	; (801019c <tcp_enqueue_flags+0x1c8>)
 801000e:	4862      	ldr	r0, [pc, #392]	; (8010198 <tcp_enqueue_flags+0x1c4>)
 8010010:	f007 f8aa 	bl	8017168 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010014:	78fb      	ldrb	r3, [r7, #3]
 8010016:	f003 0302 	and.w	r3, r3, #2
 801001a:	2b00      	cmp	r3, #0
 801001c:	d001      	beq.n	8010022 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801001e:	2301      	movs	r3, #1
 8010020:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010022:	7dfb      	ldrb	r3, [r7, #23]
 8010024:	009b      	lsls	r3, r3, #2
 8010026:	b2db      	uxtb	r3, r3
 8010028:	f003 0304 	and.w	r3, r3, #4
 801002c:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801002e:	7dbb      	ldrb	r3, [r7, #22]
 8010030:	b29b      	uxth	r3, r3
 8010032:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010036:	4619      	mov	r1, r3
 8010038:	2036      	movs	r0, #54	; 0x36
 801003a:	f7fa ffdf 	bl	800affc <pbuf_alloc>
 801003e:	60f8      	str	r0, [r7, #12]
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d109      	bne.n	801005a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	8b5b      	ldrh	r3, [r3, #26]
 801004a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801004e:	b29a      	uxth	r2, r3
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010054:	f04f 33ff 	mov.w	r3, #4294967295
 8010058:	e095      	b.n	8010186 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	895a      	ldrh	r2, [r3, #10]
 801005e:	7dbb      	ldrb	r3, [r7, #22]
 8010060:	b29b      	uxth	r3, r3
 8010062:	429a      	cmp	r2, r3
 8010064:	d206      	bcs.n	8010074 <tcp_enqueue_flags+0xa0>
 8010066:	4b4a      	ldr	r3, [pc, #296]	; (8010190 <tcp_enqueue_flags+0x1bc>)
 8010068:	f240 4239 	movw	r2, #1081	; 0x439
 801006c:	494c      	ldr	r1, [pc, #304]	; (80101a0 <tcp_enqueue_flags+0x1cc>)
 801006e:	484a      	ldr	r0, [pc, #296]	; (8010198 <tcp_enqueue_flags+0x1c4>)
 8010070:	f007 f87a 	bl	8017168 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8010078:	78fa      	ldrb	r2, [r7, #3]
 801007a:	7dfb      	ldrb	r3, [r7, #23]
 801007c:	9300      	str	r3, [sp, #0]
 801007e:	460b      	mov	r3, r1
 8010080:	68f9      	ldr	r1, [r7, #12]
 8010082:	6878      	ldr	r0, [r7, #4]
 8010084:	f7ff fd6a 	bl	800fb5c <tcp_create_segment>
 8010088:	60b8      	str	r0, [r7, #8]
 801008a:	68bb      	ldr	r3, [r7, #8]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d109      	bne.n	80100a4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	8b5b      	ldrh	r3, [r3, #26]
 8010094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010098:	b29a      	uxth	r2, r3
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801009e:	f04f 33ff 	mov.w	r3, #4294967295
 80100a2:	e070      	b.n	8010186 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80100a4:	68bb      	ldr	r3, [r7, #8]
 80100a6:	691b      	ldr	r3, [r3, #16]
 80100a8:	f003 0303 	and.w	r3, r3, #3
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d006      	beq.n	80100be <tcp_enqueue_flags+0xea>
 80100b0:	4b37      	ldr	r3, [pc, #220]	; (8010190 <tcp_enqueue_flags+0x1bc>)
 80100b2:	f240 4242 	movw	r2, #1090	; 0x442
 80100b6:	493b      	ldr	r1, [pc, #236]	; (80101a4 <tcp_enqueue_flags+0x1d0>)
 80100b8:	4837      	ldr	r0, [pc, #220]	; (8010198 <tcp_enqueue_flags+0x1c4>)
 80100ba:	f007 f855 	bl	8017168 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80100be:	68bb      	ldr	r3, [r7, #8]
 80100c0:	891b      	ldrh	r3, [r3, #8]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d006      	beq.n	80100d4 <tcp_enqueue_flags+0x100>
 80100c6:	4b32      	ldr	r3, [pc, #200]	; (8010190 <tcp_enqueue_flags+0x1bc>)
 80100c8:	f240 4243 	movw	r2, #1091	; 0x443
 80100cc:	4936      	ldr	r1, [pc, #216]	; (80101a8 <tcp_enqueue_flags+0x1d4>)
 80100ce:	4832      	ldr	r0, [pc, #200]	; (8010198 <tcp_enqueue_flags+0x1c4>)
 80100d0:	f007 f84a 	bl	8017168 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d103      	bne.n	80100e4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	68ba      	ldr	r2, [r7, #8]
 80100e0:	66da      	str	r2, [r3, #108]	; 0x6c
 80100e2:	e00d      	b.n	8010100 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100e8:	613b      	str	r3, [r7, #16]
 80100ea:	e002      	b.n	80100f2 <tcp_enqueue_flags+0x11e>
 80100ec:	693b      	ldr	r3, [r7, #16]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	613b      	str	r3, [r7, #16]
 80100f2:	693b      	ldr	r3, [r7, #16]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d1f8      	bne.n	80100ec <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80100fa:	693b      	ldr	r3, [r7, #16]
 80100fc:	68ba      	ldr	r2, [r7, #8]
 80100fe:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	2200      	movs	r2, #0
 8010104:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010108:	78fb      	ldrb	r3, [r7, #3]
 801010a:	f003 0302 	and.w	r3, r3, #2
 801010e:	2b00      	cmp	r3, #0
 8010110:	d104      	bne.n	801011c <tcp_enqueue_flags+0x148>
 8010112:	78fb      	ldrb	r3, [r7, #3]
 8010114:	f003 0301 	and.w	r3, r3, #1
 8010118:	2b00      	cmp	r3, #0
 801011a:	d004      	beq.n	8010126 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010120:	1c5a      	adds	r2, r3, #1
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010126:	78fb      	ldrb	r3, [r7, #3]
 8010128:	f003 0301 	and.w	r3, r3, #1
 801012c:	2b00      	cmp	r3, #0
 801012e:	d006      	beq.n	801013e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	8b5b      	ldrh	r3, [r3, #26]
 8010134:	f043 0320 	orr.w	r3, r3, #32
 8010138:	b29a      	uxth	r2, r3
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801013e:	68bb      	ldr	r3, [r7, #8]
 8010140:	685b      	ldr	r3, [r3, #4]
 8010142:	4618      	mov	r0, r3
 8010144:	f7fb facc 	bl	800b6e0 <pbuf_clen>
 8010148:	4603      	mov	r3, r0
 801014a:	461a      	mov	r2, r3
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010152:	4413      	add	r3, r2
 8010154:	b29a      	uxth	r2, r3
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010162:	2b00      	cmp	r3, #0
 8010164:	d00e      	beq.n	8010184 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801016a:	2b00      	cmp	r3, #0
 801016c:	d10a      	bne.n	8010184 <tcp_enqueue_flags+0x1b0>
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010172:	2b00      	cmp	r3, #0
 8010174:	d106      	bne.n	8010184 <tcp_enqueue_flags+0x1b0>
 8010176:	4b06      	ldr	r3, [pc, #24]	; (8010190 <tcp_enqueue_flags+0x1bc>)
 8010178:	f240 4265 	movw	r2, #1125	; 0x465
 801017c:	490b      	ldr	r1, [pc, #44]	; (80101ac <tcp_enqueue_flags+0x1d8>)
 801017e:	4806      	ldr	r0, [pc, #24]	; (8010198 <tcp_enqueue_flags+0x1c4>)
 8010180:	f006 fff2 	bl	8017168 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010184:	2300      	movs	r3, #0
}
 8010186:	4618      	mov	r0, r3
 8010188:	3718      	adds	r7, #24
 801018a:	46bd      	mov	sp, r7
 801018c:	bd80      	pop	{r7, pc}
 801018e:	bf00      	nop
 8010190:	0801a000 	.word	0x0801a000
 8010194:	0801a480 	.word	0x0801a480
 8010198:	0801a054 	.word	0x0801a054
 801019c:	0801a4d8 	.word	0x0801a4d8
 80101a0:	0801a4f8 	.word	0x0801a4f8
 80101a4:	0801a534 	.word	0x0801a534
 80101a8:	0801a54c 	.word	0x0801a54c
 80101ac:	0801a578 	.word	0x0801a578

080101b0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80101b0:	b5b0      	push	{r4, r5, r7, lr}
 80101b2:	b08a      	sub	sp, #40	; 0x28
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d106      	bne.n	80101cc <tcp_output+0x1c>
 80101be:	4b8a      	ldr	r3, [pc, #552]	; (80103e8 <tcp_output+0x238>)
 80101c0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80101c4:	4989      	ldr	r1, [pc, #548]	; (80103ec <tcp_output+0x23c>)
 80101c6:	488a      	ldr	r0, [pc, #552]	; (80103f0 <tcp_output+0x240>)
 80101c8:	f006 ffce 	bl	8017168 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	7d1b      	ldrb	r3, [r3, #20]
 80101d0:	2b01      	cmp	r3, #1
 80101d2:	d106      	bne.n	80101e2 <tcp_output+0x32>
 80101d4:	4b84      	ldr	r3, [pc, #528]	; (80103e8 <tcp_output+0x238>)
 80101d6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80101da:	4986      	ldr	r1, [pc, #536]	; (80103f4 <tcp_output+0x244>)
 80101dc:	4884      	ldr	r0, [pc, #528]	; (80103f0 <tcp_output+0x240>)
 80101de:	f006 ffc3 	bl	8017168 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80101e2:	4b85      	ldr	r3, [pc, #532]	; (80103f8 <tcp_output+0x248>)
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	687a      	ldr	r2, [r7, #4]
 80101e8:	429a      	cmp	r2, r3
 80101ea:	d101      	bne.n	80101f0 <tcp_output+0x40>
    return ERR_OK;
 80101ec:	2300      	movs	r3, #0
 80101ee:	e1d1      	b.n	8010594 <tcp_output+0x3e4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80101fc:	4293      	cmp	r3, r2
 80101fe:	bf28      	it	cs
 8010200:	4613      	movcs	r3, r2
 8010202:	b29b      	uxth	r3, r3
 8010204:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801020a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801020c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801020e:	2b00      	cmp	r3, #0
 8010210:	d10b      	bne.n	801022a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	8b5b      	ldrh	r3, [r3, #26]
 8010216:	f003 0302 	and.w	r3, r3, #2
 801021a:	2b00      	cmp	r3, #0
 801021c:	f000 81ad 	beq.w	801057a <tcp_output+0x3ca>
      return tcp_send_empty_ack(pcb);
 8010220:	6878      	ldr	r0, [r7, #4]
 8010222:	f000 fdd7 	bl	8010dd4 <tcp_send_empty_ack>
 8010226:	4603      	mov	r3, r0
 8010228:	e1b4      	b.n	8010594 <tcp_output+0x3e4>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801022a:	6879      	ldr	r1, [r7, #4]
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	3304      	adds	r3, #4
 8010230:	461a      	mov	r2, r3
 8010232:	6878      	ldr	r0, [r7, #4]
 8010234:	f7ff fc76 	bl	800fb24 <tcp_route>
 8010238:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801023a:	697b      	ldr	r3, [r7, #20]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d102      	bne.n	8010246 <tcp_output+0x96>
    return ERR_RTE;
 8010240:	f06f 0303 	mvn.w	r3, #3
 8010244:	e1a6      	b.n	8010594 <tcp_output+0x3e4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d003      	beq.n	8010254 <tcp_output+0xa4>
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d111      	bne.n	8010278 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010254:	697b      	ldr	r3, [r7, #20]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d002      	beq.n	8010260 <tcp_output+0xb0>
 801025a:	697b      	ldr	r3, [r7, #20]
 801025c:	3304      	adds	r3, #4
 801025e:	e000      	b.n	8010262 <tcp_output+0xb2>
 8010260:	2300      	movs	r3, #0
 8010262:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010264:	693b      	ldr	r3, [r7, #16]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d102      	bne.n	8010270 <tcp_output+0xc0>
      return ERR_RTE;
 801026a:	f06f 0303 	mvn.w	r3, #3
 801026e:	e191      	b.n	8010594 <tcp_output+0x3e4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010270:	693b      	ldr	r3, [r7, #16]
 8010272:	681a      	ldr	r2, [r3, #0]
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801027a:	691b      	ldr	r3, [r3, #16]
 801027c:	685b      	ldr	r3, [r3, #4]
 801027e:	4618      	mov	r0, r3
 8010280:	f7f9 f9d3 	bl	800962a <lwip_htonl>
 8010284:	4602      	mov	r2, r0
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801028a:	1ad3      	subs	r3, r2, r3
 801028c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801028e:	8912      	ldrh	r2, [r2, #8]
 8010290:	4413      	add	r3, r2
 8010292:	69ba      	ldr	r2, [r7, #24]
 8010294:	429a      	cmp	r2, r3
 8010296:	d227      	bcs.n	80102e8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801029e:	461a      	mov	r2, r3
 80102a0:	69bb      	ldr	r3, [r7, #24]
 80102a2:	4293      	cmp	r3, r2
 80102a4:	d114      	bne.n	80102d0 <tcp_output+0x120>
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d110      	bne.n	80102d0 <tcp_output+0x120>
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d10b      	bne.n	80102d0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	2200      	movs	r2, #0
 80102bc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	2201      	movs	r2, #1
 80102c4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	2200      	movs	r2, #0
 80102cc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	8b5b      	ldrh	r3, [r3, #26]
 80102d4:	f003 0302 	and.w	r3, r3, #2
 80102d8:	2b00      	cmp	r3, #0
 80102da:	f000 8150 	beq.w	801057e <tcp_output+0x3ce>
      return tcp_send_empty_ack(pcb);
 80102de:	6878      	ldr	r0, [r7, #4]
 80102e0:	f000 fd78 	bl	8010dd4 <tcp_send_empty_ack>
 80102e4:	4603      	mov	r3, r0
 80102e6:	e155      	b.n	8010594 <tcp_output+0x3e4>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	2200      	movs	r2, #0
 80102ec:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102f4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80102f6:	6a3b      	ldr	r3, [r7, #32]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	f000 811f 	beq.w	801053c <tcp_output+0x38c>
    for (; useg->next != NULL; useg = useg->next);
 80102fe:	e002      	b.n	8010306 <tcp_output+0x156>
 8010300:	6a3b      	ldr	r3, [r7, #32]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	623b      	str	r3, [r7, #32]
 8010306:	6a3b      	ldr	r3, [r7, #32]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d1f8      	bne.n	8010300 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801030e:	e115      	b.n	801053c <tcp_output+0x38c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010312:	691b      	ldr	r3, [r3, #16]
 8010314:	899b      	ldrh	r3, [r3, #12]
 8010316:	b29b      	uxth	r3, r3
 8010318:	4618      	mov	r0, r3
 801031a:	f7f9 f971 	bl	8009600 <lwip_htons>
 801031e:	4603      	mov	r3, r0
 8010320:	b2db      	uxtb	r3, r3
 8010322:	f003 0304 	and.w	r3, r3, #4
 8010326:	2b00      	cmp	r3, #0
 8010328:	d006      	beq.n	8010338 <tcp_output+0x188>
 801032a:	4b2f      	ldr	r3, [pc, #188]	; (80103e8 <tcp_output+0x238>)
 801032c:	f240 5236 	movw	r2, #1334	; 0x536
 8010330:	4932      	ldr	r1, [pc, #200]	; (80103fc <tcp_output+0x24c>)
 8010332:	482f      	ldr	r0, [pc, #188]	; (80103f0 <tcp_output+0x240>)
 8010334:	f006 ff18 	bl	8017168 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801033c:	2b00      	cmp	r3, #0
 801033e:	d01f      	beq.n	8010380 <tcp_output+0x1d0>
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	8b5b      	ldrh	r3, [r3, #26]
 8010344:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010348:	2b00      	cmp	r3, #0
 801034a:	d119      	bne.n	8010380 <tcp_output+0x1d0>
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010350:	2b00      	cmp	r3, #0
 8010352:	d00b      	beq.n	801036c <tcp_output+0x1bc>
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d110      	bne.n	8010380 <tcp_output+0x1d0>
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010362:	891a      	ldrh	r2, [r3, #8]
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010368:	429a      	cmp	r2, r3
 801036a:	d209      	bcs.n	8010380 <tcp_output+0x1d0>
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010372:	2b00      	cmp	r3, #0
 8010374:	d004      	beq.n	8010380 <tcp_output+0x1d0>
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801037c:	2b08      	cmp	r3, #8
 801037e:	d901      	bls.n	8010384 <tcp_output+0x1d4>
 8010380:	2301      	movs	r3, #1
 8010382:	e000      	b.n	8010386 <tcp_output+0x1d6>
 8010384:	2300      	movs	r3, #0
 8010386:	2b00      	cmp	r3, #0
 8010388:	d106      	bne.n	8010398 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	8b5b      	ldrh	r3, [r3, #26]
 801038e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010392:	2b00      	cmp	r3, #0
 8010394:	f000 80e7 	beq.w	8010566 <tcp_output+0x3b6>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	7d1b      	ldrb	r3, [r3, #20]
 801039c:	2b02      	cmp	r3, #2
 801039e:	d00d      	beq.n	80103bc <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80103a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103a2:	691b      	ldr	r3, [r3, #16]
 80103a4:	899b      	ldrh	r3, [r3, #12]
 80103a6:	b29c      	uxth	r4, r3
 80103a8:	2010      	movs	r0, #16
 80103aa:	f7f9 f929 	bl	8009600 <lwip_htons>
 80103ae:	4603      	mov	r3, r0
 80103b0:	461a      	mov	r2, r3
 80103b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103b4:	691b      	ldr	r3, [r3, #16]
 80103b6:	4322      	orrs	r2, r4
 80103b8:	b292      	uxth	r2, r2
 80103ba:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80103bc:	697a      	ldr	r2, [r7, #20]
 80103be:	6879      	ldr	r1, [r7, #4]
 80103c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80103c2:	f000 f90b 	bl	80105dc <tcp_output_segment>
 80103c6:	4603      	mov	r3, r0
 80103c8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80103ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d016      	beq.n	8010400 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	8b5b      	ldrh	r3, [r3, #26]
 80103d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80103da:	b29a      	uxth	r2, r3
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	835a      	strh	r2, [r3, #26]
      return err;
 80103e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103e4:	e0d6      	b.n	8010594 <tcp_output+0x3e4>
 80103e6:	bf00      	nop
 80103e8:	0801a000 	.word	0x0801a000
 80103ec:	0801a5a0 	.word	0x0801a5a0
 80103f0:	0801a054 	.word	0x0801a054
 80103f4:	0801a5b8 	.word	0x0801a5b8
 80103f8:	2000da38 	.word	0x2000da38
 80103fc:	0801a5e0 	.word	0x0801a5e0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 8010400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010402:	2200      	movs	r2, #0
 8010404:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8010406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010408:	681a      	ldr	r2, [r3, #0]
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	7d1b      	ldrb	r3, [r3, #20]
 8010412:	2b02      	cmp	r3, #2
 8010414:	d006      	beq.n	8010424 <tcp_output+0x274>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	8b5b      	ldrh	r3, [r3, #26]
 801041a:	f023 0303 	bic.w	r3, r3, #3
 801041e:	b29a      	uxth	r2, r3
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010426:	691b      	ldr	r3, [r3, #16]
 8010428:	685b      	ldr	r3, [r3, #4]
 801042a:	4618      	mov	r0, r3
 801042c:	f7f9 f8fd 	bl	800962a <lwip_htonl>
 8010430:	4604      	mov	r4, r0
 8010432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010434:	891b      	ldrh	r3, [r3, #8]
 8010436:	461d      	mov	r5, r3
 8010438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801043a:	691b      	ldr	r3, [r3, #16]
 801043c:	899b      	ldrh	r3, [r3, #12]
 801043e:	b29b      	uxth	r3, r3
 8010440:	4618      	mov	r0, r3
 8010442:	f7f9 f8dd 	bl	8009600 <lwip_htons>
 8010446:	4603      	mov	r3, r0
 8010448:	b2db      	uxtb	r3, r3
 801044a:	f003 0303 	and.w	r3, r3, #3
 801044e:	2b00      	cmp	r3, #0
 8010450:	d001      	beq.n	8010456 <tcp_output+0x2a6>
 8010452:	2301      	movs	r3, #1
 8010454:	e000      	b.n	8010458 <tcp_output+0x2a8>
 8010456:	2300      	movs	r3, #0
 8010458:	442b      	add	r3, r5
 801045a:	4423      	add	r3, r4
 801045c:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010462:	68bb      	ldr	r3, [r7, #8]
 8010464:	1ad3      	subs	r3, r2, r3
 8010466:	2b00      	cmp	r3, #0
 8010468:	da02      	bge.n	8010470 <tcp_output+0x2c0>
      pcb->snd_nxt = snd_nxt;
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	68ba      	ldr	r2, [r7, #8]
 801046e:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8010470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010472:	891b      	ldrh	r3, [r3, #8]
 8010474:	461c      	mov	r4, r3
 8010476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010478:	691b      	ldr	r3, [r3, #16]
 801047a:	899b      	ldrh	r3, [r3, #12]
 801047c:	b29b      	uxth	r3, r3
 801047e:	4618      	mov	r0, r3
 8010480:	f7f9 f8be 	bl	8009600 <lwip_htons>
 8010484:	4603      	mov	r3, r0
 8010486:	b2db      	uxtb	r3, r3
 8010488:	f003 0303 	and.w	r3, r3, #3
 801048c:	2b00      	cmp	r3, #0
 801048e:	d001      	beq.n	8010494 <tcp_output+0x2e4>
 8010490:	2301      	movs	r3, #1
 8010492:	e000      	b.n	8010496 <tcp_output+0x2e6>
 8010494:	2300      	movs	r3, #0
 8010496:	4423      	add	r3, r4
 8010498:	2b00      	cmp	r3, #0
 801049a:	d049      	beq.n	8010530 <tcp_output+0x380>
      seg->next = NULL;
 801049c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801049e:	2200      	movs	r2, #0
 80104a0:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d105      	bne.n	80104b6 <tcp_output+0x306>
        pcb->unacked = seg;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80104ae:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80104b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104b2:	623b      	str	r3, [r7, #32]
 80104b4:	e03f      	b.n	8010536 <tcp_output+0x386>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80104b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104b8:	691b      	ldr	r3, [r3, #16]
 80104ba:	685b      	ldr	r3, [r3, #4]
 80104bc:	4618      	mov	r0, r3
 80104be:	f7f9 f8b4 	bl	800962a <lwip_htonl>
 80104c2:	4604      	mov	r4, r0
 80104c4:	6a3b      	ldr	r3, [r7, #32]
 80104c6:	691b      	ldr	r3, [r3, #16]
 80104c8:	685b      	ldr	r3, [r3, #4]
 80104ca:	4618      	mov	r0, r3
 80104cc:	f7f9 f8ad 	bl	800962a <lwip_htonl>
 80104d0:	4603      	mov	r3, r0
 80104d2:	1ae3      	subs	r3, r4, r3
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	da24      	bge.n	8010522 <tcp_output+0x372>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	3370      	adds	r3, #112	; 0x70
 80104dc:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80104de:	e002      	b.n	80104e6 <tcp_output+0x336>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80104e0:	69fb      	ldr	r3, [r7, #28]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80104e6:	69fb      	ldr	r3, [r7, #28]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d011      	beq.n	8010512 <tcp_output+0x362>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80104ee:	69fb      	ldr	r3, [r7, #28]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	691b      	ldr	r3, [r3, #16]
 80104f4:	685b      	ldr	r3, [r3, #4]
 80104f6:	4618      	mov	r0, r3
 80104f8:	f7f9 f897 	bl	800962a <lwip_htonl>
 80104fc:	4604      	mov	r4, r0
 80104fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010500:	691b      	ldr	r3, [r3, #16]
 8010502:	685b      	ldr	r3, [r3, #4]
 8010504:	4618      	mov	r0, r3
 8010506:	f7f9 f890 	bl	800962a <lwip_htonl>
 801050a:	4603      	mov	r3, r0
 801050c:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801050e:	2b00      	cmp	r3, #0
 8010510:	dbe6      	blt.n	80104e0 <tcp_output+0x330>
          }
          seg->next = (*cur_seg);
 8010512:	69fb      	ldr	r3, [r7, #28]
 8010514:	681a      	ldr	r2, [r3, #0]
 8010516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010518:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801051a:	69fb      	ldr	r3, [r7, #28]
 801051c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801051e:	601a      	str	r2, [r3, #0]
 8010520:	e009      	b.n	8010536 <tcp_output+0x386>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8010522:	6a3b      	ldr	r3, [r7, #32]
 8010524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010526:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8010528:	6a3b      	ldr	r3, [r7, #32]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	623b      	str	r3, [r7, #32]
 801052e:	e002      	b.n	8010536 <tcp_output+0x386>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8010530:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010532:	f7fc fc30 	bl	800cd96 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801053a:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801053c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801053e:	2b00      	cmp	r3, #0
 8010540:	d012      	beq.n	8010568 <tcp_output+0x3b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8010542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010544:	691b      	ldr	r3, [r3, #16]
 8010546:	685b      	ldr	r3, [r3, #4]
 8010548:	4618      	mov	r0, r3
 801054a:	f7f9 f86e 	bl	800962a <lwip_htonl>
 801054e:	4602      	mov	r2, r0
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010554:	1ad3      	subs	r3, r2, r3
 8010556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010558:	8912      	ldrh	r2, [r2, #8]
 801055a:	4413      	add	r3, r2
  while (seg != NULL &&
 801055c:	69ba      	ldr	r2, [r7, #24]
 801055e:	429a      	cmp	r2, r3
 8010560:	f4bf aed6 	bcs.w	8010310 <tcp_output+0x160>
 8010564:	e000      	b.n	8010568 <tcp_output+0x3b8>
      break;
 8010566:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801056c:	2b00      	cmp	r3, #0
 801056e:	d108      	bne.n	8010582 <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	2200      	movs	r2, #0
 8010574:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8010578:	e004      	b.n	8010584 <tcp_output+0x3d4>
    goto output_done;
 801057a:	bf00      	nop
 801057c:	e002      	b.n	8010584 <tcp_output+0x3d4>
    goto output_done;
 801057e:	bf00      	nop
 8010580:	e000      	b.n	8010584 <tcp_output+0x3d4>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8010582:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	8b5b      	ldrh	r3, [r3, #26]
 8010588:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801058c:	b29a      	uxth	r2, r3
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8010592:	2300      	movs	r3, #0
}
 8010594:	4618      	mov	r0, r3
 8010596:	3728      	adds	r7, #40	; 0x28
 8010598:	46bd      	mov	sp, r7
 801059a:	bdb0      	pop	{r4, r5, r7, pc}

0801059c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b082      	sub	sp, #8
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d106      	bne.n	80105b8 <tcp_output_segment_busy+0x1c>
 80105aa:	4b09      	ldr	r3, [pc, #36]	; (80105d0 <tcp_output_segment_busy+0x34>)
 80105ac:	f240 529a 	movw	r2, #1434	; 0x59a
 80105b0:	4908      	ldr	r1, [pc, #32]	; (80105d4 <tcp_output_segment_busy+0x38>)
 80105b2:	4809      	ldr	r0, [pc, #36]	; (80105d8 <tcp_output_segment_busy+0x3c>)
 80105b4:	f006 fdd8 	bl	8017168 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	685b      	ldr	r3, [r3, #4]
 80105bc:	7b9b      	ldrb	r3, [r3, #14]
 80105be:	2b01      	cmp	r3, #1
 80105c0:	d001      	beq.n	80105c6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80105c2:	2301      	movs	r3, #1
 80105c4:	e000      	b.n	80105c8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80105c6:	2300      	movs	r3, #0
}
 80105c8:	4618      	mov	r0, r3
 80105ca:	3708      	adds	r7, #8
 80105cc:	46bd      	mov	sp, r7
 80105ce:	bd80      	pop	{r7, pc}
 80105d0:	0801a000 	.word	0x0801a000
 80105d4:	0801a5f8 	.word	0x0801a5f8
 80105d8:	0801a054 	.word	0x0801a054

080105dc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80105dc:	b5b0      	push	{r4, r5, r7, lr}
 80105de:	b08c      	sub	sp, #48	; 0x30
 80105e0:	af04      	add	r7, sp, #16
 80105e2:	60f8      	str	r0, [r7, #12]
 80105e4:	60b9      	str	r1, [r7, #8]
 80105e6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d106      	bne.n	80105fc <tcp_output_segment+0x20>
 80105ee:	4b63      	ldr	r3, [pc, #396]	; (801077c <tcp_output_segment+0x1a0>)
 80105f0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80105f4:	4962      	ldr	r1, [pc, #392]	; (8010780 <tcp_output_segment+0x1a4>)
 80105f6:	4863      	ldr	r0, [pc, #396]	; (8010784 <tcp_output_segment+0x1a8>)
 80105f8:	f006 fdb6 	bl	8017168 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80105fc:	68bb      	ldr	r3, [r7, #8]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d106      	bne.n	8010610 <tcp_output_segment+0x34>
 8010602:	4b5e      	ldr	r3, [pc, #376]	; (801077c <tcp_output_segment+0x1a0>)
 8010604:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8010608:	495f      	ldr	r1, [pc, #380]	; (8010788 <tcp_output_segment+0x1ac>)
 801060a:	485e      	ldr	r0, [pc, #376]	; (8010784 <tcp_output_segment+0x1a8>)
 801060c:	f006 fdac 	bl	8017168 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d106      	bne.n	8010624 <tcp_output_segment+0x48>
 8010616:	4b59      	ldr	r3, [pc, #356]	; (801077c <tcp_output_segment+0x1a0>)
 8010618:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801061c:	495b      	ldr	r1, [pc, #364]	; (801078c <tcp_output_segment+0x1b0>)
 801061e:	4859      	ldr	r0, [pc, #356]	; (8010784 <tcp_output_segment+0x1a8>)
 8010620:	f006 fda2 	bl	8017168 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8010624:	68f8      	ldr	r0, [r7, #12]
 8010626:	f7ff ffb9 	bl	801059c <tcp_output_segment_busy>
 801062a:	4603      	mov	r3, r0
 801062c:	2b00      	cmp	r3, #0
 801062e:	d001      	beq.n	8010634 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8010630:	2300      	movs	r3, #0
 8010632:	e09f      	b.n	8010774 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010634:	68bb      	ldr	r3, [r7, #8]
 8010636:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	691c      	ldr	r4, [r3, #16]
 801063c:	4610      	mov	r0, r2
 801063e:	f7f8 fff4 	bl	800962a <lwip_htonl>
 8010642:	4603      	mov	r3, r0
 8010644:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8010646:	68bb      	ldr	r3, [r7, #8]
 8010648:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	691c      	ldr	r4, [r3, #16]
 801064e:	4610      	mov	r0, r2
 8010650:	f7f8 ffd6 	bl	8009600 <lwip_htons>
 8010654:	4603      	mov	r3, r0
 8010656:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010658:	68bb      	ldr	r3, [r7, #8]
 801065a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801065c:	68ba      	ldr	r2, [r7, #8]
 801065e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010660:	441a      	add	r2, r3
 8010662:	68bb      	ldr	r3, [r7, #8]
 8010664:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	691b      	ldr	r3, [r3, #16]
 801066a:	3314      	adds	r3, #20
 801066c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	7b1b      	ldrb	r3, [r3, #12]
 8010672:	f003 0301 	and.w	r3, r3, #1
 8010676:	2b00      	cmp	r3, #0
 8010678:	d015      	beq.n	80106a6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801067a:	68bb      	ldr	r3, [r7, #8]
 801067c:	3304      	adds	r3, #4
 801067e:	461a      	mov	r2, r3
 8010680:	6879      	ldr	r1, [r7, #4]
 8010682:	f44f 7006 	mov.w	r0, #536	; 0x218
 8010686:	f7fc fe7d 	bl	800d384 <tcp_eff_send_mss_netif>
 801068a:	4603      	mov	r3, r0
 801068c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801068e:	8b7b      	ldrh	r3, [r7, #26]
 8010690:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8010694:	4618      	mov	r0, r3
 8010696:	f7f8 ffc8 	bl	800962a <lwip_htonl>
 801069a:	4602      	mov	r2, r0
 801069c:	69fb      	ldr	r3, [r7, #28]
 801069e:	601a      	str	r2, [r3, #0]
    opts += 1;
 80106a0:	69fb      	ldr	r3, [r7, #28]
 80106a2:	3304      	adds	r3, #4
 80106a4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80106a6:	68bb      	ldr	r3, [r7, #8]
 80106a8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	da02      	bge.n	80106b6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80106b0:	68bb      	ldr	r3, [r7, #8]
 80106b2:	2200      	movs	r2, #0
 80106b4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80106b6:	68bb      	ldr	r3, [r7, #8]
 80106b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d10c      	bne.n	80106d8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80106be:	4b34      	ldr	r3, [pc, #208]	; (8010790 <tcp_output_segment+0x1b4>)
 80106c0:	681a      	ldr	r2, [r3, #0]
 80106c2:	68bb      	ldr	r3, [r7, #8]
 80106c4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	691b      	ldr	r3, [r3, #16]
 80106ca:	685b      	ldr	r3, [r3, #4]
 80106cc:	4618      	mov	r0, r3
 80106ce:	f7f8 ffac 	bl	800962a <lwip_htonl>
 80106d2:	4602      	mov	r2, r0
 80106d4:	68bb      	ldr	r3, [r7, #8]
 80106d6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	691a      	ldr	r2, [r3, #16]
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	685b      	ldr	r3, [r3, #4]
 80106e0:	685b      	ldr	r3, [r3, #4]
 80106e2:	1ad3      	subs	r3, r2, r3
 80106e4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	685b      	ldr	r3, [r3, #4]
 80106ea:	8959      	ldrh	r1, [r3, #10]
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	685b      	ldr	r3, [r3, #4]
 80106f0:	8b3a      	ldrh	r2, [r7, #24]
 80106f2:	1a8a      	subs	r2, r1, r2
 80106f4:	b292      	uxth	r2, r2
 80106f6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	685b      	ldr	r3, [r3, #4]
 80106fc:	8919      	ldrh	r1, [r3, #8]
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	685b      	ldr	r3, [r3, #4]
 8010702:	8b3a      	ldrh	r2, [r7, #24]
 8010704:	1a8a      	subs	r2, r1, r2
 8010706:	b292      	uxth	r2, r2
 8010708:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	685b      	ldr	r3, [r3, #4]
 801070e:	68fa      	ldr	r2, [r7, #12]
 8010710:	6912      	ldr	r2, [r2, #16]
 8010712:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	691b      	ldr	r3, [r3, #16]
 8010718:	2200      	movs	r2, #0
 801071a:	741a      	strb	r2, [r3, #16]
 801071c:	2200      	movs	r2, #0
 801071e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	691b      	ldr	r3, [r3, #16]
 8010724:	f103 0214 	add.w	r2, r3, #20
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	7b1b      	ldrb	r3, [r3, #12]
 801072c:	009b      	lsls	r3, r3, #2
 801072e:	f003 0304 	and.w	r3, r3, #4
 8010732:	4413      	add	r3, r2
 8010734:	69fa      	ldr	r2, [r7, #28]
 8010736:	429a      	cmp	r2, r3
 8010738:	d006      	beq.n	8010748 <tcp_output_segment+0x16c>
 801073a:	4b10      	ldr	r3, [pc, #64]	; (801077c <tcp_output_segment+0x1a0>)
 801073c:	f240 621c 	movw	r2, #1564	; 0x61c
 8010740:	4914      	ldr	r1, [pc, #80]	; (8010794 <tcp_output_segment+0x1b8>)
 8010742:	4810      	ldr	r0, [pc, #64]	; (8010784 <tcp_output_segment+0x1a8>)
 8010744:	f006 fd10 	bl	8017168 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	6858      	ldr	r0, [r3, #4]
 801074c:	68b9      	ldr	r1, [r7, #8]
 801074e:	68bb      	ldr	r3, [r7, #8]
 8010750:	1d1c      	adds	r4, r3, #4
 8010752:	68bb      	ldr	r3, [r7, #8]
 8010754:	7add      	ldrb	r5, [r3, #11]
 8010756:	68bb      	ldr	r3, [r7, #8]
 8010758:	7a9b      	ldrb	r3, [r3, #10]
 801075a:	687a      	ldr	r2, [r7, #4]
 801075c:	9202      	str	r2, [sp, #8]
 801075e:	2206      	movs	r2, #6
 8010760:	9201      	str	r2, [sp, #4]
 8010762:	9300      	str	r3, [sp, #0]
 8010764:	462b      	mov	r3, r5
 8010766:	4622      	mov	r2, r4
 8010768:	f005 fa44 	bl	8015bf4 <ip4_output_if>
 801076c:	4603      	mov	r3, r0
 801076e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8010770:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010774:	4618      	mov	r0, r3
 8010776:	3720      	adds	r7, #32
 8010778:	46bd      	mov	sp, r7
 801077a:	bdb0      	pop	{r4, r5, r7, pc}
 801077c:	0801a000 	.word	0x0801a000
 8010780:	0801a620 	.word	0x0801a620
 8010784:	0801a054 	.word	0x0801a054
 8010788:	0801a640 	.word	0x0801a640
 801078c:	0801a660 	.word	0x0801a660
 8010790:	2000d9e8 	.word	0x2000d9e8
 8010794:	0801a684 	.word	0x0801a684

08010798 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8010798:	b5b0      	push	{r4, r5, r7, lr}
 801079a:	b084      	sub	sp, #16
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d106      	bne.n	80107b4 <tcp_rexmit_rto_prepare+0x1c>
 80107a6:	4b36      	ldr	r3, [pc, #216]	; (8010880 <tcp_rexmit_rto_prepare+0xe8>)
 80107a8:	f240 6263 	movw	r2, #1635	; 0x663
 80107ac:	4935      	ldr	r1, [pc, #212]	; (8010884 <tcp_rexmit_rto_prepare+0xec>)
 80107ae:	4836      	ldr	r0, [pc, #216]	; (8010888 <tcp_rexmit_rto_prepare+0xf0>)
 80107b0:	f006 fcda 	bl	8017168 <iprintf>

  if (pcb->unacked == NULL) {
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d102      	bne.n	80107c2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80107bc:	f06f 0305 	mvn.w	r3, #5
 80107c0:	e059      	b.n	8010876 <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80107c6:	60fb      	str	r3, [r7, #12]
 80107c8:	e00b      	b.n	80107e2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80107ca:	68f8      	ldr	r0, [r7, #12]
 80107cc:	f7ff fee6 	bl	801059c <tcp_output_segment_busy>
 80107d0:	4603      	mov	r3, r0
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d002      	beq.n	80107dc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80107d6:	f06f 0305 	mvn.w	r3, #5
 80107da:	e04c      	b.n	8010876 <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	60fb      	str	r3, [r7, #12]
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d1ef      	bne.n	80107ca <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80107ea:	68f8      	ldr	r0, [r7, #12]
 80107ec:	f7ff fed6 	bl	801059c <tcp_output_segment_busy>
 80107f0:	4603      	mov	r3, r0
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d002      	beq.n	80107fc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80107f6:	f06f 0305 	mvn.w	r3, #5
 80107fa:	e03c      	b.n	8010876 <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010808:	2b00      	cmp	r3, #0
 801080a:	d104      	bne.n	8010816 <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	895a      	ldrh	r2, [r3, #10]
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	2200      	movs	r2, #0
 8010822:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	8b5b      	ldrh	r3, [r3, #26]
 8010828:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801082c:	b29a      	uxth	r2, r3
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	691b      	ldr	r3, [r3, #16]
 8010836:	685b      	ldr	r3, [r3, #4]
 8010838:	4618      	mov	r0, r3
 801083a:	f7f8 fef6 	bl	800962a <lwip_htonl>
 801083e:	4604      	mov	r4, r0
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	891b      	ldrh	r3, [r3, #8]
 8010844:	461d      	mov	r5, r3
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	691b      	ldr	r3, [r3, #16]
 801084a:	899b      	ldrh	r3, [r3, #12]
 801084c:	b29b      	uxth	r3, r3
 801084e:	4618      	mov	r0, r3
 8010850:	f7f8 fed6 	bl	8009600 <lwip_htons>
 8010854:	4603      	mov	r3, r0
 8010856:	b2db      	uxtb	r3, r3
 8010858:	f003 0303 	and.w	r3, r3, #3
 801085c:	2b00      	cmp	r3, #0
 801085e:	d001      	beq.n	8010864 <tcp_rexmit_rto_prepare+0xcc>
 8010860:	2301      	movs	r3, #1
 8010862:	e000      	b.n	8010866 <tcp_rexmit_rto_prepare+0xce>
 8010864:	2300      	movs	r3, #0
 8010866:	442b      	add	r3, r5
 8010868:	18e2      	adds	r2, r4, r3
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	2200      	movs	r2, #0
 8010872:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8010874:	2300      	movs	r3, #0
}
 8010876:	4618      	mov	r0, r3
 8010878:	3710      	adds	r7, #16
 801087a:	46bd      	mov	sp, r7
 801087c:	bdb0      	pop	{r4, r5, r7, pc}
 801087e:	bf00      	nop
 8010880:	0801a000 	.word	0x0801a000
 8010884:	0801a698 	.word	0x0801a698
 8010888:	0801a054 	.word	0x0801a054

0801088c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801088c:	b580      	push	{r7, lr}
 801088e:	b082      	sub	sp, #8
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d106      	bne.n	80108a8 <tcp_rexmit_rto_commit+0x1c>
 801089a:	4b0d      	ldr	r3, [pc, #52]	; (80108d0 <tcp_rexmit_rto_commit+0x44>)
 801089c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80108a0:	490c      	ldr	r1, [pc, #48]	; (80108d4 <tcp_rexmit_rto_commit+0x48>)
 80108a2:	480d      	ldr	r0, [pc, #52]	; (80108d8 <tcp_rexmit_rto_commit+0x4c>)
 80108a4:	f006 fc60 	bl	8017168 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80108ae:	2bff      	cmp	r3, #255	; 0xff
 80108b0:	d007      	beq.n	80108c2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80108b8:	3301      	adds	r3, #1
 80108ba:	b2da      	uxtb	r2, r3
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80108c2:	6878      	ldr	r0, [r7, #4]
 80108c4:	f7ff fc74 	bl	80101b0 <tcp_output>
}
 80108c8:	bf00      	nop
 80108ca:	3708      	adds	r7, #8
 80108cc:	46bd      	mov	sp, r7
 80108ce:	bd80      	pop	{r7, pc}
 80108d0:	0801a000 	.word	0x0801a000
 80108d4:	0801a6bc 	.word	0x0801a6bc
 80108d8:	0801a054 	.word	0x0801a054

080108dc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	b082      	sub	sp, #8
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d106      	bne.n	80108f8 <tcp_rexmit_rto+0x1c>
 80108ea:	4b0a      	ldr	r3, [pc, #40]	; (8010914 <tcp_rexmit_rto+0x38>)
 80108ec:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80108f0:	4909      	ldr	r1, [pc, #36]	; (8010918 <tcp_rexmit_rto+0x3c>)
 80108f2:	480a      	ldr	r0, [pc, #40]	; (801091c <tcp_rexmit_rto+0x40>)
 80108f4:	f006 fc38 	bl	8017168 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80108f8:	6878      	ldr	r0, [r7, #4]
 80108fa:	f7ff ff4d 	bl	8010798 <tcp_rexmit_rto_prepare>
 80108fe:	4603      	mov	r3, r0
 8010900:	2b00      	cmp	r3, #0
 8010902:	d102      	bne.n	801090a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8010904:	6878      	ldr	r0, [r7, #4]
 8010906:	f7ff ffc1 	bl	801088c <tcp_rexmit_rto_commit>
  }
}
 801090a:	bf00      	nop
 801090c:	3708      	adds	r7, #8
 801090e:	46bd      	mov	sp, r7
 8010910:	bd80      	pop	{r7, pc}
 8010912:	bf00      	nop
 8010914:	0801a000 	.word	0x0801a000
 8010918:	0801a6e0 	.word	0x0801a6e0
 801091c:	0801a054 	.word	0x0801a054

08010920 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8010920:	b590      	push	{r4, r7, lr}
 8010922:	b085      	sub	sp, #20
 8010924:	af00      	add	r7, sp, #0
 8010926:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d106      	bne.n	801093c <tcp_rexmit+0x1c>
 801092e:	4b2f      	ldr	r3, [pc, #188]	; (80109ec <tcp_rexmit+0xcc>)
 8010930:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8010934:	492e      	ldr	r1, [pc, #184]	; (80109f0 <tcp_rexmit+0xd0>)
 8010936:	482f      	ldr	r0, [pc, #188]	; (80109f4 <tcp_rexmit+0xd4>)
 8010938:	f006 fc16 	bl	8017168 <iprintf>

  if (pcb->unacked == NULL) {
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010940:	2b00      	cmp	r3, #0
 8010942:	d102      	bne.n	801094a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8010944:	f06f 0305 	mvn.w	r3, #5
 8010948:	e04c      	b.n	80109e4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801094e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8010950:	68b8      	ldr	r0, [r7, #8]
 8010952:	f7ff fe23 	bl	801059c <tcp_output_segment_busy>
 8010956:	4603      	mov	r3, r0
 8010958:	2b00      	cmp	r3, #0
 801095a:	d002      	beq.n	8010962 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801095c:	f06f 0305 	mvn.w	r3, #5
 8010960:	e040      	b.n	80109e4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8010962:	68bb      	ldr	r3, [r7, #8]
 8010964:	681a      	ldr	r2, [r3, #0]
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	336c      	adds	r3, #108	; 0x6c
 801096e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010970:	e002      	b.n	8010978 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d011      	beq.n	80109a4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	691b      	ldr	r3, [r3, #16]
 8010986:	685b      	ldr	r3, [r3, #4]
 8010988:	4618      	mov	r0, r3
 801098a:	f7f8 fe4e 	bl	800962a <lwip_htonl>
 801098e:	4604      	mov	r4, r0
 8010990:	68bb      	ldr	r3, [r7, #8]
 8010992:	691b      	ldr	r3, [r3, #16]
 8010994:	685b      	ldr	r3, [r3, #4]
 8010996:	4618      	mov	r0, r3
 8010998:	f7f8 fe47 	bl	800962a <lwip_htonl>
 801099c:	4603      	mov	r3, r0
 801099e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	dbe6      	blt.n	8010972 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	681a      	ldr	r2, [r3, #0]
 80109a8:	68bb      	ldr	r3, [r7, #8]
 80109aa:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	68ba      	ldr	r2, [r7, #8]
 80109b0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80109b2:	68bb      	ldr	r3, [r7, #8]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d103      	bne.n	80109c2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	2200      	movs	r2, #0
 80109be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80109c8:	2bff      	cmp	r3, #255	; 0xff
 80109ca:	d007      	beq.n	80109dc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80109d2:	3301      	adds	r3, #1
 80109d4:	b2da      	uxtb	r2, r3
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	2200      	movs	r2, #0
 80109e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80109e2:	2300      	movs	r3, #0
}
 80109e4:	4618      	mov	r0, r3
 80109e6:	3714      	adds	r7, #20
 80109e8:	46bd      	mov	sp, r7
 80109ea:	bd90      	pop	{r4, r7, pc}
 80109ec:	0801a000 	.word	0x0801a000
 80109f0:	0801a6fc 	.word	0x0801a6fc
 80109f4:	0801a054 	.word	0x0801a054

080109f8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b082      	sub	sp, #8
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d106      	bne.n	8010a14 <tcp_rexmit_fast+0x1c>
 8010a06:	4b2a      	ldr	r3, [pc, #168]	; (8010ab0 <tcp_rexmit_fast+0xb8>)
 8010a08:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8010a0c:	4929      	ldr	r1, [pc, #164]	; (8010ab4 <tcp_rexmit_fast+0xbc>)
 8010a0e:	482a      	ldr	r0, [pc, #168]	; (8010ab8 <tcp_rexmit_fast+0xc0>)
 8010a10:	f006 fbaa 	bl	8017168 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d044      	beq.n	8010aa6 <tcp_rexmit_fast+0xae>
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	8b5b      	ldrh	r3, [r3, #26]
 8010a20:	f003 0304 	and.w	r3, r3, #4
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d13e      	bne.n	8010aa6 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8010a28:	6878      	ldr	r0, [r7, #4]
 8010a2a:	f7ff ff79 	bl	8010920 <tcp_rexmit>
 8010a2e:	4603      	mov	r3, r0
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d138      	bne.n	8010aa6 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010a40:	4293      	cmp	r3, r2
 8010a42:	bf28      	it	cs
 8010a44:	4613      	movcs	r3, r2
 8010a46:	b29b      	uxth	r3, r3
 8010a48:	0fda      	lsrs	r2, r3, #31
 8010a4a:	4413      	add	r3, r2
 8010a4c:	105b      	asrs	r3, r3, #1
 8010a4e:	b29a      	uxth	r2, r3
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010a5c:	461a      	mov	r2, r3
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a62:	005b      	lsls	r3, r3, #1
 8010a64:	429a      	cmp	r2, r3
 8010a66:	d206      	bcs.n	8010a76 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a6c:	005b      	lsls	r3, r3, #1
 8010a6e:	b29a      	uxth	r2, r3
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a80:	4619      	mov	r1, r3
 8010a82:	0049      	lsls	r1, r1, #1
 8010a84:	440b      	add	r3, r1
 8010a86:	b29b      	uxth	r3, r3
 8010a88:	4413      	add	r3, r2
 8010a8a:	b29a      	uxth	r2, r3
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	8b5b      	ldrh	r3, [r3, #26]
 8010a96:	f043 0304 	orr.w	r3, r3, #4
 8010a9a:	b29a      	uxth	r2, r3
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8010aa6:	bf00      	nop
 8010aa8:	3708      	adds	r7, #8
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bd80      	pop	{r7, pc}
 8010aae:	bf00      	nop
 8010ab0:	0801a000 	.word	0x0801a000
 8010ab4:	0801a714 	.word	0x0801a714
 8010ab8:	0801a054 	.word	0x0801a054

08010abc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8010abc:	b580      	push	{r7, lr}
 8010abe:	b086      	sub	sp, #24
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	60f8      	str	r0, [r7, #12]
 8010ac4:	607b      	str	r3, [r7, #4]
 8010ac6:	460b      	mov	r3, r1
 8010ac8:	817b      	strh	r3, [r7, #10]
 8010aca:	4613      	mov	r3, r2
 8010acc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010ace:	897a      	ldrh	r2, [r7, #10]
 8010ad0:	893b      	ldrh	r3, [r7, #8]
 8010ad2:	4413      	add	r3, r2
 8010ad4:	b29b      	uxth	r3, r3
 8010ad6:	3314      	adds	r3, #20
 8010ad8:	b29b      	uxth	r3, r3
 8010ada:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010ade:	4619      	mov	r1, r3
 8010ae0:	2022      	movs	r0, #34	; 0x22
 8010ae2:	f7fa fa8b 	bl	800affc <pbuf_alloc>
 8010ae6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010ae8:	697b      	ldr	r3, [r7, #20]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d04d      	beq.n	8010b8a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010aee:	897b      	ldrh	r3, [r7, #10]
 8010af0:	3313      	adds	r3, #19
 8010af2:	697a      	ldr	r2, [r7, #20]
 8010af4:	8952      	ldrh	r2, [r2, #10]
 8010af6:	4293      	cmp	r3, r2
 8010af8:	db06      	blt.n	8010b08 <tcp_output_alloc_header_common+0x4c>
 8010afa:	4b26      	ldr	r3, [pc, #152]	; (8010b94 <tcp_output_alloc_header_common+0xd8>)
 8010afc:	f240 7223 	movw	r2, #1827	; 0x723
 8010b00:	4925      	ldr	r1, [pc, #148]	; (8010b98 <tcp_output_alloc_header_common+0xdc>)
 8010b02:	4826      	ldr	r0, [pc, #152]	; (8010b9c <tcp_output_alloc_header_common+0xe0>)
 8010b04:	f006 fb30 	bl	8017168 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010b08:	697b      	ldr	r3, [r7, #20]
 8010b0a:	685b      	ldr	r3, [r3, #4]
 8010b0c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8010b0e:	8c3b      	ldrh	r3, [r7, #32]
 8010b10:	4618      	mov	r0, r3
 8010b12:	f7f8 fd75 	bl	8009600 <lwip_htons>
 8010b16:	4603      	mov	r3, r0
 8010b18:	461a      	mov	r2, r3
 8010b1a:	693b      	ldr	r3, [r7, #16]
 8010b1c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8010b1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010b20:	4618      	mov	r0, r3
 8010b22:	f7f8 fd6d 	bl	8009600 <lwip_htons>
 8010b26:	4603      	mov	r3, r0
 8010b28:	461a      	mov	r2, r3
 8010b2a:	693b      	ldr	r3, [r7, #16]
 8010b2c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010b2e:	693b      	ldr	r3, [r7, #16]
 8010b30:	687a      	ldr	r2, [r7, #4]
 8010b32:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8010b34:	68f8      	ldr	r0, [r7, #12]
 8010b36:	f7f8 fd78 	bl	800962a <lwip_htonl>
 8010b3a:	4602      	mov	r2, r0
 8010b3c:	693b      	ldr	r3, [r7, #16]
 8010b3e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8010b40:	897b      	ldrh	r3, [r7, #10]
 8010b42:	089b      	lsrs	r3, r3, #2
 8010b44:	b29b      	uxth	r3, r3
 8010b46:	3305      	adds	r3, #5
 8010b48:	b29b      	uxth	r3, r3
 8010b4a:	031b      	lsls	r3, r3, #12
 8010b4c:	b29a      	uxth	r2, r3
 8010b4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010b52:	b29b      	uxth	r3, r3
 8010b54:	4313      	orrs	r3, r2
 8010b56:	b29b      	uxth	r3, r3
 8010b58:	4618      	mov	r0, r3
 8010b5a:	f7f8 fd51 	bl	8009600 <lwip_htons>
 8010b5e:	4603      	mov	r3, r0
 8010b60:	461a      	mov	r2, r3
 8010b62:	693b      	ldr	r3, [r7, #16]
 8010b64:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8010b66:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f7f8 fd49 	bl	8009600 <lwip_htons>
 8010b6e:	4603      	mov	r3, r0
 8010b70:	461a      	mov	r2, r3
 8010b72:	693b      	ldr	r3, [r7, #16]
 8010b74:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010b76:	693b      	ldr	r3, [r7, #16]
 8010b78:	2200      	movs	r2, #0
 8010b7a:	741a      	strb	r2, [r3, #16]
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010b80:	693b      	ldr	r3, [r7, #16]
 8010b82:	2200      	movs	r2, #0
 8010b84:	749a      	strb	r2, [r3, #18]
 8010b86:	2200      	movs	r2, #0
 8010b88:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8010b8a:	697b      	ldr	r3, [r7, #20]
}
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	3718      	adds	r7, #24
 8010b90:	46bd      	mov	sp, r7
 8010b92:	bd80      	pop	{r7, pc}
 8010b94:	0801a000 	.word	0x0801a000
 8010b98:	0801a734 	.word	0x0801a734
 8010b9c:	0801a054 	.word	0x0801a054

08010ba0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8010ba0:	b5b0      	push	{r4, r5, r7, lr}
 8010ba2:	b08a      	sub	sp, #40	; 0x28
 8010ba4:	af04      	add	r7, sp, #16
 8010ba6:	60f8      	str	r0, [r7, #12]
 8010ba8:	607b      	str	r3, [r7, #4]
 8010baa:	460b      	mov	r3, r1
 8010bac:	817b      	strh	r3, [r7, #10]
 8010bae:	4613      	mov	r3, r2
 8010bb0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d106      	bne.n	8010bc6 <tcp_output_alloc_header+0x26>
 8010bb8:	4b15      	ldr	r3, [pc, #84]	; (8010c10 <tcp_output_alloc_header+0x70>)
 8010bba:	f240 7242 	movw	r2, #1858	; 0x742
 8010bbe:	4915      	ldr	r1, [pc, #84]	; (8010c14 <tcp_output_alloc_header+0x74>)
 8010bc0:	4815      	ldr	r0, [pc, #84]	; (8010c18 <tcp_output_alloc_header+0x78>)
 8010bc2:	f006 fad1 	bl	8017168 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	8adb      	ldrh	r3, [r3, #22]
 8010bce:	68fa      	ldr	r2, [r7, #12]
 8010bd0:	8b12      	ldrh	r2, [r2, #24]
 8010bd2:	68f9      	ldr	r1, [r7, #12]
 8010bd4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8010bd6:	893d      	ldrh	r5, [r7, #8]
 8010bd8:	897c      	ldrh	r4, [r7, #10]
 8010bda:	9103      	str	r1, [sp, #12]
 8010bdc:	2110      	movs	r1, #16
 8010bde:	9102      	str	r1, [sp, #8]
 8010be0:	9201      	str	r2, [sp, #4]
 8010be2:	9300      	str	r3, [sp, #0]
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	462a      	mov	r2, r5
 8010be8:	4621      	mov	r1, r4
 8010bea:	f7ff ff67 	bl	8010abc <tcp_output_alloc_header_common>
 8010bee:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8010bf0:	697b      	ldr	r3, [r7, #20]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d006      	beq.n	8010c04 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bfa:	68fa      	ldr	r2, [r7, #12]
 8010bfc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010bfe:	441a      	add	r2, r3
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8010c04:	697b      	ldr	r3, [r7, #20]
}
 8010c06:	4618      	mov	r0, r3
 8010c08:	3718      	adds	r7, #24
 8010c0a:	46bd      	mov	sp, r7
 8010c0c:	bdb0      	pop	{r4, r5, r7, pc}
 8010c0e:	bf00      	nop
 8010c10:	0801a000 	.word	0x0801a000
 8010c14:	0801a764 	.word	0x0801a764
 8010c18:	0801a054 	.word	0x0801a054

08010c1c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b088      	sub	sp, #32
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	60f8      	str	r0, [r7, #12]
 8010c24:	60b9      	str	r1, [r7, #8]
 8010c26:	4611      	mov	r1, r2
 8010c28:	461a      	mov	r2, r3
 8010c2a:	460b      	mov	r3, r1
 8010c2c:	71fb      	strb	r3, [r7, #7]
 8010c2e:	4613      	mov	r3, r2
 8010c30:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8010c32:	2300      	movs	r3, #0
 8010c34:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8010c36:	68bb      	ldr	r3, [r7, #8]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d106      	bne.n	8010c4a <tcp_output_fill_options+0x2e>
 8010c3c:	4b13      	ldr	r3, [pc, #76]	; (8010c8c <tcp_output_fill_options+0x70>)
 8010c3e:	f240 7256 	movw	r2, #1878	; 0x756
 8010c42:	4913      	ldr	r1, [pc, #76]	; (8010c90 <tcp_output_fill_options+0x74>)
 8010c44:	4813      	ldr	r0, [pc, #76]	; (8010c94 <tcp_output_fill_options+0x78>)
 8010c46:	f006 fa8f 	bl	8017168 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8010c4a:	68bb      	ldr	r3, [r7, #8]
 8010c4c:	685b      	ldr	r3, [r3, #4]
 8010c4e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8010c50:	69bb      	ldr	r3, [r7, #24]
 8010c52:	3314      	adds	r3, #20
 8010c54:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8010c56:	69bb      	ldr	r3, [r7, #24]
 8010c58:	f103 0214 	add.w	r2, r3, #20
 8010c5c:	8bfb      	ldrh	r3, [r7, #30]
 8010c5e:	009b      	lsls	r3, r3, #2
 8010c60:	4619      	mov	r1, r3
 8010c62:	79fb      	ldrb	r3, [r7, #7]
 8010c64:	009b      	lsls	r3, r3, #2
 8010c66:	f003 0304 	and.w	r3, r3, #4
 8010c6a:	440b      	add	r3, r1
 8010c6c:	4413      	add	r3, r2
 8010c6e:	697a      	ldr	r2, [r7, #20]
 8010c70:	429a      	cmp	r2, r3
 8010c72:	d006      	beq.n	8010c82 <tcp_output_fill_options+0x66>
 8010c74:	4b05      	ldr	r3, [pc, #20]	; (8010c8c <tcp_output_fill_options+0x70>)
 8010c76:	f240 7275 	movw	r2, #1909	; 0x775
 8010c7a:	4907      	ldr	r1, [pc, #28]	; (8010c98 <tcp_output_fill_options+0x7c>)
 8010c7c:	4805      	ldr	r0, [pc, #20]	; (8010c94 <tcp_output_fill_options+0x78>)
 8010c7e:	f006 fa73 	bl	8017168 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8010c82:	bf00      	nop
 8010c84:	3720      	adds	r7, #32
 8010c86:	46bd      	mov	sp, r7
 8010c88:	bd80      	pop	{r7, pc}
 8010c8a:	bf00      	nop
 8010c8c:	0801a000 	.word	0x0801a000
 8010c90:	0801a78c 	.word	0x0801a78c
 8010c94:	0801a054 	.word	0x0801a054
 8010c98:	0801a684 	.word	0x0801a684

08010c9c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b08a      	sub	sp, #40	; 0x28
 8010ca0:	af04      	add	r7, sp, #16
 8010ca2:	60f8      	str	r0, [r7, #12]
 8010ca4:	60b9      	str	r1, [r7, #8]
 8010ca6:	607a      	str	r2, [r7, #4]
 8010ca8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8010caa:	68bb      	ldr	r3, [r7, #8]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d106      	bne.n	8010cbe <tcp_output_control_segment+0x22>
 8010cb0:	4b1c      	ldr	r3, [pc, #112]	; (8010d24 <tcp_output_control_segment+0x88>)
 8010cb2:	f240 7287 	movw	r2, #1927	; 0x787
 8010cb6:	491c      	ldr	r1, [pc, #112]	; (8010d28 <tcp_output_control_segment+0x8c>)
 8010cb8:	481c      	ldr	r0, [pc, #112]	; (8010d2c <tcp_output_control_segment+0x90>)
 8010cba:	f006 fa55 	bl	8017168 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8010cbe:	683a      	ldr	r2, [r7, #0]
 8010cc0:	6879      	ldr	r1, [r7, #4]
 8010cc2:	68f8      	ldr	r0, [r7, #12]
 8010cc4:	f7fe ff2e 	bl	800fb24 <tcp_route>
 8010cc8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8010cca:	693b      	ldr	r3, [r7, #16]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d102      	bne.n	8010cd6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8010cd0:	23fc      	movs	r3, #252	; 0xfc
 8010cd2:	75fb      	strb	r3, [r7, #23]
 8010cd4:	e01c      	b.n	8010d10 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d006      	beq.n	8010cea <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	7adb      	ldrb	r3, [r3, #11]
 8010ce0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	7a9b      	ldrb	r3, [r3, #10]
 8010ce6:	757b      	strb	r3, [r7, #21]
 8010ce8:	e003      	b.n	8010cf2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8010cea:	23ff      	movs	r3, #255	; 0xff
 8010cec:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8010cee:	2300      	movs	r3, #0
 8010cf0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8010cf2:	7dba      	ldrb	r2, [r7, #22]
 8010cf4:	693b      	ldr	r3, [r7, #16]
 8010cf6:	9302      	str	r3, [sp, #8]
 8010cf8:	2306      	movs	r3, #6
 8010cfa:	9301      	str	r3, [sp, #4]
 8010cfc:	7d7b      	ldrb	r3, [r7, #21]
 8010cfe:	9300      	str	r3, [sp, #0]
 8010d00:	4613      	mov	r3, r2
 8010d02:	683a      	ldr	r2, [r7, #0]
 8010d04:	6879      	ldr	r1, [r7, #4]
 8010d06:	68b8      	ldr	r0, [r7, #8]
 8010d08:	f004 ff74 	bl	8015bf4 <ip4_output_if>
 8010d0c:	4603      	mov	r3, r0
 8010d0e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8010d10:	68b8      	ldr	r0, [r7, #8]
 8010d12:	f7fa fc57 	bl	800b5c4 <pbuf_free>
  return err;
 8010d16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	3718      	adds	r7, #24
 8010d1e:	46bd      	mov	sp, r7
 8010d20:	bd80      	pop	{r7, pc}
 8010d22:	bf00      	nop
 8010d24:	0801a000 	.word	0x0801a000
 8010d28:	0801a7b4 	.word	0x0801a7b4
 8010d2c:	0801a054 	.word	0x0801a054

08010d30 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8010d30:	b590      	push	{r4, r7, lr}
 8010d32:	b08b      	sub	sp, #44	; 0x2c
 8010d34:	af04      	add	r7, sp, #16
 8010d36:	60f8      	str	r0, [r7, #12]
 8010d38:	60b9      	str	r1, [r7, #8]
 8010d3a:	607a      	str	r2, [r7, #4]
 8010d3c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8010d3e:	683b      	ldr	r3, [r7, #0]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d106      	bne.n	8010d52 <tcp_rst+0x22>
 8010d44:	4b1f      	ldr	r3, [pc, #124]	; (8010dc4 <tcp_rst+0x94>)
 8010d46:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8010d4a:	491f      	ldr	r1, [pc, #124]	; (8010dc8 <tcp_rst+0x98>)
 8010d4c:	481f      	ldr	r0, [pc, #124]	; (8010dcc <tcp_rst+0x9c>)
 8010d4e:	f006 fa0b 	bl	8017168 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8010d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d106      	bne.n	8010d66 <tcp_rst+0x36>
 8010d58:	4b1a      	ldr	r3, [pc, #104]	; (8010dc4 <tcp_rst+0x94>)
 8010d5a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8010d5e:	491c      	ldr	r1, [pc, #112]	; (8010dd0 <tcp_rst+0xa0>)
 8010d60:	481a      	ldr	r0, [pc, #104]	; (8010dcc <tcp_rst+0x9c>)
 8010d62:	f006 fa01 	bl	8017168 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010d66:	2300      	movs	r3, #0
 8010d68:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8010d6a:	f246 0308 	movw	r3, #24584	; 0x6008
 8010d6e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8010d70:	7dfb      	ldrb	r3, [r7, #23]
 8010d72:	b29c      	uxth	r4, r3
 8010d74:	68b8      	ldr	r0, [r7, #8]
 8010d76:	f7f8 fc58 	bl	800962a <lwip_htonl>
 8010d7a:	4602      	mov	r2, r0
 8010d7c:	8abb      	ldrh	r3, [r7, #20]
 8010d7e:	9303      	str	r3, [sp, #12]
 8010d80:	2314      	movs	r3, #20
 8010d82:	9302      	str	r3, [sp, #8]
 8010d84:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010d86:	9301      	str	r3, [sp, #4]
 8010d88:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010d8a:	9300      	str	r3, [sp, #0]
 8010d8c:	4613      	mov	r3, r2
 8010d8e:	2200      	movs	r2, #0
 8010d90:	4621      	mov	r1, r4
 8010d92:	6878      	ldr	r0, [r7, #4]
 8010d94:	f7ff fe92 	bl	8010abc <tcp_output_alloc_header_common>
 8010d98:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8010d9a:	693b      	ldr	r3, [r7, #16]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d00c      	beq.n	8010dba <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010da0:	7dfb      	ldrb	r3, [r7, #23]
 8010da2:	2200      	movs	r2, #0
 8010da4:	6939      	ldr	r1, [r7, #16]
 8010da6:	68f8      	ldr	r0, [r7, #12]
 8010da8:	f7ff ff38 	bl	8010c1c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dae:	683a      	ldr	r2, [r7, #0]
 8010db0:	6939      	ldr	r1, [r7, #16]
 8010db2:	68f8      	ldr	r0, [r7, #12]
 8010db4:	f7ff ff72 	bl	8010c9c <tcp_output_control_segment>
 8010db8:	e000      	b.n	8010dbc <tcp_rst+0x8c>
    return;
 8010dba:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8010dbc:	371c      	adds	r7, #28
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	bd90      	pop	{r4, r7, pc}
 8010dc2:	bf00      	nop
 8010dc4:	0801a000 	.word	0x0801a000
 8010dc8:	0801a7e0 	.word	0x0801a7e0
 8010dcc:	0801a054 	.word	0x0801a054
 8010dd0:	0801a7fc 	.word	0x0801a7fc

08010dd4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8010dd4:	b590      	push	{r4, r7, lr}
 8010dd6:	b087      	sub	sp, #28
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8010ddc:	2300      	movs	r3, #0
 8010dde:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8010de0:	2300      	movs	r3, #0
 8010de2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d106      	bne.n	8010df8 <tcp_send_empty_ack+0x24>
 8010dea:	4b28      	ldr	r3, [pc, #160]	; (8010e8c <tcp_send_empty_ack+0xb8>)
 8010dec:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8010df0:	4927      	ldr	r1, [pc, #156]	; (8010e90 <tcp_send_empty_ack+0xbc>)
 8010df2:	4828      	ldr	r0, [pc, #160]	; (8010e94 <tcp_send_empty_ack+0xc0>)
 8010df4:	f006 f9b8 	bl	8017168 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010df8:	7dfb      	ldrb	r3, [r7, #23]
 8010dfa:	009b      	lsls	r3, r3, #2
 8010dfc:	b2db      	uxtb	r3, r3
 8010dfe:	f003 0304 	and.w	r3, r3, #4
 8010e02:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8010e04:	7d7b      	ldrb	r3, [r7, #21]
 8010e06:	b29c      	uxth	r4, r3
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	f7f8 fc0c 	bl	800962a <lwip_htonl>
 8010e12:	4603      	mov	r3, r0
 8010e14:	2200      	movs	r2, #0
 8010e16:	4621      	mov	r1, r4
 8010e18:	6878      	ldr	r0, [r7, #4]
 8010e1a:	f7ff fec1 	bl	8010ba0 <tcp_output_alloc_header>
 8010e1e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010e20:	693b      	ldr	r3, [r7, #16]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d109      	bne.n	8010e3a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	8b5b      	ldrh	r3, [r3, #26]
 8010e2a:	f043 0303 	orr.w	r3, r3, #3
 8010e2e:	b29a      	uxth	r2, r3
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8010e34:	f06f 0301 	mvn.w	r3, #1
 8010e38:	e023      	b.n	8010e82 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8010e3a:	7dbb      	ldrb	r3, [r7, #22]
 8010e3c:	7dfa      	ldrb	r2, [r7, #23]
 8010e3e:	6939      	ldr	r1, [r7, #16]
 8010e40:	6878      	ldr	r0, [r7, #4]
 8010e42:	f7ff feeb 	bl	8010c1c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010e46:	687a      	ldr	r2, [r7, #4]
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	3304      	adds	r3, #4
 8010e4c:	6939      	ldr	r1, [r7, #16]
 8010e4e:	6878      	ldr	r0, [r7, #4]
 8010e50:	f7ff ff24 	bl	8010c9c <tcp_output_control_segment>
 8010e54:	4603      	mov	r3, r0
 8010e56:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010e58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d007      	beq.n	8010e70 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	8b5b      	ldrh	r3, [r3, #26]
 8010e64:	f043 0303 	orr.w	r3, r3, #3
 8010e68:	b29a      	uxth	r2, r3
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	835a      	strh	r2, [r3, #26]
 8010e6e:	e006      	b.n	8010e7e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	8b5b      	ldrh	r3, [r3, #26]
 8010e74:	f023 0303 	bic.w	r3, r3, #3
 8010e78:	b29a      	uxth	r2, r3
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8010e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010e82:	4618      	mov	r0, r3
 8010e84:	371c      	adds	r7, #28
 8010e86:	46bd      	mov	sp, r7
 8010e88:	bd90      	pop	{r4, r7, pc}
 8010e8a:	bf00      	nop
 8010e8c:	0801a000 	.word	0x0801a000
 8010e90:	0801a818 	.word	0x0801a818
 8010e94:	0801a054 	.word	0x0801a054

08010e98 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8010e98:	b590      	push	{r4, r7, lr}
 8010e9a:	b085      	sub	sp, #20
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d106      	bne.n	8010eb8 <tcp_keepalive+0x20>
 8010eaa:	4b18      	ldr	r3, [pc, #96]	; (8010f0c <tcp_keepalive+0x74>)
 8010eac:	f640 0224 	movw	r2, #2084	; 0x824
 8010eb0:	4917      	ldr	r1, [pc, #92]	; (8010f10 <tcp_keepalive+0x78>)
 8010eb2:	4818      	ldr	r0, [pc, #96]	; (8010f14 <tcp_keepalive+0x7c>)
 8010eb4:	f006 f958 	bl	8017168 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8010eb8:	7abb      	ldrb	r3, [r7, #10]
 8010eba:	b29c      	uxth	r4, r3
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010ec0:	3b01      	subs	r3, #1
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	f7f8 fbb1 	bl	800962a <lwip_htonl>
 8010ec8:	4603      	mov	r3, r0
 8010eca:	2200      	movs	r2, #0
 8010ecc:	4621      	mov	r1, r4
 8010ece:	6878      	ldr	r0, [r7, #4]
 8010ed0:	f7ff fe66 	bl	8010ba0 <tcp_output_alloc_header>
 8010ed4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d102      	bne.n	8010ee2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8010edc:	f04f 33ff 	mov.w	r3, #4294967295
 8010ee0:	e010      	b.n	8010f04 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010ee2:	7abb      	ldrb	r3, [r7, #10]
 8010ee4:	2200      	movs	r2, #0
 8010ee6:	68f9      	ldr	r1, [r7, #12]
 8010ee8:	6878      	ldr	r0, [r7, #4]
 8010eea:	f7ff fe97 	bl	8010c1c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010eee:	687a      	ldr	r2, [r7, #4]
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	3304      	adds	r3, #4
 8010ef4:	68f9      	ldr	r1, [r7, #12]
 8010ef6:	6878      	ldr	r0, [r7, #4]
 8010ef8:	f7ff fed0 	bl	8010c9c <tcp_output_control_segment>
 8010efc:	4603      	mov	r3, r0
 8010efe:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010f00:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010f04:	4618      	mov	r0, r3
 8010f06:	3714      	adds	r7, #20
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	bd90      	pop	{r4, r7, pc}
 8010f0c:	0801a000 	.word	0x0801a000
 8010f10:	0801a838 	.word	0x0801a838
 8010f14:	0801a054 	.word	0x0801a054

08010f18 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8010f18:	b590      	push	{r4, r7, lr}
 8010f1a:	b08b      	sub	sp, #44	; 0x2c
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010f20:	2300      	movs	r3, #0
 8010f22:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d106      	bne.n	8010f38 <tcp_zero_window_probe+0x20>
 8010f2a:	4b4d      	ldr	r3, [pc, #308]	; (8011060 <tcp_zero_window_probe+0x148>)
 8010f2c:	f640 024f 	movw	r2, #2127	; 0x84f
 8010f30:	494c      	ldr	r1, [pc, #304]	; (8011064 <tcp_zero_window_probe+0x14c>)
 8010f32:	484d      	ldr	r0, [pc, #308]	; (8011068 <tcp_zero_window_probe+0x150>)
 8010f34:	f006 f918 	bl	8017168 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (seg == NULL) {
 8010f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d101      	bne.n	8010f48 <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8010f44:	2300      	movs	r3, #0
 8010f46:	e087      	b.n	8011058 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010f4e:	2bff      	cmp	r3, #255	; 0xff
 8010f50:	d007      	beq.n	8010f62 <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010f58:	3301      	adds	r3, #1
 8010f5a:	b2da      	uxtb	r2, r3
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8010f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f64:	691b      	ldr	r3, [r3, #16]
 8010f66:	899b      	ldrh	r3, [r3, #12]
 8010f68:	b29b      	uxth	r3, r3
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	f7f8 fb48 	bl	8009600 <lwip_htons>
 8010f70:	4603      	mov	r3, r0
 8010f72:	b2db      	uxtb	r3, r3
 8010f74:	f003 0301 	and.w	r3, r3, #1
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d005      	beq.n	8010f88 <tcp_zero_window_probe+0x70>
 8010f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f7e:	891b      	ldrh	r3, [r3, #8]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d101      	bne.n	8010f88 <tcp_zero_window_probe+0x70>
 8010f84:	2301      	movs	r3, #1
 8010f86:	e000      	b.n	8010f8a <tcp_zero_window_probe+0x72>
 8010f88:	2300      	movs	r3, #0
 8010f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8010f8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	bf0c      	ite	eq
 8010f96:	2301      	moveq	r3, #1
 8010f98:	2300      	movne	r3, #0
 8010f9a:	b2db      	uxtb	r3, r3
 8010f9c:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8010f9e:	7cfb      	ldrb	r3, [r7, #19]
 8010fa0:	b299      	uxth	r1, r3
 8010fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fa4:	691b      	ldr	r3, [r3, #16]
 8010fa6:	685b      	ldr	r3, [r3, #4]
 8010fa8:	8c3a      	ldrh	r2, [r7, #32]
 8010faa:	6878      	ldr	r0, [r7, #4]
 8010fac:	f7ff fdf8 	bl	8010ba0 <tcp_output_alloc_header>
 8010fb0:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8010fb2:	69fb      	ldr	r3, [r7, #28]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d102      	bne.n	8010fbe <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8010fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8010fbc:	e04c      	b.n	8011058 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8010fbe:	69fb      	ldr	r3, [r7, #28]
 8010fc0:	685b      	ldr	r3, [r3, #4]
 8010fc2:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 8010fc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d011      	beq.n	8010ff0 <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8010fcc:	69bb      	ldr	r3, [r7, #24]
 8010fce:	899b      	ldrh	r3, [r3, #12]
 8010fd0:	b29b      	uxth	r3, r3
 8010fd2:	b21b      	sxth	r3, r3
 8010fd4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010fd8:	b21c      	sxth	r4, r3
 8010fda:	2011      	movs	r0, #17
 8010fdc:	f7f8 fb10 	bl	8009600 <lwip_htons>
 8010fe0:	4603      	mov	r3, r0
 8010fe2:	b21b      	sxth	r3, r3
 8010fe4:	4323      	orrs	r3, r4
 8010fe6:	b21b      	sxth	r3, r3
 8010fe8:	b29a      	uxth	r2, r3
 8010fea:	69bb      	ldr	r3, [r7, #24]
 8010fec:	819a      	strh	r2, [r3, #12]
 8010fee:	e010      	b.n	8011012 <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8010ff0:	69fb      	ldr	r3, [r7, #28]
 8010ff2:	685b      	ldr	r3, [r3, #4]
 8010ff4:	3314      	adds	r3, #20
 8010ff6:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8010ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ffa:	6858      	ldr	r0, [r3, #4]
 8010ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ffe:	685b      	ldr	r3, [r3, #4]
 8011000:	891a      	ldrh	r2, [r3, #8]
 8011002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011004:	891b      	ldrh	r3, [r3, #8]
 8011006:	1ad3      	subs	r3, r2, r3
 8011008:	b29b      	uxth	r3, r3
 801100a:	2201      	movs	r2, #1
 801100c:	6979      	ldr	r1, [r7, #20]
 801100e:	f7fa fcdf 	bl	800b9d0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011014:	691b      	ldr	r3, [r3, #16]
 8011016:	685b      	ldr	r3, [r3, #4]
 8011018:	4618      	mov	r0, r3
 801101a:	f7f8 fb06 	bl	800962a <lwip_htonl>
 801101e:	4603      	mov	r3, r0
 8011020:	3301      	adds	r3, #1
 8011022:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	1ad3      	subs	r3, r2, r3
 801102c:	2b00      	cmp	r3, #0
 801102e:	da02      	bge.n	8011036 <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	68fa      	ldr	r2, [r7, #12]
 8011034:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011036:	7cfb      	ldrb	r3, [r7, #19]
 8011038:	2200      	movs	r2, #0
 801103a:	69f9      	ldr	r1, [r7, #28]
 801103c:	6878      	ldr	r0, [r7, #4]
 801103e:	f7ff fded 	bl	8010c1c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011042:	687a      	ldr	r2, [r7, #4]
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	3304      	adds	r3, #4
 8011048:	69f9      	ldr	r1, [r7, #28]
 801104a:	6878      	ldr	r0, [r7, #4]
 801104c:	f7ff fe26 	bl	8010c9c <tcp_output_control_segment>
 8011050:	4603      	mov	r3, r0
 8011052:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011054:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011058:	4618      	mov	r0, r3
 801105a:	372c      	adds	r7, #44	; 0x2c
 801105c:	46bd      	mov	sp, r7
 801105e:	bd90      	pop	{r4, r7, pc}
 8011060:	0801a000 	.word	0x0801a000
 8011064:	0801a854 	.word	0x0801a854
 8011068:	0801a054 	.word	0x0801a054

0801106c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801106c:	b580      	push	{r7, lr}
 801106e:	b082      	sub	sp, #8
 8011070:	af00      	add	r7, sp, #0
 8011072:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011074:	f7fa fef4 	bl	800be60 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011078:	4b0b      	ldr	r3, [pc, #44]	; (80110a8 <tcpip_tcp_timer+0x3c>)
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	2b00      	cmp	r3, #0
 801107e:	d103      	bne.n	8011088 <tcpip_tcp_timer+0x1c>
 8011080:	4b0a      	ldr	r3, [pc, #40]	; (80110ac <tcpip_tcp_timer+0x40>)
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	2b00      	cmp	r3, #0
 8011086:	d006      	beq.n	8011096 <tcpip_tcp_timer+0x2a>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011088:	4b09      	ldr	r3, [pc, #36]	; (80110b0 <tcpip_tcp_timer+0x44>)
 801108a:	2200      	movs	r2, #0
 801108c:	4909      	ldr	r1, [pc, #36]	; (80110b4 <tcpip_tcp_timer+0x48>)
 801108e:	20fa      	movs	r0, #250	; 0xfa
 8011090:	f000 f90a 	bl	80112a8 <sys_timeout_debug>
 8011094:	e003      	b.n	801109e <tcpip_tcp_timer+0x32>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011096:	4b08      	ldr	r3, [pc, #32]	; (80110b8 <tcpip_tcp_timer+0x4c>)
 8011098:	2200      	movs	r2, #0
 801109a:	601a      	str	r2, [r3, #0]
  }
}
 801109c:	bf00      	nop
 801109e:	bf00      	nop
 80110a0:	3708      	adds	r7, #8
 80110a2:	46bd      	mov	sp, r7
 80110a4:	bd80      	pop	{r7, pc}
 80110a6:	bf00      	nop
 80110a8:	2000d9f4 	.word	0x2000d9f4
 80110ac:	2000d9f8 	.word	0x2000d9f8
 80110b0:	0801a8c4 	.word	0x0801a8c4
 80110b4:	0801106d 	.word	0x0801106d
 80110b8:	2000da44 	.word	0x2000da44

080110bc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80110bc:	b580      	push	{r7, lr}
 80110be:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80110c0:	4b0b      	ldr	r3, [pc, #44]	; (80110f0 <tcp_timer_needed+0x34>)
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d110      	bne.n	80110ea <tcp_timer_needed+0x2e>
 80110c8:	4b0a      	ldr	r3, [pc, #40]	; (80110f4 <tcp_timer_needed+0x38>)
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d103      	bne.n	80110d8 <tcp_timer_needed+0x1c>
 80110d0:	4b09      	ldr	r3, [pc, #36]	; (80110f8 <tcp_timer_needed+0x3c>)
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d008      	beq.n	80110ea <tcp_timer_needed+0x2e>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80110d8:	4b05      	ldr	r3, [pc, #20]	; (80110f0 <tcp_timer_needed+0x34>)
 80110da:	2201      	movs	r2, #1
 80110dc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80110de:	4b07      	ldr	r3, [pc, #28]	; (80110fc <tcp_timer_needed+0x40>)
 80110e0:	2200      	movs	r2, #0
 80110e2:	4907      	ldr	r1, [pc, #28]	; (8011100 <tcp_timer_needed+0x44>)
 80110e4:	20fa      	movs	r0, #250	; 0xfa
 80110e6:	f000 f8df 	bl	80112a8 <sys_timeout_debug>
  }
}
 80110ea:	bf00      	nop
 80110ec:	bd80      	pop	{r7, pc}
 80110ee:	bf00      	nop
 80110f0:	2000da44 	.word	0x2000da44
 80110f4:	2000d9f4 	.word	0x2000d9f4
 80110f8:	2000d9f8 	.word	0x2000d9f8
 80110fc:	0801a8c4 	.word	0x0801a8c4
 8011100:	0801106d 	.word	0x0801106d

08011104 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011104:	b580      	push	{r7, lr}
 8011106:	b086      	sub	sp, #24
 8011108:	af00      	add	r7, sp, #0
 801110a:	60f8      	str	r0, [r7, #12]
 801110c:	60b9      	str	r1, [r7, #8]
 801110e:	607a      	str	r2, [r7, #4]
 8011110:	603b      	str	r3, [r7, #0]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011112:	200a      	movs	r0, #10
 8011114:	f7f9 fa3a 	bl	800a58c <memp_malloc>
 8011118:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801111a:	693b      	ldr	r3, [r7, #16]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d109      	bne.n	8011134 <sys_timeout_abs+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011120:	693b      	ldr	r3, [r7, #16]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d154      	bne.n	80111d0 <sys_timeout_abs+0xcc>
 8011126:	4b2c      	ldr	r3, [pc, #176]	; (80111d8 <sys_timeout_abs+0xd4>)
 8011128:	22be      	movs	r2, #190	; 0xbe
 801112a:	492c      	ldr	r1, [pc, #176]	; (80111dc <sys_timeout_abs+0xd8>)
 801112c:	482c      	ldr	r0, [pc, #176]	; (80111e0 <sys_timeout_abs+0xdc>)
 801112e:	f006 f81b 	bl	8017168 <iprintf>
    return;
 8011132:	e04d      	b.n	80111d0 <sys_timeout_abs+0xcc>
  }

  timeout->next = NULL;
 8011134:	693b      	ldr	r3, [r7, #16]
 8011136:	2200      	movs	r2, #0
 8011138:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801113a:	693b      	ldr	r3, [r7, #16]
 801113c:	68ba      	ldr	r2, [r7, #8]
 801113e:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011140:	693b      	ldr	r3, [r7, #16]
 8011142:	687a      	ldr	r2, [r7, #4]
 8011144:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011146:	693b      	ldr	r3, [r7, #16]
 8011148:	68fa      	ldr	r2, [r7, #12]
 801114a:	605a      	str	r2, [r3, #4]

#if LWIP_DEBUG_TIMERNAMES
  timeout->handler_name = handler_name;
 801114c:	693b      	ldr	r3, [r7, #16]
 801114e:	683a      	ldr	r2, [r7, #0]
 8011150:	611a      	str	r2, [r3, #16]
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011152:	4b24      	ldr	r3, [pc, #144]	; (80111e4 <sys_timeout_abs+0xe0>)
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d103      	bne.n	8011162 <sys_timeout_abs+0x5e>
    next_timeout = timeout;
 801115a:	4a22      	ldr	r2, [pc, #136]	; (80111e4 <sys_timeout_abs+0xe0>)
 801115c:	693b      	ldr	r3, [r7, #16]
 801115e:	6013      	str	r3, [r2, #0]
    return;
 8011160:	e037      	b.n	80111d2 <sys_timeout_abs+0xce>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011162:	693b      	ldr	r3, [r7, #16]
 8011164:	685a      	ldr	r2, [r3, #4]
 8011166:	4b1f      	ldr	r3, [pc, #124]	; (80111e4 <sys_timeout_abs+0xe0>)
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	685b      	ldr	r3, [r3, #4]
 801116c:	1ad3      	subs	r3, r2, r3
 801116e:	0fdb      	lsrs	r3, r3, #31
 8011170:	f003 0301 	and.w	r3, r3, #1
 8011174:	b2db      	uxtb	r3, r3
 8011176:	2b00      	cmp	r3, #0
 8011178:	d007      	beq.n	801118a <sys_timeout_abs+0x86>
    timeout->next = next_timeout;
 801117a:	4b1a      	ldr	r3, [pc, #104]	; (80111e4 <sys_timeout_abs+0xe0>)
 801117c:	681a      	ldr	r2, [r3, #0]
 801117e:	693b      	ldr	r3, [r7, #16]
 8011180:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011182:	4a18      	ldr	r2, [pc, #96]	; (80111e4 <sys_timeout_abs+0xe0>)
 8011184:	693b      	ldr	r3, [r7, #16]
 8011186:	6013      	str	r3, [r2, #0]
 8011188:	e023      	b.n	80111d2 <sys_timeout_abs+0xce>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801118a:	4b16      	ldr	r3, [pc, #88]	; (80111e4 <sys_timeout_abs+0xe0>)
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	617b      	str	r3, [r7, #20]
 8011190:	e01a      	b.n	80111c8 <sys_timeout_abs+0xc4>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011192:	697b      	ldr	r3, [r7, #20]
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d00b      	beq.n	80111b2 <sys_timeout_abs+0xae>
 801119a:	693b      	ldr	r3, [r7, #16]
 801119c:	685a      	ldr	r2, [r3, #4]
 801119e:	697b      	ldr	r3, [r7, #20]
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	685b      	ldr	r3, [r3, #4]
 80111a4:	1ad3      	subs	r3, r2, r3
 80111a6:	0fdb      	lsrs	r3, r3, #31
 80111a8:	f003 0301 	and.w	r3, r3, #1
 80111ac:	b2db      	uxtb	r3, r3
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d007      	beq.n	80111c2 <sys_timeout_abs+0xbe>
        timeout->next = t->next;
 80111b2:	697b      	ldr	r3, [r7, #20]
 80111b4:	681a      	ldr	r2, [r3, #0]
 80111b6:	693b      	ldr	r3, [r7, #16]
 80111b8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80111ba:	697b      	ldr	r3, [r7, #20]
 80111bc:	693a      	ldr	r2, [r7, #16]
 80111be:	601a      	str	r2, [r3, #0]
        break;
 80111c0:	e007      	b.n	80111d2 <sys_timeout_abs+0xce>
    for (t = next_timeout; t != NULL; t = t->next) {
 80111c2:	697b      	ldr	r3, [r7, #20]
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	617b      	str	r3, [r7, #20]
 80111c8:	697b      	ldr	r3, [r7, #20]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d1e1      	bne.n	8011192 <sys_timeout_abs+0x8e>
 80111ce:	e000      	b.n	80111d2 <sys_timeout_abs+0xce>
    return;
 80111d0:	bf00      	nop
      }
    }
  }
}
 80111d2:	3718      	adds	r7, #24
 80111d4:	46bd      	mov	sp, r7
 80111d6:	bd80      	pop	{r7, pc}
 80111d8:	0801a8d4 	.word	0x0801a8d4
 80111dc:	0801a908 	.word	0x0801a908
 80111e0:	0801a948 	.word	0x0801a948
 80111e4:	2000da3c 	.word	0x2000da3c

080111e8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80111e8:	b580      	push	{r7, lr}
 80111ea:	b086      	sub	sp, #24
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80111f4:	697b      	ldr	r3, [r7, #20]
 80111f6:	685b      	ldr	r3, [r3, #4]
 80111f8:	4798      	blx	r3

  now = sys_now();
 80111fa:	f7f4 f821 	bl	8005240 <sys_now>
 80111fe:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011200:	697b      	ldr	r3, [r7, #20]
 8011202:	681a      	ldr	r2, [r3, #0]
 8011204:	4b11      	ldr	r3, [pc, #68]	; (801124c <lwip_cyclic_timer+0x64>)
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	4413      	add	r3, r2
 801120a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801120c:	68fa      	ldr	r2, [r7, #12]
 801120e:	693b      	ldr	r3, [r7, #16]
 8011210:	1ad3      	subs	r3, r2, r3
 8011212:	0fdb      	lsrs	r3, r3, #31
 8011214:	f003 0301 	and.w	r3, r3, #1
 8011218:	b2db      	uxtb	r3, r3
 801121a:	2b00      	cmp	r3, #0
 801121c:	d00a      	beq.n	8011234 <lwip_cyclic_timer+0x4c>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
 801121e:	697b      	ldr	r3, [r7, #20]
 8011220:	681a      	ldr	r2, [r3, #0]
 8011222:	693b      	ldr	r3, [r7, #16]
 8011224:	18d0      	adds	r0, r2, r3
 8011226:	697b      	ldr	r3, [r7, #20]
 8011228:	689b      	ldr	r3, [r3, #8]
 801122a:	687a      	ldr	r2, [r7, #4]
 801122c:	4908      	ldr	r1, [pc, #32]	; (8011250 <lwip_cyclic_timer+0x68>)
 801122e:	f7ff ff69 	bl	8011104 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011232:	e006      	b.n	8011242 <lwip_cyclic_timer+0x5a>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
 8011234:	697b      	ldr	r3, [r7, #20]
 8011236:	689b      	ldr	r3, [r3, #8]
 8011238:	687a      	ldr	r2, [r7, #4]
 801123a:	4905      	ldr	r1, [pc, #20]	; (8011250 <lwip_cyclic_timer+0x68>)
 801123c:	68f8      	ldr	r0, [r7, #12]
 801123e:	f7ff ff61 	bl	8011104 <sys_timeout_abs>
}
 8011242:	bf00      	nop
 8011244:	3718      	adds	r7, #24
 8011246:	46bd      	mov	sp, r7
 8011248:	bd80      	pop	{r7, pc}
 801124a:	bf00      	nop
 801124c:	2000da40 	.word	0x2000da40
 8011250:	080111e9 	.word	0x080111e9

08011254 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b082      	sub	sp, #8
 8011258:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801125a:	2301      	movs	r3, #1
 801125c:	607b      	str	r3, [r7, #4]
 801125e:	e015      	b.n	801128c <sys_timeouts_init+0x38>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011260:	490e      	ldr	r1, [pc, #56]	; (801129c <sys_timeouts_init+0x48>)
 8011262:	687a      	ldr	r2, [r7, #4]
 8011264:	4613      	mov	r3, r2
 8011266:	005b      	lsls	r3, r3, #1
 8011268:	4413      	add	r3, r2
 801126a:	009b      	lsls	r3, r3, #2
 801126c:	440b      	add	r3, r1
 801126e:	6818      	ldr	r0, [r3, #0]
 8011270:	687a      	ldr	r2, [r7, #4]
 8011272:	4613      	mov	r3, r2
 8011274:	005b      	lsls	r3, r3, #1
 8011276:	4413      	add	r3, r2
 8011278:	009b      	lsls	r3, r3, #2
 801127a:	4a08      	ldr	r2, [pc, #32]	; (801129c <sys_timeouts_init+0x48>)
 801127c:	441a      	add	r2, r3
 801127e:	4b08      	ldr	r3, [pc, #32]	; (80112a0 <sys_timeouts_init+0x4c>)
 8011280:	4908      	ldr	r1, [pc, #32]	; (80112a4 <sys_timeouts_init+0x50>)
 8011282:	f000 f811 	bl	80112a8 <sys_timeout_debug>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	3301      	adds	r3, #1
 801128a:	607b      	str	r3, [r7, #4]
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	2b05      	cmp	r3, #5
 8011290:	d9e6      	bls.n	8011260 <sys_timeouts_init+0xc>
  }
}
 8011292:	bf00      	nop
 8011294:	bf00      	nop
 8011296:	3708      	adds	r7, #8
 8011298:	46bd      	mov	sp, r7
 801129a:	bd80      	pop	{r7, pc}
 801129c:	0801d5e0 	.word	0x0801d5e0
 80112a0:	0801a970 	.word	0x0801a970
 80112a4:	080111e9 	.word	0x080111e9

080112a8 <sys_timeout_debug>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80112a8:	b580      	push	{r7, lr}
 80112aa:	b086      	sub	sp, #24
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	60f8      	str	r0, [r7, #12]
 80112b0:	60b9      	str	r1, [r7, #8]
 80112b2:	607a      	str	r2, [r7, #4]
 80112b4:	603b      	str	r3, [r7, #0]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80112bc:	d306      	bcc.n	80112cc <sys_timeout_debug+0x24>
 80112be:	4b0b      	ldr	r3, [pc, #44]	; (80112ec <sys_timeout_debug+0x44>)
 80112c0:	f240 1229 	movw	r2, #297	; 0x129
 80112c4:	490a      	ldr	r1, [pc, #40]	; (80112f0 <sys_timeout_debug+0x48>)
 80112c6:	480b      	ldr	r0, [pc, #44]	; (80112f4 <sys_timeout_debug+0x4c>)
 80112c8:	f005 ff4e 	bl	8017168 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80112cc:	f7f3 ffb8 	bl	8005240 <sys_now>
 80112d0:	4602      	mov	r2, r0
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	4413      	add	r3, r2
 80112d6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
 80112d8:	683b      	ldr	r3, [r7, #0]
 80112da:	687a      	ldr	r2, [r7, #4]
 80112dc:	68b9      	ldr	r1, [r7, #8]
 80112de:	6978      	ldr	r0, [r7, #20]
 80112e0:	f7ff ff10 	bl	8011104 <sys_timeout_abs>
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
#endif
}
 80112e4:	bf00      	nop
 80112e6:	3718      	adds	r7, #24
 80112e8:	46bd      	mov	sp, r7
 80112ea:	bd80      	pop	{r7, pc}
 80112ec:	0801a8d4 	.word	0x0801a8d4
 80112f0:	0801a984 	.word	0x0801a984
 80112f4:	0801a948 	.word	0x0801a948

080112f8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b084      	sub	sp, #16
 80112fc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80112fe:	f7f3 ff9f 	bl	8005240 <sys_now>
 8011302:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8011304:	4b17      	ldr	r3, [pc, #92]	; (8011364 <sys_check_timeouts+0x6c>)
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801130a:	68bb      	ldr	r3, [r7, #8]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d022      	beq.n	8011356 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011310:	68bb      	ldr	r3, [r7, #8]
 8011312:	685b      	ldr	r3, [r3, #4]
 8011314:	68fa      	ldr	r2, [r7, #12]
 8011316:	1ad3      	subs	r3, r2, r3
 8011318:	0fdb      	lsrs	r3, r3, #31
 801131a:	f003 0301 	and.w	r3, r3, #1
 801131e:	b2db      	uxtb	r3, r3
 8011320:	2b00      	cmp	r3, #0
 8011322:	d11a      	bne.n	801135a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8011324:	68bb      	ldr	r3, [r7, #8]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	4a0e      	ldr	r2, [pc, #56]	; (8011364 <sys_check_timeouts+0x6c>)
 801132a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801132c:	68bb      	ldr	r3, [r7, #8]
 801132e:	689b      	ldr	r3, [r3, #8]
 8011330:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8011332:	68bb      	ldr	r3, [r7, #8]
 8011334:	68db      	ldr	r3, [r3, #12]
 8011336:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8011338:	68bb      	ldr	r3, [r7, #8]
 801133a:	685b      	ldr	r3, [r3, #4]
 801133c:	4a0a      	ldr	r2, [pc, #40]	; (8011368 <sys_check_timeouts+0x70>)
 801133e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011340:	68b9      	ldr	r1, [r7, #8]
 8011342:	200a      	movs	r0, #10
 8011344:	f7f9 f998 	bl	800a678 <memp_free>
    if (handler != NULL) {
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d0da      	beq.n	8011304 <sys_check_timeouts+0xc>
      handler(arg);
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	6838      	ldr	r0, [r7, #0]
 8011352:	4798      	blx	r3
  do {
 8011354:	e7d6      	b.n	8011304 <sys_check_timeouts+0xc>
      return;
 8011356:	bf00      	nop
 8011358:	e000      	b.n	801135c <sys_check_timeouts+0x64>
      return;
 801135a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801135c:	3710      	adds	r7, #16
 801135e:	46bd      	mov	sp, r7
 8011360:	bd80      	pop	{r7, pc}
 8011362:	bf00      	nop
 8011364:	2000da3c 	.word	0x2000da3c
 8011368:	2000da40 	.word	0x2000da40

0801136c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801136c:	b580      	push	{r7, lr}
 801136e:	b082      	sub	sp, #8
 8011370:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8011372:	4b16      	ldr	r3, [pc, #88]	; (80113cc <sys_timeouts_sleeptime+0x60>)
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d102      	bne.n	8011380 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801137a:	f04f 33ff 	mov.w	r3, #4294967295
 801137e:	e020      	b.n	80113c2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8011380:	f7f3 ff5e 	bl	8005240 <sys_now>
 8011384:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8011386:	4b11      	ldr	r3, [pc, #68]	; (80113cc <sys_timeouts_sleeptime+0x60>)
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	685a      	ldr	r2, [r3, #4]
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	1ad3      	subs	r3, r2, r3
 8011390:	0fdb      	lsrs	r3, r3, #31
 8011392:	f003 0301 	and.w	r3, r3, #1
 8011396:	b2db      	uxtb	r3, r3
 8011398:	2b00      	cmp	r3, #0
 801139a:	d001      	beq.n	80113a0 <sys_timeouts_sleeptime+0x34>
    return 0;
 801139c:	2300      	movs	r3, #0
 801139e:	e010      	b.n	80113c2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80113a0:	4b0a      	ldr	r3, [pc, #40]	; (80113cc <sys_timeouts_sleeptime+0x60>)
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	685a      	ldr	r2, [r3, #4]
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	1ad3      	subs	r3, r2, r3
 80113aa:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80113ac:	683b      	ldr	r3, [r7, #0]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	da06      	bge.n	80113c0 <sys_timeouts_sleeptime+0x54>
 80113b2:	4b07      	ldr	r3, [pc, #28]	; (80113d0 <sys_timeouts_sleeptime+0x64>)
 80113b4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80113b8:	4906      	ldr	r1, [pc, #24]	; (80113d4 <sys_timeouts_sleeptime+0x68>)
 80113ba:	4807      	ldr	r0, [pc, #28]	; (80113d8 <sys_timeouts_sleeptime+0x6c>)
 80113bc:	f005 fed4 	bl	8017168 <iprintf>
    return ret;
 80113c0:	683b      	ldr	r3, [r7, #0]
  }
}
 80113c2:	4618      	mov	r0, r3
 80113c4:	3708      	adds	r7, #8
 80113c6:	46bd      	mov	sp, r7
 80113c8:	bd80      	pop	{r7, pc}
 80113ca:	bf00      	nop
 80113cc:	2000da3c 	.word	0x2000da3c
 80113d0:	0801a8d4 	.word	0x0801a8d4
 80113d4:	0801a9bc 	.word	0x0801a9bc
 80113d8:	0801a948 	.word	0x0801a948

080113dc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80113dc:	b580      	push	{r7, lr}
 80113de:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80113e0:	f005 ff66 	bl	80172b0 <rand>
 80113e4:	4603      	mov	r3, r0
 80113e6:	b29b      	uxth	r3, r3
 80113e8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80113ec:	b29b      	uxth	r3, r3
 80113ee:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80113f2:	b29a      	uxth	r2, r3
 80113f4:	4b01      	ldr	r3, [pc, #4]	; (80113fc <udp_init+0x20>)
 80113f6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80113f8:	bf00      	nop
 80113fa:	bd80      	pop	{r7, pc}
 80113fc:	20000070 	.word	0x20000070

08011400 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8011400:	b480      	push	{r7}
 8011402:	b083      	sub	sp, #12
 8011404:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8011406:	2300      	movs	r3, #0
 8011408:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801140a:	4b17      	ldr	r3, [pc, #92]	; (8011468 <udp_new_port+0x68>)
 801140c:	881b      	ldrh	r3, [r3, #0]
 801140e:	1c5a      	adds	r2, r3, #1
 8011410:	b291      	uxth	r1, r2
 8011412:	4a15      	ldr	r2, [pc, #84]	; (8011468 <udp_new_port+0x68>)
 8011414:	8011      	strh	r1, [r2, #0]
 8011416:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801141a:	4293      	cmp	r3, r2
 801141c:	d103      	bne.n	8011426 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801141e:	4b12      	ldr	r3, [pc, #72]	; (8011468 <udp_new_port+0x68>)
 8011420:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8011424:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011426:	4b11      	ldr	r3, [pc, #68]	; (801146c <udp_new_port+0x6c>)
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	603b      	str	r3, [r7, #0]
 801142c:	e011      	b.n	8011452 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801142e:	683b      	ldr	r3, [r7, #0]
 8011430:	8a5a      	ldrh	r2, [r3, #18]
 8011432:	4b0d      	ldr	r3, [pc, #52]	; (8011468 <udp_new_port+0x68>)
 8011434:	881b      	ldrh	r3, [r3, #0]
 8011436:	429a      	cmp	r2, r3
 8011438:	d108      	bne.n	801144c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801143a:	88fb      	ldrh	r3, [r7, #6]
 801143c:	3301      	adds	r3, #1
 801143e:	80fb      	strh	r3, [r7, #6]
 8011440:	88fb      	ldrh	r3, [r7, #6]
 8011442:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011446:	d3e0      	bcc.n	801140a <udp_new_port+0xa>
        return 0;
 8011448:	2300      	movs	r3, #0
 801144a:	e007      	b.n	801145c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801144c:	683b      	ldr	r3, [r7, #0]
 801144e:	68db      	ldr	r3, [r3, #12]
 8011450:	603b      	str	r3, [r7, #0]
 8011452:	683b      	ldr	r3, [r7, #0]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d1ea      	bne.n	801142e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8011458:	4b03      	ldr	r3, [pc, #12]	; (8011468 <udp_new_port+0x68>)
 801145a:	881b      	ldrh	r3, [r3, #0]
}
 801145c:	4618      	mov	r0, r3
 801145e:	370c      	adds	r7, #12
 8011460:	46bd      	mov	sp, r7
 8011462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011466:	4770      	bx	lr
 8011468:	20000070 	.word	0x20000070
 801146c:	2000da48 	.word	0x2000da48

08011470 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011470:	b580      	push	{r7, lr}
 8011472:	b084      	sub	sp, #16
 8011474:	af00      	add	r7, sp, #0
 8011476:	60f8      	str	r0, [r7, #12]
 8011478:	60b9      	str	r1, [r7, #8]
 801147a:	4613      	mov	r3, r2
 801147c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d105      	bne.n	8011490 <udp_input_local_match+0x20>
 8011484:	4b27      	ldr	r3, [pc, #156]	; (8011524 <udp_input_local_match+0xb4>)
 8011486:	2287      	movs	r2, #135	; 0x87
 8011488:	4927      	ldr	r1, [pc, #156]	; (8011528 <udp_input_local_match+0xb8>)
 801148a:	4828      	ldr	r0, [pc, #160]	; (801152c <udp_input_local_match+0xbc>)
 801148c:	f005 fe6c 	bl	8017168 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011490:	68bb      	ldr	r3, [r7, #8]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d105      	bne.n	80114a2 <udp_input_local_match+0x32>
 8011496:	4b23      	ldr	r3, [pc, #140]	; (8011524 <udp_input_local_match+0xb4>)
 8011498:	2288      	movs	r2, #136	; 0x88
 801149a:	4925      	ldr	r1, [pc, #148]	; (8011530 <udp_input_local_match+0xc0>)
 801149c:	4823      	ldr	r0, [pc, #140]	; (801152c <udp_input_local_match+0xbc>)
 801149e:	f005 fe63 	bl	8017168 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	7a1b      	ldrb	r3, [r3, #8]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d00b      	beq.n	80114c2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	7a1a      	ldrb	r2, [r3, #8]
 80114ae:	4b21      	ldr	r3, [pc, #132]	; (8011534 <udp_input_local_match+0xc4>)
 80114b0:	685b      	ldr	r3, [r3, #4]
 80114b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80114b6:	3301      	adds	r3, #1
 80114b8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80114ba:	429a      	cmp	r2, r3
 80114bc:	d001      	beq.n	80114c2 <udp_input_local_match+0x52>
    return 0;
 80114be:	2300      	movs	r3, #0
 80114c0:	e02b      	b.n	801151a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80114c2:	79fb      	ldrb	r3, [r7, #7]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d018      	beq.n	80114fa <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d013      	beq.n	80114f6 <udp_input_local_match+0x86>
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d00f      	beq.n	80114f6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80114d6:	4b17      	ldr	r3, [pc, #92]	; (8011534 <udp_input_local_match+0xc4>)
 80114d8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80114da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114de:	d00a      	beq.n	80114f6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	681a      	ldr	r2, [r3, #0]
 80114e4:	4b13      	ldr	r3, [pc, #76]	; (8011534 <udp_input_local_match+0xc4>)
 80114e6:	695b      	ldr	r3, [r3, #20]
 80114e8:	405a      	eors	r2, r3
 80114ea:	68bb      	ldr	r3, [r7, #8]
 80114ec:	3308      	adds	r3, #8
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d110      	bne.n	8011518 <udp_input_local_match+0xa8>
          return 1;
 80114f6:	2301      	movs	r3, #1
 80114f8:	e00f      	b.n	801151a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d009      	beq.n	8011514 <udp_input_local_match+0xa4>
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	2b00      	cmp	r3, #0
 8011506:	d005      	beq.n	8011514 <udp_input_local_match+0xa4>
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	681a      	ldr	r2, [r3, #0]
 801150c:	4b09      	ldr	r3, [pc, #36]	; (8011534 <udp_input_local_match+0xc4>)
 801150e:	695b      	ldr	r3, [r3, #20]
 8011510:	429a      	cmp	r2, r3
 8011512:	d101      	bne.n	8011518 <udp_input_local_match+0xa8>
        return 1;
 8011514:	2301      	movs	r3, #1
 8011516:	e000      	b.n	801151a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8011518:	2300      	movs	r3, #0
}
 801151a:	4618      	mov	r0, r3
 801151c:	3710      	adds	r7, #16
 801151e:	46bd      	mov	sp, r7
 8011520:	bd80      	pop	{r7, pc}
 8011522:	bf00      	nop
 8011524:	0801a9d0 	.word	0x0801a9d0
 8011528:	0801aa00 	.word	0x0801aa00
 801152c:	0801aa24 	.word	0x0801aa24
 8011530:	0801aa4c 	.word	0x0801aa4c
 8011534:	2000a0d0 	.word	0x2000a0d0

08011538 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011538:	b590      	push	{r4, r7, lr}
 801153a:	b08d      	sub	sp, #52	; 0x34
 801153c:	af02      	add	r7, sp, #8
 801153e:	6078      	str	r0, [r7, #4]
 8011540:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8011542:	2300      	movs	r3, #0
 8011544:	77fb      	strb	r3, [r7, #31]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d105      	bne.n	8011558 <udp_input+0x20>
 801154c:	4b7c      	ldr	r3, [pc, #496]	; (8011740 <udp_input+0x208>)
 801154e:	22cf      	movs	r2, #207	; 0xcf
 8011550:	497c      	ldr	r1, [pc, #496]	; (8011744 <udp_input+0x20c>)
 8011552:	487d      	ldr	r0, [pc, #500]	; (8011748 <udp_input+0x210>)
 8011554:	f005 fe08 	bl	8017168 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8011558:	683b      	ldr	r3, [r7, #0]
 801155a:	2b00      	cmp	r3, #0
 801155c:	d105      	bne.n	801156a <udp_input+0x32>
 801155e:	4b78      	ldr	r3, [pc, #480]	; (8011740 <udp_input+0x208>)
 8011560:	22d0      	movs	r2, #208	; 0xd0
 8011562:	497a      	ldr	r1, [pc, #488]	; (801174c <udp_input+0x214>)
 8011564:	4878      	ldr	r0, [pc, #480]	; (8011748 <udp_input+0x210>)
 8011566:	f005 fdff 	bl	8017168 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	895b      	ldrh	r3, [r3, #10]
 801156e:	2b07      	cmp	r3, #7
 8011570:	d803      	bhi.n	801157a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8011572:	6878      	ldr	r0, [r7, #4]
 8011574:	f7fa f826 	bl	800b5c4 <pbuf_free>
    goto end;
 8011578:	e0de      	b.n	8011738 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	685b      	ldr	r3, [r3, #4]
 801157e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011580:	4b73      	ldr	r3, [pc, #460]	; (8011750 <udp_input+0x218>)
 8011582:	695b      	ldr	r3, [r3, #20]
 8011584:	4a72      	ldr	r2, [pc, #456]	; (8011750 <udp_input+0x218>)
 8011586:	6812      	ldr	r2, [r2, #0]
 8011588:	4611      	mov	r1, r2
 801158a:	4618      	mov	r0, r3
 801158c:	f004 fcf0 	bl	8015f70 <ip4_addr_isbroadcast_u32>
 8011590:	4603      	mov	r3, r0
 8011592:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8011594:	697b      	ldr	r3, [r7, #20]
 8011596:	881b      	ldrh	r3, [r3, #0]
 8011598:	b29b      	uxth	r3, r3
 801159a:	4618      	mov	r0, r3
 801159c:	f7f8 f830 	bl	8009600 <lwip_htons>
 80115a0:	4603      	mov	r3, r0
 80115a2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80115a4:	697b      	ldr	r3, [r7, #20]
 80115a6:	885b      	ldrh	r3, [r3, #2]
 80115a8:	b29b      	uxth	r3, r3
 80115aa:	4618      	mov	r0, r3
 80115ac:	f7f8 f828 	bl	8009600 <lwip_htons>
 80115b0:	4603      	mov	r3, r0
 80115b2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80115b4:	2300      	movs	r3, #0
 80115b6:	623b      	str	r3, [r7, #32]
  prev = NULL;
 80115b8:	2300      	movs	r3, #0
 80115ba:	627b      	str	r3, [r7, #36]	; 0x24
  uncon_pcb = NULL;
 80115bc:	2300      	movs	r3, #0
 80115be:	61bb      	str	r3, [r7, #24]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80115c0:	4b64      	ldr	r3, [pc, #400]	; (8011754 <udp_input+0x21c>)
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	623b      	str	r3, [r7, #32]
 80115c6:	e054      	b.n	8011672 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80115c8:	6a3b      	ldr	r3, [r7, #32]
 80115ca:	8a5b      	ldrh	r3, [r3, #18]
 80115cc:	89fa      	ldrh	r2, [r7, #14]
 80115ce:	429a      	cmp	r2, r3
 80115d0:	d14a      	bne.n	8011668 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80115d2:	7cfb      	ldrb	r3, [r7, #19]
 80115d4:	461a      	mov	r2, r3
 80115d6:	6839      	ldr	r1, [r7, #0]
 80115d8:	6a38      	ldr	r0, [r7, #32]
 80115da:	f7ff ff49 	bl	8011470 <udp_input_local_match>
 80115de:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d041      	beq.n	8011668 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80115e4:	6a3b      	ldr	r3, [r7, #32]
 80115e6:	7c1b      	ldrb	r3, [r3, #16]
 80115e8:	f003 0304 	and.w	r3, r3, #4
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d11d      	bne.n	801162c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80115f0:	69bb      	ldr	r3, [r7, #24]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d102      	bne.n	80115fc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80115f6:	6a3b      	ldr	r3, [r7, #32]
 80115f8:	61bb      	str	r3, [r7, #24]
 80115fa:	e017      	b.n	801162c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80115fc:	7cfb      	ldrb	r3, [r7, #19]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d014      	beq.n	801162c <udp_input+0xf4>
 8011602:	4b53      	ldr	r3, [pc, #332]	; (8011750 <udp_input+0x218>)
 8011604:	695b      	ldr	r3, [r3, #20]
 8011606:	f1b3 3fff 	cmp.w	r3, #4294967295
 801160a:	d10f      	bne.n	801162c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801160c:	69bb      	ldr	r3, [r7, #24]
 801160e:	681a      	ldr	r2, [r3, #0]
 8011610:	683b      	ldr	r3, [r7, #0]
 8011612:	3304      	adds	r3, #4
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	429a      	cmp	r2, r3
 8011618:	d008      	beq.n	801162c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801161a:	6a3b      	ldr	r3, [r7, #32]
 801161c:	681a      	ldr	r2, [r3, #0]
 801161e:	683b      	ldr	r3, [r7, #0]
 8011620:	3304      	adds	r3, #4
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	429a      	cmp	r2, r3
 8011626:	d101      	bne.n	801162c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8011628:	6a3b      	ldr	r3, [r7, #32]
 801162a:	61bb      	str	r3, [r7, #24]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801162c:	6a3b      	ldr	r3, [r7, #32]
 801162e:	8a9b      	ldrh	r3, [r3, #20]
 8011630:	8a3a      	ldrh	r2, [r7, #16]
 8011632:	429a      	cmp	r2, r3
 8011634:	d118      	bne.n	8011668 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011636:	6a3b      	ldr	r3, [r7, #32]
 8011638:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801163a:	2b00      	cmp	r3, #0
 801163c:	d005      	beq.n	801164a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801163e:	6a3b      	ldr	r3, [r7, #32]
 8011640:	685a      	ldr	r2, [r3, #4]
 8011642:	4b43      	ldr	r3, [pc, #268]	; (8011750 <udp_input+0x218>)
 8011644:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011646:	429a      	cmp	r2, r3
 8011648:	d10e      	bne.n	8011668 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801164c:	2b00      	cmp	r3, #0
 801164e:	d014      	beq.n	801167a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8011650:	6a3b      	ldr	r3, [r7, #32]
 8011652:	68da      	ldr	r2, [r3, #12]
 8011654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011656:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8011658:	4b3e      	ldr	r3, [pc, #248]	; (8011754 <udp_input+0x21c>)
 801165a:	681a      	ldr	r2, [r3, #0]
 801165c:	6a3b      	ldr	r3, [r7, #32]
 801165e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8011660:	4a3c      	ldr	r2, [pc, #240]	; (8011754 <udp_input+0x21c>)
 8011662:	6a3b      	ldr	r3, [r7, #32]
 8011664:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8011666:	e008      	b.n	801167a <udp_input+0x142>
      }
    }

    prev = pcb;
 8011668:	6a3b      	ldr	r3, [r7, #32]
 801166a:	627b      	str	r3, [r7, #36]	; 0x24
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801166c:	6a3b      	ldr	r3, [r7, #32]
 801166e:	68db      	ldr	r3, [r3, #12]
 8011670:	623b      	str	r3, [r7, #32]
 8011672:	6a3b      	ldr	r3, [r7, #32]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d1a7      	bne.n	80115c8 <udp_input+0x90>
 8011678:	e000      	b.n	801167c <udp_input+0x144>
        break;
 801167a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801167c:	6a3b      	ldr	r3, [r7, #32]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d101      	bne.n	8011686 <udp_input+0x14e>
    pcb = uncon_pcb;
 8011682:	69bb      	ldr	r3, [r7, #24]
 8011684:	623b      	str	r3, [r7, #32]
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8011686:	6a3b      	ldr	r3, [r7, #32]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d002      	beq.n	8011692 <udp_input+0x15a>
    for_us = 1;
 801168c:	2301      	movs	r3, #1
 801168e:	77fb      	strb	r3, [r7, #31]
 8011690:	e00a      	b.n	80116a8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8011692:	683b      	ldr	r3, [r7, #0]
 8011694:	3304      	adds	r3, #4
 8011696:	681a      	ldr	r2, [r3, #0]
 8011698:	4b2d      	ldr	r3, [pc, #180]	; (8011750 <udp_input+0x218>)
 801169a:	695b      	ldr	r3, [r3, #20]
 801169c:	429a      	cmp	r2, r3
 801169e:	bf0c      	ite	eq
 80116a0:	2301      	moveq	r3, #1
 80116a2:	2300      	movne	r3, #0
 80116a4:	b2db      	uxtb	r3, r3
 80116a6:	77fb      	strb	r3, [r7, #31]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80116a8:	7ffb      	ldrb	r3, [r7, #31]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d041      	beq.n	8011732 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80116ae:	2108      	movs	r1, #8
 80116b0:	6878      	ldr	r0, [r7, #4]
 80116b2:	f7f9 ff01 	bl	800b4b8 <pbuf_remove_header>
 80116b6:	4603      	mov	r3, r0
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d00a      	beq.n	80116d2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80116bc:	4b20      	ldr	r3, [pc, #128]	; (8011740 <udp_input+0x208>)
 80116be:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80116c2:	4925      	ldr	r1, [pc, #148]	; (8011758 <udp_input+0x220>)
 80116c4:	4820      	ldr	r0, [pc, #128]	; (8011748 <udp_input+0x210>)
 80116c6:	f005 fd4f 	bl	8017168 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80116ca:	6878      	ldr	r0, [r7, #4]
 80116cc:	f7f9 ff7a 	bl	800b5c4 <pbuf_free>
      goto end;
 80116d0:	e032      	b.n	8011738 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80116d2:	6a3b      	ldr	r3, [r7, #32]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d012      	beq.n	80116fe <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80116d8:	6a3b      	ldr	r3, [r7, #32]
 80116da:	699b      	ldr	r3, [r3, #24]
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d00a      	beq.n	80116f6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80116e0:	6a3b      	ldr	r3, [r7, #32]
 80116e2:	699c      	ldr	r4, [r3, #24]
 80116e4:	6a3b      	ldr	r3, [r7, #32]
 80116e6:	69d8      	ldr	r0, [r3, #28]
 80116e8:	8a3b      	ldrh	r3, [r7, #16]
 80116ea:	9300      	str	r3, [sp, #0]
 80116ec:	4b1b      	ldr	r3, [pc, #108]	; (801175c <udp_input+0x224>)
 80116ee:	687a      	ldr	r2, [r7, #4]
 80116f0:	6a39      	ldr	r1, [r7, #32]
 80116f2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80116f4:	e021      	b.n	801173a <udp_input+0x202>
        pbuf_free(p);
 80116f6:	6878      	ldr	r0, [r7, #4]
 80116f8:	f7f9 ff64 	bl	800b5c4 <pbuf_free>
        goto end;
 80116fc:	e01c      	b.n	8011738 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80116fe:	7cfb      	ldrb	r3, [r7, #19]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d112      	bne.n	801172a <udp_input+0x1f2>
 8011704:	4b12      	ldr	r3, [pc, #72]	; (8011750 <udp_input+0x218>)
 8011706:	695b      	ldr	r3, [r3, #20]
 8011708:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801170c:	2be0      	cmp	r3, #224	; 0xe0
 801170e:	d00c      	beq.n	801172a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8011710:	4b0f      	ldr	r3, [pc, #60]	; (8011750 <udp_input+0x218>)
 8011712:	899b      	ldrh	r3, [r3, #12]
 8011714:	3308      	adds	r3, #8
 8011716:	b29b      	uxth	r3, r3
 8011718:	b21b      	sxth	r3, r3
 801171a:	4619      	mov	r1, r3
 801171c:	6878      	ldr	r0, [r7, #4]
 801171e:	f7f9 ff3e 	bl	800b59e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8011722:	2103      	movs	r1, #3
 8011724:	6878      	ldr	r0, [r7, #4]
 8011726:	f003 fed9 	bl	80154dc <icmp_dest_unreach>
      pbuf_free(p);
 801172a:	6878      	ldr	r0, [r7, #4]
 801172c:	f7f9 ff4a 	bl	800b5c4 <pbuf_free>
  return;
 8011730:	e003      	b.n	801173a <udp_input+0x202>
    pbuf_free(p);
 8011732:	6878      	ldr	r0, [r7, #4]
 8011734:	f7f9 ff46 	bl	800b5c4 <pbuf_free>
  return;
 8011738:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801173a:	372c      	adds	r7, #44	; 0x2c
 801173c:	46bd      	mov	sp, r7
 801173e:	bd90      	pop	{r4, r7, pc}
 8011740:	0801a9d0 	.word	0x0801a9d0
 8011744:	0801aa74 	.word	0x0801aa74
 8011748:	0801aa24 	.word	0x0801aa24
 801174c:	0801aa8c 	.word	0x0801aa8c
 8011750:	2000a0d0 	.word	0x2000a0d0
 8011754:	2000da48 	.word	0x2000da48
 8011758:	0801aaa8 	.word	0x0801aaa8
 801175c:	2000a0e0 	.word	0x2000a0e0

08011760 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8011760:	b580      	push	{r7, lr}
 8011762:	b088      	sub	sp, #32
 8011764:	af02      	add	r7, sp, #8
 8011766:	60f8      	str	r0, [r7, #12]
 8011768:	60b9      	str	r1, [r7, #8]
 801176a:	607a      	str	r2, [r7, #4]
 801176c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d109      	bne.n	8011788 <udp_sendto+0x28>
 8011774:	4b23      	ldr	r3, [pc, #140]	; (8011804 <udp_sendto+0xa4>)
 8011776:	f44f 7206 	mov.w	r2, #536	; 0x218
 801177a:	4923      	ldr	r1, [pc, #140]	; (8011808 <udp_sendto+0xa8>)
 801177c:	4823      	ldr	r0, [pc, #140]	; (801180c <udp_sendto+0xac>)
 801177e:	f005 fcf3 	bl	8017168 <iprintf>
 8011782:	f06f 030f 	mvn.w	r3, #15
 8011786:	e038      	b.n	80117fa <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8011788:	68bb      	ldr	r3, [r7, #8]
 801178a:	2b00      	cmp	r3, #0
 801178c:	d109      	bne.n	80117a2 <udp_sendto+0x42>
 801178e:	4b1d      	ldr	r3, [pc, #116]	; (8011804 <udp_sendto+0xa4>)
 8011790:	f240 2219 	movw	r2, #537	; 0x219
 8011794:	491e      	ldr	r1, [pc, #120]	; (8011810 <udp_sendto+0xb0>)
 8011796:	481d      	ldr	r0, [pc, #116]	; (801180c <udp_sendto+0xac>)
 8011798:	f005 fce6 	bl	8017168 <iprintf>
 801179c:	f06f 030f 	mvn.w	r3, #15
 80117a0:	e02b      	b.n	80117fa <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d109      	bne.n	80117bc <udp_sendto+0x5c>
 80117a8:	4b16      	ldr	r3, [pc, #88]	; (8011804 <udp_sendto+0xa4>)
 80117aa:	f240 221a 	movw	r2, #538	; 0x21a
 80117ae:	4919      	ldr	r1, [pc, #100]	; (8011814 <udp_sendto+0xb4>)
 80117b0:	4816      	ldr	r0, [pc, #88]	; (801180c <udp_sendto+0xac>)
 80117b2:	f005 fcd9 	bl	8017168 <iprintf>
 80117b6:	f06f 030f 	mvn.w	r3, #15
 80117ba:	e01e      	b.n	80117fa <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	7a1b      	ldrb	r3, [r3, #8]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d006      	beq.n	80117d2 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	7a1b      	ldrb	r3, [r3, #8]
 80117c8:	4618      	mov	r0, r3
 80117ca:	f7f9 fb6d 	bl	800aea8 <netif_get_by_index>
 80117ce:	6178      	str	r0, [r7, #20]
 80117d0:	e003      	b.n	80117da <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80117d2:	6878      	ldr	r0, [r7, #4]
 80117d4:	f003 ff4c 	bl	8015670 <ip4_route>
 80117d8:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80117da:	697b      	ldr	r3, [r7, #20]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d102      	bne.n	80117e6 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80117e0:	f06f 0303 	mvn.w	r3, #3
 80117e4:	e009      	b.n	80117fa <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80117e6:	887a      	ldrh	r2, [r7, #2]
 80117e8:	697b      	ldr	r3, [r7, #20]
 80117ea:	9300      	str	r3, [sp, #0]
 80117ec:	4613      	mov	r3, r2
 80117ee:	687a      	ldr	r2, [r7, #4]
 80117f0:	68b9      	ldr	r1, [r7, #8]
 80117f2:	68f8      	ldr	r0, [r7, #12]
 80117f4:	f000 f810 	bl	8011818 <udp_sendto_if>
 80117f8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80117fa:	4618      	mov	r0, r3
 80117fc:	3718      	adds	r7, #24
 80117fe:	46bd      	mov	sp, r7
 8011800:	bd80      	pop	{r7, pc}
 8011802:	bf00      	nop
 8011804:	0801a9d0 	.word	0x0801a9d0
 8011808:	0801aaf4 	.word	0x0801aaf4
 801180c:	0801aa24 	.word	0x0801aa24
 8011810:	0801ab0c 	.word	0x0801ab0c
 8011814:	0801ab28 	.word	0x0801ab28

08011818 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8011818:	b580      	push	{r7, lr}
 801181a:	b088      	sub	sp, #32
 801181c:	af02      	add	r7, sp, #8
 801181e:	60f8      	str	r0, [r7, #12]
 8011820:	60b9      	str	r1, [r7, #8]
 8011822:	607a      	str	r2, [r7, #4]
 8011824:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d109      	bne.n	8011840 <udp_sendto_if+0x28>
 801182c:	4b2e      	ldr	r3, [pc, #184]	; (80118e8 <udp_sendto_if+0xd0>)
 801182e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011832:	492e      	ldr	r1, [pc, #184]	; (80118ec <udp_sendto_if+0xd4>)
 8011834:	482e      	ldr	r0, [pc, #184]	; (80118f0 <udp_sendto_if+0xd8>)
 8011836:	f005 fc97 	bl	8017168 <iprintf>
 801183a:	f06f 030f 	mvn.w	r3, #15
 801183e:	e04f      	b.n	80118e0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8011840:	68bb      	ldr	r3, [r7, #8]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d109      	bne.n	801185a <udp_sendto_if+0x42>
 8011846:	4b28      	ldr	r3, [pc, #160]	; (80118e8 <udp_sendto_if+0xd0>)
 8011848:	f240 2281 	movw	r2, #641	; 0x281
 801184c:	4929      	ldr	r1, [pc, #164]	; (80118f4 <udp_sendto_if+0xdc>)
 801184e:	4828      	ldr	r0, [pc, #160]	; (80118f0 <udp_sendto_if+0xd8>)
 8011850:	f005 fc8a 	bl	8017168 <iprintf>
 8011854:	f06f 030f 	mvn.w	r3, #15
 8011858:	e042      	b.n	80118e0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d109      	bne.n	8011874 <udp_sendto_if+0x5c>
 8011860:	4b21      	ldr	r3, [pc, #132]	; (80118e8 <udp_sendto_if+0xd0>)
 8011862:	f240 2282 	movw	r2, #642	; 0x282
 8011866:	4924      	ldr	r1, [pc, #144]	; (80118f8 <udp_sendto_if+0xe0>)
 8011868:	4821      	ldr	r0, [pc, #132]	; (80118f0 <udp_sendto_if+0xd8>)
 801186a:	f005 fc7d 	bl	8017168 <iprintf>
 801186e:	f06f 030f 	mvn.w	r3, #15
 8011872:	e035      	b.n	80118e0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8011874:	6a3b      	ldr	r3, [r7, #32]
 8011876:	2b00      	cmp	r3, #0
 8011878:	d109      	bne.n	801188e <udp_sendto_if+0x76>
 801187a:	4b1b      	ldr	r3, [pc, #108]	; (80118e8 <udp_sendto_if+0xd0>)
 801187c:	f240 2283 	movw	r2, #643	; 0x283
 8011880:	491e      	ldr	r1, [pc, #120]	; (80118fc <udp_sendto_if+0xe4>)
 8011882:	481b      	ldr	r0, [pc, #108]	; (80118f0 <udp_sendto_if+0xd8>)
 8011884:	f005 fc70 	bl	8017168 <iprintf>
 8011888:	f06f 030f 	mvn.w	r3, #15
 801188c:	e028      	b.n	80118e0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d009      	beq.n	80118a8 <udp_sendto_if+0x90>
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d005      	beq.n	80118a8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80118a4:	2be0      	cmp	r3, #224	; 0xe0
 80118a6:	d103      	bne.n	80118b0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80118a8:	6a3b      	ldr	r3, [r7, #32]
 80118aa:	3304      	adds	r3, #4
 80118ac:	617b      	str	r3, [r7, #20]
 80118ae:	e00b      	b.n	80118c8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	681a      	ldr	r2, [r3, #0]
 80118b4:	6a3b      	ldr	r3, [r7, #32]
 80118b6:	3304      	adds	r3, #4
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	429a      	cmp	r2, r3
 80118bc:	d002      	beq.n	80118c4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80118be:	f06f 0303 	mvn.w	r3, #3
 80118c2:	e00d      	b.n	80118e0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80118c8:	887a      	ldrh	r2, [r7, #2]
 80118ca:	697b      	ldr	r3, [r7, #20]
 80118cc:	9301      	str	r3, [sp, #4]
 80118ce:	6a3b      	ldr	r3, [r7, #32]
 80118d0:	9300      	str	r3, [sp, #0]
 80118d2:	4613      	mov	r3, r2
 80118d4:	687a      	ldr	r2, [r7, #4]
 80118d6:	68b9      	ldr	r1, [r7, #8]
 80118d8:	68f8      	ldr	r0, [r7, #12]
 80118da:	f000 f811 	bl	8011900 <udp_sendto_if_src>
 80118de:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80118e0:	4618      	mov	r0, r3
 80118e2:	3718      	adds	r7, #24
 80118e4:	46bd      	mov	sp, r7
 80118e6:	bd80      	pop	{r7, pc}
 80118e8:	0801a9d0 	.word	0x0801a9d0
 80118ec:	0801ab44 	.word	0x0801ab44
 80118f0:	0801aa24 	.word	0x0801aa24
 80118f4:	0801ab60 	.word	0x0801ab60
 80118f8:	0801ab7c 	.word	0x0801ab7c
 80118fc:	0801ab9c 	.word	0x0801ab9c

08011900 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8011900:	b580      	push	{r7, lr}
 8011902:	b08c      	sub	sp, #48	; 0x30
 8011904:	af04      	add	r7, sp, #16
 8011906:	60f8      	str	r0, [r7, #12]
 8011908:	60b9      	str	r1, [r7, #8]
 801190a:	607a      	str	r2, [r7, #4]
 801190c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	2b00      	cmp	r3, #0
 8011912:	d109      	bne.n	8011928 <udp_sendto_if_src+0x28>
 8011914:	4b65      	ldr	r3, [pc, #404]	; (8011aac <udp_sendto_if_src+0x1ac>)
 8011916:	f240 22d1 	movw	r2, #721	; 0x2d1
 801191a:	4965      	ldr	r1, [pc, #404]	; (8011ab0 <udp_sendto_if_src+0x1b0>)
 801191c:	4865      	ldr	r0, [pc, #404]	; (8011ab4 <udp_sendto_if_src+0x1b4>)
 801191e:	f005 fc23 	bl	8017168 <iprintf>
 8011922:	f06f 030f 	mvn.w	r3, #15
 8011926:	e0bc      	b.n	8011aa2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8011928:	68bb      	ldr	r3, [r7, #8]
 801192a:	2b00      	cmp	r3, #0
 801192c:	d109      	bne.n	8011942 <udp_sendto_if_src+0x42>
 801192e:	4b5f      	ldr	r3, [pc, #380]	; (8011aac <udp_sendto_if_src+0x1ac>)
 8011930:	f240 22d2 	movw	r2, #722	; 0x2d2
 8011934:	4960      	ldr	r1, [pc, #384]	; (8011ab8 <udp_sendto_if_src+0x1b8>)
 8011936:	485f      	ldr	r0, [pc, #380]	; (8011ab4 <udp_sendto_if_src+0x1b4>)
 8011938:	f005 fc16 	bl	8017168 <iprintf>
 801193c:	f06f 030f 	mvn.w	r3, #15
 8011940:	e0af      	b.n	8011aa2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d109      	bne.n	801195c <udp_sendto_if_src+0x5c>
 8011948:	4b58      	ldr	r3, [pc, #352]	; (8011aac <udp_sendto_if_src+0x1ac>)
 801194a:	f240 22d3 	movw	r2, #723	; 0x2d3
 801194e:	495b      	ldr	r1, [pc, #364]	; (8011abc <udp_sendto_if_src+0x1bc>)
 8011950:	4858      	ldr	r0, [pc, #352]	; (8011ab4 <udp_sendto_if_src+0x1b4>)
 8011952:	f005 fc09 	bl	8017168 <iprintf>
 8011956:	f06f 030f 	mvn.w	r3, #15
 801195a:	e0a2      	b.n	8011aa2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801195c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801195e:	2b00      	cmp	r3, #0
 8011960:	d109      	bne.n	8011976 <udp_sendto_if_src+0x76>
 8011962:	4b52      	ldr	r3, [pc, #328]	; (8011aac <udp_sendto_if_src+0x1ac>)
 8011964:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8011968:	4955      	ldr	r1, [pc, #340]	; (8011ac0 <udp_sendto_if_src+0x1c0>)
 801196a:	4852      	ldr	r0, [pc, #328]	; (8011ab4 <udp_sendto_if_src+0x1b4>)
 801196c:	f005 fbfc 	bl	8017168 <iprintf>
 8011970:	f06f 030f 	mvn.w	r3, #15
 8011974:	e095      	b.n	8011aa2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8011976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011978:	2b00      	cmp	r3, #0
 801197a:	d109      	bne.n	8011990 <udp_sendto_if_src+0x90>
 801197c:	4b4b      	ldr	r3, [pc, #300]	; (8011aac <udp_sendto_if_src+0x1ac>)
 801197e:	f240 22d5 	movw	r2, #725	; 0x2d5
 8011982:	4950      	ldr	r1, [pc, #320]	; (8011ac4 <udp_sendto_if_src+0x1c4>)
 8011984:	484b      	ldr	r0, [pc, #300]	; (8011ab4 <udp_sendto_if_src+0x1b4>)
 8011986:	f005 fbef 	bl	8017168 <iprintf>
 801198a:	f06f 030f 	mvn.w	r3, #15
 801198e:	e088      	b.n	8011aa2 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	8a5b      	ldrh	r3, [r3, #18]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d10f      	bne.n	80119b8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011998:	68f9      	ldr	r1, [r7, #12]
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	8a5b      	ldrh	r3, [r3, #18]
 801199e:	461a      	mov	r2, r3
 80119a0:	68f8      	ldr	r0, [r7, #12]
 80119a2:	f000 f893 	bl	8011acc <udp_bind>
 80119a6:	4603      	mov	r3, r0
 80119a8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80119aa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d002      	beq.n	80119b8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80119b2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80119b6:	e074      	b.n	8011aa2 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80119b8:	68bb      	ldr	r3, [r7, #8]
 80119ba:	891b      	ldrh	r3, [r3, #8]
 80119bc:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80119c0:	4293      	cmp	r3, r2
 80119c2:	d902      	bls.n	80119ca <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80119c4:	f04f 33ff 	mov.w	r3, #4294967295
 80119c8:	e06b      	b.n	8011aa2 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80119ca:	2108      	movs	r1, #8
 80119cc:	68b8      	ldr	r0, [r7, #8]
 80119ce:	f7f9 fd63 	bl	800b498 <pbuf_add_header>
 80119d2:	4603      	mov	r3, r0
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d015      	beq.n	8011a04 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80119d8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80119dc:	2108      	movs	r1, #8
 80119de:	2022      	movs	r0, #34	; 0x22
 80119e0:	f7f9 fb0c 	bl	800affc <pbuf_alloc>
 80119e4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80119e6:	69fb      	ldr	r3, [r7, #28]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d102      	bne.n	80119f2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80119ec:	f04f 33ff 	mov.w	r3, #4294967295
 80119f0:	e057      	b.n	8011aa2 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80119f2:	68bb      	ldr	r3, [r7, #8]
 80119f4:	891b      	ldrh	r3, [r3, #8]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d006      	beq.n	8011a08 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80119fa:	68b9      	ldr	r1, [r7, #8]
 80119fc:	69f8      	ldr	r0, [r7, #28]
 80119fe:	f7f9 ff05 	bl	800b80c <pbuf_chain>
 8011a02:	e001      	b.n	8011a08 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8011a04:	68bb      	ldr	r3, [r7, #8]
 8011a06:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8011a08:	69fb      	ldr	r3, [r7, #28]
 8011a0a:	895b      	ldrh	r3, [r3, #10]
 8011a0c:	2b07      	cmp	r3, #7
 8011a0e:	d806      	bhi.n	8011a1e <udp_sendto_if_src+0x11e>
 8011a10:	4b26      	ldr	r3, [pc, #152]	; (8011aac <udp_sendto_if_src+0x1ac>)
 8011a12:	f240 320d 	movw	r2, #781	; 0x30d
 8011a16:	492c      	ldr	r1, [pc, #176]	; (8011ac8 <udp_sendto_if_src+0x1c8>)
 8011a18:	4826      	ldr	r0, [pc, #152]	; (8011ab4 <udp_sendto_if_src+0x1b4>)
 8011a1a:	f005 fba5 	bl	8017168 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8011a1e:	69fb      	ldr	r3, [r7, #28]
 8011a20:	685b      	ldr	r3, [r3, #4]
 8011a22:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	8a5b      	ldrh	r3, [r3, #18]
 8011a28:	4618      	mov	r0, r3
 8011a2a:	f7f7 fde9 	bl	8009600 <lwip_htons>
 8011a2e:	4603      	mov	r3, r0
 8011a30:	461a      	mov	r2, r3
 8011a32:	697b      	ldr	r3, [r7, #20]
 8011a34:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8011a36:	887b      	ldrh	r3, [r7, #2]
 8011a38:	4618      	mov	r0, r3
 8011a3a:	f7f7 fde1 	bl	8009600 <lwip_htons>
 8011a3e:	4603      	mov	r3, r0
 8011a40:	461a      	mov	r2, r3
 8011a42:	697b      	ldr	r3, [r7, #20]
 8011a44:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8011a46:	697b      	ldr	r3, [r7, #20]
 8011a48:	2200      	movs	r2, #0
 8011a4a:	719a      	strb	r2, [r3, #6]
 8011a4c:	2200      	movs	r2, #0
 8011a4e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8011a50:	69fb      	ldr	r3, [r7, #28]
 8011a52:	891b      	ldrh	r3, [r3, #8]
 8011a54:	4618      	mov	r0, r3
 8011a56:	f7f7 fdd3 	bl	8009600 <lwip_htons>
 8011a5a:	4603      	mov	r3, r0
 8011a5c:	461a      	mov	r2, r3
 8011a5e:	697b      	ldr	r3, [r7, #20]
 8011a60:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8011a62:	2311      	movs	r3, #17
 8011a64:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	7adb      	ldrb	r3, [r3, #11]
 8011a6a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	7a9b      	ldrb	r3, [r3, #10]
 8011a70:	7cb9      	ldrb	r1, [r7, #18]
 8011a72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011a74:	9202      	str	r2, [sp, #8]
 8011a76:	7cfa      	ldrb	r2, [r7, #19]
 8011a78:	9201      	str	r2, [sp, #4]
 8011a7a:	9300      	str	r3, [sp, #0]
 8011a7c:	460b      	mov	r3, r1
 8011a7e:	687a      	ldr	r2, [r7, #4]
 8011a80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011a82:	69f8      	ldr	r0, [r7, #28]
 8011a84:	f004 f8e0 	bl	8015c48 <ip4_output_if_src>
 8011a88:	4603      	mov	r3, r0
 8011a8a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8011a8c:	69fa      	ldr	r2, [r7, #28]
 8011a8e:	68bb      	ldr	r3, [r7, #8]
 8011a90:	429a      	cmp	r2, r3
 8011a92:	d004      	beq.n	8011a9e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8011a94:	69f8      	ldr	r0, [r7, #28]
 8011a96:	f7f9 fd95 	bl	800b5c4 <pbuf_free>
    q = NULL;
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8011a9e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	3720      	adds	r7, #32
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	bd80      	pop	{r7, pc}
 8011aaa:	bf00      	nop
 8011aac:	0801a9d0 	.word	0x0801a9d0
 8011ab0:	0801abbc 	.word	0x0801abbc
 8011ab4:	0801aa24 	.word	0x0801aa24
 8011ab8:	0801abdc 	.word	0x0801abdc
 8011abc:	0801abfc 	.word	0x0801abfc
 8011ac0:	0801ac20 	.word	0x0801ac20
 8011ac4:	0801ac44 	.word	0x0801ac44
 8011ac8:	0801ac68 	.word	0x0801ac68

08011acc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011acc:	b580      	push	{r7, lr}
 8011ace:	b086      	sub	sp, #24
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	60f8      	str	r0, [r7, #12]
 8011ad4:	60b9      	str	r1, [r7, #8]
 8011ad6:	4613      	mov	r3, r2
 8011ad8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011ada:	68bb      	ldr	r3, [r7, #8]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d101      	bne.n	8011ae4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8011ae0:	4b39      	ldr	r3, [pc, #228]	; (8011bc8 <udp_bind+0xfc>)
 8011ae2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d109      	bne.n	8011afe <udp_bind+0x32>
 8011aea:	4b38      	ldr	r3, [pc, #224]	; (8011bcc <udp_bind+0x100>)
 8011aec:	f240 32b7 	movw	r2, #951	; 0x3b7
 8011af0:	4937      	ldr	r1, [pc, #220]	; (8011bd0 <udp_bind+0x104>)
 8011af2:	4838      	ldr	r0, [pc, #224]	; (8011bd4 <udp_bind+0x108>)
 8011af4:	f005 fb38 	bl	8017168 <iprintf>
 8011af8:	f06f 030f 	mvn.w	r3, #15
 8011afc:	e060      	b.n	8011bc0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8011afe:	2300      	movs	r3, #0
 8011b00:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011b02:	4b35      	ldr	r3, [pc, #212]	; (8011bd8 <udp_bind+0x10c>)
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	617b      	str	r3, [r7, #20]
 8011b08:	e009      	b.n	8011b1e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8011b0a:	68fa      	ldr	r2, [r7, #12]
 8011b0c:	697b      	ldr	r3, [r7, #20]
 8011b0e:	429a      	cmp	r2, r3
 8011b10:	d102      	bne.n	8011b18 <udp_bind+0x4c>
      rebind = 1;
 8011b12:	2301      	movs	r3, #1
 8011b14:	74fb      	strb	r3, [r7, #19]
      break;
 8011b16:	e005      	b.n	8011b24 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011b18:	697b      	ldr	r3, [r7, #20]
 8011b1a:	68db      	ldr	r3, [r3, #12]
 8011b1c:	617b      	str	r3, [r7, #20]
 8011b1e:	697b      	ldr	r3, [r7, #20]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d1f2      	bne.n	8011b0a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8011b24:	88fb      	ldrh	r3, [r7, #6]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d109      	bne.n	8011b3e <udp_bind+0x72>
    port = udp_new_port();
 8011b2a:	f7ff fc69 	bl	8011400 <udp_new_port>
 8011b2e:	4603      	mov	r3, r0
 8011b30:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8011b32:	88fb      	ldrh	r3, [r7, #6]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d12c      	bne.n	8011b92 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8011b38:	f06f 0307 	mvn.w	r3, #7
 8011b3c:	e040      	b.n	8011bc0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011b3e:	4b26      	ldr	r3, [pc, #152]	; (8011bd8 <udp_bind+0x10c>)
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	617b      	str	r3, [r7, #20]
 8011b44:	e022      	b.n	8011b8c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8011b46:	68fa      	ldr	r2, [r7, #12]
 8011b48:	697b      	ldr	r3, [r7, #20]
 8011b4a:	429a      	cmp	r2, r3
 8011b4c:	d01b      	beq.n	8011b86 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8011b4e:	697b      	ldr	r3, [r7, #20]
 8011b50:	8a5b      	ldrh	r3, [r3, #18]
 8011b52:	88fa      	ldrh	r2, [r7, #6]
 8011b54:	429a      	cmp	r2, r3
 8011b56:	d116      	bne.n	8011b86 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011b58:	697b      	ldr	r3, [r7, #20]
 8011b5a:	681a      	ldr	r2, [r3, #0]
 8011b5c:	68bb      	ldr	r3, [r7, #8]
 8011b5e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8011b60:	429a      	cmp	r2, r3
 8011b62:	d00d      	beq.n	8011b80 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011b64:	68bb      	ldr	r3, [r7, #8]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d00a      	beq.n	8011b80 <udp_bind+0xb4>
 8011b6a:	68bb      	ldr	r3, [r7, #8]
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d006      	beq.n	8011b80 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011b72:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d003      	beq.n	8011b80 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011b78:	697b      	ldr	r3, [r7, #20]
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d102      	bne.n	8011b86 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8011b80:	f06f 0307 	mvn.w	r3, #7
 8011b84:	e01c      	b.n	8011bc0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011b86:	697b      	ldr	r3, [r7, #20]
 8011b88:	68db      	ldr	r3, [r3, #12]
 8011b8a:	617b      	str	r3, [r7, #20]
 8011b8c:	697b      	ldr	r3, [r7, #20]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d1d9      	bne.n	8011b46 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8011b92:	68bb      	ldr	r3, [r7, #8]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d002      	beq.n	8011b9e <udp_bind+0xd2>
 8011b98:	68bb      	ldr	r3, [r7, #8]
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	e000      	b.n	8011ba0 <udp_bind+0xd4>
 8011b9e:	2300      	movs	r3, #0
 8011ba0:	68fa      	ldr	r2, [r7, #12]
 8011ba2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	88fa      	ldrh	r2, [r7, #6]
 8011ba8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8011baa:	7cfb      	ldrb	r3, [r7, #19]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d106      	bne.n	8011bbe <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8011bb0:	4b09      	ldr	r3, [pc, #36]	; (8011bd8 <udp_bind+0x10c>)
 8011bb2:	681a      	ldr	r2, [r3, #0]
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8011bb8:	4a07      	ldr	r2, [pc, #28]	; (8011bd8 <udp_bind+0x10c>)
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8011bbe:	2300      	movs	r3, #0
}
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	3718      	adds	r7, #24
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	bd80      	pop	{r7, pc}
 8011bc8:	0801d628 	.word	0x0801d628
 8011bcc:	0801a9d0 	.word	0x0801a9d0
 8011bd0:	0801ac98 	.word	0x0801ac98
 8011bd4:	0801aa24 	.word	0x0801aa24
 8011bd8:	2000da48 	.word	0x2000da48

08011bdc <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b086      	sub	sp, #24
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	60f8      	str	r0, [r7, #12]
 8011be4:	60b9      	str	r1, [r7, #8]
 8011be6:	4613      	mov	r3, r2
 8011be8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d109      	bne.n	8011c04 <udp_connect+0x28>
 8011bf0:	4b2c      	ldr	r3, [pc, #176]	; (8011ca4 <udp_connect+0xc8>)
 8011bf2:	f240 4235 	movw	r2, #1077	; 0x435
 8011bf6:	492c      	ldr	r1, [pc, #176]	; (8011ca8 <udp_connect+0xcc>)
 8011bf8:	482c      	ldr	r0, [pc, #176]	; (8011cac <udp_connect+0xd0>)
 8011bfa:	f005 fab5 	bl	8017168 <iprintf>
 8011bfe:	f06f 030f 	mvn.w	r3, #15
 8011c02:	e04b      	b.n	8011c9c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8011c04:	68bb      	ldr	r3, [r7, #8]
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d109      	bne.n	8011c1e <udp_connect+0x42>
 8011c0a:	4b26      	ldr	r3, [pc, #152]	; (8011ca4 <udp_connect+0xc8>)
 8011c0c:	f240 4236 	movw	r2, #1078	; 0x436
 8011c10:	4927      	ldr	r1, [pc, #156]	; (8011cb0 <udp_connect+0xd4>)
 8011c12:	4826      	ldr	r0, [pc, #152]	; (8011cac <udp_connect+0xd0>)
 8011c14:	f005 faa8 	bl	8017168 <iprintf>
 8011c18:	f06f 030f 	mvn.w	r3, #15
 8011c1c:	e03e      	b.n	8011c9c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	8a5b      	ldrh	r3, [r3, #18]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d10f      	bne.n	8011c46 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011c26:	68f9      	ldr	r1, [r7, #12]
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	8a5b      	ldrh	r3, [r3, #18]
 8011c2c:	461a      	mov	r2, r3
 8011c2e:	68f8      	ldr	r0, [r7, #12]
 8011c30:	f7ff ff4c 	bl	8011acc <udp_bind>
 8011c34:	4603      	mov	r3, r0
 8011c36:	75fb      	strb	r3, [r7, #23]
    if (err != ERR_OK) {
 8011c38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d002      	beq.n	8011c46 <udp_connect+0x6a>
      return err;
 8011c40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011c44:	e02a      	b.n	8011c9c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8011c46:	68bb      	ldr	r3, [r7, #8]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d002      	beq.n	8011c52 <udp_connect+0x76>
 8011c4c:	68bb      	ldr	r3, [r7, #8]
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	e000      	b.n	8011c54 <udp_connect+0x78>
 8011c52:	2300      	movs	r3, #0
 8011c54:	68fa      	ldr	r2, [r7, #12]
 8011c56:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	88fa      	ldrh	r2, [r7, #6]
 8011c5c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	7c1b      	ldrb	r3, [r3, #16]
 8011c62:	f043 0304 	orr.w	r3, r3, #4
 8011c66:	b2da      	uxtb	r2, r3
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011c6c:	4b11      	ldr	r3, [pc, #68]	; (8011cb4 <udp_connect+0xd8>)
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	613b      	str	r3, [r7, #16]
 8011c72:	e008      	b.n	8011c86 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8011c74:	68fa      	ldr	r2, [r7, #12]
 8011c76:	693b      	ldr	r3, [r7, #16]
 8011c78:	429a      	cmp	r2, r3
 8011c7a:	d101      	bne.n	8011c80 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	e00d      	b.n	8011c9c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011c80:	693b      	ldr	r3, [r7, #16]
 8011c82:	68db      	ldr	r3, [r3, #12]
 8011c84:	613b      	str	r3, [r7, #16]
 8011c86:	693b      	ldr	r3, [r7, #16]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d1f3      	bne.n	8011c74 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8011c8c:	4b09      	ldr	r3, [pc, #36]	; (8011cb4 <udp_connect+0xd8>)
 8011c8e:	681a      	ldr	r2, [r3, #0]
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8011c94:	4a07      	ldr	r2, [pc, #28]	; (8011cb4 <udp_connect+0xd8>)
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8011c9a:	2300      	movs	r3, #0
}
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	3718      	adds	r7, #24
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	bd80      	pop	{r7, pc}
 8011ca4:	0801a9d0 	.word	0x0801a9d0
 8011ca8:	0801acb0 	.word	0x0801acb0
 8011cac:	0801aa24 	.word	0x0801aa24
 8011cb0:	0801accc 	.word	0x0801accc
 8011cb4:	2000da48 	.word	0x2000da48

08011cb8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8011cb8:	b580      	push	{r7, lr}
 8011cba:	b084      	sub	sp, #16
 8011cbc:	af00      	add	r7, sp, #0
 8011cbe:	60f8      	str	r0, [r7, #12]
 8011cc0:	60b9      	str	r1, [r7, #8]
 8011cc2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d107      	bne.n	8011cda <udp_recv+0x22>
 8011cca:	4b08      	ldr	r3, [pc, #32]	; (8011cec <udp_recv+0x34>)
 8011ccc:	f240 428a 	movw	r2, #1162	; 0x48a
 8011cd0:	4907      	ldr	r1, [pc, #28]	; (8011cf0 <udp_recv+0x38>)
 8011cd2:	4808      	ldr	r0, [pc, #32]	; (8011cf4 <udp_recv+0x3c>)
 8011cd4:	f005 fa48 	bl	8017168 <iprintf>
 8011cd8:	e005      	b.n	8011ce6 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	68ba      	ldr	r2, [r7, #8]
 8011cde:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	687a      	ldr	r2, [r7, #4]
 8011ce4:	61da      	str	r2, [r3, #28]
}
 8011ce6:	3710      	adds	r7, #16
 8011ce8:	46bd      	mov	sp, r7
 8011cea:	bd80      	pop	{r7, pc}
 8011cec:	0801a9d0 	.word	0x0801a9d0
 8011cf0:	0801ad04 	.word	0x0801ad04
 8011cf4:	0801aa24 	.word	0x0801aa24

08011cf8 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8011cf8:	b580      	push	{r7, lr}
 8011cfa:	b084      	sub	sp, #16
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d107      	bne.n	8011d16 <udp_remove+0x1e>
 8011d06:	4b19      	ldr	r3, [pc, #100]	; (8011d6c <udp_remove+0x74>)
 8011d08:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8011d0c:	4918      	ldr	r1, [pc, #96]	; (8011d70 <udp_remove+0x78>)
 8011d0e:	4819      	ldr	r0, [pc, #100]	; (8011d74 <udp_remove+0x7c>)
 8011d10:	f005 fa2a 	bl	8017168 <iprintf>
 8011d14:	e026      	b.n	8011d64 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8011d16:	4b18      	ldr	r3, [pc, #96]	; (8011d78 <udp_remove+0x80>)
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	687a      	ldr	r2, [r7, #4]
 8011d1c:	429a      	cmp	r2, r3
 8011d1e:	d105      	bne.n	8011d2c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8011d20:	4b15      	ldr	r3, [pc, #84]	; (8011d78 <udp_remove+0x80>)
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	68db      	ldr	r3, [r3, #12]
 8011d26:	4a14      	ldr	r2, [pc, #80]	; (8011d78 <udp_remove+0x80>)
 8011d28:	6013      	str	r3, [r2, #0]
 8011d2a:	e017      	b.n	8011d5c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011d2c:	4b12      	ldr	r3, [pc, #72]	; (8011d78 <udp_remove+0x80>)
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	60fb      	str	r3, [r7, #12]
 8011d32:	e010      	b.n	8011d56 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	68db      	ldr	r3, [r3, #12]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d009      	beq.n	8011d50 <udp_remove+0x58>
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	68db      	ldr	r3, [r3, #12]
 8011d40:	687a      	ldr	r2, [r7, #4]
 8011d42:	429a      	cmp	r2, r3
 8011d44:	d104      	bne.n	8011d50 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	68da      	ldr	r2, [r3, #12]
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	60da      	str	r2, [r3, #12]
        break;
 8011d4e:	e005      	b.n	8011d5c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	68db      	ldr	r3, [r3, #12]
 8011d54:	60fb      	str	r3, [r7, #12]
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d1eb      	bne.n	8011d34 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8011d5c:	6879      	ldr	r1, [r7, #4]
 8011d5e:	2000      	movs	r0, #0
 8011d60:	f7f8 fc8a 	bl	800a678 <memp_free>
}
 8011d64:	3710      	adds	r7, #16
 8011d66:	46bd      	mov	sp, r7
 8011d68:	bd80      	pop	{r7, pc}
 8011d6a:	bf00      	nop
 8011d6c:	0801a9d0 	.word	0x0801a9d0
 8011d70:	0801ad1c 	.word	0x0801ad1c
 8011d74:	0801aa24 	.word	0x0801aa24
 8011d78:	2000da48 	.word	0x2000da48

08011d7c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	b082      	sub	sp, #8
 8011d80:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8011d82:	2000      	movs	r0, #0
 8011d84:	f7f8 fc02 	bl	800a58c <memp_malloc>
 8011d88:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d007      	beq.n	8011da0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8011d90:	2220      	movs	r2, #32
 8011d92:	2100      	movs	r1, #0
 8011d94:	6878      	ldr	r0, [r7, #4]
 8011d96:	f005 f9df 	bl	8017158 <memset>
    pcb->ttl = UDP_TTL;
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	22ff      	movs	r2, #255	; 0xff
 8011d9e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8011da0:	687b      	ldr	r3, [r7, #4]
}
 8011da2:	4618      	mov	r0, r3
 8011da4:	3708      	adds	r7, #8
 8011da6:	46bd      	mov	sp, r7
 8011da8:	bd80      	pop	{r7, pc}
	...

08011dac <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011dac:	b480      	push	{r7}
 8011dae:	b085      	sub	sp, #20
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	6078      	str	r0, [r7, #4]
 8011db4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d01e      	beq.n	8011dfa <udp_netif_ip_addr_changed+0x4e>
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d01a      	beq.n	8011dfa <udp_netif_ip_addr_changed+0x4e>
 8011dc4:	683b      	ldr	r3, [r7, #0]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d017      	beq.n	8011dfa <udp_netif_ip_addr_changed+0x4e>
 8011dca:	683b      	ldr	r3, [r7, #0]
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d013      	beq.n	8011dfa <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011dd2:	4b0d      	ldr	r3, [pc, #52]	; (8011e08 <udp_netif_ip_addr_changed+0x5c>)
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	60fb      	str	r3, [r7, #12]
 8011dd8:	e00c      	b.n	8011df4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	681a      	ldr	r2, [r3, #0]
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	429a      	cmp	r2, r3
 8011de4:	d103      	bne.n	8011dee <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8011de6:	683b      	ldr	r3, [r7, #0]
 8011de8:	681a      	ldr	r2, [r3, #0]
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	68db      	ldr	r3, [r3, #12]
 8011df2:	60fb      	str	r3, [r7, #12]
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d1ef      	bne.n	8011dda <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8011dfa:	bf00      	nop
 8011dfc:	3714      	adds	r7, #20
 8011dfe:	46bd      	mov	sp, r7
 8011e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e04:	4770      	bx	lr
 8011e06:	bf00      	nop
 8011e08:	2000da48 	.word	0x2000da48

08011e0c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8011e10:	4b20      	ldr	r3, [pc, #128]	; (8011e94 <dhcp_inc_pcb_refcount+0x88>)
 8011e12:	781b      	ldrb	r3, [r3, #0]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d133      	bne.n	8011e80 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8011e18:	4b1f      	ldr	r3, [pc, #124]	; (8011e98 <dhcp_inc_pcb_refcount+0x8c>)
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d005      	beq.n	8011e2c <dhcp_inc_pcb_refcount+0x20>
 8011e20:	4b1e      	ldr	r3, [pc, #120]	; (8011e9c <dhcp_inc_pcb_refcount+0x90>)
 8011e22:	22e5      	movs	r2, #229	; 0xe5
 8011e24:	491e      	ldr	r1, [pc, #120]	; (8011ea0 <dhcp_inc_pcb_refcount+0x94>)
 8011e26:	481f      	ldr	r0, [pc, #124]	; (8011ea4 <dhcp_inc_pcb_refcount+0x98>)
 8011e28:	f005 f99e 	bl	8017168 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8011e2c:	f7ff ffa6 	bl	8011d7c <udp_new>
 8011e30:	4603      	mov	r3, r0
 8011e32:	4a19      	ldr	r2, [pc, #100]	; (8011e98 <dhcp_inc_pcb_refcount+0x8c>)
 8011e34:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8011e36:	4b18      	ldr	r3, [pc, #96]	; (8011e98 <dhcp_inc_pcb_refcount+0x8c>)
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d102      	bne.n	8011e44 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8011e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8011e42:	e024      	b.n	8011e8e <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8011e44:	4b14      	ldr	r3, [pc, #80]	; (8011e98 <dhcp_inc_pcb_refcount+0x8c>)
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	7a5a      	ldrb	r2, [r3, #9]
 8011e4a:	4b13      	ldr	r3, [pc, #76]	; (8011e98 <dhcp_inc_pcb_refcount+0x8c>)
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	f042 0220 	orr.w	r2, r2, #32
 8011e52:	b2d2      	uxtb	r2, r2
 8011e54:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8011e56:	4b10      	ldr	r3, [pc, #64]	; (8011e98 <dhcp_inc_pcb_refcount+0x8c>)
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	2244      	movs	r2, #68	; 0x44
 8011e5c:	4912      	ldr	r1, [pc, #72]	; (8011ea8 <dhcp_inc_pcb_refcount+0x9c>)
 8011e5e:	4618      	mov	r0, r3
 8011e60:	f7ff fe34 	bl	8011acc <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8011e64:	4b0c      	ldr	r3, [pc, #48]	; (8011e98 <dhcp_inc_pcb_refcount+0x8c>)
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	2243      	movs	r2, #67	; 0x43
 8011e6a:	490f      	ldr	r1, [pc, #60]	; (8011ea8 <dhcp_inc_pcb_refcount+0x9c>)
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	f7ff feb5 	bl	8011bdc <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8011e72:	4b09      	ldr	r3, [pc, #36]	; (8011e98 <dhcp_inc_pcb_refcount+0x8c>)
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	2200      	movs	r2, #0
 8011e78:	490c      	ldr	r1, [pc, #48]	; (8011eac <dhcp_inc_pcb_refcount+0xa0>)
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	f7ff ff1c 	bl	8011cb8 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8011e80:	4b04      	ldr	r3, [pc, #16]	; (8011e94 <dhcp_inc_pcb_refcount+0x88>)
 8011e82:	781b      	ldrb	r3, [r3, #0]
 8011e84:	3301      	adds	r3, #1
 8011e86:	b2da      	uxtb	r2, r3
 8011e88:	4b02      	ldr	r3, [pc, #8]	; (8011e94 <dhcp_inc_pcb_refcount+0x88>)
 8011e8a:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8011e8c:	2300      	movs	r3, #0
}
 8011e8e:	4618      	mov	r0, r3
 8011e90:	bd80      	pop	{r7, pc}
 8011e92:	bf00      	nop
 8011e94:	2000da84 	.word	0x2000da84
 8011e98:	2000da80 	.word	0x2000da80
 8011e9c:	0801ad34 	.word	0x0801ad34
 8011ea0:	0801ad6c 	.word	0x0801ad6c
 8011ea4:	0801ad94 	.word	0x0801ad94
 8011ea8:	0801d628 	.word	0x0801d628
 8011eac:	08013bf1 	.word	0x08013bf1

08011eb0 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8011eb4:	4b0e      	ldr	r3, [pc, #56]	; (8011ef0 <dhcp_dec_pcb_refcount+0x40>)
 8011eb6:	781b      	ldrb	r3, [r3, #0]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d105      	bne.n	8011ec8 <dhcp_dec_pcb_refcount+0x18>
 8011ebc:	4b0d      	ldr	r3, [pc, #52]	; (8011ef4 <dhcp_dec_pcb_refcount+0x44>)
 8011ebe:	22ff      	movs	r2, #255	; 0xff
 8011ec0:	490d      	ldr	r1, [pc, #52]	; (8011ef8 <dhcp_dec_pcb_refcount+0x48>)
 8011ec2:	480e      	ldr	r0, [pc, #56]	; (8011efc <dhcp_dec_pcb_refcount+0x4c>)
 8011ec4:	f005 f950 	bl	8017168 <iprintf>
  dhcp_pcb_refcount--;
 8011ec8:	4b09      	ldr	r3, [pc, #36]	; (8011ef0 <dhcp_dec_pcb_refcount+0x40>)
 8011eca:	781b      	ldrb	r3, [r3, #0]
 8011ecc:	3b01      	subs	r3, #1
 8011ece:	b2da      	uxtb	r2, r3
 8011ed0:	4b07      	ldr	r3, [pc, #28]	; (8011ef0 <dhcp_dec_pcb_refcount+0x40>)
 8011ed2:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8011ed4:	4b06      	ldr	r3, [pc, #24]	; (8011ef0 <dhcp_dec_pcb_refcount+0x40>)
 8011ed6:	781b      	ldrb	r3, [r3, #0]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d107      	bne.n	8011eec <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8011edc:	4b08      	ldr	r3, [pc, #32]	; (8011f00 <dhcp_dec_pcb_refcount+0x50>)
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	f7ff ff09 	bl	8011cf8 <udp_remove>
    dhcp_pcb = NULL;
 8011ee6:	4b06      	ldr	r3, [pc, #24]	; (8011f00 <dhcp_dec_pcb_refcount+0x50>)
 8011ee8:	2200      	movs	r2, #0
 8011eea:	601a      	str	r2, [r3, #0]
  }
}
 8011eec:	bf00      	nop
 8011eee:	bd80      	pop	{r7, pc}
 8011ef0:	2000da84 	.word	0x2000da84
 8011ef4:	0801ad34 	.word	0x0801ad34
 8011ef8:	0801adbc 	.word	0x0801adbc
 8011efc:	0801ad94 	.word	0x0801ad94
 8011f00:	2000da80 	.word	0x2000da80

08011f04 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8011f04:	b580      	push	{r7, lr}
 8011f06:	b086      	sub	sp, #24
 8011f08:	af02      	add	r7, sp, #8
 8011f0a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f10:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8011f18:	461a      	mov	r2, r3
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8011f20:	4619      	mov	r1, r3
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011f28:	9300      	str	r3, [sp, #0]
 8011f2a:	460b      	mov	r3, r1
 8011f2c:	6879      	ldr	r1, [r7, #4]
 8011f2e:	480a      	ldr	r0, [pc, #40]	; (8011f58 <dhcp_handle_nak+0x54>)
 8011f30:	f005 f91a 	bl	8017168 <iprintf>
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8011f34:	210c      	movs	r1, #12
 8011f36:	68f8      	ldr	r0, [r7, #12]
 8011f38:	f001 fa4e 	bl	80133d8 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8011f3c:	4b07      	ldr	r3, [pc, #28]	; (8011f5c <dhcp_handle_nak+0x58>)
 8011f3e:	4a07      	ldr	r2, [pc, #28]	; (8011f5c <dhcp_handle_nak+0x58>)
 8011f40:	4906      	ldr	r1, [pc, #24]	; (8011f5c <dhcp_handle_nak+0x58>)
 8011f42:	6878      	ldr	r0, [r7, #4]
 8011f44:	f7f8 fe1c 	bl	800ab80 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8011f48:	6878      	ldr	r0, [r7, #4]
 8011f4a:	f000 fd75 	bl	8012a38 <dhcp_discover>
}
 8011f4e:	bf00      	nop
 8011f50:	3710      	adds	r7, #16
 8011f52:	46bd      	mov	sp, r7
 8011f54:	bd80      	pop	{r7, pc}
 8011f56:	bf00      	nop
 8011f58:	0801ade0 	.word	0x0801ade0
 8011f5c:	0801d628 	.word	0x0801d628

08011f60 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b084      	sub	sp, #16
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f6c:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8011f74:	461a      	mov	r2, r3
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8011f7c:	6879      	ldr	r1, [r7, #4]
 8011f7e:	481c      	ldr	r0, [pc, #112]	; (8011ff0 <dhcp_check+0x90>)
 8011f80:	f005 f8f2 	bl	8017168 <iprintf>
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8011f84:	2108      	movs	r1, #8
 8011f86:	68f8      	ldr	r0, [r7, #12]
 8011f88:	f001 fa26 	bl	80133d8 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	331c      	adds	r3, #28
 8011f90:	2200      	movs	r2, #0
 8011f92:	4619      	mov	r1, r3
 8011f94:	6878      	ldr	r0, [r7, #4]
 8011f96:	f002 ff17 	bl	8014dc8 <etharp_query>
 8011f9a:	4603      	mov	r3, r0
 8011f9c:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8011f9e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d002      	beq.n	8011fac <dhcp_check+0x4c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
 8011fa6:	4813      	ldr	r0, [pc, #76]	; (8011ff4 <dhcp_check+0x94>)
 8011fa8:	f005 f97a 	bl	80172a0 <puts>
  }
  if (dhcp->tries < 255) {
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	799b      	ldrb	r3, [r3, #6]
 8011fb0:	2bff      	cmp	r3, #255	; 0xff
 8011fb2:	d005      	beq.n	8011fc0 <dhcp_check+0x60>
    dhcp->tries++;
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	799b      	ldrb	r3, [r3, #6]
 8011fb8:	3301      	adds	r3, #1
 8011fba:	b2da      	uxtb	r2, r3
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8011fc0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8011fc4:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011fc6:	893b      	ldrh	r3, [r7, #8]
 8011fc8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011fcc:	4a0a      	ldr	r2, [pc, #40]	; (8011ff8 <dhcp_check+0x98>)
 8011fce:	fb82 1203 	smull	r1, r2, r2, r3
 8011fd2:	1152      	asrs	r2, r2, #5
 8011fd4:	17db      	asrs	r3, r3, #31
 8011fd6:	1ad3      	subs	r3, r2, r3
 8011fd8:	b29a      	uxth	r2, r3
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
 8011fde:	893b      	ldrh	r3, [r7, #8]
 8011fe0:	4619      	mov	r1, r3
 8011fe2:	4806      	ldr	r0, [pc, #24]	; (8011ffc <dhcp_check+0x9c>)
 8011fe4:	f005 f8c0 	bl	8017168 <iprintf>
}
 8011fe8:	bf00      	nop
 8011fea:	3710      	adds	r7, #16
 8011fec:	46bd      	mov	sp, r7
 8011fee:	bd80      	pop	{r7, pc}
 8011ff0:	0801ae04 	.word	0x0801ae04
 8011ff4:	0801ae20 	.word	0x0801ae20
 8011ff8:	10624dd3 	.word	0x10624dd3
 8011ffc:	0801ae48 	.word	0x0801ae48

08012000 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8012000:	b580      	push	{r7, lr}
 8012002:	b086      	sub	sp, #24
 8012004:	af02      	add	r7, sp, #8
 8012006:	6078      	str	r0, [r7, #4]
 8012008:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801200e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8012016:	461a      	mov	r2, r3
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 801201e:	4619      	mov	r1, r3
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012026:	9300      	str	r3, [sp, #0]
 8012028:	460b      	mov	r3, r1
 801202a:	6879      	ldr	r1, [r7, #4]
 801202c:	4816      	ldr	r0, [pc, #88]	; (8012088 <dhcp_handle_offer+0x88>)
 801202e:	f005 f89b 	bl	8017168 <iprintf>
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8012032:	4b16      	ldr	r3, [pc, #88]	; (801208c <dhcp_handle_offer+0x8c>)
 8012034:	789b      	ldrb	r3, [r3, #2]
 8012036:	2b00      	cmp	r3, #0
 8012038:	d01e      	beq.n	8012078 <dhcp_handle_offer+0x78>
    dhcp->request_timeout = 0; /* stop timer */
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	2200      	movs	r2, #0
 801203e:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8012040:	4b13      	ldr	r3, [pc, #76]	; (8012090 <dhcp_handle_offer+0x90>)
 8012042:	689b      	ldr	r3, [r3, #8]
 8012044:	4618      	mov	r0, r3
 8012046:	f7f7 faf0 	bl	800962a <lwip_htonl>
 801204a:	4602      	mov	r2, r0
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	699b      	ldr	r3, [r3, #24]
 8012054:	4619      	mov	r1, r3
 8012056:	480f      	ldr	r0, [pc, #60]	; (8012094 <dhcp_handle_offer+0x94>)
 8012058:	f005 f886 	bl	8017168 <iprintf>
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801205c:	683b      	ldr	r3, [r7, #0]
 801205e:	691a      	ldr	r2, [r3, #16]
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	69db      	ldr	r3, [r3, #28]
 8012068:	4619      	mov	r1, r3
 801206a:	480b      	ldr	r0, [pc, #44]	; (8012098 <dhcp_handle_offer+0x98>)
 801206c:	f005 f87c 	bl	8017168 <iprintf>
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8012070:	6878      	ldr	r0, [r7, #4]
 8012072:	f000 f815 	bl	80120a0 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8012076:	e003      	b.n	8012080 <dhcp_handle_offer+0x80>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 8012078:	6879      	ldr	r1, [r7, #4]
 801207a:	4808      	ldr	r0, [pc, #32]	; (801209c <dhcp_handle_offer+0x9c>)
 801207c:	f005 f874 	bl	8017168 <iprintf>
}
 8012080:	bf00      	nop
 8012082:	3710      	adds	r7, #16
 8012084:	46bd      	mov	sp, r7
 8012086:	bd80      	pop	{r7, pc}
 8012088:	0801ae78 	.word	0x0801ae78
 801208c:	2000da74 	.word	0x2000da74
 8012090:	2000da4c 	.word	0x2000da4c
 8012094:	0801aea0 	.word	0x0801aea0
 8012098:	0801aec8 	.word	0x0801aec8
 801209c:	0801aef0 	.word	0x0801aef0

080120a0 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 80120a0:	b5b0      	push	{r4, r5, r7, lr}
 80120a2:	b08a      	sub	sp, #40	; 0x28
 80120a4:	af02      	add	r7, sp, #8
 80120a6:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d109      	bne.n	80120c2 <dhcp_select+0x22>
 80120ae:	4b7f      	ldr	r3, [pc, #508]	; (80122ac <dhcp_select+0x20c>)
 80120b0:	f240 1277 	movw	r2, #375	; 0x177
 80120b4:	497e      	ldr	r1, [pc, #504]	; (80122b0 <dhcp_select+0x210>)
 80120b6:	487f      	ldr	r0, [pc, #508]	; (80122b4 <dhcp_select+0x214>)
 80120b8:	f005 f856 	bl	8017168 <iprintf>
 80120bc:	f06f 030f 	mvn.w	r3, #15
 80120c0:	e0ef      	b.n	80122a2 <dhcp_select+0x202>
  dhcp = netif_dhcp_data(netif);
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120c6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80120c8:	69bb      	ldr	r3, [r7, #24]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d109      	bne.n	80120e2 <dhcp_select+0x42>
 80120ce:	4b77      	ldr	r3, [pc, #476]	; (80122ac <dhcp_select+0x20c>)
 80120d0:	f240 1279 	movw	r2, #377	; 0x179
 80120d4:	4978      	ldr	r1, [pc, #480]	; (80122b8 <dhcp_select+0x218>)
 80120d6:	4877      	ldr	r0, [pc, #476]	; (80122b4 <dhcp_select+0x214>)
 80120d8:	f005 f846 	bl	8017168 <iprintf>
 80120dc:	f06f 0305 	mvn.w	r3, #5
 80120e0:	e0df      	b.n	80122a2 <dhcp_select+0x202>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80120e8:	461a      	mov	r2, r3
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80120f0:	4619      	mov	r1, r3
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80120f8:	9300      	str	r3, [sp, #0]
 80120fa:	460b      	mov	r3, r1
 80120fc:	6879      	ldr	r1, [r7, #4]
 80120fe:	486f      	ldr	r0, [pc, #444]	; (80122bc <dhcp_select+0x21c>)
 8012100:	f005 f832 	bl	8017168 <iprintf>
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8012104:	2101      	movs	r1, #1
 8012106:	69b8      	ldr	r0, [r7, #24]
 8012108:	f001 f966 	bl	80133d8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801210c:	f107 030c 	add.w	r3, r7, #12
 8012110:	2203      	movs	r2, #3
 8012112:	69b9      	ldr	r1, [r7, #24]
 8012114:	6878      	ldr	r0, [r7, #4]
 8012116:	f001 feab 	bl	8013e70 <dhcp_create_msg>
 801211a:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801211c:	697b      	ldr	r3, [r7, #20]
 801211e:	2b00      	cmp	r3, #0
 8012120:	f000 8088 	beq.w	8012234 <dhcp_select+0x194>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012124:	697b      	ldr	r3, [r7, #20]
 8012126:	685b      	ldr	r3, [r3, #4]
 8012128:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801212a:	89b8      	ldrh	r0, [r7, #12]
 801212c:	693b      	ldr	r3, [r7, #16]
 801212e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012132:	2302      	movs	r3, #2
 8012134:	2239      	movs	r2, #57	; 0x39
 8012136:	f001 f969 	bl	801340c <dhcp_option>
 801213a:	4603      	mov	r3, r0
 801213c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801213e:	89b8      	ldrh	r0, [r7, #12]
 8012140:	693b      	ldr	r3, [r7, #16]
 8012142:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801214a:	461a      	mov	r2, r3
 801214c:	f001 f9b8 	bl	80134c0 <dhcp_option_short>
 8012150:	4603      	mov	r3, r0
 8012152:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8012154:	89b8      	ldrh	r0, [r7, #12]
 8012156:	693b      	ldr	r3, [r7, #16]
 8012158:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801215c:	2304      	movs	r3, #4
 801215e:	2232      	movs	r2, #50	; 0x32
 8012160:	f001 f954 	bl	801340c <dhcp_option>
 8012164:	4603      	mov	r3, r0
 8012166:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012168:	89bc      	ldrh	r4, [r7, #12]
 801216a:	693b      	ldr	r3, [r7, #16]
 801216c:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012170:	69bb      	ldr	r3, [r7, #24]
 8012172:	69db      	ldr	r3, [r3, #28]
 8012174:	4618      	mov	r0, r3
 8012176:	f7f7 fa58 	bl	800962a <lwip_htonl>
 801217a:	4603      	mov	r3, r0
 801217c:	461a      	mov	r2, r3
 801217e:	4629      	mov	r1, r5
 8012180:	4620      	mov	r0, r4
 8012182:	f001 f9cf 	bl	8013524 <dhcp_option_long>
 8012186:	4603      	mov	r3, r0
 8012188:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801218a:	89b8      	ldrh	r0, [r7, #12]
 801218c:	693b      	ldr	r3, [r7, #16]
 801218e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012192:	2304      	movs	r3, #4
 8012194:	2236      	movs	r2, #54	; 0x36
 8012196:	f001 f939 	bl	801340c <dhcp_option>
 801219a:	4603      	mov	r3, r0
 801219c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801219e:	89bc      	ldrh	r4, [r7, #12]
 80121a0:	693b      	ldr	r3, [r7, #16]
 80121a2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80121a6:	69bb      	ldr	r3, [r7, #24]
 80121a8:	699b      	ldr	r3, [r3, #24]
 80121aa:	4618      	mov	r0, r3
 80121ac:	f7f7 fa3d 	bl	800962a <lwip_htonl>
 80121b0:	4603      	mov	r3, r0
 80121b2:	461a      	mov	r2, r3
 80121b4:	4629      	mov	r1, r5
 80121b6:	4620      	mov	r0, r4
 80121b8:	f001 f9b4 	bl	8013524 <dhcp_option_long>
 80121bc:	4603      	mov	r3, r0
 80121be:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80121c0:	89b8      	ldrh	r0, [r7, #12]
 80121c2:	693b      	ldr	r3, [r7, #16]
 80121c4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80121c8:	2304      	movs	r3, #4
 80121ca:	2237      	movs	r2, #55	; 0x37
 80121cc:	f001 f91e 	bl	801340c <dhcp_option>
 80121d0:	4603      	mov	r3, r0
 80121d2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80121d4:	2300      	movs	r3, #0
 80121d6:	77bb      	strb	r3, [r7, #30]
 80121d8:	e00e      	b.n	80121f8 <dhcp_select+0x158>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80121da:	89b8      	ldrh	r0, [r7, #12]
 80121dc:	693b      	ldr	r3, [r7, #16]
 80121de:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80121e2:	7fbb      	ldrb	r3, [r7, #30]
 80121e4:	4a36      	ldr	r2, [pc, #216]	; (80122c0 <dhcp_select+0x220>)
 80121e6:	5cd3      	ldrb	r3, [r2, r3]
 80121e8:	461a      	mov	r2, r3
 80121ea:	f001 f943 	bl	8013474 <dhcp_option_byte>
 80121ee:	4603      	mov	r3, r0
 80121f0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80121f2:	7fbb      	ldrb	r3, [r7, #30]
 80121f4:	3301      	adds	r3, #1
 80121f6:	77bb      	strb	r3, [r7, #30]
 80121f8:	7fbb      	ldrb	r3, [r7, #30]
 80121fa:	2b03      	cmp	r3, #3
 80121fc:	d9ed      	bls.n	80121da <dhcp_select+0x13a>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80121fe:	89b8      	ldrh	r0, [r7, #12]
 8012200:	693b      	ldr	r3, [r7, #16]
 8012202:	33f0      	adds	r3, #240	; 0xf0
 8012204:	697a      	ldr	r2, [r7, #20]
 8012206:	4619      	mov	r1, r3
 8012208:	f001 ff16 	bl	8014038 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801220c:	4b2d      	ldr	r3, [pc, #180]	; (80122c4 <dhcp_select+0x224>)
 801220e:	6818      	ldr	r0, [r3, #0]
 8012210:	4b2d      	ldr	r3, [pc, #180]	; (80122c8 <dhcp_select+0x228>)
 8012212:	9301      	str	r3, [sp, #4]
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	9300      	str	r3, [sp, #0]
 8012218:	2343      	movs	r3, #67	; 0x43
 801221a:	4a2c      	ldr	r2, [pc, #176]	; (80122cc <dhcp_select+0x22c>)
 801221c:	6979      	ldr	r1, [r7, #20]
 801221e:	f7ff fb6f 	bl	8011900 <udp_sendto_if_src>
 8012222:	4603      	mov	r3, r0
 8012224:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012226:	6978      	ldr	r0, [r7, #20]
 8012228:	f7f9 f9cc 	bl	800b5c4 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
 801222c:	4828      	ldr	r0, [pc, #160]	; (80122d0 <dhcp_select+0x230>)
 801222e:	f005 f837 	bl	80172a0 <puts>
 8012232:	e004      	b.n	801223e <dhcp_select+0x19e>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
 8012234:	4827      	ldr	r0, [pc, #156]	; (80122d4 <dhcp_select+0x234>)
 8012236:	f005 f833 	bl	80172a0 <puts>
    result = ERR_MEM;
 801223a:	23ff      	movs	r3, #255	; 0xff
 801223c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801223e:	69bb      	ldr	r3, [r7, #24]
 8012240:	799b      	ldrb	r3, [r3, #6]
 8012242:	2bff      	cmp	r3, #255	; 0xff
 8012244:	d005      	beq.n	8012252 <dhcp_select+0x1b2>
    dhcp->tries++;
 8012246:	69bb      	ldr	r3, [r7, #24]
 8012248:	799b      	ldrb	r3, [r3, #6]
 801224a:	3301      	adds	r3, #1
 801224c:	b2da      	uxtb	r2, r3
 801224e:	69bb      	ldr	r3, [r7, #24]
 8012250:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8012252:	69bb      	ldr	r3, [r7, #24]
 8012254:	799b      	ldrb	r3, [r3, #6]
 8012256:	2b05      	cmp	r3, #5
 8012258:	d80d      	bhi.n	8012276 <dhcp_select+0x1d6>
 801225a:	69bb      	ldr	r3, [r7, #24]
 801225c:	799b      	ldrb	r3, [r3, #6]
 801225e:	461a      	mov	r2, r3
 8012260:	2301      	movs	r3, #1
 8012262:	4093      	lsls	r3, r2
 8012264:	b29b      	uxth	r3, r3
 8012266:	461a      	mov	r2, r3
 8012268:	0152      	lsls	r2, r2, #5
 801226a:	1ad2      	subs	r2, r2, r3
 801226c:	0092      	lsls	r2, r2, #2
 801226e:	4413      	add	r3, r2
 8012270:	00db      	lsls	r3, r3, #3
 8012272:	b29b      	uxth	r3, r3
 8012274:	e001      	b.n	801227a <dhcp_select+0x1da>
 8012276:	f64e 2360 	movw	r3, #60000	; 0xea60
 801227a:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801227c:	89fb      	ldrh	r3, [r7, #14]
 801227e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012282:	4a15      	ldr	r2, [pc, #84]	; (80122d8 <dhcp_select+0x238>)
 8012284:	fb82 1203 	smull	r1, r2, r2, r3
 8012288:	1152      	asrs	r2, r2, #5
 801228a:	17db      	asrs	r3, r3, #31
 801228c:	1ad3      	subs	r3, r2, r3
 801228e:	b29a      	uxth	r2, r3
 8012290:	69bb      	ldr	r3, [r7, #24]
 8012292:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
 8012294:	89fb      	ldrh	r3, [r7, #14]
 8012296:	4619      	mov	r1, r3
 8012298:	4810      	ldr	r0, [pc, #64]	; (80122dc <dhcp_select+0x23c>)
 801229a:	f004 ff65 	bl	8017168 <iprintf>
  return result;
 801229e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80122a2:	4618      	mov	r0, r3
 80122a4:	3720      	adds	r7, #32
 80122a6:	46bd      	mov	sp, r7
 80122a8:	bdb0      	pop	{r4, r5, r7, pc}
 80122aa:	bf00      	nop
 80122ac:	0801ad34 	.word	0x0801ad34
 80122b0:	0801af24 	.word	0x0801af24
 80122b4:	0801ad94 	.word	0x0801ad94
 80122b8:	0801af40 	.word	0x0801af40
 80122bc:	0801af5c 	.word	0x0801af5c
 80122c0:	20000074 	.word	0x20000074
 80122c4:	2000da80 	.word	0x2000da80
 80122c8:	0801d628 	.word	0x0801d628
 80122cc:	0801d62c 	.word	0x0801d62c
 80122d0:	0801af7c 	.word	0x0801af7c
 80122d4:	0801af94 	.word	0x0801af94
 80122d8:	10624dd3 	.word	0x10624dd3
 80122dc:	0801afc4 	.word	0x0801afc4

080122e0 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 80122e0:	b580      	push	{r7, lr}
 80122e2:	b082      	sub	sp, #8
 80122e4:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
 80122e6:	482d      	ldr	r0, [pc, #180]	; (801239c <dhcp_coarse_tmr+0xbc>)
 80122e8:	f004 ffda 	bl	80172a0 <puts>
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 80122ec:	4b2c      	ldr	r3, [pc, #176]	; (80123a0 <dhcp_coarse_tmr+0xc0>)
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	607b      	str	r3, [r7, #4]
 80122f2:	e04b      	b.n	801238c <dhcp_coarse_tmr+0xac>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122f8:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80122fa:	683b      	ldr	r3, [r7, #0]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d042      	beq.n	8012386 <dhcp_coarse_tmr+0xa6>
 8012300:	683b      	ldr	r3, [r7, #0]
 8012302:	795b      	ldrb	r3, [r3, #5]
 8012304:	2b00      	cmp	r3, #0
 8012306:	d03e      	beq.n	8012386 <dhcp_coarse_tmr+0xa6>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8012308:	683b      	ldr	r3, [r7, #0]
 801230a:	8a9b      	ldrh	r3, [r3, #20]
 801230c:	2b00      	cmp	r3, #0
 801230e:	d015      	beq.n	801233c <dhcp_coarse_tmr+0x5c>
 8012310:	683b      	ldr	r3, [r7, #0]
 8012312:	8a5b      	ldrh	r3, [r3, #18]
 8012314:	3301      	adds	r3, #1
 8012316:	b29a      	uxth	r2, r3
 8012318:	683b      	ldr	r3, [r7, #0]
 801231a:	825a      	strh	r2, [r3, #18]
 801231c:	683b      	ldr	r3, [r7, #0]
 801231e:	8a5a      	ldrh	r2, [r3, #18]
 8012320:	683b      	ldr	r3, [r7, #0]
 8012322:	8a9b      	ldrh	r3, [r3, #20]
 8012324:	429a      	cmp	r2, r3
 8012326:	d109      	bne.n	801233c <dhcp_coarse_tmr+0x5c>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
 8012328:	481e      	ldr	r0, [pc, #120]	; (80123a4 <dhcp_coarse_tmr+0xc4>)
 801232a:	f004 ffb9 	bl	80172a0 <puts>
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801232e:	6878      	ldr	r0, [r7, #4]
 8012330:	f000 ffa8 	bl	8013284 <dhcp_release_and_stop>
        dhcp_start(netif);
 8012334:	6878      	ldr	r0, [r7, #4]
 8012336:	f000 f9c9 	bl	80126cc <dhcp_start>
 801233a:	e024      	b.n	8012386 <dhcp_coarse_tmr+0xa6>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801233c:	683b      	ldr	r3, [r7, #0]
 801233e:	8a1b      	ldrh	r3, [r3, #16]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d00e      	beq.n	8012362 <dhcp_coarse_tmr+0x82>
 8012344:	683b      	ldr	r3, [r7, #0]
 8012346:	8a1b      	ldrh	r3, [r3, #16]
 8012348:	1e5a      	subs	r2, r3, #1
 801234a:	b291      	uxth	r1, r2
 801234c:	683a      	ldr	r2, [r7, #0]
 801234e:	8211      	strh	r1, [r2, #16]
 8012350:	2b01      	cmp	r3, #1
 8012352:	d106      	bne.n	8012362 <dhcp_coarse_tmr+0x82>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
 8012354:	4814      	ldr	r0, [pc, #80]	; (80123a8 <dhcp_coarse_tmr+0xc8>)
 8012356:	f004 ffa3 	bl	80172a0 <puts>
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 801235a:	6878      	ldr	r0, [r7, #4]
 801235c:	f000 f8fa 	bl	8012554 <dhcp_t2_timeout>
 8012360:	e011      	b.n	8012386 <dhcp_coarse_tmr+0xa6>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8012362:	683b      	ldr	r3, [r7, #0]
 8012364:	89db      	ldrh	r3, [r3, #14]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d00d      	beq.n	8012386 <dhcp_coarse_tmr+0xa6>
 801236a:	683b      	ldr	r3, [r7, #0]
 801236c:	89db      	ldrh	r3, [r3, #14]
 801236e:	1e5a      	subs	r2, r3, #1
 8012370:	b291      	uxth	r1, r2
 8012372:	683a      	ldr	r2, [r7, #0]
 8012374:	81d1      	strh	r1, [r2, #14]
 8012376:	2b01      	cmp	r3, #1
 8012378:	d105      	bne.n	8012386 <dhcp_coarse_tmr+0xa6>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
 801237a:	480c      	ldr	r0, [pc, #48]	; (80123ac <dhcp_coarse_tmr+0xcc>)
 801237c:	f004 ff90 	bl	80172a0 <puts>
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8012380:	6878      	ldr	r0, [r7, #4]
 8012382:	f000 f8af 	bl	80124e4 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	607b      	str	r3, [r7, #4]
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d1b0      	bne.n	80122f4 <dhcp_coarse_tmr+0x14>
      }
    }
  }
}
 8012392:	bf00      	nop
 8012394:	bf00      	nop
 8012396:	3708      	adds	r7, #8
 8012398:	46bd      	mov	sp, r7
 801239a:	bd80      	pop	{r7, pc}
 801239c:	0801aff4 	.word	0x0801aff4
 80123a0:	2000d9dc 	.word	0x2000d9dc
 80123a4:	0801b008 	.word	0x0801b008
 80123a8:	0801b028 	.word	0x0801b028
 80123ac:	0801b048 	.word	0x0801b048

080123b0 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80123b0:	b580      	push	{r7, lr}
 80123b2:	b082      	sub	sp, #8
 80123b4:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 80123b6:	4b18      	ldr	r3, [pc, #96]	; (8012418 <dhcp_fine_tmr+0x68>)
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	607b      	str	r3, [r7, #4]
 80123bc:	e023      	b.n	8012406 <dhcp_fine_tmr+0x56>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123c2:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 80123c4:	683b      	ldr	r3, [r7, #0]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d01a      	beq.n	8012400 <dhcp_fine_tmr+0x50>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 80123ca:	683b      	ldr	r3, [r7, #0]
 80123cc:	891b      	ldrh	r3, [r3, #8]
 80123ce:	2b01      	cmp	r3, #1
 80123d0:	d906      	bls.n	80123e0 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 80123d2:	683b      	ldr	r3, [r7, #0]
 80123d4:	891b      	ldrh	r3, [r3, #8]
 80123d6:	3b01      	subs	r3, #1
 80123d8:	b29a      	uxth	r2, r3
 80123da:	683b      	ldr	r3, [r7, #0]
 80123dc:	811a      	strh	r2, [r3, #8]
 80123de:	e00f      	b.n	8012400 <dhcp_fine_tmr+0x50>
      } else if (dhcp->request_timeout == 1) {
 80123e0:	683b      	ldr	r3, [r7, #0]
 80123e2:	891b      	ldrh	r3, [r3, #8]
 80123e4:	2b01      	cmp	r3, #1
 80123e6:	d10b      	bne.n	8012400 <dhcp_fine_tmr+0x50>
        dhcp->request_timeout--;
 80123e8:	683b      	ldr	r3, [r7, #0]
 80123ea:	891b      	ldrh	r3, [r3, #8]
 80123ec:	3b01      	subs	r3, #1
 80123ee:	b29a      	uxth	r2, r3
 80123f0:	683b      	ldr	r3, [r7, #0]
 80123f2:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
 80123f4:	4809      	ldr	r0, [pc, #36]	; (801241c <dhcp_fine_tmr+0x6c>)
 80123f6:	f004 ff53 	bl	80172a0 <puts>
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 80123fa:	6878      	ldr	r0, [r7, #4]
 80123fc:	f000 f810 	bl	8012420 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	607b      	str	r3, [r7, #4]
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d1d8      	bne.n	80123be <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801240c:	bf00      	nop
 801240e:	bf00      	nop
 8012410:	3708      	adds	r7, #8
 8012412:	46bd      	mov	sp, r7
 8012414:	bd80      	pop	{r7, pc}
 8012416:	bf00      	nop
 8012418:	2000d9dc 	.word	0x2000d9dc
 801241c:	0801b068 	.word	0x0801b068

08012420 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8012420:	b580      	push	{r7, lr}
 8012422:	b084      	sub	sp, #16
 8012424:	af00      	add	r7, sp, #0
 8012426:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801242c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
 801242e:	4828      	ldr	r0, [pc, #160]	; (80124d0 <dhcp_timeout+0xb0>)
 8012430:	f004 ff36 	bl	80172a0 <puts>
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	795b      	ldrb	r3, [r3, #5]
 8012438:	2b0c      	cmp	r3, #12
 801243a:	d003      	beq.n	8012444 <dhcp_timeout+0x24>
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	795b      	ldrb	r3, [r3, #5]
 8012440:	2b06      	cmp	r3, #6
 8012442:	d106      	bne.n	8012452 <dhcp_timeout+0x32>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
 8012444:	4823      	ldr	r0, [pc, #140]	; (80124d4 <dhcp_timeout+0xb4>)
 8012446:	f004 ff2b 	bl	80172a0 <puts>
    dhcp_discover(netif);
 801244a:	6878      	ldr	r0, [r7, #4]
 801244c:	f000 faf4 	bl	8012a38 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8012450:	e03a      	b.n	80124c8 <dhcp_timeout+0xa8>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	795b      	ldrb	r3, [r3, #5]
 8012456:	2b01      	cmp	r3, #1
 8012458:	d114      	bne.n	8012484 <dhcp_timeout+0x64>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, DHCP request timed out\n"));
 801245a:	481f      	ldr	r0, [pc, #124]	; (80124d8 <dhcp_timeout+0xb8>)
 801245c:	f004 ff20 	bl	80172a0 <puts>
    if (dhcp->tries <= 5) {
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	799b      	ldrb	r3, [r3, #6]
 8012464:	2b05      	cmp	r3, #5
 8012466:	d803      	bhi.n	8012470 <dhcp_timeout+0x50>
      dhcp_select(netif);
 8012468:	6878      	ldr	r0, [r7, #4]
 801246a:	f7ff fe19 	bl	80120a0 <dhcp_select>
}
 801246e:	e02b      	b.n	80124c8 <dhcp_timeout+0xa8>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, releasing, restarting\n"));
 8012470:	481a      	ldr	r0, [pc, #104]	; (80124dc <dhcp_timeout+0xbc>)
 8012472:	f004 ff15 	bl	80172a0 <puts>
      dhcp_release_and_stop(netif);
 8012476:	6878      	ldr	r0, [r7, #4]
 8012478:	f000 ff04 	bl	8013284 <dhcp_release_and_stop>
      dhcp_start(netif);
 801247c:	6878      	ldr	r0, [r7, #4]
 801247e:	f000 f925 	bl	80126cc <dhcp_start>
}
 8012482:	e021      	b.n	80124c8 <dhcp_timeout+0xa8>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	795b      	ldrb	r3, [r3, #5]
 8012488:	2b08      	cmp	r3, #8
 801248a:	d10e      	bne.n	80124aa <dhcp_timeout+0x8a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): CHECKING, ARP request timed out\n"));
 801248c:	4814      	ldr	r0, [pc, #80]	; (80124e0 <dhcp_timeout+0xc0>)
 801248e:	f004 ff07 	bl	80172a0 <puts>
    if (dhcp->tries <= 1) {
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	799b      	ldrb	r3, [r3, #6]
 8012496:	2b01      	cmp	r3, #1
 8012498:	d803      	bhi.n	80124a2 <dhcp_timeout+0x82>
      dhcp_check(netif);
 801249a:	6878      	ldr	r0, [r7, #4]
 801249c:	f7ff fd60 	bl	8011f60 <dhcp_check>
}
 80124a0:	e012      	b.n	80124c8 <dhcp_timeout+0xa8>
      dhcp_bind(netif);
 80124a2:	6878      	ldr	r0, [r7, #4]
 80124a4:	f000 fb90 	bl	8012bc8 <dhcp_bind>
}
 80124a8:	e00e      	b.n	80124c8 <dhcp_timeout+0xa8>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	795b      	ldrb	r3, [r3, #5]
 80124ae:	2b03      	cmp	r3, #3
 80124b0:	d10a      	bne.n	80124c8 <dhcp_timeout+0xa8>
    if (dhcp->tries < REBOOT_TRIES) {
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	799b      	ldrb	r3, [r3, #6]
 80124b6:	2b01      	cmp	r3, #1
 80124b8:	d803      	bhi.n	80124c2 <dhcp_timeout+0xa2>
      dhcp_reboot(netif);
 80124ba:	6878      	ldr	r0, [r7, #4]
 80124bc:	f000 fe16 	bl	80130ec <dhcp_reboot>
}
 80124c0:	e002      	b.n	80124c8 <dhcp_timeout+0xa8>
      dhcp_discover(netif);
 80124c2:	6878      	ldr	r0, [r7, #4]
 80124c4:	f000 fab8 	bl	8012a38 <dhcp_discover>
}
 80124c8:	bf00      	nop
 80124ca:	3710      	adds	r7, #16
 80124cc:	46bd      	mov	sp, r7
 80124ce:	bd80      	pop	{r7, pc}
 80124d0:	0801b08c 	.word	0x0801b08c
 80124d4:	0801b09c 	.word	0x0801b09c
 80124d8:	0801b0c4 	.word	0x0801b0c4
 80124dc:	0801b0f8 	.word	0x0801b0f8
 80124e0:	0801b12c 	.word	0x0801b12c

080124e4 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80124e4:	b580      	push	{r7, lr}
 80124e6:	b084      	sub	sp, #16
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124f0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
 80124f2:	4816      	ldr	r0, [pc, #88]	; (801254c <dhcp_t1_timeout+0x68>)
 80124f4:	f004 fed4 	bl	80172a0 <puts>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	795b      	ldrb	r3, [r3, #5]
 80124fc:	2b01      	cmp	r3, #1
 80124fe:	d007      	beq.n	8012510 <dhcp_t1_timeout+0x2c>
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	795b      	ldrb	r3, [r3, #5]
 8012504:	2b0a      	cmp	r3, #10
 8012506:	d003      	beq.n	8012510 <dhcp_t1_timeout+0x2c>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801250c:	2b05      	cmp	r3, #5
 801250e:	d119      	bne.n	8012544 <dhcp_t1_timeout+0x60>
    /* just retry to renew - note that the rebind timer (t2) will
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
 8012510:	480f      	ldr	r0, [pc, #60]	; (8012550 <dhcp_t1_timeout+0x6c>)
 8012512:	f004 fec5 	bl	80172a0 <puts>
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8012516:	6878      	ldr	r0, [r7, #4]
 8012518:	f000 fc84 	bl	8012e24 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	899b      	ldrh	r3, [r3, #12]
 8012520:	461a      	mov	r2, r3
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	8a5b      	ldrh	r3, [r3, #18]
 8012526:	1ad3      	subs	r3, r2, r3
 8012528:	2b01      	cmp	r3, #1
 801252a:	dd0b      	ble.n	8012544 <dhcp_t1_timeout+0x60>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	899b      	ldrh	r3, [r3, #12]
 8012530:	461a      	mov	r2, r3
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	8a5b      	ldrh	r3, [r3, #18]
 8012536:	1ad3      	subs	r3, r2, r3
 8012538:	0fda      	lsrs	r2, r3, #31
 801253a:	4413      	add	r3, r2
 801253c:	105b      	asrs	r3, r3, #1
 801253e:	b29a      	uxth	r2, r3
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8012544:	bf00      	nop
 8012546:	3710      	adds	r7, #16
 8012548:	46bd      	mov	sp, r7
 801254a:	bd80      	pop	{r7, pc}
 801254c:	0801b15c 	.word	0x0801b15c
 8012550:	0801b170 	.word	0x0801b170

08012554 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8012554:	b580      	push	{r7, lr}
 8012556:	b084      	sub	sp, #16
 8012558:	af00      	add	r7, sp, #0
 801255a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012560:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
 8012562:	4818      	ldr	r0, [pc, #96]	; (80125c4 <dhcp_t2_timeout+0x70>)
 8012564:	f004 fe9c 	bl	80172a0 <puts>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	795b      	ldrb	r3, [r3, #5]
 801256c:	2b01      	cmp	r3, #1
 801256e:	d00b      	beq.n	8012588 <dhcp_t2_timeout+0x34>
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	795b      	ldrb	r3, [r3, #5]
 8012574:	2b0a      	cmp	r3, #10
 8012576:	d007      	beq.n	8012588 <dhcp_t2_timeout+0x34>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801257c:	2b05      	cmp	r3, #5
 801257e:	d003      	beq.n	8012588 <dhcp_t2_timeout+0x34>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	795b      	ldrb	r3, [r3, #5]
 8012584:	2b04      	cmp	r3, #4
 8012586:	d119      	bne.n	80125bc <dhcp_t2_timeout+0x68>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
 8012588:	480f      	ldr	r0, [pc, #60]	; (80125c8 <dhcp_t2_timeout+0x74>)
 801258a:	f004 fe89 	bl	80172a0 <puts>
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801258e:	6878      	ldr	r0, [r7, #4]
 8012590:	f000 fcfa 	bl	8012f88 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	8a9b      	ldrh	r3, [r3, #20]
 8012598:	461a      	mov	r2, r3
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	8a5b      	ldrh	r3, [r3, #18]
 801259e:	1ad3      	subs	r3, r2, r3
 80125a0:	2b01      	cmp	r3, #1
 80125a2:	dd0b      	ble.n	80125bc <dhcp_t2_timeout+0x68>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	8a9b      	ldrh	r3, [r3, #20]
 80125a8:	461a      	mov	r2, r3
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	8a5b      	ldrh	r3, [r3, #18]
 80125ae:	1ad3      	subs	r3, r2, r3
 80125b0:	0fda      	lsrs	r2, r3, #31
 80125b2:	4413      	add	r3, r2
 80125b4:	105b      	asrs	r3, r3, #1
 80125b6:	b29a      	uxth	r2, r3
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80125bc:	bf00      	nop
 80125be:	3710      	adds	r7, #16
 80125c0:	46bd      	mov	sp, r7
 80125c2:	bd80      	pop	{r7, pc}
 80125c4:	0801b190 	.word	0x0801b190
 80125c8:	0801b1a4 	.word	0x0801b1a4

080125cc <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b086      	sub	sp, #24
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	6078      	str	r0, [r7, #4]
 80125d4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125da:	613b      	str	r3, [r7, #16]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80125dc:	693b      	ldr	r3, [r7, #16]
 80125de:	2200      	movs	r2, #0
 80125e0:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80125e2:	693b      	ldr	r3, [r7, #16]
 80125e4:	2200      	movs	r2, #0
 80125e6:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80125e8:	4b36      	ldr	r3, [pc, #216]	; (80126c4 <dhcp_handle_ack+0xf8>)
 80125ea:	78db      	ldrb	r3, [r3, #3]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d003      	beq.n	80125f8 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80125f0:	4b35      	ldr	r3, [pc, #212]	; (80126c8 <dhcp_handle_ack+0xfc>)
 80125f2:	68da      	ldr	r2, [r3, #12]
 80125f4:	693b      	ldr	r3, [r7, #16]
 80125f6:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80125f8:	4b32      	ldr	r3, [pc, #200]	; (80126c4 <dhcp_handle_ack+0xf8>)
 80125fa:	791b      	ldrb	r3, [r3, #4]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d004      	beq.n	801260a <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8012600:	4b31      	ldr	r3, [pc, #196]	; (80126c8 <dhcp_handle_ack+0xfc>)
 8012602:	691a      	ldr	r2, [r3, #16]
 8012604:	693b      	ldr	r3, [r7, #16]
 8012606:	62da      	str	r2, [r3, #44]	; 0x2c
 8012608:	e004      	b.n	8012614 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801260a:	693b      	ldr	r3, [r7, #16]
 801260c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801260e:	085a      	lsrs	r2, r3, #1
 8012610:	693b      	ldr	r3, [r7, #16]
 8012612:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8012614:	4b2b      	ldr	r3, [pc, #172]	; (80126c4 <dhcp_handle_ack+0xf8>)
 8012616:	795b      	ldrb	r3, [r3, #5]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d004      	beq.n	8012626 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801261c:	4b2a      	ldr	r3, [pc, #168]	; (80126c8 <dhcp_handle_ack+0xfc>)
 801261e:	695a      	ldr	r2, [r3, #20]
 8012620:	693b      	ldr	r3, [r7, #16]
 8012622:	631a      	str	r2, [r3, #48]	; 0x30
 8012624:	e007      	b.n	8012636 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8012626:	693b      	ldr	r3, [r7, #16]
 8012628:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801262a:	4613      	mov	r3, r2
 801262c:	00db      	lsls	r3, r3, #3
 801262e:	1a9b      	subs	r3, r3, r2
 8012630:	08da      	lsrs	r2, r3, #3
 8012632:	693b      	ldr	r3, [r7, #16]
 8012634:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8012636:	683b      	ldr	r3, [r7, #0]
 8012638:	691a      	ldr	r2, [r3, #16]
 801263a:	693b      	ldr	r3, [r7, #16]
 801263c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801263e:	4b21      	ldr	r3, [pc, #132]	; (80126c4 <dhcp_handle_ack+0xf8>)
 8012640:	799b      	ldrb	r3, [r3, #6]
 8012642:	2b00      	cmp	r3, #0
 8012644:	d00b      	beq.n	801265e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8012646:	4b20      	ldr	r3, [pc, #128]	; (80126c8 <dhcp_handle_ack+0xfc>)
 8012648:	699b      	ldr	r3, [r3, #24]
 801264a:	4618      	mov	r0, r3
 801264c:	f7f6 ffed 	bl	800962a <lwip_htonl>
 8012650:	4602      	mov	r2, r0
 8012652:	693b      	ldr	r3, [r7, #16]
 8012654:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8012656:	693b      	ldr	r3, [r7, #16]
 8012658:	2201      	movs	r2, #1
 801265a:	71da      	strb	r2, [r3, #7]
 801265c:	e002      	b.n	8012664 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801265e:	693b      	ldr	r3, [r7, #16]
 8012660:	2200      	movs	r2, #0
 8012662:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8012664:	4b17      	ldr	r3, [pc, #92]	; (80126c4 <dhcp_handle_ack+0xf8>)
 8012666:	79db      	ldrb	r3, [r3, #7]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d007      	beq.n	801267c <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801266c:	4b16      	ldr	r3, [pc, #88]	; (80126c8 <dhcp_handle_ack+0xfc>)
 801266e:	69db      	ldr	r3, [r3, #28]
 8012670:	4618      	mov	r0, r3
 8012672:	f7f6 ffda 	bl	800962a <lwip_htonl>
 8012676:	4602      	mov	r2, r0
 8012678:	693b      	ldr	r3, [r7, #16]
 801267a:	625a      	str	r2, [r3, #36]	; 0x24
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 801267c:	2300      	movs	r3, #0
 801267e:	75fb      	strb	r3, [r7, #23]
 8012680:	e013      	b.n	80126aa <dhcp_handle_ack+0xde>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8012682:	7dfb      	ldrb	r3, [r7, #23]
 8012684:	3308      	adds	r3, #8
 8012686:	4a10      	ldr	r2, [pc, #64]	; (80126c8 <dhcp_handle_ack+0xfc>)
 8012688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801268c:	4618      	mov	r0, r3
 801268e:	f7f6 ffcc 	bl	800962a <lwip_htonl>
 8012692:	4603      	mov	r3, r0
 8012694:	60fb      	str	r3, [r7, #12]
    dns_setserver(n, &dns_addr);
 8012696:	f107 020c 	add.w	r2, r7, #12
 801269a:	7dfb      	ldrb	r3, [r7, #23]
 801269c:	4611      	mov	r1, r2
 801269e:	4618      	mov	r0, r3
 80126a0:	f7f6 ffe4 	bl	800966c <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 80126a4:	7dfb      	ldrb	r3, [r7, #23]
 80126a6:	3301      	adds	r3, #1
 80126a8:	75fb      	strb	r3, [r7, #23]
 80126aa:	7dfb      	ldrb	r3, [r7, #23]
 80126ac:	2b01      	cmp	r3, #1
 80126ae:	d805      	bhi.n	80126bc <dhcp_handle_ack+0xf0>
 80126b0:	7dfb      	ldrb	r3, [r7, #23]
 80126b2:	3308      	adds	r3, #8
 80126b4:	4a03      	ldr	r2, [pc, #12]	; (80126c4 <dhcp_handle_ack+0xf8>)
 80126b6:	5cd3      	ldrb	r3, [r2, r3]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d1e2      	bne.n	8012682 <dhcp_handle_ack+0xb6>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80126bc:	bf00      	nop
 80126be:	3718      	adds	r7, #24
 80126c0:	46bd      	mov	sp, r7
 80126c2:	bd80      	pop	{r7, pc}
 80126c4:	2000da74 	.word	0x2000da74
 80126c8:	2000da4c 	.word	0x2000da4c

080126cc <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 80126cc:	b580      	push	{r7, lr}
 80126ce:	b086      	sub	sp, #24
 80126d0:	af02      	add	r7, sp, #8
 80126d2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d109      	bne.n	80126ee <dhcp_start+0x22>
 80126da:	4b49      	ldr	r3, [pc, #292]	; (8012800 <dhcp_start+0x134>)
 80126dc:	f240 22e7 	movw	r2, #743	; 0x2e7
 80126e0:	4948      	ldr	r1, [pc, #288]	; (8012804 <dhcp_start+0x138>)
 80126e2:	4849      	ldr	r0, [pc, #292]	; (8012808 <dhcp_start+0x13c>)
 80126e4:	f004 fd40 	bl	8017168 <iprintf>
 80126e8:	f06f 030f 	mvn.w	r3, #15
 80126ec:	e083      	b.n	80127f6 <dhcp_start+0x12a>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80126f4:	f003 0301 	and.w	r3, r3, #1
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d109      	bne.n	8012710 <dhcp_start+0x44>
 80126fc:	4b40      	ldr	r3, [pc, #256]	; (8012800 <dhcp_start+0x134>)
 80126fe:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8012702:	4942      	ldr	r1, [pc, #264]	; (801280c <dhcp_start+0x140>)
 8012704:	4840      	ldr	r0, [pc, #256]	; (8012808 <dhcp_start+0x13c>)
 8012706:	f004 fd2f 	bl	8017168 <iprintf>
 801270a:	f06f 030f 	mvn.w	r3, #15
 801270e:	e072      	b.n	80127f6 <dhcp_start+0x12a>
  dhcp = netif_dhcp_data(netif);
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012714:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801271c:	461a      	mov	r2, r3
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8012724:	4619      	mov	r1, r3
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801272c:	9300      	str	r3, [sp, #0]
 801272e:	460b      	mov	r3, r1
 8012730:	6879      	ldr	r1, [r7, #4]
 8012732:	4837      	ldr	r0, [pc, #220]	; (8012810 <dhcp_start+0x144>)
 8012734:	f004 fd18 	bl	8017168 <iprintf>

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801273c:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8012740:	d205      	bcs.n	801274e <dhcp_start+0x82>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
 8012742:	4834      	ldr	r0, [pc, #208]	; (8012814 <dhcp_start+0x148>)
 8012744:	f004 fdac 	bl	80172a0 <puts>
    return ERR_MEM;
 8012748:	f04f 33ff 	mov.w	r3, #4294967295
 801274c:	e053      	b.n	80127f6 <dhcp_start+0x12a>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	2b00      	cmp	r3, #0
 8012752:	d116      	bne.n	8012782 <dhcp_start+0xb6>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
 8012754:	4830      	ldr	r0, [pc, #192]	; (8012818 <dhcp_start+0x14c>)
 8012756:	f004 fda3 	bl	80172a0 <puts>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801275a:	2034      	movs	r0, #52	; 0x34
 801275c:	f7f7 fd72 	bl	800a244 <mem_malloc>
 8012760:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d105      	bne.n	8012774 <dhcp_start+0xa8>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
 8012768:	482c      	ldr	r0, [pc, #176]	; (801281c <dhcp_start+0x150>)
 801276a:	f004 fd99 	bl	80172a0 <puts>
      return ERR_MEM;
 801276e:	f04f 33ff 	mov.w	r3, #4294967295
 8012772:	e040      	b.n	80127f6 <dhcp_start+0x12a>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	68fa      	ldr	r2, [r7, #12]
 8012778:	625a      	str	r2, [r3, #36]	; 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
 801277a:	4829      	ldr	r0, [pc, #164]	; (8012820 <dhcp_start+0x154>)
 801277c:	f004 fcf4 	bl	8017168 <iprintf>
 8012780:	e008      	b.n	8012794 <dhcp_start+0xc8>
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
 8012782:	4828      	ldr	r0, [pc, #160]	; (8012824 <dhcp_start+0x158>)
 8012784:	f004 fd8c 	bl	80172a0 <puts>

    if (dhcp->pcb_allocated != 0) {
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	791b      	ldrb	r3, [r3, #4]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d001      	beq.n	8012794 <dhcp_start+0xc8>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8012790:	f7ff fb8e 	bl	8011eb0 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8012794:	2234      	movs	r2, #52	; 0x34
 8012796:	2100      	movs	r1, #0
 8012798:	68f8      	ldr	r0, [r7, #12]
 801279a:	f004 fcdd 	bl	8017158 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));
 801279e:	4822      	ldr	r0, [pc, #136]	; (8012828 <dhcp_start+0x15c>)
 80127a0:	f004 fd7e 	bl	80172a0 <puts>

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80127a4:	f7ff fb32 	bl	8011e0c <dhcp_inc_pcb_refcount>
 80127a8:	4603      	mov	r3, r0
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d002      	beq.n	80127b4 <dhcp_start+0xe8>
    return ERR_MEM;
 80127ae:	f04f 33ff 	mov.w	r3, #4294967295
 80127b2:	e020      	b.n	80127f6 <dhcp_start+0x12a>
  }
  dhcp->pcb_allocated = 1;
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	2201      	movs	r2, #1
 80127b8:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80127c0:	f003 0304 	and.w	r3, r3, #4
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d105      	bne.n	80127d4 <dhcp_start+0x108>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 80127c8:	2102      	movs	r1, #2
 80127ca:	68f8      	ldr	r0, [r7, #12]
 80127cc:	f000 fe04 	bl	80133d8 <dhcp_set_state>
    return ERR_OK;
 80127d0:	2300      	movs	r3, #0
 80127d2:	e010      	b.n	80127f6 <dhcp_start+0x12a>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80127d4:	6878      	ldr	r0, [r7, #4]
 80127d6:	f000 f92f 	bl	8012a38 <dhcp_discover>
 80127da:	4603      	mov	r3, r0
 80127dc:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80127de:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d005      	beq.n	80127f2 <dhcp_start+0x126>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 80127e6:	6878      	ldr	r0, [r7, #4]
 80127e8:	f000 fd4c 	bl	8013284 <dhcp_release_and_stop>
    return ERR_MEM;
 80127ec:	f04f 33ff 	mov.w	r3, #4294967295
 80127f0:	e001      	b.n	80127f6 <dhcp_start+0x12a>
  }
  return result;
 80127f2:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80127f6:	4618      	mov	r0, r3
 80127f8:	3710      	adds	r7, #16
 80127fa:	46bd      	mov	sp, r7
 80127fc:	bd80      	pop	{r7, pc}
 80127fe:	bf00      	nop
 8012800:	0801ad34 	.word	0x0801ad34
 8012804:	0801b1c4 	.word	0x0801b1c4
 8012808:	0801ad94 	.word	0x0801ad94
 801280c:	0801b208 	.word	0x0801b208
 8012810:	0801b22c 	.word	0x0801b22c
 8012814:	0801b24c 	.word	0x0801b24c
 8012818:	0801b28c 	.word	0x0801b28c
 801281c:	0801b2b4 	.word	0x0801b2b4
 8012820:	0801b2dc 	.word	0x0801b2dc
 8012824:	0801b2fc 	.word	0x0801b2fc
 8012828:	0801b328 	.word	0x0801b328

0801282c <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 801282c:	b580      	push	{r7, lr}
 801282e:	b084      	sub	sp, #16
 8012830:	af00      	add	r7, sp, #0
 8012832:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012838:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d025      	beq.n	801288c <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	795b      	ldrb	r3, [r3, #5]
 8012844:	2b0a      	cmp	r3, #10
 8012846:	d008      	beq.n	801285a <dhcp_network_changed+0x2e>
 8012848:	2b0a      	cmp	r3, #10
 801284a:	dc0d      	bgt.n	8012868 <dhcp_network_changed+0x3c>
 801284c:	2b00      	cmp	r3, #0
 801284e:	d01f      	beq.n	8012890 <dhcp_network_changed+0x64>
 8012850:	2b00      	cmp	r3, #0
 8012852:	db09      	blt.n	8012868 <dhcp_network_changed+0x3c>
 8012854:	3b03      	subs	r3, #3
 8012856:	2b02      	cmp	r3, #2
 8012858:	d806      	bhi.n	8012868 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	2200      	movs	r2, #0
 801285e:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8012860:	6878      	ldr	r0, [r7, #4]
 8012862:	f000 fc43 	bl	80130ec <dhcp_reboot>
      break;
 8012866:	e014      	b.n	8012892 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	795b      	ldrb	r3, [r3, #5]
 801286c:	2b0c      	cmp	r3, #12
 801286e:	d906      	bls.n	801287e <dhcp_network_changed+0x52>
 8012870:	4b09      	ldr	r3, [pc, #36]	; (8012898 <dhcp_network_changed+0x6c>)
 8012872:	f240 326d 	movw	r2, #877	; 0x36d
 8012876:	4909      	ldr	r1, [pc, #36]	; (801289c <dhcp_network_changed+0x70>)
 8012878:	4809      	ldr	r0, [pc, #36]	; (80128a0 <dhcp_network_changed+0x74>)
 801287a:	f004 fc75 	bl	8017168 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	2200      	movs	r2, #0
 8012882:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8012884:	6878      	ldr	r0, [r7, #4]
 8012886:	f000 f8d7 	bl	8012a38 <dhcp_discover>
      break;
 801288a:	e002      	b.n	8012892 <dhcp_network_changed+0x66>
    return;
 801288c:	bf00      	nop
 801288e:	e000      	b.n	8012892 <dhcp_network_changed+0x66>
      break;
 8012890:	bf00      	nop
  }
}
 8012892:	3710      	adds	r7, #16
 8012894:	46bd      	mov	sp, r7
 8012896:	bd80      	pop	{r7, pc}
 8012898:	0801ad34 	.word	0x0801ad34
 801289c:	0801b39c 	.word	0x0801b39c
 80128a0:	0801ad94 	.word	0x0801ad94

080128a4 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80128a4:	b580      	push	{r7, lr}
 80128a6:	b084      	sub	sp, #16
 80128a8:	af00      	add	r7, sp, #0
 80128aa:	6078      	str	r0, [r7, #4]
 80128ac:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d107      	bne.n	80128c4 <dhcp_arp_reply+0x20>
 80128b4:	4b14      	ldr	r3, [pc, #80]	; (8012908 <dhcp_arp_reply+0x64>)
 80128b6:	f240 328b 	movw	r2, #907	; 0x38b
 80128ba:	4914      	ldr	r1, [pc, #80]	; (801290c <dhcp_arp_reply+0x68>)
 80128bc:	4814      	ldr	r0, [pc, #80]	; (8012910 <dhcp_arp_reply+0x6c>)
 80128be:	f004 fc53 	bl	8017168 <iprintf>
 80128c2:	e01e      	b.n	8012902 <dhcp_arp_reply+0x5e>
  dhcp = netif_dhcp_data(netif);
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128c8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
 80128ca:	4812      	ldr	r0, [pc, #72]	; (8012914 <dhcp_arp_reply+0x70>)
 80128cc:	f004 fce8 	bl	80172a0 <puts>
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d015      	beq.n	8012902 <dhcp_arp_reply+0x5e>
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	795b      	ldrb	r3, [r3, #5]
 80128da:	2b08      	cmp	r3, #8
 80128dc:	d111      	bne.n	8012902 <dhcp_arp_reply+0x5e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
 80128de:	683b      	ldr	r3, [r7, #0]
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	4619      	mov	r1, r3
 80128e4:	480c      	ldr	r0, [pc, #48]	; (8012918 <dhcp_arp_reply+0x74>)
 80128e6:	f004 fc3f 	bl	8017168 <iprintf>
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80128ea:	683b      	ldr	r3, [r7, #0]
 80128ec:	681a      	ldr	r2, [r3, #0]
 80128ee:	68fb      	ldr	r3, [r7, #12]
 80128f0:	69db      	ldr	r3, [r3, #28]
 80128f2:	429a      	cmp	r2, r3
 80128f4:	d105      	bne.n	8012902 <dhcp_arp_reply+0x5e>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
 80128f6:	4809      	ldr	r0, [pc, #36]	; (801291c <dhcp_arp_reply+0x78>)
 80128f8:	f004 fcd2 	bl	80172a0 <puts>
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80128fc:	6878      	ldr	r0, [r7, #4]
 80128fe:	f000 f80f 	bl	8012920 <dhcp_decline>
    }
  }
}
 8012902:	3710      	adds	r7, #16
 8012904:	46bd      	mov	sp, r7
 8012906:	bd80      	pop	{r7, pc}
 8012908:	0801ad34 	.word	0x0801ad34
 801290c:	0801b1c4 	.word	0x0801b1c4
 8012910:	0801ad94 	.word	0x0801ad94
 8012914:	0801b3b0 	.word	0x0801b3b0
 8012918:	0801b3c4 	.word	0x0801b3c4
 801291c:	0801b3f8 	.word	0x0801b3f8

08012920 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8012920:	b5b0      	push	{r4, r5, r7, lr}
 8012922:	b08a      	sub	sp, #40	; 0x28
 8012924:	af02      	add	r7, sp, #8
 8012926:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801292c:	61bb      	str	r3, [r7, #24]
  err_t result;
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
 801292e:	483a      	ldr	r0, [pc, #232]	; (8012a18 <dhcp_decline+0xf8>)
 8012930:	f004 fcb6 	bl	80172a0 <puts>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8012934:	210c      	movs	r1, #12
 8012936:	69b8      	ldr	r0, [r7, #24]
 8012938:	f000 fd4e 	bl	80133d8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801293c:	f107 030c 	add.w	r3, r7, #12
 8012940:	2204      	movs	r2, #4
 8012942:	69b9      	ldr	r1, [r7, #24]
 8012944:	6878      	ldr	r0, [r7, #4]
 8012946:	f001 fa93 	bl	8013e70 <dhcp_create_msg>
 801294a:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801294c:	697b      	ldr	r3, [r7, #20]
 801294e:	2b00      	cmp	r3, #0
 8012950:	d038      	beq.n	80129c4 <dhcp_decline+0xa4>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012952:	697b      	ldr	r3, [r7, #20]
 8012954:	685b      	ldr	r3, [r3, #4]
 8012956:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8012958:	89b8      	ldrh	r0, [r7, #12]
 801295a:	693b      	ldr	r3, [r7, #16]
 801295c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012960:	2304      	movs	r3, #4
 8012962:	2232      	movs	r2, #50	; 0x32
 8012964:	f000 fd52 	bl	801340c <dhcp_option>
 8012968:	4603      	mov	r3, r0
 801296a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801296c:	89bc      	ldrh	r4, [r7, #12]
 801296e:	693b      	ldr	r3, [r7, #16]
 8012970:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012974:	69bb      	ldr	r3, [r7, #24]
 8012976:	69db      	ldr	r3, [r3, #28]
 8012978:	4618      	mov	r0, r3
 801297a:	f7f6 fe56 	bl	800962a <lwip_htonl>
 801297e:	4603      	mov	r3, r0
 8012980:	461a      	mov	r2, r3
 8012982:	4629      	mov	r1, r5
 8012984:	4620      	mov	r0, r4
 8012986:	f000 fdcd 	bl	8013524 <dhcp_option_long>
 801298a:	4603      	mov	r3, r0
 801298c:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801298e:	89b8      	ldrh	r0, [r7, #12]
 8012990:	693b      	ldr	r3, [r7, #16]
 8012992:	33f0      	adds	r3, #240	; 0xf0
 8012994:	697a      	ldr	r2, [r7, #20]
 8012996:	4619      	mov	r1, r3
 8012998:	f001 fb4e 	bl	8014038 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801299c:	4b1f      	ldr	r3, [pc, #124]	; (8012a1c <dhcp_decline+0xfc>)
 801299e:	6818      	ldr	r0, [r3, #0]
 80129a0:	4b1f      	ldr	r3, [pc, #124]	; (8012a20 <dhcp_decline+0x100>)
 80129a2:	9301      	str	r3, [sp, #4]
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	9300      	str	r3, [sp, #0]
 80129a8:	2343      	movs	r3, #67	; 0x43
 80129aa:	4a1e      	ldr	r2, [pc, #120]	; (8012a24 <dhcp_decline+0x104>)
 80129ac:	6979      	ldr	r1, [r7, #20]
 80129ae:	f7fe ffa7 	bl	8011900 <udp_sendto_if_src>
 80129b2:	4603      	mov	r3, r0
 80129b4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80129b6:	6978      	ldr	r0, [r7, #20]
 80129b8:	f7f8 fe04 	bl	800b5c4 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
 80129bc:	481a      	ldr	r0, [pc, #104]	; (8012a28 <dhcp_decline+0x108>)
 80129be:	f004 fc6f 	bl	80172a0 <puts>
 80129c2:	e004      	b.n	80129ce <dhcp_decline+0xae>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 80129c4:	4819      	ldr	r0, [pc, #100]	; (8012a2c <dhcp_decline+0x10c>)
 80129c6:	f004 fc6b 	bl	80172a0 <puts>
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80129ca:	23ff      	movs	r3, #255	; 0xff
 80129cc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80129ce:	69bb      	ldr	r3, [r7, #24]
 80129d0:	799b      	ldrb	r3, [r3, #6]
 80129d2:	2bff      	cmp	r3, #255	; 0xff
 80129d4:	d005      	beq.n	80129e2 <dhcp_decline+0xc2>
    dhcp->tries++;
 80129d6:	69bb      	ldr	r3, [r7, #24]
 80129d8:	799b      	ldrb	r3, [r3, #6]
 80129da:	3301      	adds	r3, #1
 80129dc:	b2da      	uxtb	r2, r3
 80129de:	69bb      	ldr	r3, [r7, #24]
 80129e0:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80129e2:	f242 7310 	movw	r3, #10000	; 0x2710
 80129e6:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80129e8:	89fb      	ldrh	r3, [r7, #14]
 80129ea:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80129ee:	4a10      	ldr	r2, [pc, #64]	; (8012a30 <dhcp_decline+0x110>)
 80129f0:	fb82 1203 	smull	r1, r2, r2, r3
 80129f4:	1152      	asrs	r2, r2, #5
 80129f6:	17db      	asrs	r3, r3, #31
 80129f8:	1ad3      	subs	r3, r2, r3
 80129fa:	b29a      	uxth	r2, r3
 80129fc:	69bb      	ldr	r3, [r7, #24]
 80129fe:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
 8012a00:	89fb      	ldrh	r3, [r7, #14]
 8012a02:	4619      	mov	r1, r3
 8012a04:	480b      	ldr	r0, [pc, #44]	; (8012a34 <dhcp_decline+0x114>)
 8012a06:	f004 fbaf 	bl	8017168 <iprintf>
  return result;
 8012a0a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012a0e:	4618      	mov	r0, r3
 8012a10:	3720      	adds	r7, #32
 8012a12:	46bd      	mov	sp, r7
 8012a14:	bdb0      	pop	{r4, r5, r7, pc}
 8012a16:	bf00      	nop
 8012a18:	0801b43c 	.word	0x0801b43c
 8012a1c:	2000da80 	.word	0x2000da80
 8012a20:	0801d628 	.word	0x0801d628
 8012a24:	0801d62c 	.word	0x0801d62c
 8012a28:	0801b44c 	.word	0x0801b44c
 8012a2c:	0801b468 	.word	0x0801b468
 8012a30:	10624dd3 	.word	0x10624dd3
 8012a34:	0801b498 	.word	0x0801b498

08012a38 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8012a38:	b580      	push	{r7, lr}
 8012a3a:	b08a      	sub	sp, #40	; 0x28
 8012a3c:	af02      	add	r7, sp, #8
 8012a3e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a44:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8012a46:	2300      	movs	r3, #0
 8012a48:	75fb      	strb	r3, [r7, #23]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
 8012a4a:	4853      	ldr	r0, [pc, #332]	; (8012b98 <dhcp_discover+0x160>)
 8012a4c:	f004 fc28 	bl	80172a0 <puts>

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8012a50:	69bb      	ldr	r3, [r7, #24]
 8012a52:	2200      	movs	r2, #0
 8012a54:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8012a56:	2106      	movs	r1, #6
 8012a58:	69b8      	ldr	r0, [r7, #24]
 8012a5a:	f000 fcbd 	bl	80133d8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8012a5e:	f107 0308 	add.w	r3, r7, #8
 8012a62:	2201      	movs	r2, #1
 8012a64:	69b9      	ldr	r1, [r7, #24]
 8012a66:	6878      	ldr	r0, [r7, #4]
 8012a68:	f001 fa02 	bl	8013e70 <dhcp_create_msg>
 8012a6c:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8012a6e:	693b      	ldr	r3, [r7, #16]
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d058      	beq.n	8012b26 <dhcp_discover+0xee>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012a74:	693b      	ldr	r3, [r7, #16]
 8012a76:	685b      	ldr	r3, [r3, #4]
 8012a78:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));
 8012a7a:	4848      	ldr	r0, [pc, #288]	; (8012b9c <dhcp_discover+0x164>)
 8012a7c:	f004 fc10 	bl	80172a0 <puts>

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012a80:	8938      	ldrh	r0, [r7, #8]
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012a88:	2302      	movs	r3, #2
 8012a8a:	2239      	movs	r2, #57	; 0x39
 8012a8c:	f000 fcbe 	bl	801340c <dhcp_option>
 8012a90:	4603      	mov	r3, r0
 8012a92:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012a94:	8938      	ldrh	r0, [r7, #8]
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012aa0:	461a      	mov	r2, r3
 8012aa2:	f000 fd0d 	bl	80134c0 <dhcp_option_short>
 8012aa6:	4603      	mov	r3, r0
 8012aa8:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012aaa:	8938      	ldrh	r0, [r7, #8]
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012ab2:	2304      	movs	r3, #4
 8012ab4:	2237      	movs	r2, #55	; 0x37
 8012ab6:	f000 fca9 	bl	801340c <dhcp_option>
 8012aba:	4603      	mov	r3, r0
 8012abc:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012abe:	2300      	movs	r3, #0
 8012ac0:	77fb      	strb	r3, [r7, #31]
 8012ac2:	e00e      	b.n	8012ae2 <dhcp_discover+0xaa>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012ac4:	8938      	ldrh	r0, [r7, #8]
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012acc:	7ffb      	ldrb	r3, [r7, #31]
 8012ace:	4a34      	ldr	r2, [pc, #208]	; (8012ba0 <dhcp_discover+0x168>)
 8012ad0:	5cd3      	ldrb	r3, [r2, r3]
 8012ad2:	461a      	mov	r2, r3
 8012ad4:	f000 fcce 	bl	8013474 <dhcp_option_byte>
 8012ad8:	4603      	mov	r3, r0
 8012ada:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012adc:	7ffb      	ldrb	r3, [r7, #31]
 8012ade:	3301      	adds	r3, #1
 8012ae0:	77fb      	strb	r3, [r7, #31]
 8012ae2:	7ffb      	ldrb	r3, [r7, #31]
 8012ae4:	2b03      	cmp	r3, #3
 8012ae6:	d9ed      	bls.n	8012ac4 <dhcp_discover+0x8c>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012ae8:	8938      	ldrh	r0, [r7, #8]
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	33f0      	adds	r3, #240	; 0xf0
 8012aee:	693a      	ldr	r2, [r7, #16]
 8012af0:	4619      	mov	r1, r3
 8012af2:	f001 faa1 	bl	8014038 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
 8012af6:	482b      	ldr	r0, [pc, #172]	; (8012ba4 <dhcp_discover+0x16c>)
 8012af8:	f004 fbd2 	bl	80172a0 <puts>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8012afc:	4b2a      	ldr	r3, [pc, #168]	; (8012ba8 <dhcp_discover+0x170>)
 8012afe:	6818      	ldr	r0, [r3, #0]
 8012b00:	4b2a      	ldr	r3, [pc, #168]	; (8012bac <dhcp_discover+0x174>)
 8012b02:	9301      	str	r3, [sp, #4]
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	9300      	str	r3, [sp, #0]
 8012b08:	2343      	movs	r3, #67	; 0x43
 8012b0a:	4a29      	ldr	r2, [pc, #164]	; (8012bb0 <dhcp_discover+0x178>)
 8012b0c:	6939      	ldr	r1, [r7, #16]
 8012b0e:	f7fe fef7 	bl	8011900 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
 8012b12:	4828      	ldr	r0, [pc, #160]	; (8012bb4 <dhcp_discover+0x17c>)
 8012b14:	f004 fbc4 	bl	80172a0 <puts>
    pbuf_free(p_out);
 8012b18:	6938      	ldr	r0, [r7, #16]
 8012b1a:	f7f8 fd53 	bl	800b5c4 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
 8012b1e:	4826      	ldr	r0, [pc, #152]	; (8012bb8 <dhcp_discover+0x180>)
 8012b20:	f004 fbbe 	bl	80172a0 <puts>
 8012b24:	e002      	b.n	8012b2c <dhcp_discover+0xf4>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
 8012b26:	4825      	ldr	r0, [pc, #148]	; (8012bbc <dhcp_discover+0x184>)
 8012b28:	f004 fbba 	bl	80172a0 <puts>
  }
  if (dhcp->tries < 255) {
 8012b2c:	69bb      	ldr	r3, [r7, #24]
 8012b2e:	799b      	ldrb	r3, [r3, #6]
 8012b30:	2bff      	cmp	r3, #255	; 0xff
 8012b32:	d005      	beq.n	8012b40 <dhcp_discover+0x108>
    dhcp->tries++;
 8012b34:	69bb      	ldr	r3, [r7, #24]
 8012b36:	799b      	ldrb	r3, [r3, #6]
 8012b38:	3301      	adds	r3, #1
 8012b3a:	b2da      	uxtb	r2, r3
 8012b3c:	69bb      	ldr	r3, [r7, #24]
 8012b3e:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8012b40:	69bb      	ldr	r3, [r7, #24]
 8012b42:	799b      	ldrb	r3, [r3, #6]
 8012b44:	2b05      	cmp	r3, #5
 8012b46:	d80d      	bhi.n	8012b64 <dhcp_discover+0x12c>
 8012b48:	69bb      	ldr	r3, [r7, #24]
 8012b4a:	799b      	ldrb	r3, [r3, #6]
 8012b4c:	461a      	mov	r2, r3
 8012b4e:	2301      	movs	r3, #1
 8012b50:	4093      	lsls	r3, r2
 8012b52:	b29b      	uxth	r3, r3
 8012b54:	461a      	mov	r2, r3
 8012b56:	0152      	lsls	r2, r2, #5
 8012b58:	1ad2      	subs	r2, r2, r3
 8012b5a:	0092      	lsls	r2, r2, #2
 8012b5c:	4413      	add	r3, r2
 8012b5e:	00db      	lsls	r3, r3, #3
 8012b60:	b29b      	uxth	r3, r3
 8012b62:	e001      	b.n	8012b68 <dhcp_discover+0x130>
 8012b64:	f64e 2360 	movw	r3, #60000	; 0xea60
 8012b68:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012b6a:	897b      	ldrh	r3, [r7, #10]
 8012b6c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012b70:	4a13      	ldr	r2, [pc, #76]	; (8012bc0 <dhcp_discover+0x188>)
 8012b72:	fb82 1203 	smull	r1, r2, r2, r3
 8012b76:	1152      	asrs	r2, r2, #5
 8012b78:	17db      	asrs	r3, r3, #31
 8012b7a:	1ad3      	subs	r3, r2, r3
 8012b7c:	b29a      	uxth	r2, r3
 8012b7e:	69bb      	ldr	r3, [r7, #24]
 8012b80:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
 8012b82:	897b      	ldrh	r3, [r7, #10]
 8012b84:	4619      	mov	r1, r3
 8012b86:	480f      	ldr	r0, [pc, #60]	; (8012bc4 <dhcp_discover+0x18c>)
 8012b88:	f004 faee 	bl	8017168 <iprintf>
  return result;
 8012b8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012b90:	4618      	mov	r0, r3
 8012b92:	3720      	adds	r7, #32
 8012b94:	46bd      	mov	sp, r7
 8012b96:	bd80      	pop	{r7, pc}
 8012b98:	0801b4c8 	.word	0x0801b4c8
 8012b9c:	0801b4d8 	.word	0x0801b4d8
 8012ba0:	20000074 	.word	0x20000074
 8012ba4:	0801b4f8 	.word	0x0801b4f8
 8012ba8:	2000da80 	.word	0x2000da80
 8012bac:	0801d628 	.word	0x0801d628
 8012bb0:	0801d62c 	.word	0x0801d62c
 8012bb4:	0801b548 	.word	0x0801b548
 8012bb8:	0801b568 	.word	0x0801b568
 8012bbc:	0801b584 	.word	0x0801b584
 8012bc0:	10624dd3 	.word	0x10624dd3
 8012bc4:	0801b5b4 	.word	0x0801b5b4

08012bc8 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8012bc8:	b580      	push	{r7, lr}
 8012bca:	b08a      	sub	sp, #40	; 0x28
 8012bcc:	af02      	add	r7, sp, #8
 8012bce:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d107      	bne.n	8012be6 <dhcp_bind+0x1e>
 8012bd6:	4b88      	ldr	r3, [pc, #544]	; (8012df8 <dhcp_bind+0x230>)
 8012bd8:	f240 4215 	movw	r2, #1045	; 0x415
 8012bdc:	4987      	ldr	r1, [pc, #540]	; (8012dfc <dhcp_bind+0x234>)
 8012bde:	4888      	ldr	r0, [pc, #544]	; (8012e00 <dhcp_bind+0x238>)
 8012be0:	f004 fac2 	bl	8017168 <iprintf>
 8012be4:	e104      	b.n	8012df0 <dhcp_bind+0x228>
  dhcp = netif_dhcp_data(netif);
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bea:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8012bec:	69bb      	ldr	r3, [r7, #24]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d107      	bne.n	8012c02 <dhcp_bind+0x3a>
 8012bf2:	4b81      	ldr	r3, [pc, #516]	; (8012df8 <dhcp_bind+0x230>)
 8012bf4:	f240 4217 	movw	r2, #1047	; 0x417
 8012bf8:	4982      	ldr	r1, [pc, #520]	; (8012e04 <dhcp_bind+0x23c>)
 8012bfa:	4881      	ldr	r0, [pc, #516]	; (8012e00 <dhcp_bind+0x238>)
 8012bfc:	f004 fab4 	bl	8017168 <iprintf>
 8012c00:	e0f6      	b.n	8012df0 <dhcp_bind+0x228>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8012c08:	461a      	mov	r2, r3
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8012c10:	4619      	mov	r1, r3
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012c18:	9300      	str	r3, [sp, #0]
 8012c1a:	460b      	mov	r3, r1
 8012c1c:	6879      	ldr	r1, [r7, #4]
 8012c1e:	487a      	ldr	r0, [pc, #488]	; (8012e08 <dhcp_bind+0x240>)
 8012c20:	f004 faa2 	bl	8017168 <iprintf>

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8012c24:	69bb      	ldr	r3, [r7, #24]
 8012c26:	2200      	movs	r2, #0
 8012c28:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8012c2a:	69bb      	ldr	r3, [r7, #24]
 8012c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c32:	d029      	beq.n	8012c88 <dhcp_bind+0xc0>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
 8012c34:	69bb      	ldr	r3, [r7, #24]
 8012c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c38:	4619      	mov	r1, r3
 8012c3a:	4874      	ldr	r0, [pc, #464]	; (8012e0c <dhcp_bind+0x244>)
 8012c3c:	f004 fa94 	bl	8017168 <iprintf>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8012c40:	69bb      	ldr	r3, [r7, #24]
 8012c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c44:	331e      	adds	r3, #30
 8012c46:	4a72      	ldr	r2, [pc, #456]	; (8012e10 <dhcp_bind+0x248>)
 8012c48:	fba2 2303 	umull	r2, r3, r2, r3
 8012c4c:	095b      	lsrs	r3, r3, #5
 8012c4e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8012c50:	69fb      	ldr	r3, [r7, #28]
 8012c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012c56:	d302      	bcc.n	8012c5e <dhcp_bind+0x96>
      timeout = 0xffff;
 8012c58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012c5c:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8012c5e:	69fb      	ldr	r3, [r7, #28]
 8012c60:	b29a      	uxth	r2, r3
 8012c62:	69bb      	ldr	r3, [r7, #24]
 8012c64:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8012c66:	69bb      	ldr	r3, [r7, #24]
 8012c68:	8a9b      	ldrh	r3, [r3, #20]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d102      	bne.n	8012c74 <dhcp_bind+0xac>
      dhcp->t0_timeout = 1;
 8012c6e:	69bb      	ldr	r3, [r7, #24]
 8012c70:	2201      	movs	r2, #1
 8012c72:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
 8012c74:	69bb      	ldr	r3, [r7, #24]
 8012c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012c7c:	fb02 f303 	mul.w	r3, r2, r3
 8012c80:	4619      	mov	r1, r3
 8012c82:	4864      	ldr	r0, [pc, #400]	; (8012e14 <dhcp_bind+0x24c>)
 8012c84:	f004 fa70 	bl	8017168 <iprintf>
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8012c88:	69bb      	ldr	r3, [r7, #24]
 8012c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c90:	d02d      	beq.n	8012cee <dhcp_bind+0x126>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
 8012c92:	69bb      	ldr	r3, [r7, #24]
 8012c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c96:	4619      	mov	r1, r3
 8012c98:	485f      	ldr	r0, [pc, #380]	; (8012e18 <dhcp_bind+0x250>)
 8012c9a:	f004 fa65 	bl	8017168 <iprintf>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8012c9e:	69bb      	ldr	r3, [r7, #24]
 8012ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ca2:	331e      	adds	r3, #30
 8012ca4:	4a5a      	ldr	r2, [pc, #360]	; (8012e10 <dhcp_bind+0x248>)
 8012ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8012caa:	095b      	lsrs	r3, r3, #5
 8012cac:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8012cae:	69fb      	ldr	r3, [r7, #28]
 8012cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012cb4:	d302      	bcc.n	8012cbc <dhcp_bind+0xf4>
      timeout = 0xffff;
 8012cb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012cba:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8012cbc:	69fb      	ldr	r3, [r7, #28]
 8012cbe:	b29a      	uxth	r2, r3
 8012cc0:	69bb      	ldr	r3, [r7, #24]
 8012cc2:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8012cc4:	69bb      	ldr	r3, [r7, #24]
 8012cc6:	895b      	ldrh	r3, [r3, #10]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d102      	bne.n	8012cd2 <dhcp_bind+0x10a>
      dhcp->t1_timeout = 1;
 8012ccc:	69bb      	ldr	r3, [r7, #24]
 8012cce:	2201      	movs	r2, #1
 8012cd0:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
 8012cd2:	69bb      	ldr	r3, [r7, #24]
 8012cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012cda:	fb02 f303 	mul.w	r3, r2, r3
 8012cde:	4619      	mov	r1, r3
 8012ce0:	484c      	ldr	r0, [pc, #304]	; (8012e14 <dhcp_bind+0x24c>)
 8012ce2:	f004 fa41 	bl	8017168 <iprintf>
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8012ce6:	69bb      	ldr	r3, [r7, #24]
 8012ce8:	895a      	ldrh	r2, [r3, #10]
 8012cea:	69bb      	ldr	r3, [r7, #24]
 8012cec:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8012cee:	69bb      	ldr	r3, [r7, #24]
 8012cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cf6:	d02d      	beq.n	8012d54 <dhcp_bind+0x18c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
 8012cf8:	69bb      	ldr	r3, [r7, #24]
 8012cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cfc:	4619      	mov	r1, r3
 8012cfe:	4847      	ldr	r0, [pc, #284]	; (8012e1c <dhcp_bind+0x254>)
 8012d00:	f004 fa32 	bl	8017168 <iprintf>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8012d04:	69bb      	ldr	r3, [r7, #24]
 8012d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d08:	331e      	adds	r3, #30
 8012d0a:	4a41      	ldr	r2, [pc, #260]	; (8012e10 <dhcp_bind+0x248>)
 8012d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8012d10:	095b      	lsrs	r3, r3, #5
 8012d12:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8012d14:	69fb      	ldr	r3, [r7, #28]
 8012d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012d1a:	d302      	bcc.n	8012d22 <dhcp_bind+0x15a>
      timeout = 0xffff;
 8012d1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012d20:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8012d22:	69fb      	ldr	r3, [r7, #28]
 8012d24:	b29a      	uxth	r2, r3
 8012d26:	69bb      	ldr	r3, [r7, #24]
 8012d28:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8012d2a:	69bb      	ldr	r3, [r7, #24]
 8012d2c:	899b      	ldrh	r3, [r3, #12]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d102      	bne.n	8012d38 <dhcp_bind+0x170>
      dhcp->t2_timeout = 1;
 8012d32:	69bb      	ldr	r3, [r7, #24]
 8012d34:	2201      	movs	r2, #1
 8012d36:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
 8012d38:	69bb      	ldr	r3, [r7, #24]
 8012d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012d40:	fb02 f303 	mul.w	r3, r2, r3
 8012d44:	4619      	mov	r1, r3
 8012d46:	4833      	ldr	r0, [pc, #204]	; (8012e14 <dhcp_bind+0x24c>)
 8012d48:	f004 fa0e 	bl	8017168 <iprintf>
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8012d4c:	69bb      	ldr	r3, [r7, #24]
 8012d4e:	899a      	ldrh	r2, [r3, #12]
 8012d50:	69bb      	ldr	r3, [r7, #24]
 8012d52:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8012d54:	69bb      	ldr	r3, [r7, #24]
 8012d56:	895a      	ldrh	r2, [r3, #10]
 8012d58:	69bb      	ldr	r3, [r7, #24]
 8012d5a:	899b      	ldrh	r3, [r3, #12]
 8012d5c:	429a      	cmp	r2, r3
 8012d5e:	d306      	bcc.n	8012d6e <dhcp_bind+0x1a6>
 8012d60:	69bb      	ldr	r3, [r7, #24]
 8012d62:	899b      	ldrh	r3, [r3, #12]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d002      	beq.n	8012d6e <dhcp_bind+0x1a6>
    dhcp->t1_timeout = 0;
 8012d68:	69bb      	ldr	r3, [r7, #24]
 8012d6a:	2200      	movs	r2, #0
 8012d6c:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8012d6e:	69bb      	ldr	r3, [r7, #24]
 8012d70:	79db      	ldrb	r3, [r3, #7]
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d003      	beq.n	8012d7e <dhcp_bind+0x1b6>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8012d76:	69bb      	ldr	r3, [r7, #24]
 8012d78:	6a1b      	ldr	r3, [r3, #32]
 8012d7a:	613b      	str	r3, [r7, #16]
 8012d7c:	e014      	b.n	8012da8 <dhcp_bind+0x1e0>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8012d7e:	69bb      	ldr	r3, [r7, #24]
 8012d80:	331c      	adds	r3, #28
 8012d82:	781b      	ldrb	r3, [r3, #0]
 8012d84:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8012d86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	db02      	blt.n	8012d94 <dhcp_bind+0x1cc>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8012d8e:	23ff      	movs	r3, #255	; 0xff
 8012d90:	613b      	str	r3, [r7, #16]
 8012d92:	e009      	b.n	8012da8 <dhcp_bind+0x1e0>
    } else if (first_octet >= 192) {
 8012d94:	7dfb      	ldrb	r3, [r7, #23]
 8012d96:	2bbf      	cmp	r3, #191	; 0xbf
 8012d98:	d903      	bls.n	8012da2 <dhcp_bind+0x1da>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8012d9a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012d9e:	613b      	str	r3, [r7, #16]
 8012da0:	e002      	b.n	8012da8 <dhcp_bind+0x1e0>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8012da2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012da6:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8012da8:	69bb      	ldr	r3, [r7, #24]
 8012daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dac:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d108      	bne.n	8012dc6 <dhcp_bind+0x1fe>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8012db4:	69bb      	ldr	r3, [r7, #24]
 8012db6:	69da      	ldr	r2, [r3, #28]
 8012db8:	693b      	ldr	r3, [r7, #16]
 8012dba:	4013      	ands	r3, r2
 8012dbc:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012dc4:	60fb      	str	r3, [r7, #12]
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
 8012dc6:	69bb      	ldr	r3, [r7, #24]
 8012dc8:	69d9      	ldr	r1, [r3, #28]
 8012dca:	693a      	ldr	r2, [r7, #16]
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	4814      	ldr	r0, [pc, #80]	; (8012e20 <dhcp_bind+0x258>)
 8012dd0:	f004 f9ca 	bl	8017168 <iprintf>
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8012dd4:	210a      	movs	r1, #10
 8012dd6:	69b8      	ldr	r0, [r7, #24]
 8012dd8:	f000 fafe 	bl	80133d8 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8012ddc:	69bb      	ldr	r3, [r7, #24]
 8012dde:	f103 011c 	add.w	r1, r3, #28
 8012de2:	f107 030c 	add.w	r3, r7, #12
 8012de6:	f107 0210 	add.w	r2, r7, #16
 8012dea:	6878      	ldr	r0, [r7, #4]
 8012dec:	f7f7 fec8 	bl	800ab80 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8012df0:	3720      	adds	r7, #32
 8012df2:	46bd      	mov	sp, r7
 8012df4:	bd80      	pop	{r7, pc}
 8012df6:	bf00      	nop
 8012df8:	0801ad34 	.word	0x0801ad34
 8012dfc:	0801b5e4 	.word	0x0801b5e4
 8012e00:	0801ad94 	.word	0x0801ad94
 8012e04:	0801b600 	.word	0x0801b600
 8012e08:	0801b618 	.word	0x0801b618
 8012e0c:	0801b638 	.word	0x0801b638
 8012e10:	88888889 	.word	0x88888889
 8012e14:	0801b660 	.word	0x0801b660
 8012e18:	0801b68c 	.word	0x0801b68c
 8012e1c:	0801b6b4 	.word	0x0801b6b4
 8012e20:	0801b6dc 	.word	0x0801b6dc

08012e24 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8012e24:	b580      	push	{r7, lr}
 8012e26:	b08a      	sub	sp, #40	; 0x28
 8012e28:	af02      	add	r7, sp, #8
 8012e2a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e30:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
 8012e32:	484e      	ldr	r0, [pc, #312]	; (8012f6c <dhcp_renew+0x148>)
 8012e34:	f004 fa34 	bl	80172a0 <puts>
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8012e38:	2105      	movs	r1, #5
 8012e3a:	69b8      	ldr	r0, [r7, #24]
 8012e3c:	f000 facc 	bl	80133d8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012e40:	f107 030c 	add.w	r3, r7, #12
 8012e44:	2203      	movs	r2, #3
 8012e46:	69b9      	ldr	r1, [r7, #24]
 8012e48:	6878      	ldr	r0, [r7, #4]
 8012e4a:	f001 f811 	bl	8013e70 <dhcp_create_msg>
 8012e4e:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012e50:	697b      	ldr	r3, [r7, #20]
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d051      	beq.n	8012efa <dhcp_renew+0xd6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012e56:	697b      	ldr	r3, [r7, #20]
 8012e58:	685b      	ldr	r3, [r3, #4]
 8012e5a:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012e5c:	89b8      	ldrh	r0, [r7, #12]
 8012e5e:	693b      	ldr	r3, [r7, #16]
 8012e60:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012e64:	2302      	movs	r3, #2
 8012e66:	2239      	movs	r2, #57	; 0x39
 8012e68:	f000 fad0 	bl	801340c <dhcp_option>
 8012e6c:	4603      	mov	r3, r0
 8012e6e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012e70:	89b8      	ldrh	r0, [r7, #12]
 8012e72:	693b      	ldr	r3, [r7, #16]
 8012e74:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012e7c:	461a      	mov	r2, r3
 8012e7e:	f000 fb1f 	bl	80134c0 <dhcp_option_short>
 8012e82:	4603      	mov	r3, r0
 8012e84:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012e86:	89b8      	ldrh	r0, [r7, #12]
 8012e88:	693b      	ldr	r3, [r7, #16]
 8012e8a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012e8e:	2304      	movs	r3, #4
 8012e90:	2237      	movs	r2, #55	; 0x37
 8012e92:	f000 fabb 	bl	801340c <dhcp_option>
 8012e96:	4603      	mov	r3, r0
 8012e98:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	77bb      	strb	r3, [r7, #30]
 8012e9e:	e00e      	b.n	8012ebe <dhcp_renew+0x9a>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012ea0:	89b8      	ldrh	r0, [r7, #12]
 8012ea2:	693b      	ldr	r3, [r7, #16]
 8012ea4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012ea8:	7fbb      	ldrb	r3, [r7, #30]
 8012eaa:	4a31      	ldr	r2, [pc, #196]	; (8012f70 <dhcp_renew+0x14c>)
 8012eac:	5cd3      	ldrb	r3, [r2, r3]
 8012eae:	461a      	mov	r2, r3
 8012eb0:	f000 fae0 	bl	8013474 <dhcp_option_byte>
 8012eb4:	4603      	mov	r3, r0
 8012eb6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012eb8:	7fbb      	ldrb	r3, [r7, #30]
 8012eba:	3301      	adds	r3, #1
 8012ebc:	77bb      	strb	r3, [r7, #30]
 8012ebe:	7fbb      	ldrb	r3, [r7, #30]
 8012ec0:	2b03      	cmp	r3, #3
 8012ec2:	d9ed      	bls.n	8012ea0 <dhcp_renew+0x7c>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012ec4:	89b8      	ldrh	r0, [r7, #12]
 8012ec6:	693b      	ldr	r3, [r7, #16]
 8012ec8:	33f0      	adds	r3, #240	; 0xf0
 8012eca:	697a      	ldr	r2, [r7, #20]
 8012ecc:	4619      	mov	r1, r3
 8012ece:	f001 f8b3 	bl	8014038 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8012ed2:	4b28      	ldr	r3, [pc, #160]	; (8012f74 <dhcp_renew+0x150>)
 8012ed4:	6818      	ldr	r0, [r3, #0]
 8012ed6:	69bb      	ldr	r3, [r7, #24]
 8012ed8:	f103 0218 	add.w	r2, r3, #24
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	9300      	str	r3, [sp, #0]
 8012ee0:	2343      	movs	r3, #67	; 0x43
 8012ee2:	6979      	ldr	r1, [r7, #20]
 8012ee4:	f7fe fc98 	bl	8011818 <udp_sendto_if>
 8012ee8:	4603      	mov	r3, r0
 8012eea:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012eec:	6978      	ldr	r0, [r7, #20]
 8012eee:	f7f8 fb69 	bl	800b5c4 <pbuf_free>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
 8012ef2:	4821      	ldr	r0, [pc, #132]	; (8012f78 <dhcp_renew+0x154>)
 8012ef4:	f004 f9d4 	bl	80172a0 <puts>
 8012ef8:	e004      	b.n	8012f04 <dhcp_renew+0xe0>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
 8012efa:	4820      	ldr	r0, [pc, #128]	; (8012f7c <dhcp_renew+0x158>)
 8012efc:	f004 f9d0 	bl	80172a0 <puts>
    result = ERR_MEM;
 8012f00:	23ff      	movs	r3, #255	; 0xff
 8012f02:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012f04:	69bb      	ldr	r3, [r7, #24]
 8012f06:	799b      	ldrb	r3, [r3, #6]
 8012f08:	2bff      	cmp	r3, #255	; 0xff
 8012f0a:	d005      	beq.n	8012f18 <dhcp_renew+0xf4>
    dhcp->tries++;
 8012f0c:	69bb      	ldr	r3, [r7, #24]
 8012f0e:	799b      	ldrb	r3, [r3, #6]
 8012f10:	3301      	adds	r3, #1
 8012f12:	b2da      	uxtb	r2, r3
 8012f14:	69bb      	ldr	r3, [r7, #24]
 8012f16:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8012f18:	69bb      	ldr	r3, [r7, #24]
 8012f1a:	799b      	ldrb	r3, [r3, #6]
 8012f1c:	2b09      	cmp	r3, #9
 8012f1e:	d80a      	bhi.n	8012f36 <dhcp_renew+0x112>
 8012f20:	69bb      	ldr	r3, [r7, #24]
 8012f22:	799b      	ldrb	r3, [r3, #6]
 8012f24:	b29b      	uxth	r3, r3
 8012f26:	461a      	mov	r2, r3
 8012f28:	0152      	lsls	r2, r2, #5
 8012f2a:	1ad2      	subs	r2, r2, r3
 8012f2c:	0092      	lsls	r2, r2, #2
 8012f2e:	4413      	add	r3, r2
 8012f30:	011b      	lsls	r3, r3, #4
 8012f32:	b29b      	uxth	r3, r3
 8012f34:	e001      	b.n	8012f3a <dhcp_renew+0x116>
 8012f36:	f644 6320 	movw	r3, #20000	; 0x4e20
 8012f3a:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012f3c:	89fb      	ldrh	r3, [r7, #14]
 8012f3e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012f42:	4a0f      	ldr	r2, [pc, #60]	; (8012f80 <dhcp_renew+0x15c>)
 8012f44:	fb82 1203 	smull	r1, r2, r2, r3
 8012f48:	1152      	asrs	r2, r2, #5
 8012f4a:	17db      	asrs	r3, r3, #31
 8012f4c:	1ad3      	subs	r3, r2, r3
 8012f4e:	b29a      	uxth	r2, r3
 8012f50:	69bb      	ldr	r3, [r7, #24]
 8012f52:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
 8012f54:	89fb      	ldrh	r3, [r7, #14]
 8012f56:	4619      	mov	r1, r3
 8012f58:	480a      	ldr	r0, [pc, #40]	; (8012f84 <dhcp_renew+0x160>)
 8012f5a:	f004 f905 	bl	8017168 <iprintf>
  return result;
 8012f5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012f62:	4618      	mov	r0, r3
 8012f64:	3720      	adds	r7, #32
 8012f66:	46bd      	mov	sp, r7
 8012f68:	bd80      	pop	{r7, pc}
 8012f6a:	bf00      	nop
 8012f6c:	0801b710 	.word	0x0801b710
 8012f70:	20000074 	.word	0x20000074
 8012f74:	2000da80 	.word	0x2000da80
 8012f78:	0801b720 	.word	0x0801b720
 8012f7c:	0801b738 	.word	0x0801b738
 8012f80:	10624dd3 	.word	0x10624dd3
 8012f84:	0801b764 	.word	0x0801b764

08012f88 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8012f88:	b580      	push	{r7, lr}
 8012f8a:	b08a      	sub	sp, #40	; 0x28
 8012f8c:	af02      	add	r7, sp, #8
 8012f8e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f94:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
 8012f96:	484d      	ldr	r0, [pc, #308]	; (80130cc <dhcp_rebind+0x144>)
 8012f98:	f004 f982 	bl	80172a0 <puts>
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8012f9c:	2104      	movs	r1, #4
 8012f9e:	69b8      	ldr	r0, [r7, #24]
 8012fa0:	f000 fa1a 	bl	80133d8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012fa4:	f107 030c 	add.w	r3, r7, #12
 8012fa8:	2203      	movs	r2, #3
 8012faa:	69b9      	ldr	r1, [r7, #24]
 8012fac:	6878      	ldr	r0, [r7, #4]
 8012fae:	f000 ff5f 	bl	8013e70 <dhcp_create_msg>
 8012fb2:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012fb4:	697b      	ldr	r3, [r7, #20]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d04f      	beq.n	801305a <dhcp_rebind+0xd2>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012fba:	697b      	ldr	r3, [r7, #20]
 8012fbc:	685b      	ldr	r3, [r3, #4]
 8012fbe:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012fc0:	89b8      	ldrh	r0, [r7, #12]
 8012fc2:	693b      	ldr	r3, [r7, #16]
 8012fc4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012fc8:	2302      	movs	r3, #2
 8012fca:	2239      	movs	r2, #57	; 0x39
 8012fcc:	f000 fa1e 	bl	801340c <dhcp_option>
 8012fd0:	4603      	mov	r3, r0
 8012fd2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012fd4:	89b8      	ldrh	r0, [r7, #12]
 8012fd6:	693b      	ldr	r3, [r7, #16]
 8012fd8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012fe0:	461a      	mov	r2, r3
 8012fe2:	f000 fa6d 	bl	80134c0 <dhcp_option_short>
 8012fe6:	4603      	mov	r3, r0
 8012fe8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012fea:	89b8      	ldrh	r0, [r7, #12]
 8012fec:	693b      	ldr	r3, [r7, #16]
 8012fee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012ff2:	2304      	movs	r3, #4
 8012ff4:	2237      	movs	r2, #55	; 0x37
 8012ff6:	f000 fa09 	bl	801340c <dhcp_option>
 8012ffa:	4603      	mov	r3, r0
 8012ffc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012ffe:	2300      	movs	r3, #0
 8013000:	77bb      	strb	r3, [r7, #30]
 8013002:	e00e      	b.n	8013022 <dhcp_rebind+0x9a>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013004:	89b8      	ldrh	r0, [r7, #12]
 8013006:	693b      	ldr	r3, [r7, #16]
 8013008:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801300c:	7fbb      	ldrb	r3, [r7, #30]
 801300e:	4a30      	ldr	r2, [pc, #192]	; (80130d0 <dhcp_rebind+0x148>)
 8013010:	5cd3      	ldrb	r3, [r2, r3]
 8013012:	461a      	mov	r2, r3
 8013014:	f000 fa2e 	bl	8013474 <dhcp_option_byte>
 8013018:	4603      	mov	r3, r0
 801301a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801301c:	7fbb      	ldrb	r3, [r7, #30]
 801301e:	3301      	adds	r3, #1
 8013020:	77bb      	strb	r3, [r7, #30]
 8013022:	7fbb      	ldrb	r3, [r7, #30]
 8013024:	2b03      	cmp	r3, #3
 8013026:	d9ed      	bls.n	8013004 <dhcp_rebind+0x7c>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013028:	89b8      	ldrh	r0, [r7, #12]
 801302a:	693b      	ldr	r3, [r7, #16]
 801302c:	33f0      	adds	r3, #240	; 0xf0
 801302e:	697a      	ldr	r2, [r7, #20]
 8013030:	4619      	mov	r1, r3
 8013032:	f001 f801 	bl	8014038 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013036:	4b27      	ldr	r3, [pc, #156]	; (80130d4 <dhcp_rebind+0x14c>)
 8013038:	6818      	ldr	r0, [r3, #0]
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	9300      	str	r3, [sp, #0]
 801303e:	2343      	movs	r3, #67	; 0x43
 8013040:	4a25      	ldr	r2, [pc, #148]	; (80130d8 <dhcp_rebind+0x150>)
 8013042:	6979      	ldr	r1, [r7, #20]
 8013044:	f7fe fbe8 	bl	8011818 <udp_sendto_if>
 8013048:	4603      	mov	r3, r0
 801304a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801304c:	6978      	ldr	r0, [r7, #20]
 801304e:	f7f8 fab9 	bl	800b5c4 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
 8013052:	4822      	ldr	r0, [pc, #136]	; (80130dc <dhcp_rebind+0x154>)
 8013054:	f004 f924 	bl	80172a0 <puts>
 8013058:	e004      	b.n	8013064 <dhcp_rebind+0xdc>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
 801305a:	4821      	ldr	r0, [pc, #132]	; (80130e0 <dhcp_rebind+0x158>)
 801305c:	f004 f920 	bl	80172a0 <puts>
    result = ERR_MEM;
 8013060:	23ff      	movs	r3, #255	; 0xff
 8013062:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013064:	69bb      	ldr	r3, [r7, #24]
 8013066:	799b      	ldrb	r3, [r3, #6]
 8013068:	2bff      	cmp	r3, #255	; 0xff
 801306a:	d005      	beq.n	8013078 <dhcp_rebind+0xf0>
    dhcp->tries++;
 801306c:	69bb      	ldr	r3, [r7, #24]
 801306e:	799b      	ldrb	r3, [r3, #6]
 8013070:	3301      	adds	r3, #1
 8013072:	b2da      	uxtb	r2, r3
 8013074:	69bb      	ldr	r3, [r7, #24]
 8013076:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8013078:	69bb      	ldr	r3, [r7, #24]
 801307a:	799b      	ldrb	r3, [r3, #6]
 801307c:	2b09      	cmp	r3, #9
 801307e:	d80a      	bhi.n	8013096 <dhcp_rebind+0x10e>
 8013080:	69bb      	ldr	r3, [r7, #24]
 8013082:	799b      	ldrb	r3, [r3, #6]
 8013084:	b29b      	uxth	r3, r3
 8013086:	461a      	mov	r2, r3
 8013088:	0152      	lsls	r2, r2, #5
 801308a:	1ad2      	subs	r2, r2, r3
 801308c:	0092      	lsls	r2, r2, #2
 801308e:	4413      	add	r3, r2
 8013090:	00db      	lsls	r3, r3, #3
 8013092:	b29b      	uxth	r3, r3
 8013094:	e001      	b.n	801309a <dhcp_rebind+0x112>
 8013096:	f242 7310 	movw	r3, #10000	; 0x2710
 801309a:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801309c:	89fb      	ldrh	r3, [r7, #14]
 801309e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80130a2:	4a10      	ldr	r2, [pc, #64]	; (80130e4 <dhcp_rebind+0x15c>)
 80130a4:	fb82 1203 	smull	r1, r2, r2, r3
 80130a8:	1152      	asrs	r2, r2, #5
 80130aa:	17db      	asrs	r3, r3, #31
 80130ac:	1ad3      	subs	r3, r2, r3
 80130ae:	b29a      	uxth	r2, r3
 80130b0:	69bb      	ldr	r3, [r7, #24]
 80130b2:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
 80130b4:	89fb      	ldrh	r3, [r7, #14]
 80130b6:	4619      	mov	r1, r3
 80130b8:	480b      	ldr	r0, [pc, #44]	; (80130e8 <dhcp_rebind+0x160>)
 80130ba:	f004 f855 	bl	8017168 <iprintf>
  return result;
 80130be:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80130c2:	4618      	mov	r0, r3
 80130c4:	3720      	adds	r7, #32
 80130c6:	46bd      	mov	sp, r7
 80130c8:	bd80      	pop	{r7, pc}
 80130ca:	bf00      	nop
 80130cc:	0801b794 	.word	0x0801b794
 80130d0:	20000074 	.word	0x20000074
 80130d4:	2000da80 	.word	0x2000da80
 80130d8:	0801d62c 	.word	0x0801d62c
 80130dc:	0801b7a4 	.word	0x0801b7a4
 80130e0:	0801b7bc 	.word	0x0801b7bc
 80130e4:	10624dd3 	.word	0x10624dd3
 80130e8:	0801b7ec 	.word	0x0801b7ec

080130ec <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80130ec:	b5b0      	push	{r4, r5, r7, lr}
 80130ee:	b08a      	sub	sp, #40	; 0x28
 80130f0:	af02      	add	r7, sp, #8
 80130f2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130f8:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
 80130fa:	485a      	ldr	r0, [pc, #360]	; (8013264 <dhcp_reboot+0x178>)
 80130fc:	f004 f8d0 	bl	80172a0 <puts>
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8013100:	2103      	movs	r1, #3
 8013102:	69b8      	ldr	r0, [r7, #24]
 8013104:	f000 f968 	bl	80133d8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013108:	f107 030c 	add.w	r3, r7, #12
 801310c:	2203      	movs	r2, #3
 801310e:	69b9      	ldr	r1, [r7, #24]
 8013110:	6878      	ldr	r0, [r7, #4]
 8013112:	f000 fead 	bl	8013e70 <dhcp_create_msg>
 8013116:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013118:	697b      	ldr	r3, [r7, #20]
 801311a:	2b00      	cmp	r3, #0
 801311c:	d069      	beq.n	80131f2 <dhcp_reboot+0x106>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801311e:	697b      	ldr	r3, [r7, #20]
 8013120:	685b      	ldr	r3, [r3, #4]
 8013122:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013124:	89b8      	ldrh	r0, [r7, #12]
 8013126:	693b      	ldr	r3, [r7, #16]
 8013128:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801312c:	2302      	movs	r3, #2
 801312e:	2239      	movs	r2, #57	; 0x39
 8013130:	f000 f96c 	bl	801340c <dhcp_option>
 8013134:	4603      	mov	r3, r0
 8013136:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8013138:	89b8      	ldrh	r0, [r7, #12]
 801313a:	693b      	ldr	r3, [r7, #16]
 801313c:	33f0      	adds	r3, #240	; 0xf0
 801313e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8013142:	4619      	mov	r1, r3
 8013144:	f000 f9bc 	bl	80134c0 <dhcp_option_short>
 8013148:	4603      	mov	r3, r0
 801314a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801314c:	89b8      	ldrh	r0, [r7, #12]
 801314e:	693b      	ldr	r3, [r7, #16]
 8013150:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013154:	2304      	movs	r3, #4
 8013156:	2232      	movs	r2, #50	; 0x32
 8013158:	f000 f958 	bl	801340c <dhcp_option>
 801315c:	4603      	mov	r3, r0
 801315e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013160:	89bc      	ldrh	r4, [r7, #12]
 8013162:	693b      	ldr	r3, [r7, #16]
 8013164:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013168:	69bb      	ldr	r3, [r7, #24]
 801316a:	69db      	ldr	r3, [r3, #28]
 801316c:	4618      	mov	r0, r3
 801316e:	f7f6 fa5c 	bl	800962a <lwip_htonl>
 8013172:	4603      	mov	r3, r0
 8013174:	461a      	mov	r2, r3
 8013176:	4629      	mov	r1, r5
 8013178:	4620      	mov	r0, r4
 801317a:	f000 f9d3 	bl	8013524 <dhcp_option_long>
 801317e:	4603      	mov	r3, r0
 8013180:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013182:	89b8      	ldrh	r0, [r7, #12]
 8013184:	693b      	ldr	r3, [r7, #16]
 8013186:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801318a:	2304      	movs	r3, #4
 801318c:	2237      	movs	r2, #55	; 0x37
 801318e:	f000 f93d 	bl	801340c <dhcp_option>
 8013192:	4603      	mov	r3, r0
 8013194:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013196:	2300      	movs	r3, #0
 8013198:	77bb      	strb	r3, [r7, #30]
 801319a:	e00e      	b.n	80131ba <dhcp_reboot+0xce>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801319c:	89b8      	ldrh	r0, [r7, #12]
 801319e:	693b      	ldr	r3, [r7, #16]
 80131a0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80131a4:	7fbb      	ldrb	r3, [r7, #30]
 80131a6:	4a30      	ldr	r2, [pc, #192]	; (8013268 <dhcp_reboot+0x17c>)
 80131a8:	5cd3      	ldrb	r3, [r2, r3]
 80131aa:	461a      	mov	r2, r3
 80131ac:	f000 f962 	bl	8013474 <dhcp_option_byte>
 80131b0:	4603      	mov	r3, r0
 80131b2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80131b4:	7fbb      	ldrb	r3, [r7, #30]
 80131b6:	3301      	adds	r3, #1
 80131b8:	77bb      	strb	r3, [r7, #30]
 80131ba:	7fbb      	ldrb	r3, [r7, #30]
 80131bc:	2b03      	cmp	r3, #3
 80131be:	d9ed      	bls.n	801319c <dhcp_reboot+0xb0>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80131c0:	89b8      	ldrh	r0, [r7, #12]
 80131c2:	693b      	ldr	r3, [r7, #16]
 80131c4:	33f0      	adds	r3, #240	; 0xf0
 80131c6:	697a      	ldr	r2, [r7, #20]
 80131c8:	4619      	mov	r1, r3
 80131ca:	f000 ff35 	bl	8014038 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80131ce:	4b27      	ldr	r3, [pc, #156]	; (801326c <dhcp_reboot+0x180>)
 80131d0:	6818      	ldr	r0, [r3, #0]
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	9300      	str	r3, [sp, #0]
 80131d6:	2343      	movs	r3, #67	; 0x43
 80131d8:	4a25      	ldr	r2, [pc, #148]	; (8013270 <dhcp_reboot+0x184>)
 80131da:	6979      	ldr	r1, [r7, #20]
 80131dc:	f7fe fb1c 	bl	8011818 <udp_sendto_if>
 80131e0:	4603      	mov	r3, r0
 80131e2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80131e4:	6978      	ldr	r0, [r7, #20]
 80131e6:	f7f8 f9ed 	bl	800b5c4 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
 80131ea:	4822      	ldr	r0, [pc, #136]	; (8013274 <dhcp_reboot+0x188>)
 80131ec:	f004 f858 	bl	80172a0 <puts>
 80131f0:	e004      	b.n	80131fc <dhcp_reboot+0x110>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
 80131f2:	4821      	ldr	r0, [pc, #132]	; (8013278 <dhcp_reboot+0x18c>)
 80131f4:	f004 f854 	bl	80172a0 <puts>
    result = ERR_MEM;
 80131f8:	23ff      	movs	r3, #255	; 0xff
 80131fa:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80131fc:	69bb      	ldr	r3, [r7, #24]
 80131fe:	799b      	ldrb	r3, [r3, #6]
 8013200:	2bff      	cmp	r3, #255	; 0xff
 8013202:	d005      	beq.n	8013210 <dhcp_reboot+0x124>
    dhcp->tries++;
 8013204:	69bb      	ldr	r3, [r7, #24]
 8013206:	799b      	ldrb	r3, [r3, #6]
 8013208:	3301      	adds	r3, #1
 801320a:	b2da      	uxtb	r2, r3
 801320c:	69bb      	ldr	r3, [r7, #24]
 801320e:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8013210:	69bb      	ldr	r3, [r7, #24]
 8013212:	799b      	ldrb	r3, [r3, #6]
 8013214:	2b09      	cmp	r3, #9
 8013216:	d80a      	bhi.n	801322e <dhcp_reboot+0x142>
 8013218:	69bb      	ldr	r3, [r7, #24]
 801321a:	799b      	ldrb	r3, [r3, #6]
 801321c:	b29b      	uxth	r3, r3
 801321e:	461a      	mov	r2, r3
 8013220:	0152      	lsls	r2, r2, #5
 8013222:	1ad2      	subs	r2, r2, r3
 8013224:	0092      	lsls	r2, r2, #2
 8013226:	4413      	add	r3, r2
 8013228:	00db      	lsls	r3, r3, #3
 801322a:	b29b      	uxth	r3, r3
 801322c:	e001      	b.n	8013232 <dhcp_reboot+0x146>
 801322e:	f242 7310 	movw	r3, #10000	; 0x2710
 8013232:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013234:	89fb      	ldrh	r3, [r7, #14]
 8013236:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801323a:	4a10      	ldr	r2, [pc, #64]	; (801327c <dhcp_reboot+0x190>)
 801323c:	fb82 1203 	smull	r1, r2, r2, r3
 8013240:	1152      	asrs	r2, r2, #5
 8013242:	17db      	asrs	r3, r3, #31
 8013244:	1ad3      	subs	r3, r2, r3
 8013246:	b29a      	uxth	r2, r3
 8013248:	69bb      	ldr	r3, [r7, #24]
 801324a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
 801324c:	89fb      	ldrh	r3, [r7, #14]
 801324e:	4619      	mov	r1, r3
 8013250:	480b      	ldr	r0, [pc, #44]	; (8013280 <dhcp_reboot+0x194>)
 8013252:	f003 ff89 	bl	8017168 <iprintf>
  return result;
 8013256:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801325a:	4618      	mov	r0, r3
 801325c:	3720      	adds	r7, #32
 801325e:	46bd      	mov	sp, r7
 8013260:	bdb0      	pop	{r4, r5, r7, pc}
 8013262:	bf00      	nop
 8013264:	0801b81c 	.word	0x0801b81c
 8013268:	20000074 	.word	0x20000074
 801326c:	2000da80 	.word	0x2000da80
 8013270:	0801d62c 	.word	0x0801d62c
 8013274:	0801b82c 	.word	0x0801b82c
 8013278:	0801b844 	.word	0x0801b844
 801327c:	10624dd3 	.word	0x10624dd3
 8013280:	0801b874 	.word	0x0801b874

08013284 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8013284:	b5b0      	push	{r4, r5, r7, lr}
 8013286:	b08a      	sub	sp, #40	; 0x28
 8013288:	af02      	add	r7, sp, #8
 801328a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013290:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
 8013292:	484c      	ldr	r0, [pc, #304]	; (80133c4 <dhcp_release_and_stop+0x140>)
 8013294:	f004 f804 	bl	80172a0 <puts>
  if (dhcp == NULL) {
 8013298:	69fb      	ldr	r3, [r7, #28]
 801329a:	2b00      	cmp	r3, #0
 801329c:	f000 808b 	beq.w	80133b6 <dhcp_release_and_stop+0x132>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 80132a0:	69fb      	ldr	r3, [r7, #28]
 80132a2:	795b      	ldrb	r3, [r3, #5]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	f000 8088 	beq.w	80133ba <dhcp_release_and_stop+0x136>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80132aa:	69fb      	ldr	r3, [r7, #28]
 80132ac:	699b      	ldr	r3, [r3, #24]
 80132ae:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80132b0:	69fb      	ldr	r3, [r7, #28]
 80132b2:	2200      	movs	r2, #0
 80132b4:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80132b6:	69fb      	ldr	r3, [r7, #28]
 80132b8:	2200      	movs	r2, #0
 80132ba:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80132bc:	69fb      	ldr	r3, [r7, #28]
 80132be:	2200      	movs	r2, #0
 80132c0:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80132c2:	69fb      	ldr	r3, [r7, #28]
 80132c4:	2200      	movs	r2, #0
 80132c6:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80132c8:	69fb      	ldr	r3, [r7, #28]
 80132ca:	2200      	movs	r2, #0
 80132cc:	631a      	str	r2, [r3, #48]	; 0x30
 80132ce:	69fb      	ldr	r3, [r7, #28]
 80132d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80132d2:	69fb      	ldr	r3, [r7, #28]
 80132d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80132d6:	69fb      	ldr	r3, [r7, #28]
 80132d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132da:	69fb      	ldr	r3, [r7, #28]
 80132dc:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80132de:	69fb      	ldr	r3, [r7, #28]
 80132e0:	2200      	movs	r2, #0
 80132e2:	829a      	strh	r2, [r3, #20]
 80132e4:	69fb      	ldr	r3, [r7, #28]
 80132e6:	8a9a      	ldrh	r2, [r3, #20]
 80132e8:	69fb      	ldr	r3, [r7, #28]
 80132ea:	825a      	strh	r2, [r3, #18]
 80132ec:	69fb      	ldr	r3, [r7, #28]
 80132ee:	8a5a      	ldrh	r2, [r3, #18]
 80132f0:	69fb      	ldr	r3, [r7, #28]
 80132f2:	821a      	strh	r2, [r3, #16]
 80132f4:	69fb      	ldr	r3, [r7, #28]
 80132f6:	8a1a      	ldrh	r2, [r3, #16]
 80132f8:	69fb      	ldr	r3, [r7, #28]
 80132fa:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 80132fc:	6878      	ldr	r0, [r7, #4]
 80132fe:	f000 fec9 	bl	8014094 <dhcp_supplied_address>
 8013302:	4603      	mov	r3, r0
 8013304:	2b00      	cmp	r3, #0
 8013306:	d042      	beq.n	801338e <dhcp_release_and_stop+0x10a>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8013308:	f107 030e 	add.w	r3, r7, #14
 801330c:	2207      	movs	r2, #7
 801330e:	69f9      	ldr	r1, [r7, #28]
 8013310:	6878      	ldr	r0, [r7, #4]
 8013312:	f000 fdad 	bl	8013e70 <dhcp_create_msg>
 8013316:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8013318:	69bb      	ldr	r3, [r7, #24]
 801331a:	2b00      	cmp	r3, #0
 801331c:	d034      	beq.n	8013388 <dhcp_release_and_stop+0x104>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801331e:	69bb      	ldr	r3, [r7, #24]
 8013320:	685b      	ldr	r3, [r3, #4]
 8013322:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8013324:	89f8      	ldrh	r0, [r7, #14]
 8013326:	697b      	ldr	r3, [r7, #20]
 8013328:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801332c:	2304      	movs	r3, #4
 801332e:	2236      	movs	r2, #54	; 0x36
 8013330:	f000 f86c 	bl	801340c <dhcp_option>
 8013334:	4603      	mov	r3, r0
 8013336:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8013338:	89fc      	ldrh	r4, [r7, #14]
 801333a:	697b      	ldr	r3, [r7, #20]
 801333c:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013340:	693b      	ldr	r3, [r7, #16]
 8013342:	4618      	mov	r0, r3
 8013344:	f7f6 f971 	bl	800962a <lwip_htonl>
 8013348:	4603      	mov	r3, r0
 801334a:	461a      	mov	r2, r3
 801334c:	4629      	mov	r1, r5
 801334e:	4620      	mov	r0, r4
 8013350:	f000 f8e8 	bl	8013524 <dhcp_option_long>
 8013354:	4603      	mov	r3, r0
 8013356:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013358:	89f8      	ldrh	r0, [r7, #14]
 801335a:	697b      	ldr	r3, [r7, #20]
 801335c:	33f0      	adds	r3, #240	; 0xf0
 801335e:	69ba      	ldr	r2, [r7, #24]
 8013360:	4619      	mov	r1, r3
 8013362:	f000 fe69 	bl	8014038 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013366:	4b18      	ldr	r3, [pc, #96]	; (80133c8 <dhcp_release_and_stop+0x144>)
 8013368:	6818      	ldr	r0, [r3, #0]
 801336a:	f107 0210 	add.w	r2, r7, #16
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	9300      	str	r3, [sp, #0]
 8013372:	2343      	movs	r3, #67	; 0x43
 8013374:	69b9      	ldr	r1, [r7, #24]
 8013376:	f7fe fa4f 	bl	8011818 <udp_sendto_if>
      pbuf_free(p_out);
 801337a:	69b8      	ldr	r0, [r7, #24]
 801337c:	f7f8 f922 	bl	800b5c4 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release: RELEASED, DHCP_STATE_OFF\n"));
 8013380:	4812      	ldr	r0, [pc, #72]	; (80133cc <dhcp_release_and_stop+0x148>)
 8013382:	f003 ff8d 	bl	80172a0 <puts>
 8013386:	e002      	b.n	801338e <dhcp_release_and_stop+0x10a>
    } else {
      /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
 8013388:	4811      	ldr	r0, [pc, #68]	; (80133d0 <dhcp_release_and_stop+0x14c>)
 801338a:	f003 ff89 	bl	80172a0 <puts>
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801338e:	4b11      	ldr	r3, [pc, #68]	; (80133d4 <dhcp_release_and_stop+0x150>)
 8013390:	4a10      	ldr	r2, [pc, #64]	; (80133d4 <dhcp_release_and_stop+0x150>)
 8013392:	4910      	ldr	r1, [pc, #64]	; (80133d4 <dhcp_release_and_stop+0x150>)
 8013394:	6878      	ldr	r0, [r7, #4]
 8013396:	f7f7 fbf3 	bl	800ab80 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801339a:	2100      	movs	r1, #0
 801339c:	69f8      	ldr	r0, [r7, #28]
 801339e:	f000 f81b 	bl	80133d8 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 80133a2:	69fb      	ldr	r3, [r7, #28]
 80133a4:	791b      	ldrb	r3, [r3, #4]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d008      	beq.n	80133bc <dhcp_release_and_stop+0x138>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80133aa:	f7fe fd81 	bl	8011eb0 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80133ae:	69fb      	ldr	r3, [r7, #28]
 80133b0:	2200      	movs	r2, #0
 80133b2:	711a      	strb	r2, [r3, #4]
 80133b4:	e002      	b.n	80133bc <dhcp_release_and_stop+0x138>
    return;
 80133b6:	bf00      	nop
 80133b8:	e000      	b.n	80133bc <dhcp_release_and_stop+0x138>
    return;
 80133ba:	bf00      	nop
  }
}
 80133bc:	3720      	adds	r7, #32
 80133be:	46bd      	mov	sp, r7
 80133c0:	bdb0      	pop	{r4, r5, r7, pc}
 80133c2:	bf00      	nop
 80133c4:	0801b8a4 	.word	0x0801b8a4
 80133c8:	2000da80 	.word	0x2000da80
 80133cc:	0801b8bc 	.word	0x0801b8bc
 80133d0:	0801b8e4 	.word	0x0801b8e4
 80133d4:	0801d628 	.word	0x0801d628

080133d8 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 80133d8:	b480      	push	{r7}
 80133da:	b083      	sub	sp, #12
 80133dc:	af00      	add	r7, sp, #0
 80133de:	6078      	str	r0, [r7, #4]
 80133e0:	460b      	mov	r3, r1
 80133e2:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	795b      	ldrb	r3, [r3, #5]
 80133e8:	78fa      	ldrb	r2, [r7, #3]
 80133ea:	429a      	cmp	r2, r3
 80133ec:	d008      	beq.n	8013400 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	78fa      	ldrb	r2, [r7, #3]
 80133f2:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	2200      	movs	r2, #0
 80133f8:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	2200      	movs	r2, #0
 80133fe:	811a      	strh	r2, [r3, #8]
  }
}
 8013400:	bf00      	nop
 8013402:	370c      	adds	r7, #12
 8013404:	46bd      	mov	sp, r7
 8013406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801340a:	4770      	bx	lr

0801340c <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801340c:	b580      	push	{r7, lr}
 801340e:	b082      	sub	sp, #8
 8013410:	af00      	add	r7, sp, #0
 8013412:	6039      	str	r1, [r7, #0]
 8013414:	4611      	mov	r1, r2
 8013416:	461a      	mov	r2, r3
 8013418:	4603      	mov	r3, r0
 801341a:	80fb      	strh	r3, [r7, #6]
 801341c:	460b      	mov	r3, r1
 801341e:	717b      	strb	r3, [r7, #5]
 8013420:	4613      	mov	r3, r2
 8013422:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8013424:	88fa      	ldrh	r2, [r7, #6]
 8013426:	793b      	ldrb	r3, [r7, #4]
 8013428:	4413      	add	r3, r2
 801342a:	3302      	adds	r3, #2
 801342c:	2b44      	cmp	r3, #68	; 0x44
 801342e:	d906      	bls.n	801343e <dhcp_option+0x32>
 8013430:	4b0d      	ldr	r3, [pc, #52]	; (8013468 <dhcp_option+0x5c>)
 8013432:	f240 529a 	movw	r2, #1434	; 0x59a
 8013436:	490d      	ldr	r1, [pc, #52]	; (801346c <dhcp_option+0x60>)
 8013438:	480d      	ldr	r0, [pc, #52]	; (8013470 <dhcp_option+0x64>)
 801343a:	f003 fe95 	bl	8017168 <iprintf>
  options[options_out_len++] = option_type;
 801343e:	88fb      	ldrh	r3, [r7, #6]
 8013440:	1c5a      	adds	r2, r3, #1
 8013442:	80fa      	strh	r2, [r7, #6]
 8013444:	461a      	mov	r2, r3
 8013446:	683b      	ldr	r3, [r7, #0]
 8013448:	4413      	add	r3, r2
 801344a:	797a      	ldrb	r2, [r7, #5]
 801344c:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801344e:	88fb      	ldrh	r3, [r7, #6]
 8013450:	1c5a      	adds	r2, r3, #1
 8013452:	80fa      	strh	r2, [r7, #6]
 8013454:	461a      	mov	r2, r3
 8013456:	683b      	ldr	r3, [r7, #0]
 8013458:	4413      	add	r3, r2
 801345a:	793a      	ldrb	r2, [r7, #4]
 801345c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801345e:	88fb      	ldrh	r3, [r7, #6]
}
 8013460:	4618      	mov	r0, r3
 8013462:	3708      	adds	r7, #8
 8013464:	46bd      	mov	sp, r7
 8013466:	bd80      	pop	{r7, pc}
 8013468:	0801ad34 	.word	0x0801ad34
 801346c:	0801b914 	.word	0x0801b914
 8013470:	0801ad94 	.word	0x0801ad94

08013474 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8013474:	b580      	push	{r7, lr}
 8013476:	b082      	sub	sp, #8
 8013478:	af00      	add	r7, sp, #0
 801347a:	4603      	mov	r3, r0
 801347c:	6039      	str	r1, [r7, #0]
 801347e:	80fb      	strh	r3, [r7, #6]
 8013480:	4613      	mov	r3, r2
 8013482:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8013484:	88fb      	ldrh	r3, [r7, #6]
 8013486:	2b43      	cmp	r3, #67	; 0x43
 8013488:	d906      	bls.n	8013498 <dhcp_option_byte+0x24>
 801348a:	4b0a      	ldr	r3, [pc, #40]	; (80134b4 <dhcp_option_byte+0x40>)
 801348c:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8013490:	4909      	ldr	r1, [pc, #36]	; (80134b8 <dhcp_option_byte+0x44>)
 8013492:	480a      	ldr	r0, [pc, #40]	; (80134bc <dhcp_option_byte+0x48>)
 8013494:	f003 fe68 	bl	8017168 <iprintf>
  options[options_out_len++] = value;
 8013498:	88fb      	ldrh	r3, [r7, #6]
 801349a:	1c5a      	adds	r2, r3, #1
 801349c:	80fa      	strh	r2, [r7, #6]
 801349e:	461a      	mov	r2, r3
 80134a0:	683b      	ldr	r3, [r7, #0]
 80134a2:	4413      	add	r3, r2
 80134a4:	797a      	ldrb	r2, [r7, #5]
 80134a6:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80134a8:	88fb      	ldrh	r3, [r7, #6]
}
 80134aa:	4618      	mov	r0, r3
 80134ac:	3708      	adds	r7, #8
 80134ae:	46bd      	mov	sp, r7
 80134b0:	bd80      	pop	{r7, pc}
 80134b2:	bf00      	nop
 80134b4:	0801ad34 	.word	0x0801ad34
 80134b8:	0801b958 	.word	0x0801b958
 80134bc:	0801ad94 	.word	0x0801ad94

080134c0 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 80134c0:	b580      	push	{r7, lr}
 80134c2:	b082      	sub	sp, #8
 80134c4:	af00      	add	r7, sp, #0
 80134c6:	4603      	mov	r3, r0
 80134c8:	6039      	str	r1, [r7, #0]
 80134ca:	80fb      	strh	r3, [r7, #6]
 80134cc:	4613      	mov	r3, r2
 80134ce:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80134d0:	88fb      	ldrh	r3, [r7, #6]
 80134d2:	3302      	adds	r3, #2
 80134d4:	2b44      	cmp	r3, #68	; 0x44
 80134d6:	d906      	bls.n	80134e6 <dhcp_option_short+0x26>
 80134d8:	4b0f      	ldr	r3, [pc, #60]	; (8013518 <dhcp_option_short+0x58>)
 80134da:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80134de:	490f      	ldr	r1, [pc, #60]	; (801351c <dhcp_option_short+0x5c>)
 80134e0:	480f      	ldr	r0, [pc, #60]	; (8013520 <dhcp_option_short+0x60>)
 80134e2:	f003 fe41 	bl	8017168 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80134e6:	88bb      	ldrh	r3, [r7, #4]
 80134e8:	0a1b      	lsrs	r3, r3, #8
 80134ea:	b29a      	uxth	r2, r3
 80134ec:	88fb      	ldrh	r3, [r7, #6]
 80134ee:	1c59      	adds	r1, r3, #1
 80134f0:	80f9      	strh	r1, [r7, #6]
 80134f2:	4619      	mov	r1, r3
 80134f4:	683b      	ldr	r3, [r7, #0]
 80134f6:	440b      	add	r3, r1
 80134f8:	b2d2      	uxtb	r2, r2
 80134fa:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80134fc:	88fb      	ldrh	r3, [r7, #6]
 80134fe:	1c5a      	adds	r2, r3, #1
 8013500:	80fa      	strh	r2, [r7, #6]
 8013502:	461a      	mov	r2, r3
 8013504:	683b      	ldr	r3, [r7, #0]
 8013506:	4413      	add	r3, r2
 8013508:	88ba      	ldrh	r2, [r7, #4]
 801350a:	b2d2      	uxtb	r2, r2
 801350c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801350e:	88fb      	ldrh	r3, [r7, #6]
}
 8013510:	4618      	mov	r0, r3
 8013512:	3708      	adds	r7, #8
 8013514:	46bd      	mov	sp, r7
 8013516:	bd80      	pop	{r7, pc}
 8013518:	0801ad34 	.word	0x0801ad34
 801351c:	0801b990 	.word	0x0801b990
 8013520:	0801ad94 	.word	0x0801ad94

08013524 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8013524:	b580      	push	{r7, lr}
 8013526:	b084      	sub	sp, #16
 8013528:	af00      	add	r7, sp, #0
 801352a:	4603      	mov	r3, r0
 801352c:	60b9      	str	r1, [r7, #8]
 801352e:	607a      	str	r2, [r7, #4]
 8013530:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8013532:	89fb      	ldrh	r3, [r7, #14]
 8013534:	3304      	adds	r3, #4
 8013536:	2b44      	cmp	r3, #68	; 0x44
 8013538:	d906      	bls.n	8013548 <dhcp_option_long+0x24>
 801353a:	4b19      	ldr	r3, [pc, #100]	; (80135a0 <dhcp_option_long+0x7c>)
 801353c:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8013540:	4918      	ldr	r1, [pc, #96]	; (80135a4 <dhcp_option_long+0x80>)
 8013542:	4819      	ldr	r0, [pc, #100]	; (80135a8 <dhcp_option_long+0x84>)
 8013544:	f003 fe10 	bl	8017168 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	0e1a      	lsrs	r2, r3, #24
 801354c:	89fb      	ldrh	r3, [r7, #14]
 801354e:	1c59      	adds	r1, r3, #1
 8013550:	81f9      	strh	r1, [r7, #14]
 8013552:	4619      	mov	r1, r3
 8013554:	68bb      	ldr	r3, [r7, #8]
 8013556:	440b      	add	r3, r1
 8013558:	b2d2      	uxtb	r2, r2
 801355a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	0c1a      	lsrs	r2, r3, #16
 8013560:	89fb      	ldrh	r3, [r7, #14]
 8013562:	1c59      	adds	r1, r3, #1
 8013564:	81f9      	strh	r1, [r7, #14]
 8013566:	4619      	mov	r1, r3
 8013568:	68bb      	ldr	r3, [r7, #8]
 801356a:	440b      	add	r3, r1
 801356c:	b2d2      	uxtb	r2, r2
 801356e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	0a1a      	lsrs	r2, r3, #8
 8013574:	89fb      	ldrh	r3, [r7, #14]
 8013576:	1c59      	adds	r1, r3, #1
 8013578:	81f9      	strh	r1, [r7, #14]
 801357a:	4619      	mov	r1, r3
 801357c:	68bb      	ldr	r3, [r7, #8]
 801357e:	440b      	add	r3, r1
 8013580:	b2d2      	uxtb	r2, r2
 8013582:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8013584:	89fb      	ldrh	r3, [r7, #14]
 8013586:	1c5a      	adds	r2, r3, #1
 8013588:	81fa      	strh	r2, [r7, #14]
 801358a:	461a      	mov	r2, r3
 801358c:	68bb      	ldr	r3, [r7, #8]
 801358e:	4413      	add	r3, r2
 8013590:	687a      	ldr	r2, [r7, #4]
 8013592:	b2d2      	uxtb	r2, r2
 8013594:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013596:	89fb      	ldrh	r3, [r7, #14]
}
 8013598:	4618      	mov	r0, r3
 801359a:	3710      	adds	r7, #16
 801359c:	46bd      	mov	sp, r7
 801359e:	bd80      	pop	{r7, pc}
 80135a0:	0801ad34 	.word	0x0801ad34
 80135a4:	0801b9cc 	.word	0x0801b9cc
 80135a8:	0801ad94 	.word	0x0801ad94

080135ac <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 80135ac:	b580      	push	{r7, lr}
 80135ae:	b090      	sub	sp, #64	; 0x40
 80135b0:	af00      	add	r7, sp, #0
 80135b2:	6078      	str	r0, [r7, #4]
 80135b4:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 80135b6:	2300      	movs	r3, #0
 80135b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 80135ba:	2300      	movs	r3, #0
 80135bc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 80135be:	220a      	movs	r2, #10
 80135c0:	2100      	movs	r1, #0
 80135c2:	48ba      	ldr	r0, [pc, #744]	; (80138ac <dhcp_parse_reply+0x300>)
 80135c4:	f003 fdc8 	bl	8017158 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	895b      	ldrh	r3, [r3, #10]
 80135cc:	2b2b      	cmp	r3, #43	; 0x2b
 80135ce:	d802      	bhi.n	80135d6 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 80135d0:	f06f 0301 	mvn.w	r3, #1
 80135d4:	e303      	b.n	8013bde <dhcp_parse_reply+0x632>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	685b      	ldr	r3, [r3, #4]
 80135da:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 80135dc:	23f0      	movs	r3, #240	; 0xf0
 80135de:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	891b      	ldrh	r3, [r3, #8]
 80135e4:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80135ea:	e00c      	b.n	8013606 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 80135ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135ee:	895b      	ldrh	r3, [r3, #10]
 80135f0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80135f2:	1ad3      	subs	r3, r2, r3
 80135f4:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80135f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135f8:	895b      	ldrh	r3, [r3, #10]
 80135fa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80135fc:	1ad3      	subs	r3, r2, r3
 80135fe:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8013600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8013606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013608:	2b00      	cmp	r3, #0
 801360a:	d004      	beq.n	8013616 <dhcp_parse_reply+0x6a>
 801360c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801360e:	895b      	ldrh	r3, [r3, #10]
 8013610:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013612:	429a      	cmp	r2, r3
 8013614:	d2ea      	bcs.n	80135ec <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8013616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013618:	2b00      	cmp	r3, #0
 801361a:	d102      	bne.n	8013622 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 801361c:	f06f 0301 	mvn.w	r3, #1
 8013620:	e2dd      	b.n	8013bde <dhcp_parse_reply+0x632>
  }
  offset = options_idx;
 8013622:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013624:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8013626:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013628:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 801362a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801362c:	685b      	ldr	r3, [r3, #4]
 801362e:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8013630:	e26c      	b.n	8013b0c <dhcp_parse_reply+0x560>
    u8_t op = options[offset];
 8013632:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013634:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013636:	4413      	add	r3, r2
 8013638:	781b      	ldrb	r3, [r3, #0]
 801363a:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 801363c:	2300      	movs	r3, #0
 801363e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8013642:	f04f 33ff 	mov.w	r3, #4294967295
 8013646:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8013648:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801364a:	3302      	adds	r3, #2
 801364c:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801364e:	8bfa      	ldrh	r2, [r7, #30]
 8013650:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013652:	429a      	cmp	r2, r3
 8013654:	d202      	bcs.n	801365c <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8013656:	f06f 0301 	mvn.w	r3, #1
 801365a:	e2c0      	b.n	8013bde <dhcp_parse_reply+0x632>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801365c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801365e:	3301      	adds	r3, #1
 8013660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013662:	8952      	ldrh	r2, [r2, #10]
 8013664:	4293      	cmp	r3, r2
 8013666:	da07      	bge.n	8013678 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8013668:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801366a:	3301      	adds	r3, #1
 801366c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801366e:	4413      	add	r3, r2
 8013670:	781b      	ldrb	r3, [r3, #0]
 8013672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013676:	e00b      	b.n	8013690 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8013678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d004      	beq.n	801368a <dhcp_parse_reply+0xde>
 8013680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013682:	681b      	ldr	r3, [r3, #0]
 8013684:	685b      	ldr	r3, [r3, #4]
 8013686:	781b      	ldrb	r3, [r3, #0]
 8013688:	e000      	b.n	801368c <dhcp_parse_reply+0xe0>
 801368a:	2300      	movs	r3, #0
 801368c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8013690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013694:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8013698:	7dfb      	ldrb	r3, [r7, #23]
 801369a:	2b3b      	cmp	r3, #59	; 0x3b
 801369c:	f200 815a 	bhi.w	8013954 <dhcp_parse_reply+0x3a8>
 80136a0:	a201      	add	r2, pc, #4	; (adr r2, 80136a8 <dhcp_parse_reply+0xfc>)
 80136a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136a6:	bf00      	nop
 80136a8:	08013799 	.word	0x08013799
 80136ac:	080137a9 	.word	0x080137a9
 80136b0:	08013955 	.word	0x08013955
 80136b4:	080137cb 	.word	0x080137cb
 80136b8:	08013955 	.word	0x08013955
 80136bc:	08013955 	.word	0x08013955
 80136c0:	080137f7 	.word	0x080137f7
 80136c4:	08013955 	.word	0x08013955
 80136c8:	08013955 	.word	0x08013955
 80136cc:	08013955 	.word	0x08013955
 80136d0:	08013955 	.word	0x08013955
 80136d4:	08013955 	.word	0x08013955
 80136d8:	08013955 	.word	0x08013955
 80136dc:	08013955 	.word	0x08013955
 80136e0:	08013955 	.word	0x08013955
 80136e4:	08013955 	.word	0x08013955
 80136e8:	08013955 	.word	0x08013955
 80136ec:	08013955 	.word	0x08013955
 80136f0:	08013955 	.word	0x08013955
 80136f4:	08013955 	.word	0x08013955
 80136f8:	08013955 	.word	0x08013955
 80136fc:	08013955 	.word	0x08013955
 8013700:	08013955 	.word	0x08013955
 8013704:	08013955 	.word	0x08013955
 8013708:	08013955 	.word	0x08013955
 801370c:	08013955 	.word	0x08013955
 8013710:	08013955 	.word	0x08013955
 8013714:	08013955 	.word	0x08013955
 8013718:	08013955 	.word	0x08013955
 801371c:	08013955 	.word	0x08013955
 8013720:	08013955 	.word	0x08013955
 8013724:	08013955 	.word	0x08013955
 8013728:	08013955 	.word	0x08013955
 801372c:	08013955 	.word	0x08013955
 8013730:	08013955 	.word	0x08013955
 8013734:	08013955 	.word	0x08013955
 8013738:	08013955 	.word	0x08013955
 801373c:	08013955 	.word	0x08013955
 8013740:	08013955 	.word	0x08013955
 8013744:	08013955 	.word	0x08013955
 8013748:	08013955 	.word	0x08013955
 801374c:	08013955 	.word	0x08013955
 8013750:	08013955 	.word	0x08013955
 8013754:	08013955 	.word	0x08013955
 8013758:	08013955 	.word	0x08013955
 801375c:	08013955 	.word	0x08013955
 8013760:	08013955 	.word	0x08013955
 8013764:	08013955 	.word	0x08013955
 8013768:	08013955 	.word	0x08013955
 801376c:	08013955 	.word	0x08013955
 8013770:	08013955 	.word	0x08013955
 8013774:	0801384d 	.word	0x0801384d
 8013778:	0801386f 	.word	0x0801386f
 801377c:	080138cd 	.word	0x080138cd
 8013780:	080138ef 	.word	0x080138ef
 8013784:	08013955 	.word	0x08013955
 8013788:	08013955 	.word	0x08013955
 801378c:	08013955 	.word	0x08013955
 8013790:	08013911 	.word	0x08013911
 8013794:	08013933 	.word	0x08013933
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8013798:	2300      	movs	r3, #0
 801379a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801379e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80137a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 80137a6:	e0de      	b.n	8013966 <dhcp_parse_reply+0x3ba>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80137a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80137ac:	2b04      	cmp	r3, #4
 80137ae:	d009      	beq.n	80137c4 <dhcp_parse_reply+0x218>
 80137b0:	4b3f      	ldr	r3, [pc, #252]	; (80138b0 <dhcp_parse_reply+0x304>)
 80137b2:	f240 622e 	movw	r2, #1582	; 0x62e
 80137b6:	493f      	ldr	r1, [pc, #252]	; (80138b4 <dhcp_parse_reply+0x308>)
 80137b8:	483f      	ldr	r0, [pc, #252]	; (80138b8 <dhcp_parse_reply+0x30c>)
 80137ba:	f003 fcd5 	bl	8017168 <iprintf>
 80137be:	f06f 0305 	mvn.w	r3, #5
 80137c2:	e20c      	b.n	8013bde <dhcp_parse_reply+0x632>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 80137c4:	2306      	movs	r3, #6
 80137c6:	623b      	str	r3, [r7, #32]
        break;
 80137c8:	e0cd      	b.n	8013966 <dhcp_parse_reply+0x3ba>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 80137ca:	2304      	movs	r3, #4
 80137cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80137d0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80137d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80137d8:	429a      	cmp	r2, r3
 80137da:	d209      	bcs.n	80137f0 <dhcp_parse_reply+0x244>
 80137dc:	4b34      	ldr	r3, [pc, #208]	; (80138b0 <dhcp_parse_reply+0x304>)
 80137de:	f240 6233 	movw	r2, #1587	; 0x633
 80137e2:	4936      	ldr	r1, [pc, #216]	; (80138bc <dhcp_parse_reply+0x310>)
 80137e4:	4834      	ldr	r0, [pc, #208]	; (80138b8 <dhcp_parse_reply+0x30c>)
 80137e6:	f003 fcbf 	bl	8017168 <iprintf>
 80137ea:	f06f 0305 	mvn.w	r3, #5
 80137ee:	e1f6      	b.n	8013bde <dhcp_parse_reply+0x632>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80137f0:	2307      	movs	r3, #7
 80137f2:	623b      	str	r3, [r7, #32]
        break;
 80137f4:	e0b7      	b.n	8013966 <dhcp_parse_reply+0x3ba>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case (DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 80137f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80137fa:	f003 0303 	and.w	r3, r3, #3
 80137fe:	b2db      	uxtb	r3, r3
 8013800:	2b00      	cmp	r3, #0
 8013802:	d009      	beq.n	8013818 <dhcp_parse_reply+0x26c>
 8013804:	4b2a      	ldr	r3, [pc, #168]	; (80138b0 <dhcp_parse_reply+0x304>)
 8013806:	f240 6239 	movw	r2, #1593	; 0x639
 801380a:	492d      	ldr	r1, [pc, #180]	; (80138c0 <dhcp_parse_reply+0x314>)
 801380c:	482a      	ldr	r0, [pc, #168]	; (80138b8 <dhcp_parse_reply+0x30c>)
 801380e:	f003 fcab 	bl	8017168 <iprintf>
 8013812:	f06f 0305 	mvn.w	r3, #5
 8013816:	e1e2      	b.n	8013bde <dhcp_parse_reply+0x632>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 8013818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801381c:	2b08      	cmp	r3, #8
 801381e:	bf28      	it	cs
 8013820:	2308      	movcs	r3, #8
 8013822:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8013826:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801382a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801382e:	429a      	cmp	r2, r3
 8013830:	d209      	bcs.n	8013846 <dhcp_parse_reply+0x29a>
 8013832:	4b1f      	ldr	r3, [pc, #124]	; (80138b0 <dhcp_parse_reply+0x304>)
 8013834:	f240 623c 	movw	r2, #1596	; 0x63c
 8013838:	4920      	ldr	r1, [pc, #128]	; (80138bc <dhcp_parse_reply+0x310>)
 801383a:	481f      	ldr	r0, [pc, #124]	; (80138b8 <dhcp_parse_reply+0x30c>)
 801383c:	f003 fc94 	bl	8017168 <iprintf>
 8013840:	f06f 0305 	mvn.w	r3, #5
 8013844:	e1cb      	b.n	8013bde <dhcp_parse_reply+0x632>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 8013846:	2308      	movs	r3, #8
 8013848:	623b      	str	r3, [r7, #32]
        break;
 801384a:	e08c      	b.n	8013966 <dhcp_parse_reply+0x3ba>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801384c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013850:	2b04      	cmp	r3, #4
 8013852:	d009      	beq.n	8013868 <dhcp_parse_reply+0x2bc>
 8013854:	4b16      	ldr	r3, [pc, #88]	; (80138b0 <dhcp_parse_reply+0x304>)
 8013856:	f240 6241 	movw	r2, #1601	; 0x641
 801385a:	4916      	ldr	r1, [pc, #88]	; (80138b4 <dhcp_parse_reply+0x308>)
 801385c:	4816      	ldr	r0, [pc, #88]	; (80138b8 <dhcp_parse_reply+0x30c>)
 801385e:	f003 fc83 	bl	8017168 <iprintf>
 8013862:	f06f 0305 	mvn.w	r3, #5
 8013866:	e1ba      	b.n	8013bde <dhcp_parse_reply+0x632>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8013868:	2303      	movs	r3, #3
 801386a:	623b      	str	r3, [r7, #32]
        break;
 801386c:	e07b      	b.n	8013966 <dhcp_parse_reply+0x3ba>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801386e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013872:	2b01      	cmp	r3, #1
 8013874:	d009      	beq.n	801388a <dhcp_parse_reply+0x2de>
 8013876:	4b0e      	ldr	r3, [pc, #56]	; (80138b0 <dhcp_parse_reply+0x304>)
 8013878:	f240 624f 	movw	r2, #1615	; 0x64f
 801387c:	4911      	ldr	r1, [pc, #68]	; (80138c4 <dhcp_parse_reply+0x318>)
 801387e:	480e      	ldr	r0, [pc, #56]	; (80138b8 <dhcp_parse_reply+0x30c>)
 8013880:	f003 fc72 	bl	8017168 <iprintf>
 8013884:	f06f 0305 	mvn.w	r3, #5
 8013888:	e1a9      	b.n	8013bde <dhcp_parse_reply+0x632>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801388a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801388c:	2bf0      	cmp	r3, #240	; 0xf0
 801388e:	d009      	beq.n	80138a4 <dhcp_parse_reply+0x2f8>
 8013890:	4b07      	ldr	r3, [pc, #28]	; (80138b0 <dhcp_parse_reply+0x304>)
 8013892:	f240 6251 	movw	r2, #1617	; 0x651
 8013896:	490c      	ldr	r1, [pc, #48]	; (80138c8 <dhcp_parse_reply+0x31c>)
 8013898:	4807      	ldr	r0, [pc, #28]	; (80138b8 <dhcp_parse_reply+0x30c>)
 801389a:	f003 fc65 	bl	8017168 <iprintf>
 801389e:	f06f 0305 	mvn.w	r3, #5
 80138a2:	e19c      	b.n	8013bde <dhcp_parse_reply+0x632>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80138a4:	2300      	movs	r3, #0
 80138a6:	623b      	str	r3, [r7, #32]
        break;
 80138a8:	e05d      	b.n	8013966 <dhcp_parse_reply+0x3ba>
 80138aa:	bf00      	nop
 80138ac:	2000da74 	.word	0x2000da74
 80138b0:	0801ad34 	.word	0x0801ad34
 80138b4:	0801ba08 	.word	0x0801ba08
 80138b8:	0801ad94 	.word	0x0801ad94
 80138bc:	0801ba14 	.word	0x0801ba14
 80138c0:	0801ba28 	.word	0x0801ba28
 80138c4:	0801ba38 	.word	0x0801ba38
 80138c8:	0801ba44 	.word	0x0801ba44
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80138cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80138d0:	2b01      	cmp	r3, #1
 80138d2:	d009      	beq.n	80138e8 <dhcp_parse_reply+0x33c>
 80138d4:	4ba2      	ldr	r3, [pc, #648]	; (8013b60 <dhcp_parse_reply+0x5b4>)
 80138d6:	f240 6255 	movw	r2, #1621	; 0x655
 80138da:	49a2      	ldr	r1, [pc, #648]	; (8013b64 <dhcp_parse_reply+0x5b8>)
 80138dc:	48a2      	ldr	r0, [pc, #648]	; (8013b68 <dhcp_parse_reply+0x5bc>)
 80138de:	f003 fc43 	bl	8017168 <iprintf>
 80138e2:	f06f 0305 	mvn.w	r3, #5
 80138e6:	e17a      	b.n	8013bde <dhcp_parse_reply+0x632>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80138e8:	2301      	movs	r3, #1
 80138ea:	623b      	str	r3, [r7, #32]
        break;
 80138ec:	e03b      	b.n	8013966 <dhcp_parse_reply+0x3ba>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80138ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80138f2:	2b04      	cmp	r3, #4
 80138f4:	d009      	beq.n	801390a <dhcp_parse_reply+0x35e>
 80138f6:	4b9a      	ldr	r3, [pc, #616]	; (8013b60 <dhcp_parse_reply+0x5b4>)
 80138f8:	f240 6259 	movw	r2, #1625	; 0x659
 80138fc:	499b      	ldr	r1, [pc, #620]	; (8013b6c <dhcp_parse_reply+0x5c0>)
 80138fe:	489a      	ldr	r0, [pc, #616]	; (8013b68 <dhcp_parse_reply+0x5bc>)
 8013900:	f003 fc32 	bl	8017168 <iprintf>
 8013904:	f06f 0305 	mvn.w	r3, #5
 8013908:	e169      	b.n	8013bde <dhcp_parse_reply+0x632>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801390a:	2302      	movs	r3, #2
 801390c:	623b      	str	r3, [r7, #32]
        break;
 801390e:	e02a      	b.n	8013966 <dhcp_parse_reply+0x3ba>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013910:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013914:	2b04      	cmp	r3, #4
 8013916:	d009      	beq.n	801392c <dhcp_parse_reply+0x380>
 8013918:	4b91      	ldr	r3, [pc, #580]	; (8013b60 <dhcp_parse_reply+0x5b4>)
 801391a:	f240 625d 	movw	r2, #1629	; 0x65d
 801391e:	4993      	ldr	r1, [pc, #588]	; (8013b6c <dhcp_parse_reply+0x5c0>)
 8013920:	4891      	ldr	r0, [pc, #580]	; (8013b68 <dhcp_parse_reply+0x5bc>)
 8013922:	f003 fc21 	bl	8017168 <iprintf>
 8013926:	f06f 0305 	mvn.w	r3, #5
 801392a:	e158      	b.n	8013bde <dhcp_parse_reply+0x632>
        decode_idx = DHCP_OPTION_IDX_T1;
 801392c:	2304      	movs	r3, #4
 801392e:	623b      	str	r3, [r7, #32]
        break;
 8013930:	e019      	b.n	8013966 <dhcp_parse_reply+0x3ba>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013932:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013936:	2b04      	cmp	r3, #4
 8013938:	d009      	beq.n	801394e <dhcp_parse_reply+0x3a2>
 801393a:	4b89      	ldr	r3, [pc, #548]	; (8013b60 <dhcp_parse_reply+0x5b4>)
 801393c:	f240 6261 	movw	r2, #1633	; 0x661
 8013940:	498a      	ldr	r1, [pc, #552]	; (8013b6c <dhcp_parse_reply+0x5c0>)
 8013942:	4889      	ldr	r0, [pc, #548]	; (8013b68 <dhcp_parse_reply+0x5bc>)
 8013944:	f003 fc10 	bl	8017168 <iprintf>
 8013948:	f06f 0305 	mvn.w	r3, #5
 801394c:	e147      	b.n	8013bde <dhcp_parse_reply+0x632>
        decode_idx = DHCP_OPTION_IDX_T2;
 801394e:	2305      	movs	r3, #5
 8013950:	623b      	str	r3, [r7, #32]
        break;
 8013952:	e008      	b.n	8013966 <dhcp_parse_reply+0x3ba>
      default:
        decode_len = 0;
 8013954:	2300      	movs	r3, #0
 8013956:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
 801395a:	7dfb      	ldrb	r3, [r7, #23]
 801395c:	4619      	mov	r1, r3
 801395e:	4884      	ldr	r0, [pc, #528]	; (8013b70 <dhcp_parse_reply+0x5c4>)
 8013960:	f003 fc02 	bl	8017168 <iprintf>
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8013964:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8013966:	7dfb      	ldrb	r3, [r7, #23]
 8013968:	2b00      	cmp	r3, #0
 801396a:	d103      	bne.n	8013974 <dhcp_parse_reply+0x3c8>
      offset++;
 801396c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801396e:	3301      	adds	r3, #1
 8013970:	877b      	strh	r3, [r7, #58]	; 0x3a
 8013972:	e0a1      	b.n	8013ab8 <dhcp_parse_reply+0x50c>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8013974:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013976:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801397a:	4413      	add	r3, r2
 801397c:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8013980:	4293      	cmp	r3, r2
 8013982:	dd02      	ble.n	801398a <dhcp_parse_reply+0x3de>
        /* overflow */
        return ERR_BUF;
 8013984:	f06f 0301 	mvn.w	r3, #1
 8013988:	e129      	b.n	8013bde <dhcp_parse_reply+0x632>
      }
      offset = (u16_t)(offset + len + 2);
 801398a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801398e:	b29a      	uxth	r2, r3
 8013990:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013992:	4413      	add	r3, r2
 8013994:	b29b      	uxth	r3, r3
 8013996:	3302      	adds	r3, #2
 8013998:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 801399a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801399e:	2b00      	cmp	r3, #0
 80139a0:	f000 808a 	beq.w	8013ab8 <dhcp_parse_reply+0x50c>
        u32_t value = 0;
 80139a4:	2300      	movs	r3, #0
 80139a6:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80139a8:	6a3b      	ldr	r3, [r7, #32]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	db02      	blt.n	80139b4 <dhcp_parse_reply+0x408>
 80139ae:	6a3b      	ldr	r3, [r7, #32]
 80139b0:	2b09      	cmp	r3, #9
 80139b2:	dd06      	ble.n	80139c2 <dhcp_parse_reply+0x416>
 80139b4:	4b6a      	ldr	r3, [pc, #424]	; (8013b60 <dhcp_parse_reply+0x5b4>)
 80139b6:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80139ba:	496e      	ldr	r1, [pc, #440]	; (8013b74 <dhcp_parse_reply+0x5c8>)
 80139bc:	486a      	ldr	r0, [pc, #424]	; (8013b68 <dhcp_parse_reply+0x5bc>)
 80139be:	f003 fbd3 	bl	8017168 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80139c2:	4a6d      	ldr	r2, [pc, #436]	; (8013b78 <dhcp_parse_reply+0x5cc>)
 80139c4:	6a3b      	ldr	r3, [r7, #32]
 80139c6:	4413      	add	r3, r2
 80139c8:	781b      	ldrb	r3, [r3, #0]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d174      	bne.n	8013ab8 <dhcp_parse_reply+0x50c>
          copy_len = LWIP_MIN(decode_len, 4);
 80139ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80139d2:	2b04      	cmp	r3, #4
 80139d4:	bf28      	it	cs
 80139d6:	2304      	movcs	r3, #4
 80139d8:	b2db      	uxtb	r3, r3
 80139da:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80139dc:	8bfb      	ldrh	r3, [r7, #30]
 80139de:	8aba      	ldrh	r2, [r7, #20]
 80139e0:	f107 0108 	add.w	r1, r7, #8
 80139e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80139e6:	f7f7 fff3 	bl	800b9d0 <pbuf_copy_partial>
 80139ea:	4603      	mov	r3, r0
 80139ec:	461a      	mov	r2, r3
 80139ee:	8abb      	ldrh	r3, [r7, #20]
 80139f0:	4293      	cmp	r3, r2
 80139f2:	d002      	beq.n	80139fa <dhcp_parse_reply+0x44e>
            return ERR_BUF;
 80139f4:	f06f 0301 	mvn.w	r3, #1
 80139f8:	e0f1      	b.n	8013bde <dhcp_parse_reply+0x632>
          }
          if (decode_len > 4) {
 80139fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80139fe:	2b04      	cmp	r3, #4
 8013a00:	d933      	bls.n	8013a6a <dhcp_parse_reply+0x4be>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8013a02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013a06:	f003 0303 	and.w	r3, r3, #3
 8013a0a:	b2db      	uxtb	r3, r3
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d009      	beq.n	8013a24 <dhcp_parse_reply+0x478>
 8013a10:	4b53      	ldr	r3, [pc, #332]	; (8013b60 <dhcp_parse_reply+0x5b4>)
 8013a12:	f240 6281 	movw	r2, #1665	; 0x681
 8013a16:	4959      	ldr	r1, [pc, #356]	; (8013b7c <dhcp_parse_reply+0x5d0>)
 8013a18:	4853      	ldr	r0, [pc, #332]	; (8013b68 <dhcp_parse_reply+0x5bc>)
 8013a1a:	f003 fba5 	bl	8017168 <iprintf>
 8013a1e:	f06f 0305 	mvn.w	r3, #5
 8013a22:	e0dc      	b.n	8013bde <dhcp_parse_reply+0x632>
            dhcp_got_option(dhcp, decode_idx);
 8013a24:	4a54      	ldr	r2, [pc, #336]	; (8013b78 <dhcp_parse_reply+0x5cc>)
 8013a26:	6a3b      	ldr	r3, [r7, #32]
 8013a28:	4413      	add	r3, r2
 8013a2a:	2201      	movs	r2, #1
 8013a2c:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8013a2e:	68bb      	ldr	r3, [r7, #8]
 8013a30:	4618      	mov	r0, r3
 8013a32:	f7f5 fdfa 	bl	800962a <lwip_htonl>
 8013a36:	4602      	mov	r2, r0
 8013a38:	4951      	ldr	r1, [pc, #324]	; (8013b80 <dhcp_parse_reply+0x5d4>)
 8013a3a:	6a3b      	ldr	r3, [r7, #32]
 8013a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8013a40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013a44:	3b04      	subs	r3, #4
 8013a46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8013a4a:	8bfb      	ldrh	r3, [r7, #30]
 8013a4c:	3304      	adds	r3, #4
 8013a4e:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8013a50:	8a7a      	ldrh	r2, [r7, #18]
 8013a52:	8bfb      	ldrh	r3, [r7, #30]
 8013a54:	429a      	cmp	r2, r3
 8013a56:	d202      	bcs.n	8013a5e <dhcp_parse_reply+0x4b2>
              /* overflow */
              return ERR_BUF;
 8013a58:	f06f 0301 	mvn.w	r3, #1
 8013a5c:	e0bf      	b.n	8013bde <dhcp_parse_reply+0x632>
            }
            val_offset = next_val_offset;
 8013a5e:	8a7b      	ldrh	r3, [r7, #18]
 8013a60:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8013a62:	6a3b      	ldr	r3, [r7, #32]
 8013a64:	3301      	adds	r3, #1
 8013a66:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8013a68:	e79e      	b.n	80139a8 <dhcp_parse_reply+0x3fc>
          } else if (decode_len == 4) {
 8013a6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013a6e:	2b04      	cmp	r3, #4
 8013a70:	d106      	bne.n	8013a80 <dhcp_parse_reply+0x4d4>
            value = lwip_ntohl(value);
 8013a72:	68bb      	ldr	r3, [r7, #8]
 8013a74:	4618      	mov	r0, r3
 8013a76:	f7f5 fdd8 	bl	800962a <lwip_htonl>
 8013a7a:	4603      	mov	r3, r0
 8013a7c:	60bb      	str	r3, [r7, #8]
 8013a7e:	e011      	b.n	8013aa4 <dhcp_parse_reply+0x4f8>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8013a80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013a84:	2b01      	cmp	r3, #1
 8013a86:	d009      	beq.n	8013a9c <dhcp_parse_reply+0x4f0>
 8013a88:	4b35      	ldr	r3, [pc, #212]	; (8013b60 <dhcp_parse_reply+0x5b4>)
 8013a8a:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8013a8e:	493d      	ldr	r1, [pc, #244]	; (8013b84 <dhcp_parse_reply+0x5d8>)
 8013a90:	4835      	ldr	r0, [pc, #212]	; (8013b68 <dhcp_parse_reply+0x5bc>)
 8013a92:	f003 fb69 	bl	8017168 <iprintf>
 8013a96:	f06f 0305 	mvn.w	r3, #5
 8013a9a:	e0a0      	b.n	8013bde <dhcp_parse_reply+0x632>
            value = ((u8_t *)&value)[0];
 8013a9c:	f107 0308 	add.w	r3, r7, #8
 8013aa0:	781b      	ldrb	r3, [r3, #0]
 8013aa2:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8013aa4:	4a34      	ldr	r2, [pc, #208]	; (8013b78 <dhcp_parse_reply+0x5cc>)
 8013aa6:	6a3b      	ldr	r3, [r7, #32]
 8013aa8:	4413      	add	r3, r2
 8013aaa:	2201      	movs	r2, #1
 8013aac:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8013aae:	68ba      	ldr	r2, [r7, #8]
 8013ab0:	4933      	ldr	r1, [pc, #204]	; (8013b80 <dhcp_parse_reply+0x5d4>)
 8013ab2:	6a3b      	ldr	r3, [r7, #32]
 8013ab4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8013ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aba:	895b      	ldrh	r3, [r3, #10]
 8013abc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013abe:	429a      	cmp	r2, r3
 8013ac0:	d324      	bcc.n	8013b0c <dhcp_parse_reply+0x560>
      offset = (u16_t)(offset - q->len);
 8013ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ac4:	895b      	ldrh	r3, [r3, #10]
 8013ac6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013ac8:	1ad3      	subs	r3, r2, r3
 8013aca:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8013acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ace:	895b      	ldrh	r3, [r3, #10]
 8013ad0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8013ad2:	1ad3      	subs	r3, r2, r3
 8013ad4:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8013ad6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013ad8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8013ada:	429a      	cmp	r2, r3
 8013adc:	d213      	bcs.n	8013b06 <dhcp_parse_reply+0x55a>
        q = q->next;
 8013ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8013ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d109      	bne.n	8013afe <dhcp_parse_reply+0x552>
 8013aea:	4b1d      	ldr	r3, [pc, #116]	; (8013b60 <dhcp_parse_reply+0x5b4>)
 8013aec:	f240 629d 	movw	r2, #1693	; 0x69d
 8013af0:	4925      	ldr	r1, [pc, #148]	; (8013b88 <dhcp_parse_reply+0x5dc>)
 8013af2:	481d      	ldr	r0, [pc, #116]	; (8013b68 <dhcp_parse_reply+0x5bc>)
 8013af4:	f003 fb38 	bl	8017168 <iprintf>
 8013af8:	f06f 0305 	mvn.w	r3, #5
 8013afc:	e06f      	b.n	8013bde <dhcp_parse_reply+0x632>
        options = (u8_t *)q->payload;
 8013afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b00:	685b      	ldr	r3, [r3, #4]
 8013b02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013b04:	e002      	b.n	8013b0c <dhcp_parse_reply+0x560>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8013b06:	f06f 0301 	mvn.w	r3, #1
 8013b0a:	e068      	b.n	8013bde <dhcp_parse_reply+0x632>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8013b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d00a      	beq.n	8013b28 <dhcp_parse_reply+0x57c>
 8013b12:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013b14:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8013b16:	429a      	cmp	r2, r3
 8013b18:	d206      	bcs.n	8013b28 <dhcp_parse_reply+0x57c>
 8013b1a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013b1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013b1e:	4413      	add	r3, r2
 8013b20:	781b      	ldrb	r3, [r3, #0]
 8013b22:	2bff      	cmp	r3, #255	; 0xff
 8013b24:	f47f ad85 	bne.w	8013632 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8013b28:	4b13      	ldr	r3, [pc, #76]	; (8013b78 <dhcp_parse_reply+0x5cc>)
 8013b2a:	781b      	ldrb	r3, [r3, #0]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d041      	beq.n	8013bb4 <dhcp_parse_reply+0x608>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8013b30:	4b13      	ldr	r3, [pc, #76]	; (8013b80 <dhcp_parse_reply+0x5d4>)
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8013b36:	4b10      	ldr	r3, [pc, #64]	; (8013b78 <dhcp_parse_reply+0x5cc>)
 8013b38:	2200      	movs	r2, #0
 8013b3a:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	2b01      	cmp	r3, #1
 8013b40:	d105      	bne.n	8013b4e <dhcp_parse_reply+0x5a2>
      parse_file_as_options = 1;
 8013b42:	2301      	movs	r3, #1
 8013b44:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
 8013b46:	4811      	ldr	r0, [pc, #68]	; (8013b8c <dhcp_parse_reply+0x5e0>)
 8013b48:	f003 fbaa 	bl	80172a0 <puts>
 8013b4c:	e032      	b.n	8013bb4 <dhcp_parse_reply+0x608>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	2b02      	cmp	r3, #2
 8013b52:	d11f      	bne.n	8013b94 <dhcp_parse_reply+0x5e8>
      parse_sname_as_options = 1;
 8013b54:	2301      	movs	r3, #1
 8013b56:	62bb      	str	r3, [r7, #40]	; 0x28
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
 8013b58:	480d      	ldr	r0, [pc, #52]	; (8013b90 <dhcp_parse_reply+0x5e4>)
 8013b5a:	f003 fba1 	bl	80172a0 <puts>
 8013b5e:	e029      	b.n	8013bb4 <dhcp_parse_reply+0x608>
 8013b60:	0801ad34 	.word	0x0801ad34
 8013b64:	0801ba38 	.word	0x0801ba38
 8013b68:	0801ad94 	.word	0x0801ad94
 8013b6c:	0801ba08 	.word	0x0801ba08
 8013b70:	0801ba5c 	.word	0x0801ba5c
 8013b74:	0801ba7c 	.word	0x0801ba7c
 8013b78:	2000da74 	.word	0x2000da74
 8013b7c:	0801ba90 	.word	0x0801ba90
 8013b80:	2000da4c 	.word	0x2000da4c
 8013b84:	0801baa8 	.word	0x0801baa8
 8013b88:	0801babc 	.word	0x0801babc
 8013b8c:	0801bad0 	.word	0x0801bad0
 8013b90:	0801bae8 	.word	0x0801bae8
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	2b03      	cmp	r3, #3
 8013b98:	d107      	bne.n	8013baa <dhcp_parse_reply+0x5fe>
      parse_sname_as_options = 1;
 8013b9a:	2301      	movs	r3, #1
 8013b9c:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8013b9e:	2301      	movs	r3, #1
 8013ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
 8013ba2:	4811      	ldr	r0, [pc, #68]	; (8013be8 <dhcp_parse_reply+0x63c>)
 8013ba4:	f003 fb7c 	bl	80172a0 <puts>
 8013ba8:	e004      	b.n	8013bb4 <dhcp_parse_reply+0x608>
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	4619      	mov	r1, r3
 8013bae:	480f      	ldr	r0, [pc, #60]	; (8013bec <dhcp_parse_reply+0x640>)
 8013bb0:	f003 fada 	bl	8017168 <iprintf>
    }
  }
  if (parse_file_as_options) {
 8013bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d006      	beq.n	8013bc8 <dhcp_parse_reply+0x61c>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8013bba:	2300      	movs	r3, #0
 8013bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8013bbe:	236c      	movs	r3, #108	; 0x6c
 8013bc0:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8013bc2:	23ec      	movs	r3, #236	; 0xec
 8013bc4:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8013bc6:	e50e      	b.n	80135e6 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8013bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d006      	beq.n	8013bdc <dhcp_parse_reply+0x630>
    parse_sname_as_options = 0;
 8013bce:	2300      	movs	r3, #0
 8013bd0:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8013bd2:	232c      	movs	r3, #44	; 0x2c
 8013bd4:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8013bd6:	236c      	movs	r3, #108	; 0x6c
 8013bd8:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8013bda:	e504      	b.n	80135e6 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8013bdc:	2300      	movs	r3, #0
}
 8013bde:	4618      	mov	r0, r3
 8013be0:	3740      	adds	r7, #64	; 0x40
 8013be2:	46bd      	mov	sp, r7
 8013be4:	bd80      	pop	{r7, pc}
 8013be6:	bf00      	nop
 8013be8:	0801bb00 	.word	0x0801bb00
 8013bec:	0801bb20 	.word	0x0801bb20

08013bf0 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8013bf0:	b590      	push	{r4, r7, lr}
 8013bf2:	b08f      	sub	sp, #60	; 0x3c
 8013bf4:	af04      	add	r7, sp, #16
 8013bf6:	60f8      	str	r0, [r7, #12]
 8013bf8:	60b9      	str	r1, [r7, #8]
 8013bfa:	607a      	str	r2, [r7, #4]
 8013bfc:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8013bfe:	4b8c      	ldr	r3, [pc, #560]	; (8013e30 <dhcp_recv+0x240>)
 8013c00:	685b      	ldr	r3, [r3, #4]
 8013c02:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013c04:	6a3b      	ldr	r3, [r7, #32]
 8013c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c08:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	685b      	ldr	r3, [r3, #4]
 8013c0e:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8013c10:	69fb      	ldr	r3, [r7, #28]
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	f000 8102 	beq.w	8013e1c <dhcp_recv+0x22c>
 8013c18:	69fb      	ldr	r3, [r7, #28]
 8013c1a:	791b      	ldrb	r3, [r3, #4]
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	f000 80fd 	beq.w	8013e1c <dhcp_recv+0x22c>
    goto free_pbuf_and_return;
  }

  LWIP_ASSERT("invalid server address type", IP_IS_V4(addr));

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_recv(pbuf = %p) from DHCP server %"U16_F".%"U16_F".%"U16_F".%"U16_F" port %"U16_F"\n", (void *)p,
 8013c22:	683b      	ldr	r3, [r7, #0]
 8013c24:	781b      	ldrb	r3, [r3, #0]
 8013c26:	4618      	mov	r0, r3
 8013c28:	683b      	ldr	r3, [r7, #0]
 8013c2a:	3301      	adds	r3, #1
 8013c2c:	781b      	ldrb	r3, [r3, #0]
 8013c2e:	461c      	mov	r4, r3
 8013c30:	683b      	ldr	r3, [r7, #0]
 8013c32:	3302      	adds	r3, #2
 8013c34:	781b      	ldrb	r3, [r3, #0]
 8013c36:	461a      	mov	r2, r3
 8013c38:	683b      	ldr	r3, [r7, #0]
 8013c3a:	3303      	adds	r3, #3
 8013c3c:	781b      	ldrb	r3, [r3, #0]
 8013c3e:	4619      	mov	r1, r3
 8013c40:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8013c42:	9302      	str	r3, [sp, #8]
 8013c44:	9101      	str	r1, [sp, #4]
 8013c46:	9200      	str	r2, [sp, #0]
 8013c48:	4623      	mov	r3, r4
 8013c4a:	4602      	mov	r2, r0
 8013c4c:	6879      	ldr	r1, [r7, #4]
 8013c4e:	4879      	ldr	r0, [pc, #484]	; (8013e34 <dhcp_recv+0x244>)
 8013c50:	f003 fa8a 	bl	8017168 <iprintf>
              ip4_addr1_16(ip_2_ip4(addr)), ip4_addr2_16(ip_2_ip4(addr)), ip4_addr3_16(ip_2_ip4(addr)), ip4_addr4_16(ip_2_ip4(addr)), port));
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("pbuf->len = %"U16_F"\n", p->len));
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	895b      	ldrh	r3, [r3, #10]
 8013c58:	4619      	mov	r1, r3
 8013c5a:	4877      	ldr	r0, [pc, #476]	; (8013e38 <dhcp_recv+0x248>)
 8013c5c:	f003 fa84 	bl	8017168 <iprintf>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("pbuf->tot_len = %"U16_F"\n", p->tot_len));
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	891b      	ldrh	r3, [r3, #8]
 8013c64:	4619      	mov	r1, r3
 8013c66:	4875      	ldr	r0, [pc, #468]	; (8013e3c <dhcp_recv+0x24c>)
 8013c68:	f003 fa7e 	bl	8017168 <iprintf>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	895b      	ldrh	r3, [r3, #10]
 8013c70:	2b2b      	cmp	r3, #43	; 0x2b
 8013c72:	d803      	bhi.n	8013c7c <dhcp_recv+0x8c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
 8013c74:	4872      	ldr	r0, [pc, #456]	; (8013e40 <dhcp_recv+0x250>)
 8013c76:	f003 fb13 	bl	80172a0 <puts>
    goto free_pbuf_and_return;
 8013c7a:	e0d2      	b.n	8013e22 <dhcp_recv+0x232>
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8013c7c:	69bb      	ldr	r3, [r7, #24]
 8013c7e:	781b      	ldrb	r3, [r3, #0]
 8013c80:	2b02      	cmp	r3, #2
 8013c82:	d006      	beq.n	8013c92 <dhcp_recv+0xa2>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
 8013c84:	69bb      	ldr	r3, [r7, #24]
 8013c86:	781b      	ldrb	r3, [r3, #0]
 8013c88:	4619      	mov	r1, r3
 8013c8a:	486e      	ldr	r0, [pc, #440]	; (8013e44 <dhcp_recv+0x254>)
 8013c8c:	f003 fa6c 	bl	8017168 <iprintf>
    goto free_pbuf_and_return;
 8013c90:	e0c7      	b.n	8013e22 <dhcp_recv+0x232>
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8013c92:	2300      	movs	r3, #0
 8013c94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013c98:	e028      	b.n	8013cec <dhcp_recv+0xfc>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8013c9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013c9e:	6a3a      	ldr	r2, [r7, #32]
 8013ca0:	4413      	add	r3, r2
 8013ca2:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8013ca6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013caa:	69b9      	ldr	r1, [r7, #24]
 8013cac:	440b      	add	r3, r1
 8013cae:	7f1b      	ldrb	r3, [r3, #28]
 8013cb0:	429a      	cmp	r2, r3
 8013cb2:	d016      	beq.n	8013ce2 <dhcp_recv+0xf2>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 8013cb4:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8013cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013cbc:	6a3a      	ldr	r2, [r7, #32]
 8013cbe:	4413      	add	r3, r2
 8013cc0:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8013cc4:	461c      	mov	r4, r3
 8013cc6:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 8013cca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013cce:	69ba      	ldr	r2, [r7, #24]
 8013cd0:	4413      	add	r3, r2
 8013cd2:	7f1b      	ldrb	r3, [r3, #28]
 8013cd4:	9300      	str	r3, [sp, #0]
 8013cd6:	4603      	mov	r3, r0
 8013cd8:	4622      	mov	r2, r4
 8013cda:	485b      	ldr	r0, [pc, #364]	; (8013e48 <dhcp_recv+0x258>)
 8013cdc:	f003 fa44 	bl	8017168 <iprintf>
                  ("netif->hwaddr[%"U16_F"]==%02"X16_F" != reply_msg->chaddr[%"U16_F"]==%02"X16_F"\n",
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
 8013ce0:	e09f      	b.n	8013e22 <dhcp_recv+0x232>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8013ce2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013ce6:	3301      	adds	r3, #1
 8013ce8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013cec:	6a3b      	ldr	r3, [r7, #32]
 8013cee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013cf2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013cf6:	429a      	cmp	r2, r3
 8013cf8:	d203      	bcs.n	8013d02 <dhcp_recv+0x112>
 8013cfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013cfe:	2b05      	cmp	r3, #5
 8013d00:	d9cb      	bls.n	8013c9a <dhcp_recv+0xaa>
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8013d02:	69bb      	ldr	r3, [r7, #24]
 8013d04:	685b      	ldr	r3, [r3, #4]
 8013d06:	4618      	mov	r0, r3
 8013d08:	f7f5 fc8f 	bl	800962a <lwip_htonl>
 8013d0c:	4602      	mov	r2, r0
 8013d0e:	69fb      	ldr	r3, [r7, #28]
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	429a      	cmp	r2, r3
 8013d14:	d00c      	beq.n	8013d30 <dhcp_recv+0x140>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 8013d16:	69bb      	ldr	r3, [r7, #24]
 8013d18:	685b      	ldr	r3, [r3, #4]
 8013d1a:	4618      	mov	r0, r3
 8013d1c:	f7f5 fc85 	bl	800962a <lwip_htonl>
 8013d20:	4601      	mov	r1, r0
 8013d22:	69fb      	ldr	r3, [r7, #28]
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	461a      	mov	r2, r3
 8013d28:	4848      	ldr	r0, [pc, #288]	; (8013e4c <dhcp_recv+0x25c>)
 8013d2a:	f003 fa1d 	bl	8017168 <iprintf>
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
 8013d2e:	e078      	b.n	8013e22 <dhcp_recv+0x232>
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8013d30:	69f9      	ldr	r1, [r7, #28]
 8013d32:	6878      	ldr	r0, [r7, #4]
 8013d34:	f7ff fc3a 	bl	80135ac <dhcp_parse_reply>
 8013d38:	4603      	mov	r3, r0
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d003      	beq.n	8013d46 <dhcp_recv+0x156>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 8013d3e:	4844      	ldr	r0, [pc, #272]	; (8013e50 <dhcp_recv+0x260>)
 8013d40:	f003 faae 	bl	80172a0 <puts>
                ("problem unfolding DHCP message - too short on memory?\n"));
    goto free_pbuf_and_return;
 8013d44:	e06d      	b.n	8013e22 <dhcp_recv+0x232>
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
 8013d46:	4843      	ldr	r0, [pc, #268]	; (8013e54 <dhcp_recv+0x264>)
 8013d48:	f003 faaa 	bl	80172a0 <puts>
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8013d4c:	4b42      	ldr	r3, [pc, #264]	; (8013e58 <dhcp_recv+0x268>)
 8013d4e:	785b      	ldrb	r3, [r3, #1]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d103      	bne.n	8013d5c <dhcp_recv+0x16c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
 8013d54:	4841      	ldr	r0, [pc, #260]	; (8013e5c <dhcp_recv+0x26c>)
 8013d56:	f003 faa3 	bl	80172a0 <puts>
    goto free_pbuf_and_return;
 8013d5a:	e062      	b.n	8013e22 <dhcp_recv+0x232>
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	685b      	ldr	r3, [r3, #4]
 8013d60:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8013d62:	4b3f      	ldr	r3, [pc, #252]	; (8013e60 <dhcp_recv+0x270>)
 8013d64:	685b      	ldr	r3, [r3, #4]
 8013d66:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8013d68:	7cfb      	ldrb	r3, [r7, #19]
 8013d6a:	2b05      	cmp	r3, #5
 8013d6c:	d12d      	bne.n	8013dca <dhcp_recv+0x1da>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
 8013d6e:	483d      	ldr	r0, [pc, #244]	; (8013e64 <dhcp_recv+0x274>)
 8013d70:	f003 fa96 	bl	80172a0 <puts>
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8013d74:	69fb      	ldr	r3, [r7, #28]
 8013d76:	795b      	ldrb	r3, [r3, #5]
 8013d78:	2b01      	cmp	r3, #1
 8013d7a:	d112      	bne.n	8013da2 <dhcp_recv+0x1b2>
      dhcp_handle_ack(netif, msg_in);
 8013d7c:	6979      	ldr	r1, [r7, #20]
 8013d7e:	6a38      	ldr	r0, [r7, #32]
 8013d80:	f7fe fc24 	bl	80125cc <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8013d84:	6a3b      	ldr	r3, [r7, #32]
 8013d86:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013d8a:	f003 0308 	and.w	r3, r3, #8
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d003      	beq.n	8013d9a <dhcp_recv+0x1aa>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8013d92:	6a38      	ldr	r0, [r7, #32]
 8013d94:	f7fe f8e4 	bl	8011f60 <dhcp_check>
 8013d98:	e043      	b.n	8013e22 <dhcp_recv+0x232>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8013d9a:	6a38      	ldr	r0, [r7, #32]
 8013d9c:	f7fe ff14 	bl	8012bc8 <dhcp_bind>
 8013da0:	e03f      	b.n	8013e22 <dhcp_recv+0x232>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8013da2:	69fb      	ldr	r3, [r7, #28]
 8013da4:	795b      	ldrb	r3, [r3, #5]
 8013da6:	2b03      	cmp	r3, #3
 8013da8:	d007      	beq.n	8013dba <dhcp_recv+0x1ca>
 8013daa:	69fb      	ldr	r3, [r7, #28]
 8013dac:	795b      	ldrb	r3, [r3, #5]
 8013dae:	2b04      	cmp	r3, #4
 8013db0:	d003      	beq.n	8013dba <dhcp_recv+0x1ca>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8013db2:	69fb      	ldr	r3, [r7, #28]
 8013db4:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8013db6:	2b05      	cmp	r3, #5
 8013db8:	d133      	bne.n	8013e22 <dhcp_recv+0x232>
      dhcp_handle_ack(netif, msg_in);
 8013dba:	6979      	ldr	r1, [r7, #20]
 8013dbc:	6a38      	ldr	r0, [r7, #32]
 8013dbe:	f7fe fc05 	bl	80125cc <dhcp_handle_ack>
      dhcp_bind(netif);
 8013dc2:	6a38      	ldr	r0, [r7, #32]
 8013dc4:	f7fe ff00 	bl	8012bc8 <dhcp_bind>
 8013dc8:	e02b      	b.n	8013e22 <dhcp_recv+0x232>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8013dca:	7cfb      	ldrb	r3, [r7, #19]
 8013dcc:	2b06      	cmp	r3, #6
 8013dce:	d116      	bne.n	8013dfe <dhcp_recv+0x20e>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8013dd0:	69fb      	ldr	r3, [r7, #28]
 8013dd2:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8013dd4:	2b03      	cmp	r3, #3
 8013dd6:	d00b      	beq.n	8013df0 <dhcp_recv+0x200>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8013dd8:	69fb      	ldr	r3, [r7, #28]
 8013dda:	795b      	ldrb	r3, [r3, #5]
 8013ddc:	2b01      	cmp	r3, #1
 8013dde:	d007      	beq.n	8013df0 <dhcp_recv+0x200>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8013de0:	69fb      	ldr	r3, [r7, #28]
 8013de2:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8013de4:	2b04      	cmp	r3, #4
 8013de6:	d003      	beq.n	8013df0 <dhcp_recv+0x200>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8013de8:	69fb      	ldr	r3, [r7, #28]
 8013dea:	795b      	ldrb	r3, [r3, #5]
 8013dec:	2b05      	cmp	r3, #5
 8013dee:	d106      	bne.n	8013dfe <dhcp_recv+0x20e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
 8013df0:	481d      	ldr	r0, [pc, #116]	; (8013e68 <dhcp_recv+0x278>)
 8013df2:	f003 fa55 	bl	80172a0 <puts>
    dhcp_handle_nak(netif);
 8013df6:	6a38      	ldr	r0, [r7, #32]
 8013df8:	f7fe f884 	bl	8011f04 <dhcp_handle_nak>
 8013dfc:	e011      	b.n	8013e22 <dhcp_recv+0x232>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8013dfe:	7cfb      	ldrb	r3, [r7, #19]
 8013e00:	2b02      	cmp	r3, #2
 8013e02:	d10d      	bne.n	8013e20 <dhcp_recv+0x230>
 8013e04:	69fb      	ldr	r3, [r7, #28]
 8013e06:	795b      	ldrb	r3, [r3, #5]
 8013e08:	2b06      	cmp	r3, #6
 8013e0a:	d109      	bne.n	8013e20 <dhcp_recv+0x230>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
 8013e0c:	4817      	ldr	r0, [pc, #92]	; (8013e6c <dhcp_recv+0x27c>)
 8013e0e:	f003 fa47 	bl	80172a0 <puts>
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8013e12:	6979      	ldr	r1, [r7, #20]
 8013e14:	6a38      	ldr	r0, [r7, #32]
 8013e16:	f7fe f8f3 	bl	8012000 <dhcp_handle_offer>
 8013e1a:	e002      	b.n	8013e22 <dhcp_recv+0x232>
    goto free_pbuf_and_return;
 8013e1c:	bf00      	nop
 8013e1e:	e000      	b.n	8013e22 <dhcp_recv+0x232>
  }

free_pbuf_and_return:
 8013e20:	bf00      	nop
  pbuf_free(p);
 8013e22:	6878      	ldr	r0, [r7, #4]
 8013e24:	f7f7 fbce 	bl	800b5c4 <pbuf_free>
}
 8013e28:	bf00      	nop
 8013e2a:	372c      	adds	r7, #44	; 0x2c
 8013e2c:	46bd      	mov	sp, r7
 8013e2e:	bd90      	pop	{r4, r7, pc}
 8013e30:	2000a0d0 	.word	0x2000a0d0
 8013e34:	0801bb40 	.word	0x0801bb40
 8013e38:	0801bb80 	.word	0x0801bb80
 8013e3c:	0801bb94 	.word	0x0801bb94
 8013e40:	0801bbac 	.word	0x0801bbac
 8013e44:	0801bbd4 	.word	0x0801bbd4
 8013e48:	0801bbfc 	.word	0x0801bbfc
 8013e4c:	0801bc38 	.word	0x0801bc38
 8013e50:	0801bc78 	.word	0x0801bc78
 8013e54:	0801bcb0 	.word	0x0801bcb0
 8013e58:	2000da74 	.word	0x2000da74
 8013e5c:	0801bcd4 	.word	0x0801bcd4
 8013e60:	2000da4c 	.word	0x2000da4c
 8013e64:	0801bd00 	.word	0x0801bd00
 8013e68:	0801bd14 	.word	0x0801bd14
 8013e6c:	0801bd28 	.word	0x0801bd28

08013e70 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8013e70:	b580      	push	{r7, lr}
 8013e72:	b088      	sub	sp, #32
 8013e74:	af00      	add	r7, sp, #0
 8013e76:	60f8      	str	r0, [r7, #12]
 8013e78:	60b9      	str	r1, [r7, #8]
 8013e7a:	603b      	str	r3, [r7, #0]
 8013e7c:	4613      	mov	r3, r2
 8013e7e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d108      	bne.n	8013e98 <dhcp_create_msg+0x28>
 8013e86:	4b64      	ldr	r3, [pc, #400]	; (8014018 <dhcp_create_msg+0x1a8>)
 8013e88:	f240 7269 	movw	r2, #1897	; 0x769
 8013e8c:	4963      	ldr	r1, [pc, #396]	; (801401c <dhcp_create_msg+0x1ac>)
 8013e8e:	4864      	ldr	r0, [pc, #400]	; (8014020 <dhcp_create_msg+0x1b0>)
 8013e90:	f003 f96a 	bl	8017168 <iprintf>
 8013e94:	2300      	movs	r3, #0
 8013e96:	e0ba      	b.n	801400e <dhcp_create_msg+0x19e>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8013e98:	68bb      	ldr	r3, [r7, #8]
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d108      	bne.n	8013eb0 <dhcp_create_msg+0x40>
 8013e9e:	4b5e      	ldr	r3, [pc, #376]	; (8014018 <dhcp_create_msg+0x1a8>)
 8013ea0:	f240 726a 	movw	r2, #1898	; 0x76a
 8013ea4:	495f      	ldr	r1, [pc, #380]	; (8014024 <dhcp_create_msg+0x1b4>)
 8013ea6:	485e      	ldr	r0, [pc, #376]	; (8014020 <dhcp_create_msg+0x1b0>)
 8013ea8:	f003 f95e 	bl	8017168 <iprintf>
 8013eac:	2300      	movs	r3, #0
 8013eae:	e0ae      	b.n	801400e <dhcp_create_msg+0x19e>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8013eb0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013eb4:	f44f 719a 	mov.w	r1, #308	; 0x134
 8013eb8:	2036      	movs	r0, #54	; 0x36
 8013eba:	f7f7 f89f 	bl	800affc <pbuf_alloc>
 8013ebe:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8013ec0:	69bb      	ldr	r3, [r7, #24]
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d104      	bne.n	8013ed0 <dhcp_create_msg+0x60>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 8013ec6:	4858      	ldr	r0, [pc, #352]	; (8014028 <dhcp_create_msg+0x1b8>)
 8013ec8:	f003 f9ea 	bl	80172a0 <puts>
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8013ecc:	2300      	movs	r3, #0
 8013ece:	e09e      	b.n	801400e <dhcp_create_msg+0x19e>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8013ed0:	69bb      	ldr	r3, [r7, #24]
 8013ed2:	895b      	ldrh	r3, [r3, #10]
 8013ed4:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8013ed8:	d206      	bcs.n	8013ee8 <dhcp_create_msg+0x78>
 8013eda:	4b4f      	ldr	r3, [pc, #316]	; (8014018 <dhcp_create_msg+0x1a8>)
 8013edc:	f240 7271 	movw	r2, #1905	; 0x771
 8013ee0:	4952      	ldr	r1, [pc, #328]	; (801402c <dhcp_create_msg+0x1bc>)
 8013ee2:	484f      	ldr	r0, [pc, #316]	; (8014020 <dhcp_create_msg+0x1b0>)
 8013ee4:	f003 f940 	bl	8017168 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8013ee8:	79fb      	ldrb	r3, [r7, #7]
 8013eea:	2b03      	cmp	r3, #3
 8013eec:	d103      	bne.n	8013ef6 <dhcp_create_msg+0x86>
 8013eee:	68bb      	ldr	r3, [r7, #8]
 8013ef0:	795b      	ldrb	r3, [r3, #5]
 8013ef2:	2b03      	cmp	r3, #3
 8013ef4:	d10d      	bne.n	8013f12 <dhcp_create_msg+0xa2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8013ef6:	68bb      	ldr	r3, [r7, #8]
 8013ef8:	799b      	ldrb	r3, [r3, #6]
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d105      	bne.n	8013f0a <dhcp_create_msg+0x9a>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8013efe:	f003 f9d7 	bl	80172b0 <rand>
 8013f02:	4603      	mov	r3, r0
 8013f04:	461a      	mov	r2, r3
 8013f06:	4b4a      	ldr	r3, [pc, #296]	; (8014030 <dhcp_create_msg+0x1c0>)
 8013f08:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8013f0a:	4b49      	ldr	r3, [pc, #292]	; (8014030 <dhcp_create_msg+0x1c0>)
 8013f0c:	681a      	ldr	r2, [r3, #0]
 8013f0e:	68bb      	ldr	r3, [r7, #8]
 8013f10:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
 8013f12:	4b47      	ldr	r3, [pc, #284]	; (8014030 <dhcp_create_msg+0x1c0>)
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	4619      	mov	r1, r3
 8013f18:	4846      	ldr	r0, [pc, #280]	; (8014034 <dhcp_create_msg+0x1c4>)
 8013f1a:	f003 f925 	bl	8017168 <iprintf>
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8013f1e:	69bb      	ldr	r3, [r7, #24]
 8013f20:	685b      	ldr	r3, [r3, #4]
 8013f22:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8013f24:	f44f 729a 	mov.w	r2, #308	; 0x134
 8013f28:	2100      	movs	r1, #0
 8013f2a:	6978      	ldr	r0, [r7, #20]
 8013f2c:	f003 f914 	bl	8017158 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8013f30:	697b      	ldr	r3, [r7, #20]
 8013f32:	2201      	movs	r2, #1
 8013f34:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8013f36:	697b      	ldr	r3, [r7, #20]
 8013f38:	2201      	movs	r2, #1
 8013f3a:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8013f42:	697b      	ldr	r3, [r7, #20]
 8013f44:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8013f46:	68bb      	ldr	r3, [r7, #8]
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	4618      	mov	r0, r3
 8013f4c:	f7f5 fb6d 	bl	800962a <lwip_htonl>
 8013f50:	4602      	mov	r2, r0
 8013f52:	697b      	ldr	r3, [r7, #20]
 8013f54:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8013f56:	79fb      	ldrb	r3, [r7, #7]
 8013f58:	2b08      	cmp	r3, #8
 8013f5a:	d010      	beq.n	8013f7e <dhcp_create_msg+0x10e>
 8013f5c:	79fb      	ldrb	r3, [r7, #7]
 8013f5e:	2b04      	cmp	r3, #4
 8013f60:	d00d      	beq.n	8013f7e <dhcp_create_msg+0x10e>
 8013f62:	79fb      	ldrb	r3, [r7, #7]
 8013f64:	2b07      	cmp	r3, #7
 8013f66:	d00a      	beq.n	8013f7e <dhcp_create_msg+0x10e>
 8013f68:	79fb      	ldrb	r3, [r7, #7]
 8013f6a:	2b03      	cmp	r3, #3
 8013f6c:	d10c      	bne.n	8013f88 <dhcp_create_msg+0x118>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8013f6e:	68bb      	ldr	r3, [r7, #8]
 8013f70:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8013f72:	2b05      	cmp	r3, #5
 8013f74:	d003      	beq.n	8013f7e <dhcp_create_msg+0x10e>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8013f76:	68bb      	ldr	r3, [r7, #8]
 8013f78:	795b      	ldrb	r3, [r3, #5]
 8013f7a:	2b04      	cmp	r3, #4
 8013f7c:	d104      	bne.n	8013f88 <dhcp_create_msg+0x118>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	3304      	adds	r3, #4
 8013f82:	681a      	ldr	r2, [r3, #0]
 8013f84:	697b      	ldr	r3, [r7, #20]
 8013f86:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8013f88:	2300      	movs	r3, #0
 8013f8a:	83fb      	strh	r3, [r7, #30]
 8013f8c:	e00c      	b.n	8013fa8 <dhcp_create_msg+0x138>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8013f8e:	8bfa      	ldrh	r2, [r7, #30]
 8013f90:	8bfb      	ldrh	r3, [r7, #30]
 8013f92:	68f9      	ldr	r1, [r7, #12]
 8013f94:	440a      	add	r2, r1
 8013f96:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8013f9a:	697a      	ldr	r2, [r7, #20]
 8013f9c:	4413      	add	r3, r2
 8013f9e:	460a      	mov	r2, r1
 8013fa0:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8013fa2:	8bfb      	ldrh	r3, [r7, #30]
 8013fa4:	3301      	adds	r3, #1
 8013fa6:	83fb      	strh	r3, [r7, #30]
 8013fa8:	8bfb      	ldrh	r3, [r7, #30]
 8013faa:	2b05      	cmp	r3, #5
 8013fac:	d9ef      	bls.n	8013f8e <dhcp_create_msg+0x11e>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8013fae:	697b      	ldr	r3, [r7, #20]
 8013fb0:	2200      	movs	r2, #0
 8013fb2:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8013fb6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8013fba:	2200      	movs	r2, #0
 8013fbc:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8013fc0:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8013fc4:	2200      	movs	r2, #0
 8013fc6:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8013fca:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8013fce:	2200      	movs	r2, #0
 8013fd0:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8013fd4:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8013fd8:	697b      	ldr	r3, [r7, #20]
 8013fda:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013fde:	2301      	movs	r3, #1
 8013fe0:	2235      	movs	r2, #53	; 0x35
 8013fe2:	2000      	movs	r0, #0
 8013fe4:	f7ff fa12 	bl	801340c <dhcp_option>
 8013fe8:	4603      	mov	r3, r0
 8013fea:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8013fec:	697b      	ldr	r3, [r7, #20]
 8013fee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013ff2:	79fa      	ldrb	r2, [r7, #7]
 8013ff4:	8a7b      	ldrh	r3, [r7, #18]
 8013ff6:	4618      	mov	r0, r3
 8013ff8:	f7ff fa3c 	bl	8013474 <dhcp_option_byte>
 8013ffc:	4603      	mov	r3, r0
 8013ffe:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8014000:	683b      	ldr	r3, [r7, #0]
 8014002:	2b00      	cmp	r3, #0
 8014004:	d002      	beq.n	801400c <dhcp_create_msg+0x19c>
    *options_out_len = options_out_len_loc;
 8014006:	683b      	ldr	r3, [r7, #0]
 8014008:	8a7a      	ldrh	r2, [r7, #18]
 801400a:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801400c:	69bb      	ldr	r3, [r7, #24]
}
 801400e:	4618      	mov	r0, r3
 8014010:	3720      	adds	r7, #32
 8014012:	46bd      	mov	sp, r7
 8014014:	bd80      	pop	{r7, pc}
 8014016:	bf00      	nop
 8014018:	0801ad34 	.word	0x0801ad34
 801401c:	0801bd5c 	.word	0x0801bd5c
 8014020:	0801ad94 	.word	0x0801ad94
 8014024:	0801bd7c 	.word	0x0801bd7c
 8014028:	0801bd9c 	.word	0x0801bd9c
 801402c:	0801bdc8 	.word	0x0801bdc8
 8014030:	2000da88 	.word	0x2000da88
 8014034:	0801be08 	.word	0x0801be08

08014038 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8014038:	b580      	push	{r7, lr}
 801403a:	b084      	sub	sp, #16
 801403c:	af00      	add	r7, sp, #0
 801403e:	4603      	mov	r3, r0
 8014040:	60b9      	str	r1, [r7, #8]
 8014042:	607a      	str	r2, [r7, #4]
 8014044:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8014046:	89fb      	ldrh	r3, [r7, #14]
 8014048:	1c5a      	adds	r2, r3, #1
 801404a:	81fa      	strh	r2, [r7, #14]
 801404c:	461a      	mov	r2, r3
 801404e:	68bb      	ldr	r3, [r7, #8]
 8014050:	4413      	add	r3, r2
 8014052:	22ff      	movs	r2, #255	; 0xff
 8014054:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8014056:	e007      	b.n	8014068 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8014058:	89fb      	ldrh	r3, [r7, #14]
 801405a:	1c5a      	adds	r2, r3, #1
 801405c:	81fa      	strh	r2, [r7, #14]
 801405e:	461a      	mov	r2, r3
 8014060:	68bb      	ldr	r3, [r7, #8]
 8014062:	4413      	add	r3, r2
 8014064:	2200      	movs	r2, #0
 8014066:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8014068:	89fb      	ldrh	r3, [r7, #14]
 801406a:	2b43      	cmp	r3, #67	; 0x43
 801406c:	d904      	bls.n	8014078 <dhcp_option_trailer+0x40>
 801406e:	89fb      	ldrh	r3, [r7, #14]
 8014070:	f003 0303 	and.w	r3, r3, #3
 8014074:	2b00      	cmp	r3, #0
 8014076:	d002      	beq.n	801407e <dhcp_option_trailer+0x46>
 8014078:	89fb      	ldrh	r3, [r7, #14]
 801407a:	2b43      	cmp	r3, #67	; 0x43
 801407c:	d9ec      	bls.n	8014058 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801407e:	89fb      	ldrh	r3, [r7, #14]
 8014080:	33f0      	adds	r3, #240	; 0xf0
 8014082:	b29b      	uxth	r3, r3
 8014084:	4619      	mov	r1, r3
 8014086:	6878      	ldr	r0, [r7, #4]
 8014088:	f7f7 f916 	bl	800b2b8 <pbuf_realloc>
}
 801408c:	bf00      	nop
 801408e:	3710      	adds	r7, #16
 8014090:	46bd      	mov	sp, r7
 8014092:	bd80      	pop	{r7, pc}

08014094 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8014094:	b480      	push	{r7}
 8014096:	b085      	sub	sp, #20
 8014098:	af00      	add	r7, sp, #0
 801409a:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d017      	beq.n	80140d2 <dhcp_supplied_address+0x3e>
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d013      	beq.n	80140d2 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140ae:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	795b      	ldrb	r3, [r3, #5]
 80140b4:	2b0a      	cmp	r3, #10
 80140b6:	d007      	beq.n	80140c8 <dhcp_supplied_address+0x34>
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	795b      	ldrb	r3, [r3, #5]
 80140bc:	2b05      	cmp	r3, #5
 80140be:	d003      	beq.n	80140c8 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80140c4:	2b04      	cmp	r3, #4
 80140c6:	d101      	bne.n	80140cc <dhcp_supplied_address+0x38>
 80140c8:	2301      	movs	r3, #1
 80140ca:	e000      	b.n	80140ce <dhcp_supplied_address+0x3a>
 80140cc:	2300      	movs	r3, #0
 80140ce:	b2db      	uxtb	r3, r3
 80140d0:	e000      	b.n	80140d4 <dhcp_supplied_address+0x40>
  }
  return 0;
 80140d2:	2300      	movs	r3, #0
}
 80140d4:	4618      	mov	r0, r3
 80140d6:	3714      	adds	r7, #20
 80140d8:	46bd      	mov	sp, r7
 80140da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140de:	4770      	bx	lr

080140e0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80140e0:	b580      	push	{r7, lr}
 80140e2:	b082      	sub	sp, #8
 80140e4:	af00      	add	r7, sp, #0
 80140e6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80140e8:	4933      	ldr	r1, [pc, #204]	; (80141b8 <etharp_free_entry+0xd8>)
 80140ea:	687a      	ldr	r2, [r7, #4]
 80140ec:	4613      	mov	r3, r2
 80140ee:	005b      	lsls	r3, r3, #1
 80140f0:	4413      	add	r3, r2
 80140f2:	00db      	lsls	r3, r3, #3
 80140f4:	440b      	add	r3, r1
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d023      	beq.n	8014144 <etharp_free_entry+0x64>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	b29b      	uxth	r3, r3
 8014100:	4618      	mov	r0, r3
 8014102:	492d      	ldr	r1, [pc, #180]	; (80141b8 <etharp_free_entry+0xd8>)
 8014104:	687a      	ldr	r2, [r7, #4]
 8014106:	4613      	mov	r3, r2
 8014108:	005b      	lsls	r3, r3, #1
 801410a:	4413      	add	r3, r2
 801410c:	00db      	lsls	r3, r3, #3
 801410e:	440b      	add	r3, r1
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	461a      	mov	r2, r3
 8014114:	4601      	mov	r1, r0
 8014116:	4829      	ldr	r0, [pc, #164]	; (80141bc <etharp_free_entry+0xdc>)
 8014118:	f003 f826 	bl	8017168 <iprintf>
    free_etharp_q(arp_table[i].q);
 801411c:	4926      	ldr	r1, [pc, #152]	; (80141b8 <etharp_free_entry+0xd8>)
 801411e:	687a      	ldr	r2, [r7, #4]
 8014120:	4613      	mov	r3, r2
 8014122:	005b      	lsls	r3, r3, #1
 8014124:	4413      	add	r3, r2
 8014126:	00db      	lsls	r3, r3, #3
 8014128:	440b      	add	r3, r1
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	4618      	mov	r0, r3
 801412e:	f7f7 fa49 	bl	800b5c4 <pbuf_free>
    arp_table[i].q = NULL;
 8014132:	4921      	ldr	r1, [pc, #132]	; (80141b8 <etharp_free_entry+0xd8>)
 8014134:	687a      	ldr	r2, [r7, #4]
 8014136:	4613      	mov	r3, r2
 8014138:	005b      	lsls	r3, r3, #1
 801413a:	4413      	add	r3, r2
 801413c:	00db      	lsls	r3, r3, #3
 801413e:	440b      	add	r3, r1
 8014140:	2200      	movs	r2, #0
 8014142:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014144:	491c      	ldr	r1, [pc, #112]	; (80141b8 <etharp_free_entry+0xd8>)
 8014146:	687a      	ldr	r2, [r7, #4]
 8014148:	4613      	mov	r3, r2
 801414a:	005b      	lsls	r3, r3, #1
 801414c:	4413      	add	r3, r2
 801414e:	00db      	lsls	r3, r3, #3
 8014150:	440b      	add	r3, r1
 8014152:	3314      	adds	r3, #20
 8014154:	2200      	movs	r2, #0
 8014156:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 8014158:	4917      	ldr	r1, [pc, #92]	; (80141b8 <etharp_free_entry+0xd8>)
 801415a:	687a      	ldr	r2, [r7, #4]
 801415c:	4613      	mov	r3, r2
 801415e:	005b      	lsls	r3, r3, #1
 8014160:	4413      	add	r3, r2
 8014162:	00db      	lsls	r3, r3, #3
 8014164:	440b      	add	r3, r1
 8014166:	3312      	adds	r3, #18
 8014168:	2200      	movs	r2, #0
 801416a:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 801416c:	4912      	ldr	r1, [pc, #72]	; (80141b8 <etharp_free_entry+0xd8>)
 801416e:	687a      	ldr	r2, [r7, #4]
 8014170:	4613      	mov	r3, r2
 8014172:	005b      	lsls	r3, r3, #1
 8014174:	4413      	add	r3, r2
 8014176:	00db      	lsls	r3, r3, #3
 8014178:	440b      	add	r3, r1
 801417a:	3308      	adds	r3, #8
 801417c:	2200      	movs	r2, #0
 801417e:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 8014180:	490d      	ldr	r1, [pc, #52]	; (80141b8 <etharp_free_entry+0xd8>)
 8014182:	687a      	ldr	r2, [r7, #4]
 8014184:	4613      	mov	r3, r2
 8014186:	005b      	lsls	r3, r3, #1
 8014188:	4413      	add	r3, r2
 801418a:	00db      	lsls	r3, r3, #3
 801418c:	440b      	add	r3, r1
 801418e:	3304      	adds	r3, #4
 8014190:	2200      	movs	r2, #0
 8014192:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 8014194:	4908      	ldr	r1, [pc, #32]	; (80141b8 <etharp_free_entry+0xd8>)
 8014196:	687a      	ldr	r2, [r7, #4]
 8014198:	4613      	mov	r3, r2
 801419a:	005b      	lsls	r3, r3, #1
 801419c:	4413      	add	r3, r2
 801419e:	00db      	lsls	r3, r3, #3
 80141a0:	440b      	add	r3, r1
 80141a2:	3308      	adds	r3, #8
 80141a4:	4a06      	ldr	r2, [pc, #24]	; (80141c0 <etharp_free_entry+0xe0>)
 80141a6:	3304      	adds	r3, #4
 80141a8:	6810      	ldr	r0, [r2, #0]
 80141aa:	6018      	str	r0, [r3, #0]
 80141ac:	8892      	ldrh	r2, [r2, #4]
 80141ae:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 80141b0:	bf00      	nop
 80141b2:	3708      	adds	r7, #8
 80141b4:	46bd      	mov	sp, r7
 80141b6:	bd80      	pop	{r7, pc}
 80141b8:	2000da8c 	.word	0x2000da8c
 80141bc:	0801be24 	.word	0x0801be24
 80141c0:	0801d638 	.word	0x0801d638

080141c4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80141c4:	b580      	push	{r7, lr}
 80141c6:	b082      	sub	sp, #8
 80141c8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
 80141ca:	485c      	ldr	r0, [pc, #368]	; (801433c <etharp_tmr+0x178>)
 80141cc:	f003 f868 	bl	80172a0 <puts>
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80141d0:	2300      	movs	r3, #0
 80141d2:	607b      	str	r3, [r7, #4]
 80141d4:	e0a9      	b.n	801432a <etharp_tmr+0x166>
    u8_t state = arp_table[i].state;
 80141d6:	495a      	ldr	r1, [pc, #360]	; (8014340 <etharp_tmr+0x17c>)
 80141d8:	687a      	ldr	r2, [r7, #4]
 80141da:	4613      	mov	r3, r2
 80141dc:	005b      	lsls	r3, r3, #1
 80141de:	4413      	add	r3, r2
 80141e0:	00db      	lsls	r3, r3, #3
 80141e2:	440b      	add	r3, r1
 80141e4:	3314      	adds	r3, #20
 80141e6:	781b      	ldrb	r3, [r3, #0]
 80141e8:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80141ea:	78fb      	ldrb	r3, [r7, #3]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	f000 8099 	beq.w	8014324 <etharp_tmr+0x160>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80141f2:	4953      	ldr	r1, [pc, #332]	; (8014340 <etharp_tmr+0x17c>)
 80141f4:	687a      	ldr	r2, [r7, #4]
 80141f6:	4613      	mov	r3, r2
 80141f8:	005b      	lsls	r3, r3, #1
 80141fa:	4413      	add	r3, r2
 80141fc:	00db      	lsls	r3, r3, #3
 80141fe:	440b      	add	r3, r1
 8014200:	3312      	adds	r3, #18
 8014202:	881b      	ldrh	r3, [r3, #0]
 8014204:	3301      	adds	r3, #1
 8014206:	b298      	uxth	r0, r3
 8014208:	494d      	ldr	r1, [pc, #308]	; (8014340 <etharp_tmr+0x17c>)
 801420a:	687a      	ldr	r2, [r7, #4]
 801420c:	4613      	mov	r3, r2
 801420e:	005b      	lsls	r3, r3, #1
 8014210:	4413      	add	r3, r2
 8014212:	00db      	lsls	r3, r3, #3
 8014214:	440b      	add	r3, r1
 8014216:	3312      	adds	r3, #18
 8014218:	4602      	mov	r2, r0
 801421a:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801421c:	4948      	ldr	r1, [pc, #288]	; (8014340 <etharp_tmr+0x17c>)
 801421e:	687a      	ldr	r2, [r7, #4]
 8014220:	4613      	mov	r3, r2
 8014222:	005b      	lsls	r3, r3, #1
 8014224:	4413      	add	r3, r2
 8014226:	00db      	lsls	r3, r3, #3
 8014228:	440b      	add	r3, r1
 801422a:	3312      	adds	r3, #18
 801422c:	881b      	ldrh	r3, [r3, #0]
 801422e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014232:	d215      	bcs.n	8014260 <etharp_tmr+0x9c>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014234:	4942      	ldr	r1, [pc, #264]	; (8014340 <etharp_tmr+0x17c>)
 8014236:	687a      	ldr	r2, [r7, #4]
 8014238:	4613      	mov	r3, r2
 801423a:	005b      	lsls	r3, r3, #1
 801423c:	4413      	add	r3, r2
 801423e:	00db      	lsls	r3, r3, #3
 8014240:	440b      	add	r3, r1
 8014242:	3314      	adds	r3, #20
 8014244:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014246:	2b01      	cmp	r3, #1
 8014248:	d121      	bne.n	801428e <etharp_tmr+0xca>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801424a:	493d      	ldr	r1, [pc, #244]	; (8014340 <etharp_tmr+0x17c>)
 801424c:	687a      	ldr	r2, [r7, #4]
 801424e:	4613      	mov	r3, r2
 8014250:	005b      	lsls	r3, r3, #1
 8014252:	4413      	add	r3, r2
 8014254:	00db      	lsls	r3, r3, #3
 8014256:	440b      	add	r3, r1
 8014258:	3312      	adds	r3, #18
 801425a:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801425c:	2b04      	cmp	r3, #4
 801425e:	d916      	bls.n	801428e <etharp_tmr+0xca>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
 8014260:	4937      	ldr	r1, [pc, #220]	; (8014340 <etharp_tmr+0x17c>)
 8014262:	687a      	ldr	r2, [r7, #4]
 8014264:	4613      	mov	r3, r2
 8014266:	005b      	lsls	r3, r3, #1
 8014268:	4413      	add	r3, r2
 801426a:	00db      	lsls	r3, r3, #3
 801426c:	440b      	add	r3, r1
 801426e:	3314      	adds	r3, #20
 8014270:	781b      	ldrb	r3, [r3, #0]
 8014272:	2b01      	cmp	r3, #1
 8014274:	d901      	bls.n	801427a <etharp_tmr+0xb6>
 8014276:	4b33      	ldr	r3, [pc, #204]	; (8014344 <etharp_tmr+0x180>)
 8014278:	e000      	b.n	801427c <etharp_tmr+0xb8>
 801427a:	4b33      	ldr	r3, [pc, #204]	; (8014348 <etharp_tmr+0x184>)
 801427c:	687a      	ldr	r2, [r7, #4]
 801427e:	4619      	mov	r1, r3
 8014280:	4832      	ldr	r0, [pc, #200]	; (801434c <etharp_tmr+0x188>)
 8014282:	f002 ff71 	bl	8017168 <iprintf>
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014286:	6878      	ldr	r0, [r7, #4]
 8014288:	f7ff ff2a 	bl	80140e0 <etharp_free_entry>
 801428c:	e04a      	b.n	8014324 <etharp_tmr+0x160>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801428e:	492c      	ldr	r1, [pc, #176]	; (8014340 <etharp_tmr+0x17c>)
 8014290:	687a      	ldr	r2, [r7, #4]
 8014292:	4613      	mov	r3, r2
 8014294:	005b      	lsls	r3, r3, #1
 8014296:	4413      	add	r3, r2
 8014298:	00db      	lsls	r3, r3, #3
 801429a:	440b      	add	r3, r1
 801429c:	3314      	adds	r3, #20
 801429e:	781b      	ldrb	r3, [r3, #0]
 80142a0:	2b03      	cmp	r3, #3
 80142a2:	d10a      	bne.n	80142ba <etharp_tmr+0xf6>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80142a4:	4926      	ldr	r1, [pc, #152]	; (8014340 <etharp_tmr+0x17c>)
 80142a6:	687a      	ldr	r2, [r7, #4]
 80142a8:	4613      	mov	r3, r2
 80142aa:	005b      	lsls	r3, r3, #1
 80142ac:	4413      	add	r3, r2
 80142ae:	00db      	lsls	r3, r3, #3
 80142b0:	440b      	add	r3, r1
 80142b2:	3314      	adds	r3, #20
 80142b4:	2204      	movs	r2, #4
 80142b6:	701a      	strb	r2, [r3, #0]
 80142b8:	e034      	b.n	8014324 <etharp_tmr+0x160>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80142ba:	4921      	ldr	r1, [pc, #132]	; (8014340 <etharp_tmr+0x17c>)
 80142bc:	687a      	ldr	r2, [r7, #4]
 80142be:	4613      	mov	r3, r2
 80142c0:	005b      	lsls	r3, r3, #1
 80142c2:	4413      	add	r3, r2
 80142c4:	00db      	lsls	r3, r3, #3
 80142c6:	440b      	add	r3, r1
 80142c8:	3314      	adds	r3, #20
 80142ca:	781b      	ldrb	r3, [r3, #0]
 80142cc:	2b04      	cmp	r3, #4
 80142ce:	d10a      	bne.n	80142e6 <etharp_tmr+0x122>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80142d0:	491b      	ldr	r1, [pc, #108]	; (8014340 <etharp_tmr+0x17c>)
 80142d2:	687a      	ldr	r2, [r7, #4]
 80142d4:	4613      	mov	r3, r2
 80142d6:	005b      	lsls	r3, r3, #1
 80142d8:	4413      	add	r3, r2
 80142da:	00db      	lsls	r3, r3, #3
 80142dc:	440b      	add	r3, r1
 80142de:	3314      	adds	r3, #20
 80142e0:	2202      	movs	r2, #2
 80142e2:	701a      	strb	r2, [r3, #0]
 80142e4:	e01e      	b.n	8014324 <etharp_tmr+0x160>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80142e6:	4916      	ldr	r1, [pc, #88]	; (8014340 <etharp_tmr+0x17c>)
 80142e8:	687a      	ldr	r2, [r7, #4]
 80142ea:	4613      	mov	r3, r2
 80142ec:	005b      	lsls	r3, r3, #1
 80142ee:	4413      	add	r3, r2
 80142f0:	00db      	lsls	r3, r3, #3
 80142f2:	440b      	add	r3, r1
 80142f4:	3314      	adds	r3, #20
 80142f6:	781b      	ldrb	r3, [r3, #0]
 80142f8:	2b01      	cmp	r3, #1
 80142fa:	d113      	bne.n	8014324 <etharp_tmr+0x160>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80142fc:	4910      	ldr	r1, [pc, #64]	; (8014340 <etharp_tmr+0x17c>)
 80142fe:	687a      	ldr	r2, [r7, #4]
 8014300:	4613      	mov	r3, r2
 8014302:	005b      	lsls	r3, r3, #1
 8014304:	4413      	add	r3, r2
 8014306:	00db      	lsls	r3, r3, #3
 8014308:	440b      	add	r3, r1
 801430a:	3308      	adds	r3, #8
 801430c:	6818      	ldr	r0, [r3, #0]
 801430e:	687a      	ldr	r2, [r7, #4]
 8014310:	4613      	mov	r3, r2
 8014312:	005b      	lsls	r3, r3, #1
 8014314:	4413      	add	r3, r2
 8014316:	00db      	lsls	r3, r3, #3
 8014318:	4a09      	ldr	r2, [pc, #36]	; (8014340 <etharp_tmr+0x17c>)
 801431a:	4413      	add	r3, r2
 801431c:	3304      	adds	r3, #4
 801431e:	4619      	mov	r1, r3
 8014320:	f000 ff70 	bl	8015204 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	3301      	adds	r3, #1
 8014328:	607b      	str	r3, [r7, #4]
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	2b09      	cmp	r3, #9
 801432e:	f77f af52 	ble.w	80141d6 <etharp_tmr+0x12>
      }
    }
  }
}
 8014332:	bf00      	nop
 8014334:	bf00      	nop
 8014336:	3708      	adds	r7, #8
 8014338:	46bd      	mov	sp, r7
 801433a:	bd80      	pop	{r7, pc}
 801433c:	0801be5c 	.word	0x0801be5c
 8014340:	2000da8c 	.word	0x2000da8c
 8014344:	0801be6c 	.word	0x0801be6c
 8014348:	0801be74 	.word	0x0801be74
 801434c:	0801be7c 	.word	0x0801be7c

08014350 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014350:	b580      	push	{r7, lr}
 8014352:	b08a      	sub	sp, #40	; 0x28
 8014354:	af00      	add	r7, sp, #0
 8014356:	60f8      	str	r0, [r7, #12]
 8014358:	460b      	mov	r3, r1
 801435a:	607a      	str	r2, [r7, #4]
 801435c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801435e:	230a      	movs	r3, #10
 8014360:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014362:	230a      	movs	r3, #10
 8014364:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8014366:	230a      	movs	r3, #10
 8014368:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801436a:	2300      	movs	r3, #0
 801436c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801436e:	230a      	movs	r3, #10
 8014370:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014372:	2300      	movs	r3, #0
 8014374:	83bb      	strh	r3, [r7, #28]
 8014376:	2300      	movs	r3, #0
 8014378:	837b      	strh	r3, [r7, #26]
 801437a:	2300      	movs	r3, #0
 801437c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801437e:	2300      	movs	r3, #0
 8014380:	843b      	strh	r3, [r7, #32]
 8014382:	e0ba      	b.n	80144fa <etharp_find_entry+0x1aa>
    u8_t state = arp_table[i].state;
 8014384:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014388:	4993      	ldr	r1, [pc, #588]	; (80145d8 <etharp_find_entry+0x288>)
 801438a:	4613      	mov	r3, r2
 801438c:	005b      	lsls	r3, r3, #1
 801438e:	4413      	add	r3, r2
 8014390:	00db      	lsls	r3, r3, #3
 8014392:	440b      	add	r3, r1
 8014394:	3314      	adds	r3, #20
 8014396:	781b      	ldrb	r3, [r3, #0]
 8014398:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801439a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801439e:	2b0a      	cmp	r3, #10
 80143a0:	d10b      	bne.n	80143ba <etharp_find_entry+0x6a>
 80143a2:	7dfb      	ldrb	r3, [r7, #23]
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d108      	bne.n	80143ba <etharp_find_entry+0x6a>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
 80143a8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80143ac:	4619      	mov	r1, r3
 80143ae:	488b      	ldr	r0, [pc, #556]	; (80145dc <etharp_find_entry+0x28c>)
 80143b0:	f002 feda 	bl	8017168 <iprintf>
      /* remember first empty entry */
      empty = i;
 80143b4:	8c3b      	ldrh	r3, [r7, #32]
 80143b6:	847b      	strh	r3, [r7, #34]	; 0x22
 80143b8:	e09b      	b.n	80144f2 <etharp_find_entry+0x1a2>
    } else if (state != ETHARP_STATE_EMPTY) {
 80143ba:	7dfb      	ldrb	r3, [r7, #23]
 80143bc:	2b00      	cmp	r3, #0
 80143be:	f000 8098 	beq.w	80144f2 <etharp_find_entry+0x1a2>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80143c2:	7dfb      	ldrb	r3, [r7, #23]
 80143c4:	2b01      	cmp	r3, #1
 80143c6:	d009      	beq.n	80143dc <etharp_find_entry+0x8c>
 80143c8:	7dfb      	ldrb	r3, [r7, #23]
 80143ca:	2b01      	cmp	r3, #1
 80143cc:	d806      	bhi.n	80143dc <etharp_find_entry+0x8c>
 80143ce:	4b84      	ldr	r3, [pc, #528]	; (80145e0 <etharp_find_entry+0x290>)
 80143d0:	f240 1223 	movw	r2, #291	; 0x123
 80143d4:	4983      	ldr	r1, [pc, #524]	; (80145e4 <etharp_find_entry+0x294>)
 80143d6:	4884      	ldr	r0, [pc, #528]	; (80145e8 <etharp_find_entry+0x298>)
 80143d8:	f002 fec6 	bl	8017168 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80143dc:	68fb      	ldr	r3, [r7, #12]
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d026      	beq.n	8014430 <etharp_find_entry+0xe0>
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	6819      	ldr	r1, [r3, #0]
 80143e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80143ea:	487b      	ldr	r0, [pc, #492]	; (80145d8 <etharp_find_entry+0x288>)
 80143ec:	4613      	mov	r3, r2
 80143ee:	005b      	lsls	r3, r3, #1
 80143f0:	4413      	add	r3, r2
 80143f2:	00db      	lsls	r3, r3, #3
 80143f4:	4403      	add	r3, r0
 80143f6:	3304      	adds	r3, #4
 80143f8:	681b      	ldr	r3, [r3, #0]
 80143fa:	4299      	cmp	r1, r3
 80143fc:	d118      	bne.n	8014430 <etharp_find_entry+0xe0>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	2b00      	cmp	r3, #0
 8014402:	d00c      	beq.n	801441e <etharp_find_entry+0xce>
 8014404:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014408:	4973      	ldr	r1, [pc, #460]	; (80145d8 <etharp_find_entry+0x288>)
 801440a:	4613      	mov	r3, r2
 801440c:	005b      	lsls	r3, r3, #1
 801440e:	4413      	add	r3, r2
 8014410:	00db      	lsls	r3, r3, #3
 8014412:	440b      	add	r3, r1
 8014414:	3308      	adds	r3, #8
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	687a      	ldr	r2, [r7, #4]
 801441a:	429a      	cmp	r2, r3
 801441c:	d108      	bne.n	8014430 <etharp_find_entry+0xe0>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
 801441e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014422:	4619      	mov	r1, r3
 8014424:	4871      	ldr	r0, [pc, #452]	; (80145ec <etharp_find_entry+0x29c>)
 8014426:	f002 fe9f 	bl	8017168 <iprintf>
        /* found exact IP address match, simply bail out */
        return i;
 801442a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801442e:	e142      	b.n	80146b6 <etharp_find_entry+0x366>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014430:	7dfb      	ldrb	r3, [r7, #23]
 8014432:	2b01      	cmp	r3, #1
 8014434:	d140      	bne.n	80144b8 <etharp_find_entry+0x168>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014436:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801443a:	4967      	ldr	r1, [pc, #412]	; (80145d8 <etharp_find_entry+0x288>)
 801443c:	4613      	mov	r3, r2
 801443e:	005b      	lsls	r3, r3, #1
 8014440:	4413      	add	r3, r2
 8014442:	00db      	lsls	r3, r3, #3
 8014444:	440b      	add	r3, r1
 8014446:	681b      	ldr	r3, [r3, #0]
 8014448:	2b00      	cmp	r3, #0
 801444a:	d01a      	beq.n	8014482 <etharp_find_entry+0x132>
          if (arp_table[i].ctime >= age_queue) {
 801444c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014450:	4961      	ldr	r1, [pc, #388]	; (80145d8 <etharp_find_entry+0x288>)
 8014452:	4613      	mov	r3, r2
 8014454:	005b      	lsls	r3, r3, #1
 8014456:	4413      	add	r3, r2
 8014458:	00db      	lsls	r3, r3, #3
 801445a:	440b      	add	r3, r1
 801445c:	3312      	adds	r3, #18
 801445e:	881b      	ldrh	r3, [r3, #0]
 8014460:	8bba      	ldrh	r2, [r7, #28]
 8014462:	429a      	cmp	r2, r3
 8014464:	d845      	bhi.n	80144f2 <etharp_find_entry+0x1a2>
            old_queue = i;
 8014466:	8c3b      	ldrh	r3, [r7, #32]
 8014468:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801446a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801446e:	495a      	ldr	r1, [pc, #360]	; (80145d8 <etharp_find_entry+0x288>)
 8014470:	4613      	mov	r3, r2
 8014472:	005b      	lsls	r3, r3, #1
 8014474:	4413      	add	r3, r2
 8014476:	00db      	lsls	r3, r3, #3
 8014478:	440b      	add	r3, r1
 801447a:	3312      	adds	r3, #18
 801447c:	881b      	ldrh	r3, [r3, #0]
 801447e:	83bb      	strh	r3, [r7, #28]
 8014480:	e037      	b.n	80144f2 <etharp_find_entry+0x1a2>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014482:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014486:	4954      	ldr	r1, [pc, #336]	; (80145d8 <etharp_find_entry+0x288>)
 8014488:	4613      	mov	r3, r2
 801448a:	005b      	lsls	r3, r3, #1
 801448c:	4413      	add	r3, r2
 801448e:	00db      	lsls	r3, r3, #3
 8014490:	440b      	add	r3, r1
 8014492:	3312      	adds	r3, #18
 8014494:	881b      	ldrh	r3, [r3, #0]
 8014496:	8b7a      	ldrh	r2, [r7, #26]
 8014498:	429a      	cmp	r2, r3
 801449a:	d82a      	bhi.n	80144f2 <etharp_find_entry+0x1a2>
            old_pending = i;
 801449c:	8c3b      	ldrh	r3, [r7, #32]
 801449e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80144a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80144a4:	494c      	ldr	r1, [pc, #304]	; (80145d8 <etharp_find_entry+0x288>)
 80144a6:	4613      	mov	r3, r2
 80144a8:	005b      	lsls	r3, r3, #1
 80144aa:	4413      	add	r3, r2
 80144ac:	00db      	lsls	r3, r3, #3
 80144ae:	440b      	add	r3, r1
 80144b0:	3312      	adds	r3, #18
 80144b2:	881b      	ldrh	r3, [r3, #0]
 80144b4:	837b      	strh	r3, [r7, #26]
 80144b6:	e01c      	b.n	80144f2 <etharp_find_entry+0x1a2>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80144b8:	7dfb      	ldrb	r3, [r7, #23]
 80144ba:	2b01      	cmp	r3, #1
 80144bc:	d919      	bls.n	80144f2 <etharp_find_entry+0x1a2>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80144be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80144c2:	4945      	ldr	r1, [pc, #276]	; (80145d8 <etharp_find_entry+0x288>)
 80144c4:	4613      	mov	r3, r2
 80144c6:	005b      	lsls	r3, r3, #1
 80144c8:	4413      	add	r3, r2
 80144ca:	00db      	lsls	r3, r3, #3
 80144cc:	440b      	add	r3, r1
 80144ce:	3312      	adds	r3, #18
 80144d0:	881b      	ldrh	r3, [r3, #0]
 80144d2:	8b3a      	ldrh	r2, [r7, #24]
 80144d4:	429a      	cmp	r2, r3
 80144d6:	d80c      	bhi.n	80144f2 <etharp_find_entry+0x1a2>
            old_stable = i;
 80144d8:	8c3b      	ldrh	r3, [r7, #32]
 80144da:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80144dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80144e0:	493d      	ldr	r1, [pc, #244]	; (80145d8 <etharp_find_entry+0x288>)
 80144e2:	4613      	mov	r3, r2
 80144e4:	005b      	lsls	r3, r3, #1
 80144e6:	4413      	add	r3, r2
 80144e8:	00db      	lsls	r3, r3, #3
 80144ea:	440b      	add	r3, r1
 80144ec:	3312      	adds	r3, #18
 80144ee:	881b      	ldrh	r3, [r3, #0]
 80144f0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80144f2:	8c3b      	ldrh	r3, [r7, #32]
 80144f4:	3301      	adds	r3, #1
 80144f6:	b29b      	uxth	r3, r3
 80144f8:	843b      	strh	r3, [r7, #32]
 80144fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80144fe:	2b09      	cmp	r3, #9
 8014500:	f77f af40 	ble.w	8014384 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014504:	7afb      	ldrb	r3, [r7, #11]
 8014506:	f003 0302 	and.w	r3, r3, #2
 801450a:	2b00      	cmp	r3, #0
 801450c:	d108      	bne.n	8014520 <etharp_find_entry+0x1d0>
 801450e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014512:	2b0a      	cmp	r3, #10
 8014514:	d10a      	bne.n	801452c <etharp_find_entry+0x1dc>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014516:	7afb      	ldrb	r3, [r7, #11]
 8014518:	f003 0301 	and.w	r3, r3, #1
 801451c:	2b00      	cmp	r3, #0
 801451e:	d105      	bne.n	801452c <etharp_find_entry+0x1dc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
 8014520:	4833      	ldr	r0, [pc, #204]	; (80145f0 <etharp_find_entry+0x2a0>)
 8014522:	f002 febd 	bl	80172a0 <puts>
    return (s16_t)ERR_MEM;
 8014526:	f04f 33ff 	mov.w	r3, #4294967295
 801452a:	e0c4      	b.n	80146b6 <etharp_find_entry+0x366>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801452c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014530:	2b09      	cmp	r3, #9
 8014532:	dc08      	bgt.n	8014546 <etharp_find_entry+0x1f6>
    i = empty;
 8014534:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014536:	843b      	strh	r3, [r7, #32]
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
 8014538:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801453c:	4619      	mov	r1, r3
 801453e:	482d      	ldr	r0, [pc, #180]	; (80145f4 <etharp_find_entry+0x2a4>)
 8014540:	f002 fe12 	bl	8017168 <iprintf>
 8014544:	e072      	b.n	801462c <etharp_find_entry+0x2dc>
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014546:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801454a:	2b09      	cmp	r3, #9
 801454c:	dc1a      	bgt.n	8014584 <etharp_find_entry+0x234>
      /* recycle oldest stable*/
      i = old_stable;
 801454e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014550:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
 8014552:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014556:	4619      	mov	r1, r3
 8014558:	4827      	ldr	r0, [pc, #156]	; (80145f8 <etharp_find_entry+0x2a8>)
 801455a:	f002 fe05 	bl	8017168 <iprintf>
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801455e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014562:	491d      	ldr	r1, [pc, #116]	; (80145d8 <etharp_find_entry+0x288>)
 8014564:	4613      	mov	r3, r2
 8014566:	005b      	lsls	r3, r3, #1
 8014568:	4413      	add	r3, r2
 801456a:	00db      	lsls	r3, r3, #3
 801456c:	440b      	add	r3, r1
 801456e:	681b      	ldr	r3, [r3, #0]
 8014570:	2b00      	cmp	r3, #0
 8014572:	d04b      	beq.n	801460c <etharp_find_entry+0x2bc>
 8014574:	4b1a      	ldr	r3, [pc, #104]	; (80145e0 <etharp_find_entry+0x290>)
 8014576:	f240 126d 	movw	r2, #365	; 0x16d
 801457a:	4920      	ldr	r1, [pc, #128]	; (80145fc <etharp_find_entry+0x2ac>)
 801457c:	481a      	ldr	r0, [pc, #104]	; (80145e8 <etharp_find_entry+0x298>)
 801457e:	f002 fdf3 	bl	8017168 <iprintf>
 8014582:	e043      	b.n	801460c <etharp_find_entry+0x2bc>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014584:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8014588:	2b09      	cmp	r3, #9
 801458a:	dc08      	bgt.n	801459e <etharp_find_entry+0x24e>
      /* recycle oldest pending */
      i = old_pending;
 801458c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801458e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
 8014590:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014594:	4619      	mov	r1, r3
 8014596:	481a      	ldr	r0, [pc, #104]	; (8014600 <etharp_find_entry+0x2b0>)
 8014598:	f002 fde6 	bl	8017168 <iprintf>
 801459c:	e036      	b.n	801460c <etharp_find_entry+0x2bc>
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801459e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80145a2:	2b09      	cmp	r3, #9
 80145a4:	dc11      	bgt.n	80145ca <etharp_find_entry+0x27a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80145a6:	8bfb      	ldrh	r3, [r7, #30]
 80145a8:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
 80145aa:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
 80145ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80145b2:	4809      	ldr	r0, [pc, #36]	; (80145d8 <etharp_find_entry+0x288>)
 80145b4:	4613      	mov	r3, r2
 80145b6:	005b      	lsls	r3, r3, #1
 80145b8:	4413      	add	r3, r2
 80145ba:	00db      	lsls	r3, r3, #3
 80145bc:	4403      	add	r3, r0
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	461a      	mov	r2, r3
 80145c2:	4810      	ldr	r0, [pc, #64]	; (8014604 <etharp_find_entry+0x2b4>)
 80145c4:	f002 fdd0 	bl	8017168 <iprintf>
 80145c8:	e020      	b.n	801460c <etharp_find_entry+0x2bc>
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
 80145ca:	480f      	ldr	r0, [pc, #60]	; (8014608 <etharp_find_entry+0x2b8>)
 80145cc:	f002 fe68 	bl	80172a0 <puts>
      return (s16_t)ERR_MEM;
 80145d0:	f04f 33ff 	mov.w	r3, #4294967295
 80145d4:	e06f      	b.n	80146b6 <etharp_find_entry+0x366>
 80145d6:	bf00      	nop
 80145d8:	2000da8c 	.word	0x2000da8c
 80145dc:	0801bea0 	.word	0x0801bea0
 80145e0:	0801becc 	.word	0x0801becc
 80145e4:	0801bf04 	.word	0x0801bf04
 80145e8:	0801bf44 	.word	0x0801bf44
 80145ec:	0801bf6c 	.word	0x0801bf6c
 80145f0:	0801bf98 	.word	0x0801bf98
 80145f4:	0801bfdc 	.word	0x0801bfdc
 80145f8:	0801c00c 	.word	0x0801c00c
 80145fc:	0801c044 	.word	0x0801c044
 8014600:	0801c05c 	.word	0x0801c05c
 8014604:	0801c0a4 	.word	0x0801c0a4
 8014608:	0801c0f4 	.word	0x0801c0f4
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801460c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014610:	2b09      	cmp	r3, #9
 8014612:	dd06      	ble.n	8014622 <etharp_find_entry+0x2d2>
 8014614:	4b2a      	ldr	r3, [pc, #168]	; (80146c0 <etharp_find_entry+0x370>)
 8014616:	f240 127f 	movw	r2, #383	; 0x17f
 801461a:	492a      	ldr	r1, [pc, #168]	; (80146c4 <etharp_find_entry+0x374>)
 801461c:	482a      	ldr	r0, [pc, #168]	; (80146c8 <etharp_find_entry+0x378>)
 801461e:	f002 fda3 	bl	8017168 <iprintf>
    etharp_free_entry(i);
 8014622:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014626:	4618      	mov	r0, r3
 8014628:	f7ff fd5a 	bl	80140e0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801462c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014630:	2b09      	cmp	r3, #9
 8014632:	dd06      	ble.n	8014642 <etharp_find_entry+0x2f2>
 8014634:	4b22      	ldr	r3, [pc, #136]	; (80146c0 <etharp_find_entry+0x370>)
 8014636:	f240 1283 	movw	r2, #387	; 0x183
 801463a:	4922      	ldr	r1, [pc, #136]	; (80146c4 <etharp_find_entry+0x374>)
 801463c:	4822      	ldr	r0, [pc, #136]	; (80146c8 <etharp_find_entry+0x378>)
 801463e:	f002 fd93 	bl	8017168 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014642:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014646:	4921      	ldr	r1, [pc, #132]	; (80146cc <etharp_find_entry+0x37c>)
 8014648:	4613      	mov	r3, r2
 801464a:	005b      	lsls	r3, r3, #1
 801464c:	4413      	add	r3, r2
 801464e:	00db      	lsls	r3, r3, #3
 8014650:	440b      	add	r3, r1
 8014652:	3314      	adds	r3, #20
 8014654:	781b      	ldrb	r3, [r3, #0]
 8014656:	2b00      	cmp	r3, #0
 8014658:	d006      	beq.n	8014668 <etharp_find_entry+0x318>
 801465a:	4b19      	ldr	r3, [pc, #100]	; (80146c0 <etharp_find_entry+0x370>)
 801465c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8014660:	491b      	ldr	r1, [pc, #108]	; (80146d0 <etharp_find_entry+0x380>)
 8014662:	4819      	ldr	r0, [pc, #100]	; (80146c8 <etharp_find_entry+0x378>)
 8014664:	f002 fd80 	bl	8017168 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	2b00      	cmp	r3, #0
 801466c:	d00b      	beq.n	8014686 <etharp_find_entry+0x336>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801466e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014672:	68fb      	ldr	r3, [r7, #12]
 8014674:	6819      	ldr	r1, [r3, #0]
 8014676:	4815      	ldr	r0, [pc, #84]	; (80146cc <etharp_find_entry+0x37c>)
 8014678:	4613      	mov	r3, r2
 801467a:	005b      	lsls	r3, r3, #1
 801467c:	4413      	add	r3, r2
 801467e:	00db      	lsls	r3, r3, #3
 8014680:	4403      	add	r3, r0
 8014682:	3304      	adds	r3, #4
 8014684:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014686:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801468a:	4910      	ldr	r1, [pc, #64]	; (80146cc <etharp_find_entry+0x37c>)
 801468c:	4613      	mov	r3, r2
 801468e:	005b      	lsls	r3, r3, #1
 8014690:	4413      	add	r3, r2
 8014692:	00db      	lsls	r3, r3, #3
 8014694:	440b      	add	r3, r1
 8014696:	3312      	adds	r3, #18
 8014698:	2200      	movs	r2, #0
 801469a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801469c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80146a0:	490a      	ldr	r1, [pc, #40]	; (80146cc <etharp_find_entry+0x37c>)
 80146a2:	4613      	mov	r3, r2
 80146a4:	005b      	lsls	r3, r3, #1
 80146a6:	4413      	add	r3, r2
 80146a8:	00db      	lsls	r3, r3, #3
 80146aa:	440b      	add	r3, r1
 80146ac:	3308      	adds	r3, #8
 80146ae:	687a      	ldr	r2, [r7, #4]
 80146b0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80146b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80146b6:	4618      	mov	r0, r3
 80146b8:	3728      	adds	r7, #40	; 0x28
 80146ba:	46bd      	mov	sp, r7
 80146bc:	bd80      	pop	{r7, pc}
 80146be:	bf00      	nop
 80146c0:	0801becc 	.word	0x0801becc
 80146c4:	0801c12c 	.word	0x0801c12c
 80146c8:	0801bf44 	.word	0x0801bf44
 80146cc:	2000da8c 	.word	0x2000da8c
 80146d0:	0801c140 	.word	0x0801c140

080146d4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80146d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146d8:	b08e      	sub	sp, #56	; 0x38
 80146da:	af08      	add	r7, sp, #32
 80146dc:	60f8      	str	r0, [r7, #12]
 80146de:	60b9      	str	r1, [r7, #8]
 80146e0:	607a      	str	r2, [r7, #4]
 80146e2:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80146ea:	2b06      	cmp	r3, #6
 80146ec:	d006      	beq.n	80146fc <etharp_update_arp_entry+0x28>
 80146ee:	4b64      	ldr	r3, [pc, #400]	; (8014880 <etharp_update_arp_entry+0x1ac>)
 80146f0:	f240 12a9 	movw	r2, #425	; 0x1a9
 80146f4:	4963      	ldr	r1, [pc, #396]	; (8014884 <etharp_update_arp_entry+0x1b0>)
 80146f6:	4864      	ldr	r0, [pc, #400]	; (8014888 <etharp_update_arp_entry+0x1b4>)
 80146f8:	f002 fd36 	bl	8017168 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
 80146fc:	68bb      	ldr	r3, [r7, #8]
 80146fe:	781b      	ldrb	r3, [r3, #0]
 8014700:	469c      	mov	ip, r3
 8014702:	68bb      	ldr	r3, [r7, #8]
 8014704:	3301      	adds	r3, #1
 8014706:	781b      	ldrb	r3, [r3, #0]
 8014708:	469e      	mov	lr, r3
 801470a:	68bb      	ldr	r3, [r7, #8]
 801470c:	3302      	adds	r3, #2
 801470e:	781b      	ldrb	r3, [r3, #0]
 8014710:	4698      	mov	r8, r3
 8014712:	68bb      	ldr	r3, [r7, #8]
 8014714:	3303      	adds	r3, #3
 8014716:	781b      	ldrb	r3, [r3, #0]
 8014718:	461a      	mov	r2, r3
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	781b      	ldrb	r3, [r3, #0]
 801471e:	4619      	mov	r1, r3
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	785b      	ldrb	r3, [r3, #1]
 8014724:	4618      	mov	r0, r3
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	789b      	ldrb	r3, [r3, #2]
 801472a:	461c      	mov	r4, r3
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	78db      	ldrb	r3, [r3, #3]
 8014730:	461d      	mov	r5, r3
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	791b      	ldrb	r3, [r3, #4]
 8014736:	461e      	mov	r6, r3
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	795b      	ldrb	r3, [r3, #5]
 801473c:	9306      	str	r3, [sp, #24]
 801473e:	9605      	str	r6, [sp, #20]
 8014740:	9504      	str	r5, [sp, #16]
 8014742:	9403      	str	r4, [sp, #12]
 8014744:	9002      	str	r0, [sp, #8]
 8014746:	9101      	str	r1, [sp, #4]
 8014748:	9200      	str	r2, [sp, #0]
 801474a:	4643      	mov	r3, r8
 801474c:	4672      	mov	r2, lr
 801474e:	4661      	mov	r1, ip
 8014750:	484e      	ldr	r0, [pc, #312]	; (801488c <etharp_update_arp_entry+0x1b8>)
 8014752:	f002 fd09 	bl	8017168 <iprintf>
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014756:	68bb      	ldr	r3, [r7, #8]
 8014758:	2b00      	cmp	r3, #0
 801475a:	d012      	beq.n	8014782 <etharp_update_arp_entry+0xae>
 801475c:	68bb      	ldr	r3, [r7, #8]
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	2b00      	cmp	r3, #0
 8014762:	d00e      	beq.n	8014782 <etharp_update_arp_entry+0xae>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014764:	68bb      	ldr	r3, [r7, #8]
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	68f9      	ldr	r1, [r7, #12]
 801476a:	4618      	mov	r0, r3
 801476c:	f001 fc00 	bl	8015f70 <ip4_addr_isbroadcast_u32>
 8014770:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014772:	2b00      	cmp	r3, #0
 8014774:	d105      	bne.n	8014782 <etharp_update_arp_entry+0xae>
      ip4_addr_ismulticast(ipaddr)) {
 8014776:	68bb      	ldr	r3, [r7, #8]
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801477e:	2be0      	cmp	r3, #224	; 0xe0
 8014780:	d105      	bne.n	801478e <etharp_update_arp_entry+0xba>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
 8014782:	4843      	ldr	r0, [pc, #268]	; (8014890 <etharp_update_arp_entry+0x1bc>)
 8014784:	f002 fd8c 	bl	80172a0 <puts>
    return ERR_ARG;
 8014788:	f06f 030f 	mvn.w	r3, #15
 801478c:	e072      	b.n	8014874 <etharp_update_arp_entry+0x1a0>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801478e:	78fb      	ldrb	r3, [r7, #3]
 8014790:	68fa      	ldr	r2, [r7, #12]
 8014792:	4619      	mov	r1, r3
 8014794:	68b8      	ldr	r0, [r7, #8]
 8014796:	f7ff fddb 	bl	8014350 <etharp_find_entry>
 801479a:	4603      	mov	r3, r0
 801479c:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801479e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	da02      	bge.n	80147ac <etharp_update_arp_entry+0xd8>
    return (err_t)i;
 80147a6:	8afb      	ldrh	r3, [r7, #22]
 80147a8:	b25b      	sxtb	r3, r3
 80147aa:	e063      	b.n	8014874 <etharp_update_arp_entry+0x1a0>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80147ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80147b0:	4938      	ldr	r1, [pc, #224]	; (8014894 <etharp_update_arp_entry+0x1c0>)
 80147b2:	4613      	mov	r3, r2
 80147b4:	005b      	lsls	r3, r3, #1
 80147b6:	4413      	add	r3, r2
 80147b8:	00db      	lsls	r3, r3, #3
 80147ba:	440b      	add	r3, r1
 80147bc:	3314      	adds	r3, #20
 80147be:	2202      	movs	r2, #2
 80147c0:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80147c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80147c6:	4933      	ldr	r1, [pc, #204]	; (8014894 <etharp_update_arp_entry+0x1c0>)
 80147c8:	4613      	mov	r3, r2
 80147ca:	005b      	lsls	r3, r3, #1
 80147cc:	4413      	add	r3, r2
 80147ce:	00db      	lsls	r3, r3, #3
 80147d0:	440b      	add	r3, r1
 80147d2:	3308      	adds	r3, #8
 80147d4:	68fa      	ldr	r2, [r7, #12]
 80147d6:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
 80147d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80147dc:	4619      	mov	r1, r3
 80147de:	482e      	ldr	r0, [pc, #184]	; (8014898 <etharp_update_arp_entry+0x1c4>)
 80147e0:	f002 fcc2 	bl	8017168 <iprintf>
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80147e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80147e8:	4613      	mov	r3, r2
 80147ea:	005b      	lsls	r3, r3, #1
 80147ec:	4413      	add	r3, r2
 80147ee:	00db      	lsls	r3, r3, #3
 80147f0:	3308      	adds	r3, #8
 80147f2:	4a28      	ldr	r2, [pc, #160]	; (8014894 <etharp_update_arp_entry+0x1c0>)
 80147f4:	4413      	add	r3, r2
 80147f6:	3304      	adds	r3, #4
 80147f8:	2206      	movs	r2, #6
 80147fa:	6879      	ldr	r1, [r7, #4]
 80147fc:	4618      	mov	r0, r3
 80147fe:	f002 fc9d 	bl	801713c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014802:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014806:	4923      	ldr	r1, [pc, #140]	; (8014894 <etharp_update_arp_entry+0x1c0>)
 8014808:	4613      	mov	r3, r2
 801480a:	005b      	lsls	r3, r3, #1
 801480c:	4413      	add	r3, r2
 801480e:	00db      	lsls	r3, r3, #3
 8014810:	440b      	add	r3, r1
 8014812:	3312      	adds	r3, #18
 8014814:	2200      	movs	r2, #0
 8014816:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8014818:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801481c:	491d      	ldr	r1, [pc, #116]	; (8014894 <etharp_update_arp_entry+0x1c0>)
 801481e:	4613      	mov	r3, r2
 8014820:	005b      	lsls	r3, r3, #1
 8014822:	4413      	add	r3, r2
 8014824:	00db      	lsls	r3, r3, #3
 8014826:	440b      	add	r3, r1
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	2b00      	cmp	r3, #0
 801482c:	d021      	beq.n	8014872 <etharp_update_arp_entry+0x19e>
    struct pbuf *p = arp_table[i].q;
 801482e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014832:	4918      	ldr	r1, [pc, #96]	; (8014894 <etharp_update_arp_entry+0x1c0>)
 8014834:	4613      	mov	r3, r2
 8014836:	005b      	lsls	r3, r3, #1
 8014838:	4413      	add	r3, r2
 801483a:	00db      	lsls	r3, r3, #3
 801483c:	440b      	add	r3, r1
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014842:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014846:	4913      	ldr	r1, [pc, #76]	; (8014894 <etharp_update_arp_entry+0x1c0>)
 8014848:	4613      	mov	r3, r2
 801484a:	005b      	lsls	r3, r3, #1
 801484c:	4413      	add	r3, r2
 801484e:	00db      	lsls	r3, r3, #3
 8014850:	440b      	add	r3, r1
 8014852:	2200      	movs	r2, #0
 8014854:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801485c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014860:	9300      	str	r3, [sp, #0]
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	6939      	ldr	r1, [r7, #16]
 8014866:	68f8      	ldr	r0, [r7, #12]
 8014868:	f002 faf0 	bl	8016e4c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801486c:	6938      	ldr	r0, [r7, #16]
 801486e:	f7f6 fea9 	bl	800b5c4 <pbuf_free>
  }
  return ERR_OK;
 8014872:	2300      	movs	r3, #0
}
 8014874:	4618      	mov	r0, r3
 8014876:	3718      	adds	r7, #24
 8014878:	46bd      	mov	sp, r7
 801487a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801487e:	bf00      	nop
 8014880:	0801becc 	.word	0x0801becc
 8014884:	0801c16c 	.word	0x0801c16c
 8014888:	0801bf44 	.word	0x0801bf44
 801488c:	0801c190 	.word	0x0801c190
 8014890:	0801c1e0 	.word	0x0801c1e0
 8014894:	2000da8c 	.word	0x2000da8c
 8014898:	0801c22c 	.word	0x0801c22c

0801489c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801489c:	b580      	push	{r7, lr}
 801489e:	b084      	sub	sp, #16
 80148a0:	af00      	add	r7, sp, #0
 80148a2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80148a4:	2300      	movs	r3, #0
 80148a6:	60fb      	str	r3, [r7, #12]
 80148a8:	e01e      	b.n	80148e8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80148aa:	4913      	ldr	r1, [pc, #76]	; (80148f8 <etharp_cleanup_netif+0x5c>)
 80148ac:	68fa      	ldr	r2, [r7, #12]
 80148ae:	4613      	mov	r3, r2
 80148b0:	005b      	lsls	r3, r3, #1
 80148b2:	4413      	add	r3, r2
 80148b4:	00db      	lsls	r3, r3, #3
 80148b6:	440b      	add	r3, r1
 80148b8:	3314      	adds	r3, #20
 80148ba:	781b      	ldrb	r3, [r3, #0]
 80148bc:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80148be:	7afb      	ldrb	r3, [r7, #11]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d00e      	beq.n	80148e2 <etharp_cleanup_netif+0x46>
 80148c4:	490c      	ldr	r1, [pc, #48]	; (80148f8 <etharp_cleanup_netif+0x5c>)
 80148c6:	68fa      	ldr	r2, [r7, #12]
 80148c8:	4613      	mov	r3, r2
 80148ca:	005b      	lsls	r3, r3, #1
 80148cc:	4413      	add	r3, r2
 80148ce:	00db      	lsls	r3, r3, #3
 80148d0:	440b      	add	r3, r1
 80148d2:	3308      	adds	r3, #8
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	687a      	ldr	r2, [r7, #4]
 80148d8:	429a      	cmp	r2, r3
 80148da:	d102      	bne.n	80148e2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80148dc:	68f8      	ldr	r0, [r7, #12]
 80148de:	f7ff fbff 	bl	80140e0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	3301      	adds	r3, #1
 80148e6:	60fb      	str	r3, [r7, #12]
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	2b09      	cmp	r3, #9
 80148ec:	dddd      	ble.n	80148aa <etharp_cleanup_netif+0xe>
    }
  }
}
 80148ee:	bf00      	nop
 80148f0:	bf00      	nop
 80148f2:	3710      	adds	r7, #16
 80148f4:	46bd      	mov	sp, r7
 80148f6:	bd80      	pop	{r7, pc}
 80148f8:	2000da8c 	.word	0x2000da8c

080148fc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80148fc:	b5b0      	push	{r4, r5, r7, lr}
 80148fe:	b08a      	sub	sp, #40	; 0x28
 8014900:	af04      	add	r7, sp, #16
 8014902:	6078      	str	r0, [r7, #4]
 8014904:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014906:	683b      	ldr	r3, [r7, #0]
 8014908:	2b00      	cmp	r3, #0
 801490a:	d107      	bne.n	801491c <etharp_input+0x20>
 801490c:	4b57      	ldr	r3, [pc, #348]	; (8014a6c <etharp_input+0x170>)
 801490e:	f240 228a 	movw	r2, #650	; 0x28a
 8014912:	4957      	ldr	r1, [pc, #348]	; (8014a70 <etharp_input+0x174>)
 8014914:	4857      	ldr	r0, [pc, #348]	; (8014a74 <etharp_input+0x178>)
 8014916:	f002 fc27 	bl	8017168 <iprintf>
 801491a:	e0a4      	b.n	8014a66 <etharp_input+0x16a>

  hdr = (struct etharp_hdr *)p->payload;
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	685b      	ldr	r3, [r3, #4]
 8014920:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014922:	693b      	ldr	r3, [r7, #16]
 8014924:	881b      	ldrh	r3, [r3, #0]
 8014926:	b29b      	uxth	r3, r3
 8014928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801492c:	d10c      	bne.n	8014948 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801492e:	693b      	ldr	r3, [r7, #16]
 8014930:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014932:	2b06      	cmp	r3, #6
 8014934:	d108      	bne.n	8014948 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014936:	693b      	ldr	r3, [r7, #16]
 8014938:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801493a:	2b04      	cmp	r3, #4
 801493c:	d104      	bne.n	8014948 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801493e:	693b      	ldr	r3, [r7, #16]
 8014940:	885b      	ldrh	r3, [r3, #2]
 8014942:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014944:	2b08      	cmp	r3, #8
 8014946:	d015      	beq.n	8014974 <etharp_input+0x78>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 8014948:	693b      	ldr	r3, [r7, #16]
 801494a:	881b      	ldrh	r3, [r3, #0]
 801494c:	b29b      	uxth	r3, r3
 801494e:	4619      	mov	r1, r3
 8014950:	693b      	ldr	r3, [r7, #16]
 8014952:	791b      	ldrb	r3, [r3, #4]
 8014954:	461a      	mov	r2, r3
 8014956:	693b      	ldr	r3, [r7, #16]
 8014958:	885b      	ldrh	r3, [r3, #2]
 801495a:	b29b      	uxth	r3, r3
 801495c:	4618      	mov	r0, r3
 801495e:	693b      	ldr	r3, [r7, #16]
 8014960:	795b      	ldrb	r3, [r3, #5]
 8014962:	9300      	str	r3, [sp, #0]
 8014964:	4603      	mov	r3, r0
 8014966:	4844      	ldr	r0, [pc, #272]	; (8014a78 <etharp_input+0x17c>)
 8014968:	f002 fbfe 	bl	8017168 <iprintf>
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801496c:	6878      	ldr	r0, [r7, #4]
 801496e:	f7f6 fe29 	bl	800b5c4 <pbuf_free>
    return;
 8014972:	e078      	b.n	8014a66 <etharp_input+0x16a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014974:	693b      	ldr	r3, [r7, #16]
 8014976:	330e      	adds	r3, #14
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801497c:	693b      	ldr	r3, [r7, #16]
 801497e:	3318      	adds	r3, #24
 8014980:	681b      	ldr	r3, [r3, #0]
 8014982:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014984:	683b      	ldr	r3, [r7, #0]
 8014986:	3304      	adds	r3, #4
 8014988:	681b      	ldr	r3, [r3, #0]
 801498a:	2b00      	cmp	r3, #0
 801498c:	d102      	bne.n	8014994 <etharp_input+0x98>
    for_us = 0;
 801498e:	2300      	movs	r3, #0
 8014990:	75fb      	strb	r3, [r7, #23]
 8014992:	e009      	b.n	80149a8 <etharp_input+0xac>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014994:	68ba      	ldr	r2, [r7, #8]
 8014996:	683b      	ldr	r3, [r7, #0]
 8014998:	3304      	adds	r3, #4
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	429a      	cmp	r2, r3
 801499e:	bf0c      	ite	eq
 80149a0:	2301      	moveq	r3, #1
 80149a2:	2300      	movne	r3, #0
 80149a4:	b2db      	uxtb	r3, r3
 80149a6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80149a8:	693b      	ldr	r3, [r7, #16]
 80149aa:	f103 0208 	add.w	r2, r3, #8
 80149ae:	7dfb      	ldrb	r3, [r7, #23]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d001      	beq.n	80149b8 <etharp_input+0xbc>
 80149b4:	2301      	movs	r3, #1
 80149b6:	e000      	b.n	80149ba <etharp_input+0xbe>
 80149b8:	2302      	movs	r3, #2
 80149ba:	f107 010c 	add.w	r1, r7, #12
 80149be:	6838      	ldr	r0, [r7, #0]
 80149c0:	f7ff fe88 	bl	80146d4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80149c4:	693b      	ldr	r3, [r7, #16]
 80149c6:	88db      	ldrh	r3, [r3, #6]
 80149c8:	b29b      	uxth	r3, r3
 80149ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80149ce:	d003      	beq.n	80149d8 <etharp_input+0xdc>
 80149d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80149d4:	d02e      	beq.n	8014a34 <etharp_input+0x138>
 80149d6:	e037      	b.n	8014a48 <etharp_input+0x14c>
    case PP_HTONS(ARP_REQUEST):
      /* ARP request. If it asked for our address, we send out a
       * reply. In any case, we time-stamp any existing ARP entry,
       * and possibly send out an IP packet that was queued on it. */

      LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
 80149d8:	4828      	ldr	r0, [pc, #160]	; (8014a7c <etharp_input+0x180>)
 80149da:	f002 fc61 	bl	80172a0 <puts>
      /* ARP request for our address? */
      if (for_us) {
 80149de:	7dfb      	ldrb	r3, [r7, #23]
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d01a      	beq.n	8014a1a <etharp_input+0x11e>
        /* send ARP response */
        etharp_raw(netif,
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80149e4:	683b      	ldr	r3, [r7, #0]
 80149e6:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80149ea:	693b      	ldr	r3, [r7, #16]
 80149ec:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80149f0:	683b      	ldr	r3, [r7, #0]
 80149f2:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 80149f6:	683b      	ldr	r3, [r7, #0]
 80149f8:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80149fa:	693a      	ldr	r2, [r7, #16]
 80149fc:	3208      	adds	r2, #8
        etharp_raw(netif,
 80149fe:	2102      	movs	r1, #2
 8014a00:	9103      	str	r1, [sp, #12]
 8014a02:	f107 010c 	add.w	r1, r7, #12
 8014a06:	9102      	str	r1, [sp, #8]
 8014a08:	9201      	str	r2, [sp, #4]
 8014a0a:	9300      	str	r3, [sp, #0]
 8014a0c:	462b      	mov	r3, r5
 8014a0e:	4622      	mov	r2, r4
 8014a10:	4601      	mov	r1, r0
 8014a12:	6838      	ldr	r0, [r7, #0]
 8014a14:	f000 fb3e 	bl	8015094 <etharp_raw>
        /* request was not directed to us */
      } else {
        /* { for_us == 0 and netif->ip_addr.addr != 0 } */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
      }
      break;
 8014a18:	e022      	b.n	8014a60 <etharp_input+0x164>
      } else if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014a1a:	683b      	ldr	r3, [r7, #0]
 8014a1c:	3304      	adds	r3, #4
 8014a1e:	681b      	ldr	r3, [r3, #0]
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d103      	bne.n	8014a2c <etharp_input+0x130>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: we are unconfigured, ARP request ignored.\n"));
 8014a24:	4816      	ldr	r0, [pc, #88]	; (8014a80 <etharp_input+0x184>)
 8014a26:	f002 fc3b 	bl	80172a0 <puts>
      break;
 8014a2a:	e019      	b.n	8014a60 <etharp_input+0x164>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
 8014a2c:	4815      	ldr	r0, [pc, #84]	; (8014a84 <etharp_input+0x188>)
 8014a2e:	f002 fc37 	bl	80172a0 <puts>
      break;
 8014a32:	e015      	b.n	8014a60 <etharp_input+0x164>
    case PP_HTONS(ARP_REPLY):
      /* ARP reply. We already updated the ARP cache earlier. */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP reply\n"));
 8014a34:	4814      	ldr	r0, [pc, #80]	; (8014a88 <etharp_input+0x18c>)
 8014a36:	f002 fc33 	bl	80172a0 <puts>
#if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
      /* DHCP wants to know about ARP replies from any host with an
       * IP address also offered to us by the DHCP server. We do not
       * want to take a duplicate IP address on a single network.
       * @todo How should we handle redundant (fail-over) interfaces? */
      dhcp_arp_reply(netif, &sipaddr);
 8014a3a:	f107 030c 	add.w	r3, r7, #12
 8014a3e:	4619      	mov	r1, r3
 8014a40:	6838      	ldr	r0, [r7, #0]
 8014a42:	f7fd ff2f 	bl	80128a4 <dhcp_arp_reply>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
 8014a46:	e00b      	b.n	8014a60 <etharp_input+0x164>
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
 8014a48:	693b      	ldr	r3, [r7, #16]
 8014a4a:	88db      	ldrh	r3, [r3, #6]
 8014a4c:	b29b      	uxth	r3, r3
 8014a4e:	4618      	mov	r0, r3
 8014a50:	f7f4 fdd6 	bl	8009600 <lwip_htons>
 8014a54:	4603      	mov	r3, r0
 8014a56:	4619      	mov	r1, r3
 8014a58:	480c      	ldr	r0, [pc, #48]	; (8014a8c <etharp_input+0x190>)
 8014a5a:	f002 fb85 	bl	8017168 <iprintf>
      ETHARP_STATS_INC(etharp.err);
      break;
 8014a5e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014a60:	6878      	ldr	r0, [r7, #4]
 8014a62:	f7f6 fdaf 	bl	800b5c4 <pbuf_free>
}
 8014a66:	3718      	adds	r7, #24
 8014a68:	46bd      	mov	sp, r7
 8014a6a:	bdb0      	pop	{r4, r5, r7, pc}
 8014a6c:	0801becc 	.word	0x0801becc
 8014a70:	0801c294 	.word	0x0801c294
 8014a74:	0801bf44 	.word	0x0801bf44
 8014a78:	0801c2b4 	.word	0x0801c2b4
 8014a7c:	0801c31c 	.word	0x0801c31c
 8014a80:	0801c340 	.word	0x0801c340
 8014a84:	0801c378 	.word	0x0801c378
 8014a88:	0801c3a4 	.word	0x0801c3a4
 8014a8c:	0801c3c8 	.word	0x0801c3c8

08014a90 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014a90:	b580      	push	{r7, lr}
 8014a92:	b086      	sub	sp, #24
 8014a94:	af02      	add	r7, sp, #8
 8014a96:	60f8      	str	r0, [r7, #12]
 8014a98:	60b9      	str	r1, [r7, #8]
 8014a9a:	4613      	mov	r3, r2
 8014a9c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014a9e:	79fa      	ldrb	r2, [r7, #7]
 8014aa0:	4944      	ldr	r1, [pc, #272]	; (8014bb4 <etharp_output_to_arp_index+0x124>)
 8014aa2:	4613      	mov	r3, r2
 8014aa4:	005b      	lsls	r3, r3, #1
 8014aa6:	4413      	add	r3, r2
 8014aa8:	00db      	lsls	r3, r3, #3
 8014aaa:	440b      	add	r3, r1
 8014aac:	3314      	adds	r3, #20
 8014aae:	781b      	ldrb	r3, [r3, #0]
 8014ab0:	2b01      	cmp	r3, #1
 8014ab2:	d806      	bhi.n	8014ac2 <etharp_output_to_arp_index+0x32>
 8014ab4:	4b40      	ldr	r3, [pc, #256]	; (8014bb8 <etharp_output_to_arp_index+0x128>)
 8014ab6:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014aba:	4940      	ldr	r1, [pc, #256]	; (8014bbc <etharp_output_to_arp_index+0x12c>)
 8014abc:	4840      	ldr	r0, [pc, #256]	; (8014bc0 <etharp_output_to_arp_index+0x130>)
 8014abe:	f002 fb53 	bl	8017168 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014ac2:	79fa      	ldrb	r2, [r7, #7]
 8014ac4:	493b      	ldr	r1, [pc, #236]	; (8014bb4 <etharp_output_to_arp_index+0x124>)
 8014ac6:	4613      	mov	r3, r2
 8014ac8:	005b      	lsls	r3, r3, #1
 8014aca:	4413      	add	r3, r2
 8014acc:	00db      	lsls	r3, r3, #3
 8014ace:	440b      	add	r3, r1
 8014ad0:	3314      	adds	r3, #20
 8014ad2:	781b      	ldrb	r3, [r3, #0]
 8014ad4:	2b02      	cmp	r3, #2
 8014ad6:	d153      	bne.n	8014b80 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014ad8:	79fa      	ldrb	r2, [r7, #7]
 8014ada:	4936      	ldr	r1, [pc, #216]	; (8014bb4 <etharp_output_to_arp_index+0x124>)
 8014adc:	4613      	mov	r3, r2
 8014ade:	005b      	lsls	r3, r3, #1
 8014ae0:	4413      	add	r3, r2
 8014ae2:	00db      	lsls	r3, r3, #3
 8014ae4:	440b      	add	r3, r1
 8014ae6:	3312      	adds	r3, #18
 8014ae8:	881b      	ldrh	r3, [r3, #0]
 8014aea:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8014aee:	d919      	bls.n	8014b24 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014af0:	79fa      	ldrb	r2, [r7, #7]
 8014af2:	4613      	mov	r3, r2
 8014af4:	005b      	lsls	r3, r3, #1
 8014af6:	4413      	add	r3, r2
 8014af8:	00db      	lsls	r3, r3, #3
 8014afa:	4a2e      	ldr	r2, [pc, #184]	; (8014bb4 <etharp_output_to_arp_index+0x124>)
 8014afc:	4413      	add	r3, r2
 8014afe:	3304      	adds	r3, #4
 8014b00:	4619      	mov	r1, r3
 8014b02:	68f8      	ldr	r0, [r7, #12]
 8014b04:	f000 fb7e 	bl	8015204 <etharp_request>
 8014b08:	4603      	mov	r3, r0
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d138      	bne.n	8014b80 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014b0e:	79fa      	ldrb	r2, [r7, #7]
 8014b10:	4928      	ldr	r1, [pc, #160]	; (8014bb4 <etharp_output_to_arp_index+0x124>)
 8014b12:	4613      	mov	r3, r2
 8014b14:	005b      	lsls	r3, r3, #1
 8014b16:	4413      	add	r3, r2
 8014b18:	00db      	lsls	r3, r3, #3
 8014b1a:	440b      	add	r3, r1
 8014b1c:	3314      	adds	r3, #20
 8014b1e:	2203      	movs	r2, #3
 8014b20:	701a      	strb	r2, [r3, #0]
 8014b22:	e02d      	b.n	8014b80 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014b24:	79fa      	ldrb	r2, [r7, #7]
 8014b26:	4923      	ldr	r1, [pc, #140]	; (8014bb4 <etharp_output_to_arp_index+0x124>)
 8014b28:	4613      	mov	r3, r2
 8014b2a:	005b      	lsls	r3, r3, #1
 8014b2c:	4413      	add	r3, r2
 8014b2e:	00db      	lsls	r3, r3, #3
 8014b30:	440b      	add	r3, r1
 8014b32:	3312      	adds	r3, #18
 8014b34:	881b      	ldrh	r3, [r3, #0]
 8014b36:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8014b3a:	d321      	bcc.n	8014b80 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014b3c:	79fa      	ldrb	r2, [r7, #7]
 8014b3e:	4613      	mov	r3, r2
 8014b40:	005b      	lsls	r3, r3, #1
 8014b42:	4413      	add	r3, r2
 8014b44:	00db      	lsls	r3, r3, #3
 8014b46:	4a1b      	ldr	r2, [pc, #108]	; (8014bb4 <etharp_output_to_arp_index+0x124>)
 8014b48:	4413      	add	r3, r2
 8014b4a:	1d19      	adds	r1, r3, #4
 8014b4c:	79fa      	ldrb	r2, [r7, #7]
 8014b4e:	4613      	mov	r3, r2
 8014b50:	005b      	lsls	r3, r3, #1
 8014b52:	4413      	add	r3, r2
 8014b54:	00db      	lsls	r3, r3, #3
 8014b56:	3308      	adds	r3, #8
 8014b58:	4a16      	ldr	r2, [pc, #88]	; (8014bb4 <etharp_output_to_arp_index+0x124>)
 8014b5a:	4413      	add	r3, r2
 8014b5c:	3304      	adds	r3, #4
 8014b5e:	461a      	mov	r2, r3
 8014b60:	68f8      	ldr	r0, [r7, #12]
 8014b62:	f000 fb2d 	bl	80151c0 <etharp_request_dst>
 8014b66:	4603      	mov	r3, r0
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d109      	bne.n	8014b80 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014b6c:	79fa      	ldrb	r2, [r7, #7]
 8014b6e:	4911      	ldr	r1, [pc, #68]	; (8014bb4 <etharp_output_to_arp_index+0x124>)
 8014b70:	4613      	mov	r3, r2
 8014b72:	005b      	lsls	r3, r3, #1
 8014b74:	4413      	add	r3, r2
 8014b76:	00db      	lsls	r3, r3, #3
 8014b78:	440b      	add	r3, r1
 8014b7a:	3314      	adds	r3, #20
 8014b7c:	2203      	movs	r2, #3
 8014b7e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8014b86:	79fa      	ldrb	r2, [r7, #7]
 8014b88:	4613      	mov	r3, r2
 8014b8a:	005b      	lsls	r3, r3, #1
 8014b8c:	4413      	add	r3, r2
 8014b8e:	00db      	lsls	r3, r3, #3
 8014b90:	3308      	adds	r3, #8
 8014b92:	4a08      	ldr	r2, [pc, #32]	; (8014bb4 <etharp_output_to_arp_index+0x124>)
 8014b94:	4413      	add	r3, r2
 8014b96:	3304      	adds	r3, #4
 8014b98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014b9c:	9200      	str	r2, [sp, #0]
 8014b9e:	460a      	mov	r2, r1
 8014ba0:	68b9      	ldr	r1, [r7, #8]
 8014ba2:	68f8      	ldr	r0, [r7, #12]
 8014ba4:	f002 f952 	bl	8016e4c <ethernet_output>
 8014ba8:	4603      	mov	r3, r0
}
 8014baa:	4618      	mov	r0, r3
 8014bac:	3710      	adds	r7, #16
 8014bae:	46bd      	mov	sp, r7
 8014bb0:	bd80      	pop	{r7, pc}
 8014bb2:	bf00      	nop
 8014bb4:	2000da8c 	.word	0x2000da8c
 8014bb8:	0801becc 	.word	0x0801becc
 8014bbc:	0801c3f4 	.word	0x0801c3f4
 8014bc0:	0801bf44 	.word	0x0801bf44

08014bc4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014bc4:	b580      	push	{r7, lr}
 8014bc6:	b08a      	sub	sp, #40	; 0x28
 8014bc8:	af02      	add	r7, sp, #8
 8014bca:	60f8      	str	r0, [r7, #12]
 8014bcc:	60b9      	str	r1, [r7, #8]
 8014bce:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d106      	bne.n	8014be8 <etharp_output+0x24>
 8014bda:	4b73      	ldr	r3, [pc, #460]	; (8014da8 <etharp_output+0x1e4>)
 8014bdc:	f240 321e 	movw	r2, #798	; 0x31e
 8014be0:	4972      	ldr	r1, [pc, #456]	; (8014dac <etharp_output+0x1e8>)
 8014be2:	4873      	ldr	r0, [pc, #460]	; (8014db0 <etharp_output+0x1ec>)
 8014be4:	f002 fac0 	bl	8017168 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014be8:	68bb      	ldr	r3, [r7, #8]
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d106      	bne.n	8014bfc <etharp_output+0x38>
 8014bee:	4b6e      	ldr	r3, [pc, #440]	; (8014da8 <etharp_output+0x1e4>)
 8014bf0:	f240 321f 	movw	r2, #799	; 0x31f
 8014bf4:	496f      	ldr	r1, [pc, #444]	; (8014db4 <etharp_output+0x1f0>)
 8014bf6:	486e      	ldr	r0, [pc, #440]	; (8014db0 <etharp_output+0x1ec>)
 8014bf8:	f002 fab6 	bl	8017168 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d106      	bne.n	8014c10 <etharp_output+0x4c>
 8014c02:	4b69      	ldr	r3, [pc, #420]	; (8014da8 <etharp_output+0x1e4>)
 8014c04:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014c08:	496b      	ldr	r1, [pc, #428]	; (8014db8 <etharp_output+0x1f4>)
 8014c0a:	4869      	ldr	r0, [pc, #420]	; (8014db0 <etharp_output+0x1ec>)
 8014c0c:	f002 faac 	bl	8017168 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	68f9      	ldr	r1, [r7, #12]
 8014c16:	4618      	mov	r0, r3
 8014c18:	f001 f9aa 	bl	8015f70 <ip4_addr_isbroadcast_u32>
 8014c1c:	4603      	mov	r3, r0
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d002      	beq.n	8014c28 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014c22:	4b66      	ldr	r3, [pc, #408]	; (8014dbc <etharp_output+0x1f8>)
 8014c24:	61fb      	str	r3, [r7, #28]
 8014c26:	e0af      	b.n	8014d88 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014c30:	2be0      	cmp	r3, #224	; 0xe0
 8014c32:	d118      	bne.n	8014c66 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014c34:	2301      	movs	r3, #1
 8014c36:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014c38:	2300      	movs	r3, #0
 8014c3a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014c3c:	235e      	movs	r3, #94	; 0x5e
 8014c3e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	3301      	adds	r3, #1
 8014c44:	781b      	ldrb	r3, [r3, #0]
 8014c46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014c4a:	b2db      	uxtb	r3, r3
 8014c4c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	3302      	adds	r3, #2
 8014c52:	781b      	ldrb	r3, [r3, #0]
 8014c54:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	3303      	adds	r3, #3
 8014c5a:	781b      	ldrb	r3, [r3, #0]
 8014c5c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014c5e:	f107 0310 	add.w	r3, r7, #16
 8014c62:	61fb      	str	r3, [r7, #28]
 8014c64:	e090      	b.n	8014d88 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	681a      	ldr	r2, [r3, #0]
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	3304      	adds	r3, #4
 8014c6e:	681b      	ldr	r3, [r3, #0]
 8014c70:	405a      	eors	r2, r3
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	3308      	adds	r3, #8
 8014c76:	681b      	ldr	r3, [r3, #0]
 8014c78:	4013      	ands	r3, r2
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d012      	beq.n	8014ca4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	681b      	ldr	r3, [r3, #0]
 8014c82:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014c84:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8014c88:	4293      	cmp	r3, r2
 8014c8a:	d00b      	beq.n	8014ca4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014c8c:	68fb      	ldr	r3, [r7, #12]
 8014c8e:	330c      	adds	r3, #12
 8014c90:	681b      	ldr	r3, [r3, #0]
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d003      	beq.n	8014c9e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	330c      	adds	r3, #12
 8014c9a:	61bb      	str	r3, [r7, #24]
 8014c9c:	e002      	b.n	8014ca4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014c9e:	f06f 0303 	mvn.w	r3, #3
 8014ca2:	e07d      	b.n	8014da0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014ca4:	4b46      	ldr	r3, [pc, #280]	; (8014dc0 <etharp_output+0x1fc>)
 8014ca6:	781b      	ldrb	r3, [r3, #0]
 8014ca8:	4619      	mov	r1, r3
 8014caa:	4a46      	ldr	r2, [pc, #280]	; (8014dc4 <etharp_output+0x200>)
 8014cac:	460b      	mov	r3, r1
 8014cae:	005b      	lsls	r3, r3, #1
 8014cb0:	440b      	add	r3, r1
 8014cb2:	00db      	lsls	r3, r3, #3
 8014cb4:	4413      	add	r3, r2
 8014cb6:	3314      	adds	r3, #20
 8014cb8:	781b      	ldrb	r3, [r3, #0]
 8014cba:	2b01      	cmp	r3, #1
 8014cbc:	d925      	bls.n	8014d0a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014cbe:	4b40      	ldr	r3, [pc, #256]	; (8014dc0 <etharp_output+0x1fc>)
 8014cc0:	781b      	ldrb	r3, [r3, #0]
 8014cc2:	4619      	mov	r1, r3
 8014cc4:	4a3f      	ldr	r2, [pc, #252]	; (8014dc4 <etharp_output+0x200>)
 8014cc6:	460b      	mov	r3, r1
 8014cc8:	005b      	lsls	r3, r3, #1
 8014cca:	440b      	add	r3, r1
 8014ccc:	00db      	lsls	r3, r3, #3
 8014cce:	4413      	add	r3, r2
 8014cd0:	3308      	adds	r3, #8
 8014cd2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014cd4:	68fa      	ldr	r2, [r7, #12]
 8014cd6:	429a      	cmp	r2, r3
 8014cd8:	d117      	bne.n	8014d0a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014cda:	69bb      	ldr	r3, [r7, #24]
 8014cdc:	681a      	ldr	r2, [r3, #0]
 8014cde:	4b38      	ldr	r3, [pc, #224]	; (8014dc0 <etharp_output+0x1fc>)
 8014ce0:	781b      	ldrb	r3, [r3, #0]
 8014ce2:	4618      	mov	r0, r3
 8014ce4:	4937      	ldr	r1, [pc, #220]	; (8014dc4 <etharp_output+0x200>)
 8014ce6:	4603      	mov	r3, r0
 8014ce8:	005b      	lsls	r3, r3, #1
 8014cea:	4403      	add	r3, r0
 8014cec:	00db      	lsls	r3, r3, #3
 8014cee:	440b      	add	r3, r1
 8014cf0:	3304      	adds	r3, #4
 8014cf2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014cf4:	429a      	cmp	r2, r3
 8014cf6:	d108      	bne.n	8014d0a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014cf8:	4b31      	ldr	r3, [pc, #196]	; (8014dc0 <etharp_output+0x1fc>)
 8014cfa:	781b      	ldrb	r3, [r3, #0]
 8014cfc:	461a      	mov	r2, r3
 8014cfe:	68b9      	ldr	r1, [r7, #8]
 8014d00:	68f8      	ldr	r0, [r7, #12]
 8014d02:	f7ff fec5 	bl	8014a90 <etharp_output_to_arp_index>
 8014d06:	4603      	mov	r3, r0
 8014d08:	e04a      	b.n	8014da0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014d0a:	2300      	movs	r3, #0
 8014d0c:	75fb      	strb	r3, [r7, #23]
 8014d0e:	e031      	b.n	8014d74 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014d10:	7dfa      	ldrb	r2, [r7, #23]
 8014d12:	492c      	ldr	r1, [pc, #176]	; (8014dc4 <etharp_output+0x200>)
 8014d14:	4613      	mov	r3, r2
 8014d16:	005b      	lsls	r3, r3, #1
 8014d18:	4413      	add	r3, r2
 8014d1a:	00db      	lsls	r3, r3, #3
 8014d1c:	440b      	add	r3, r1
 8014d1e:	3314      	adds	r3, #20
 8014d20:	781b      	ldrb	r3, [r3, #0]
 8014d22:	2b01      	cmp	r3, #1
 8014d24:	d923      	bls.n	8014d6e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8014d26:	7dfa      	ldrb	r2, [r7, #23]
 8014d28:	4926      	ldr	r1, [pc, #152]	; (8014dc4 <etharp_output+0x200>)
 8014d2a:	4613      	mov	r3, r2
 8014d2c:	005b      	lsls	r3, r3, #1
 8014d2e:	4413      	add	r3, r2
 8014d30:	00db      	lsls	r3, r3, #3
 8014d32:	440b      	add	r3, r1
 8014d34:	3308      	adds	r3, #8
 8014d36:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014d38:	68fa      	ldr	r2, [r7, #12]
 8014d3a:	429a      	cmp	r2, r3
 8014d3c:	d117      	bne.n	8014d6e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014d3e:	69bb      	ldr	r3, [r7, #24]
 8014d40:	6819      	ldr	r1, [r3, #0]
 8014d42:	7dfa      	ldrb	r2, [r7, #23]
 8014d44:	481f      	ldr	r0, [pc, #124]	; (8014dc4 <etharp_output+0x200>)
 8014d46:	4613      	mov	r3, r2
 8014d48:	005b      	lsls	r3, r3, #1
 8014d4a:	4413      	add	r3, r2
 8014d4c:	00db      	lsls	r3, r3, #3
 8014d4e:	4403      	add	r3, r0
 8014d50:	3304      	adds	r3, #4
 8014d52:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014d54:	4299      	cmp	r1, r3
 8014d56:	d10a      	bne.n	8014d6e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014d58:	4a19      	ldr	r2, [pc, #100]	; (8014dc0 <etharp_output+0x1fc>)
 8014d5a:	7dfb      	ldrb	r3, [r7, #23]
 8014d5c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014d5e:	7dfb      	ldrb	r3, [r7, #23]
 8014d60:	461a      	mov	r2, r3
 8014d62:	68b9      	ldr	r1, [r7, #8]
 8014d64:	68f8      	ldr	r0, [r7, #12]
 8014d66:	f7ff fe93 	bl	8014a90 <etharp_output_to_arp_index>
 8014d6a:	4603      	mov	r3, r0
 8014d6c:	e018      	b.n	8014da0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014d6e:	7dfb      	ldrb	r3, [r7, #23]
 8014d70:	3301      	adds	r3, #1
 8014d72:	75fb      	strb	r3, [r7, #23]
 8014d74:	7dfb      	ldrb	r3, [r7, #23]
 8014d76:	2b09      	cmp	r3, #9
 8014d78:	d9ca      	bls.n	8014d10 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014d7a:	68ba      	ldr	r2, [r7, #8]
 8014d7c:	69b9      	ldr	r1, [r7, #24]
 8014d7e:	68f8      	ldr	r0, [r7, #12]
 8014d80:	f000 f822 	bl	8014dc8 <etharp_query>
 8014d84:	4603      	mov	r3, r0
 8014d86:	e00b      	b.n	8014da0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8014d8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014d92:	9300      	str	r3, [sp, #0]
 8014d94:	69fb      	ldr	r3, [r7, #28]
 8014d96:	68b9      	ldr	r1, [r7, #8]
 8014d98:	68f8      	ldr	r0, [r7, #12]
 8014d9a:	f002 f857 	bl	8016e4c <ethernet_output>
 8014d9e:	4603      	mov	r3, r0
}
 8014da0:	4618      	mov	r0, r3
 8014da2:	3720      	adds	r7, #32
 8014da4:	46bd      	mov	sp, r7
 8014da6:	bd80      	pop	{r7, pc}
 8014da8:	0801becc 	.word	0x0801becc
 8014dac:	0801c294 	.word	0x0801c294
 8014db0:	0801bf44 	.word	0x0801bf44
 8014db4:	0801c424 	.word	0x0801c424
 8014db8:	0801c284 	.word	0x0801c284
 8014dbc:	0801d630 	.word	0x0801d630
 8014dc0:	2000db7c 	.word	0x2000db7c
 8014dc4:	2000da8c 	.word	0x2000da8c

08014dc8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014dc8:	b580      	push	{r7, lr}
 8014dca:	b08c      	sub	sp, #48	; 0x30
 8014dcc:	af02      	add	r7, sp, #8
 8014dce:	60f8      	str	r0, [r7, #12]
 8014dd0:	60b9      	str	r1, [r7, #8]
 8014dd2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	332a      	adds	r3, #42	; 0x2a
 8014dd8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014dda:	23ff      	movs	r3, #255	; 0xff
 8014ddc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014de0:	2300      	movs	r3, #0
 8014de2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014de4:	68bb      	ldr	r3, [r7, #8]
 8014de6:	681b      	ldr	r3, [r3, #0]
 8014de8:	68f9      	ldr	r1, [r7, #12]
 8014dea:	4618      	mov	r0, r3
 8014dec:	f001 f8c0 	bl	8015f70 <ip4_addr_isbroadcast_u32>
 8014df0:	4603      	mov	r3, r0
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d10c      	bne.n	8014e10 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014df6:	68bb      	ldr	r3, [r7, #8]
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014dfe:	2be0      	cmp	r3, #224	; 0xe0
 8014e00:	d006      	beq.n	8014e10 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014e02:	68bb      	ldr	r3, [r7, #8]
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d003      	beq.n	8014e10 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014e08:	68bb      	ldr	r3, [r7, #8]
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d105      	bne.n	8014e1c <etharp_query+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
 8014e10:	4892      	ldr	r0, [pc, #584]	; (801505c <etharp_query+0x294>)
 8014e12:	f002 fa45 	bl	80172a0 <puts>
    return ERR_ARG;
 8014e16:	f06f 030f 	mvn.w	r3, #15
 8014e1a:	e11a      	b.n	8015052 <etharp_query+0x28a>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014e1c:	68fa      	ldr	r2, [r7, #12]
 8014e1e:	2101      	movs	r1, #1
 8014e20:	68b8      	ldr	r0, [r7, #8]
 8014e22:	f7ff fa95 	bl	8014350 <etharp_find_entry>
 8014e26:	4603      	mov	r3, r0
 8014e28:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014e2a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	da0b      	bge.n	8014e4a <etharp_query+0x82>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
 8014e32:	488b      	ldr	r0, [pc, #556]	; (8015060 <etharp_query+0x298>)
 8014e34:	f002 fa34 	bl	80172a0 <puts>
    if (q) {
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d002      	beq.n	8014e44 <etharp_query+0x7c>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
 8014e3e:	4889      	ldr	r0, [pc, #548]	; (8015064 <etharp_query+0x29c>)
 8014e40:	f002 fa2e 	bl	80172a0 <puts>
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014e44:	8a7b      	ldrh	r3, [r7, #18]
 8014e46:	b25b      	sxtb	r3, r3
 8014e48:	e103      	b.n	8015052 <etharp_query+0x28a>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014e4a:	8a7b      	ldrh	r3, [r7, #18]
 8014e4c:	2b7e      	cmp	r3, #126	; 0x7e
 8014e4e:	d906      	bls.n	8014e5e <etharp_query+0x96>
 8014e50:	4b85      	ldr	r3, [pc, #532]	; (8015068 <etharp_query+0x2a0>)
 8014e52:	f240 32c1 	movw	r2, #961	; 0x3c1
 8014e56:	4985      	ldr	r1, [pc, #532]	; (801506c <etharp_query+0x2a4>)
 8014e58:	4885      	ldr	r0, [pc, #532]	; (8015070 <etharp_query+0x2a8>)
 8014e5a:	f002 f985 	bl	8017168 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014e5e:	8a7b      	ldrh	r3, [r7, #18]
 8014e60:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014e62:	7c7a      	ldrb	r2, [r7, #17]
 8014e64:	4983      	ldr	r1, [pc, #524]	; (8015074 <etharp_query+0x2ac>)
 8014e66:	4613      	mov	r3, r2
 8014e68:	005b      	lsls	r3, r3, #1
 8014e6a:	4413      	add	r3, r2
 8014e6c:	00db      	lsls	r3, r3, #3
 8014e6e:	440b      	add	r3, r1
 8014e70:	3314      	adds	r3, #20
 8014e72:	781b      	ldrb	r3, [r3, #0]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d115      	bne.n	8014ea4 <etharp_query+0xdc>
    is_new_entry = 1;
 8014e78:	2301      	movs	r3, #1
 8014e7a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014e7c:	7c7a      	ldrb	r2, [r7, #17]
 8014e7e:	497d      	ldr	r1, [pc, #500]	; (8015074 <etharp_query+0x2ac>)
 8014e80:	4613      	mov	r3, r2
 8014e82:	005b      	lsls	r3, r3, #1
 8014e84:	4413      	add	r3, r2
 8014e86:	00db      	lsls	r3, r3, #3
 8014e88:	440b      	add	r3, r1
 8014e8a:	3314      	adds	r3, #20
 8014e8c:	2201      	movs	r2, #1
 8014e8e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014e90:	7c7a      	ldrb	r2, [r7, #17]
 8014e92:	4978      	ldr	r1, [pc, #480]	; (8015074 <etharp_query+0x2ac>)
 8014e94:	4613      	mov	r3, r2
 8014e96:	005b      	lsls	r3, r3, #1
 8014e98:	4413      	add	r3, r2
 8014e9a:	00db      	lsls	r3, r3, #3
 8014e9c:	440b      	add	r3, r1
 8014e9e:	3308      	adds	r3, #8
 8014ea0:	68fa      	ldr	r2, [r7, #12]
 8014ea2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014ea4:	7c7a      	ldrb	r2, [r7, #17]
 8014ea6:	4973      	ldr	r1, [pc, #460]	; (8015074 <etharp_query+0x2ac>)
 8014ea8:	4613      	mov	r3, r2
 8014eaa:	005b      	lsls	r3, r3, #1
 8014eac:	4413      	add	r3, r2
 8014eae:	00db      	lsls	r3, r3, #3
 8014eb0:	440b      	add	r3, r1
 8014eb2:	3314      	adds	r3, #20
 8014eb4:	781b      	ldrb	r3, [r3, #0]
 8014eb6:	2b01      	cmp	r3, #1
 8014eb8:	d011      	beq.n	8014ede <etharp_query+0x116>
 8014eba:	7c7a      	ldrb	r2, [r7, #17]
 8014ebc:	496d      	ldr	r1, [pc, #436]	; (8015074 <etharp_query+0x2ac>)
 8014ebe:	4613      	mov	r3, r2
 8014ec0:	005b      	lsls	r3, r3, #1
 8014ec2:	4413      	add	r3, r2
 8014ec4:	00db      	lsls	r3, r3, #3
 8014ec6:	440b      	add	r3, r1
 8014ec8:	3314      	adds	r3, #20
 8014eca:	781b      	ldrb	r3, [r3, #0]
 8014ecc:	2b01      	cmp	r3, #1
 8014ece:	d806      	bhi.n	8014ede <etharp_query+0x116>
 8014ed0:	4b65      	ldr	r3, [pc, #404]	; (8015068 <etharp_query+0x2a0>)
 8014ed2:	f240 32cd 	movw	r2, #973	; 0x3cd
 8014ed6:	4968      	ldr	r1, [pc, #416]	; (8015078 <etharp_query+0x2b0>)
 8014ed8:	4865      	ldr	r0, [pc, #404]	; (8015070 <etharp_query+0x2a8>)
 8014eda:	f002 f945 	bl	8017168 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014ede:	6a3b      	ldr	r3, [r7, #32]
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d102      	bne.n	8014eea <etharp_query+0x122>
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d10c      	bne.n	8014f04 <etharp_query+0x13c>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014eea:	68b9      	ldr	r1, [r7, #8]
 8014eec:	68f8      	ldr	r0, [r7, #12]
 8014eee:	f000 f989 	bl	8015204 <etharp_request>
 8014ef2:	4603      	mov	r3, r0
 8014ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d102      	bne.n	8014f04 <etharp_query+0x13c>
      return result;
 8014efe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014f02:	e0a6      	b.n	8015052 <etharp_query+0x28a>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d106      	bne.n	8014f18 <etharp_query+0x150>
 8014f0a:	4b57      	ldr	r3, [pc, #348]	; (8015068 <etharp_query+0x2a0>)
 8014f0c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014f10:	495a      	ldr	r1, [pc, #360]	; (801507c <etharp_query+0x2b4>)
 8014f12:	4857      	ldr	r0, [pc, #348]	; (8015070 <etharp_query+0x2a8>)
 8014f14:	f002 f928 	bl	8017168 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014f18:	7c7a      	ldrb	r2, [r7, #17]
 8014f1a:	4956      	ldr	r1, [pc, #344]	; (8015074 <etharp_query+0x2ac>)
 8014f1c:	4613      	mov	r3, r2
 8014f1e:	005b      	lsls	r3, r3, #1
 8014f20:	4413      	add	r3, r2
 8014f22:	00db      	lsls	r3, r3, #3
 8014f24:	440b      	add	r3, r1
 8014f26:	3314      	adds	r3, #20
 8014f28:	781b      	ldrb	r3, [r3, #0]
 8014f2a:	2b01      	cmp	r3, #1
 8014f2c:	d917      	bls.n	8014f5e <etharp_query+0x196>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014f2e:	4a54      	ldr	r2, [pc, #336]	; (8015080 <etharp_query+0x2b8>)
 8014f30:	7c7b      	ldrb	r3, [r7, #17]
 8014f32:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014f34:	7c7a      	ldrb	r2, [r7, #17]
 8014f36:	4613      	mov	r3, r2
 8014f38:	005b      	lsls	r3, r3, #1
 8014f3a:	4413      	add	r3, r2
 8014f3c:	00db      	lsls	r3, r3, #3
 8014f3e:	3308      	adds	r3, #8
 8014f40:	4a4c      	ldr	r2, [pc, #304]	; (8015074 <etharp_query+0x2ac>)
 8014f42:	4413      	add	r3, r2
 8014f44:	3304      	adds	r3, #4
 8014f46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014f4a:	9200      	str	r2, [sp, #0]
 8014f4c:	697a      	ldr	r2, [r7, #20]
 8014f4e:	6879      	ldr	r1, [r7, #4]
 8014f50:	68f8      	ldr	r0, [r7, #12]
 8014f52:	f001 ff7b 	bl	8016e4c <ethernet_output>
 8014f56:	4603      	mov	r3, r0
 8014f58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014f5c:	e077      	b.n	801504e <etharp_query+0x286>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014f5e:	7c7a      	ldrb	r2, [r7, #17]
 8014f60:	4944      	ldr	r1, [pc, #272]	; (8015074 <etharp_query+0x2ac>)
 8014f62:	4613      	mov	r3, r2
 8014f64:	005b      	lsls	r3, r3, #1
 8014f66:	4413      	add	r3, r2
 8014f68:	00db      	lsls	r3, r3, #3
 8014f6a:	440b      	add	r3, r1
 8014f6c:	3314      	adds	r3, #20
 8014f6e:	781b      	ldrb	r3, [r3, #0]
 8014f70:	2b01      	cmp	r3, #1
 8014f72:	d16c      	bne.n	801504e <etharp_query+0x286>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014f74:	2300      	movs	r3, #0
 8014f76:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014f7c:	e01c      	b.n	8014fb8 <etharp_query+0x1f0>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014f7e:	69fb      	ldr	r3, [r7, #28]
 8014f80:	895a      	ldrh	r2, [r3, #10]
 8014f82:	69fb      	ldr	r3, [r7, #28]
 8014f84:	891b      	ldrh	r3, [r3, #8]
 8014f86:	429a      	cmp	r2, r3
 8014f88:	d10a      	bne.n	8014fa0 <etharp_query+0x1d8>
 8014f8a:	69fb      	ldr	r3, [r7, #28]
 8014f8c:	681b      	ldr	r3, [r3, #0]
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d006      	beq.n	8014fa0 <etharp_query+0x1d8>
 8014f92:	4b35      	ldr	r3, [pc, #212]	; (8015068 <etharp_query+0x2a0>)
 8014f94:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8014f98:	493a      	ldr	r1, [pc, #232]	; (8015084 <etharp_query+0x2bc>)
 8014f9a:	4835      	ldr	r0, [pc, #212]	; (8015070 <etharp_query+0x2a8>)
 8014f9c:	f002 f8e4 	bl	8017168 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014fa0:	69fb      	ldr	r3, [r7, #28]
 8014fa2:	7b1b      	ldrb	r3, [r3, #12]
 8014fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d002      	beq.n	8014fb2 <etharp_query+0x1ea>
        copy_needed = 1;
 8014fac:	2301      	movs	r3, #1
 8014fae:	61bb      	str	r3, [r7, #24]
        break;
 8014fb0:	e005      	b.n	8014fbe <etharp_query+0x1f6>
      }
      p = p->next;
 8014fb2:	69fb      	ldr	r3, [r7, #28]
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014fb8:	69fb      	ldr	r3, [r7, #28]
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d1df      	bne.n	8014f7e <etharp_query+0x1b6>
    }
    if (copy_needed) {
 8014fbe:	69bb      	ldr	r3, [r7, #24]
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d007      	beq.n	8014fd4 <etharp_query+0x20c>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014fc4:	687a      	ldr	r2, [r7, #4]
 8014fc6:	f44f 7120 	mov.w	r1, #640	; 0x280
 8014fca:	200e      	movs	r0, #14
 8014fcc:	f7f6 feaa 	bl	800bd24 <pbuf_clone>
 8014fd0:	61f8      	str	r0, [r7, #28]
 8014fd2:	e004      	b.n	8014fde <etharp_query+0x216>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014fd8:	69f8      	ldr	r0, [r7, #28]
 8014fda:	f7f6 fb99 	bl	800b710 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014fde:	69fb      	ldr	r3, [r7, #28]
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d02d      	beq.n	8015040 <etharp_query+0x278>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014fe4:	7c7a      	ldrb	r2, [r7, #17]
 8014fe6:	4923      	ldr	r1, [pc, #140]	; (8015074 <etharp_query+0x2ac>)
 8014fe8:	4613      	mov	r3, r2
 8014fea:	005b      	lsls	r3, r3, #1
 8014fec:	4413      	add	r3, r2
 8014fee:	00db      	lsls	r3, r3, #3
 8014ff0:	440b      	add	r3, r1
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d010      	beq.n	801501a <etharp_query+0x252>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
 8014ff8:	7c7b      	ldrb	r3, [r7, #17]
 8014ffa:	461a      	mov	r2, r3
 8014ffc:	6879      	ldr	r1, [r7, #4]
 8014ffe:	4822      	ldr	r0, [pc, #136]	; (8015088 <etharp_query+0x2c0>)
 8015000:	f002 f8b2 	bl	8017168 <iprintf>
        pbuf_free(arp_table[i].q);
 8015004:	7c7a      	ldrb	r2, [r7, #17]
 8015006:	491b      	ldr	r1, [pc, #108]	; (8015074 <etharp_query+0x2ac>)
 8015008:	4613      	mov	r3, r2
 801500a:	005b      	lsls	r3, r3, #1
 801500c:	4413      	add	r3, r2
 801500e:	00db      	lsls	r3, r3, #3
 8015010:	440b      	add	r3, r1
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	4618      	mov	r0, r3
 8015016:	f7f6 fad5 	bl	800b5c4 <pbuf_free>
      }
      arp_table[i].q = p;
 801501a:	7c7a      	ldrb	r2, [r7, #17]
 801501c:	4915      	ldr	r1, [pc, #84]	; (8015074 <etharp_query+0x2ac>)
 801501e:	4613      	mov	r3, r2
 8015020:	005b      	lsls	r3, r3, #1
 8015022:	4413      	add	r3, r2
 8015024:	00db      	lsls	r3, r3, #3
 8015026:	440b      	add	r3, r1
 8015028:	69fa      	ldr	r2, [r7, #28]
 801502a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801502c:	2300      	movs	r3, #0
 801502e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
 8015032:	7c7b      	ldrb	r3, [r7, #17]
 8015034:	461a      	mov	r2, r3
 8015036:	6879      	ldr	r1, [r7, #4]
 8015038:	4814      	ldr	r0, [pc, #80]	; (801508c <etharp_query+0x2c4>)
 801503a:	f002 f895 	bl	8017168 <iprintf>
 801503e:	e006      	b.n	801504e <etharp_query+0x286>
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
 8015040:	6879      	ldr	r1, [r7, #4]
 8015042:	4813      	ldr	r0, [pc, #76]	; (8015090 <etharp_query+0x2c8>)
 8015044:	f002 f890 	bl	8017168 <iprintf>
      result = ERR_MEM;
 8015048:	23ff      	movs	r3, #255	; 0xff
 801504a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801504e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8015052:	4618      	mov	r0, r3
 8015054:	3728      	adds	r7, #40	; 0x28
 8015056:	46bd      	mov	sp, r7
 8015058:	bd80      	pop	{r7, pc}
 801505a:	bf00      	nop
 801505c:	0801c430 	.word	0x0801c430
 8015060:	0801c470 	.word	0x0801c470
 8015064:	0801c49c 	.word	0x0801c49c
 8015068:	0801becc 	.word	0x0801becc
 801506c:	0801c4bc 	.word	0x0801c4bc
 8015070:	0801bf44 	.word	0x0801bf44
 8015074:	2000da8c 	.word	0x2000da8c
 8015078:	0801c4cc 	.word	0x0801c4cc
 801507c:	0801c424 	.word	0x0801c424
 8015080:	2000db7c 	.word	0x2000db7c
 8015084:	0801c4f4 	.word	0x0801c4f4
 8015088:	0801c510 	.word	0x0801c510
 801508c:	0801c558 	.word	0x0801c558
 8015090:	0801c58c 	.word	0x0801c58c

08015094 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015094:	b580      	push	{r7, lr}
 8015096:	b08a      	sub	sp, #40	; 0x28
 8015098:	af02      	add	r7, sp, #8
 801509a:	60f8      	str	r0, [r7, #12]
 801509c:	60b9      	str	r1, [r7, #8]
 801509e:	607a      	str	r2, [r7, #4]
 80150a0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80150a2:	2300      	movs	r3, #0
 80150a4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d106      	bne.n	80150ba <etharp_raw+0x26>
 80150ac:	4b3d      	ldr	r3, [pc, #244]	; (80151a4 <etharp_raw+0x110>)
 80150ae:	f240 4257 	movw	r2, #1111	; 0x457
 80150b2:	493d      	ldr	r1, [pc, #244]	; (80151a8 <etharp_raw+0x114>)
 80150b4:	483d      	ldr	r0, [pc, #244]	; (80151ac <etharp_raw+0x118>)
 80150b6:	f002 f857 	bl	8017168 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80150ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 80150be:	211c      	movs	r1, #28
 80150c0:	200e      	movs	r0, #14
 80150c2:	f7f5 ff9b 	bl	800affc <pbuf_alloc>
 80150c6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80150c8:	69bb      	ldr	r3, [r7, #24]
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d105      	bne.n	80150da <etharp_raw+0x46>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 80150ce:	4838      	ldr	r0, [pc, #224]	; (80151b0 <etharp_raw+0x11c>)
 80150d0:	f002 f8e6 	bl	80172a0 <puts>
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80150d4:	f04f 33ff 	mov.w	r3, #4294967295
 80150d8:	e060      	b.n	801519c <etharp_raw+0x108>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80150da:	69bb      	ldr	r3, [r7, #24]
 80150dc:	895b      	ldrh	r3, [r3, #10]
 80150de:	2b1b      	cmp	r3, #27
 80150e0:	d806      	bhi.n	80150f0 <etharp_raw+0x5c>
 80150e2:	4b30      	ldr	r3, [pc, #192]	; (80151a4 <etharp_raw+0x110>)
 80150e4:	f240 4262 	movw	r2, #1122	; 0x462
 80150e8:	4932      	ldr	r1, [pc, #200]	; (80151b4 <etharp_raw+0x120>)
 80150ea:	4830      	ldr	r0, [pc, #192]	; (80151ac <etharp_raw+0x118>)
 80150ec:	f002 f83c 	bl	8017168 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80150f0:	69bb      	ldr	r3, [r7, #24]
 80150f2:	685b      	ldr	r3, [r3, #4]
 80150f4:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
 80150f6:	4830      	ldr	r0, [pc, #192]	; (80151b8 <etharp_raw+0x124>)
 80150f8:	f002 f8d2 	bl	80172a0 <puts>
  hdr->opcode = lwip_htons(opcode);
 80150fc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80150fe:	4618      	mov	r0, r3
 8015100:	f7f4 fa7e 	bl	8009600 <lwip_htons>
 8015104:	4603      	mov	r3, r0
 8015106:	461a      	mov	r2, r3
 8015108:	697b      	ldr	r3, [r7, #20]
 801510a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015112:	2b06      	cmp	r3, #6
 8015114:	d006      	beq.n	8015124 <etharp_raw+0x90>
 8015116:	4b23      	ldr	r3, [pc, #140]	; (80151a4 <etharp_raw+0x110>)
 8015118:	f240 4269 	movw	r2, #1129	; 0x469
 801511c:	4927      	ldr	r1, [pc, #156]	; (80151bc <etharp_raw+0x128>)
 801511e:	4823      	ldr	r0, [pc, #140]	; (80151ac <etharp_raw+0x118>)
 8015120:	f002 f822 	bl	8017168 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015124:	697b      	ldr	r3, [r7, #20]
 8015126:	3308      	adds	r3, #8
 8015128:	2206      	movs	r2, #6
 801512a:	6839      	ldr	r1, [r7, #0]
 801512c:	4618      	mov	r0, r3
 801512e:	f002 f805 	bl	801713c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015132:	697b      	ldr	r3, [r7, #20]
 8015134:	3312      	adds	r3, #18
 8015136:	2206      	movs	r2, #6
 8015138:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801513a:	4618      	mov	r0, r3
 801513c:	f001 fffe 	bl	801713c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015140:	697b      	ldr	r3, [r7, #20]
 8015142:	330e      	adds	r3, #14
 8015144:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015146:	6812      	ldr	r2, [r2, #0]
 8015148:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801514a:	697b      	ldr	r3, [r7, #20]
 801514c:	3318      	adds	r3, #24
 801514e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015150:	6812      	ldr	r2, [r2, #0]
 8015152:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015154:	697b      	ldr	r3, [r7, #20]
 8015156:	2200      	movs	r2, #0
 8015158:	701a      	strb	r2, [r3, #0]
 801515a:	2200      	movs	r2, #0
 801515c:	f042 0201 	orr.w	r2, r2, #1
 8015160:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015162:	697b      	ldr	r3, [r7, #20]
 8015164:	2200      	movs	r2, #0
 8015166:	f042 0208 	orr.w	r2, r2, #8
 801516a:	709a      	strb	r2, [r3, #2]
 801516c:	2200      	movs	r2, #0
 801516e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015170:	697b      	ldr	r3, [r7, #20]
 8015172:	2206      	movs	r2, #6
 8015174:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015176:	697b      	ldr	r3, [r7, #20]
 8015178:	2204      	movs	r2, #4
 801517a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801517c:	f640 0306 	movw	r3, #2054	; 0x806
 8015180:	9300      	str	r3, [sp, #0]
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	68ba      	ldr	r2, [r7, #8]
 8015186:	69b9      	ldr	r1, [r7, #24]
 8015188:	68f8      	ldr	r0, [r7, #12]
 801518a:	f001 fe5f 	bl	8016e4c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801518e:	69b8      	ldr	r0, [r7, #24]
 8015190:	f7f6 fa18 	bl	800b5c4 <pbuf_free>
  p = NULL;
 8015194:	2300      	movs	r3, #0
 8015196:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015198:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801519c:	4618      	mov	r0, r3
 801519e:	3720      	adds	r7, #32
 80151a0:	46bd      	mov	sp, r7
 80151a2:	bd80      	pop	{r7, pc}
 80151a4:	0801becc 	.word	0x0801becc
 80151a8:	0801c294 	.word	0x0801c294
 80151ac:	0801bf44 	.word	0x0801bf44
 80151b0:	0801c5d8 	.word	0x0801c5d8
 80151b4:	0801c610 	.word	0x0801c610
 80151b8:	0801c644 	.word	0x0801c644
 80151bc:	0801c668 	.word	0x0801c668

080151c0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80151c0:	b580      	push	{r7, lr}
 80151c2:	b088      	sub	sp, #32
 80151c4:	af04      	add	r7, sp, #16
 80151c6:	60f8      	str	r0, [r7, #12]
 80151c8:	60b9      	str	r1, [r7, #8]
 80151ca:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80151dc:	2201      	movs	r2, #1
 80151de:	9203      	str	r2, [sp, #12]
 80151e0:	68ba      	ldr	r2, [r7, #8]
 80151e2:	9202      	str	r2, [sp, #8]
 80151e4:	4a06      	ldr	r2, [pc, #24]	; (8015200 <etharp_request_dst+0x40>)
 80151e6:	9201      	str	r2, [sp, #4]
 80151e8:	9300      	str	r3, [sp, #0]
 80151ea:	4603      	mov	r3, r0
 80151ec:	687a      	ldr	r2, [r7, #4]
 80151ee:	68f8      	ldr	r0, [r7, #12]
 80151f0:	f7ff ff50 	bl	8015094 <etharp_raw>
 80151f4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80151f6:	4618      	mov	r0, r3
 80151f8:	3710      	adds	r7, #16
 80151fa:	46bd      	mov	sp, r7
 80151fc:	bd80      	pop	{r7, pc}
 80151fe:	bf00      	nop
 8015200:	0801d638 	.word	0x0801d638

08015204 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015204:	b580      	push	{r7, lr}
 8015206:	b082      	sub	sp, #8
 8015208:	af00      	add	r7, sp, #0
 801520a:	6078      	str	r0, [r7, #4]
 801520c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
 801520e:	4806      	ldr	r0, [pc, #24]	; (8015228 <etharp_request+0x24>)
 8015210:	f002 f846 	bl	80172a0 <puts>
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8015214:	4a05      	ldr	r2, [pc, #20]	; (801522c <etharp_request+0x28>)
 8015216:	6839      	ldr	r1, [r7, #0]
 8015218:	6878      	ldr	r0, [r7, #4]
 801521a:	f7ff ffd1 	bl	80151c0 <etharp_request_dst>
 801521e:	4603      	mov	r3, r0
}
 8015220:	4618      	mov	r0, r3
 8015222:	3708      	adds	r7, #8
 8015224:	46bd      	mov	sp, r7
 8015226:	bd80      	pop	{r7, pc}
 8015228:	0801c6ac 	.word	0x0801c6ac
 801522c:	0801d630 	.word	0x0801d630

08015230 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015230:	b580      	push	{r7, lr}
 8015232:	b08e      	sub	sp, #56	; 0x38
 8015234:	af04      	add	r7, sp, #16
 8015236:	6078      	str	r0, [r7, #4]
 8015238:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801523a:	4b95      	ldr	r3, [pc, #596]	; (8015490 <icmp_input+0x260>)
 801523c:	689b      	ldr	r3, [r3, #8]
 801523e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015242:	781b      	ldrb	r3, [r3, #0]
 8015244:	f003 030f 	and.w	r3, r3, #15
 8015248:	b2db      	uxtb	r3, r3
 801524a:	009b      	lsls	r3, r3, #2
 801524c:	b2db      	uxtb	r3, r3
 801524e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8015250:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015252:	2b13      	cmp	r3, #19
 8015254:	d805      	bhi.n	8015262 <icmp_input+0x32>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
 8015256:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015258:	4619      	mov	r1, r3
 801525a:	488e      	ldr	r0, [pc, #568]	; (8015494 <icmp_input+0x264>)
 801525c:	f001 ff84 	bl	8017168 <iprintf>
    goto lenerr;
 8015260:	e10a      	b.n	8015478 <icmp_input+0x248>
  }
  if (p->len < sizeof(u16_t) * 2) {
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	895b      	ldrh	r3, [r3, #10]
 8015266:	2b03      	cmp	r3, #3
 8015268:	d806      	bhi.n	8015278 <icmp_input+0x48>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	891b      	ldrh	r3, [r3, #8]
 801526e:	4619      	mov	r1, r3
 8015270:	4889      	ldr	r0, [pc, #548]	; (8015498 <icmp_input+0x268>)
 8015272:	f001 ff79 	bl	8017168 <iprintf>
    goto lenerr;
 8015276:	e0ff      	b.n	8015478 <icmp_input+0x248>
  }

  type = *((u8_t *)p->payload);
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	685b      	ldr	r3, [r3, #4]
 801527c:	781b      	ldrb	r3, [r3, #0]
 801527e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	685b      	ldr	r3, [r3, #4]
 8015286:	785b      	ldrb	r3, [r3, #1]
 8015288:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801528c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015290:	2b00      	cmp	r3, #0
 8015292:	f000 80ea 	beq.w	801546a <icmp_input+0x23a>
 8015296:	2b08      	cmp	r3, #8
 8015298:	f040 80de 	bne.w	8015458 <icmp_input+0x228>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801529c:	4b7f      	ldr	r3, [pc, #508]	; (801549c <icmp_input+0x26c>)
 801529e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80152a0:	4b7b      	ldr	r3, [pc, #492]	; (8015490 <icmp_input+0x260>)
 80152a2:	695b      	ldr	r3, [r3, #20]
 80152a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80152a8:	2be0      	cmp	r3, #224	; 0xe0
 80152aa:	d103      	bne.n	80152b4 <icmp_input+0x84>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_MULTICAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
 80152ac:	487c      	ldr	r0, [pc, #496]	; (80154a0 <icmp_input+0x270>)
 80152ae:	f001 fff7 	bl	80172a0 <puts>
        goto icmperr;
 80152b2:	e0e5      	b.n	8015480 <icmp_input+0x250>
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80152b4:	4b76      	ldr	r3, [pc, #472]	; (8015490 <icmp_input+0x260>)
 80152b6:	695b      	ldr	r3, [r3, #20]
 80152b8:	4a75      	ldr	r2, [pc, #468]	; (8015490 <icmp_input+0x260>)
 80152ba:	6812      	ldr	r2, [r2, #0]
 80152bc:	4611      	mov	r1, r2
 80152be:	4618      	mov	r0, r3
 80152c0:	f000 fe56 	bl	8015f70 <ip4_addr_isbroadcast_u32>
 80152c4:	4603      	mov	r3, r0
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d003      	beq.n	80152d2 <icmp_input+0xa2>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_BROADCAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
 80152ca:	4876      	ldr	r0, [pc, #472]	; (80154a4 <icmp_input+0x274>)
 80152cc:	f001 ffe8 	bl	80172a0 <puts>
        goto icmperr;
 80152d0:	e0d6      	b.n	8015480 <icmp_input+0x250>
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
 80152d2:	4875      	ldr	r0, [pc, #468]	; (80154a8 <icmp_input+0x278>)
 80152d4:	f001 ffe4 	bl	80172a0 <puts>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	891b      	ldrh	r3, [r3, #8]
 80152dc:	2b07      	cmp	r3, #7
 80152de:	d803      	bhi.n	80152e8 <icmp_input+0xb8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
 80152e0:	4872      	ldr	r0, [pc, #456]	; (80154ac <icmp_input+0x27c>)
 80152e2:	f001 ffdd 	bl	80172a0 <puts>
        goto lenerr;
 80152e6:	e0c7      	b.n	8015478 <icmp_input+0x248>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80152e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80152ea:	330e      	adds	r3, #14
 80152ec:	4619      	mov	r1, r3
 80152ee:	6878      	ldr	r0, [r7, #4]
 80152f0:	f7f6 f8d2 	bl	800b498 <pbuf_add_header>
 80152f4:	4603      	mov	r3, r0
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d057      	beq.n	80153aa <icmp_input+0x17a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	891a      	ldrh	r2, [r3, #8]
 80152fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015300:	4413      	add	r3, r2
 8015302:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	891b      	ldrh	r3, [r3, #8]
 8015308:	8b7a      	ldrh	r2, [r7, #26]
 801530a:	429a      	cmp	r2, r3
 801530c:	d203      	bcs.n	8015316 <icmp_input+0xe6>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
 801530e:	4868      	ldr	r0, [pc, #416]	; (80154b0 <icmp_input+0x280>)
 8015310:	f001 ffc6 	bl	80172a0 <puts>
          goto icmperr;
 8015314:	e0b4      	b.n	8015480 <icmp_input+0x250>
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8015316:	8b7b      	ldrh	r3, [r7, #26]
 8015318:	f44f 7220 	mov.w	r2, #640	; 0x280
 801531c:	4619      	mov	r1, r3
 801531e:	200e      	movs	r0, #14
 8015320:	f7f5 fe6c 	bl	800affc <pbuf_alloc>
 8015324:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8015326:	697b      	ldr	r3, [r7, #20]
 8015328:	2b00      	cmp	r3, #0
 801532a:	d103      	bne.n	8015334 <icmp_input+0x104>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
 801532c:	4861      	ldr	r0, [pc, #388]	; (80154b4 <icmp_input+0x284>)
 801532e:	f001 ffb7 	bl	80172a0 <puts>
          goto icmperr;
 8015332:	e0a5      	b.n	8015480 <icmp_input+0x250>
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015334:	697b      	ldr	r3, [r7, #20]
 8015336:	895b      	ldrh	r3, [r3, #10]
 8015338:	461a      	mov	r2, r3
 801533a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801533c:	3308      	adds	r3, #8
 801533e:	429a      	cmp	r2, r3
 8015340:	d206      	bcs.n	8015350 <icmp_input+0x120>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
 8015342:	485d      	ldr	r0, [pc, #372]	; (80154b8 <icmp_input+0x288>)
 8015344:	f001 ff10 	bl	8017168 <iprintf>
          pbuf_free(r);
 8015348:	6978      	ldr	r0, [r7, #20]
 801534a:	f7f6 f93b 	bl	800b5c4 <pbuf_free>
          goto icmperr;
 801534e:	e097      	b.n	8015480 <icmp_input+0x250>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8015350:	697b      	ldr	r3, [r7, #20]
 8015352:	685b      	ldr	r3, [r3, #4]
 8015354:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015356:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015358:	4618      	mov	r0, r3
 801535a:	f001 feef 	bl	801713c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801535e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015360:	4619      	mov	r1, r3
 8015362:	6978      	ldr	r0, [r7, #20]
 8015364:	f7f6 f8a8 	bl	800b4b8 <pbuf_remove_header>
 8015368:	4603      	mov	r3, r0
 801536a:	2b00      	cmp	r3, #0
 801536c:	d009      	beq.n	8015382 <icmp_input+0x152>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801536e:	4b53      	ldr	r3, [pc, #332]	; (80154bc <icmp_input+0x28c>)
 8015370:	22b6      	movs	r2, #182	; 0xb6
 8015372:	4953      	ldr	r1, [pc, #332]	; (80154c0 <icmp_input+0x290>)
 8015374:	4853      	ldr	r0, [pc, #332]	; (80154c4 <icmp_input+0x294>)
 8015376:	f001 fef7 	bl	8017168 <iprintf>
          pbuf_free(r);
 801537a:	6978      	ldr	r0, [r7, #20]
 801537c:	f7f6 f922 	bl	800b5c4 <pbuf_free>
          goto icmperr;
 8015380:	e07e      	b.n	8015480 <icmp_input+0x250>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8015382:	6879      	ldr	r1, [r7, #4]
 8015384:	6978      	ldr	r0, [r7, #20]
 8015386:	f7f6 fa51 	bl	800b82c <pbuf_copy>
 801538a:	4603      	mov	r3, r0
 801538c:	2b00      	cmp	r3, #0
 801538e:	d006      	beq.n	801539e <icmp_input+0x16e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
 8015390:	484d      	ldr	r0, [pc, #308]	; (80154c8 <icmp_input+0x298>)
 8015392:	f001 fee9 	bl	8017168 <iprintf>
          pbuf_free(r);
 8015396:	6978      	ldr	r0, [r7, #20]
 8015398:	f7f6 f914 	bl	800b5c4 <pbuf_free>
          goto icmperr;
 801539c:	e070      	b.n	8015480 <icmp_input+0x250>
        }
        /* free the original p */
        pbuf_free(p);
 801539e:	6878      	ldr	r0, [r7, #4]
 80153a0:	f7f6 f910 	bl	800b5c4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80153a4:	697b      	ldr	r3, [r7, #20]
 80153a6:	607b      	str	r3, [r7, #4]
 80153a8:	e00f      	b.n	80153ca <icmp_input+0x19a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80153aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80153ac:	330e      	adds	r3, #14
 80153ae:	4619      	mov	r1, r3
 80153b0:	6878      	ldr	r0, [r7, #4]
 80153b2:	f7f6 f881 	bl	800b4b8 <pbuf_remove_header>
 80153b6:	4603      	mov	r3, r0
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d006      	beq.n	80153ca <icmp_input+0x19a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80153bc:	4b3f      	ldr	r3, [pc, #252]	; (80154bc <icmp_input+0x28c>)
 80153be:	22c7      	movs	r2, #199	; 0xc7
 80153c0:	4942      	ldr	r1, [pc, #264]	; (80154cc <icmp_input+0x29c>)
 80153c2:	4840      	ldr	r0, [pc, #256]	; (80154c4 <icmp_input+0x294>)
 80153c4:	f001 fed0 	bl	8017168 <iprintf>
          goto icmperr;
 80153c8:	e05a      	b.n	8015480 <icmp_input+0x250>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	685b      	ldr	r3, [r3, #4]
 80153ce:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80153d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80153d2:	4619      	mov	r1, r3
 80153d4:	6878      	ldr	r0, [r7, #4]
 80153d6:	f7f6 f85f 	bl	800b498 <pbuf_add_header>
 80153da:	4603      	mov	r3, r0
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d003      	beq.n	80153e8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
 80153e0:	483b      	ldr	r0, [pc, #236]	; (80154d0 <icmp_input+0x2a0>)
 80153e2:	f001 fec1 	bl	8017168 <iprintf>
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80153e6:	e042      	b.n	801546e <icmp_input+0x23e>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	685b      	ldr	r3, [r3, #4]
 80153ec:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80153ee:	69fb      	ldr	r3, [r7, #28]
 80153f0:	681a      	ldr	r2, [r3, #0]
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80153f6:	4b26      	ldr	r3, [pc, #152]	; (8015490 <icmp_input+0x260>)
 80153f8:	691a      	ldr	r2, [r3, #16]
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80153fe:	693b      	ldr	r3, [r7, #16]
 8015400:	2200      	movs	r2, #0
 8015402:	701a      	strb	r2, [r3, #0]
        iecho->chksum = 0;
 8015404:	693b      	ldr	r3, [r7, #16]
 8015406:	2200      	movs	r2, #0
 8015408:	709a      	strb	r2, [r3, #2]
 801540a:	2200      	movs	r2, #0
 801540c:	70da      	strb	r2, [r3, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801540e:	68fb      	ldr	r3, [r7, #12]
 8015410:	22ff      	movs	r2, #255	; 0xff
 8015412:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	2200      	movs	r2, #0
 8015418:	729a      	strb	r2, [r3, #10]
 801541a:	2200      	movs	r2, #0
 801541c:	72da      	strb	r2, [r3, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801541e:	683b      	ldr	r3, [r7, #0]
 8015420:	9302      	str	r3, [sp, #8]
 8015422:	2301      	movs	r3, #1
 8015424:	9301      	str	r3, [sp, #4]
 8015426:	2300      	movs	r3, #0
 8015428:	9300      	str	r3, [sp, #0]
 801542a:	23ff      	movs	r3, #255	; 0xff
 801542c:	2200      	movs	r2, #0
 801542e:	69f9      	ldr	r1, [r7, #28]
 8015430:	6878      	ldr	r0, [r7, #4]
 8015432:	f000 fbdf 	bl	8015bf4 <ip4_output_if>
 8015436:	4603      	mov	r3, r0
 8015438:	72fb      	strb	r3, [r7, #11]
        if (ret != ERR_OK) {
 801543a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801543e:	2b00      	cmp	r3, #0
 8015440:	d015      	beq.n	801546e <icmp_input+0x23e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
 8015442:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8015446:	4618      	mov	r0, r3
 8015448:	f7f3 ff18 	bl	800927c <lwip_strerr>
 801544c:	4603      	mov	r3, r0
 801544e:	4619      	mov	r1, r3
 8015450:	4820      	ldr	r0, [pc, #128]	; (80154d4 <icmp_input+0x2a4>)
 8015452:	f001 fe89 	bl	8017168 <iprintf>
      break;
 8015456:	e00a      	b.n	801546e <icmp_input+0x23e>
      } else if (type == ICMP_AM) {
        MIB2_STATS_INC(mib2.icmpinaddrmasks);
      } else if (type == ICMP_AMR) {
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
 8015458:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801545c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8015460:	4619      	mov	r1, r3
 8015462:	481d      	ldr	r0, [pc, #116]	; (80154d8 <icmp_input+0x2a8>)
 8015464:	f001 fe80 	bl	8017168 <iprintf>
 8015468:	e002      	b.n	8015470 <icmp_input+0x240>
      break;
 801546a:	bf00      	nop
 801546c:	e000      	b.n	8015470 <icmp_input+0x240>
      break;
 801546e:	bf00      	nop
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8015470:	6878      	ldr	r0, [r7, #4]
 8015472:	f7f6 f8a7 	bl	800b5c4 <pbuf_free>
  return;
 8015476:	e007      	b.n	8015488 <icmp_input+0x258>
lenerr:
  pbuf_free(p);
 8015478:	6878      	ldr	r0, [r7, #4]
 801547a:	f7f6 f8a3 	bl	800b5c4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801547e:	e003      	b.n	8015488 <icmp_input+0x258>
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015480:	6878      	ldr	r0, [r7, #4]
 8015482:	f7f6 f89f 	bl	800b5c4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015486:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8015488:	3728      	adds	r7, #40	; 0x28
 801548a:	46bd      	mov	sp, r7
 801548c:	bd80      	pop	{r7, pc}
 801548e:	bf00      	nop
 8015490:	2000a0d0 	.word	0x2000a0d0
 8015494:	0801c6d4 	.word	0x0801c6d4
 8015498:	0801c708 	.word	0x0801c708
 801549c:	2000a0e4 	.word	0x2000a0e4
 80154a0:	0801c738 	.word	0x0801c738
 80154a4:	0801c764 	.word	0x0801c764
 80154a8:	0801c790 	.word	0x0801c790
 80154ac:	0801c7a4 	.word	0x0801c7a4
 80154b0:	0801c7c8 	.word	0x0801c7c8
 80154b4:	0801c804 	.word	0x0801c804
 80154b8:	0801c82c 	.word	0x0801c82c
 80154bc:	0801c854 	.word	0x0801c854
 80154c0:	0801c88c 	.word	0x0801c88c
 80154c4:	0801c8c4 	.word	0x0801c8c4
 80154c8:	0801c8ec 	.word	0x0801c8ec
 80154cc:	0801c914 	.word	0x0801c914
 80154d0:	0801c948 	.word	0x0801c948
 80154d4:	0801c96c 	.word	0x0801c96c
 80154d8:	0801c99c 	.word	0x0801c99c

080154dc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80154dc:	b580      	push	{r7, lr}
 80154de:	b082      	sub	sp, #8
 80154e0:	af00      	add	r7, sp, #0
 80154e2:	6078      	str	r0, [r7, #4]
 80154e4:	460b      	mov	r3, r1
 80154e6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80154e8:	78fb      	ldrb	r3, [r7, #3]
 80154ea:	461a      	mov	r2, r3
 80154ec:	2103      	movs	r1, #3
 80154ee:	6878      	ldr	r0, [r7, #4]
 80154f0:	f000 f814 	bl	801551c <icmp_send_response>
}
 80154f4:	bf00      	nop
 80154f6:	3708      	adds	r7, #8
 80154f8:	46bd      	mov	sp, r7
 80154fa:	bd80      	pop	{r7, pc}

080154fc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80154fc:	b580      	push	{r7, lr}
 80154fe:	b082      	sub	sp, #8
 8015500:	af00      	add	r7, sp, #0
 8015502:	6078      	str	r0, [r7, #4]
 8015504:	460b      	mov	r3, r1
 8015506:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015508:	78fb      	ldrb	r3, [r7, #3]
 801550a:	461a      	mov	r2, r3
 801550c:	210b      	movs	r1, #11
 801550e:	6878      	ldr	r0, [r7, #4]
 8015510:	f000 f804 	bl	801551c <icmp_send_response>
}
 8015514:	bf00      	nop
 8015516:	3708      	adds	r7, #8
 8015518:	46bd      	mov	sp, r7
 801551a:	bd80      	pop	{r7, pc}

0801551c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801551c:	b580      	push	{r7, lr}
 801551e:	b08c      	sub	sp, #48	; 0x30
 8015520:	af04      	add	r7, sp, #16
 8015522:	6078      	str	r0, [r7, #4]
 8015524:	460b      	mov	r3, r1
 8015526:	70fb      	strb	r3, [r7, #3]
 8015528:	4613      	mov	r3, r2
 801552a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801552c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015530:	2124      	movs	r1, #36	; 0x24
 8015532:	2022      	movs	r0, #34	; 0x22
 8015534:	f7f5 fd62 	bl	800affc <pbuf_alloc>
 8015538:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801553a:	69fb      	ldr	r3, [r7, #28]
 801553c:	2b00      	cmp	r3, #0
 801553e:	d103      	bne.n	8015548 <icmp_send_response+0x2c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
 8015540:	4844      	ldr	r0, [pc, #272]	; (8015654 <icmp_send_response+0x138>)
 8015542:	f001 fead 	bl	80172a0 <puts>
 8015546:	e082      	b.n	801564e <icmp_send_response+0x132>
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015548:	69fb      	ldr	r3, [r7, #28]
 801554a:	895b      	ldrh	r3, [r3, #10]
 801554c:	2b23      	cmp	r3, #35	; 0x23
 801554e:	d806      	bhi.n	801555e <icmp_send_response+0x42>
 8015550:	4b41      	ldr	r3, [pc, #260]	; (8015658 <icmp_send_response+0x13c>)
 8015552:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8015556:	4941      	ldr	r1, [pc, #260]	; (801565c <icmp_send_response+0x140>)
 8015558:	4841      	ldr	r0, [pc, #260]	; (8015660 <icmp_send_response+0x144>)
 801555a:	f001 fe05 	bl	8017168 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	685b      	ldr	r3, [r3, #4]
 8015562:	61bb      	str	r3, [r7, #24]
  LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded from "));
 8015564:	483f      	ldr	r0, [pc, #252]	; (8015664 <icmp_send_response+0x148>)
 8015566:	f001 fdff 	bl	8017168 <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
 801556a:	69bb      	ldr	r3, [r7, #24]
 801556c:	68db      	ldr	r3, [r3, #12]
 801556e:	b2db      	uxtb	r3, r3
 8015570:	4619      	mov	r1, r3
 8015572:	69bb      	ldr	r3, [r7, #24]
 8015574:	68db      	ldr	r3, [r3, #12]
 8015576:	0a1b      	lsrs	r3, r3, #8
 8015578:	b2db      	uxtb	r3, r3
 801557a:	461a      	mov	r2, r3
 801557c:	69bb      	ldr	r3, [r7, #24]
 801557e:	68db      	ldr	r3, [r3, #12]
 8015580:	0c1b      	lsrs	r3, r3, #16
 8015582:	b2db      	uxtb	r3, r3
 8015584:	4618      	mov	r0, r3
 8015586:	69bb      	ldr	r3, [r7, #24]
 8015588:	68db      	ldr	r3, [r3, #12]
 801558a:	0e1b      	lsrs	r3, r3, #24
 801558c:	b2db      	uxtb	r3, r3
 801558e:	9300      	str	r3, [sp, #0]
 8015590:	4603      	mov	r3, r0
 8015592:	4835      	ldr	r0, [pc, #212]	; (8015668 <icmp_send_response+0x14c>)
 8015594:	f001 fde8 	bl	8017168 <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
 8015598:	4834      	ldr	r0, [pc, #208]	; (801566c <icmp_send_response+0x150>)
 801559a:	f001 fde5 	bl	8017168 <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
 801559e:	69bb      	ldr	r3, [r7, #24]
 80155a0:	691b      	ldr	r3, [r3, #16]
 80155a2:	b2db      	uxtb	r3, r3
 80155a4:	4619      	mov	r1, r3
 80155a6:	69bb      	ldr	r3, [r7, #24]
 80155a8:	691b      	ldr	r3, [r3, #16]
 80155aa:	0a1b      	lsrs	r3, r3, #8
 80155ac:	b2db      	uxtb	r3, r3
 80155ae:	461a      	mov	r2, r3
 80155b0:	69bb      	ldr	r3, [r7, #24]
 80155b2:	691b      	ldr	r3, [r3, #16]
 80155b4:	0c1b      	lsrs	r3, r3, #16
 80155b6:	b2db      	uxtb	r3, r3
 80155b8:	4618      	mov	r0, r3
 80155ba:	69bb      	ldr	r3, [r7, #24]
 80155bc:	691b      	ldr	r3, [r3, #16]
 80155be:	0e1b      	lsrs	r3, r3, #24
 80155c0:	b2db      	uxtb	r3, r3
 80155c2:	9300      	str	r3, [sp, #0]
 80155c4:	4603      	mov	r3, r0
 80155c6:	4828      	ldr	r0, [pc, #160]	; (8015668 <icmp_send_response+0x14c>)
 80155c8:	f001 fdce 	bl	8017168 <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));
 80155cc:	200a      	movs	r0, #10
 80155ce:	f001 fde3 	bl	8017198 <putchar>

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80155d2:	69fb      	ldr	r3, [r7, #28]
 80155d4:	685b      	ldr	r3, [r3, #4]
 80155d6:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80155d8:	697b      	ldr	r3, [r7, #20]
 80155da:	78fa      	ldrb	r2, [r7, #3]
 80155dc:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80155de:	697b      	ldr	r3, [r7, #20]
 80155e0:	78ba      	ldrb	r2, [r7, #2]
 80155e2:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80155e4:	697b      	ldr	r3, [r7, #20]
 80155e6:	2200      	movs	r2, #0
 80155e8:	711a      	strb	r2, [r3, #4]
 80155ea:	2200      	movs	r2, #0
 80155ec:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80155ee:	697b      	ldr	r3, [r7, #20]
 80155f0:	2200      	movs	r2, #0
 80155f2:	719a      	strb	r2, [r3, #6]
 80155f4:	2200      	movs	r2, #0
 80155f6:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80155f8:	69fb      	ldr	r3, [r7, #28]
 80155fa:	685b      	ldr	r3, [r3, #4]
 80155fc:	f103 0008 	add.w	r0, r3, #8
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	685b      	ldr	r3, [r3, #4]
 8015604:	221c      	movs	r2, #28
 8015606:	4619      	mov	r1, r3
 8015608:	f001 fd98 	bl	801713c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801560c:	69bb      	ldr	r3, [r7, #24]
 801560e:	68db      	ldr	r3, [r3, #12]
 8015610:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015612:	f107 030c 	add.w	r3, r7, #12
 8015616:	4618      	mov	r0, r3
 8015618:	f000 f82a 	bl	8015670 <ip4_route>
 801561c:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801561e:	693b      	ldr	r3, [r7, #16]
 8015620:	2b00      	cmp	r3, #0
 8015622:	d011      	beq.n	8015648 <icmp_send_response+0x12c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8015624:	697b      	ldr	r3, [r7, #20]
 8015626:	2200      	movs	r2, #0
 8015628:	709a      	strb	r2, [r3, #2]
 801562a:	2200      	movs	r2, #0
 801562c:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801562e:	f107 020c 	add.w	r2, r7, #12
 8015632:	693b      	ldr	r3, [r7, #16]
 8015634:	9302      	str	r3, [sp, #8]
 8015636:	2301      	movs	r3, #1
 8015638:	9301      	str	r3, [sp, #4]
 801563a:	2300      	movs	r3, #0
 801563c:	9300      	str	r3, [sp, #0]
 801563e:	23ff      	movs	r3, #255	; 0xff
 8015640:	2100      	movs	r1, #0
 8015642:	69f8      	ldr	r0, [r7, #28]
 8015644:	f000 fad6 	bl	8015bf4 <ip4_output_if>
  }
  pbuf_free(q);
 8015648:	69f8      	ldr	r0, [r7, #28]
 801564a:	f7f5 ffbb 	bl	800b5c4 <pbuf_free>
}
 801564e:	3720      	adds	r7, #32
 8015650:	46bd      	mov	sp, r7
 8015652:	bd80      	pop	{r7, pc}
 8015654:	0801c9d0 	.word	0x0801c9d0
 8015658:	0801c854 	.word	0x0801c854
 801565c:	0801ca10 	.word	0x0801ca10
 8015660:	0801c8c4 	.word	0x0801c8c4
 8015664:	0801ca3c 	.word	0x0801ca3c
 8015668:	0801ca58 	.word	0x0801ca58
 801566c:	0801ca68 	.word	0x0801ca68

08015670 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015670:	b580      	push	{r7, lr}
 8015672:	b086      	sub	sp, #24
 8015674:	af02      	add	r7, sp, #8
 8015676:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015678:	4b3b      	ldr	r3, [pc, #236]	; (8015768 <ip4_route+0xf8>)
 801567a:	681b      	ldr	r3, [r3, #0]
 801567c:	60fb      	str	r3, [r7, #12]
 801567e:	e036      	b.n	80156ee <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015686:	f003 0301 	and.w	r3, r3, #1
 801568a:	b2db      	uxtb	r3, r3
 801568c:	2b00      	cmp	r3, #0
 801568e:	d02b      	beq.n	80156e8 <ip4_route+0x78>
 8015690:	68fb      	ldr	r3, [r7, #12]
 8015692:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015696:	089b      	lsrs	r3, r3, #2
 8015698:	f003 0301 	and.w	r3, r3, #1
 801569c:	b2db      	uxtb	r3, r3
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d022      	beq.n	80156e8 <ip4_route+0x78>
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	3304      	adds	r3, #4
 80156a6:	681b      	ldr	r3, [r3, #0]
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d01d      	beq.n	80156e8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	681a      	ldr	r2, [r3, #0]
 80156b0:	68fb      	ldr	r3, [r7, #12]
 80156b2:	3304      	adds	r3, #4
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	405a      	eors	r2, r3
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	3308      	adds	r3, #8
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	4013      	ands	r3, r2
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d101      	bne.n	80156c8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	e04b      	b.n	8015760 <ip4_route+0xf0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80156ce:	f003 0302 	and.w	r3, r3, #2
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d108      	bne.n	80156e8 <ip4_route+0x78>
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	681a      	ldr	r2, [r3, #0]
 80156da:	68fb      	ldr	r3, [r7, #12]
 80156dc:	330c      	adds	r3, #12
 80156de:	681b      	ldr	r3, [r3, #0]
 80156e0:	429a      	cmp	r2, r3
 80156e2:	d101      	bne.n	80156e8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80156e4:	68fb      	ldr	r3, [r7, #12]
 80156e6:	e03b      	b.n	8015760 <ip4_route+0xf0>
  NETIF_FOREACH(netif) {
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	681b      	ldr	r3, [r3, #0]
 80156ec:	60fb      	str	r3, [r7, #12]
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d1c5      	bne.n	8015680 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80156f4:	4b1d      	ldr	r3, [pc, #116]	; (801576c <ip4_route+0xfc>)
 80156f6:	681b      	ldr	r3, [r3, #0]
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d01a      	beq.n	8015732 <ip4_route+0xc2>
 80156fc:	4b1b      	ldr	r3, [pc, #108]	; (801576c <ip4_route+0xfc>)
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015704:	f003 0301 	and.w	r3, r3, #1
 8015708:	2b00      	cmp	r3, #0
 801570a:	d012      	beq.n	8015732 <ip4_route+0xc2>
 801570c:	4b17      	ldr	r3, [pc, #92]	; (801576c <ip4_route+0xfc>)
 801570e:	681b      	ldr	r3, [r3, #0]
 8015710:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015714:	f003 0304 	and.w	r3, r3, #4
 8015718:	2b00      	cmp	r3, #0
 801571a:	d00a      	beq.n	8015732 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801571c:	4b13      	ldr	r3, [pc, #76]	; (801576c <ip4_route+0xfc>)
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	3304      	adds	r3, #4
 8015722:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015724:	2b00      	cmp	r3, #0
 8015726:	d004      	beq.n	8015732 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	681b      	ldr	r3, [r3, #0]
 801572c:	b2db      	uxtb	r3, r3
 801572e:	2b7f      	cmp	r3, #127	; 0x7f
 8015730:	d114      	bne.n	801575c <ip4_route+0xec>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	781b      	ldrb	r3, [r3, #0]
 8015736:	4619      	mov	r1, r3
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	3301      	adds	r3, #1
 801573c:	781b      	ldrb	r3, [r3, #0]
 801573e:	461a      	mov	r2, r3
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	3302      	adds	r3, #2
 8015744:	781b      	ldrb	r3, [r3, #0]
 8015746:	4618      	mov	r0, r3
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	3303      	adds	r3, #3
 801574c:	781b      	ldrb	r3, [r3, #0]
 801574e:	9300      	str	r3, [sp, #0]
 8015750:	4603      	mov	r3, r0
 8015752:	4807      	ldr	r0, [pc, #28]	; (8015770 <ip4_route+0x100>)
 8015754:	f001 fd08 	bl	8017168 <iprintf>
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015758:	2300      	movs	r3, #0
 801575a:	e001      	b.n	8015760 <ip4_route+0xf0>
  }

  return netif_default;
 801575c:	4b03      	ldr	r3, [pc, #12]	; (801576c <ip4_route+0xfc>)
 801575e:	681b      	ldr	r3, [r3, #0]
}
 8015760:	4618      	mov	r0, r3
 8015762:	3710      	adds	r7, #16
 8015764:	46bd      	mov	sp, r7
 8015766:	bd80      	pop	{r7, pc}
 8015768:	2000d9dc 	.word	0x2000d9dc
 801576c:	2000d9e0 	.word	0x2000d9e0
 8015770:	0801ca70 	.word	0x0801ca70

08015774 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015774:	b5b0      	push	{r4, r5, r7, lr}
 8015776:	b084      	sub	sp, #16
 8015778:	af02      	add	r7, sp, #8
 801577a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: iphdr->dest 0x%"X32_F" netif->ip_addr 0x%"X32_F" (0x%"X32_F", 0x%"X32_F", 0x%"X32_F")\n",
 801577c:	4b28      	ldr	r3, [pc, #160]	; (8015820 <ip4_input_accept+0xac>)
 801577e:	6958      	ldr	r0, [r3, #20]
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	3304      	adds	r3, #4
 8015784:	681c      	ldr	r4, [r3, #0]
 8015786:	4b26      	ldr	r3, [pc, #152]	; (8015820 <ip4_input_accept+0xac>)
 8015788:	695a      	ldr	r2, [r3, #20]
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	3308      	adds	r3, #8
 801578e:	681b      	ldr	r3, [r3, #0]
 8015790:	ea02 0503 	and.w	r5, r2, r3
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	3304      	adds	r3, #4
 8015798:	681a      	ldr	r2, [r3, #0]
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	3308      	adds	r3, #8
 801579e:	681b      	ldr	r3, [r3, #0]
 80157a0:	4013      	ands	r3, r2
 80157a2:	4a1f      	ldr	r2, [pc, #124]	; (8015820 <ip4_input_accept+0xac>)
 80157a4:	6951      	ldr	r1, [r2, #20]
 80157a6:	687a      	ldr	r2, [r7, #4]
 80157a8:	3208      	adds	r2, #8
 80157aa:	6812      	ldr	r2, [r2, #0]
 80157ac:	43d2      	mvns	r2, r2
 80157ae:	400a      	ands	r2, r1
 80157b0:	9201      	str	r2, [sp, #4]
 80157b2:	9300      	str	r3, [sp, #0]
 80157b4:	462b      	mov	r3, r5
 80157b6:	4622      	mov	r2, r4
 80157b8:	4601      	mov	r1, r0
 80157ba:	481a      	ldr	r0, [pc, #104]	; (8015824 <ip4_input_accept+0xb0>)
 80157bc:	f001 fcd4 	bl	8017168 <iprintf>
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80157c6:	f003 0301 	and.w	r3, r3, #1
 80157ca:	b2db      	uxtb	r3, r3
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d021      	beq.n	8015814 <ip4_input_accept+0xa0>
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	3304      	adds	r3, #4
 80157d4:	681b      	ldr	r3, [r3, #0]
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d01c      	beq.n	8015814 <ip4_input_accept+0xa0>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80157da:	4b11      	ldr	r3, [pc, #68]	; (8015820 <ip4_input_accept+0xac>)
 80157dc:	695a      	ldr	r2, [r3, #20]
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	3304      	adds	r3, #4
 80157e2:	681b      	ldr	r3, [r3, #0]
 80157e4:	429a      	cmp	r2, r3
 80157e6:	d008      	beq.n	80157fa <ip4_input_accept+0x86>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80157e8:	4b0d      	ldr	r3, [pc, #52]	; (8015820 <ip4_input_accept+0xac>)
 80157ea:	695b      	ldr	r3, [r3, #20]
 80157ec:	6879      	ldr	r1, [r7, #4]
 80157ee:	4618      	mov	r0, r3
 80157f0:	f000 fbbe 	bl	8015f70 <ip4_addr_isbroadcast_u32>
 80157f4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d00c      	beq.n	8015814 <ip4_input_accept+0xa0>
#if LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF
        || (ip4_addr_get_u32(ip4_current_dest_addr()) == PP_HTONL(IPADDR_LOOPBACK))
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8015800:	4619      	mov	r1, r3
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8015808:	461a      	mov	r2, r3
 801580a:	4807      	ldr	r0, [pc, #28]	; (8015828 <ip4_input_accept+0xb4>)
 801580c:	f001 fcac 	bl	8017168 <iprintf>
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015810:	2301      	movs	r3, #1
 8015812:	e000      	b.n	8015816 <ip4_input_accept+0xa2>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015814:	2300      	movs	r3, #0
}
 8015816:	4618      	mov	r0, r3
 8015818:	3708      	adds	r7, #8
 801581a:	46bd      	mov	sp, r7
 801581c:	bdb0      	pop	{r4, r5, r7, pc}
 801581e:	bf00      	nop
 8015820:	2000a0d0 	.word	0x2000a0d0
 8015824:	0801ca98 	.word	0x0801ca98
 8015828:	0801cae0 	.word	0x0801cae0

0801582c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801582c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015830:	b08a      	sub	sp, #40	; 0x28
 8015832:	af02      	add	r7, sp, #8
 8015834:	6078      	str	r0, [r7, #4]
 8015836:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8015838:	2301      	movs	r3, #1
 801583a:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	685b      	ldr	r3, [r3, #4]
 8015840:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8015842:	69fb      	ldr	r3, [r7, #28]
 8015844:	781b      	ldrb	r3, [r3, #0]
 8015846:	091b      	lsrs	r3, r3, #4
 8015848:	b2db      	uxtb	r3, r3
 801584a:	2b04      	cmp	r3, #4
 801584c:	d00f      	beq.n	801586e <ip4_input+0x42>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
 801584e:	69fb      	ldr	r3, [r7, #28]
 8015850:	781b      	ldrb	r3, [r3, #0]
 8015852:	091b      	lsrs	r3, r3, #4
 8015854:	b2db      	uxtb	r3, r3
 8015856:	4619      	mov	r1, r3
 8015858:	4897      	ldr	r0, [pc, #604]	; (8015ab8 <ip4_input+0x28c>)
 801585a:	f001 fc85 	bl	8017168 <iprintf>
    ip4_debug_print(p);
 801585e:	6878      	ldr	r0, [r7, #4]
 8015860:	f000 fac2 	bl	8015de8 <ip4_debug_print>
    pbuf_free(p);
 8015864:	6878      	ldr	r0, [r7, #4]
 8015866:	f7f5 fead 	bl	800b5c4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801586a:	2300      	movs	r3, #0
 801586c:	e1b4      	b.n	8015bd8 <ip4_input+0x3ac>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801586e:	69fb      	ldr	r3, [r7, #28]
 8015870:	781b      	ldrb	r3, [r3, #0]
 8015872:	f003 030f 	and.w	r3, r3, #15
 8015876:	b2db      	uxtb	r3, r3
 8015878:	009b      	lsls	r3, r3, #2
 801587a:	b2db      	uxtb	r3, r3
 801587c:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801587e:	69fb      	ldr	r3, [r7, #28]
 8015880:	885b      	ldrh	r3, [r3, #2]
 8015882:	b29b      	uxth	r3, r3
 8015884:	4618      	mov	r0, r3
 8015886:	f7f3 febb 	bl	8009600 <lwip_htons>
 801588a:	4603      	mov	r3, r0
 801588c:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	891b      	ldrh	r3, [r3, #8]
 8015892:	8a3a      	ldrh	r2, [r7, #16]
 8015894:	429a      	cmp	r2, r3
 8015896:	d204      	bcs.n	80158a2 <ip4_input+0x76>
    pbuf_realloc(p, iphdr_len);
 8015898:	8a3b      	ldrh	r3, [r7, #16]
 801589a:	4619      	mov	r1, r3
 801589c:	6878      	ldr	r0, [r7, #4]
 801589e:	f7f5 fd0b 	bl	800b2b8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	895b      	ldrh	r3, [r3, #10]
 80158a6:	8a7a      	ldrh	r2, [r7, #18]
 80158a8:	429a      	cmp	r2, r3
 80158aa:	d807      	bhi.n	80158bc <ip4_input+0x90>
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	891b      	ldrh	r3, [r3, #8]
 80158b0:	8a3a      	ldrh	r2, [r7, #16]
 80158b2:	429a      	cmp	r2, r3
 80158b4:	d802      	bhi.n	80158bc <ip4_input+0x90>
 80158b6:	8a7b      	ldrh	r3, [r7, #18]
 80158b8:	2b13      	cmp	r3, #19
 80158ba:	d824      	bhi.n	8015906 <ip4_input+0xda>
    if (iphdr_hlen < IP_HLEN) {
 80158bc:	8a7b      	ldrh	r3, [r7, #18]
 80158be:	2b13      	cmp	r3, #19
 80158c0:	d804      	bhi.n	80158cc <ip4_input+0xa0>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 80158c2:	8a7b      	ldrh	r3, [r7, #18]
 80158c4:	4619      	mov	r1, r3
 80158c6:	487d      	ldr	r0, [pc, #500]	; (8015abc <ip4_input+0x290>)
 80158c8:	f001 fc4e 	bl	8017168 <iprintf>
                  ("ip4_input: short IP header (%"U16_F" bytes) received, IP packet dropped\n", iphdr_hlen));
    }
    if (iphdr_hlen > p->len) {
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	895b      	ldrh	r3, [r3, #10]
 80158d0:	8a7a      	ldrh	r2, [r7, #18]
 80158d2:	429a      	cmp	r2, r3
 80158d4:	d906      	bls.n	80158e4 <ip4_input+0xb8>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 80158d6:	8a79      	ldrh	r1, [r7, #18]
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	895b      	ldrh	r3, [r3, #10]
 80158dc:	461a      	mov	r2, r3
 80158de:	4878      	ldr	r0, [pc, #480]	; (8015ac0 <ip4_input+0x294>)
 80158e0:	f001 fc42 	bl	8017168 <iprintf>
                  ("IP header (len %"U16_F") does not fit in first pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_hlen, p->len));
    }
    if (iphdr_len > p->tot_len) {
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	891b      	ldrh	r3, [r3, #8]
 80158e8:	8a3a      	ldrh	r2, [r7, #16]
 80158ea:	429a      	cmp	r2, r3
 80158ec:	d906      	bls.n	80158fc <ip4_input+0xd0>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 80158ee:	8a39      	ldrh	r1, [r7, #16]
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	891b      	ldrh	r3, [r3, #8]
 80158f4:	461a      	mov	r2, r3
 80158f6:	4873      	ldr	r0, [pc, #460]	; (8015ac4 <ip4_input+0x298>)
 80158f8:	f001 fc36 	bl	8017168 <iprintf>
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80158fc:	6878      	ldr	r0, [r7, #4]
 80158fe:	f7f5 fe61 	bl	800b5c4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015902:	2300      	movs	r3, #0
 8015904:	e168      	b.n	8015bd8 <ip4_input+0x3ac>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015906:	69fb      	ldr	r3, [r7, #28]
 8015908:	691b      	ldr	r3, [r3, #16]
 801590a:	4a6f      	ldr	r2, [pc, #444]	; (8015ac8 <ip4_input+0x29c>)
 801590c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801590e:	69fb      	ldr	r3, [r7, #28]
 8015910:	68db      	ldr	r3, [r3, #12]
 8015912:	4a6d      	ldr	r2, [pc, #436]	; (8015ac8 <ip4_input+0x29c>)
 8015914:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015916:	4b6c      	ldr	r3, [pc, #432]	; (8015ac8 <ip4_input+0x29c>)
 8015918:	695b      	ldr	r3, [r3, #20]
 801591a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801591e:	2be0      	cmp	r3, #224	; 0xe0
 8015920:	d112      	bne.n	8015948 <ip4_input+0x11c>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015922:	683b      	ldr	r3, [r7, #0]
 8015924:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015928:	f003 0301 	and.w	r3, r3, #1
 801592c:	b2db      	uxtb	r3, r3
 801592e:	2b00      	cmp	r3, #0
 8015930:	d007      	beq.n	8015942 <ip4_input+0x116>
 8015932:	683b      	ldr	r3, [r7, #0]
 8015934:	3304      	adds	r3, #4
 8015936:	681b      	ldr	r3, [r3, #0]
 8015938:	2b00      	cmp	r3, #0
 801593a:	d002      	beq.n	8015942 <ip4_input+0x116>
      netif = inp;
 801593c:	683b      	ldr	r3, [r7, #0]
 801593e:	61bb      	str	r3, [r7, #24]
 8015940:	e02a      	b.n	8015998 <ip4_input+0x16c>
    } else {
      netif = NULL;
 8015942:	2300      	movs	r3, #0
 8015944:	61bb      	str	r3, [r7, #24]
 8015946:	e027      	b.n	8015998 <ip4_input+0x16c>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015948:	6838      	ldr	r0, [r7, #0]
 801594a:	f7ff ff13 	bl	8015774 <ip4_input_accept>
 801594e:	4603      	mov	r3, r0
 8015950:	2b00      	cmp	r3, #0
 8015952:	d002      	beq.n	801595a <ip4_input+0x12e>
      netif = inp;
 8015954:	683b      	ldr	r3, [r7, #0]
 8015956:	61bb      	str	r3, [r7, #24]
 8015958:	e01e      	b.n	8015998 <ip4_input+0x16c>
    } else {
      netif = NULL;
 801595a:	2300      	movs	r3, #0
 801595c:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801595e:	4b5a      	ldr	r3, [pc, #360]	; (8015ac8 <ip4_input+0x29c>)
 8015960:	695b      	ldr	r3, [r3, #20]
 8015962:	b2db      	uxtb	r3, r3
 8015964:	2b7f      	cmp	r3, #127	; 0x7f
 8015966:	d017      	beq.n	8015998 <ip4_input+0x16c>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015968:	4b58      	ldr	r3, [pc, #352]	; (8015acc <ip4_input+0x2a0>)
 801596a:	681b      	ldr	r3, [r3, #0]
 801596c:	61bb      	str	r3, [r7, #24]
 801596e:	e00e      	b.n	801598e <ip4_input+0x162>
          if (netif == inp) {
 8015970:	69ba      	ldr	r2, [r7, #24]
 8015972:	683b      	ldr	r3, [r7, #0]
 8015974:	429a      	cmp	r2, r3
 8015976:	d006      	beq.n	8015986 <ip4_input+0x15a>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015978:	69b8      	ldr	r0, [r7, #24]
 801597a:	f7ff fefb 	bl	8015774 <ip4_input_accept>
 801597e:	4603      	mov	r3, r0
 8015980:	2b00      	cmp	r3, #0
 8015982:	d108      	bne.n	8015996 <ip4_input+0x16a>
 8015984:	e000      	b.n	8015988 <ip4_input+0x15c>
            continue;
 8015986:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015988:	69bb      	ldr	r3, [r7, #24]
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	61bb      	str	r3, [r7, #24]
 801598e:	69bb      	ldr	r3, [r7, #24]
 8015990:	2b00      	cmp	r3, #0
 8015992:	d1ed      	bne.n	8015970 <ip4_input+0x144>
 8015994:	e000      	b.n	8015998 <ip4_input+0x16c>
            break;
 8015996:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8015998:	69bb      	ldr	r3, [r7, #24]
 801599a:	2b00      	cmp	r3, #0
 801599c:	d11f      	bne.n	80159de <ip4_input+0x1b2>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801599e:	69fb      	ldr	r3, [r7, #28]
 80159a0:	7a5b      	ldrb	r3, [r3, #9]
 80159a2:	2b11      	cmp	r3, #17
 80159a4:	d11b      	bne.n	80159de <ip4_input+0x1b2>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 80159a6:	8a7b      	ldrh	r3, [r7, #18]
 80159a8:	69fa      	ldr	r2, [r7, #28]
 80159aa:	4413      	add	r3, r2
 80159ac:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
 80159ae:	68fb      	ldr	r3, [r7, #12]
 80159b0:	885b      	ldrh	r3, [r3, #2]
 80159b2:	b29b      	uxth	r3, r3
 80159b4:	4618      	mov	r0, r3
 80159b6:	f7f3 fe23 	bl	8009600 <lwip_htons>
 80159ba:	4603      	mov	r3, r0
 80159bc:	4619      	mov	r1, r3
 80159be:	4844      	ldr	r0, [pc, #272]	; (8015ad0 <ip4_input+0x2a4>)
 80159c0:	f001 fbd2 	bl	8017168 <iprintf>
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80159c4:	68fb      	ldr	r3, [r7, #12]
 80159c6:	885b      	ldrh	r3, [r3, #2]
 80159c8:	b29b      	uxth	r3, r3
 80159ca:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80159ce:	d106      	bne.n	80159de <ip4_input+0x1b2>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
 80159d0:	4840      	ldr	r0, [pc, #256]	; (8015ad4 <ip4_input+0x2a8>)
 80159d2:	f001 fc65 	bl	80172a0 <puts>
        netif = inp;
 80159d6:	683b      	ldr	r3, [r7, #0]
 80159d8:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80159da:	2300      	movs	r3, #0
 80159dc:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80159de:	697b      	ldr	r3, [r7, #20]
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d01a      	beq.n	8015a1a <ip4_input+0x1ee>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80159e4:	4b38      	ldr	r3, [pc, #224]	; (8015ac8 <ip4_input+0x29c>)
 80159e6:	691b      	ldr	r3, [r3, #16]
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d016      	beq.n	8015a1a <ip4_input+0x1ee>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80159ec:	4b36      	ldr	r3, [pc, #216]	; (8015ac8 <ip4_input+0x29c>)
 80159ee:	691b      	ldr	r3, [r3, #16]
 80159f0:	6839      	ldr	r1, [r7, #0]
 80159f2:	4618      	mov	r0, r3
 80159f4:	f000 fabc 	bl	8015f70 <ip4_addr_isbroadcast_u32>
 80159f8:	4603      	mov	r3, r0
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d105      	bne.n	8015a0a <ip4_input+0x1de>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80159fe:	4b32      	ldr	r3, [pc, #200]	; (8015ac8 <ip4_input+0x29c>)
 8015a00:	691b      	ldr	r3, [r3, #16]
 8015a02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015a06:	2be0      	cmp	r3, #224	; 0xe0
 8015a08:	d107      	bne.n	8015a1a <ip4_input+0x1ee>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
 8015a0a:	4833      	ldr	r0, [pc, #204]	; (8015ad8 <ip4_input+0x2ac>)
 8015a0c:	f001 fc48 	bl	80172a0 <puts>
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015a10:	6878      	ldr	r0, [r7, #4]
 8015a12:	f7f5 fdd7 	bl	800b5c4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015a16:	2300      	movs	r3, #0
 8015a18:	e0de      	b.n	8015bd8 <ip4_input+0x3ac>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015a1a:	69bb      	ldr	r3, [r7, #24]
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d107      	bne.n	8015a30 <ip4_input+0x204>
    /* packet not for us, route or discard */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: packet not for us.\n"));
 8015a20:	482e      	ldr	r0, [pc, #184]	; (8015adc <ip4_input+0x2b0>)
 8015a22:	f001 fc3d 	bl	80172a0 <puts>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015a26:	6878      	ldr	r0, [r7, #4]
 8015a28:	f7f5 fdcc 	bl	800b5c4 <pbuf_free>
    return ERR_OK;
 8015a2c:	2300      	movs	r3, #0
 8015a2e:	e0d3      	b.n	8015bd8 <ip4_input+0x3ac>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015a30:	69fb      	ldr	r3, [r7, #28]
 8015a32:	88db      	ldrh	r3, [r3, #6]
 8015a34:	b29b      	uxth	r3, r3
 8015a36:	461a      	mov	r2, r3
 8015a38:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8015a3c:	4013      	ands	r3, r2
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d053      	beq.n	8015aea <ip4_input+0x2be>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
 8015a42:	69fb      	ldr	r3, [r7, #28]
 8015a44:	889b      	ldrh	r3, [r3, #4]
 8015a46:	b29b      	uxth	r3, r3
 8015a48:	4618      	mov	r0, r3
 8015a4a:	f7f3 fdd9 	bl	8009600 <lwip_htons>
 8015a4e:	4603      	mov	r3, r0
 8015a50:	461d      	mov	r5, r3
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	891b      	ldrh	r3, [r3, #8]
 8015a56:	461e      	mov	r6, r3
 8015a58:	69fb      	ldr	r3, [r7, #28]
 8015a5a:	885b      	ldrh	r3, [r3, #2]
 8015a5c:	b29b      	uxth	r3, r3
 8015a5e:	4618      	mov	r0, r3
 8015a60:	f7f3 fdce 	bl	8009600 <lwip_htons>
 8015a64:	4603      	mov	r3, r0
 8015a66:	4698      	mov	r8, r3
 8015a68:	69fb      	ldr	r3, [r7, #28]
 8015a6a:	88db      	ldrh	r3, [r3, #6]
 8015a6c:	b29b      	uxth	r3, r3
 8015a6e:	f003 0320 	and.w	r3, r3, #32
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	bf14      	ite	ne
 8015a76:	2301      	movne	r3, #1
 8015a78:	2300      	moveq	r3, #0
 8015a7a:	b2db      	uxtb	r3, r3
 8015a7c:	461c      	mov	r4, r3
 8015a7e:	69fb      	ldr	r3, [r7, #28]
 8015a80:	88db      	ldrh	r3, [r3, #6]
 8015a82:	b29b      	uxth	r3, r3
 8015a84:	4618      	mov	r0, r3
 8015a86:	f7f3 fdbb 	bl	8009600 <lwip_htons>
 8015a8a:	4603      	mov	r3, r0
 8015a8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015a90:	b29b      	uxth	r3, r3
 8015a92:	00db      	lsls	r3, r3, #3
 8015a94:	b29b      	uxth	r3, r3
 8015a96:	9301      	str	r3, [sp, #4]
 8015a98:	9400      	str	r4, [sp, #0]
 8015a9a:	4643      	mov	r3, r8
 8015a9c:	4632      	mov	r2, r6
 8015a9e:	4629      	mov	r1, r5
 8015aa0:	480f      	ldr	r0, [pc, #60]	; (8015ae0 <ip4_input+0x2b4>)
 8015aa2:	f001 fb61 	bl	8017168 <iprintf>
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015aa6:	6878      	ldr	r0, [r7, #4]
 8015aa8:	f000 fda8 	bl	80165fc <ip4_reass>
 8015aac:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	d117      	bne.n	8015ae4 <ip4_input+0x2b8>
      return ERR_OK;
 8015ab4:	2300      	movs	r3, #0
 8015ab6:	e08f      	b.n	8015bd8 <ip4_input+0x3ac>
 8015ab8:	0801cb10 	.word	0x0801cb10
 8015abc:	0801cb44 	.word	0x0801cb44
 8015ac0:	0801cb88 	.word	0x0801cb88
 8015ac4:	0801cbd8 	.word	0x0801cbd8
 8015ac8:	2000a0d0 	.word	0x2000a0d0
 8015acc:	2000d9dc 	.word	0x2000d9dc
 8015ad0:	0801cc18 	.word	0x0801cc18
 8015ad4:	0801cc48 	.word	0x0801cc48
 8015ad8:	0801cc6c 	.word	0x0801cc6c
 8015adc:	0801cc94 	.word	0x0801cc94
 8015ae0:	0801ccb4 	.word	0x0801ccb4
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	685b      	ldr	r3, [r3, #4]
 8015ae8:	61fb      	str	r3, [r7, #28]
    return ERR_OK;
  }
#endif /* IP_OPTIONS_ALLOWED == 0 */

  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
 8015aea:	483e      	ldr	r0, [pc, #248]	; (8015be4 <ip4_input+0x3b8>)
 8015aec:	f001 fbd8 	bl	80172a0 <puts>
  ip4_debug_print(p);
 8015af0:	6878      	ldr	r0, [r7, #4]
 8015af2:	f000 f979 	bl	8015de8 <ip4_debug_print>
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	895b      	ldrh	r3, [r3, #10]
 8015afa:	4619      	mov	r1, r3
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	891b      	ldrh	r3, [r3, #8]
 8015b00:	461a      	mov	r2, r3
 8015b02:	4839      	ldr	r0, [pc, #228]	; (8015be8 <ip4_input+0x3bc>)
 8015b04:	f001 fb30 	bl	8017168 <iprintf>

  ip_data.current_netif = netif;
 8015b08:	4a38      	ldr	r2, [pc, #224]	; (8015bec <ip4_input+0x3c0>)
 8015b0a:	69bb      	ldr	r3, [r7, #24]
 8015b0c:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015b0e:	4a37      	ldr	r2, [pc, #220]	; (8015bec <ip4_input+0x3c0>)
 8015b10:	683b      	ldr	r3, [r7, #0]
 8015b12:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015b14:	4a35      	ldr	r2, [pc, #212]	; (8015bec <ip4_input+0x3c0>)
 8015b16:	69fb      	ldr	r3, [r7, #28]
 8015b18:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015b1a:	69fb      	ldr	r3, [r7, #28]
 8015b1c:	781b      	ldrb	r3, [r3, #0]
 8015b1e:	f003 030f 	and.w	r3, r3, #15
 8015b22:	b2db      	uxtb	r3, r3
 8015b24:	009b      	lsls	r3, r3, #2
 8015b26:	b2db      	uxtb	r3, r3
 8015b28:	b29a      	uxth	r2, r3
 8015b2a:	4b30      	ldr	r3, [pc, #192]	; (8015bec <ip4_input+0x3c0>)
 8015b2c:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015b2e:	8a7b      	ldrh	r3, [r7, #18]
 8015b30:	4619      	mov	r1, r3
 8015b32:	6878      	ldr	r0, [r7, #4]
 8015b34:	f7f5 fcc0 	bl	800b4b8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015b38:	69fb      	ldr	r3, [r7, #28]
 8015b3a:	7a5b      	ldrb	r3, [r3, #9]
 8015b3c:	2b11      	cmp	r3, #17
 8015b3e:	d006      	beq.n	8015b4e <ip4_input+0x322>
 8015b40:	2b11      	cmp	r3, #17
 8015b42:	dc13      	bgt.n	8015b6c <ip4_input+0x340>
 8015b44:	2b01      	cmp	r3, #1
 8015b46:	d00c      	beq.n	8015b62 <ip4_input+0x336>
 8015b48:	2b06      	cmp	r3, #6
 8015b4a:	d005      	beq.n	8015b58 <ip4_input+0x32c>
 8015b4c:	e00e      	b.n	8015b6c <ip4_input+0x340>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015b4e:	6839      	ldr	r1, [r7, #0]
 8015b50:	6878      	ldr	r0, [r7, #4]
 8015b52:	f7fb fcf1 	bl	8011538 <udp_input>
        break;
 8015b56:	e02c      	b.n	8015bb2 <ip4_input+0x386>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015b58:	6839      	ldr	r1, [r7, #0]
 8015b5a:	6878      	ldr	r0, [r7, #4]
 8015b5c:	f7f7 fcd6 	bl	800d50c <tcp_input>
        break;
 8015b60:	e027      	b.n	8015bb2 <ip4_input+0x386>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015b62:	6839      	ldr	r1, [r7, #0]
 8015b64:	6878      	ldr	r0, [r7, #4]
 8015b66:	f7ff fb63 	bl	8015230 <icmp_input>
        break;
 8015b6a:	e022      	b.n	8015bb2 <ip4_input+0x386>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015b6c:	4b1f      	ldr	r3, [pc, #124]	; (8015bec <ip4_input+0x3c0>)
 8015b6e:	695b      	ldr	r3, [r3, #20]
 8015b70:	69b9      	ldr	r1, [r7, #24]
 8015b72:	4618      	mov	r0, r3
 8015b74:	f000 f9fc 	bl	8015f70 <ip4_addr_isbroadcast_u32>
 8015b78:	4603      	mov	r3, r0
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d10f      	bne.n	8015b9e <ip4_input+0x372>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015b7e:	4b1b      	ldr	r3, [pc, #108]	; (8015bec <ip4_input+0x3c0>)
 8015b80:	695b      	ldr	r3, [r3, #20]
 8015b82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015b86:	2be0      	cmp	r3, #224	; 0xe0
 8015b88:	d009      	beq.n	8015b9e <ip4_input+0x372>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015b8a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015b8e:	4619      	mov	r1, r3
 8015b90:	6878      	ldr	r0, [r7, #4]
 8015b92:	f7f5 fd04 	bl	800b59e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015b96:	2102      	movs	r1, #2
 8015b98:	6878      	ldr	r0, [r7, #4]
 8015b9a:	f7ff fc9f 	bl	80154dc <icmp_dest_unreach>
          }
#endif /* LWIP_ICMP */

          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));
 8015b9e:	69fb      	ldr	r3, [r7, #28]
 8015ba0:	7a5b      	ldrb	r3, [r3, #9]
 8015ba2:	4619      	mov	r1, r3
 8015ba4:	4812      	ldr	r0, [pc, #72]	; (8015bf0 <ip4_input+0x3c4>)
 8015ba6:	f001 fadf 	bl	8017168 <iprintf>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015baa:	6878      	ldr	r0, [r7, #4]
 8015bac:	f7f5 fd0a 	bl	800b5c4 <pbuf_free>
        break;
 8015bb0:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015bb2:	4b0e      	ldr	r3, [pc, #56]	; (8015bec <ip4_input+0x3c0>)
 8015bb4:	2200      	movs	r2, #0
 8015bb6:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015bb8:	4b0c      	ldr	r3, [pc, #48]	; (8015bec <ip4_input+0x3c0>)
 8015bba:	2200      	movs	r2, #0
 8015bbc:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015bbe:	4b0b      	ldr	r3, [pc, #44]	; (8015bec <ip4_input+0x3c0>)
 8015bc0:	2200      	movs	r2, #0
 8015bc2:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015bc4:	4b09      	ldr	r3, [pc, #36]	; (8015bec <ip4_input+0x3c0>)
 8015bc6:	2200      	movs	r2, #0
 8015bc8:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015bca:	4b08      	ldr	r3, [pc, #32]	; (8015bec <ip4_input+0x3c0>)
 8015bcc:	2200      	movs	r2, #0
 8015bce:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015bd0:	4b06      	ldr	r3, [pc, #24]	; (8015bec <ip4_input+0x3c0>)
 8015bd2:	2200      	movs	r2, #0
 8015bd4:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015bd6:	2300      	movs	r3, #0
}
 8015bd8:	4618      	mov	r0, r3
 8015bda:	3720      	adds	r7, #32
 8015bdc:	46bd      	mov	sp, r7
 8015bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015be2:	bf00      	nop
 8015be4:	0801cd18 	.word	0x0801cd18
 8015be8:	0801cd24 	.word	0x0801cd24
 8015bec:	2000a0d0 	.word	0x2000a0d0
 8015bf0:	0801cd4c 	.word	0x0801cd4c

08015bf4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015bf4:	b580      	push	{r7, lr}
 8015bf6:	b08a      	sub	sp, #40	; 0x28
 8015bf8:	af04      	add	r7, sp, #16
 8015bfa:	60f8      	str	r0, [r7, #12]
 8015bfc:	60b9      	str	r1, [r7, #8]
 8015bfe:	607a      	str	r2, [r7, #4]
 8015c00:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015c02:	68bb      	ldr	r3, [r7, #8]
 8015c04:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d009      	beq.n	8015c20 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015c0c:	68bb      	ldr	r3, [r7, #8]
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d003      	beq.n	8015c1a <ip4_output_if+0x26>
 8015c12:	68bb      	ldr	r3, [r7, #8]
 8015c14:	681b      	ldr	r3, [r3, #0]
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d102      	bne.n	8015c20 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c1c:	3304      	adds	r3, #4
 8015c1e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015c20:	78fa      	ldrb	r2, [r7, #3]
 8015c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c24:	9302      	str	r3, [sp, #8]
 8015c26:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015c2a:	9301      	str	r3, [sp, #4]
 8015c2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015c30:	9300      	str	r3, [sp, #0]
 8015c32:	4613      	mov	r3, r2
 8015c34:	687a      	ldr	r2, [r7, #4]
 8015c36:	6979      	ldr	r1, [r7, #20]
 8015c38:	68f8      	ldr	r0, [r7, #12]
 8015c3a:	f000 f805 	bl	8015c48 <ip4_output_if_src>
 8015c3e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015c40:	4618      	mov	r0, r3
 8015c42:	3718      	adds	r7, #24
 8015c44:	46bd      	mov	sp, r7
 8015c46:	bd80      	pop	{r7, pc}

08015c48 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015c48:	b580      	push	{r7, lr}
 8015c4a:	b088      	sub	sp, #32
 8015c4c:	af00      	add	r7, sp, #0
 8015c4e:	60f8      	str	r0, [r7, #12]
 8015c50:	60b9      	str	r1, [r7, #8]
 8015c52:	607a      	str	r2, [r7, #4]
 8015c54:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015c56:	68fb      	ldr	r3, [r7, #12]
 8015c58:	7b9b      	ldrb	r3, [r3, #14]
 8015c5a:	2b01      	cmp	r3, #1
 8015c5c:	d006      	beq.n	8015c6c <ip4_output_if_src+0x24>
 8015c5e:	4b58      	ldr	r3, [pc, #352]	; (8015dc0 <ip4_output_if_src+0x178>)
 8015c60:	f44f 7255 	mov.w	r2, #852	; 0x354
 8015c64:	4957      	ldr	r1, [pc, #348]	; (8015dc4 <ip4_output_if_src+0x17c>)
 8015c66:	4858      	ldr	r0, [pc, #352]	; (8015dc8 <ip4_output_if_src+0x180>)
 8015c68:	f001 fa7e 	bl	8017168 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d063      	beq.n	8015d3a <ip4_output_if_src+0xf2>
    u16_t ip_hlen = IP_HLEN;
 8015c72:	2314      	movs	r3, #20
 8015c74:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8015c76:	2114      	movs	r1, #20
 8015c78:	68f8      	ldr	r0, [r7, #12]
 8015c7a:	f7f5 fc0d 	bl	800b498 <pbuf_add_header>
 8015c7e:	4603      	mov	r3, r0
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d005      	beq.n	8015c90 <ip4_output_if_src+0x48>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));
 8015c84:	4851      	ldr	r0, [pc, #324]	; (8015dcc <ip4_output_if_src+0x184>)
 8015c86:	f001 fb0b 	bl	80172a0 <puts>

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015c8a:	f06f 0301 	mvn.w	r3, #1
 8015c8e:	e093      	b.n	8015db8 <ip4_output_if_src+0x170>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015c90:	68fb      	ldr	r3, [r7, #12]
 8015c92:	685b      	ldr	r3, [r3, #4]
 8015c94:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	895b      	ldrh	r3, [r3, #10]
 8015c9a:	2b13      	cmp	r3, #19
 8015c9c:	d806      	bhi.n	8015cac <ip4_output_if_src+0x64>
 8015c9e:	4b48      	ldr	r3, [pc, #288]	; (8015dc0 <ip4_output_if_src+0x178>)
 8015ca0:	f44f 7262 	mov.w	r2, #904	; 0x388
 8015ca4:	494a      	ldr	r1, [pc, #296]	; (8015dd0 <ip4_output_if_src+0x188>)
 8015ca6:	4848      	ldr	r0, [pc, #288]	; (8015dc8 <ip4_output_if_src+0x180>)
 8015ca8:	f001 fa5e 	bl	8017168 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015cac:	69fb      	ldr	r3, [r7, #28]
 8015cae:	78fa      	ldrb	r2, [r7, #3]
 8015cb0:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015cb2:	69fb      	ldr	r3, [r7, #28]
 8015cb4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015cb8:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	681a      	ldr	r2, [r3, #0]
 8015cbe:	69fb      	ldr	r3, [r7, #28]
 8015cc0:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015cc2:	8b7b      	ldrh	r3, [r7, #26]
 8015cc4:	089b      	lsrs	r3, r3, #2
 8015cc6:	b29b      	uxth	r3, r3
 8015cc8:	b2db      	uxtb	r3, r3
 8015cca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015cce:	b2da      	uxtb	r2, r3
 8015cd0:	69fb      	ldr	r3, [r7, #28]
 8015cd2:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015cd4:	69fb      	ldr	r3, [r7, #28]
 8015cd6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015cda:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	891b      	ldrh	r3, [r3, #8]
 8015ce0:	4618      	mov	r0, r3
 8015ce2:	f7f3 fc8d 	bl	8009600 <lwip_htons>
 8015ce6:	4603      	mov	r3, r0
 8015ce8:	461a      	mov	r2, r3
 8015cea:	69fb      	ldr	r3, [r7, #28]
 8015cec:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015cee:	69fb      	ldr	r3, [r7, #28]
 8015cf0:	2200      	movs	r2, #0
 8015cf2:	719a      	strb	r2, [r3, #6]
 8015cf4:	2200      	movs	r2, #0
 8015cf6:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015cf8:	4b36      	ldr	r3, [pc, #216]	; (8015dd4 <ip4_output_if_src+0x18c>)
 8015cfa:	881b      	ldrh	r3, [r3, #0]
 8015cfc:	4618      	mov	r0, r3
 8015cfe:	f7f3 fc7f 	bl	8009600 <lwip_htons>
 8015d02:	4603      	mov	r3, r0
 8015d04:	461a      	mov	r2, r3
 8015d06:	69fb      	ldr	r3, [r7, #28]
 8015d08:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015d0a:	4b32      	ldr	r3, [pc, #200]	; (8015dd4 <ip4_output_if_src+0x18c>)
 8015d0c:	881b      	ldrh	r3, [r3, #0]
 8015d0e:	3301      	adds	r3, #1
 8015d10:	b29a      	uxth	r2, r3
 8015d12:	4b30      	ldr	r3, [pc, #192]	; (8015dd4 <ip4_output_if_src+0x18c>)
 8015d14:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015d16:	68bb      	ldr	r3, [r7, #8]
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d104      	bne.n	8015d26 <ip4_output_if_src+0xde>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015d1c:	4b2e      	ldr	r3, [pc, #184]	; (8015dd8 <ip4_output_if_src+0x190>)
 8015d1e:	681a      	ldr	r2, [r3, #0]
 8015d20:	69fb      	ldr	r3, [r7, #28]
 8015d22:	60da      	str	r2, [r3, #12]
 8015d24:	e003      	b.n	8015d2e <ip4_output_if_src+0xe6>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015d26:	68bb      	ldr	r3, [r7, #8]
 8015d28:	681a      	ldr	r2, [r3, #0]
 8015d2a:	69fb      	ldr	r3, [r7, #28]
 8015d2c:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015d2e:	69fb      	ldr	r3, [r7, #28]
 8015d30:	2200      	movs	r2, #0
 8015d32:	729a      	strb	r2, [r3, #10]
 8015d34:	2200      	movs	r2, #0
 8015d36:	72da      	strb	r2, [r3, #11]
 8015d38:	e012      	b.n	8015d60 <ip4_output_if_src+0x118>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015d3a:	68fb      	ldr	r3, [r7, #12]
 8015d3c:	895b      	ldrh	r3, [r3, #10]
 8015d3e:	2b13      	cmp	r3, #19
 8015d40:	d805      	bhi.n	8015d4e <ip4_output_if_src+0x106>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
 8015d42:	4826      	ldr	r0, [pc, #152]	; (8015ddc <ip4_output_if_src+0x194>)
 8015d44:	f001 faac 	bl	80172a0 <puts>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015d48:	f06f 0301 	mvn.w	r3, #1
 8015d4c:	e034      	b.n	8015db8 <ip4_output_if_src+0x170>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015d4e:	68fb      	ldr	r3, [r7, #12]
 8015d50:	685b      	ldr	r3, [r3, #4]
 8015d52:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015d54:	69fb      	ldr	r3, [r7, #28]
 8015d56:	691b      	ldr	r3, [r3, #16]
 8015d58:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015d5a:	f107 0314 	add.w	r3, r7, #20
 8015d5e:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
 8015d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d62:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8015d66:	4619      	mov	r1, r3
 8015d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d6a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8015d6e:	461a      	mov	r2, r3
 8015d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015d76:	481a      	ldr	r0, [pc, #104]	; (8015de0 <ip4_output_if_src+0x198>)
 8015d78:	f001 f9f6 	bl	8017168 <iprintf>
  ip4_debug_print(p);
 8015d7c:	68f8      	ldr	r0, [r7, #12]
 8015d7e:	f000 f833 	bl	8015de8 <ip4_debug_print>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d00c      	beq.n	8015da4 <ip4_output_if_src+0x15c>
 8015d8a:	68fb      	ldr	r3, [r7, #12]
 8015d8c:	891a      	ldrh	r2, [r3, #8]
 8015d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015d92:	429a      	cmp	r2, r3
 8015d94:	d906      	bls.n	8015da4 <ip4_output_if_src+0x15c>
    return ip4_frag(p, netif, dest);
 8015d96:	687a      	ldr	r2, [r7, #4]
 8015d98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015d9a:	68f8      	ldr	r0, [r7, #12]
 8015d9c:	f000 fe22 	bl	80169e4 <ip4_frag>
 8015da0:	4603      	mov	r3, r0
 8015da2:	e009      	b.n	8015db8 <ip4_output_if_src+0x170>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
 8015da4:	480f      	ldr	r0, [pc, #60]	; (8015de4 <ip4_output_if_src+0x19c>)
 8015da6:	f001 fa7b 	bl	80172a0 <puts>
  return netif->output(netif, p, dest);
 8015daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dac:	695b      	ldr	r3, [r3, #20]
 8015dae:	687a      	ldr	r2, [r7, #4]
 8015db0:	68f9      	ldr	r1, [r7, #12]
 8015db2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015db4:	4798      	blx	r3
 8015db6:	4603      	mov	r3, r0
}
 8015db8:	4618      	mov	r0, r3
 8015dba:	3720      	adds	r7, #32
 8015dbc:	46bd      	mov	sp, r7
 8015dbe:	bd80      	pop	{r7, pc}
 8015dc0:	0801cd70 	.word	0x0801cd70
 8015dc4:	0801cda4 	.word	0x0801cda4
 8015dc8:	0801cdb0 	.word	0x0801cdb0
 8015dcc:	0801cdd8 	.word	0x0801cdd8
 8015dd0:	0801ce0c 	.word	0x0801ce0c
 8015dd4:	2000db7e 	.word	0x2000db7e
 8015dd8:	0801d628 	.word	0x0801d628
 8015ddc:	0801ce3c 	.word	0x0801ce3c
 8015de0:	0801ce70 	.word	0x0801ce70
 8015de4:	0801ce88 	.word	0x0801ce88

08015de8 <ip4_debug_print>:
/* Print an IP header by using LWIP_DEBUGF
 * @param p an IP packet, p->payload pointing to the IP header
 */
void
ip4_debug_print(struct pbuf *p)
{
 8015de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015dec:	b086      	sub	sp, #24
 8015dee:	af02      	add	r7, sp, #8
 8015df0:	6078      	str	r0, [r7, #4]
  struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	685b      	ldr	r3, [r3, #4]
 8015df6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(IP_DEBUG, ("IP header:\n"));
 8015df8:	4856      	ldr	r0, [pc, #344]	; (8015f54 <ip4_debug_print+0x16c>)
 8015dfa:	f001 fa51 	bl	80172a0 <puts>
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 8015dfe:	4856      	ldr	r0, [pc, #344]	; (8015f58 <ip4_debug_print+0x170>)
 8015e00:	f001 fa4e 	bl	80172a0 <puts>
  LWIP_DEBUGF(IP_DEBUG, ("|%2"S16_F" |%2"S16_F" |  0x%02"X16_F" |     %5"U16_F"     | (v, hl, tos, len)\n",
 8015e04:	68fb      	ldr	r3, [r7, #12]
 8015e06:	781b      	ldrb	r3, [r3, #0]
 8015e08:	091b      	lsrs	r3, r3, #4
 8015e0a:	b2db      	uxtb	r3, r3
 8015e0c:	461d      	mov	r5, r3
 8015e0e:	68fb      	ldr	r3, [r7, #12]
 8015e10:	781b      	ldrb	r3, [r3, #0]
 8015e12:	f003 040f 	and.w	r4, r3, #15
 8015e16:	68fb      	ldr	r3, [r7, #12]
 8015e18:	785b      	ldrb	r3, [r3, #1]
 8015e1a:	461e      	mov	r6, r3
 8015e1c:	68fb      	ldr	r3, [r7, #12]
 8015e1e:	885b      	ldrh	r3, [r3, #2]
 8015e20:	b29b      	uxth	r3, r3
 8015e22:	4618      	mov	r0, r3
 8015e24:	f7f3 fbec 	bl	8009600 <lwip_htons>
 8015e28:	4603      	mov	r3, r0
 8015e2a:	9300      	str	r3, [sp, #0]
 8015e2c:	4633      	mov	r3, r6
 8015e2e:	4622      	mov	r2, r4
 8015e30:	4629      	mov	r1, r5
 8015e32:	484a      	ldr	r0, [pc, #296]	; (8015f5c <ip4_debug_print+0x174>)
 8015e34:	f001 f998 	bl	8017168 <iprintf>
                         (u16_t)IPH_V(iphdr),
                         (u16_t)IPH_HL(iphdr),
                         (u16_t)IPH_TOS(iphdr),
                         lwip_ntohs(IPH_LEN(iphdr))));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 8015e38:	4847      	ldr	r0, [pc, #284]	; (8015f58 <ip4_debug_print+0x170>)
 8015e3a:	f001 fa31 	bl	80172a0 <puts>
  LWIP_DEBUGF(IP_DEBUG, ("|    %5"U16_F"      |%"U16_F"%"U16_F"%"U16_F"|    %4"U16_F"   | (id, flags, offset)\n",
 8015e3e:	68fb      	ldr	r3, [r7, #12]
 8015e40:	889b      	ldrh	r3, [r3, #4]
 8015e42:	b29b      	uxth	r3, r3
 8015e44:	4618      	mov	r0, r3
 8015e46:	f7f3 fbdb 	bl	8009600 <lwip_htons>
 8015e4a:	4603      	mov	r3, r0
 8015e4c:	4698      	mov	r8, r3
 8015e4e:	68fb      	ldr	r3, [r7, #12]
 8015e50:	88db      	ldrh	r3, [r3, #6]
 8015e52:	b29b      	uxth	r3, r3
 8015e54:	4618      	mov	r0, r3
 8015e56:	f7f3 fbd3 	bl	8009600 <lwip_htons>
 8015e5a:	4603      	mov	r3, r0
 8015e5c:	0bdb      	lsrs	r3, r3, #15
 8015e5e:	b29b      	uxth	r3, r3
 8015e60:	f003 0501 	and.w	r5, r3, #1
 8015e64:	68fb      	ldr	r3, [r7, #12]
 8015e66:	88db      	ldrh	r3, [r3, #6]
 8015e68:	b29b      	uxth	r3, r3
 8015e6a:	4618      	mov	r0, r3
 8015e6c:	f7f3 fbc8 	bl	8009600 <lwip_htons>
 8015e70:	4603      	mov	r3, r0
 8015e72:	0b9b      	lsrs	r3, r3, #14
 8015e74:	b29b      	uxth	r3, r3
 8015e76:	f003 0601 	and.w	r6, r3, #1
 8015e7a:	68fb      	ldr	r3, [r7, #12]
 8015e7c:	88db      	ldrh	r3, [r3, #6]
 8015e7e:	b29b      	uxth	r3, r3
 8015e80:	4618      	mov	r0, r3
 8015e82:	f7f3 fbbd 	bl	8009600 <lwip_htons>
 8015e86:	4603      	mov	r3, r0
 8015e88:	0b5b      	lsrs	r3, r3, #13
 8015e8a:	b29b      	uxth	r3, r3
 8015e8c:	f003 0401 	and.w	r4, r3, #1
 8015e90:	68fb      	ldr	r3, [r7, #12]
 8015e92:	88db      	ldrh	r3, [r3, #6]
 8015e94:	b29b      	uxth	r3, r3
 8015e96:	4618      	mov	r0, r3
 8015e98:	f7f3 fbb2 	bl	8009600 <lwip_htons>
 8015e9c:	4603      	mov	r3, r0
 8015e9e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015ea2:	9301      	str	r3, [sp, #4]
 8015ea4:	9400      	str	r4, [sp, #0]
 8015ea6:	4633      	mov	r3, r6
 8015ea8:	462a      	mov	r2, r5
 8015eaa:	4641      	mov	r1, r8
 8015eac:	482c      	ldr	r0, [pc, #176]	; (8015f60 <ip4_debug_print+0x178>)
 8015eae:	f001 f95b 	bl	8017168 <iprintf>
                         lwip_ntohs(IPH_ID(iphdr)),
                         (u16_t)(lwip_ntohs(IPH_OFFSET(iphdr)) >> 15 & 1),
                         (u16_t)(lwip_ntohs(IPH_OFFSET(iphdr)) >> 14 & 1),
                         (u16_t)(lwip_ntohs(IPH_OFFSET(iphdr)) >> 13 & 1),
                         (u16_t)(lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 8015eb2:	4829      	ldr	r0, [pc, #164]	; (8015f58 <ip4_debug_print+0x170>)
 8015eb4:	f001 f9f4 	bl	80172a0 <puts>
  LWIP_DEBUGF(IP_DEBUG, ("|  %3"U16_F"  |  %3"U16_F"  |    0x%04"X16_F"     | (ttl, proto, chksum)\n",
 8015eb8:	68fb      	ldr	r3, [r7, #12]
 8015eba:	7a1b      	ldrb	r3, [r3, #8]
 8015ebc:	461c      	mov	r4, r3
 8015ebe:	68fb      	ldr	r3, [r7, #12]
 8015ec0:	7a5b      	ldrb	r3, [r3, #9]
 8015ec2:	461d      	mov	r5, r3
 8015ec4:	68fb      	ldr	r3, [r7, #12]
 8015ec6:	895b      	ldrh	r3, [r3, #10]
 8015ec8:	b29b      	uxth	r3, r3
 8015eca:	4618      	mov	r0, r3
 8015ecc:	f7f3 fb98 	bl	8009600 <lwip_htons>
 8015ed0:	4603      	mov	r3, r0
 8015ed2:	462a      	mov	r2, r5
 8015ed4:	4621      	mov	r1, r4
 8015ed6:	4823      	ldr	r0, [pc, #140]	; (8015f64 <ip4_debug_print+0x17c>)
 8015ed8:	f001 f946 	bl	8017168 <iprintf>
                         (u16_t)IPH_TTL(iphdr),
                         (u16_t)IPH_PROTO(iphdr),
                         lwip_ntohs(IPH_CHKSUM(iphdr))));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 8015edc:	481e      	ldr	r0, [pc, #120]	; (8015f58 <ip4_debug_print+0x170>)
 8015ede:	f001 f9df 	bl	80172a0 <puts>
  LWIP_DEBUGF(IP_DEBUG, ("|  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  | (src)\n",
 8015ee2:	68fb      	ldr	r3, [r7, #12]
 8015ee4:	68db      	ldr	r3, [r3, #12]
 8015ee6:	b2db      	uxtb	r3, r3
 8015ee8:	4619      	mov	r1, r3
 8015eea:	68fb      	ldr	r3, [r7, #12]
 8015eec:	68db      	ldr	r3, [r3, #12]
 8015eee:	0a1b      	lsrs	r3, r3, #8
 8015ef0:	b2db      	uxtb	r3, r3
 8015ef2:	461a      	mov	r2, r3
 8015ef4:	68fb      	ldr	r3, [r7, #12]
 8015ef6:	68db      	ldr	r3, [r3, #12]
 8015ef8:	0c1b      	lsrs	r3, r3, #16
 8015efa:	b2db      	uxtb	r3, r3
 8015efc:	4618      	mov	r0, r3
 8015efe:	68fb      	ldr	r3, [r7, #12]
 8015f00:	68db      	ldr	r3, [r3, #12]
 8015f02:	0e1b      	lsrs	r3, r3, #24
 8015f04:	b2db      	uxtb	r3, r3
 8015f06:	9300      	str	r3, [sp, #0]
 8015f08:	4603      	mov	r3, r0
 8015f0a:	4817      	ldr	r0, [pc, #92]	; (8015f68 <ip4_debug_print+0x180>)
 8015f0c:	f001 f92c 	bl	8017168 <iprintf>
                         ip4_addr1_16_val(iphdr->src),
                         ip4_addr2_16_val(iphdr->src),
                         ip4_addr3_16_val(iphdr->src),
                         ip4_addr4_16_val(iphdr->src)));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 8015f10:	4811      	ldr	r0, [pc, #68]	; (8015f58 <ip4_debug_print+0x170>)
 8015f12:	f001 f9c5 	bl	80172a0 <puts>
  LWIP_DEBUGF(IP_DEBUG, ("|  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  | (dest)\n",
 8015f16:	68fb      	ldr	r3, [r7, #12]
 8015f18:	691b      	ldr	r3, [r3, #16]
 8015f1a:	b2db      	uxtb	r3, r3
 8015f1c:	4619      	mov	r1, r3
 8015f1e:	68fb      	ldr	r3, [r7, #12]
 8015f20:	691b      	ldr	r3, [r3, #16]
 8015f22:	0a1b      	lsrs	r3, r3, #8
 8015f24:	b2db      	uxtb	r3, r3
 8015f26:	461a      	mov	r2, r3
 8015f28:	68fb      	ldr	r3, [r7, #12]
 8015f2a:	691b      	ldr	r3, [r3, #16]
 8015f2c:	0c1b      	lsrs	r3, r3, #16
 8015f2e:	b2db      	uxtb	r3, r3
 8015f30:	4618      	mov	r0, r3
 8015f32:	68fb      	ldr	r3, [r7, #12]
 8015f34:	691b      	ldr	r3, [r3, #16]
 8015f36:	0e1b      	lsrs	r3, r3, #24
 8015f38:	b2db      	uxtb	r3, r3
 8015f3a:	9300      	str	r3, [sp, #0]
 8015f3c:	4603      	mov	r3, r0
 8015f3e:	480b      	ldr	r0, [pc, #44]	; (8015f6c <ip4_debug_print+0x184>)
 8015f40:	f001 f912 	bl	8017168 <iprintf>
                         ip4_addr1_16_val(iphdr->dest),
                         ip4_addr2_16_val(iphdr->dest),
                         ip4_addr3_16_val(iphdr->dest),
                         ip4_addr4_16_val(iphdr->dest)));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 8015f44:	4804      	ldr	r0, [pc, #16]	; (8015f58 <ip4_debug_print+0x170>)
 8015f46:	f001 f9ab 	bl	80172a0 <puts>
}
 8015f4a:	bf00      	nop
 8015f4c:	3710      	adds	r7, #16
 8015f4e:	46bd      	mov	sp, r7
 8015f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f54:	0801ced8 	.word	0x0801ced8
 8015f58:	0801cee4 	.word	0x0801cee4
 8015f5c:	0801cf08 	.word	0x0801cf08
 8015f60:	0801cf44 	.word	0x0801cf44
 8015f64:	0801cf80 	.word	0x0801cf80
 8015f68:	0801cfbc 	.word	0x0801cfbc
 8015f6c:	0801cfec 	.word	0x0801cfec

08015f70 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015f70:	b480      	push	{r7}
 8015f72:	b085      	sub	sp, #20
 8015f74:	af00      	add	r7, sp, #0
 8015f76:	6078      	str	r0, [r7, #4]
 8015f78:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f84:	d002      	beq.n	8015f8c <ip4_addr_isbroadcast_u32+0x1c>
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d101      	bne.n	8015f90 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015f8c:	2301      	movs	r3, #1
 8015f8e:	e02a      	b.n	8015fe6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015f90:	683b      	ldr	r3, [r7, #0]
 8015f92:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015f96:	f003 0302 	and.w	r3, r3, #2
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d101      	bne.n	8015fa2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015f9e:	2300      	movs	r3, #0
 8015fa0:	e021      	b.n	8015fe6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015fa2:	683b      	ldr	r3, [r7, #0]
 8015fa4:	3304      	adds	r3, #4
 8015fa6:	681b      	ldr	r3, [r3, #0]
 8015fa8:	687a      	ldr	r2, [r7, #4]
 8015faa:	429a      	cmp	r2, r3
 8015fac:	d101      	bne.n	8015fb2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015fae:	2300      	movs	r3, #0
 8015fb0:	e019      	b.n	8015fe6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015fb2:	68fa      	ldr	r2, [r7, #12]
 8015fb4:	683b      	ldr	r3, [r7, #0]
 8015fb6:	3304      	adds	r3, #4
 8015fb8:	681b      	ldr	r3, [r3, #0]
 8015fba:	405a      	eors	r2, r3
 8015fbc:	683b      	ldr	r3, [r7, #0]
 8015fbe:	3308      	adds	r3, #8
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	4013      	ands	r3, r2
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	d10d      	bne.n	8015fe4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015fc8:	683b      	ldr	r3, [r7, #0]
 8015fca:	3308      	adds	r3, #8
 8015fcc:	681b      	ldr	r3, [r3, #0]
 8015fce:	43da      	mvns	r2, r3
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015fd4:	683b      	ldr	r3, [r7, #0]
 8015fd6:	3308      	adds	r3, #8
 8015fd8:	681b      	ldr	r3, [r3, #0]
 8015fda:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015fdc:	429a      	cmp	r2, r3
 8015fde:	d101      	bne.n	8015fe4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015fe0:	2301      	movs	r3, #1
 8015fe2:	e000      	b.n	8015fe6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015fe4:	2300      	movs	r3, #0
  }
}
 8015fe6:	4618      	mov	r0, r3
 8015fe8:	3714      	adds	r7, #20
 8015fea:	46bd      	mov	sp, r7
 8015fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ff0:	4770      	bx	lr
	...

08015ff4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015ff4:	b580      	push	{r7, lr}
 8015ff6:	b084      	sub	sp, #16
 8015ff8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015ffa:	2300      	movs	r3, #0
 8015ffc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015ffe:	4b12      	ldr	r3, [pc, #72]	; (8016048 <ip_reass_tmr+0x54>)
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8016004:	e018      	b.n	8016038 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8016006:	68fb      	ldr	r3, [r7, #12]
 8016008:	7fdb      	ldrb	r3, [r3, #31]
 801600a:	2b00      	cmp	r3, #0
 801600c:	d00b      	beq.n	8016026 <ip_reass_tmr+0x32>
      r->timer--;
 801600e:	68fb      	ldr	r3, [r7, #12]
 8016010:	7fdb      	ldrb	r3, [r3, #31]
 8016012:	3b01      	subs	r3, #1
 8016014:	b2da      	uxtb	r2, r3
 8016016:	68fb      	ldr	r3, [r7, #12]
 8016018:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801601e:	68fb      	ldr	r3, [r7, #12]
 8016020:	681b      	ldr	r3, [r3, #0]
 8016022:	60fb      	str	r3, [r7, #12]
 8016024:	e008      	b.n	8016038 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801602a:	68fb      	ldr	r3, [r7, #12]
 801602c:	681b      	ldr	r3, [r3, #0]
 801602e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8016030:	68b9      	ldr	r1, [r7, #8]
 8016032:	6878      	ldr	r0, [r7, #4]
 8016034:	f000 f80a 	bl	801604c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016038:	68fb      	ldr	r3, [r7, #12]
 801603a:	2b00      	cmp	r3, #0
 801603c:	d1e3      	bne.n	8016006 <ip_reass_tmr+0x12>
    }
  }
}
 801603e:	bf00      	nop
 8016040:	bf00      	nop
 8016042:	3710      	adds	r7, #16
 8016044:	46bd      	mov	sp, r7
 8016046:	bd80      	pop	{r7, pc}
 8016048:	2000db80 	.word	0x2000db80

0801604c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801604c:	b580      	push	{r7, lr}
 801604e:	b088      	sub	sp, #32
 8016050:	af00      	add	r7, sp, #0
 8016052:	6078      	str	r0, [r7, #4]
 8016054:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8016056:	2300      	movs	r3, #0
 8016058:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801605a:	683a      	ldr	r2, [r7, #0]
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	429a      	cmp	r2, r3
 8016060:	d105      	bne.n	801606e <ip_reass_free_complete_datagram+0x22>
 8016062:	4b45      	ldr	r3, [pc, #276]	; (8016178 <ip_reass_free_complete_datagram+0x12c>)
 8016064:	22ab      	movs	r2, #171	; 0xab
 8016066:	4945      	ldr	r1, [pc, #276]	; (801617c <ip_reass_free_complete_datagram+0x130>)
 8016068:	4845      	ldr	r0, [pc, #276]	; (8016180 <ip_reass_free_complete_datagram+0x134>)
 801606a:	f001 f87d 	bl	8017168 <iprintf>
  if (prev != NULL) {
 801606e:	683b      	ldr	r3, [r7, #0]
 8016070:	2b00      	cmp	r3, #0
 8016072:	d00a      	beq.n	801608a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8016074:	683b      	ldr	r3, [r7, #0]
 8016076:	681b      	ldr	r3, [r3, #0]
 8016078:	687a      	ldr	r2, [r7, #4]
 801607a:	429a      	cmp	r2, r3
 801607c:	d005      	beq.n	801608a <ip_reass_free_complete_datagram+0x3e>
 801607e:	4b3e      	ldr	r3, [pc, #248]	; (8016178 <ip_reass_free_complete_datagram+0x12c>)
 8016080:	22ad      	movs	r2, #173	; 0xad
 8016082:	4940      	ldr	r1, [pc, #256]	; (8016184 <ip_reass_free_complete_datagram+0x138>)
 8016084:	483e      	ldr	r0, [pc, #248]	; (8016180 <ip_reass_free_complete_datagram+0x134>)
 8016086:	f001 f86f 	bl	8017168 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	685b      	ldr	r3, [r3, #4]
 801608e:	685b      	ldr	r3, [r3, #4]
 8016090:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8016092:	697b      	ldr	r3, [r7, #20]
 8016094:	889b      	ldrh	r3, [r3, #4]
 8016096:	b29b      	uxth	r3, r3
 8016098:	2b00      	cmp	r3, #0
 801609a:	d12a      	bne.n	80160f2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	685b      	ldr	r3, [r3, #4]
 80160a0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80160a2:	697b      	ldr	r3, [r7, #20]
 80160a4:	681a      	ldr	r2, [r3, #0]
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80160aa:	69bb      	ldr	r3, [r7, #24]
 80160ac:	6858      	ldr	r0, [r3, #4]
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	3308      	adds	r3, #8
 80160b2:	2214      	movs	r2, #20
 80160b4:	4619      	mov	r1, r3
 80160b6:	f001 f841 	bl	801713c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80160ba:	2101      	movs	r1, #1
 80160bc:	69b8      	ldr	r0, [r7, #24]
 80160be:	f7ff fa1d 	bl	80154fc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80160c2:	69b8      	ldr	r0, [r7, #24]
 80160c4:	f7f5 fb0c 	bl	800b6e0 <pbuf_clen>
 80160c8:	4603      	mov	r3, r0
 80160ca:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80160cc:	8bfa      	ldrh	r2, [r7, #30]
 80160ce:	8a7b      	ldrh	r3, [r7, #18]
 80160d0:	4413      	add	r3, r2
 80160d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80160d6:	db05      	blt.n	80160e4 <ip_reass_free_complete_datagram+0x98>
 80160d8:	4b27      	ldr	r3, [pc, #156]	; (8016178 <ip_reass_free_complete_datagram+0x12c>)
 80160da:	22bc      	movs	r2, #188	; 0xbc
 80160dc:	492a      	ldr	r1, [pc, #168]	; (8016188 <ip_reass_free_complete_datagram+0x13c>)
 80160de:	4828      	ldr	r0, [pc, #160]	; (8016180 <ip_reass_free_complete_datagram+0x134>)
 80160e0:	f001 f842 	bl	8017168 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80160e4:	8bfa      	ldrh	r2, [r7, #30]
 80160e6:	8a7b      	ldrh	r3, [r7, #18]
 80160e8:	4413      	add	r3, r2
 80160ea:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80160ec:	69b8      	ldr	r0, [r7, #24]
 80160ee:	f7f5 fa69 	bl	800b5c4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	685b      	ldr	r3, [r3, #4]
 80160f6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80160f8:	e01f      	b.n	801613a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80160fa:	69bb      	ldr	r3, [r7, #24]
 80160fc:	685b      	ldr	r3, [r3, #4]
 80160fe:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016100:	69bb      	ldr	r3, [r7, #24]
 8016102:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016104:	697b      	ldr	r3, [r7, #20]
 8016106:	681b      	ldr	r3, [r3, #0]
 8016108:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801610a:	68f8      	ldr	r0, [r7, #12]
 801610c:	f7f5 fae8 	bl	800b6e0 <pbuf_clen>
 8016110:	4603      	mov	r3, r0
 8016112:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016114:	8bfa      	ldrh	r2, [r7, #30]
 8016116:	8a7b      	ldrh	r3, [r7, #18]
 8016118:	4413      	add	r3, r2
 801611a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801611e:	db05      	blt.n	801612c <ip_reass_free_complete_datagram+0xe0>
 8016120:	4b15      	ldr	r3, [pc, #84]	; (8016178 <ip_reass_free_complete_datagram+0x12c>)
 8016122:	22cc      	movs	r2, #204	; 0xcc
 8016124:	4918      	ldr	r1, [pc, #96]	; (8016188 <ip_reass_free_complete_datagram+0x13c>)
 8016126:	4816      	ldr	r0, [pc, #88]	; (8016180 <ip_reass_free_complete_datagram+0x134>)
 8016128:	f001 f81e 	bl	8017168 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801612c:	8bfa      	ldrh	r2, [r7, #30]
 801612e:	8a7b      	ldrh	r3, [r7, #18]
 8016130:	4413      	add	r3, r2
 8016132:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016134:	68f8      	ldr	r0, [r7, #12]
 8016136:	f7f5 fa45 	bl	800b5c4 <pbuf_free>
  while (p != NULL) {
 801613a:	69bb      	ldr	r3, [r7, #24]
 801613c:	2b00      	cmp	r3, #0
 801613e:	d1dc      	bne.n	80160fa <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016140:	6839      	ldr	r1, [r7, #0]
 8016142:	6878      	ldr	r0, [r7, #4]
 8016144:	f000 f8c2 	bl	80162cc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8016148:	4b10      	ldr	r3, [pc, #64]	; (801618c <ip_reass_free_complete_datagram+0x140>)
 801614a:	881b      	ldrh	r3, [r3, #0]
 801614c:	8bfa      	ldrh	r2, [r7, #30]
 801614e:	429a      	cmp	r2, r3
 8016150:	d905      	bls.n	801615e <ip_reass_free_complete_datagram+0x112>
 8016152:	4b09      	ldr	r3, [pc, #36]	; (8016178 <ip_reass_free_complete_datagram+0x12c>)
 8016154:	22d2      	movs	r2, #210	; 0xd2
 8016156:	490e      	ldr	r1, [pc, #56]	; (8016190 <ip_reass_free_complete_datagram+0x144>)
 8016158:	4809      	ldr	r0, [pc, #36]	; (8016180 <ip_reass_free_complete_datagram+0x134>)
 801615a:	f001 f805 	bl	8017168 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801615e:	4b0b      	ldr	r3, [pc, #44]	; (801618c <ip_reass_free_complete_datagram+0x140>)
 8016160:	881a      	ldrh	r2, [r3, #0]
 8016162:	8bfb      	ldrh	r3, [r7, #30]
 8016164:	1ad3      	subs	r3, r2, r3
 8016166:	b29a      	uxth	r2, r3
 8016168:	4b08      	ldr	r3, [pc, #32]	; (801618c <ip_reass_free_complete_datagram+0x140>)
 801616a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801616c:	8bfb      	ldrh	r3, [r7, #30]
}
 801616e:	4618      	mov	r0, r3
 8016170:	3720      	adds	r7, #32
 8016172:	46bd      	mov	sp, r7
 8016174:	bd80      	pop	{r7, pc}
 8016176:	bf00      	nop
 8016178:	0801d01c 	.word	0x0801d01c
 801617c:	0801d058 	.word	0x0801d058
 8016180:	0801d064 	.word	0x0801d064
 8016184:	0801d08c 	.word	0x0801d08c
 8016188:	0801d0a0 	.word	0x0801d0a0
 801618c:	2000db84 	.word	0x2000db84
 8016190:	0801d0c0 	.word	0x0801d0c0

08016194 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016194:	b580      	push	{r7, lr}
 8016196:	b08a      	sub	sp, #40	; 0x28
 8016198:	af00      	add	r7, sp, #0
 801619a:	6078      	str	r0, [r7, #4]
 801619c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801619e:	2300      	movs	r3, #0
 80161a0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80161a2:	2300      	movs	r3, #0
 80161a4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80161a6:	2300      	movs	r3, #0
 80161a8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80161aa:	2300      	movs	r3, #0
 80161ac:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80161ae:	2300      	movs	r3, #0
 80161b0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80161b2:	4b28      	ldr	r3, [pc, #160]	; (8016254 <ip_reass_remove_oldest_datagram+0xc0>)
 80161b4:	681b      	ldr	r3, [r3, #0]
 80161b6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80161b8:	e030      	b.n	801621c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80161ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161bc:	695a      	ldr	r2, [r3, #20]
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	68db      	ldr	r3, [r3, #12]
 80161c2:	429a      	cmp	r2, r3
 80161c4:	d10c      	bne.n	80161e0 <ip_reass_remove_oldest_datagram+0x4c>
 80161c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161c8:	699a      	ldr	r2, [r3, #24]
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	691b      	ldr	r3, [r3, #16]
 80161ce:	429a      	cmp	r2, r3
 80161d0:	d106      	bne.n	80161e0 <ip_reass_remove_oldest_datagram+0x4c>
 80161d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161d4:	899a      	ldrh	r2, [r3, #12]
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	889b      	ldrh	r3, [r3, #4]
 80161da:	b29b      	uxth	r3, r3
 80161dc:	429a      	cmp	r2, r3
 80161de:	d014      	beq.n	801620a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80161e0:	693b      	ldr	r3, [r7, #16]
 80161e2:	3301      	adds	r3, #1
 80161e4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80161e6:	6a3b      	ldr	r3, [r7, #32]
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d104      	bne.n	80161f6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80161ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161ee:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80161f0:	69fb      	ldr	r3, [r7, #28]
 80161f2:	61bb      	str	r3, [r7, #24]
 80161f4:	e009      	b.n	801620a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80161f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161f8:	7fda      	ldrb	r2, [r3, #31]
 80161fa:	6a3b      	ldr	r3, [r7, #32]
 80161fc:	7fdb      	ldrb	r3, [r3, #31]
 80161fe:	429a      	cmp	r2, r3
 8016200:	d803      	bhi.n	801620a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8016202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016204:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016206:	69fb      	ldr	r3, [r7, #28]
 8016208:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801620c:	681b      	ldr	r3, [r3, #0]
 801620e:	2b00      	cmp	r3, #0
 8016210:	d001      	beq.n	8016216 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8016212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016214:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8016216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801621c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801621e:	2b00      	cmp	r3, #0
 8016220:	d1cb      	bne.n	80161ba <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8016222:	6a3b      	ldr	r3, [r7, #32]
 8016224:	2b00      	cmp	r3, #0
 8016226:	d008      	beq.n	801623a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016228:	69b9      	ldr	r1, [r7, #24]
 801622a:	6a38      	ldr	r0, [r7, #32]
 801622c:	f7ff ff0e 	bl	801604c <ip_reass_free_complete_datagram>
 8016230:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8016232:	697a      	ldr	r2, [r7, #20]
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	4413      	add	r3, r2
 8016238:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801623a:	697a      	ldr	r2, [r7, #20]
 801623c:	683b      	ldr	r3, [r7, #0]
 801623e:	429a      	cmp	r2, r3
 8016240:	da02      	bge.n	8016248 <ip_reass_remove_oldest_datagram+0xb4>
 8016242:	693b      	ldr	r3, [r7, #16]
 8016244:	2b01      	cmp	r3, #1
 8016246:	dcac      	bgt.n	80161a2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016248:	697b      	ldr	r3, [r7, #20]
}
 801624a:	4618      	mov	r0, r3
 801624c:	3728      	adds	r7, #40	; 0x28
 801624e:	46bd      	mov	sp, r7
 8016250:	bd80      	pop	{r7, pc}
 8016252:	bf00      	nop
 8016254:	2000db80 	.word	0x2000db80

08016258 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016258:	b580      	push	{r7, lr}
 801625a:	b084      	sub	sp, #16
 801625c:	af00      	add	r7, sp, #0
 801625e:	6078      	str	r0, [r7, #4]
 8016260:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016262:	2004      	movs	r0, #4
 8016264:	f7f4 f992 	bl	800a58c <memp_malloc>
 8016268:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801626a:	68fb      	ldr	r3, [r7, #12]
 801626c:	2b00      	cmp	r3, #0
 801626e:	d110      	bne.n	8016292 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016270:	6839      	ldr	r1, [r7, #0]
 8016272:	6878      	ldr	r0, [r7, #4]
 8016274:	f7ff ff8e 	bl	8016194 <ip_reass_remove_oldest_datagram>
 8016278:	4602      	mov	r2, r0
 801627a:	683b      	ldr	r3, [r7, #0]
 801627c:	4293      	cmp	r3, r2
 801627e:	dc03      	bgt.n	8016288 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016280:	2004      	movs	r0, #4
 8016282:	f7f4 f983 	bl	800a58c <memp_malloc>
 8016286:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016288:	68fb      	ldr	r3, [r7, #12]
 801628a:	2b00      	cmp	r3, #0
 801628c:	d101      	bne.n	8016292 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801628e:	2300      	movs	r3, #0
 8016290:	e016      	b.n	80162c0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8016292:	2220      	movs	r2, #32
 8016294:	2100      	movs	r1, #0
 8016296:	68f8      	ldr	r0, [r7, #12]
 8016298:	f000 ff5e 	bl	8017158 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	220f      	movs	r2, #15
 80162a0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80162a2:	4b09      	ldr	r3, [pc, #36]	; (80162c8 <ip_reass_enqueue_new_datagram+0x70>)
 80162a4:	681a      	ldr	r2, [r3, #0]
 80162a6:	68fb      	ldr	r3, [r7, #12]
 80162a8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80162aa:	4a07      	ldr	r2, [pc, #28]	; (80162c8 <ip_reass_enqueue_new_datagram+0x70>)
 80162ac:	68fb      	ldr	r3, [r7, #12]
 80162ae:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80162b0:	68fb      	ldr	r3, [r7, #12]
 80162b2:	3308      	adds	r3, #8
 80162b4:	2214      	movs	r2, #20
 80162b6:	6879      	ldr	r1, [r7, #4]
 80162b8:	4618      	mov	r0, r3
 80162ba:	f000 ff3f 	bl	801713c <memcpy>
  return ipr;
 80162be:	68fb      	ldr	r3, [r7, #12]
}
 80162c0:	4618      	mov	r0, r3
 80162c2:	3710      	adds	r7, #16
 80162c4:	46bd      	mov	sp, r7
 80162c6:	bd80      	pop	{r7, pc}
 80162c8:	2000db80 	.word	0x2000db80

080162cc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80162cc:	b580      	push	{r7, lr}
 80162ce:	b082      	sub	sp, #8
 80162d0:	af00      	add	r7, sp, #0
 80162d2:	6078      	str	r0, [r7, #4]
 80162d4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80162d6:	4b10      	ldr	r3, [pc, #64]	; (8016318 <ip_reass_dequeue_datagram+0x4c>)
 80162d8:	681b      	ldr	r3, [r3, #0]
 80162da:	687a      	ldr	r2, [r7, #4]
 80162dc:	429a      	cmp	r2, r3
 80162de:	d104      	bne.n	80162ea <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	681b      	ldr	r3, [r3, #0]
 80162e4:	4a0c      	ldr	r2, [pc, #48]	; (8016318 <ip_reass_dequeue_datagram+0x4c>)
 80162e6:	6013      	str	r3, [r2, #0]
 80162e8:	e00d      	b.n	8016306 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80162ea:	683b      	ldr	r3, [r7, #0]
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d106      	bne.n	80162fe <ip_reass_dequeue_datagram+0x32>
 80162f0:	4b0a      	ldr	r3, [pc, #40]	; (801631c <ip_reass_dequeue_datagram+0x50>)
 80162f2:	f240 1245 	movw	r2, #325	; 0x145
 80162f6:	490a      	ldr	r1, [pc, #40]	; (8016320 <ip_reass_dequeue_datagram+0x54>)
 80162f8:	480a      	ldr	r0, [pc, #40]	; (8016324 <ip_reass_dequeue_datagram+0x58>)
 80162fa:	f000 ff35 	bl	8017168 <iprintf>
    prev->next = ipr->next;
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	681a      	ldr	r2, [r3, #0]
 8016302:	683b      	ldr	r3, [r7, #0]
 8016304:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016306:	6879      	ldr	r1, [r7, #4]
 8016308:	2004      	movs	r0, #4
 801630a:	f7f4 f9b5 	bl	800a678 <memp_free>
}
 801630e:	bf00      	nop
 8016310:	3708      	adds	r7, #8
 8016312:	46bd      	mov	sp, r7
 8016314:	bd80      	pop	{r7, pc}
 8016316:	bf00      	nop
 8016318:	2000db80 	.word	0x2000db80
 801631c:	0801d01c 	.word	0x0801d01c
 8016320:	0801d0e4 	.word	0x0801d0e4
 8016324:	0801d064 	.word	0x0801d064

08016328 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016328:	b580      	push	{r7, lr}
 801632a:	b08c      	sub	sp, #48	; 0x30
 801632c:	af00      	add	r7, sp, #0
 801632e:	60f8      	str	r0, [r7, #12]
 8016330:	60b9      	str	r1, [r7, #8]
 8016332:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016334:	2300      	movs	r3, #0
 8016336:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016338:	2301      	movs	r3, #1
 801633a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801633c:	68bb      	ldr	r3, [r7, #8]
 801633e:	685b      	ldr	r3, [r3, #4]
 8016340:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016342:	69fb      	ldr	r3, [r7, #28]
 8016344:	885b      	ldrh	r3, [r3, #2]
 8016346:	b29b      	uxth	r3, r3
 8016348:	4618      	mov	r0, r3
 801634a:	f7f3 f959 	bl	8009600 <lwip_htons>
 801634e:	4603      	mov	r3, r0
 8016350:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8016352:	69fb      	ldr	r3, [r7, #28]
 8016354:	781b      	ldrb	r3, [r3, #0]
 8016356:	f003 030f 	and.w	r3, r3, #15
 801635a:	b2db      	uxtb	r3, r3
 801635c:	009b      	lsls	r3, r3, #2
 801635e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8016360:	7e7b      	ldrb	r3, [r7, #25]
 8016362:	b29b      	uxth	r3, r3
 8016364:	8b7a      	ldrh	r2, [r7, #26]
 8016366:	429a      	cmp	r2, r3
 8016368:	d202      	bcs.n	8016370 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801636a:	f04f 33ff 	mov.w	r3, #4294967295
 801636e:	e135      	b.n	80165dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8016370:	7e7b      	ldrb	r3, [r7, #25]
 8016372:	b29b      	uxth	r3, r3
 8016374:	8b7a      	ldrh	r2, [r7, #26]
 8016376:	1ad3      	subs	r3, r2, r3
 8016378:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801637a:	69fb      	ldr	r3, [r7, #28]
 801637c:	88db      	ldrh	r3, [r3, #6]
 801637e:	b29b      	uxth	r3, r3
 8016380:	4618      	mov	r0, r3
 8016382:	f7f3 f93d 	bl	8009600 <lwip_htons>
 8016386:	4603      	mov	r3, r0
 8016388:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801638c:	b29b      	uxth	r3, r3
 801638e:	00db      	lsls	r3, r3, #3
 8016390:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8016392:	68bb      	ldr	r3, [r7, #8]
 8016394:	685b      	ldr	r3, [r3, #4]
 8016396:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8016398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801639a:	2200      	movs	r2, #0
 801639c:	701a      	strb	r2, [r3, #0]
 801639e:	2200      	movs	r2, #0
 80163a0:	705a      	strb	r2, [r3, #1]
 80163a2:	2200      	movs	r2, #0
 80163a4:	709a      	strb	r2, [r3, #2]
 80163a6:	2200      	movs	r2, #0
 80163a8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80163aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163ac:	8afa      	ldrh	r2, [r7, #22]
 80163ae:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80163b0:	8afa      	ldrh	r2, [r7, #22]
 80163b2:	8b7b      	ldrh	r3, [r7, #26]
 80163b4:	4413      	add	r3, r2
 80163b6:	b29a      	uxth	r2, r3
 80163b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163ba:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80163bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163be:	88db      	ldrh	r3, [r3, #6]
 80163c0:	b29b      	uxth	r3, r3
 80163c2:	8afa      	ldrh	r2, [r7, #22]
 80163c4:	429a      	cmp	r2, r3
 80163c6:	d902      	bls.n	80163ce <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80163c8:	f04f 33ff 	mov.w	r3, #4294967295
 80163cc:	e106      	b.n	80165dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80163ce:	68fb      	ldr	r3, [r7, #12]
 80163d0:	685b      	ldr	r3, [r3, #4]
 80163d2:	627b      	str	r3, [r7, #36]	; 0x24
 80163d4:	e068      	b.n	80164a8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80163d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163d8:	685b      	ldr	r3, [r3, #4]
 80163da:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80163dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163de:	889b      	ldrh	r3, [r3, #4]
 80163e0:	b29a      	uxth	r2, r3
 80163e2:	693b      	ldr	r3, [r7, #16]
 80163e4:	889b      	ldrh	r3, [r3, #4]
 80163e6:	b29b      	uxth	r3, r3
 80163e8:	429a      	cmp	r2, r3
 80163ea:	d235      	bcs.n	8016458 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80163ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80163f0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80163f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d020      	beq.n	801643a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80163f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163fa:	889b      	ldrh	r3, [r3, #4]
 80163fc:	b29a      	uxth	r2, r3
 80163fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016400:	88db      	ldrh	r3, [r3, #6]
 8016402:	b29b      	uxth	r3, r3
 8016404:	429a      	cmp	r2, r3
 8016406:	d307      	bcc.n	8016418 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801640a:	88db      	ldrh	r3, [r3, #6]
 801640c:	b29a      	uxth	r2, r3
 801640e:	693b      	ldr	r3, [r7, #16]
 8016410:	889b      	ldrh	r3, [r3, #4]
 8016412:	b29b      	uxth	r3, r3
 8016414:	429a      	cmp	r2, r3
 8016416:	d902      	bls.n	801641e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016418:	f04f 33ff 	mov.w	r3, #4294967295
 801641c:	e0de      	b.n	80165dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801641e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016420:	68ba      	ldr	r2, [r7, #8]
 8016422:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016426:	88db      	ldrh	r3, [r3, #6]
 8016428:	b29a      	uxth	r2, r3
 801642a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801642c:	889b      	ldrh	r3, [r3, #4]
 801642e:	b29b      	uxth	r3, r3
 8016430:	429a      	cmp	r2, r3
 8016432:	d03d      	beq.n	80164b0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016434:	2300      	movs	r3, #0
 8016436:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016438:	e03a      	b.n	80164b0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801643a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801643c:	88db      	ldrh	r3, [r3, #6]
 801643e:	b29a      	uxth	r2, r3
 8016440:	693b      	ldr	r3, [r7, #16]
 8016442:	889b      	ldrh	r3, [r3, #4]
 8016444:	b29b      	uxth	r3, r3
 8016446:	429a      	cmp	r2, r3
 8016448:	d902      	bls.n	8016450 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801644a:	f04f 33ff 	mov.w	r3, #4294967295
 801644e:	e0c5      	b.n	80165dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	68ba      	ldr	r2, [r7, #8]
 8016454:	605a      	str	r2, [r3, #4]
      break;
 8016456:	e02b      	b.n	80164b0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801645a:	889b      	ldrh	r3, [r3, #4]
 801645c:	b29a      	uxth	r2, r3
 801645e:	693b      	ldr	r3, [r7, #16]
 8016460:	889b      	ldrh	r3, [r3, #4]
 8016462:	b29b      	uxth	r3, r3
 8016464:	429a      	cmp	r2, r3
 8016466:	d102      	bne.n	801646e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016468:	f04f 33ff 	mov.w	r3, #4294967295
 801646c:	e0b6      	b.n	80165dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801646e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016470:	889b      	ldrh	r3, [r3, #4]
 8016472:	b29a      	uxth	r2, r3
 8016474:	693b      	ldr	r3, [r7, #16]
 8016476:	88db      	ldrh	r3, [r3, #6]
 8016478:	b29b      	uxth	r3, r3
 801647a:	429a      	cmp	r2, r3
 801647c:	d202      	bcs.n	8016484 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801647e:	f04f 33ff 	mov.w	r3, #4294967295
 8016482:	e0ab      	b.n	80165dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016486:	2b00      	cmp	r3, #0
 8016488:	d009      	beq.n	801649e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801648a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801648c:	88db      	ldrh	r3, [r3, #6]
 801648e:	b29a      	uxth	r2, r3
 8016490:	693b      	ldr	r3, [r7, #16]
 8016492:	889b      	ldrh	r3, [r3, #4]
 8016494:	b29b      	uxth	r3, r3
 8016496:	429a      	cmp	r2, r3
 8016498:	d001      	beq.n	801649e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801649a:	2300      	movs	r3, #0
 801649c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801649e:	693b      	ldr	r3, [r7, #16]
 80164a0:	681b      	ldr	r3, [r3, #0]
 80164a2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80164a4:	693b      	ldr	r3, [r7, #16]
 80164a6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80164a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d193      	bne.n	80163d6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80164ae:	e000      	b.n	80164b2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80164b0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80164b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d12d      	bne.n	8016514 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80164b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d01c      	beq.n	80164f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80164be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164c0:	88db      	ldrh	r3, [r3, #6]
 80164c2:	b29a      	uxth	r2, r3
 80164c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164c6:	889b      	ldrh	r3, [r3, #4]
 80164c8:	b29b      	uxth	r3, r3
 80164ca:	429a      	cmp	r2, r3
 80164cc:	d906      	bls.n	80164dc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80164ce:	4b45      	ldr	r3, [pc, #276]	; (80165e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80164d0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80164d4:	4944      	ldr	r1, [pc, #272]	; (80165e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80164d6:	4845      	ldr	r0, [pc, #276]	; (80165ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80164d8:	f000 fe46 	bl	8017168 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80164dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164de:	68ba      	ldr	r2, [r7, #8]
 80164e0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80164e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164e4:	88db      	ldrh	r3, [r3, #6]
 80164e6:	b29a      	uxth	r2, r3
 80164e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164ea:	889b      	ldrh	r3, [r3, #4]
 80164ec:	b29b      	uxth	r3, r3
 80164ee:	429a      	cmp	r2, r3
 80164f0:	d010      	beq.n	8016514 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80164f2:	2300      	movs	r3, #0
 80164f4:	623b      	str	r3, [r7, #32]
 80164f6:	e00d      	b.n	8016514 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80164f8:	68fb      	ldr	r3, [r7, #12]
 80164fa:	685b      	ldr	r3, [r3, #4]
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d006      	beq.n	801650e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016500:	4b38      	ldr	r3, [pc, #224]	; (80165e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016502:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8016506:	493a      	ldr	r1, [pc, #232]	; (80165f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016508:	4838      	ldr	r0, [pc, #224]	; (80165ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801650a:	f000 fe2d 	bl	8017168 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801650e:	68fb      	ldr	r3, [r7, #12]
 8016510:	68ba      	ldr	r2, [r7, #8]
 8016512:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	2b00      	cmp	r3, #0
 8016518:	d105      	bne.n	8016526 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801651a:	68fb      	ldr	r3, [r7, #12]
 801651c:	7f9b      	ldrb	r3, [r3, #30]
 801651e:	f003 0301 	and.w	r3, r3, #1
 8016522:	2b00      	cmp	r3, #0
 8016524:	d059      	beq.n	80165da <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8016526:	6a3b      	ldr	r3, [r7, #32]
 8016528:	2b00      	cmp	r3, #0
 801652a:	d04f      	beq.n	80165cc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	685b      	ldr	r3, [r3, #4]
 8016530:	2b00      	cmp	r3, #0
 8016532:	d006      	beq.n	8016542 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016534:	68fb      	ldr	r3, [r7, #12]
 8016536:	685b      	ldr	r3, [r3, #4]
 8016538:	685b      	ldr	r3, [r3, #4]
 801653a:	889b      	ldrh	r3, [r3, #4]
 801653c:	b29b      	uxth	r3, r3
 801653e:	2b00      	cmp	r3, #0
 8016540:	d002      	beq.n	8016548 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8016542:	2300      	movs	r3, #0
 8016544:	623b      	str	r3, [r7, #32]
 8016546:	e041      	b.n	80165cc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801654a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801654c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016552:	e012      	b.n	801657a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016556:	685b      	ldr	r3, [r3, #4]
 8016558:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801655a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801655c:	88db      	ldrh	r3, [r3, #6]
 801655e:	b29a      	uxth	r2, r3
 8016560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016562:	889b      	ldrh	r3, [r3, #4]
 8016564:	b29b      	uxth	r3, r3
 8016566:	429a      	cmp	r2, r3
 8016568:	d002      	beq.n	8016570 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801656a:	2300      	movs	r3, #0
 801656c:	623b      	str	r3, [r7, #32]
            break;
 801656e:	e007      	b.n	8016580 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8016570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016572:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8016574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801657a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801657c:	2b00      	cmp	r3, #0
 801657e:	d1e9      	bne.n	8016554 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016580:	6a3b      	ldr	r3, [r7, #32]
 8016582:	2b00      	cmp	r3, #0
 8016584:	d022      	beq.n	80165cc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8016586:	68fb      	ldr	r3, [r7, #12]
 8016588:	685b      	ldr	r3, [r3, #4]
 801658a:	2b00      	cmp	r3, #0
 801658c:	d106      	bne.n	801659c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801658e:	4b15      	ldr	r3, [pc, #84]	; (80165e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016590:	f240 12df 	movw	r2, #479	; 0x1df
 8016594:	4917      	ldr	r1, [pc, #92]	; (80165f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016596:	4815      	ldr	r0, [pc, #84]	; (80165ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016598:	f000 fde6 	bl	8017168 <iprintf>
          LWIP_ASSERT("sanity check",
 801659c:	68fb      	ldr	r3, [r7, #12]
 801659e:	685b      	ldr	r3, [r3, #4]
 80165a0:	685b      	ldr	r3, [r3, #4]
 80165a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80165a4:	429a      	cmp	r2, r3
 80165a6:	d106      	bne.n	80165b6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80165a8:	4b0e      	ldr	r3, [pc, #56]	; (80165e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80165aa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80165ae:	4911      	ldr	r1, [pc, #68]	; (80165f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80165b0:	480e      	ldr	r0, [pc, #56]	; (80165ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80165b2:	f000 fdd9 	bl	8017168 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80165b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d006      	beq.n	80165cc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80165be:	4b09      	ldr	r3, [pc, #36]	; (80165e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80165c0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80165c4:	490c      	ldr	r1, [pc, #48]	; (80165f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80165c6:	4809      	ldr	r0, [pc, #36]	; (80165ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80165c8:	f000 fdce 	bl	8017168 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80165cc:	6a3b      	ldr	r3, [r7, #32]
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	bf14      	ite	ne
 80165d2:	2301      	movne	r3, #1
 80165d4:	2300      	moveq	r3, #0
 80165d6:	b2db      	uxtb	r3, r3
 80165d8:	e000      	b.n	80165dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80165da:	2300      	movs	r3, #0
}
 80165dc:	4618      	mov	r0, r3
 80165de:	3730      	adds	r7, #48	; 0x30
 80165e0:	46bd      	mov	sp, r7
 80165e2:	bd80      	pop	{r7, pc}
 80165e4:	0801d01c 	.word	0x0801d01c
 80165e8:	0801d100 	.word	0x0801d100
 80165ec:	0801d064 	.word	0x0801d064
 80165f0:	0801d120 	.word	0x0801d120
 80165f4:	0801d158 	.word	0x0801d158
 80165f8:	0801d168 	.word	0x0801d168

080165fc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80165fc:	b580      	push	{r7, lr}
 80165fe:	b08e      	sub	sp, #56	; 0x38
 8016600:	af00      	add	r7, sp, #0
 8016602:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	685b      	ldr	r3, [r3, #4]
 8016608:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801660a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801660c:	781b      	ldrb	r3, [r3, #0]
 801660e:	f003 030f 	and.w	r3, r3, #15
 8016612:	b2db      	uxtb	r3, r3
 8016614:	009b      	lsls	r3, r3, #2
 8016616:	b2db      	uxtb	r3, r3
 8016618:	2b14      	cmp	r3, #20
 801661a:	f040 8171 	bne.w	8016900 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801661e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016620:	88db      	ldrh	r3, [r3, #6]
 8016622:	b29b      	uxth	r3, r3
 8016624:	4618      	mov	r0, r3
 8016626:	f7f2 ffeb 	bl	8009600 <lwip_htons>
 801662a:	4603      	mov	r3, r0
 801662c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016630:	b29b      	uxth	r3, r3
 8016632:	00db      	lsls	r3, r3, #3
 8016634:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016638:	885b      	ldrh	r3, [r3, #2]
 801663a:	b29b      	uxth	r3, r3
 801663c:	4618      	mov	r0, r3
 801663e:	f7f2 ffdf 	bl	8009600 <lwip_htons>
 8016642:	4603      	mov	r3, r0
 8016644:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8016646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016648:	781b      	ldrb	r3, [r3, #0]
 801664a:	f003 030f 	and.w	r3, r3, #15
 801664e:	b2db      	uxtb	r3, r3
 8016650:	009b      	lsls	r3, r3, #2
 8016652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8016656:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801665a:	b29b      	uxth	r3, r3
 801665c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801665e:	429a      	cmp	r2, r3
 8016660:	f0c0 8150 	bcc.w	8016904 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8016664:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016668:	b29b      	uxth	r3, r3
 801666a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801666c:	1ad3      	subs	r3, r2, r3
 801666e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016670:	6878      	ldr	r0, [r7, #4]
 8016672:	f7f5 f835 	bl	800b6e0 <pbuf_clen>
 8016676:	4603      	mov	r3, r0
 8016678:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801667a:	4b8c      	ldr	r3, [pc, #560]	; (80168ac <ip4_reass+0x2b0>)
 801667c:	881b      	ldrh	r3, [r3, #0]
 801667e:	461a      	mov	r2, r3
 8016680:	8c3b      	ldrh	r3, [r7, #32]
 8016682:	4413      	add	r3, r2
 8016684:	2b0a      	cmp	r3, #10
 8016686:	dd10      	ble.n	80166aa <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016688:	8c3b      	ldrh	r3, [r7, #32]
 801668a:	4619      	mov	r1, r3
 801668c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801668e:	f7ff fd81 	bl	8016194 <ip_reass_remove_oldest_datagram>
 8016692:	4603      	mov	r3, r0
 8016694:	2b00      	cmp	r3, #0
 8016696:	f000 8137 	beq.w	8016908 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801669a:	4b84      	ldr	r3, [pc, #528]	; (80168ac <ip4_reass+0x2b0>)
 801669c:	881b      	ldrh	r3, [r3, #0]
 801669e:	461a      	mov	r2, r3
 80166a0:	8c3b      	ldrh	r3, [r7, #32]
 80166a2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80166a4:	2b0a      	cmp	r3, #10
 80166a6:	f300 812f 	bgt.w	8016908 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80166aa:	4b81      	ldr	r3, [pc, #516]	; (80168b0 <ip4_reass+0x2b4>)
 80166ac:	681b      	ldr	r3, [r3, #0]
 80166ae:	633b      	str	r3, [r7, #48]	; 0x30
 80166b0:	e015      	b.n	80166de <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80166b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166b4:	695a      	ldr	r2, [r3, #20]
 80166b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166b8:	68db      	ldr	r3, [r3, #12]
 80166ba:	429a      	cmp	r2, r3
 80166bc:	d10c      	bne.n	80166d8 <ip4_reass+0xdc>
 80166be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166c0:	699a      	ldr	r2, [r3, #24]
 80166c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166c4:	691b      	ldr	r3, [r3, #16]
 80166c6:	429a      	cmp	r2, r3
 80166c8:	d106      	bne.n	80166d8 <ip4_reass+0xdc>
 80166ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166cc:	899a      	ldrh	r2, [r3, #12]
 80166ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166d0:	889b      	ldrh	r3, [r3, #4]
 80166d2:	b29b      	uxth	r3, r3
 80166d4:	429a      	cmp	r2, r3
 80166d6:	d006      	beq.n	80166e6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80166d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166da:	681b      	ldr	r3, [r3, #0]
 80166dc:	633b      	str	r3, [r7, #48]	; 0x30
 80166de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d1e6      	bne.n	80166b2 <ip4_reass+0xb6>
 80166e4:	e000      	b.n	80166e8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80166e6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80166e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d109      	bne.n	8016702 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80166ee:	8c3b      	ldrh	r3, [r7, #32]
 80166f0:	4619      	mov	r1, r3
 80166f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80166f4:	f7ff fdb0 	bl	8016258 <ip_reass_enqueue_new_datagram>
 80166f8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80166fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	d11c      	bne.n	801673a <ip4_reass+0x13e>
      goto nullreturn;
 8016700:	e105      	b.n	801690e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016704:	88db      	ldrh	r3, [r3, #6]
 8016706:	b29b      	uxth	r3, r3
 8016708:	4618      	mov	r0, r3
 801670a:	f7f2 ff79 	bl	8009600 <lwip_htons>
 801670e:	4603      	mov	r3, r0
 8016710:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016714:	2b00      	cmp	r3, #0
 8016716:	d110      	bne.n	801673a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801671a:	89db      	ldrh	r3, [r3, #14]
 801671c:	4618      	mov	r0, r3
 801671e:	f7f2 ff6f 	bl	8009600 <lwip_htons>
 8016722:	4603      	mov	r3, r0
 8016724:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016728:	2b00      	cmp	r3, #0
 801672a:	d006      	beq.n	801673a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801672c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801672e:	3308      	adds	r3, #8
 8016730:	2214      	movs	r2, #20
 8016732:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016734:	4618      	mov	r0, r3
 8016736:	f000 fd01 	bl	801713c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801673a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801673c:	88db      	ldrh	r3, [r3, #6]
 801673e:	b29b      	uxth	r3, r3
 8016740:	f003 0320 	and.w	r3, r3, #32
 8016744:	2b00      	cmp	r3, #0
 8016746:	bf0c      	ite	eq
 8016748:	2301      	moveq	r3, #1
 801674a:	2300      	movne	r3, #0
 801674c:	b2db      	uxtb	r3, r3
 801674e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8016750:	69fb      	ldr	r3, [r7, #28]
 8016752:	2b00      	cmp	r3, #0
 8016754:	d00e      	beq.n	8016774 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8016756:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016758:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801675a:	4413      	add	r3, r2
 801675c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801675e:	8b7a      	ldrh	r2, [r7, #26]
 8016760:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016762:	429a      	cmp	r2, r3
 8016764:	f0c0 80a0 	bcc.w	80168a8 <ip4_reass+0x2ac>
 8016768:	8b7b      	ldrh	r3, [r7, #26]
 801676a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801676e:	4293      	cmp	r3, r2
 8016770:	f200 809a 	bhi.w	80168a8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8016774:	69fa      	ldr	r2, [r7, #28]
 8016776:	6879      	ldr	r1, [r7, #4]
 8016778:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801677a:	f7ff fdd5 	bl	8016328 <ip_reass_chain_frag_into_datagram_and_validate>
 801677e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016780:	697b      	ldr	r3, [r7, #20]
 8016782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016786:	f000 809b 	beq.w	80168c0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801678a:	4b48      	ldr	r3, [pc, #288]	; (80168ac <ip4_reass+0x2b0>)
 801678c:	881a      	ldrh	r2, [r3, #0]
 801678e:	8c3b      	ldrh	r3, [r7, #32]
 8016790:	4413      	add	r3, r2
 8016792:	b29a      	uxth	r2, r3
 8016794:	4b45      	ldr	r3, [pc, #276]	; (80168ac <ip4_reass+0x2b0>)
 8016796:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016798:	69fb      	ldr	r3, [r7, #28]
 801679a:	2b00      	cmp	r3, #0
 801679c:	d00d      	beq.n	80167ba <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801679e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80167a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80167a2:	4413      	add	r3, r2
 80167a4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80167a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167a8:	8a7a      	ldrh	r2, [r7, #18]
 80167aa:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80167ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167ae:	7f9b      	ldrb	r3, [r3, #30]
 80167b0:	f043 0301 	orr.w	r3, r3, #1
 80167b4:	b2da      	uxtb	r2, r3
 80167b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167b8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80167ba:	697b      	ldr	r3, [r7, #20]
 80167bc:	2b01      	cmp	r3, #1
 80167be:	d171      	bne.n	80168a4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80167c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167c2:	8b9b      	ldrh	r3, [r3, #28]
 80167c4:	3314      	adds	r3, #20
 80167c6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80167c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167ca:	685b      	ldr	r3, [r3, #4]
 80167cc:	685b      	ldr	r3, [r3, #4]
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80167d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167d4:	685b      	ldr	r3, [r3, #4]
 80167d6:	685b      	ldr	r3, [r3, #4]
 80167d8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80167da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167dc:	3308      	adds	r3, #8
 80167de:	2214      	movs	r2, #20
 80167e0:	4619      	mov	r1, r3
 80167e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80167e4:	f000 fcaa 	bl	801713c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80167e8:	8a3b      	ldrh	r3, [r7, #16]
 80167ea:	4618      	mov	r0, r3
 80167ec:	f7f2 ff08 	bl	8009600 <lwip_htons>
 80167f0:	4603      	mov	r3, r0
 80167f2:	461a      	mov	r2, r3
 80167f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167f6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80167f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167fa:	2200      	movs	r2, #0
 80167fc:	719a      	strb	r2, [r3, #6]
 80167fe:	2200      	movs	r2, #0
 8016800:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8016802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016804:	2200      	movs	r2, #0
 8016806:	729a      	strb	r2, [r3, #10]
 8016808:	2200      	movs	r2, #0
 801680a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801680c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801680e:	685b      	ldr	r3, [r3, #4]
 8016810:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8016812:	e00d      	b.n	8016830 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016816:	685b      	ldr	r3, [r3, #4]
 8016818:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801681a:	2114      	movs	r1, #20
 801681c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801681e:	f7f4 fe4b 	bl	800b4b8 <pbuf_remove_header>
      pbuf_cat(p, r);
 8016822:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016824:	6878      	ldr	r0, [r7, #4]
 8016826:	f7f4 ff9b 	bl	800b760 <pbuf_cat>
      r = iprh->next_pbuf;
 801682a:	68fb      	ldr	r3, [r7, #12]
 801682c:	681b      	ldr	r3, [r3, #0]
 801682e:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (r != NULL) {
 8016830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016832:	2b00      	cmp	r3, #0
 8016834:	d1ee      	bne.n	8016814 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016836:	4b1e      	ldr	r3, [pc, #120]	; (80168b0 <ip4_reass+0x2b4>)
 8016838:	681b      	ldr	r3, [r3, #0]
 801683a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801683c:	429a      	cmp	r2, r3
 801683e:	d102      	bne.n	8016846 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8016840:	2300      	movs	r3, #0
 8016842:	637b      	str	r3, [r7, #52]	; 0x34
 8016844:	e010      	b.n	8016868 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016846:	4b1a      	ldr	r3, [pc, #104]	; (80168b0 <ip4_reass+0x2b4>)
 8016848:	681b      	ldr	r3, [r3, #0]
 801684a:	637b      	str	r3, [r7, #52]	; 0x34
 801684c:	e007      	b.n	801685e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801684e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016854:	429a      	cmp	r2, r3
 8016856:	d006      	beq.n	8016866 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801685a:	681b      	ldr	r3, [r3, #0]
 801685c:	637b      	str	r3, [r7, #52]	; 0x34
 801685e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016860:	2b00      	cmp	r3, #0
 8016862:	d1f4      	bne.n	801684e <ip4_reass+0x252>
 8016864:	e000      	b.n	8016868 <ip4_reass+0x26c>
          break;
 8016866:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016868:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801686a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801686c:	f7ff fd2e 	bl	80162cc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016870:	6878      	ldr	r0, [r7, #4]
 8016872:	f7f4 ff35 	bl	800b6e0 <pbuf_clen>
 8016876:	4603      	mov	r3, r0
 8016878:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801687a:	4b0c      	ldr	r3, [pc, #48]	; (80168ac <ip4_reass+0x2b0>)
 801687c:	881b      	ldrh	r3, [r3, #0]
 801687e:	8c3a      	ldrh	r2, [r7, #32]
 8016880:	429a      	cmp	r2, r3
 8016882:	d906      	bls.n	8016892 <ip4_reass+0x296>
 8016884:	4b0b      	ldr	r3, [pc, #44]	; (80168b4 <ip4_reass+0x2b8>)
 8016886:	f240 229b 	movw	r2, #667	; 0x29b
 801688a:	490b      	ldr	r1, [pc, #44]	; (80168b8 <ip4_reass+0x2bc>)
 801688c:	480b      	ldr	r0, [pc, #44]	; (80168bc <ip4_reass+0x2c0>)
 801688e:	f000 fc6b 	bl	8017168 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8016892:	4b06      	ldr	r3, [pc, #24]	; (80168ac <ip4_reass+0x2b0>)
 8016894:	881a      	ldrh	r2, [r3, #0]
 8016896:	8c3b      	ldrh	r3, [r7, #32]
 8016898:	1ad3      	subs	r3, r2, r3
 801689a:	b29a      	uxth	r2, r3
 801689c:	4b03      	ldr	r3, [pc, #12]	; (80168ac <ip4_reass+0x2b0>)
 801689e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	e038      	b.n	8016916 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80168a4:	2300      	movs	r3, #0
 80168a6:	e036      	b.n	8016916 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80168a8:	bf00      	nop
 80168aa:	e00a      	b.n	80168c2 <ip4_reass+0x2c6>
 80168ac:	2000db84 	.word	0x2000db84
 80168b0:	2000db80 	.word	0x2000db80
 80168b4:	0801d01c 	.word	0x0801d01c
 80168b8:	0801d18c 	.word	0x0801d18c
 80168bc:	0801d064 	.word	0x0801d064
    goto nullreturn_ipr;
 80168c0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80168c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d106      	bne.n	80168d6 <ip4_reass+0x2da>
 80168c8:	4b15      	ldr	r3, [pc, #84]	; (8016920 <ip4_reass+0x324>)
 80168ca:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80168ce:	4915      	ldr	r1, [pc, #84]	; (8016924 <ip4_reass+0x328>)
 80168d0:	4815      	ldr	r0, [pc, #84]	; (8016928 <ip4_reass+0x32c>)
 80168d2:	f000 fc49 	bl	8017168 <iprintf>
  if (ipr->p == NULL) {
 80168d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168d8:	685b      	ldr	r3, [r3, #4]
 80168da:	2b00      	cmp	r3, #0
 80168dc:	d116      	bne.n	801690c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80168de:	4b13      	ldr	r3, [pc, #76]	; (801692c <ip4_reass+0x330>)
 80168e0:	681b      	ldr	r3, [r3, #0]
 80168e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80168e4:	429a      	cmp	r2, r3
 80168e6:	d006      	beq.n	80168f6 <ip4_reass+0x2fa>
 80168e8:	4b0d      	ldr	r3, [pc, #52]	; (8016920 <ip4_reass+0x324>)
 80168ea:	f240 22ab 	movw	r2, #683	; 0x2ab
 80168ee:	4910      	ldr	r1, [pc, #64]	; (8016930 <ip4_reass+0x334>)
 80168f0:	480d      	ldr	r0, [pc, #52]	; (8016928 <ip4_reass+0x32c>)
 80168f2:	f000 fc39 	bl	8017168 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80168f6:	2100      	movs	r1, #0
 80168f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80168fa:	f7ff fce7 	bl	80162cc <ip_reass_dequeue_datagram>
 80168fe:	e006      	b.n	801690e <ip4_reass+0x312>
    goto nullreturn;
 8016900:	bf00      	nop
 8016902:	e004      	b.n	801690e <ip4_reass+0x312>
    goto nullreturn;
 8016904:	bf00      	nop
 8016906:	e002      	b.n	801690e <ip4_reass+0x312>
      goto nullreturn;
 8016908:	bf00      	nop
 801690a:	e000      	b.n	801690e <ip4_reass+0x312>
  }

nullreturn:
 801690c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801690e:	6878      	ldr	r0, [r7, #4]
 8016910:	f7f4 fe58 	bl	800b5c4 <pbuf_free>
  return NULL;
 8016914:	2300      	movs	r3, #0
}
 8016916:	4618      	mov	r0, r3
 8016918:	3738      	adds	r7, #56	; 0x38
 801691a:	46bd      	mov	sp, r7
 801691c:	bd80      	pop	{r7, pc}
 801691e:	bf00      	nop
 8016920:	0801d01c 	.word	0x0801d01c
 8016924:	0801d1a8 	.word	0x0801d1a8
 8016928:	0801d064 	.word	0x0801d064
 801692c:	2000db80 	.word	0x2000db80
 8016930:	0801d1b4 	.word	0x0801d1b4

08016934 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016934:	b580      	push	{r7, lr}
 8016936:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016938:	2005      	movs	r0, #5
 801693a:	f7f3 fe27 	bl	800a58c <memp_malloc>
 801693e:	4603      	mov	r3, r0
}
 8016940:	4618      	mov	r0, r3
 8016942:	bd80      	pop	{r7, pc}

08016944 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016944:	b580      	push	{r7, lr}
 8016946:	b082      	sub	sp, #8
 8016948:	af00      	add	r7, sp, #0
 801694a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	2b00      	cmp	r3, #0
 8016950:	d106      	bne.n	8016960 <ip_frag_free_pbuf_custom_ref+0x1c>
 8016952:	4b07      	ldr	r3, [pc, #28]	; (8016970 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016954:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8016958:	4906      	ldr	r1, [pc, #24]	; (8016974 <ip_frag_free_pbuf_custom_ref+0x30>)
 801695a:	4807      	ldr	r0, [pc, #28]	; (8016978 <ip_frag_free_pbuf_custom_ref+0x34>)
 801695c:	f000 fc04 	bl	8017168 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016960:	6879      	ldr	r1, [r7, #4]
 8016962:	2005      	movs	r0, #5
 8016964:	f7f3 fe88 	bl	800a678 <memp_free>
}
 8016968:	bf00      	nop
 801696a:	3708      	adds	r7, #8
 801696c:	46bd      	mov	sp, r7
 801696e:	bd80      	pop	{r7, pc}
 8016970:	0801d01c 	.word	0x0801d01c
 8016974:	0801d1d4 	.word	0x0801d1d4
 8016978:	0801d064 	.word	0x0801d064

0801697c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801697c:	b580      	push	{r7, lr}
 801697e:	b084      	sub	sp, #16
 8016980:	af00      	add	r7, sp, #0
 8016982:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016988:	68fb      	ldr	r3, [r7, #12]
 801698a:	2b00      	cmp	r3, #0
 801698c:	d106      	bne.n	801699c <ipfrag_free_pbuf_custom+0x20>
 801698e:	4b11      	ldr	r3, [pc, #68]	; (80169d4 <ipfrag_free_pbuf_custom+0x58>)
 8016990:	f240 22ce 	movw	r2, #718	; 0x2ce
 8016994:	4910      	ldr	r1, [pc, #64]	; (80169d8 <ipfrag_free_pbuf_custom+0x5c>)
 8016996:	4811      	ldr	r0, [pc, #68]	; (80169dc <ipfrag_free_pbuf_custom+0x60>)
 8016998:	f000 fbe6 	bl	8017168 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801699c:	68fa      	ldr	r2, [r7, #12]
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	429a      	cmp	r2, r3
 80169a2:	d006      	beq.n	80169b2 <ipfrag_free_pbuf_custom+0x36>
 80169a4:	4b0b      	ldr	r3, [pc, #44]	; (80169d4 <ipfrag_free_pbuf_custom+0x58>)
 80169a6:	f240 22cf 	movw	r2, #719	; 0x2cf
 80169aa:	490d      	ldr	r1, [pc, #52]	; (80169e0 <ipfrag_free_pbuf_custom+0x64>)
 80169ac:	480b      	ldr	r0, [pc, #44]	; (80169dc <ipfrag_free_pbuf_custom+0x60>)
 80169ae:	f000 fbdb 	bl	8017168 <iprintf>
  if (pcr->original != NULL) {
 80169b2:	68fb      	ldr	r3, [r7, #12]
 80169b4:	695b      	ldr	r3, [r3, #20]
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d004      	beq.n	80169c4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80169ba:	68fb      	ldr	r3, [r7, #12]
 80169bc:	695b      	ldr	r3, [r3, #20]
 80169be:	4618      	mov	r0, r3
 80169c0:	f7f4 fe00 	bl	800b5c4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80169c4:	68f8      	ldr	r0, [r7, #12]
 80169c6:	f7ff ffbd 	bl	8016944 <ip_frag_free_pbuf_custom_ref>
}
 80169ca:	bf00      	nop
 80169cc:	3710      	adds	r7, #16
 80169ce:	46bd      	mov	sp, r7
 80169d0:	bd80      	pop	{r7, pc}
 80169d2:	bf00      	nop
 80169d4:	0801d01c 	.word	0x0801d01c
 80169d8:	0801d1e0 	.word	0x0801d1e0
 80169dc:	0801d064 	.word	0x0801d064
 80169e0:	0801d1ec 	.word	0x0801d1ec

080169e4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80169e4:	b580      	push	{r7, lr}
 80169e6:	b094      	sub	sp, #80	; 0x50
 80169e8:	af02      	add	r7, sp, #8
 80169ea:	60f8      	str	r0, [r7, #12]
 80169ec:	60b9      	str	r1, [r7, #8]
 80169ee:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80169f0:	2300      	movs	r3, #0
 80169f2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80169f6:	68bb      	ldr	r3, [r7, #8]
 80169f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80169fa:	3b14      	subs	r3, #20
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	da00      	bge.n	8016a02 <ip4_frag+0x1e>
 8016a00:	3307      	adds	r3, #7
 8016a02:	10db      	asrs	r3, r3, #3
 8016a04:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016a06:	2314      	movs	r3, #20
 8016a08:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016a0a:	68fb      	ldr	r3, [r7, #12]
 8016a0c:	685b      	ldr	r3, [r3, #4]
 8016a0e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8016a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a12:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a16:	781b      	ldrb	r3, [r3, #0]
 8016a18:	f003 030f 	and.w	r3, r3, #15
 8016a1c:	b2db      	uxtb	r3, r3
 8016a1e:	009b      	lsls	r3, r3, #2
 8016a20:	b2db      	uxtb	r3, r3
 8016a22:	2b14      	cmp	r3, #20
 8016a24:	d002      	beq.n	8016a2c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8016a26:	f06f 0305 	mvn.w	r3, #5
 8016a2a:	e110      	b.n	8016c4e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016a2c:	68fb      	ldr	r3, [r7, #12]
 8016a2e:	895b      	ldrh	r3, [r3, #10]
 8016a30:	2b13      	cmp	r3, #19
 8016a32:	d809      	bhi.n	8016a48 <ip4_frag+0x64>
 8016a34:	4b88      	ldr	r3, [pc, #544]	; (8016c58 <ip4_frag+0x274>)
 8016a36:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8016a3a:	4988      	ldr	r1, [pc, #544]	; (8016c5c <ip4_frag+0x278>)
 8016a3c:	4888      	ldr	r0, [pc, #544]	; (8016c60 <ip4_frag+0x27c>)
 8016a3e:	f000 fb93 	bl	8017168 <iprintf>
 8016a42:	f06f 0305 	mvn.w	r3, #5
 8016a46:	e102      	b.n	8016c4e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a4a:	88db      	ldrh	r3, [r3, #6]
 8016a4c:	b29b      	uxth	r3, r3
 8016a4e:	4618      	mov	r0, r3
 8016a50:	f7f2 fdd6 	bl	8009600 <lwip_htons>
 8016a54:	4603      	mov	r3, r0
 8016a56:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8016a58:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016a5a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016a5e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8016a62:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016a64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016a68:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8016a6a:	68fb      	ldr	r3, [r7, #12]
 8016a6c:	891b      	ldrh	r3, [r3, #8]
 8016a6e:	3b14      	subs	r3, #20
 8016a70:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8016a74:	e0e1      	b.n	8016c3a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8016a76:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016a78:	00db      	lsls	r3, r3, #3
 8016a7a:	b29b      	uxth	r3, r3
 8016a7c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016a80:	4293      	cmp	r3, r2
 8016a82:	bf28      	it	cs
 8016a84:	4613      	movcs	r3, r2
 8016a86:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016a88:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016a8c:	2114      	movs	r1, #20
 8016a8e:	200e      	movs	r0, #14
 8016a90:	f7f4 fab4 	bl	800affc <pbuf_alloc>
 8016a94:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8016a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	f000 80d5 	beq.w	8016c48 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aa0:	895b      	ldrh	r3, [r3, #10]
 8016aa2:	2b13      	cmp	r3, #19
 8016aa4:	d806      	bhi.n	8016ab4 <ip4_frag+0xd0>
 8016aa6:	4b6c      	ldr	r3, [pc, #432]	; (8016c58 <ip4_frag+0x274>)
 8016aa8:	f44f 7249 	mov.w	r2, #804	; 0x324
 8016aac:	496d      	ldr	r1, [pc, #436]	; (8016c64 <ip4_frag+0x280>)
 8016aae:	486c      	ldr	r0, [pc, #432]	; (8016c60 <ip4_frag+0x27c>)
 8016ab0:	f000 fb5a 	bl	8017168 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ab6:	685b      	ldr	r3, [r3, #4]
 8016ab8:	2214      	movs	r2, #20
 8016aba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016abc:	4618      	mov	r0, r3
 8016abe:	f000 fb3d 	bl	801713c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ac4:	685b      	ldr	r3, [r3, #4]
 8016ac6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8016ac8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016aca:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8016ace:	e064      	b.n	8016b9a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016ad0:	68fb      	ldr	r3, [r7, #12]
 8016ad2:	895a      	ldrh	r2, [r3, #10]
 8016ad4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016ad6:	1ad3      	subs	r3, r2, r3
 8016ad8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016ada:	68fb      	ldr	r3, [r7, #12]
 8016adc:	895b      	ldrh	r3, [r3, #10]
 8016ade:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016ae0:	429a      	cmp	r2, r3
 8016ae2:	d906      	bls.n	8016af2 <ip4_frag+0x10e>
 8016ae4:	4b5c      	ldr	r3, [pc, #368]	; (8016c58 <ip4_frag+0x274>)
 8016ae6:	f240 322d 	movw	r2, #813	; 0x32d
 8016aea:	495f      	ldr	r1, [pc, #380]	; (8016c68 <ip4_frag+0x284>)
 8016aec:	485c      	ldr	r0, [pc, #368]	; (8016c60 <ip4_frag+0x27c>)
 8016aee:	f000 fb3b 	bl	8017168 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016af2:	8bfa      	ldrh	r2, [r7, #30]
 8016af4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016af8:	4293      	cmp	r3, r2
 8016afa:	bf28      	it	cs
 8016afc:	4613      	movcs	r3, r2
 8016afe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016b02:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	d105      	bne.n	8016b16 <ip4_frag+0x132>
        poff = 0;
 8016b0a:	2300      	movs	r3, #0
 8016b0c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016b0e:	68fb      	ldr	r3, [r7, #12]
 8016b10:	681b      	ldr	r3, [r3, #0]
 8016b12:	60fb      	str	r3, [r7, #12]
        continue;
 8016b14:	e041      	b.n	8016b9a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016b16:	f7ff ff0d 	bl	8016934 <ip_frag_alloc_pbuf_custom_ref>
 8016b1a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016b1c:	69bb      	ldr	r3, [r7, #24]
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	d103      	bne.n	8016b2a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8016b22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016b24:	f7f4 fd4e 	bl	800b5c4 <pbuf_free>
        goto memerr;
 8016b28:	e08f      	b.n	8016c4a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016b2a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016b2c:	68fb      	ldr	r3, [r7, #12]
 8016b2e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016b30:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016b32:	4413      	add	r3, r2
 8016b34:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8016b38:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016b3c:	9201      	str	r2, [sp, #4]
 8016b3e:	9300      	str	r3, [sp, #0]
 8016b40:	4603      	mov	r3, r0
 8016b42:	2241      	movs	r2, #65	; 0x41
 8016b44:	2000      	movs	r0, #0
 8016b46:	f7f4 fb83 	bl	800b250 <pbuf_alloced_custom>
 8016b4a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016b4c:	697b      	ldr	r3, [r7, #20]
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d106      	bne.n	8016b60 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8016b52:	69b8      	ldr	r0, [r7, #24]
 8016b54:	f7ff fef6 	bl	8016944 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016b58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016b5a:	f7f4 fd33 	bl	800b5c4 <pbuf_free>
        goto memerr;
 8016b5e:	e074      	b.n	8016c4a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8016b60:	68f8      	ldr	r0, [r7, #12]
 8016b62:	f7f4 fdd5 	bl	800b710 <pbuf_ref>
      pcr->original = p;
 8016b66:	69bb      	ldr	r3, [r7, #24]
 8016b68:	68fa      	ldr	r2, [r7, #12]
 8016b6a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016b6c:	69bb      	ldr	r3, [r7, #24]
 8016b6e:	4a3f      	ldr	r2, [pc, #252]	; (8016c6c <ip4_frag+0x288>)
 8016b70:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8016b72:	6979      	ldr	r1, [r7, #20]
 8016b74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016b76:	f7f4 fdf3 	bl	800b760 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016b7a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8016b7e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016b82:	1ad3      	subs	r3, r2, r3
 8016b84:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8016b88:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d004      	beq.n	8016b9a <ip4_frag+0x1b6>
        poff = 0;
 8016b90:	2300      	movs	r3, #0
 8016b92:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016b94:	68fb      	ldr	r3, [r7, #12]
 8016b96:	681b      	ldr	r3, [r3, #0]
 8016b98:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016b9a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	d196      	bne.n	8016ad0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8016ba2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016ba4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016ba8:	4413      	add	r3, r2
 8016baa:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016bac:	68bb      	ldr	r3, [r7, #8]
 8016bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016bb0:	f1a3 0213 	sub.w	r2, r3, #19
 8016bb4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016bb8:	429a      	cmp	r2, r3
 8016bba:	bfcc      	ite	gt
 8016bbc:	2301      	movgt	r3, #1
 8016bbe:	2300      	movle	r3, #0
 8016bc0:	b2db      	uxtb	r3, r3
 8016bc2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016bc4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016bc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016bcc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8016bce:	6a3b      	ldr	r3, [r7, #32]
 8016bd0:	2b00      	cmp	r3, #0
 8016bd2:	d002      	beq.n	8016bda <ip4_frag+0x1f6>
 8016bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d003      	beq.n	8016be2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016bda:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016bdc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016be0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016be2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016be4:	4618      	mov	r0, r3
 8016be6:	f7f2 fd0b 	bl	8009600 <lwip_htons>
 8016bea:	4603      	mov	r3, r0
 8016bec:	461a      	mov	r2, r3
 8016bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bf0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016bf2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016bf4:	3314      	adds	r3, #20
 8016bf6:	b29b      	uxth	r3, r3
 8016bf8:	4618      	mov	r0, r3
 8016bfa:	f7f2 fd01 	bl	8009600 <lwip_htons>
 8016bfe:	4603      	mov	r3, r0
 8016c00:	461a      	mov	r2, r3
 8016c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c04:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c08:	2200      	movs	r2, #0
 8016c0a:	729a      	strb	r2, [r3, #10]
 8016c0c:	2200      	movs	r2, #0
 8016c0e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016c10:	68bb      	ldr	r3, [r7, #8]
 8016c12:	695b      	ldr	r3, [r3, #20]
 8016c14:	687a      	ldr	r2, [r7, #4]
 8016c16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016c18:	68b8      	ldr	r0, [r7, #8]
 8016c1a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016c1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016c1e:	f7f4 fcd1 	bl	800b5c4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8016c22:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016c26:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016c28:	1ad3      	subs	r3, r2, r3
 8016c2a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8016c2e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8016c32:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016c34:	4413      	add	r3, r2
 8016c36:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8016c3a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	f47f af19 	bne.w	8016a76 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016c44:	2300      	movs	r3, #0
 8016c46:	e002      	b.n	8016c4e <ip4_frag+0x26a>
      goto memerr;
 8016c48:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016c4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016c4e:	4618      	mov	r0, r3
 8016c50:	3748      	adds	r7, #72	; 0x48
 8016c52:	46bd      	mov	sp, r7
 8016c54:	bd80      	pop	{r7, pc}
 8016c56:	bf00      	nop
 8016c58:	0801d01c 	.word	0x0801d01c
 8016c5c:	0801d1f8 	.word	0x0801d1f8
 8016c60:	0801d064 	.word	0x0801d064
 8016c64:	0801d214 	.word	0x0801d214
 8016c68:	0801d234 	.word	0x0801d234
 8016c6c:	0801697d 	.word	0x0801697d

08016c70 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016c74:	b096      	sub	sp, #88	; 0x58
 8016c76:	af0a      	add	r7, sp, #40	; 0x28
 8016c78:	61f8      	str	r0, [r7, #28]
 8016c7a:	61b9      	str	r1, [r7, #24]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016c7c:	230e      	movs	r3, #14
 8016c7e:	85fb      	strh	r3, [r7, #46]	; 0x2e
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016c80:	69fb      	ldr	r3, [r7, #28]
 8016c82:	895b      	ldrh	r3, [r3, #10]
 8016c84:	2b0e      	cmp	r3, #14
 8016c86:	f240 80c8 	bls.w	8016e1a <ethernet_input+0x1aa>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016c8a:	69fb      	ldr	r3, [r7, #28]
 8016c8c:	7bdb      	ldrb	r3, [r3, #15]
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d106      	bne.n	8016ca0 <ethernet_input+0x30>
    p->if_idx = netif_get_index(netif);
 8016c92:	69bb      	ldr	r3, [r7, #24]
 8016c94:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016c98:	3301      	adds	r3, #1
 8016c9a:	b2da      	uxtb	r2, r3
 8016c9c:	69fb      	ldr	r3, [r7, #28]
 8016c9e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016ca0:	69fb      	ldr	r3, [r7, #28]
 8016ca2:	685b      	ldr	r3, [r3, #4]
 8016ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
 8016ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ca8:	781b      	ldrb	r3, [r3, #0]
 8016caa:	4698      	mov	r8, r3
 8016cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cae:	785b      	ldrb	r3, [r3, #1]
 8016cb0:	4699      	mov	r9, r3
 8016cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cb4:	789b      	ldrb	r3, [r3, #2]
 8016cb6:	469a      	mov	sl, r3
 8016cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cba:	78db      	ldrb	r3, [r3, #3]
 8016cbc:	461c      	mov	r4, r3
 8016cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cc0:	791b      	ldrb	r3, [r3, #4]
 8016cc2:	461d      	mov	r5, r3
 8016cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cc6:	795b      	ldrb	r3, [r3, #5]
 8016cc8:	461e      	mov	r6, r3
 8016cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ccc:	799b      	ldrb	r3, [r3, #6]
 8016cce:	617b      	str	r3, [r7, #20]
 8016cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cd2:	79db      	ldrb	r3, [r3, #7]
 8016cd4:	613b      	str	r3, [r7, #16]
 8016cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cd8:	7a1b      	ldrb	r3, [r3, #8]
 8016cda:	60fb      	str	r3, [r7, #12]
 8016cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cde:	7a5b      	ldrb	r3, [r3, #9]
 8016ce0:	60bb      	str	r3, [r7, #8]
 8016ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ce4:	7a9b      	ldrb	r3, [r3, #10]
 8016ce6:	607b      	str	r3, [r7, #4]
 8016ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cea:	7adb      	ldrb	r3, [r3, #11]
 8016cec:	603b      	str	r3, [r7, #0]
 8016cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016cf0:	899b      	ldrh	r3, [r3, #12]
 8016cf2:	b29b      	uxth	r3, r3
 8016cf4:	4618      	mov	r0, r3
 8016cf6:	f7f2 fc83 	bl	8009600 <lwip_htons>
 8016cfa:	4603      	mov	r3, r0
 8016cfc:	9309      	str	r3, [sp, #36]	; 0x24
 8016cfe:	683a      	ldr	r2, [r7, #0]
 8016d00:	9208      	str	r2, [sp, #32]
 8016d02:	687a      	ldr	r2, [r7, #4]
 8016d04:	9207      	str	r2, [sp, #28]
 8016d06:	68ba      	ldr	r2, [r7, #8]
 8016d08:	9206      	str	r2, [sp, #24]
 8016d0a:	68fa      	ldr	r2, [r7, #12]
 8016d0c:	9205      	str	r2, [sp, #20]
 8016d0e:	693a      	ldr	r2, [r7, #16]
 8016d10:	9204      	str	r2, [sp, #16]
 8016d12:	697b      	ldr	r3, [r7, #20]
 8016d14:	9303      	str	r3, [sp, #12]
 8016d16:	9602      	str	r6, [sp, #8]
 8016d18:	9501      	str	r5, [sp, #4]
 8016d1a:	9400      	str	r4, [sp, #0]
 8016d1c:	4653      	mov	r3, sl
 8016d1e:	464a      	mov	r2, r9
 8016d20:	4641      	mov	r1, r8
 8016d22:	4845      	ldr	r0, [pc, #276]	; (8016e38 <ethernet_input+0x1c8>)
 8016d24:	f000 fa20 	bl	8017168 <iprintf>
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d2a:	7b1a      	ldrb	r2, [r3, #12]
 8016d2c:	7b5b      	ldrb	r3, [r3, #13]
 8016d2e:	021b      	lsls	r3, r3, #8
 8016d30:	4313      	orrs	r3, r2
 8016d32:	84fb      	strh	r3, [r7, #38]	; 0x26

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d36:	781b      	ldrb	r3, [r3, #0]
 8016d38:	f003 0301 	and.w	r3, r3, #1
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	d023      	beq.n	8016d88 <ethernet_input+0x118>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d42:	781b      	ldrb	r3, [r3, #0]
 8016d44:	2b01      	cmp	r3, #1
 8016d46:	d10f      	bne.n	8016d68 <ethernet_input+0xf8>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d4a:	785b      	ldrb	r3, [r3, #1]
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	d11b      	bne.n	8016d88 <ethernet_input+0x118>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d52:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016d54:	2b5e      	cmp	r3, #94	; 0x5e
 8016d56:	d117      	bne.n	8016d88 <ethernet_input+0x118>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016d58:	69fb      	ldr	r3, [r7, #28]
 8016d5a:	7b5b      	ldrb	r3, [r3, #13]
 8016d5c:	f043 0310 	orr.w	r3, r3, #16
 8016d60:	b2da      	uxtb	r2, r3
 8016d62:	69fb      	ldr	r3, [r7, #28]
 8016d64:	735a      	strb	r2, [r3, #13]
 8016d66:	e00f      	b.n	8016d88 <ethernet_input+0x118>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d6a:	2206      	movs	r2, #6
 8016d6c:	4933      	ldr	r1, [pc, #204]	; (8016e3c <ethernet_input+0x1cc>)
 8016d6e:	4618      	mov	r0, r3
 8016d70:	f000 f9d4 	bl	801711c <memcmp>
 8016d74:	4603      	mov	r3, r0
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	d106      	bne.n	8016d88 <ethernet_input+0x118>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016d7a:	69fb      	ldr	r3, [r7, #28]
 8016d7c:	7b5b      	ldrb	r3, [r3, #13]
 8016d7e:	f043 0308 	orr.w	r3, r3, #8
 8016d82:	b2da      	uxtb	r2, r3
 8016d84:	69fb      	ldr	r3, [r7, #28]
 8016d86:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016d88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016d8a:	2b08      	cmp	r3, #8
 8016d8c:	d003      	beq.n	8016d96 <ethernet_input+0x126>
 8016d8e:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016d92:	d020      	beq.n	8016dd6 <ethernet_input+0x166>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016d94:	e046      	b.n	8016e24 <ethernet_input+0x1b4>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016d96:	69bb      	ldr	r3, [r7, #24]
 8016d98:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016d9c:	f003 0308 	and.w	r3, r3, #8
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d03c      	beq.n	8016e1e <ethernet_input+0x1ae>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016da4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016da6:	4619      	mov	r1, r3
 8016da8:	69f8      	ldr	r0, [r7, #28]
 8016daa:	f7f4 fb85 	bl	800b4b8 <pbuf_remove_header>
 8016dae:	4603      	mov	r3, r0
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	d00b      	beq.n	8016dcc <ethernet_input+0x15c>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 8016db4:	69fb      	ldr	r3, [r7, #28]
 8016db6:	891b      	ldrh	r3, [r3, #8]
 8016db8:	4619      	mov	r1, r3
 8016dba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016dbc:	461a      	mov	r2, r3
 8016dbe:	4820      	ldr	r0, [pc, #128]	; (8016e40 <ethernet_input+0x1d0>)
 8016dc0:	f000 f9d2 	bl	8017168 <iprintf>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
 8016dc4:	481f      	ldr	r0, [pc, #124]	; (8016e44 <ethernet_input+0x1d4>)
 8016dc6:	f000 f9cf 	bl	8017168 <iprintf>
        goto free_and_return;
 8016dca:	e02b      	b.n	8016e24 <ethernet_input+0x1b4>
        ip4_input(p, netif);
 8016dcc:	69b9      	ldr	r1, [r7, #24]
 8016dce:	69f8      	ldr	r0, [r7, #28]
 8016dd0:	f7fe fd2c 	bl	801582c <ip4_input>
      break;
 8016dd4:	e01f      	b.n	8016e16 <ethernet_input+0x1a6>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016dd6:	69bb      	ldr	r3, [r7, #24]
 8016dd8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016ddc:	f003 0308 	and.w	r3, r3, #8
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d01e      	beq.n	8016e22 <ethernet_input+0x1b2>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016de4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016de6:	4619      	mov	r1, r3
 8016de8:	69f8      	ldr	r0, [r7, #28]
 8016dea:	f7f4 fb65 	bl	800b4b8 <pbuf_remove_header>
 8016dee:	4603      	mov	r3, r0
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d00b      	beq.n	8016e0c <ethernet_input+0x19c>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 8016df4:	69fb      	ldr	r3, [r7, #28]
 8016df6:	891b      	ldrh	r3, [r3, #8]
 8016df8:	4619      	mov	r1, r3
 8016dfa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016dfc:	461a      	mov	r2, r3
 8016dfe:	4812      	ldr	r0, [pc, #72]	; (8016e48 <ethernet_input+0x1d8>)
 8016e00:	f000 f9b2 	bl	8017168 <iprintf>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
 8016e04:	480f      	ldr	r0, [pc, #60]	; (8016e44 <ethernet_input+0x1d4>)
 8016e06:	f000 f9af 	bl	8017168 <iprintf>
        goto free_and_return;
 8016e0a:	e00b      	b.n	8016e24 <ethernet_input+0x1b4>
        etharp_input(p, netif);
 8016e0c:	69b9      	ldr	r1, [r7, #24]
 8016e0e:	69f8      	ldr	r0, [r7, #28]
 8016e10:	f7fd fd74 	bl	80148fc <etharp_input>
      break;
 8016e14:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016e16:	2300      	movs	r3, #0
 8016e18:	e008      	b.n	8016e2c <ethernet_input+0x1bc>
    goto free_and_return;
 8016e1a:	bf00      	nop
 8016e1c:	e002      	b.n	8016e24 <ethernet_input+0x1b4>
        goto free_and_return;
 8016e1e:	bf00      	nop
 8016e20:	e000      	b.n	8016e24 <ethernet_input+0x1b4>
        goto free_and_return;
 8016e22:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016e24:	69f8      	ldr	r0, [r7, #28]
 8016e26:	f7f4 fbcd 	bl	800b5c4 <pbuf_free>
  return ERR_OK;
 8016e2a:	2300      	movs	r3, #0
}
 8016e2c:	4618      	mov	r0, r3
 8016e2e:	3730      	adds	r7, #48	; 0x30
 8016e30:	46bd      	mov	sp, r7
 8016e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e36:	bf00      	nop
 8016e38:	0801d244 	.word	0x0801d244
 8016e3c:	0801d630 	.word	0x0801d630
 8016e40:	0801d2c0 	.word	0x0801d2c0
 8016e44:	0801d2fc 	.word	0x0801d2fc
 8016e48:	0801d320 	.word	0x0801d320

08016e4c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016e4c:	b580      	push	{r7, lr}
 8016e4e:	b086      	sub	sp, #24
 8016e50:	af00      	add	r7, sp, #0
 8016e52:	60f8      	str	r0, [r7, #12]
 8016e54:	60b9      	str	r1, [r7, #8]
 8016e56:	607a      	str	r2, [r7, #4]
 8016e58:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016e5a:	8c3b      	ldrh	r3, [r7, #32]
 8016e5c:	4618      	mov	r0, r3
 8016e5e:	f7f2 fbcf 	bl	8009600 <lwip_htons>
 8016e62:	4603      	mov	r3, r0
 8016e64:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016e66:	210e      	movs	r1, #14
 8016e68:	68b8      	ldr	r0, [r7, #8]
 8016e6a:	f7f4 fb15 	bl	800b498 <pbuf_add_header>
 8016e6e:	4603      	mov	r3, r0
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	d129      	bne.n	8016ec8 <ethernet_output+0x7c>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016e74:	68bb      	ldr	r3, [r7, #8]
 8016e76:	685b      	ldr	r3, [r3, #4]
 8016e78:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016e7a:	693b      	ldr	r3, [r7, #16]
 8016e7c:	8afa      	ldrh	r2, [r7, #22]
 8016e7e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016e80:	693b      	ldr	r3, [r7, #16]
 8016e82:	2206      	movs	r2, #6
 8016e84:	6839      	ldr	r1, [r7, #0]
 8016e86:	4618      	mov	r0, r3
 8016e88:	f000 f958 	bl	801713c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016e8c:	693b      	ldr	r3, [r7, #16]
 8016e8e:	3306      	adds	r3, #6
 8016e90:	2206      	movs	r2, #6
 8016e92:	6879      	ldr	r1, [r7, #4]
 8016e94:	4618      	mov	r0, r3
 8016e96:	f000 f951 	bl	801713c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016e9a:	68fb      	ldr	r3, [r7, #12]
 8016e9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016ea0:	2b06      	cmp	r3, #6
 8016ea2:	d006      	beq.n	8016eb2 <ethernet_output+0x66>
 8016ea4:	4b0d      	ldr	r3, [pc, #52]	; (8016edc <ethernet_output+0x90>)
 8016ea6:	f44f 7299 	mov.w	r2, #306	; 0x132
 8016eaa:	490d      	ldr	r1, [pc, #52]	; (8016ee0 <ethernet_output+0x94>)
 8016eac:	480d      	ldr	r0, [pc, #52]	; (8016ee4 <ethernet_output+0x98>)
 8016eae:	f000 f95b 	bl	8017168 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
 8016eb2:	68b9      	ldr	r1, [r7, #8]
 8016eb4:	480c      	ldr	r0, [pc, #48]	; (8016ee8 <ethernet_output+0x9c>)
 8016eb6:	f000 f957 	bl	8017168 <iprintf>
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016eba:	68fb      	ldr	r3, [r7, #12]
 8016ebc:	699b      	ldr	r3, [r3, #24]
 8016ebe:	68b9      	ldr	r1, [r7, #8]
 8016ec0:	68f8      	ldr	r0, [r7, #12]
 8016ec2:	4798      	blx	r3
 8016ec4:	4603      	mov	r3, r0
 8016ec6:	e005      	b.n	8016ed4 <ethernet_output+0x88>
      goto pbuf_header_failed;
 8016ec8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 8016eca:	4808      	ldr	r0, [pc, #32]	; (8016eec <ethernet_output+0xa0>)
 8016ecc:	f000 f9e8 	bl	80172a0 <puts>
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016ed0:	f06f 0301 	mvn.w	r3, #1
}
 8016ed4:	4618      	mov	r0, r3
 8016ed6:	3718      	adds	r7, #24
 8016ed8:	46bd      	mov	sp, r7
 8016eda:	bd80      	pop	{r7, pc}
 8016edc:	0801d364 	.word	0x0801d364
 8016ee0:	0801d39c 	.word	0x0801d39c
 8016ee4:	0801d3d0 	.word	0x0801d3d0
 8016ee8:	0801d3f8 	.word	0x0801d3f8
 8016eec:	0801d41c 	.word	0x0801d41c

08016ef0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8016ef0:	b580      	push	{r7, lr}
 8016ef2:	b082      	sub	sp, #8
 8016ef4:	af00      	add	r7, sp, #0
 8016ef6:	6078      	str	r0, [r7, #4]
 8016ef8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8016efa:	683b      	ldr	r3, [r7, #0]
 8016efc:	2200      	movs	r2, #0
 8016efe:	2104      	movs	r1, #4
 8016f00:	4618      	mov	r0, r3
 8016f02:	f7ee ff39 	bl	8005d78 <osMessageQueueNew>
 8016f06:	4602      	mov	r2, r0
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	681b      	ldr	r3, [r3, #0]
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	d102      	bne.n	8016f1a <sys_mbox_new+0x2a>
    return ERR_MEM;
 8016f14:	f04f 33ff 	mov.w	r3, #4294967295
 8016f18:	e000      	b.n	8016f1c <sys_mbox_new+0x2c>

  return ERR_OK;
 8016f1a:	2300      	movs	r3, #0
}
 8016f1c:	4618      	mov	r0, r3
 8016f1e:	3708      	adds	r7, #8
 8016f20:	46bd      	mov	sp, r7
 8016f22:	bd80      	pop	{r7, pc}

08016f24 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8016f24:	b580      	push	{r7, lr}
 8016f26:	b084      	sub	sp, #16
 8016f28:	af00      	add	r7, sp, #0
 8016f2a:	6078      	str	r0, [r7, #4]
 8016f2c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	6818      	ldr	r0, [r3, #0]
 8016f32:	4639      	mov	r1, r7
 8016f34:	2300      	movs	r3, #0
 8016f36:	2200      	movs	r2, #0
 8016f38:	f7ee ff92 	bl	8005e60 <osMessageQueuePut>
 8016f3c:	4603      	mov	r3, r0
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d102      	bne.n	8016f48 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8016f42:	2300      	movs	r3, #0
 8016f44:	73fb      	strb	r3, [r7, #15]
 8016f46:	e001      	b.n	8016f4c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8016f48:	23ff      	movs	r3, #255	; 0xff
 8016f4a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8016f4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016f50:	4618      	mov	r0, r3
 8016f52:	3710      	adds	r7, #16
 8016f54:	46bd      	mov	sp, r7
 8016f56:	bd80      	pop	{r7, pc}

08016f58 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8016f58:	b580      	push	{r7, lr}
 8016f5a:	b086      	sub	sp, #24
 8016f5c:	af00      	add	r7, sp, #0
 8016f5e:	60f8      	str	r0, [r7, #12]
 8016f60:	60b9      	str	r1, [r7, #8]
 8016f62:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8016f64:	f7ee fc18 	bl	8005798 <osKernelGetTickCount>
 8016f68:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d013      	beq.n	8016f98 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8016f70:	68fb      	ldr	r3, [r7, #12]
 8016f72:	6818      	ldr	r0, [r3, #0]
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	2200      	movs	r2, #0
 8016f78:	68b9      	ldr	r1, [r7, #8]
 8016f7a:	f7ee ffd1 	bl	8005f20 <osMessageQueueGet>
 8016f7e:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8016f80:	693b      	ldr	r3, [r7, #16]
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d105      	bne.n	8016f92 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8016f86:	f7ee fc07 	bl	8005798 <osKernelGetTickCount>
 8016f8a:	4602      	mov	r2, r0
 8016f8c:	697b      	ldr	r3, [r7, #20]
 8016f8e:	1ad3      	subs	r3, r2, r3
 8016f90:	e00f      	b.n	8016fb2 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016f92:	f04f 33ff 	mov.w	r3, #4294967295
 8016f96:	e00c      	b.n	8016fb2 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8016f98:	68fb      	ldr	r3, [r7, #12]
 8016f9a:	6818      	ldr	r0, [r3, #0]
 8016f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8016fa0:	2200      	movs	r2, #0
 8016fa2:	68b9      	ldr	r1, [r7, #8]
 8016fa4:	f7ee ffbc 	bl	8005f20 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8016fa8:	f7ee fbf6 	bl	8005798 <osKernelGetTickCount>
 8016fac:	4602      	mov	r2, r0
 8016fae:	697b      	ldr	r3, [r7, #20]
 8016fb0:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8016fb2:	4618      	mov	r0, r3
 8016fb4:	3718      	adds	r7, #24
 8016fb6:	46bd      	mov	sp, r7
 8016fb8:	bd80      	pop	{r7, pc}

08016fba <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8016fba:	b480      	push	{r7}
 8016fbc:	b083      	sub	sp, #12
 8016fbe:	af00      	add	r7, sp, #0
 8016fc0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	681b      	ldr	r3, [r3, #0]
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d101      	bne.n	8016fce <sys_mbox_valid+0x14>
    return 0;
 8016fca:	2300      	movs	r3, #0
 8016fcc:	e000      	b.n	8016fd0 <sys_mbox_valid+0x16>
  else
    return 1;
 8016fce:	2301      	movs	r3, #1
}
 8016fd0:	4618      	mov	r0, r3
 8016fd2:	370c      	adds	r7, #12
 8016fd4:	46bd      	mov	sp, r7
 8016fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fda:	4770      	bx	lr

08016fdc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8016fdc:	b580      	push	{r7, lr}
 8016fde:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8016fe0:	2000      	movs	r0, #0
 8016fe2:	f7ee fc9b 	bl	800591c <osMutexNew>
 8016fe6:	4603      	mov	r3, r0
 8016fe8:	4a01      	ldr	r2, [pc, #4]	; (8016ff0 <sys_init+0x14>)
 8016fea:	6013      	str	r3, [r2, #0]
#endif
}
 8016fec:	bf00      	nop
 8016fee:	bd80      	pop	{r7, pc}
 8016ff0:	2000db8c 	.word	0x2000db8c

08016ff4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8016ff4:	b580      	push	{r7, lr}
 8016ff6:	b082      	sub	sp, #8
 8016ff8:	af00      	add	r7, sp, #0
 8016ffa:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8016ffc:	2000      	movs	r0, #0
 8016ffe:	f7ee fc8d 	bl	800591c <osMutexNew>
 8017002:	4602      	mov	r2, r0
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	681b      	ldr	r3, [r3, #0]
 801700c:	2b00      	cmp	r3, #0
 801700e:	d102      	bne.n	8017016 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017010:	f04f 33ff 	mov.w	r3, #4294967295
 8017014:	e000      	b.n	8017018 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8017016:	2300      	movs	r3, #0
}
 8017018:	4618      	mov	r0, r3
 801701a:	3708      	adds	r7, #8
 801701c:	46bd      	mov	sp, r7
 801701e:	bd80      	pop	{r7, pc}

08017020 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8017020:	b580      	push	{r7, lr}
 8017022:	b082      	sub	sp, #8
 8017024:	af00      	add	r7, sp, #0
 8017026:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8017028:	687b      	ldr	r3, [r7, #4]
 801702a:	681b      	ldr	r3, [r3, #0]
 801702c:	f04f 31ff 	mov.w	r1, #4294967295
 8017030:	4618      	mov	r0, r3
 8017032:	f7ee fcf9 	bl	8005a28 <osMutexAcquire>
#endif
}
 8017036:	bf00      	nop
 8017038:	3708      	adds	r7, #8
 801703a:	46bd      	mov	sp, r7
 801703c:	bd80      	pop	{r7, pc}

0801703e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801703e:	b580      	push	{r7, lr}
 8017040:	b082      	sub	sp, #8
 8017042:	af00      	add	r7, sp, #0
 8017044:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	681b      	ldr	r3, [r3, #0]
 801704a:	4618      	mov	r0, r3
 801704c:	f7ee fd37 	bl	8005abe <osMutexRelease>
}
 8017050:	bf00      	nop
 8017052:	3708      	adds	r7, #8
 8017054:	46bd      	mov	sp, r7
 8017056:	bd80      	pop	{r7, pc}

08017058 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8017058:	b580      	push	{r7, lr}
 801705a:	b08e      	sub	sp, #56	; 0x38
 801705c:	af00      	add	r7, sp, #0
 801705e:	60f8      	str	r0, [r7, #12]
 8017060:	60b9      	str	r1, [r7, #8]
 8017062:	607a      	str	r2, [r7, #4]
 8017064:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8017066:	f107 0314 	add.w	r3, r7, #20
 801706a:	2224      	movs	r2, #36	; 0x24
 801706c:	2100      	movs	r1, #0
 801706e:	4618      	mov	r0, r3
 8017070:	f000 f872 	bl	8017158 <memset>
 8017074:	68fb      	ldr	r3, [r7, #12]
 8017076:	617b      	str	r3, [r7, #20]
 8017078:	683b      	ldr	r3, [r7, #0]
 801707a:	62bb      	str	r3, [r7, #40]	; 0x28
 801707c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801707e:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8017080:	f107 0314 	add.w	r3, r7, #20
 8017084:	461a      	mov	r2, r3
 8017086:	6879      	ldr	r1, [r7, #4]
 8017088:	68b8      	ldr	r0, [r7, #8]
 801708a:	f7ee fb9a 	bl	80057c2 <osThreadNew>
 801708e:	4603      	mov	r3, r0
#endif
}
 8017090:	4618      	mov	r0, r3
 8017092:	3738      	adds	r7, #56	; 0x38
 8017094:	46bd      	mov	sp, r7
 8017096:	bd80      	pop	{r7, pc}

08017098 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8017098:	b580      	push	{r7, lr}
 801709a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801709c:	4b04      	ldr	r3, [pc, #16]	; (80170b0 <sys_arch_protect+0x18>)
 801709e:	681b      	ldr	r3, [r3, #0]
 80170a0:	f04f 31ff 	mov.w	r1, #4294967295
 80170a4:	4618      	mov	r0, r3
 80170a6:	f7ee fcbf 	bl	8005a28 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 80170aa:	2301      	movs	r3, #1
}
 80170ac:	4618      	mov	r0, r3
 80170ae:	bd80      	pop	{r7, pc}
 80170b0:	2000db8c 	.word	0x2000db8c

080170b4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80170b4:	b580      	push	{r7, lr}
 80170b6:	b082      	sub	sp, #8
 80170b8:	af00      	add	r7, sp, #0
 80170ba:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80170bc:	4b04      	ldr	r3, [pc, #16]	; (80170d0 <sys_arch_unprotect+0x1c>)
 80170be:	681b      	ldr	r3, [r3, #0]
 80170c0:	4618      	mov	r0, r3
 80170c2:	f7ee fcfc 	bl	8005abe <osMutexRelease>
}
 80170c6:	bf00      	nop
 80170c8:	3708      	adds	r7, #8
 80170ca:	46bd      	mov	sp, r7
 80170cc:	bd80      	pop	{r7, pc}
 80170ce:	bf00      	nop
 80170d0:	2000db8c 	.word	0x2000db8c

080170d4 <__libc_init_array>:
 80170d4:	b570      	push	{r4, r5, r6, lr}
 80170d6:	4d0d      	ldr	r5, [pc, #52]	; (801710c <__libc_init_array+0x38>)
 80170d8:	4c0d      	ldr	r4, [pc, #52]	; (8017110 <__libc_init_array+0x3c>)
 80170da:	1b64      	subs	r4, r4, r5
 80170dc:	10a4      	asrs	r4, r4, #2
 80170de:	2600      	movs	r6, #0
 80170e0:	42a6      	cmp	r6, r4
 80170e2:	d109      	bne.n	80170f8 <__libc_init_array+0x24>
 80170e4:	4d0b      	ldr	r5, [pc, #44]	; (8017114 <__libc_init_array+0x40>)
 80170e6:	4c0c      	ldr	r4, [pc, #48]	; (8017118 <__libc_init_array+0x44>)
 80170e8:	f001 f962 	bl	80183b0 <_init>
 80170ec:	1b64      	subs	r4, r4, r5
 80170ee:	10a4      	asrs	r4, r4, #2
 80170f0:	2600      	movs	r6, #0
 80170f2:	42a6      	cmp	r6, r4
 80170f4:	d105      	bne.n	8017102 <__libc_init_array+0x2e>
 80170f6:	bd70      	pop	{r4, r5, r6, pc}
 80170f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80170fc:	4798      	blx	r3
 80170fe:	3601      	adds	r6, #1
 8017100:	e7ee      	b.n	80170e0 <__libc_init_array+0xc>
 8017102:	f855 3b04 	ldr.w	r3, [r5], #4
 8017106:	4798      	blx	r3
 8017108:	3601      	adds	r6, #1
 801710a:	e7f2      	b.n	80170f2 <__libc_init_array+0x1e>
 801710c:	0801d790 	.word	0x0801d790
 8017110:	0801d790 	.word	0x0801d790
 8017114:	0801d790 	.word	0x0801d790
 8017118:	0801d794 	.word	0x0801d794

0801711c <memcmp>:
 801711c:	b510      	push	{r4, lr}
 801711e:	3901      	subs	r1, #1
 8017120:	4402      	add	r2, r0
 8017122:	4290      	cmp	r0, r2
 8017124:	d101      	bne.n	801712a <memcmp+0xe>
 8017126:	2000      	movs	r0, #0
 8017128:	e005      	b.n	8017136 <memcmp+0x1a>
 801712a:	7803      	ldrb	r3, [r0, #0]
 801712c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017130:	42a3      	cmp	r3, r4
 8017132:	d001      	beq.n	8017138 <memcmp+0x1c>
 8017134:	1b18      	subs	r0, r3, r4
 8017136:	bd10      	pop	{r4, pc}
 8017138:	3001      	adds	r0, #1
 801713a:	e7f2      	b.n	8017122 <memcmp+0x6>

0801713c <memcpy>:
 801713c:	440a      	add	r2, r1
 801713e:	4291      	cmp	r1, r2
 8017140:	f100 33ff 	add.w	r3, r0, #4294967295
 8017144:	d100      	bne.n	8017148 <memcpy+0xc>
 8017146:	4770      	bx	lr
 8017148:	b510      	push	{r4, lr}
 801714a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801714e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017152:	4291      	cmp	r1, r2
 8017154:	d1f9      	bne.n	801714a <memcpy+0xe>
 8017156:	bd10      	pop	{r4, pc}

08017158 <memset>:
 8017158:	4402      	add	r2, r0
 801715a:	4603      	mov	r3, r0
 801715c:	4293      	cmp	r3, r2
 801715e:	d100      	bne.n	8017162 <memset+0xa>
 8017160:	4770      	bx	lr
 8017162:	f803 1b01 	strb.w	r1, [r3], #1
 8017166:	e7f9      	b.n	801715c <memset+0x4>

08017168 <iprintf>:
 8017168:	b40f      	push	{r0, r1, r2, r3}
 801716a:	4b0a      	ldr	r3, [pc, #40]	; (8017194 <iprintf+0x2c>)
 801716c:	b513      	push	{r0, r1, r4, lr}
 801716e:	681c      	ldr	r4, [r3, #0]
 8017170:	b124      	cbz	r4, 801717c <iprintf+0x14>
 8017172:	69a3      	ldr	r3, [r4, #24]
 8017174:	b913      	cbnz	r3, 801717c <iprintf+0x14>
 8017176:	4620      	mov	r0, r4
 8017178:	f000 fad0 	bl	801771c <__sinit>
 801717c:	ab05      	add	r3, sp, #20
 801717e:	9a04      	ldr	r2, [sp, #16]
 8017180:	68a1      	ldr	r1, [r4, #8]
 8017182:	9301      	str	r3, [sp, #4]
 8017184:	4620      	mov	r0, r4
 8017186:	f000 fcf3 	bl	8017b70 <_vfiprintf_r>
 801718a:	b002      	add	sp, #8
 801718c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017190:	b004      	add	sp, #16
 8017192:	4770      	bx	lr
 8017194:	20000078 	.word	0x20000078

08017198 <putchar>:
 8017198:	4b09      	ldr	r3, [pc, #36]	; (80171c0 <putchar+0x28>)
 801719a:	b513      	push	{r0, r1, r4, lr}
 801719c:	681c      	ldr	r4, [r3, #0]
 801719e:	4601      	mov	r1, r0
 80171a0:	b134      	cbz	r4, 80171b0 <putchar+0x18>
 80171a2:	69a3      	ldr	r3, [r4, #24]
 80171a4:	b923      	cbnz	r3, 80171b0 <putchar+0x18>
 80171a6:	9001      	str	r0, [sp, #4]
 80171a8:	4620      	mov	r0, r4
 80171aa:	f000 fab7 	bl	801771c <__sinit>
 80171ae:	9901      	ldr	r1, [sp, #4]
 80171b0:	68a2      	ldr	r2, [r4, #8]
 80171b2:	4620      	mov	r0, r4
 80171b4:	b002      	add	sp, #8
 80171b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80171ba:	f000 bf9d 	b.w	80180f8 <_putc_r>
 80171be:	bf00      	nop
 80171c0:	20000078 	.word	0x20000078

080171c4 <_puts_r>:
 80171c4:	b570      	push	{r4, r5, r6, lr}
 80171c6:	460e      	mov	r6, r1
 80171c8:	4605      	mov	r5, r0
 80171ca:	b118      	cbz	r0, 80171d4 <_puts_r+0x10>
 80171cc:	6983      	ldr	r3, [r0, #24]
 80171ce:	b90b      	cbnz	r3, 80171d4 <_puts_r+0x10>
 80171d0:	f000 faa4 	bl	801771c <__sinit>
 80171d4:	69ab      	ldr	r3, [r5, #24]
 80171d6:	68ac      	ldr	r4, [r5, #8]
 80171d8:	b913      	cbnz	r3, 80171e0 <_puts_r+0x1c>
 80171da:	4628      	mov	r0, r5
 80171dc:	f000 fa9e 	bl	801771c <__sinit>
 80171e0:	4b2c      	ldr	r3, [pc, #176]	; (8017294 <_puts_r+0xd0>)
 80171e2:	429c      	cmp	r4, r3
 80171e4:	d120      	bne.n	8017228 <_puts_r+0x64>
 80171e6:	686c      	ldr	r4, [r5, #4]
 80171e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80171ea:	07db      	lsls	r3, r3, #31
 80171ec:	d405      	bmi.n	80171fa <_puts_r+0x36>
 80171ee:	89a3      	ldrh	r3, [r4, #12]
 80171f0:	0598      	lsls	r0, r3, #22
 80171f2:	d402      	bmi.n	80171fa <_puts_r+0x36>
 80171f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80171f6:	f000 fb41 	bl	801787c <__retarget_lock_acquire_recursive>
 80171fa:	89a3      	ldrh	r3, [r4, #12]
 80171fc:	0719      	lsls	r1, r3, #28
 80171fe:	d51d      	bpl.n	801723c <_puts_r+0x78>
 8017200:	6923      	ldr	r3, [r4, #16]
 8017202:	b1db      	cbz	r3, 801723c <_puts_r+0x78>
 8017204:	3e01      	subs	r6, #1
 8017206:	68a3      	ldr	r3, [r4, #8]
 8017208:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801720c:	3b01      	subs	r3, #1
 801720e:	60a3      	str	r3, [r4, #8]
 8017210:	bb39      	cbnz	r1, 8017262 <_puts_r+0x9e>
 8017212:	2b00      	cmp	r3, #0
 8017214:	da38      	bge.n	8017288 <_puts_r+0xc4>
 8017216:	4622      	mov	r2, r4
 8017218:	210a      	movs	r1, #10
 801721a:	4628      	mov	r0, r5
 801721c:	f000 f886 	bl	801732c <__swbuf_r>
 8017220:	3001      	adds	r0, #1
 8017222:	d011      	beq.n	8017248 <_puts_r+0x84>
 8017224:	250a      	movs	r5, #10
 8017226:	e011      	b.n	801724c <_puts_r+0x88>
 8017228:	4b1b      	ldr	r3, [pc, #108]	; (8017298 <_puts_r+0xd4>)
 801722a:	429c      	cmp	r4, r3
 801722c:	d101      	bne.n	8017232 <_puts_r+0x6e>
 801722e:	68ac      	ldr	r4, [r5, #8]
 8017230:	e7da      	b.n	80171e8 <_puts_r+0x24>
 8017232:	4b1a      	ldr	r3, [pc, #104]	; (801729c <_puts_r+0xd8>)
 8017234:	429c      	cmp	r4, r3
 8017236:	bf08      	it	eq
 8017238:	68ec      	ldreq	r4, [r5, #12]
 801723a:	e7d5      	b.n	80171e8 <_puts_r+0x24>
 801723c:	4621      	mov	r1, r4
 801723e:	4628      	mov	r0, r5
 8017240:	f000 f8c6 	bl	80173d0 <__swsetup_r>
 8017244:	2800      	cmp	r0, #0
 8017246:	d0dd      	beq.n	8017204 <_puts_r+0x40>
 8017248:	f04f 35ff 	mov.w	r5, #4294967295
 801724c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801724e:	07da      	lsls	r2, r3, #31
 8017250:	d405      	bmi.n	801725e <_puts_r+0x9a>
 8017252:	89a3      	ldrh	r3, [r4, #12]
 8017254:	059b      	lsls	r3, r3, #22
 8017256:	d402      	bmi.n	801725e <_puts_r+0x9a>
 8017258:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801725a:	f000 fb10 	bl	801787e <__retarget_lock_release_recursive>
 801725e:	4628      	mov	r0, r5
 8017260:	bd70      	pop	{r4, r5, r6, pc}
 8017262:	2b00      	cmp	r3, #0
 8017264:	da04      	bge.n	8017270 <_puts_r+0xac>
 8017266:	69a2      	ldr	r2, [r4, #24]
 8017268:	429a      	cmp	r2, r3
 801726a:	dc06      	bgt.n	801727a <_puts_r+0xb6>
 801726c:	290a      	cmp	r1, #10
 801726e:	d004      	beq.n	801727a <_puts_r+0xb6>
 8017270:	6823      	ldr	r3, [r4, #0]
 8017272:	1c5a      	adds	r2, r3, #1
 8017274:	6022      	str	r2, [r4, #0]
 8017276:	7019      	strb	r1, [r3, #0]
 8017278:	e7c5      	b.n	8017206 <_puts_r+0x42>
 801727a:	4622      	mov	r2, r4
 801727c:	4628      	mov	r0, r5
 801727e:	f000 f855 	bl	801732c <__swbuf_r>
 8017282:	3001      	adds	r0, #1
 8017284:	d1bf      	bne.n	8017206 <_puts_r+0x42>
 8017286:	e7df      	b.n	8017248 <_puts_r+0x84>
 8017288:	6823      	ldr	r3, [r4, #0]
 801728a:	250a      	movs	r5, #10
 801728c:	1c5a      	adds	r2, r3, #1
 801728e:	6022      	str	r2, [r4, #0]
 8017290:	701d      	strb	r5, [r3, #0]
 8017292:	e7db      	b.n	801724c <_puts_r+0x88>
 8017294:	0801d714 	.word	0x0801d714
 8017298:	0801d734 	.word	0x0801d734
 801729c:	0801d6f4 	.word	0x0801d6f4

080172a0 <puts>:
 80172a0:	4b02      	ldr	r3, [pc, #8]	; (80172ac <puts+0xc>)
 80172a2:	4601      	mov	r1, r0
 80172a4:	6818      	ldr	r0, [r3, #0]
 80172a6:	f7ff bf8d 	b.w	80171c4 <_puts_r>
 80172aa:	bf00      	nop
 80172ac:	20000078 	.word	0x20000078

080172b0 <rand>:
 80172b0:	4b16      	ldr	r3, [pc, #88]	; (801730c <rand+0x5c>)
 80172b2:	b510      	push	{r4, lr}
 80172b4:	681c      	ldr	r4, [r3, #0]
 80172b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80172b8:	b9b3      	cbnz	r3, 80172e8 <rand+0x38>
 80172ba:	2018      	movs	r0, #24
 80172bc:	f000 fb46 	bl	801794c <malloc>
 80172c0:	63a0      	str	r0, [r4, #56]	; 0x38
 80172c2:	b928      	cbnz	r0, 80172d0 <rand+0x20>
 80172c4:	4602      	mov	r2, r0
 80172c6:	4b12      	ldr	r3, [pc, #72]	; (8017310 <rand+0x60>)
 80172c8:	4812      	ldr	r0, [pc, #72]	; (8017314 <rand+0x64>)
 80172ca:	214e      	movs	r1, #78	; 0x4e
 80172cc:	f000 f8ee 	bl	80174ac <__assert_func>
 80172d0:	4a11      	ldr	r2, [pc, #68]	; (8017318 <rand+0x68>)
 80172d2:	4b12      	ldr	r3, [pc, #72]	; (801731c <rand+0x6c>)
 80172d4:	e9c0 2300 	strd	r2, r3, [r0]
 80172d8:	4b11      	ldr	r3, [pc, #68]	; (8017320 <rand+0x70>)
 80172da:	6083      	str	r3, [r0, #8]
 80172dc:	230b      	movs	r3, #11
 80172de:	8183      	strh	r3, [r0, #12]
 80172e0:	2201      	movs	r2, #1
 80172e2:	2300      	movs	r3, #0
 80172e4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80172e8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80172ea:	4a0e      	ldr	r2, [pc, #56]	; (8017324 <rand+0x74>)
 80172ec:	6920      	ldr	r0, [r4, #16]
 80172ee:	6963      	ldr	r3, [r4, #20]
 80172f0:	490d      	ldr	r1, [pc, #52]	; (8017328 <rand+0x78>)
 80172f2:	4342      	muls	r2, r0
 80172f4:	fb01 2203 	mla	r2, r1, r3, r2
 80172f8:	fba0 0101 	umull	r0, r1, r0, r1
 80172fc:	1c43      	adds	r3, r0, #1
 80172fe:	eb42 0001 	adc.w	r0, r2, r1
 8017302:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8017306:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801730a:	bd10      	pop	{r4, pc}
 801730c:	20000078 	.word	0x20000078
 8017310:	0801d644 	.word	0x0801d644
 8017314:	0801d65b 	.word	0x0801d65b
 8017318:	abcd330e 	.word	0xabcd330e
 801731c:	e66d1234 	.word	0xe66d1234
 8017320:	0005deec 	.word	0x0005deec
 8017324:	5851f42d 	.word	0x5851f42d
 8017328:	4c957f2d 	.word	0x4c957f2d

0801732c <__swbuf_r>:
 801732c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801732e:	460e      	mov	r6, r1
 8017330:	4614      	mov	r4, r2
 8017332:	4605      	mov	r5, r0
 8017334:	b118      	cbz	r0, 801733e <__swbuf_r+0x12>
 8017336:	6983      	ldr	r3, [r0, #24]
 8017338:	b90b      	cbnz	r3, 801733e <__swbuf_r+0x12>
 801733a:	f000 f9ef 	bl	801771c <__sinit>
 801733e:	4b21      	ldr	r3, [pc, #132]	; (80173c4 <__swbuf_r+0x98>)
 8017340:	429c      	cmp	r4, r3
 8017342:	d12b      	bne.n	801739c <__swbuf_r+0x70>
 8017344:	686c      	ldr	r4, [r5, #4]
 8017346:	69a3      	ldr	r3, [r4, #24]
 8017348:	60a3      	str	r3, [r4, #8]
 801734a:	89a3      	ldrh	r3, [r4, #12]
 801734c:	071a      	lsls	r2, r3, #28
 801734e:	d52f      	bpl.n	80173b0 <__swbuf_r+0x84>
 8017350:	6923      	ldr	r3, [r4, #16]
 8017352:	b36b      	cbz	r3, 80173b0 <__swbuf_r+0x84>
 8017354:	6923      	ldr	r3, [r4, #16]
 8017356:	6820      	ldr	r0, [r4, #0]
 8017358:	1ac0      	subs	r0, r0, r3
 801735a:	6963      	ldr	r3, [r4, #20]
 801735c:	b2f6      	uxtb	r6, r6
 801735e:	4283      	cmp	r3, r0
 8017360:	4637      	mov	r7, r6
 8017362:	dc04      	bgt.n	801736e <__swbuf_r+0x42>
 8017364:	4621      	mov	r1, r4
 8017366:	4628      	mov	r0, r5
 8017368:	f000 f944 	bl	80175f4 <_fflush_r>
 801736c:	bb30      	cbnz	r0, 80173bc <__swbuf_r+0x90>
 801736e:	68a3      	ldr	r3, [r4, #8]
 8017370:	3b01      	subs	r3, #1
 8017372:	60a3      	str	r3, [r4, #8]
 8017374:	6823      	ldr	r3, [r4, #0]
 8017376:	1c5a      	adds	r2, r3, #1
 8017378:	6022      	str	r2, [r4, #0]
 801737a:	701e      	strb	r6, [r3, #0]
 801737c:	6963      	ldr	r3, [r4, #20]
 801737e:	3001      	adds	r0, #1
 8017380:	4283      	cmp	r3, r0
 8017382:	d004      	beq.n	801738e <__swbuf_r+0x62>
 8017384:	89a3      	ldrh	r3, [r4, #12]
 8017386:	07db      	lsls	r3, r3, #31
 8017388:	d506      	bpl.n	8017398 <__swbuf_r+0x6c>
 801738a:	2e0a      	cmp	r6, #10
 801738c:	d104      	bne.n	8017398 <__swbuf_r+0x6c>
 801738e:	4621      	mov	r1, r4
 8017390:	4628      	mov	r0, r5
 8017392:	f000 f92f 	bl	80175f4 <_fflush_r>
 8017396:	b988      	cbnz	r0, 80173bc <__swbuf_r+0x90>
 8017398:	4638      	mov	r0, r7
 801739a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801739c:	4b0a      	ldr	r3, [pc, #40]	; (80173c8 <__swbuf_r+0x9c>)
 801739e:	429c      	cmp	r4, r3
 80173a0:	d101      	bne.n	80173a6 <__swbuf_r+0x7a>
 80173a2:	68ac      	ldr	r4, [r5, #8]
 80173a4:	e7cf      	b.n	8017346 <__swbuf_r+0x1a>
 80173a6:	4b09      	ldr	r3, [pc, #36]	; (80173cc <__swbuf_r+0xa0>)
 80173a8:	429c      	cmp	r4, r3
 80173aa:	bf08      	it	eq
 80173ac:	68ec      	ldreq	r4, [r5, #12]
 80173ae:	e7ca      	b.n	8017346 <__swbuf_r+0x1a>
 80173b0:	4621      	mov	r1, r4
 80173b2:	4628      	mov	r0, r5
 80173b4:	f000 f80c 	bl	80173d0 <__swsetup_r>
 80173b8:	2800      	cmp	r0, #0
 80173ba:	d0cb      	beq.n	8017354 <__swbuf_r+0x28>
 80173bc:	f04f 37ff 	mov.w	r7, #4294967295
 80173c0:	e7ea      	b.n	8017398 <__swbuf_r+0x6c>
 80173c2:	bf00      	nop
 80173c4:	0801d714 	.word	0x0801d714
 80173c8:	0801d734 	.word	0x0801d734
 80173cc:	0801d6f4 	.word	0x0801d6f4

080173d0 <__swsetup_r>:
 80173d0:	4b32      	ldr	r3, [pc, #200]	; (801749c <__swsetup_r+0xcc>)
 80173d2:	b570      	push	{r4, r5, r6, lr}
 80173d4:	681d      	ldr	r5, [r3, #0]
 80173d6:	4606      	mov	r6, r0
 80173d8:	460c      	mov	r4, r1
 80173da:	b125      	cbz	r5, 80173e6 <__swsetup_r+0x16>
 80173dc:	69ab      	ldr	r3, [r5, #24]
 80173de:	b913      	cbnz	r3, 80173e6 <__swsetup_r+0x16>
 80173e0:	4628      	mov	r0, r5
 80173e2:	f000 f99b 	bl	801771c <__sinit>
 80173e6:	4b2e      	ldr	r3, [pc, #184]	; (80174a0 <__swsetup_r+0xd0>)
 80173e8:	429c      	cmp	r4, r3
 80173ea:	d10f      	bne.n	801740c <__swsetup_r+0x3c>
 80173ec:	686c      	ldr	r4, [r5, #4]
 80173ee:	89a3      	ldrh	r3, [r4, #12]
 80173f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80173f4:	0719      	lsls	r1, r3, #28
 80173f6:	d42c      	bmi.n	8017452 <__swsetup_r+0x82>
 80173f8:	06dd      	lsls	r5, r3, #27
 80173fa:	d411      	bmi.n	8017420 <__swsetup_r+0x50>
 80173fc:	2309      	movs	r3, #9
 80173fe:	6033      	str	r3, [r6, #0]
 8017400:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017404:	81a3      	strh	r3, [r4, #12]
 8017406:	f04f 30ff 	mov.w	r0, #4294967295
 801740a:	e03e      	b.n	801748a <__swsetup_r+0xba>
 801740c:	4b25      	ldr	r3, [pc, #148]	; (80174a4 <__swsetup_r+0xd4>)
 801740e:	429c      	cmp	r4, r3
 8017410:	d101      	bne.n	8017416 <__swsetup_r+0x46>
 8017412:	68ac      	ldr	r4, [r5, #8]
 8017414:	e7eb      	b.n	80173ee <__swsetup_r+0x1e>
 8017416:	4b24      	ldr	r3, [pc, #144]	; (80174a8 <__swsetup_r+0xd8>)
 8017418:	429c      	cmp	r4, r3
 801741a:	bf08      	it	eq
 801741c:	68ec      	ldreq	r4, [r5, #12]
 801741e:	e7e6      	b.n	80173ee <__swsetup_r+0x1e>
 8017420:	0758      	lsls	r0, r3, #29
 8017422:	d512      	bpl.n	801744a <__swsetup_r+0x7a>
 8017424:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017426:	b141      	cbz	r1, 801743a <__swsetup_r+0x6a>
 8017428:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801742c:	4299      	cmp	r1, r3
 801742e:	d002      	beq.n	8017436 <__swsetup_r+0x66>
 8017430:	4630      	mov	r0, r6
 8017432:	f000 fa93 	bl	801795c <_free_r>
 8017436:	2300      	movs	r3, #0
 8017438:	6363      	str	r3, [r4, #52]	; 0x34
 801743a:	89a3      	ldrh	r3, [r4, #12]
 801743c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017440:	81a3      	strh	r3, [r4, #12]
 8017442:	2300      	movs	r3, #0
 8017444:	6063      	str	r3, [r4, #4]
 8017446:	6923      	ldr	r3, [r4, #16]
 8017448:	6023      	str	r3, [r4, #0]
 801744a:	89a3      	ldrh	r3, [r4, #12]
 801744c:	f043 0308 	orr.w	r3, r3, #8
 8017450:	81a3      	strh	r3, [r4, #12]
 8017452:	6923      	ldr	r3, [r4, #16]
 8017454:	b94b      	cbnz	r3, 801746a <__swsetup_r+0x9a>
 8017456:	89a3      	ldrh	r3, [r4, #12]
 8017458:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801745c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017460:	d003      	beq.n	801746a <__swsetup_r+0x9a>
 8017462:	4621      	mov	r1, r4
 8017464:	4630      	mov	r0, r6
 8017466:	f000 fa31 	bl	80178cc <__smakebuf_r>
 801746a:	89a0      	ldrh	r0, [r4, #12]
 801746c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017470:	f010 0301 	ands.w	r3, r0, #1
 8017474:	d00a      	beq.n	801748c <__swsetup_r+0xbc>
 8017476:	2300      	movs	r3, #0
 8017478:	60a3      	str	r3, [r4, #8]
 801747a:	6963      	ldr	r3, [r4, #20]
 801747c:	425b      	negs	r3, r3
 801747e:	61a3      	str	r3, [r4, #24]
 8017480:	6923      	ldr	r3, [r4, #16]
 8017482:	b943      	cbnz	r3, 8017496 <__swsetup_r+0xc6>
 8017484:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017488:	d1ba      	bne.n	8017400 <__swsetup_r+0x30>
 801748a:	bd70      	pop	{r4, r5, r6, pc}
 801748c:	0781      	lsls	r1, r0, #30
 801748e:	bf58      	it	pl
 8017490:	6963      	ldrpl	r3, [r4, #20]
 8017492:	60a3      	str	r3, [r4, #8]
 8017494:	e7f4      	b.n	8017480 <__swsetup_r+0xb0>
 8017496:	2000      	movs	r0, #0
 8017498:	e7f7      	b.n	801748a <__swsetup_r+0xba>
 801749a:	bf00      	nop
 801749c:	20000078 	.word	0x20000078
 80174a0:	0801d714 	.word	0x0801d714
 80174a4:	0801d734 	.word	0x0801d734
 80174a8:	0801d6f4 	.word	0x0801d6f4

080174ac <__assert_func>:
 80174ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80174ae:	4614      	mov	r4, r2
 80174b0:	461a      	mov	r2, r3
 80174b2:	4b09      	ldr	r3, [pc, #36]	; (80174d8 <__assert_func+0x2c>)
 80174b4:	681b      	ldr	r3, [r3, #0]
 80174b6:	4605      	mov	r5, r0
 80174b8:	68d8      	ldr	r0, [r3, #12]
 80174ba:	b14c      	cbz	r4, 80174d0 <__assert_func+0x24>
 80174bc:	4b07      	ldr	r3, [pc, #28]	; (80174dc <__assert_func+0x30>)
 80174be:	9100      	str	r1, [sp, #0]
 80174c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80174c4:	4906      	ldr	r1, [pc, #24]	; (80174e0 <__assert_func+0x34>)
 80174c6:	462b      	mov	r3, r5
 80174c8:	f000 f9a6 	bl	8017818 <fiprintf>
 80174cc:	f000 fec2 	bl	8018254 <abort>
 80174d0:	4b04      	ldr	r3, [pc, #16]	; (80174e4 <__assert_func+0x38>)
 80174d2:	461c      	mov	r4, r3
 80174d4:	e7f3      	b.n	80174be <__assert_func+0x12>
 80174d6:	bf00      	nop
 80174d8:	20000078 	.word	0x20000078
 80174dc:	0801d6b6 	.word	0x0801d6b6
 80174e0:	0801d6c3 	.word	0x0801d6c3
 80174e4:	0801d6f1 	.word	0x0801d6f1

080174e8 <__sflush_r>:
 80174e8:	898a      	ldrh	r2, [r1, #12]
 80174ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174ee:	4605      	mov	r5, r0
 80174f0:	0710      	lsls	r0, r2, #28
 80174f2:	460c      	mov	r4, r1
 80174f4:	d458      	bmi.n	80175a8 <__sflush_r+0xc0>
 80174f6:	684b      	ldr	r3, [r1, #4]
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	dc05      	bgt.n	8017508 <__sflush_r+0x20>
 80174fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80174fe:	2b00      	cmp	r3, #0
 8017500:	dc02      	bgt.n	8017508 <__sflush_r+0x20>
 8017502:	2000      	movs	r0, #0
 8017504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017508:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801750a:	2e00      	cmp	r6, #0
 801750c:	d0f9      	beq.n	8017502 <__sflush_r+0x1a>
 801750e:	2300      	movs	r3, #0
 8017510:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017514:	682f      	ldr	r7, [r5, #0]
 8017516:	602b      	str	r3, [r5, #0]
 8017518:	d032      	beq.n	8017580 <__sflush_r+0x98>
 801751a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801751c:	89a3      	ldrh	r3, [r4, #12]
 801751e:	075a      	lsls	r2, r3, #29
 8017520:	d505      	bpl.n	801752e <__sflush_r+0x46>
 8017522:	6863      	ldr	r3, [r4, #4]
 8017524:	1ac0      	subs	r0, r0, r3
 8017526:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017528:	b10b      	cbz	r3, 801752e <__sflush_r+0x46>
 801752a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801752c:	1ac0      	subs	r0, r0, r3
 801752e:	2300      	movs	r3, #0
 8017530:	4602      	mov	r2, r0
 8017532:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017534:	6a21      	ldr	r1, [r4, #32]
 8017536:	4628      	mov	r0, r5
 8017538:	47b0      	blx	r6
 801753a:	1c43      	adds	r3, r0, #1
 801753c:	89a3      	ldrh	r3, [r4, #12]
 801753e:	d106      	bne.n	801754e <__sflush_r+0x66>
 8017540:	6829      	ldr	r1, [r5, #0]
 8017542:	291d      	cmp	r1, #29
 8017544:	d82c      	bhi.n	80175a0 <__sflush_r+0xb8>
 8017546:	4a2a      	ldr	r2, [pc, #168]	; (80175f0 <__sflush_r+0x108>)
 8017548:	40ca      	lsrs	r2, r1
 801754a:	07d6      	lsls	r6, r2, #31
 801754c:	d528      	bpl.n	80175a0 <__sflush_r+0xb8>
 801754e:	2200      	movs	r2, #0
 8017550:	6062      	str	r2, [r4, #4]
 8017552:	04d9      	lsls	r1, r3, #19
 8017554:	6922      	ldr	r2, [r4, #16]
 8017556:	6022      	str	r2, [r4, #0]
 8017558:	d504      	bpl.n	8017564 <__sflush_r+0x7c>
 801755a:	1c42      	adds	r2, r0, #1
 801755c:	d101      	bne.n	8017562 <__sflush_r+0x7a>
 801755e:	682b      	ldr	r3, [r5, #0]
 8017560:	b903      	cbnz	r3, 8017564 <__sflush_r+0x7c>
 8017562:	6560      	str	r0, [r4, #84]	; 0x54
 8017564:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017566:	602f      	str	r7, [r5, #0]
 8017568:	2900      	cmp	r1, #0
 801756a:	d0ca      	beq.n	8017502 <__sflush_r+0x1a>
 801756c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017570:	4299      	cmp	r1, r3
 8017572:	d002      	beq.n	801757a <__sflush_r+0x92>
 8017574:	4628      	mov	r0, r5
 8017576:	f000 f9f1 	bl	801795c <_free_r>
 801757a:	2000      	movs	r0, #0
 801757c:	6360      	str	r0, [r4, #52]	; 0x34
 801757e:	e7c1      	b.n	8017504 <__sflush_r+0x1c>
 8017580:	6a21      	ldr	r1, [r4, #32]
 8017582:	2301      	movs	r3, #1
 8017584:	4628      	mov	r0, r5
 8017586:	47b0      	blx	r6
 8017588:	1c41      	adds	r1, r0, #1
 801758a:	d1c7      	bne.n	801751c <__sflush_r+0x34>
 801758c:	682b      	ldr	r3, [r5, #0]
 801758e:	2b00      	cmp	r3, #0
 8017590:	d0c4      	beq.n	801751c <__sflush_r+0x34>
 8017592:	2b1d      	cmp	r3, #29
 8017594:	d001      	beq.n	801759a <__sflush_r+0xb2>
 8017596:	2b16      	cmp	r3, #22
 8017598:	d101      	bne.n	801759e <__sflush_r+0xb6>
 801759a:	602f      	str	r7, [r5, #0]
 801759c:	e7b1      	b.n	8017502 <__sflush_r+0x1a>
 801759e:	89a3      	ldrh	r3, [r4, #12]
 80175a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80175a4:	81a3      	strh	r3, [r4, #12]
 80175a6:	e7ad      	b.n	8017504 <__sflush_r+0x1c>
 80175a8:	690f      	ldr	r7, [r1, #16]
 80175aa:	2f00      	cmp	r7, #0
 80175ac:	d0a9      	beq.n	8017502 <__sflush_r+0x1a>
 80175ae:	0793      	lsls	r3, r2, #30
 80175b0:	680e      	ldr	r6, [r1, #0]
 80175b2:	bf08      	it	eq
 80175b4:	694b      	ldreq	r3, [r1, #20]
 80175b6:	600f      	str	r7, [r1, #0]
 80175b8:	bf18      	it	ne
 80175ba:	2300      	movne	r3, #0
 80175bc:	eba6 0807 	sub.w	r8, r6, r7
 80175c0:	608b      	str	r3, [r1, #8]
 80175c2:	f1b8 0f00 	cmp.w	r8, #0
 80175c6:	dd9c      	ble.n	8017502 <__sflush_r+0x1a>
 80175c8:	6a21      	ldr	r1, [r4, #32]
 80175ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80175cc:	4643      	mov	r3, r8
 80175ce:	463a      	mov	r2, r7
 80175d0:	4628      	mov	r0, r5
 80175d2:	47b0      	blx	r6
 80175d4:	2800      	cmp	r0, #0
 80175d6:	dc06      	bgt.n	80175e6 <__sflush_r+0xfe>
 80175d8:	89a3      	ldrh	r3, [r4, #12]
 80175da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80175de:	81a3      	strh	r3, [r4, #12]
 80175e0:	f04f 30ff 	mov.w	r0, #4294967295
 80175e4:	e78e      	b.n	8017504 <__sflush_r+0x1c>
 80175e6:	4407      	add	r7, r0
 80175e8:	eba8 0800 	sub.w	r8, r8, r0
 80175ec:	e7e9      	b.n	80175c2 <__sflush_r+0xda>
 80175ee:	bf00      	nop
 80175f0:	20400001 	.word	0x20400001

080175f4 <_fflush_r>:
 80175f4:	b538      	push	{r3, r4, r5, lr}
 80175f6:	690b      	ldr	r3, [r1, #16]
 80175f8:	4605      	mov	r5, r0
 80175fa:	460c      	mov	r4, r1
 80175fc:	b913      	cbnz	r3, 8017604 <_fflush_r+0x10>
 80175fe:	2500      	movs	r5, #0
 8017600:	4628      	mov	r0, r5
 8017602:	bd38      	pop	{r3, r4, r5, pc}
 8017604:	b118      	cbz	r0, 801760e <_fflush_r+0x1a>
 8017606:	6983      	ldr	r3, [r0, #24]
 8017608:	b90b      	cbnz	r3, 801760e <_fflush_r+0x1a>
 801760a:	f000 f887 	bl	801771c <__sinit>
 801760e:	4b14      	ldr	r3, [pc, #80]	; (8017660 <_fflush_r+0x6c>)
 8017610:	429c      	cmp	r4, r3
 8017612:	d11b      	bne.n	801764c <_fflush_r+0x58>
 8017614:	686c      	ldr	r4, [r5, #4]
 8017616:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801761a:	2b00      	cmp	r3, #0
 801761c:	d0ef      	beq.n	80175fe <_fflush_r+0xa>
 801761e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017620:	07d0      	lsls	r0, r2, #31
 8017622:	d404      	bmi.n	801762e <_fflush_r+0x3a>
 8017624:	0599      	lsls	r1, r3, #22
 8017626:	d402      	bmi.n	801762e <_fflush_r+0x3a>
 8017628:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801762a:	f000 f927 	bl	801787c <__retarget_lock_acquire_recursive>
 801762e:	4628      	mov	r0, r5
 8017630:	4621      	mov	r1, r4
 8017632:	f7ff ff59 	bl	80174e8 <__sflush_r>
 8017636:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017638:	07da      	lsls	r2, r3, #31
 801763a:	4605      	mov	r5, r0
 801763c:	d4e0      	bmi.n	8017600 <_fflush_r+0xc>
 801763e:	89a3      	ldrh	r3, [r4, #12]
 8017640:	059b      	lsls	r3, r3, #22
 8017642:	d4dd      	bmi.n	8017600 <_fflush_r+0xc>
 8017644:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017646:	f000 f91a 	bl	801787e <__retarget_lock_release_recursive>
 801764a:	e7d9      	b.n	8017600 <_fflush_r+0xc>
 801764c:	4b05      	ldr	r3, [pc, #20]	; (8017664 <_fflush_r+0x70>)
 801764e:	429c      	cmp	r4, r3
 8017650:	d101      	bne.n	8017656 <_fflush_r+0x62>
 8017652:	68ac      	ldr	r4, [r5, #8]
 8017654:	e7df      	b.n	8017616 <_fflush_r+0x22>
 8017656:	4b04      	ldr	r3, [pc, #16]	; (8017668 <_fflush_r+0x74>)
 8017658:	429c      	cmp	r4, r3
 801765a:	bf08      	it	eq
 801765c:	68ec      	ldreq	r4, [r5, #12]
 801765e:	e7da      	b.n	8017616 <_fflush_r+0x22>
 8017660:	0801d714 	.word	0x0801d714
 8017664:	0801d734 	.word	0x0801d734
 8017668:	0801d6f4 	.word	0x0801d6f4

0801766c <std>:
 801766c:	2300      	movs	r3, #0
 801766e:	b510      	push	{r4, lr}
 8017670:	4604      	mov	r4, r0
 8017672:	e9c0 3300 	strd	r3, r3, [r0]
 8017676:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801767a:	6083      	str	r3, [r0, #8]
 801767c:	8181      	strh	r1, [r0, #12]
 801767e:	6643      	str	r3, [r0, #100]	; 0x64
 8017680:	81c2      	strh	r2, [r0, #14]
 8017682:	6183      	str	r3, [r0, #24]
 8017684:	4619      	mov	r1, r3
 8017686:	2208      	movs	r2, #8
 8017688:	305c      	adds	r0, #92	; 0x5c
 801768a:	f7ff fd65 	bl	8017158 <memset>
 801768e:	4b05      	ldr	r3, [pc, #20]	; (80176a4 <std+0x38>)
 8017690:	6263      	str	r3, [r4, #36]	; 0x24
 8017692:	4b05      	ldr	r3, [pc, #20]	; (80176a8 <std+0x3c>)
 8017694:	62a3      	str	r3, [r4, #40]	; 0x28
 8017696:	4b05      	ldr	r3, [pc, #20]	; (80176ac <std+0x40>)
 8017698:	62e3      	str	r3, [r4, #44]	; 0x2c
 801769a:	4b05      	ldr	r3, [pc, #20]	; (80176b0 <std+0x44>)
 801769c:	6224      	str	r4, [r4, #32]
 801769e:	6323      	str	r3, [r4, #48]	; 0x30
 80176a0:	bd10      	pop	{r4, pc}
 80176a2:	bf00      	nop
 80176a4:	080181a9 	.word	0x080181a9
 80176a8:	080181cb 	.word	0x080181cb
 80176ac:	08018203 	.word	0x08018203
 80176b0:	08018227 	.word	0x08018227

080176b4 <_cleanup_r>:
 80176b4:	4901      	ldr	r1, [pc, #4]	; (80176bc <_cleanup_r+0x8>)
 80176b6:	f000 b8c1 	b.w	801783c <_fwalk_reent>
 80176ba:	bf00      	nop
 80176bc:	080175f5 	.word	0x080175f5

080176c0 <__sfmoreglue>:
 80176c0:	b570      	push	{r4, r5, r6, lr}
 80176c2:	2268      	movs	r2, #104	; 0x68
 80176c4:	1e4d      	subs	r5, r1, #1
 80176c6:	4355      	muls	r5, r2
 80176c8:	460e      	mov	r6, r1
 80176ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80176ce:	f000 f9b1 	bl	8017a34 <_malloc_r>
 80176d2:	4604      	mov	r4, r0
 80176d4:	b140      	cbz	r0, 80176e8 <__sfmoreglue+0x28>
 80176d6:	2100      	movs	r1, #0
 80176d8:	e9c0 1600 	strd	r1, r6, [r0]
 80176dc:	300c      	adds	r0, #12
 80176de:	60a0      	str	r0, [r4, #8]
 80176e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80176e4:	f7ff fd38 	bl	8017158 <memset>
 80176e8:	4620      	mov	r0, r4
 80176ea:	bd70      	pop	{r4, r5, r6, pc}

080176ec <__sfp_lock_acquire>:
 80176ec:	4801      	ldr	r0, [pc, #4]	; (80176f4 <__sfp_lock_acquire+0x8>)
 80176ee:	f000 b8c5 	b.w	801787c <__retarget_lock_acquire_recursive>
 80176f2:	bf00      	nop
 80176f4:	2000db91 	.word	0x2000db91

080176f8 <__sfp_lock_release>:
 80176f8:	4801      	ldr	r0, [pc, #4]	; (8017700 <__sfp_lock_release+0x8>)
 80176fa:	f000 b8c0 	b.w	801787e <__retarget_lock_release_recursive>
 80176fe:	bf00      	nop
 8017700:	2000db91 	.word	0x2000db91

08017704 <__sinit_lock_acquire>:
 8017704:	4801      	ldr	r0, [pc, #4]	; (801770c <__sinit_lock_acquire+0x8>)
 8017706:	f000 b8b9 	b.w	801787c <__retarget_lock_acquire_recursive>
 801770a:	bf00      	nop
 801770c:	2000db92 	.word	0x2000db92

08017710 <__sinit_lock_release>:
 8017710:	4801      	ldr	r0, [pc, #4]	; (8017718 <__sinit_lock_release+0x8>)
 8017712:	f000 b8b4 	b.w	801787e <__retarget_lock_release_recursive>
 8017716:	bf00      	nop
 8017718:	2000db92 	.word	0x2000db92

0801771c <__sinit>:
 801771c:	b510      	push	{r4, lr}
 801771e:	4604      	mov	r4, r0
 8017720:	f7ff fff0 	bl	8017704 <__sinit_lock_acquire>
 8017724:	69a3      	ldr	r3, [r4, #24]
 8017726:	b11b      	cbz	r3, 8017730 <__sinit+0x14>
 8017728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801772c:	f7ff bff0 	b.w	8017710 <__sinit_lock_release>
 8017730:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017734:	6523      	str	r3, [r4, #80]	; 0x50
 8017736:	4b13      	ldr	r3, [pc, #76]	; (8017784 <__sinit+0x68>)
 8017738:	4a13      	ldr	r2, [pc, #76]	; (8017788 <__sinit+0x6c>)
 801773a:	681b      	ldr	r3, [r3, #0]
 801773c:	62a2      	str	r2, [r4, #40]	; 0x28
 801773e:	42a3      	cmp	r3, r4
 8017740:	bf04      	itt	eq
 8017742:	2301      	moveq	r3, #1
 8017744:	61a3      	streq	r3, [r4, #24]
 8017746:	4620      	mov	r0, r4
 8017748:	f000 f820 	bl	801778c <__sfp>
 801774c:	6060      	str	r0, [r4, #4]
 801774e:	4620      	mov	r0, r4
 8017750:	f000 f81c 	bl	801778c <__sfp>
 8017754:	60a0      	str	r0, [r4, #8]
 8017756:	4620      	mov	r0, r4
 8017758:	f000 f818 	bl	801778c <__sfp>
 801775c:	2200      	movs	r2, #0
 801775e:	60e0      	str	r0, [r4, #12]
 8017760:	2104      	movs	r1, #4
 8017762:	6860      	ldr	r0, [r4, #4]
 8017764:	f7ff ff82 	bl	801766c <std>
 8017768:	68a0      	ldr	r0, [r4, #8]
 801776a:	2201      	movs	r2, #1
 801776c:	2109      	movs	r1, #9
 801776e:	f7ff ff7d 	bl	801766c <std>
 8017772:	68e0      	ldr	r0, [r4, #12]
 8017774:	2202      	movs	r2, #2
 8017776:	2112      	movs	r1, #18
 8017778:	f7ff ff78 	bl	801766c <std>
 801777c:	2301      	movs	r3, #1
 801777e:	61a3      	str	r3, [r4, #24]
 8017780:	e7d2      	b.n	8017728 <__sinit+0xc>
 8017782:	bf00      	nop
 8017784:	0801d640 	.word	0x0801d640
 8017788:	080176b5 	.word	0x080176b5

0801778c <__sfp>:
 801778c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801778e:	4607      	mov	r7, r0
 8017790:	f7ff ffac 	bl	80176ec <__sfp_lock_acquire>
 8017794:	4b1e      	ldr	r3, [pc, #120]	; (8017810 <__sfp+0x84>)
 8017796:	681e      	ldr	r6, [r3, #0]
 8017798:	69b3      	ldr	r3, [r6, #24]
 801779a:	b913      	cbnz	r3, 80177a2 <__sfp+0x16>
 801779c:	4630      	mov	r0, r6
 801779e:	f7ff ffbd 	bl	801771c <__sinit>
 80177a2:	3648      	adds	r6, #72	; 0x48
 80177a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80177a8:	3b01      	subs	r3, #1
 80177aa:	d503      	bpl.n	80177b4 <__sfp+0x28>
 80177ac:	6833      	ldr	r3, [r6, #0]
 80177ae:	b30b      	cbz	r3, 80177f4 <__sfp+0x68>
 80177b0:	6836      	ldr	r6, [r6, #0]
 80177b2:	e7f7      	b.n	80177a4 <__sfp+0x18>
 80177b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80177b8:	b9d5      	cbnz	r5, 80177f0 <__sfp+0x64>
 80177ba:	4b16      	ldr	r3, [pc, #88]	; (8017814 <__sfp+0x88>)
 80177bc:	60e3      	str	r3, [r4, #12]
 80177be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80177c2:	6665      	str	r5, [r4, #100]	; 0x64
 80177c4:	f000 f859 	bl	801787a <__retarget_lock_init_recursive>
 80177c8:	f7ff ff96 	bl	80176f8 <__sfp_lock_release>
 80177cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80177d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80177d4:	6025      	str	r5, [r4, #0]
 80177d6:	61a5      	str	r5, [r4, #24]
 80177d8:	2208      	movs	r2, #8
 80177da:	4629      	mov	r1, r5
 80177dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80177e0:	f7ff fcba 	bl	8017158 <memset>
 80177e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80177e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80177ec:	4620      	mov	r0, r4
 80177ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80177f0:	3468      	adds	r4, #104	; 0x68
 80177f2:	e7d9      	b.n	80177a8 <__sfp+0x1c>
 80177f4:	2104      	movs	r1, #4
 80177f6:	4638      	mov	r0, r7
 80177f8:	f7ff ff62 	bl	80176c0 <__sfmoreglue>
 80177fc:	4604      	mov	r4, r0
 80177fe:	6030      	str	r0, [r6, #0]
 8017800:	2800      	cmp	r0, #0
 8017802:	d1d5      	bne.n	80177b0 <__sfp+0x24>
 8017804:	f7ff ff78 	bl	80176f8 <__sfp_lock_release>
 8017808:	230c      	movs	r3, #12
 801780a:	603b      	str	r3, [r7, #0]
 801780c:	e7ee      	b.n	80177ec <__sfp+0x60>
 801780e:	bf00      	nop
 8017810:	0801d640 	.word	0x0801d640
 8017814:	ffff0001 	.word	0xffff0001

08017818 <fiprintf>:
 8017818:	b40e      	push	{r1, r2, r3}
 801781a:	b503      	push	{r0, r1, lr}
 801781c:	4601      	mov	r1, r0
 801781e:	ab03      	add	r3, sp, #12
 8017820:	4805      	ldr	r0, [pc, #20]	; (8017838 <fiprintf+0x20>)
 8017822:	f853 2b04 	ldr.w	r2, [r3], #4
 8017826:	6800      	ldr	r0, [r0, #0]
 8017828:	9301      	str	r3, [sp, #4]
 801782a:	f000 f9a1 	bl	8017b70 <_vfiprintf_r>
 801782e:	b002      	add	sp, #8
 8017830:	f85d eb04 	ldr.w	lr, [sp], #4
 8017834:	b003      	add	sp, #12
 8017836:	4770      	bx	lr
 8017838:	20000078 	.word	0x20000078

0801783c <_fwalk_reent>:
 801783c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017840:	4606      	mov	r6, r0
 8017842:	4688      	mov	r8, r1
 8017844:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017848:	2700      	movs	r7, #0
 801784a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801784e:	f1b9 0901 	subs.w	r9, r9, #1
 8017852:	d505      	bpl.n	8017860 <_fwalk_reent+0x24>
 8017854:	6824      	ldr	r4, [r4, #0]
 8017856:	2c00      	cmp	r4, #0
 8017858:	d1f7      	bne.n	801784a <_fwalk_reent+0xe>
 801785a:	4638      	mov	r0, r7
 801785c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017860:	89ab      	ldrh	r3, [r5, #12]
 8017862:	2b01      	cmp	r3, #1
 8017864:	d907      	bls.n	8017876 <_fwalk_reent+0x3a>
 8017866:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801786a:	3301      	adds	r3, #1
 801786c:	d003      	beq.n	8017876 <_fwalk_reent+0x3a>
 801786e:	4629      	mov	r1, r5
 8017870:	4630      	mov	r0, r6
 8017872:	47c0      	blx	r8
 8017874:	4307      	orrs	r7, r0
 8017876:	3568      	adds	r5, #104	; 0x68
 8017878:	e7e9      	b.n	801784e <_fwalk_reent+0x12>

0801787a <__retarget_lock_init_recursive>:
 801787a:	4770      	bx	lr

0801787c <__retarget_lock_acquire_recursive>:
 801787c:	4770      	bx	lr

0801787e <__retarget_lock_release_recursive>:
 801787e:	4770      	bx	lr

08017880 <__swhatbuf_r>:
 8017880:	b570      	push	{r4, r5, r6, lr}
 8017882:	460e      	mov	r6, r1
 8017884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017888:	2900      	cmp	r1, #0
 801788a:	b096      	sub	sp, #88	; 0x58
 801788c:	4614      	mov	r4, r2
 801788e:	461d      	mov	r5, r3
 8017890:	da08      	bge.n	80178a4 <__swhatbuf_r+0x24>
 8017892:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017896:	2200      	movs	r2, #0
 8017898:	602a      	str	r2, [r5, #0]
 801789a:	061a      	lsls	r2, r3, #24
 801789c:	d410      	bmi.n	80178c0 <__swhatbuf_r+0x40>
 801789e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80178a2:	e00e      	b.n	80178c2 <__swhatbuf_r+0x42>
 80178a4:	466a      	mov	r2, sp
 80178a6:	f000 fced 	bl	8018284 <_fstat_r>
 80178aa:	2800      	cmp	r0, #0
 80178ac:	dbf1      	blt.n	8017892 <__swhatbuf_r+0x12>
 80178ae:	9a01      	ldr	r2, [sp, #4]
 80178b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80178b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80178b8:	425a      	negs	r2, r3
 80178ba:	415a      	adcs	r2, r3
 80178bc:	602a      	str	r2, [r5, #0]
 80178be:	e7ee      	b.n	801789e <__swhatbuf_r+0x1e>
 80178c0:	2340      	movs	r3, #64	; 0x40
 80178c2:	2000      	movs	r0, #0
 80178c4:	6023      	str	r3, [r4, #0]
 80178c6:	b016      	add	sp, #88	; 0x58
 80178c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080178cc <__smakebuf_r>:
 80178cc:	898b      	ldrh	r3, [r1, #12]
 80178ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80178d0:	079d      	lsls	r5, r3, #30
 80178d2:	4606      	mov	r6, r0
 80178d4:	460c      	mov	r4, r1
 80178d6:	d507      	bpl.n	80178e8 <__smakebuf_r+0x1c>
 80178d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80178dc:	6023      	str	r3, [r4, #0]
 80178de:	6123      	str	r3, [r4, #16]
 80178e0:	2301      	movs	r3, #1
 80178e2:	6163      	str	r3, [r4, #20]
 80178e4:	b002      	add	sp, #8
 80178e6:	bd70      	pop	{r4, r5, r6, pc}
 80178e8:	ab01      	add	r3, sp, #4
 80178ea:	466a      	mov	r2, sp
 80178ec:	f7ff ffc8 	bl	8017880 <__swhatbuf_r>
 80178f0:	9900      	ldr	r1, [sp, #0]
 80178f2:	4605      	mov	r5, r0
 80178f4:	4630      	mov	r0, r6
 80178f6:	f000 f89d 	bl	8017a34 <_malloc_r>
 80178fa:	b948      	cbnz	r0, 8017910 <__smakebuf_r+0x44>
 80178fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017900:	059a      	lsls	r2, r3, #22
 8017902:	d4ef      	bmi.n	80178e4 <__smakebuf_r+0x18>
 8017904:	f023 0303 	bic.w	r3, r3, #3
 8017908:	f043 0302 	orr.w	r3, r3, #2
 801790c:	81a3      	strh	r3, [r4, #12]
 801790e:	e7e3      	b.n	80178d8 <__smakebuf_r+0xc>
 8017910:	4b0d      	ldr	r3, [pc, #52]	; (8017948 <__smakebuf_r+0x7c>)
 8017912:	62b3      	str	r3, [r6, #40]	; 0x28
 8017914:	89a3      	ldrh	r3, [r4, #12]
 8017916:	6020      	str	r0, [r4, #0]
 8017918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801791c:	81a3      	strh	r3, [r4, #12]
 801791e:	9b00      	ldr	r3, [sp, #0]
 8017920:	6163      	str	r3, [r4, #20]
 8017922:	9b01      	ldr	r3, [sp, #4]
 8017924:	6120      	str	r0, [r4, #16]
 8017926:	b15b      	cbz	r3, 8017940 <__smakebuf_r+0x74>
 8017928:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801792c:	4630      	mov	r0, r6
 801792e:	f000 fcbb 	bl	80182a8 <_isatty_r>
 8017932:	b128      	cbz	r0, 8017940 <__smakebuf_r+0x74>
 8017934:	89a3      	ldrh	r3, [r4, #12]
 8017936:	f023 0303 	bic.w	r3, r3, #3
 801793a:	f043 0301 	orr.w	r3, r3, #1
 801793e:	81a3      	strh	r3, [r4, #12]
 8017940:	89a0      	ldrh	r0, [r4, #12]
 8017942:	4305      	orrs	r5, r0
 8017944:	81a5      	strh	r5, [r4, #12]
 8017946:	e7cd      	b.n	80178e4 <__smakebuf_r+0x18>
 8017948:	080176b5 	.word	0x080176b5

0801794c <malloc>:
 801794c:	4b02      	ldr	r3, [pc, #8]	; (8017958 <malloc+0xc>)
 801794e:	4601      	mov	r1, r0
 8017950:	6818      	ldr	r0, [r3, #0]
 8017952:	f000 b86f 	b.w	8017a34 <_malloc_r>
 8017956:	bf00      	nop
 8017958:	20000078 	.word	0x20000078

0801795c <_free_r>:
 801795c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801795e:	2900      	cmp	r1, #0
 8017960:	d044      	beq.n	80179ec <_free_r+0x90>
 8017962:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017966:	9001      	str	r0, [sp, #4]
 8017968:	2b00      	cmp	r3, #0
 801796a:	f1a1 0404 	sub.w	r4, r1, #4
 801796e:	bfb8      	it	lt
 8017970:	18e4      	addlt	r4, r4, r3
 8017972:	f000 fcbb 	bl	80182ec <__malloc_lock>
 8017976:	4a1e      	ldr	r2, [pc, #120]	; (80179f0 <_free_r+0x94>)
 8017978:	9801      	ldr	r0, [sp, #4]
 801797a:	6813      	ldr	r3, [r2, #0]
 801797c:	b933      	cbnz	r3, 801798c <_free_r+0x30>
 801797e:	6063      	str	r3, [r4, #4]
 8017980:	6014      	str	r4, [r2, #0]
 8017982:	b003      	add	sp, #12
 8017984:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017988:	f000 bcb6 	b.w	80182f8 <__malloc_unlock>
 801798c:	42a3      	cmp	r3, r4
 801798e:	d908      	bls.n	80179a2 <_free_r+0x46>
 8017990:	6825      	ldr	r5, [r4, #0]
 8017992:	1961      	adds	r1, r4, r5
 8017994:	428b      	cmp	r3, r1
 8017996:	bf01      	itttt	eq
 8017998:	6819      	ldreq	r1, [r3, #0]
 801799a:	685b      	ldreq	r3, [r3, #4]
 801799c:	1949      	addeq	r1, r1, r5
 801799e:	6021      	streq	r1, [r4, #0]
 80179a0:	e7ed      	b.n	801797e <_free_r+0x22>
 80179a2:	461a      	mov	r2, r3
 80179a4:	685b      	ldr	r3, [r3, #4]
 80179a6:	b10b      	cbz	r3, 80179ac <_free_r+0x50>
 80179a8:	42a3      	cmp	r3, r4
 80179aa:	d9fa      	bls.n	80179a2 <_free_r+0x46>
 80179ac:	6811      	ldr	r1, [r2, #0]
 80179ae:	1855      	adds	r5, r2, r1
 80179b0:	42a5      	cmp	r5, r4
 80179b2:	d10b      	bne.n	80179cc <_free_r+0x70>
 80179b4:	6824      	ldr	r4, [r4, #0]
 80179b6:	4421      	add	r1, r4
 80179b8:	1854      	adds	r4, r2, r1
 80179ba:	42a3      	cmp	r3, r4
 80179bc:	6011      	str	r1, [r2, #0]
 80179be:	d1e0      	bne.n	8017982 <_free_r+0x26>
 80179c0:	681c      	ldr	r4, [r3, #0]
 80179c2:	685b      	ldr	r3, [r3, #4]
 80179c4:	6053      	str	r3, [r2, #4]
 80179c6:	4421      	add	r1, r4
 80179c8:	6011      	str	r1, [r2, #0]
 80179ca:	e7da      	b.n	8017982 <_free_r+0x26>
 80179cc:	d902      	bls.n	80179d4 <_free_r+0x78>
 80179ce:	230c      	movs	r3, #12
 80179d0:	6003      	str	r3, [r0, #0]
 80179d2:	e7d6      	b.n	8017982 <_free_r+0x26>
 80179d4:	6825      	ldr	r5, [r4, #0]
 80179d6:	1961      	adds	r1, r4, r5
 80179d8:	428b      	cmp	r3, r1
 80179da:	bf04      	itt	eq
 80179dc:	6819      	ldreq	r1, [r3, #0]
 80179de:	685b      	ldreq	r3, [r3, #4]
 80179e0:	6063      	str	r3, [r4, #4]
 80179e2:	bf04      	itt	eq
 80179e4:	1949      	addeq	r1, r1, r5
 80179e6:	6021      	streq	r1, [r4, #0]
 80179e8:	6054      	str	r4, [r2, #4]
 80179ea:	e7ca      	b.n	8017982 <_free_r+0x26>
 80179ec:	b003      	add	sp, #12
 80179ee:	bd30      	pop	{r4, r5, pc}
 80179f0:	2000db94 	.word	0x2000db94

080179f4 <sbrk_aligned>:
 80179f4:	b570      	push	{r4, r5, r6, lr}
 80179f6:	4e0e      	ldr	r6, [pc, #56]	; (8017a30 <sbrk_aligned+0x3c>)
 80179f8:	460c      	mov	r4, r1
 80179fa:	6831      	ldr	r1, [r6, #0]
 80179fc:	4605      	mov	r5, r0
 80179fe:	b911      	cbnz	r1, 8017a06 <sbrk_aligned+0x12>
 8017a00:	f000 fbc2 	bl	8018188 <_sbrk_r>
 8017a04:	6030      	str	r0, [r6, #0]
 8017a06:	4621      	mov	r1, r4
 8017a08:	4628      	mov	r0, r5
 8017a0a:	f000 fbbd 	bl	8018188 <_sbrk_r>
 8017a0e:	1c43      	adds	r3, r0, #1
 8017a10:	d00a      	beq.n	8017a28 <sbrk_aligned+0x34>
 8017a12:	1cc4      	adds	r4, r0, #3
 8017a14:	f024 0403 	bic.w	r4, r4, #3
 8017a18:	42a0      	cmp	r0, r4
 8017a1a:	d007      	beq.n	8017a2c <sbrk_aligned+0x38>
 8017a1c:	1a21      	subs	r1, r4, r0
 8017a1e:	4628      	mov	r0, r5
 8017a20:	f000 fbb2 	bl	8018188 <_sbrk_r>
 8017a24:	3001      	adds	r0, #1
 8017a26:	d101      	bne.n	8017a2c <sbrk_aligned+0x38>
 8017a28:	f04f 34ff 	mov.w	r4, #4294967295
 8017a2c:	4620      	mov	r0, r4
 8017a2e:	bd70      	pop	{r4, r5, r6, pc}
 8017a30:	2000db98 	.word	0x2000db98

08017a34 <_malloc_r>:
 8017a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a38:	1ccd      	adds	r5, r1, #3
 8017a3a:	f025 0503 	bic.w	r5, r5, #3
 8017a3e:	3508      	adds	r5, #8
 8017a40:	2d0c      	cmp	r5, #12
 8017a42:	bf38      	it	cc
 8017a44:	250c      	movcc	r5, #12
 8017a46:	2d00      	cmp	r5, #0
 8017a48:	4607      	mov	r7, r0
 8017a4a:	db01      	blt.n	8017a50 <_malloc_r+0x1c>
 8017a4c:	42a9      	cmp	r1, r5
 8017a4e:	d905      	bls.n	8017a5c <_malloc_r+0x28>
 8017a50:	230c      	movs	r3, #12
 8017a52:	603b      	str	r3, [r7, #0]
 8017a54:	2600      	movs	r6, #0
 8017a56:	4630      	mov	r0, r6
 8017a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a5c:	4e2e      	ldr	r6, [pc, #184]	; (8017b18 <_malloc_r+0xe4>)
 8017a5e:	f000 fc45 	bl	80182ec <__malloc_lock>
 8017a62:	6833      	ldr	r3, [r6, #0]
 8017a64:	461c      	mov	r4, r3
 8017a66:	bb34      	cbnz	r4, 8017ab6 <_malloc_r+0x82>
 8017a68:	4629      	mov	r1, r5
 8017a6a:	4638      	mov	r0, r7
 8017a6c:	f7ff ffc2 	bl	80179f4 <sbrk_aligned>
 8017a70:	1c43      	adds	r3, r0, #1
 8017a72:	4604      	mov	r4, r0
 8017a74:	d14d      	bne.n	8017b12 <_malloc_r+0xde>
 8017a76:	6834      	ldr	r4, [r6, #0]
 8017a78:	4626      	mov	r6, r4
 8017a7a:	2e00      	cmp	r6, #0
 8017a7c:	d140      	bne.n	8017b00 <_malloc_r+0xcc>
 8017a7e:	6823      	ldr	r3, [r4, #0]
 8017a80:	4631      	mov	r1, r6
 8017a82:	4638      	mov	r0, r7
 8017a84:	eb04 0803 	add.w	r8, r4, r3
 8017a88:	f000 fb7e 	bl	8018188 <_sbrk_r>
 8017a8c:	4580      	cmp	r8, r0
 8017a8e:	d13a      	bne.n	8017b06 <_malloc_r+0xd2>
 8017a90:	6821      	ldr	r1, [r4, #0]
 8017a92:	3503      	adds	r5, #3
 8017a94:	1a6d      	subs	r5, r5, r1
 8017a96:	f025 0503 	bic.w	r5, r5, #3
 8017a9a:	3508      	adds	r5, #8
 8017a9c:	2d0c      	cmp	r5, #12
 8017a9e:	bf38      	it	cc
 8017aa0:	250c      	movcc	r5, #12
 8017aa2:	4629      	mov	r1, r5
 8017aa4:	4638      	mov	r0, r7
 8017aa6:	f7ff ffa5 	bl	80179f4 <sbrk_aligned>
 8017aaa:	3001      	adds	r0, #1
 8017aac:	d02b      	beq.n	8017b06 <_malloc_r+0xd2>
 8017aae:	6823      	ldr	r3, [r4, #0]
 8017ab0:	442b      	add	r3, r5
 8017ab2:	6023      	str	r3, [r4, #0]
 8017ab4:	e00e      	b.n	8017ad4 <_malloc_r+0xa0>
 8017ab6:	6822      	ldr	r2, [r4, #0]
 8017ab8:	1b52      	subs	r2, r2, r5
 8017aba:	d41e      	bmi.n	8017afa <_malloc_r+0xc6>
 8017abc:	2a0b      	cmp	r2, #11
 8017abe:	d916      	bls.n	8017aee <_malloc_r+0xba>
 8017ac0:	1961      	adds	r1, r4, r5
 8017ac2:	42a3      	cmp	r3, r4
 8017ac4:	6025      	str	r5, [r4, #0]
 8017ac6:	bf18      	it	ne
 8017ac8:	6059      	strne	r1, [r3, #4]
 8017aca:	6863      	ldr	r3, [r4, #4]
 8017acc:	bf08      	it	eq
 8017ace:	6031      	streq	r1, [r6, #0]
 8017ad0:	5162      	str	r2, [r4, r5]
 8017ad2:	604b      	str	r3, [r1, #4]
 8017ad4:	4638      	mov	r0, r7
 8017ad6:	f104 060b 	add.w	r6, r4, #11
 8017ada:	f000 fc0d 	bl	80182f8 <__malloc_unlock>
 8017ade:	f026 0607 	bic.w	r6, r6, #7
 8017ae2:	1d23      	adds	r3, r4, #4
 8017ae4:	1af2      	subs	r2, r6, r3
 8017ae6:	d0b6      	beq.n	8017a56 <_malloc_r+0x22>
 8017ae8:	1b9b      	subs	r3, r3, r6
 8017aea:	50a3      	str	r3, [r4, r2]
 8017aec:	e7b3      	b.n	8017a56 <_malloc_r+0x22>
 8017aee:	6862      	ldr	r2, [r4, #4]
 8017af0:	42a3      	cmp	r3, r4
 8017af2:	bf0c      	ite	eq
 8017af4:	6032      	streq	r2, [r6, #0]
 8017af6:	605a      	strne	r2, [r3, #4]
 8017af8:	e7ec      	b.n	8017ad4 <_malloc_r+0xa0>
 8017afa:	4623      	mov	r3, r4
 8017afc:	6864      	ldr	r4, [r4, #4]
 8017afe:	e7b2      	b.n	8017a66 <_malloc_r+0x32>
 8017b00:	4634      	mov	r4, r6
 8017b02:	6876      	ldr	r6, [r6, #4]
 8017b04:	e7b9      	b.n	8017a7a <_malloc_r+0x46>
 8017b06:	230c      	movs	r3, #12
 8017b08:	603b      	str	r3, [r7, #0]
 8017b0a:	4638      	mov	r0, r7
 8017b0c:	f000 fbf4 	bl	80182f8 <__malloc_unlock>
 8017b10:	e7a1      	b.n	8017a56 <_malloc_r+0x22>
 8017b12:	6025      	str	r5, [r4, #0]
 8017b14:	e7de      	b.n	8017ad4 <_malloc_r+0xa0>
 8017b16:	bf00      	nop
 8017b18:	2000db94 	.word	0x2000db94

08017b1c <__sfputc_r>:
 8017b1c:	6893      	ldr	r3, [r2, #8]
 8017b1e:	3b01      	subs	r3, #1
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	b410      	push	{r4}
 8017b24:	6093      	str	r3, [r2, #8]
 8017b26:	da08      	bge.n	8017b3a <__sfputc_r+0x1e>
 8017b28:	6994      	ldr	r4, [r2, #24]
 8017b2a:	42a3      	cmp	r3, r4
 8017b2c:	db01      	blt.n	8017b32 <__sfputc_r+0x16>
 8017b2e:	290a      	cmp	r1, #10
 8017b30:	d103      	bne.n	8017b3a <__sfputc_r+0x1e>
 8017b32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017b36:	f7ff bbf9 	b.w	801732c <__swbuf_r>
 8017b3a:	6813      	ldr	r3, [r2, #0]
 8017b3c:	1c58      	adds	r0, r3, #1
 8017b3e:	6010      	str	r0, [r2, #0]
 8017b40:	7019      	strb	r1, [r3, #0]
 8017b42:	4608      	mov	r0, r1
 8017b44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017b48:	4770      	bx	lr

08017b4a <__sfputs_r>:
 8017b4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b4c:	4606      	mov	r6, r0
 8017b4e:	460f      	mov	r7, r1
 8017b50:	4614      	mov	r4, r2
 8017b52:	18d5      	adds	r5, r2, r3
 8017b54:	42ac      	cmp	r4, r5
 8017b56:	d101      	bne.n	8017b5c <__sfputs_r+0x12>
 8017b58:	2000      	movs	r0, #0
 8017b5a:	e007      	b.n	8017b6c <__sfputs_r+0x22>
 8017b5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b60:	463a      	mov	r2, r7
 8017b62:	4630      	mov	r0, r6
 8017b64:	f7ff ffda 	bl	8017b1c <__sfputc_r>
 8017b68:	1c43      	adds	r3, r0, #1
 8017b6a:	d1f3      	bne.n	8017b54 <__sfputs_r+0xa>
 8017b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017b70 <_vfiprintf_r>:
 8017b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b74:	460d      	mov	r5, r1
 8017b76:	b09d      	sub	sp, #116	; 0x74
 8017b78:	4614      	mov	r4, r2
 8017b7a:	4698      	mov	r8, r3
 8017b7c:	4606      	mov	r6, r0
 8017b7e:	b118      	cbz	r0, 8017b88 <_vfiprintf_r+0x18>
 8017b80:	6983      	ldr	r3, [r0, #24]
 8017b82:	b90b      	cbnz	r3, 8017b88 <_vfiprintf_r+0x18>
 8017b84:	f7ff fdca 	bl	801771c <__sinit>
 8017b88:	4b89      	ldr	r3, [pc, #548]	; (8017db0 <_vfiprintf_r+0x240>)
 8017b8a:	429d      	cmp	r5, r3
 8017b8c:	d11b      	bne.n	8017bc6 <_vfiprintf_r+0x56>
 8017b8e:	6875      	ldr	r5, [r6, #4]
 8017b90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017b92:	07d9      	lsls	r1, r3, #31
 8017b94:	d405      	bmi.n	8017ba2 <_vfiprintf_r+0x32>
 8017b96:	89ab      	ldrh	r3, [r5, #12]
 8017b98:	059a      	lsls	r2, r3, #22
 8017b9a:	d402      	bmi.n	8017ba2 <_vfiprintf_r+0x32>
 8017b9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017b9e:	f7ff fe6d 	bl	801787c <__retarget_lock_acquire_recursive>
 8017ba2:	89ab      	ldrh	r3, [r5, #12]
 8017ba4:	071b      	lsls	r3, r3, #28
 8017ba6:	d501      	bpl.n	8017bac <_vfiprintf_r+0x3c>
 8017ba8:	692b      	ldr	r3, [r5, #16]
 8017baa:	b9eb      	cbnz	r3, 8017be8 <_vfiprintf_r+0x78>
 8017bac:	4629      	mov	r1, r5
 8017bae:	4630      	mov	r0, r6
 8017bb0:	f7ff fc0e 	bl	80173d0 <__swsetup_r>
 8017bb4:	b1c0      	cbz	r0, 8017be8 <_vfiprintf_r+0x78>
 8017bb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017bb8:	07dc      	lsls	r4, r3, #31
 8017bba:	d50e      	bpl.n	8017bda <_vfiprintf_r+0x6a>
 8017bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8017bc0:	b01d      	add	sp, #116	; 0x74
 8017bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017bc6:	4b7b      	ldr	r3, [pc, #492]	; (8017db4 <_vfiprintf_r+0x244>)
 8017bc8:	429d      	cmp	r5, r3
 8017bca:	d101      	bne.n	8017bd0 <_vfiprintf_r+0x60>
 8017bcc:	68b5      	ldr	r5, [r6, #8]
 8017bce:	e7df      	b.n	8017b90 <_vfiprintf_r+0x20>
 8017bd0:	4b79      	ldr	r3, [pc, #484]	; (8017db8 <_vfiprintf_r+0x248>)
 8017bd2:	429d      	cmp	r5, r3
 8017bd4:	bf08      	it	eq
 8017bd6:	68f5      	ldreq	r5, [r6, #12]
 8017bd8:	e7da      	b.n	8017b90 <_vfiprintf_r+0x20>
 8017bda:	89ab      	ldrh	r3, [r5, #12]
 8017bdc:	0598      	lsls	r0, r3, #22
 8017bde:	d4ed      	bmi.n	8017bbc <_vfiprintf_r+0x4c>
 8017be0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017be2:	f7ff fe4c 	bl	801787e <__retarget_lock_release_recursive>
 8017be6:	e7e9      	b.n	8017bbc <_vfiprintf_r+0x4c>
 8017be8:	2300      	movs	r3, #0
 8017bea:	9309      	str	r3, [sp, #36]	; 0x24
 8017bec:	2320      	movs	r3, #32
 8017bee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017bf2:	f8cd 800c 	str.w	r8, [sp, #12]
 8017bf6:	2330      	movs	r3, #48	; 0x30
 8017bf8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017dbc <_vfiprintf_r+0x24c>
 8017bfc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017c00:	f04f 0901 	mov.w	r9, #1
 8017c04:	4623      	mov	r3, r4
 8017c06:	469a      	mov	sl, r3
 8017c08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017c0c:	b10a      	cbz	r2, 8017c12 <_vfiprintf_r+0xa2>
 8017c0e:	2a25      	cmp	r2, #37	; 0x25
 8017c10:	d1f9      	bne.n	8017c06 <_vfiprintf_r+0x96>
 8017c12:	ebba 0b04 	subs.w	fp, sl, r4
 8017c16:	d00b      	beq.n	8017c30 <_vfiprintf_r+0xc0>
 8017c18:	465b      	mov	r3, fp
 8017c1a:	4622      	mov	r2, r4
 8017c1c:	4629      	mov	r1, r5
 8017c1e:	4630      	mov	r0, r6
 8017c20:	f7ff ff93 	bl	8017b4a <__sfputs_r>
 8017c24:	3001      	adds	r0, #1
 8017c26:	f000 80aa 	beq.w	8017d7e <_vfiprintf_r+0x20e>
 8017c2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017c2c:	445a      	add	r2, fp
 8017c2e:	9209      	str	r2, [sp, #36]	; 0x24
 8017c30:	f89a 3000 	ldrb.w	r3, [sl]
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	f000 80a2 	beq.w	8017d7e <_vfiprintf_r+0x20e>
 8017c3a:	2300      	movs	r3, #0
 8017c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8017c40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017c44:	f10a 0a01 	add.w	sl, sl, #1
 8017c48:	9304      	str	r3, [sp, #16]
 8017c4a:	9307      	str	r3, [sp, #28]
 8017c4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017c50:	931a      	str	r3, [sp, #104]	; 0x68
 8017c52:	4654      	mov	r4, sl
 8017c54:	2205      	movs	r2, #5
 8017c56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c5a:	4858      	ldr	r0, [pc, #352]	; (8017dbc <_vfiprintf_r+0x24c>)
 8017c5c:	f7e8 fad0 	bl	8000200 <memchr>
 8017c60:	9a04      	ldr	r2, [sp, #16]
 8017c62:	b9d8      	cbnz	r0, 8017c9c <_vfiprintf_r+0x12c>
 8017c64:	06d1      	lsls	r1, r2, #27
 8017c66:	bf44      	itt	mi
 8017c68:	2320      	movmi	r3, #32
 8017c6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017c6e:	0713      	lsls	r3, r2, #28
 8017c70:	bf44      	itt	mi
 8017c72:	232b      	movmi	r3, #43	; 0x2b
 8017c74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017c78:	f89a 3000 	ldrb.w	r3, [sl]
 8017c7c:	2b2a      	cmp	r3, #42	; 0x2a
 8017c7e:	d015      	beq.n	8017cac <_vfiprintf_r+0x13c>
 8017c80:	9a07      	ldr	r2, [sp, #28]
 8017c82:	4654      	mov	r4, sl
 8017c84:	2000      	movs	r0, #0
 8017c86:	f04f 0c0a 	mov.w	ip, #10
 8017c8a:	4621      	mov	r1, r4
 8017c8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017c90:	3b30      	subs	r3, #48	; 0x30
 8017c92:	2b09      	cmp	r3, #9
 8017c94:	d94e      	bls.n	8017d34 <_vfiprintf_r+0x1c4>
 8017c96:	b1b0      	cbz	r0, 8017cc6 <_vfiprintf_r+0x156>
 8017c98:	9207      	str	r2, [sp, #28]
 8017c9a:	e014      	b.n	8017cc6 <_vfiprintf_r+0x156>
 8017c9c:	eba0 0308 	sub.w	r3, r0, r8
 8017ca0:	fa09 f303 	lsl.w	r3, r9, r3
 8017ca4:	4313      	orrs	r3, r2
 8017ca6:	9304      	str	r3, [sp, #16]
 8017ca8:	46a2      	mov	sl, r4
 8017caa:	e7d2      	b.n	8017c52 <_vfiprintf_r+0xe2>
 8017cac:	9b03      	ldr	r3, [sp, #12]
 8017cae:	1d19      	adds	r1, r3, #4
 8017cb0:	681b      	ldr	r3, [r3, #0]
 8017cb2:	9103      	str	r1, [sp, #12]
 8017cb4:	2b00      	cmp	r3, #0
 8017cb6:	bfbb      	ittet	lt
 8017cb8:	425b      	neglt	r3, r3
 8017cba:	f042 0202 	orrlt.w	r2, r2, #2
 8017cbe:	9307      	strge	r3, [sp, #28]
 8017cc0:	9307      	strlt	r3, [sp, #28]
 8017cc2:	bfb8      	it	lt
 8017cc4:	9204      	strlt	r2, [sp, #16]
 8017cc6:	7823      	ldrb	r3, [r4, #0]
 8017cc8:	2b2e      	cmp	r3, #46	; 0x2e
 8017cca:	d10c      	bne.n	8017ce6 <_vfiprintf_r+0x176>
 8017ccc:	7863      	ldrb	r3, [r4, #1]
 8017cce:	2b2a      	cmp	r3, #42	; 0x2a
 8017cd0:	d135      	bne.n	8017d3e <_vfiprintf_r+0x1ce>
 8017cd2:	9b03      	ldr	r3, [sp, #12]
 8017cd4:	1d1a      	adds	r2, r3, #4
 8017cd6:	681b      	ldr	r3, [r3, #0]
 8017cd8:	9203      	str	r2, [sp, #12]
 8017cda:	2b00      	cmp	r3, #0
 8017cdc:	bfb8      	it	lt
 8017cde:	f04f 33ff 	movlt.w	r3, #4294967295
 8017ce2:	3402      	adds	r4, #2
 8017ce4:	9305      	str	r3, [sp, #20]
 8017ce6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017dcc <_vfiprintf_r+0x25c>
 8017cea:	7821      	ldrb	r1, [r4, #0]
 8017cec:	2203      	movs	r2, #3
 8017cee:	4650      	mov	r0, sl
 8017cf0:	f7e8 fa86 	bl	8000200 <memchr>
 8017cf4:	b140      	cbz	r0, 8017d08 <_vfiprintf_r+0x198>
 8017cf6:	2340      	movs	r3, #64	; 0x40
 8017cf8:	eba0 000a 	sub.w	r0, r0, sl
 8017cfc:	fa03 f000 	lsl.w	r0, r3, r0
 8017d00:	9b04      	ldr	r3, [sp, #16]
 8017d02:	4303      	orrs	r3, r0
 8017d04:	3401      	adds	r4, #1
 8017d06:	9304      	str	r3, [sp, #16]
 8017d08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d0c:	482c      	ldr	r0, [pc, #176]	; (8017dc0 <_vfiprintf_r+0x250>)
 8017d0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017d12:	2206      	movs	r2, #6
 8017d14:	f7e8 fa74 	bl	8000200 <memchr>
 8017d18:	2800      	cmp	r0, #0
 8017d1a:	d03f      	beq.n	8017d9c <_vfiprintf_r+0x22c>
 8017d1c:	4b29      	ldr	r3, [pc, #164]	; (8017dc4 <_vfiprintf_r+0x254>)
 8017d1e:	bb1b      	cbnz	r3, 8017d68 <_vfiprintf_r+0x1f8>
 8017d20:	9b03      	ldr	r3, [sp, #12]
 8017d22:	3307      	adds	r3, #7
 8017d24:	f023 0307 	bic.w	r3, r3, #7
 8017d28:	3308      	adds	r3, #8
 8017d2a:	9303      	str	r3, [sp, #12]
 8017d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d2e:	443b      	add	r3, r7
 8017d30:	9309      	str	r3, [sp, #36]	; 0x24
 8017d32:	e767      	b.n	8017c04 <_vfiprintf_r+0x94>
 8017d34:	fb0c 3202 	mla	r2, ip, r2, r3
 8017d38:	460c      	mov	r4, r1
 8017d3a:	2001      	movs	r0, #1
 8017d3c:	e7a5      	b.n	8017c8a <_vfiprintf_r+0x11a>
 8017d3e:	2300      	movs	r3, #0
 8017d40:	3401      	adds	r4, #1
 8017d42:	9305      	str	r3, [sp, #20]
 8017d44:	4619      	mov	r1, r3
 8017d46:	f04f 0c0a 	mov.w	ip, #10
 8017d4a:	4620      	mov	r0, r4
 8017d4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017d50:	3a30      	subs	r2, #48	; 0x30
 8017d52:	2a09      	cmp	r2, #9
 8017d54:	d903      	bls.n	8017d5e <_vfiprintf_r+0x1ee>
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	d0c5      	beq.n	8017ce6 <_vfiprintf_r+0x176>
 8017d5a:	9105      	str	r1, [sp, #20]
 8017d5c:	e7c3      	b.n	8017ce6 <_vfiprintf_r+0x176>
 8017d5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017d62:	4604      	mov	r4, r0
 8017d64:	2301      	movs	r3, #1
 8017d66:	e7f0      	b.n	8017d4a <_vfiprintf_r+0x1da>
 8017d68:	ab03      	add	r3, sp, #12
 8017d6a:	9300      	str	r3, [sp, #0]
 8017d6c:	462a      	mov	r2, r5
 8017d6e:	4b16      	ldr	r3, [pc, #88]	; (8017dc8 <_vfiprintf_r+0x258>)
 8017d70:	a904      	add	r1, sp, #16
 8017d72:	4630      	mov	r0, r6
 8017d74:	f3af 8000 	nop.w
 8017d78:	4607      	mov	r7, r0
 8017d7a:	1c78      	adds	r0, r7, #1
 8017d7c:	d1d6      	bne.n	8017d2c <_vfiprintf_r+0x1bc>
 8017d7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017d80:	07d9      	lsls	r1, r3, #31
 8017d82:	d405      	bmi.n	8017d90 <_vfiprintf_r+0x220>
 8017d84:	89ab      	ldrh	r3, [r5, #12]
 8017d86:	059a      	lsls	r2, r3, #22
 8017d88:	d402      	bmi.n	8017d90 <_vfiprintf_r+0x220>
 8017d8a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017d8c:	f7ff fd77 	bl	801787e <__retarget_lock_release_recursive>
 8017d90:	89ab      	ldrh	r3, [r5, #12]
 8017d92:	065b      	lsls	r3, r3, #25
 8017d94:	f53f af12 	bmi.w	8017bbc <_vfiprintf_r+0x4c>
 8017d98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017d9a:	e711      	b.n	8017bc0 <_vfiprintf_r+0x50>
 8017d9c:	ab03      	add	r3, sp, #12
 8017d9e:	9300      	str	r3, [sp, #0]
 8017da0:	462a      	mov	r2, r5
 8017da2:	4b09      	ldr	r3, [pc, #36]	; (8017dc8 <_vfiprintf_r+0x258>)
 8017da4:	a904      	add	r1, sp, #16
 8017da6:	4630      	mov	r0, r6
 8017da8:	f000 f880 	bl	8017eac <_printf_i>
 8017dac:	e7e4      	b.n	8017d78 <_vfiprintf_r+0x208>
 8017dae:	bf00      	nop
 8017db0:	0801d714 	.word	0x0801d714
 8017db4:	0801d734 	.word	0x0801d734
 8017db8:	0801d6f4 	.word	0x0801d6f4
 8017dbc:	0801d754 	.word	0x0801d754
 8017dc0:	0801d75e 	.word	0x0801d75e
 8017dc4:	00000000 	.word	0x00000000
 8017dc8:	08017b4b 	.word	0x08017b4b
 8017dcc:	0801d75a 	.word	0x0801d75a

08017dd0 <_printf_common>:
 8017dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017dd4:	4616      	mov	r6, r2
 8017dd6:	4699      	mov	r9, r3
 8017dd8:	688a      	ldr	r2, [r1, #8]
 8017dda:	690b      	ldr	r3, [r1, #16]
 8017ddc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017de0:	4293      	cmp	r3, r2
 8017de2:	bfb8      	it	lt
 8017de4:	4613      	movlt	r3, r2
 8017de6:	6033      	str	r3, [r6, #0]
 8017de8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017dec:	4607      	mov	r7, r0
 8017dee:	460c      	mov	r4, r1
 8017df0:	b10a      	cbz	r2, 8017df6 <_printf_common+0x26>
 8017df2:	3301      	adds	r3, #1
 8017df4:	6033      	str	r3, [r6, #0]
 8017df6:	6823      	ldr	r3, [r4, #0]
 8017df8:	0699      	lsls	r1, r3, #26
 8017dfa:	bf42      	ittt	mi
 8017dfc:	6833      	ldrmi	r3, [r6, #0]
 8017dfe:	3302      	addmi	r3, #2
 8017e00:	6033      	strmi	r3, [r6, #0]
 8017e02:	6825      	ldr	r5, [r4, #0]
 8017e04:	f015 0506 	ands.w	r5, r5, #6
 8017e08:	d106      	bne.n	8017e18 <_printf_common+0x48>
 8017e0a:	f104 0a19 	add.w	sl, r4, #25
 8017e0e:	68e3      	ldr	r3, [r4, #12]
 8017e10:	6832      	ldr	r2, [r6, #0]
 8017e12:	1a9b      	subs	r3, r3, r2
 8017e14:	42ab      	cmp	r3, r5
 8017e16:	dc26      	bgt.n	8017e66 <_printf_common+0x96>
 8017e18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017e1c:	1e13      	subs	r3, r2, #0
 8017e1e:	6822      	ldr	r2, [r4, #0]
 8017e20:	bf18      	it	ne
 8017e22:	2301      	movne	r3, #1
 8017e24:	0692      	lsls	r2, r2, #26
 8017e26:	d42b      	bmi.n	8017e80 <_printf_common+0xb0>
 8017e28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017e2c:	4649      	mov	r1, r9
 8017e2e:	4638      	mov	r0, r7
 8017e30:	47c0      	blx	r8
 8017e32:	3001      	adds	r0, #1
 8017e34:	d01e      	beq.n	8017e74 <_printf_common+0xa4>
 8017e36:	6823      	ldr	r3, [r4, #0]
 8017e38:	68e5      	ldr	r5, [r4, #12]
 8017e3a:	6832      	ldr	r2, [r6, #0]
 8017e3c:	f003 0306 	and.w	r3, r3, #6
 8017e40:	2b04      	cmp	r3, #4
 8017e42:	bf08      	it	eq
 8017e44:	1aad      	subeq	r5, r5, r2
 8017e46:	68a3      	ldr	r3, [r4, #8]
 8017e48:	6922      	ldr	r2, [r4, #16]
 8017e4a:	bf0c      	ite	eq
 8017e4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017e50:	2500      	movne	r5, #0
 8017e52:	4293      	cmp	r3, r2
 8017e54:	bfc4      	itt	gt
 8017e56:	1a9b      	subgt	r3, r3, r2
 8017e58:	18ed      	addgt	r5, r5, r3
 8017e5a:	2600      	movs	r6, #0
 8017e5c:	341a      	adds	r4, #26
 8017e5e:	42b5      	cmp	r5, r6
 8017e60:	d11a      	bne.n	8017e98 <_printf_common+0xc8>
 8017e62:	2000      	movs	r0, #0
 8017e64:	e008      	b.n	8017e78 <_printf_common+0xa8>
 8017e66:	2301      	movs	r3, #1
 8017e68:	4652      	mov	r2, sl
 8017e6a:	4649      	mov	r1, r9
 8017e6c:	4638      	mov	r0, r7
 8017e6e:	47c0      	blx	r8
 8017e70:	3001      	adds	r0, #1
 8017e72:	d103      	bne.n	8017e7c <_printf_common+0xac>
 8017e74:	f04f 30ff 	mov.w	r0, #4294967295
 8017e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e7c:	3501      	adds	r5, #1
 8017e7e:	e7c6      	b.n	8017e0e <_printf_common+0x3e>
 8017e80:	18e1      	adds	r1, r4, r3
 8017e82:	1c5a      	adds	r2, r3, #1
 8017e84:	2030      	movs	r0, #48	; 0x30
 8017e86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017e8a:	4422      	add	r2, r4
 8017e8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017e90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017e94:	3302      	adds	r3, #2
 8017e96:	e7c7      	b.n	8017e28 <_printf_common+0x58>
 8017e98:	2301      	movs	r3, #1
 8017e9a:	4622      	mov	r2, r4
 8017e9c:	4649      	mov	r1, r9
 8017e9e:	4638      	mov	r0, r7
 8017ea0:	47c0      	blx	r8
 8017ea2:	3001      	adds	r0, #1
 8017ea4:	d0e6      	beq.n	8017e74 <_printf_common+0xa4>
 8017ea6:	3601      	adds	r6, #1
 8017ea8:	e7d9      	b.n	8017e5e <_printf_common+0x8e>
	...

08017eac <_printf_i>:
 8017eac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017eb0:	7e0f      	ldrb	r7, [r1, #24]
 8017eb2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017eb4:	2f78      	cmp	r7, #120	; 0x78
 8017eb6:	4691      	mov	r9, r2
 8017eb8:	4680      	mov	r8, r0
 8017eba:	460c      	mov	r4, r1
 8017ebc:	469a      	mov	sl, r3
 8017ebe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017ec2:	d807      	bhi.n	8017ed4 <_printf_i+0x28>
 8017ec4:	2f62      	cmp	r7, #98	; 0x62
 8017ec6:	d80a      	bhi.n	8017ede <_printf_i+0x32>
 8017ec8:	2f00      	cmp	r7, #0
 8017eca:	f000 80d8 	beq.w	801807e <_printf_i+0x1d2>
 8017ece:	2f58      	cmp	r7, #88	; 0x58
 8017ed0:	f000 80a3 	beq.w	801801a <_printf_i+0x16e>
 8017ed4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017ed8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017edc:	e03a      	b.n	8017f54 <_printf_i+0xa8>
 8017ede:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017ee2:	2b15      	cmp	r3, #21
 8017ee4:	d8f6      	bhi.n	8017ed4 <_printf_i+0x28>
 8017ee6:	a101      	add	r1, pc, #4	; (adr r1, 8017eec <_printf_i+0x40>)
 8017ee8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017eec:	08017f45 	.word	0x08017f45
 8017ef0:	08017f59 	.word	0x08017f59
 8017ef4:	08017ed5 	.word	0x08017ed5
 8017ef8:	08017ed5 	.word	0x08017ed5
 8017efc:	08017ed5 	.word	0x08017ed5
 8017f00:	08017ed5 	.word	0x08017ed5
 8017f04:	08017f59 	.word	0x08017f59
 8017f08:	08017ed5 	.word	0x08017ed5
 8017f0c:	08017ed5 	.word	0x08017ed5
 8017f10:	08017ed5 	.word	0x08017ed5
 8017f14:	08017ed5 	.word	0x08017ed5
 8017f18:	08018065 	.word	0x08018065
 8017f1c:	08017f89 	.word	0x08017f89
 8017f20:	08018047 	.word	0x08018047
 8017f24:	08017ed5 	.word	0x08017ed5
 8017f28:	08017ed5 	.word	0x08017ed5
 8017f2c:	08018087 	.word	0x08018087
 8017f30:	08017ed5 	.word	0x08017ed5
 8017f34:	08017f89 	.word	0x08017f89
 8017f38:	08017ed5 	.word	0x08017ed5
 8017f3c:	08017ed5 	.word	0x08017ed5
 8017f40:	0801804f 	.word	0x0801804f
 8017f44:	682b      	ldr	r3, [r5, #0]
 8017f46:	1d1a      	adds	r2, r3, #4
 8017f48:	681b      	ldr	r3, [r3, #0]
 8017f4a:	602a      	str	r2, [r5, #0]
 8017f4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017f50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017f54:	2301      	movs	r3, #1
 8017f56:	e0a3      	b.n	80180a0 <_printf_i+0x1f4>
 8017f58:	6820      	ldr	r0, [r4, #0]
 8017f5a:	6829      	ldr	r1, [r5, #0]
 8017f5c:	0606      	lsls	r6, r0, #24
 8017f5e:	f101 0304 	add.w	r3, r1, #4
 8017f62:	d50a      	bpl.n	8017f7a <_printf_i+0xce>
 8017f64:	680e      	ldr	r6, [r1, #0]
 8017f66:	602b      	str	r3, [r5, #0]
 8017f68:	2e00      	cmp	r6, #0
 8017f6a:	da03      	bge.n	8017f74 <_printf_i+0xc8>
 8017f6c:	232d      	movs	r3, #45	; 0x2d
 8017f6e:	4276      	negs	r6, r6
 8017f70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017f74:	485e      	ldr	r0, [pc, #376]	; (80180f0 <_printf_i+0x244>)
 8017f76:	230a      	movs	r3, #10
 8017f78:	e019      	b.n	8017fae <_printf_i+0x102>
 8017f7a:	680e      	ldr	r6, [r1, #0]
 8017f7c:	602b      	str	r3, [r5, #0]
 8017f7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017f82:	bf18      	it	ne
 8017f84:	b236      	sxthne	r6, r6
 8017f86:	e7ef      	b.n	8017f68 <_printf_i+0xbc>
 8017f88:	682b      	ldr	r3, [r5, #0]
 8017f8a:	6820      	ldr	r0, [r4, #0]
 8017f8c:	1d19      	adds	r1, r3, #4
 8017f8e:	6029      	str	r1, [r5, #0]
 8017f90:	0601      	lsls	r1, r0, #24
 8017f92:	d501      	bpl.n	8017f98 <_printf_i+0xec>
 8017f94:	681e      	ldr	r6, [r3, #0]
 8017f96:	e002      	b.n	8017f9e <_printf_i+0xf2>
 8017f98:	0646      	lsls	r6, r0, #25
 8017f9a:	d5fb      	bpl.n	8017f94 <_printf_i+0xe8>
 8017f9c:	881e      	ldrh	r6, [r3, #0]
 8017f9e:	4854      	ldr	r0, [pc, #336]	; (80180f0 <_printf_i+0x244>)
 8017fa0:	2f6f      	cmp	r7, #111	; 0x6f
 8017fa2:	bf0c      	ite	eq
 8017fa4:	2308      	moveq	r3, #8
 8017fa6:	230a      	movne	r3, #10
 8017fa8:	2100      	movs	r1, #0
 8017faa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017fae:	6865      	ldr	r5, [r4, #4]
 8017fb0:	60a5      	str	r5, [r4, #8]
 8017fb2:	2d00      	cmp	r5, #0
 8017fb4:	bfa2      	ittt	ge
 8017fb6:	6821      	ldrge	r1, [r4, #0]
 8017fb8:	f021 0104 	bicge.w	r1, r1, #4
 8017fbc:	6021      	strge	r1, [r4, #0]
 8017fbe:	b90e      	cbnz	r6, 8017fc4 <_printf_i+0x118>
 8017fc0:	2d00      	cmp	r5, #0
 8017fc2:	d04d      	beq.n	8018060 <_printf_i+0x1b4>
 8017fc4:	4615      	mov	r5, r2
 8017fc6:	fbb6 f1f3 	udiv	r1, r6, r3
 8017fca:	fb03 6711 	mls	r7, r3, r1, r6
 8017fce:	5dc7      	ldrb	r7, [r0, r7]
 8017fd0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017fd4:	4637      	mov	r7, r6
 8017fd6:	42bb      	cmp	r3, r7
 8017fd8:	460e      	mov	r6, r1
 8017fda:	d9f4      	bls.n	8017fc6 <_printf_i+0x11a>
 8017fdc:	2b08      	cmp	r3, #8
 8017fde:	d10b      	bne.n	8017ff8 <_printf_i+0x14c>
 8017fe0:	6823      	ldr	r3, [r4, #0]
 8017fe2:	07de      	lsls	r6, r3, #31
 8017fe4:	d508      	bpl.n	8017ff8 <_printf_i+0x14c>
 8017fe6:	6923      	ldr	r3, [r4, #16]
 8017fe8:	6861      	ldr	r1, [r4, #4]
 8017fea:	4299      	cmp	r1, r3
 8017fec:	bfde      	ittt	le
 8017fee:	2330      	movle	r3, #48	; 0x30
 8017ff0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017ff4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017ff8:	1b52      	subs	r2, r2, r5
 8017ffa:	6122      	str	r2, [r4, #16]
 8017ffc:	f8cd a000 	str.w	sl, [sp]
 8018000:	464b      	mov	r3, r9
 8018002:	aa03      	add	r2, sp, #12
 8018004:	4621      	mov	r1, r4
 8018006:	4640      	mov	r0, r8
 8018008:	f7ff fee2 	bl	8017dd0 <_printf_common>
 801800c:	3001      	adds	r0, #1
 801800e:	d14c      	bne.n	80180aa <_printf_i+0x1fe>
 8018010:	f04f 30ff 	mov.w	r0, #4294967295
 8018014:	b004      	add	sp, #16
 8018016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801801a:	4835      	ldr	r0, [pc, #212]	; (80180f0 <_printf_i+0x244>)
 801801c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8018020:	6829      	ldr	r1, [r5, #0]
 8018022:	6823      	ldr	r3, [r4, #0]
 8018024:	f851 6b04 	ldr.w	r6, [r1], #4
 8018028:	6029      	str	r1, [r5, #0]
 801802a:	061d      	lsls	r5, r3, #24
 801802c:	d514      	bpl.n	8018058 <_printf_i+0x1ac>
 801802e:	07df      	lsls	r7, r3, #31
 8018030:	bf44      	itt	mi
 8018032:	f043 0320 	orrmi.w	r3, r3, #32
 8018036:	6023      	strmi	r3, [r4, #0]
 8018038:	b91e      	cbnz	r6, 8018042 <_printf_i+0x196>
 801803a:	6823      	ldr	r3, [r4, #0]
 801803c:	f023 0320 	bic.w	r3, r3, #32
 8018040:	6023      	str	r3, [r4, #0]
 8018042:	2310      	movs	r3, #16
 8018044:	e7b0      	b.n	8017fa8 <_printf_i+0xfc>
 8018046:	6823      	ldr	r3, [r4, #0]
 8018048:	f043 0320 	orr.w	r3, r3, #32
 801804c:	6023      	str	r3, [r4, #0]
 801804e:	2378      	movs	r3, #120	; 0x78
 8018050:	4828      	ldr	r0, [pc, #160]	; (80180f4 <_printf_i+0x248>)
 8018052:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018056:	e7e3      	b.n	8018020 <_printf_i+0x174>
 8018058:	0659      	lsls	r1, r3, #25
 801805a:	bf48      	it	mi
 801805c:	b2b6      	uxthmi	r6, r6
 801805e:	e7e6      	b.n	801802e <_printf_i+0x182>
 8018060:	4615      	mov	r5, r2
 8018062:	e7bb      	b.n	8017fdc <_printf_i+0x130>
 8018064:	682b      	ldr	r3, [r5, #0]
 8018066:	6826      	ldr	r6, [r4, #0]
 8018068:	6961      	ldr	r1, [r4, #20]
 801806a:	1d18      	adds	r0, r3, #4
 801806c:	6028      	str	r0, [r5, #0]
 801806e:	0635      	lsls	r5, r6, #24
 8018070:	681b      	ldr	r3, [r3, #0]
 8018072:	d501      	bpl.n	8018078 <_printf_i+0x1cc>
 8018074:	6019      	str	r1, [r3, #0]
 8018076:	e002      	b.n	801807e <_printf_i+0x1d2>
 8018078:	0670      	lsls	r0, r6, #25
 801807a:	d5fb      	bpl.n	8018074 <_printf_i+0x1c8>
 801807c:	8019      	strh	r1, [r3, #0]
 801807e:	2300      	movs	r3, #0
 8018080:	6123      	str	r3, [r4, #16]
 8018082:	4615      	mov	r5, r2
 8018084:	e7ba      	b.n	8017ffc <_printf_i+0x150>
 8018086:	682b      	ldr	r3, [r5, #0]
 8018088:	1d1a      	adds	r2, r3, #4
 801808a:	602a      	str	r2, [r5, #0]
 801808c:	681d      	ldr	r5, [r3, #0]
 801808e:	6862      	ldr	r2, [r4, #4]
 8018090:	2100      	movs	r1, #0
 8018092:	4628      	mov	r0, r5
 8018094:	f7e8 f8b4 	bl	8000200 <memchr>
 8018098:	b108      	cbz	r0, 801809e <_printf_i+0x1f2>
 801809a:	1b40      	subs	r0, r0, r5
 801809c:	6060      	str	r0, [r4, #4]
 801809e:	6863      	ldr	r3, [r4, #4]
 80180a0:	6123      	str	r3, [r4, #16]
 80180a2:	2300      	movs	r3, #0
 80180a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80180a8:	e7a8      	b.n	8017ffc <_printf_i+0x150>
 80180aa:	6923      	ldr	r3, [r4, #16]
 80180ac:	462a      	mov	r2, r5
 80180ae:	4649      	mov	r1, r9
 80180b0:	4640      	mov	r0, r8
 80180b2:	47d0      	blx	sl
 80180b4:	3001      	adds	r0, #1
 80180b6:	d0ab      	beq.n	8018010 <_printf_i+0x164>
 80180b8:	6823      	ldr	r3, [r4, #0]
 80180ba:	079b      	lsls	r3, r3, #30
 80180bc:	d413      	bmi.n	80180e6 <_printf_i+0x23a>
 80180be:	68e0      	ldr	r0, [r4, #12]
 80180c0:	9b03      	ldr	r3, [sp, #12]
 80180c2:	4298      	cmp	r0, r3
 80180c4:	bfb8      	it	lt
 80180c6:	4618      	movlt	r0, r3
 80180c8:	e7a4      	b.n	8018014 <_printf_i+0x168>
 80180ca:	2301      	movs	r3, #1
 80180cc:	4632      	mov	r2, r6
 80180ce:	4649      	mov	r1, r9
 80180d0:	4640      	mov	r0, r8
 80180d2:	47d0      	blx	sl
 80180d4:	3001      	adds	r0, #1
 80180d6:	d09b      	beq.n	8018010 <_printf_i+0x164>
 80180d8:	3501      	adds	r5, #1
 80180da:	68e3      	ldr	r3, [r4, #12]
 80180dc:	9903      	ldr	r1, [sp, #12]
 80180de:	1a5b      	subs	r3, r3, r1
 80180e0:	42ab      	cmp	r3, r5
 80180e2:	dcf2      	bgt.n	80180ca <_printf_i+0x21e>
 80180e4:	e7eb      	b.n	80180be <_printf_i+0x212>
 80180e6:	2500      	movs	r5, #0
 80180e8:	f104 0619 	add.w	r6, r4, #25
 80180ec:	e7f5      	b.n	80180da <_printf_i+0x22e>
 80180ee:	bf00      	nop
 80180f0:	0801d765 	.word	0x0801d765
 80180f4:	0801d776 	.word	0x0801d776

080180f8 <_putc_r>:
 80180f8:	b570      	push	{r4, r5, r6, lr}
 80180fa:	460d      	mov	r5, r1
 80180fc:	4614      	mov	r4, r2
 80180fe:	4606      	mov	r6, r0
 8018100:	b118      	cbz	r0, 801810a <_putc_r+0x12>
 8018102:	6983      	ldr	r3, [r0, #24]
 8018104:	b90b      	cbnz	r3, 801810a <_putc_r+0x12>
 8018106:	f7ff fb09 	bl	801771c <__sinit>
 801810a:	4b1c      	ldr	r3, [pc, #112]	; (801817c <_putc_r+0x84>)
 801810c:	429c      	cmp	r4, r3
 801810e:	d124      	bne.n	801815a <_putc_r+0x62>
 8018110:	6874      	ldr	r4, [r6, #4]
 8018112:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018114:	07d8      	lsls	r0, r3, #31
 8018116:	d405      	bmi.n	8018124 <_putc_r+0x2c>
 8018118:	89a3      	ldrh	r3, [r4, #12]
 801811a:	0599      	lsls	r1, r3, #22
 801811c:	d402      	bmi.n	8018124 <_putc_r+0x2c>
 801811e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018120:	f7ff fbac 	bl	801787c <__retarget_lock_acquire_recursive>
 8018124:	68a3      	ldr	r3, [r4, #8]
 8018126:	3b01      	subs	r3, #1
 8018128:	2b00      	cmp	r3, #0
 801812a:	60a3      	str	r3, [r4, #8]
 801812c:	da05      	bge.n	801813a <_putc_r+0x42>
 801812e:	69a2      	ldr	r2, [r4, #24]
 8018130:	4293      	cmp	r3, r2
 8018132:	db1c      	blt.n	801816e <_putc_r+0x76>
 8018134:	b2eb      	uxtb	r3, r5
 8018136:	2b0a      	cmp	r3, #10
 8018138:	d019      	beq.n	801816e <_putc_r+0x76>
 801813a:	6823      	ldr	r3, [r4, #0]
 801813c:	1c5a      	adds	r2, r3, #1
 801813e:	6022      	str	r2, [r4, #0]
 8018140:	701d      	strb	r5, [r3, #0]
 8018142:	b2ed      	uxtb	r5, r5
 8018144:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018146:	07da      	lsls	r2, r3, #31
 8018148:	d405      	bmi.n	8018156 <_putc_r+0x5e>
 801814a:	89a3      	ldrh	r3, [r4, #12]
 801814c:	059b      	lsls	r3, r3, #22
 801814e:	d402      	bmi.n	8018156 <_putc_r+0x5e>
 8018150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018152:	f7ff fb94 	bl	801787e <__retarget_lock_release_recursive>
 8018156:	4628      	mov	r0, r5
 8018158:	bd70      	pop	{r4, r5, r6, pc}
 801815a:	4b09      	ldr	r3, [pc, #36]	; (8018180 <_putc_r+0x88>)
 801815c:	429c      	cmp	r4, r3
 801815e:	d101      	bne.n	8018164 <_putc_r+0x6c>
 8018160:	68b4      	ldr	r4, [r6, #8]
 8018162:	e7d6      	b.n	8018112 <_putc_r+0x1a>
 8018164:	4b07      	ldr	r3, [pc, #28]	; (8018184 <_putc_r+0x8c>)
 8018166:	429c      	cmp	r4, r3
 8018168:	bf08      	it	eq
 801816a:	68f4      	ldreq	r4, [r6, #12]
 801816c:	e7d1      	b.n	8018112 <_putc_r+0x1a>
 801816e:	4629      	mov	r1, r5
 8018170:	4622      	mov	r2, r4
 8018172:	4630      	mov	r0, r6
 8018174:	f7ff f8da 	bl	801732c <__swbuf_r>
 8018178:	4605      	mov	r5, r0
 801817a:	e7e3      	b.n	8018144 <_putc_r+0x4c>
 801817c:	0801d714 	.word	0x0801d714
 8018180:	0801d734 	.word	0x0801d734
 8018184:	0801d6f4 	.word	0x0801d6f4

08018188 <_sbrk_r>:
 8018188:	b538      	push	{r3, r4, r5, lr}
 801818a:	4d06      	ldr	r5, [pc, #24]	; (80181a4 <_sbrk_r+0x1c>)
 801818c:	2300      	movs	r3, #0
 801818e:	4604      	mov	r4, r0
 8018190:	4608      	mov	r0, r1
 8018192:	602b      	str	r3, [r5, #0]
 8018194:	f7e8 fdc0 	bl	8000d18 <_sbrk>
 8018198:	1c43      	adds	r3, r0, #1
 801819a:	d102      	bne.n	80181a2 <_sbrk_r+0x1a>
 801819c:	682b      	ldr	r3, [r5, #0]
 801819e:	b103      	cbz	r3, 80181a2 <_sbrk_r+0x1a>
 80181a0:	6023      	str	r3, [r4, #0]
 80181a2:	bd38      	pop	{r3, r4, r5, pc}
 80181a4:	2000db88 	.word	0x2000db88

080181a8 <__sread>:
 80181a8:	b510      	push	{r4, lr}
 80181aa:	460c      	mov	r4, r1
 80181ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80181b0:	f000 f8a8 	bl	8018304 <_read_r>
 80181b4:	2800      	cmp	r0, #0
 80181b6:	bfab      	itete	ge
 80181b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80181ba:	89a3      	ldrhlt	r3, [r4, #12]
 80181bc:	181b      	addge	r3, r3, r0
 80181be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80181c2:	bfac      	ite	ge
 80181c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80181c6:	81a3      	strhlt	r3, [r4, #12]
 80181c8:	bd10      	pop	{r4, pc}

080181ca <__swrite>:
 80181ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181ce:	461f      	mov	r7, r3
 80181d0:	898b      	ldrh	r3, [r1, #12]
 80181d2:	05db      	lsls	r3, r3, #23
 80181d4:	4605      	mov	r5, r0
 80181d6:	460c      	mov	r4, r1
 80181d8:	4616      	mov	r6, r2
 80181da:	d505      	bpl.n	80181e8 <__swrite+0x1e>
 80181dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80181e0:	2302      	movs	r3, #2
 80181e2:	2200      	movs	r2, #0
 80181e4:	f000 f870 	bl	80182c8 <_lseek_r>
 80181e8:	89a3      	ldrh	r3, [r4, #12]
 80181ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80181ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80181f2:	81a3      	strh	r3, [r4, #12]
 80181f4:	4632      	mov	r2, r6
 80181f6:	463b      	mov	r3, r7
 80181f8:	4628      	mov	r0, r5
 80181fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80181fe:	f000 b817 	b.w	8018230 <_write_r>

08018202 <__sseek>:
 8018202:	b510      	push	{r4, lr}
 8018204:	460c      	mov	r4, r1
 8018206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801820a:	f000 f85d 	bl	80182c8 <_lseek_r>
 801820e:	1c43      	adds	r3, r0, #1
 8018210:	89a3      	ldrh	r3, [r4, #12]
 8018212:	bf15      	itete	ne
 8018214:	6560      	strne	r0, [r4, #84]	; 0x54
 8018216:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801821a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801821e:	81a3      	strheq	r3, [r4, #12]
 8018220:	bf18      	it	ne
 8018222:	81a3      	strhne	r3, [r4, #12]
 8018224:	bd10      	pop	{r4, pc}

08018226 <__sclose>:
 8018226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801822a:	f000 b81b 	b.w	8018264 <_close_r>
	...

08018230 <_write_r>:
 8018230:	b538      	push	{r3, r4, r5, lr}
 8018232:	4d07      	ldr	r5, [pc, #28]	; (8018250 <_write_r+0x20>)
 8018234:	4604      	mov	r4, r0
 8018236:	4608      	mov	r0, r1
 8018238:	4611      	mov	r1, r2
 801823a:	2200      	movs	r2, #0
 801823c:	602a      	str	r2, [r5, #0]
 801823e:	461a      	mov	r2, r3
 8018240:	f7e8 fd19 	bl	8000c76 <_write>
 8018244:	1c43      	adds	r3, r0, #1
 8018246:	d102      	bne.n	801824e <_write_r+0x1e>
 8018248:	682b      	ldr	r3, [r5, #0]
 801824a:	b103      	cbz	r3, 801824e <_write_r+0x1e>
 801824c:	6023      	str	r3, [r4, #0]
 801824e:	bd38      	pop	{r3, r4, r5, pc}
 8018250:	2000db88 	.word	0x2000db88

08018254 <abort>:
 8018254:	b508      	push	{r3, lr}
 8018256:	2006      	movs	r0, #6
 8018258:	f000 f88e 	bl	8018378 <raise>
 801825c:	2001      	movs	r0, #1
 801825e:	f7e8 fce3 	bl	8000c28 <_exit>
	...

08018264 <_close_r>:
 8018264:	b538      	push	{r3, r4, r5, lr}
 8018266:	4d06      	ldr	r5, [pc, #24]	; (8018280 <_close_r+0x1c>)
 8018268:	2300      	movs	r3, #0
 801826a:	4604      	mov	r4, r0
 801826c:	4608      	mov	r0, r1
 801826e:	602b      	str	r3, [r5, #0]
 8018270:	f7e8 fd1d 	bl	8000cae <_close>
 8018274:	1c43      	adds	r3, r0, #1
 8018276:	d102      	bne.n	801827e <_close_r+0x1a>
 8018278:	682b      	ldr	r3, [r5, #0]
 801827a:	b103      	cbz	r3, 801827e <_close_r+0x1a>
 801827c:	6023      	str	r3, [r4, #0]
 801827e:	bd38      	pop	{r3, r4, r5, pc}
 8018280:	2000db88 	.word	0x2000db88

08018284 <_fstat_r>:
 8018284:	b538      	push	{r3, r4, r5, lr}
 8018286:	4d07      	ldr	r5, [pc, #28]	; (80182a4 <_fstat_r+0x20>)
 8018288:	2300      	movs	r3, #0
 801828a:	4604      	mov	r4, r0
 801828c:	4608      	mov	r0, r1
 801828e:	4611      	mov	r1, r2
 8018290:	602b      	str	r3, [r5, #0]
 8018292:	f7e8 fd18 	bl	8000cc6 <_fstat>
 8018296:	1c43      	adds	r3, r0, #1
 8018298:	d102      	bne.n	80182a0 <_fstat_r+0x1c>
 801829a:	682b      	ldr	r3, [r5, #0]
 801829c:	b103      	cbz	r3, 80182a0 <_fstat_r+0x1c>
 801829e:	6023      	str	r3, [r4, #0]
 80182a0:	bd38      	pop	{r3, r4, r5, pc}
 80182a2:	bf00      	nop
 80182a4:	2000db88 	.word	0x2000db88

080182a8 <_isatty_r>:
 80182a8:	b538      	push	{r3, r4, r5, lr}
 80182aa:	4d06      	ldr	r5, [pc, #24]	; (80182c4 <_isatty_r+0x1c>)
 80182ac:	2300      	movs	r3, #0
 80182ae:	4604      	mov	r4, r0
 80182b0:	4608      	mov	r0, r1
 80182b2:	602b      	str	r3, [r5, #0]
 80182b4:	f7e8 fd17 	bl	8000ce6 <_isatty>
 80182b8:	1c43      	adds	r3, r0, #1
 80182ba:	d102      	bne.n	80182c2 <_isatty_r+0x1a>
 80182bc:	682b      	ldr	r3, [r5, #0]
 80182be:	b103      	cbz	r3, 80182c2 <_isatty_r+0x1a>
 80182c0:	6023      	str	r3, [r4, #0]
 80182c2:	bd38      	pop	{r3, r4, r5, pc}
 80182c4:	2000db88 	.word	0x2000db88

080182c8 <_lseek_r>:
 80182c8:	b538      	push	{r3, r4, r5, lr}
 80182ca:	4d07      	ldr	r5, [pc, #28]	; (80182e8 <_lseek_r+0x20>)
 80182cc:	4604      	mov	r4, r0
 80182ce:	4608      	mov	r0, r1
 80182d0:	4611      	mov	r1, r2
 80182d2:	2200      	movs	r2, #0
 80182d4:	602a      	str	r2, [r5, #0]
 80182d6:	461a      	mov	r2, r3
 80182d8:	f7e8 fd10 	bl	8000cfc <_lseek>
 80182dc:	1c43      	adds	r3, r0, #1
 80182de:	d102      	bne.n	80182e6 <_lseek_r+0x1e>
 80182e0:	682b      	ldr	r3, [r5, #0]
 80182e2:	b103      	cbz	r3, 80182e6 <_lseek_r+0x1e>
 80182e4:	6023      	str	r3, [r4, #0]
 80182e6:	bd38      	pop	{r3, r4, r5, pc}
 80182e8:	2000db88 	.word	0x2000db88

080182ec <__malloc_lock>:
 80182ec:	4801      	ldr	r0, [pc, #4]	; (80182f4 <__malloc_lock+0x8>)
 80182ee:	f7ff bac5 	b.w	801787c <__retarget_lock_acquire_recursive>
 80182f2:	bf00      	nop
 80182f4:	2000db90 	.word	0x2000db90

080182f8 <__malloc_unlock>:
 80182f8:	4801      	ldr	r0, [pc, #4]	; (8018300 <__malloc_unlock+0x8>)
 80182fa:	f7ff bac0 	b.w	801787e <__retarget_lock_release_recursive>
 80182fe:	bf00      	nop
 8018300:	2000db90 	.word	0x2000db90

08018304 <_read_r>:
 8018304:	b538      	push	{r3, r4, r5, lr}
 8018306:	4d07      	ldr	r5, [pc, #28]	; (8018324 <_read_r+0x20>)
 8018308:	4604      	mov	r4, r0
 801830a:	4608      	mov	r0, r1
 801830c:	4611      	mov	r1, r2
 801830e:	2200      	movs	r2, #0
 8018310:	602a      	str	r2, [r5, #0]
 8018312:	461a      	mov	r2, r3
 8018314:	f7e8 fc92 	bl	8000c3c <_read>
 8018318:	1c43      	adds	r3, r0, #1
 801831a:	d102      	bne.n	8018322 <_read_r+0x1e>
 801831c:	682b      	ldr	r3, [r5, #0]
 801831e:	b103      	cbz	r3, 8018322 <_read_r+0x1e>
 8018320:	6023      	str	r3, [r4, #0]
 8018322:	bd38      	pop	{r3, r4, r5, pc}
 8018324:	2000db88 	.word	0x2000db88

08018328 <_raise_r>:
 8018328:	291f      	cmp	r1, #31
 801832a:	b538      	push	{r3, r4, r5, lr}
 801832c:	4604      	mov	r4, r0
 801832e:	460d      	mov	r5, r1
 8018330:	d904      	bls.n	801833c <_raise_r+0x14>
 8018332:	2316      	movs	r3, #22
 8018334:	6003      	str	r3, [r0, #0]
 8018336:	f04f 30ff 	mov.w	r0, #4294967295
 801833a:	bd38      	pop	{r3, r4, r5, pc}
 801833c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801833e:	b112      	cbz	r2, 8018346 <_raise_r+0x1e>
 8018340:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018344:	b94b      	cbnz	r3, 801835a <_raise_r+0x32>
 8018346:	4620      	mov	r0, r4
 8018348:	f000 f830 	bl	80183ac <_getpid_r>
 801834c:	462a      	mov	r2, r5
 801834e:	4601      	mov	r1, r0
 8018350:	4620      	mov	r0, r4
 8018352:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018356:	f000 b817 	b.w	8018388 <_kill_r>
 801835a:	2b01      	cmp	r3, #1
 801835c:	d00a      	beq.n	8018374 <_raise_r+0x4c>
 801835e:	1c59      	adds	r1, r3, #1
 8018360:	d103      	bne.n	801836a <_raise_r+0x42>
 8018362:	2316      	movs	r3, #22
 8018364:	6003      	str	r3, [r0, #0]
 8018366:	2001      	movs	r0, #1
 8018368:	e7e7      	b.n	801833a <_raise_r+0x12>
 801836a:	2400      	movs	r4, #0
 801836c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018370:	4628      	mov	r0, r5
 8018372:	4798      	blx	r3
 8018374:	2000      	movs	r0, #0
 8018376:	e7e0      	b.n	801833a <_raise_r+0x12>

08018378 <raise>:
 8018378:	4b02      	ldr	r3, [pc, #8]	; (8018384 <raise+0xc>)
 801837a:	4601      	mov	r1, r0
 801837c:	6818      	ldr	r0, [r3, #0]
 801837e:	f7ff bfd3 	b.w	8018328 <_raise_r>
 8018382:	bf00      	nop
 8018384:	20000078 	.word	0x20000078

08018388 <_kill_r>:
 8018388:	b538      	push	{r3, r4, r5, lr}
 801838a:	4d07      	ldr	r5, [pc, #28]	; (80183a8 <_kill_r+0x20>)
 801838c:	2300      	movs	r3, #0
 801838e:	4604      	mov	r4, r0
 8018390:	4608      	mov	r0, r1
 8018392:	4611      	mov	r1, r2
 8018394:	602b      	str	r3, [r5, #0]
 8018396:	f7e8 fc35 	bl	8000c04 <_kill>
 801839a:	1c43      	adds	r3, r0, #1
 801839c:	d102      	bne.n	80183a4 <_kill_r+0x1c>
 801839e:	682b      	ldr	r3, [r5, #0]
 80183a0:	b103      	cbz	r3, 80183a4 <_kill_r+0x1c>
 80183a2:	6023      	str	r3, [r4, #0]
 80183a4:	bd38      	pop	{r3, r4, r5, pc}
 80183a6:	bf00      	nop
 80183a8:	2000db88 	.word	0x2000db88

080183ac <_getpid_r>:
 80183ac:	f7e8 bc22 	b.w	8000bf4 <_getpid>

080183b0 <_init>:
 80183b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183b2:	bf00      	nop
 80183b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80183b6:	bc08      	pop	{r3}
 80183b8:	469e      	mov	lr, r3
 80183ba:	4770      	bx	lr

080183bc <_fini>:
 80183bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183be:	bf00      	nop
 80183c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80183c2:	bc08      	pop	{r3}
 80183c4:	469e      	mov	lr, r3
 80183c6:	4770      	bx	lr
